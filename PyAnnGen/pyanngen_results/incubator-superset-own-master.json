{
    "incubator-superset-own-master/setup.py": {
        "get_git_sha": {
            "name": "get_git_sha",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/docs/conf.py": {},
    "incubator-superset-own-master/scripts/permissions_cleanup.py": {
        "cleanup_permissions": {
            "name": "cleanup_permissions",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/cli.py": {
        "create_app": {
            "name": "create_app",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "script_info": [
                    "None",
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[str,str]]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "make_shell_context": {
            "name": "make_shell_context",
            "location": 45,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]",
                "Set[cmk.utils.type_defs.HostName]",
                "Dict[str, List[Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug_run": {
            "name": "debug_run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "List[pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "List[pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ],
                "use_reloader": [
                    "str",
                    "bool",
                    "List[pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "console_log_run": {
            "name": "console_log_run",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "list"
                ],
                "port": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "list"
                ],
                "use_reloader": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "list"
                ]
            }
        },
        "runserver": {
            "name": "runserver",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "Optional[str]",
                    "BinaryIO",
                    "str"
                ],
                "console_log": [
                    "bool",
                    "Optional[str]",
                    "BinaryIO",
                    "str"
                ],
                "use_reloader": [
                    "bool",
                    "int",
                    "Optional[Callable[[], Any]]",
                    "Optional[datetime.timedelta]"
                ],
                "address": [
                    "bool",
                    "bytes",
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "port": [
                    "bool",
                    "Optional[int]",
                    "Sequence[str]"
                ],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]"
                ],
                "workers": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]"
                ],
                "socket": [
                    "bool",
                    "bytes",
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "jumeaux.models.Notifier",
                    "int",
                    "tuple"
                ]
            }
        },
        "load_examples_run": {
            "name": "load_examples_run",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "load_test_data": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "load_examples": {
            "name": "load_examples",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "load_test_data": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "refresh_druid": {
            "name": "refresh_druid",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "datasource": [
                    "str",
                    "bool",
                    "IO[str]"
                ],
                "merge": [
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "import_dashboards": {
            "name": "import_dashboards",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list",
                    "pathlib.Path",
                    "IO[bytes]"
                ],
                "recursive": [
                    "pathlib.Path",
                    "str",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "export_dashboards": {
            "name": "export_dashboards",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "print_stdout": [
                    "str",
                    "TextIO",
                    "bool",
                    "autorecurse.gnumake.data.Makefile",
                    "List[str]"
                ],
                "dashboard_file": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "import_datasources": {
            "name": "import_datasources",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list",
                    "pathlib.Path",
                    "IO[bytes]"
                ],
                "sync": [
                    "pathlib.Path",
                    "Optional[str]",
                    "dict",
                    "str"
                ],
                "recursive": [
                    "pathlib.Path",
                    "str",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "export_datasources": {
            "name": "export_datasources",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "print_stdout": [
                    "bool",
                    "str",
                    "int"
                ],
                "datasource_file": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]"
                ],
                "back_references": [
                    "bool",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "core.board.Board",
                    "Dict[str, Any]",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "include_defaults": [
                    "bool",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "core.board.Board",
                    "Dict[str, Any]",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "export_datasource_schema": {
            "name": "export_datasource_schema",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "back_references": [
                    "bool",
                    "List[List[str]]",
                    "Tuple['cirq.Qid']",
                    "OrderedDict"
                ]
            }
        },
        "update_datasources_cache": {
            "name": "update_datasources_cache",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "worker": {
            "name": "worker",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "workers": [
                    "int",
                    "mode.utils.Counter[faustypes.TP]",
                    "bytes",
                    "str",
                    "dict",
                    "Union[Dict, Tuple]"
                ]
            }
        },
        "flower": {
            "name": "flower",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "address": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "load_test_users": {
            "name": "load_test_users",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_test_users_run": {
            "name": "load_test_users_run",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "console_log_run.run": {
            "name": "run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/config.py": {},
    "incubator-superset-own-master/superset/dataframe.py": {
        "dedup": {
            "name": "dedup",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "l": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ],
                "suffix": [
                    "Text",
                    "str",
                    "int",
                    "bool"
                ],
                "case_sensitive": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "Optional[List[str]]",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "SupersetDataFrame.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "Sequence[int]",
                    "str",
                    "Dict[str, Any]",
                    "numpy.ndarray",
                    "Dict[str, List[int]]"
                ],
                "cursor_description": [
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, Dict[str, int]]",
                    "dict"
                ],
                "db_engine_spec": [
                    "int",
                    "Dict[str, kedro.io.core.AbstractDataSet]",
                    "Tuple[List[int], int]",
                    "Tuple[int, str]"
                ]
            }
        },
        "SupersetDataFrame.size": {
            "name": "size",
            "location": 103,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrame.data": {
            "name": "data",
            "location": 107,
            "return": [
                "List",
                "Dict[str,List[int]]",
                "str",
                "Optional[float]",
                "Dict",
                "float",
                "Set[cmk.utils.type_defs.HostName]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrame.db_type": {
            "name": "db_type",
            "location": 122,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "Optional[List[Any]]",
                    "Optional[Any]",
                    "dict"
                ],
                "dtype": [
                    "dict",
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "SupersetDataFrame.datetime_conversion_rate": {
            "name": "datetime_conversion_rate",
            "location": 130,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "memoryview",
                    "Optional[bytes]",
                    "str"
                ],
                "data_series": [
                    "int",
                    "memoryview",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "SupersetDataFrame.is_date": {
            "name": "is_date",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "np_dtype": [
                    "str",
                    "List[float]"
                ],
                "db_type_str": [
                    "Type",
                    "Optional[str]",
                    "Type[T]"
                ]
            }
        },
        "SupersetDataFrame.is_dimension": {
            "name": "is_dimension",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "dtype": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "column_name": [
                    "int",
                    "str"
                ]
            }
        },
        "SupersetDataFrame.is_id": {
            "name": "is_id",
            "location": 163,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Optional[Any]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "SupersetDataFrame.agg_func": {
            "name": "agg_func",
            "location": 167,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "dtype": [
                    "Optional[\"TypeResourceIdentifier\"]",
                    "utils.types.Vec3D",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "str"
                ],
                "column_name": [
                    "str",
                    "int"
                ]
            }
        },
        "SupersetDataFrame.columns": {
            "name": "columns",
            "location": 177,
            "return": [
                "Optional[str]",
                "None",
                "int",
                "List[dict[Text,]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrame.is_date.looks_daty": {
            "name": "looks_daty",
            "location": 145,
            "return": [
                "bool",
                "str",
                "Sequence[Sequence[T]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/db_engine_specs.py": {
        "_create_time_grains_tuple": {
            "name": "_create_time_grains_tuple",
            "location": 86,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "time_grains": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "bytes",
                    "str"
                ],
                "time_grain_functions": [
                    "Mapping[str, utils.mssql_counters.Section]",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "blacklist": [
                    "static_frame.core.util.AnyCallable",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "BaseEngineSpec.get_time_expr": {
            "name": "get_time_expr",
            "location": 120,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "cls": [
                    "mypy.types.Type"
                ],
                "expr": [
                    "mypy.types.Type"
                ],
                "pdf": [
                    "bool",
                    "int",
                    "Callable[[int], Any]",
                    "Callable[[str], Any]",
                    "Optional[Any]"
                ],
                "time_grain": [
                    "bool",
                    "int",
                    "Callable[[int], Any]",
                    "Callable[[str], Any]",
                    "Optional[Any]"
                ],
                "grain": [
                    "int",
                    "Union[str, int]",
                    "float",
                    "str",
                    "AnyStr"
                ]
            }
        },
        "BaseEngineSpec.get_time_grains": {
            "name": "get_time_grains",
            "location": 132,
            "return": [
                "int",
                "app.models.user.UserInDB",
                "core.Year.Month",
                "Iterable[Any]",
                "Type[T]"
            ],
            "arguments": {
                "cls": [
                    "Union[Dict, Tuple]",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseEngineSpec.make_select_compatible": {
            "name": "make_select_compatible",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "groupby_exprs": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "select_exprs": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseEngineSpec.fetch_data": {
            "name": "fetch_data",
            "location": 148,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "cursor": [
                    "int",
                    "dict",
                    "Type",
                    "Iterable['Notification']"
                ],
                "limit": [
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "List[int]"
                ]
            }
        },
        "BaseEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "BaseEngineSpec.epoch_ms_to_dttm": {
            "name": "epoch_ms_to_dttm",
            "location": 160,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "BaseEngineSpec.get_datatype": {
            "name": "get_datatype",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "type_code": [
                    "int",
                    "str",
                    "abilian.core.entities.Entity"
                ]
            }
        },
        "BaseEngineSpec.extra_table_metadata": {
            "name": "extra_table_metadata",
            "location": 169,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ],
                "database": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ],
                "table_name": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ],
                "schema_name": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ]
            }
        },
        "BaseEngineSpec.apply_limit_to_sql": {
            "name": "apply_limit_to_sql",
            "location": 174,
            "return": [
                "Dict[str, int]",
                "str",
                "List[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Callable[[str], int]",
                    "Callable"
                ],
                "sql": [
                    "str",
                    "Type[Any]"
                ],
                "limit": [
                    "str",
                    "Callable"
                ],
                "database": [
                    "str",
                    "Type[object]",
                    "Callable",
                    "Dict[str, Union[str, int, bool]]"
                ]
            }
        },
        "BaseEngineSpec.get_limit_from_sql": {
            "name": "get_limit_from_sql",
            "location": 192,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "Dict[str, str]",
                "Dict[str, Any]",
                "apistar.types.WSGIEnviron",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "Type[T]"
                ],
                "sql": [
                    "str",
                    "qcodes.utils.metadata.Metadatable",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BaseEngineSpec.get_query_with_new_limit": {
            "name": "get_query_with_new_limit",
            "location": 197,
            "return": [
                "core.models.User",
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "static_frame.core.util.AnyCallable",
                    "sqlalchemy.engine.reflection.Inspector"
                ],
                "sql": [
                    "str",
                    "dict",
                    "types.ModuleType",
                    "qcodes.utils.metadata.Metadatable",
                    "Union[str, bytes]"
                ],
                "limit": [
                    "Optional[str]",
                    "int",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "BaseEngineSpec.csv_to_df": {
            "name": "csv_to_df",
            "location": 202,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {}
        },
        "BaseEngineSpec.df_to_db": {
            "name": "df_to_db",
            "location": 213,
            "return": [],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "List[Dict]"
                ],
                "table": [
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "Optional[pandas.DataFrame]",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseEngineSpec.create_table_from_csv": {
            "name": "create_table_from_csv",
            "location": 222,
            "return": [],
            "arguments": {
                "form": [
                    "Optional[str]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "str"
                ],
                "table": [
                    "Optional[str]",
                    "str",
                    "core_lib.core.models.Venue",
                    "sqlalchemy.Table",
                    "int"
                ]
            }
        },
        "BaseEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "BaseEngineSpec.fetch_result_sets": {
            "name": "fetch_result_sets",
            "location": 266,
            "return": [
                "sqlalchemy.MetaData",
                "Dict[str, str]",
                "Dict[str, float]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes"
                ],
                "db": [
                    "bytes",
                    "str",
                    "int",
                    "dict"
                ],
                "datasource_type": [
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, str]",
                    "int",
                    "type",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "BaseEngineSpec.handle_cursor": {
            "name": "handle_cursor",
            "location": 295,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool",
                    "dict"
                ],
                "cursor": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool",
                    "dict"
                ],
                "query": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool",
                    "dict"
                ],
                "session": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseEngineSpec.extract_error_message": {
            "name": "extract_error_message",
            "location": 304,
            "return": [
                "Dict[str, Any]",
                "sqlalchemy.MetaData",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "vimiv.utils.customtypes.FuncT",
                    "float"
                ],
                "e": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseEngineSpec.adjust_database_uri": {
            "name": "adjust_database_uri",
            "location": 309,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "uri": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "selected_schema": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseEngineSpec.patch": {
            "name": "patch",
            "location": 330,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseEngineSpec.get_schema_names": {
            "name": "get_schema_names",
            "location": 334,
            "return": [
                "str",
                "Dict[str, Any]",
                "raiden.utils.Address",
                "dict",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ],
                "inspector": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "Union[dict, list]"
                ]
            }
        },
        "BaseEngineSpec.get_table_names": {
            "name": "get_table_names",
            "location": 338,
            "return": [
                "str",
                "pandas.DataFrame",
                "float",
                "topicdb.core.models.language.Language"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.engine.reflection.Inspector",
                    "int"
                ],
                "inspector": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseEngineSpec.get_view_names": {
            "name": "get_view_names",
            "location": 342,
            "return": [
                "str",
                "Dict[str, Any]",
                "raiden.utils.Address",
                "dict",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ],
                "inspector": [
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "Callable"
                ],
                "schema": [
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "Callable"
                ]
            }
        },
        "BaseEngineSpec.where_latest_partition": {
            "name": "where_latest_partition",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ],
                "table_name": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ],
                "schema": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ],
                "database": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ],
                "qry": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ],
                "columns": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "BaseEngineSpec._get_fields": {
            "name": "_get_fields",
            "location": 351,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Tuple[str, str]]",
                "Optional[Union[int, str]]"
            ],
            "arguments": {
                "cls": [
                    "List[dict]",
                    "List[Dict[str, Any]]",
                    "str",
                    "bool",
                    "dict"
                ],
                "cols": [
                    "dict"
                ]
            }
        },
        "BaseEngineSpec.select_star": {
            "name": "select_star",
            "location": 355,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "my_db": [
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "table_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "engine": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "schema": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "limit": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "show_cols": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "indent": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[float, float]",
                    "float"
                ],
                "latest_partition": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "cols": [
                    "str",
                    "bytes",
                    "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseEngineSpec.modify_url_for_impersonation": {
            "name": "modify_url_for_impersonation",
            "location": 386,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ],
                "url": [
                    "reader_server.types.User",
                    "bool",
                    "int",
                    "dict"
                ],
                "impersonate_user": [
                    "Optional[str]",
                    "app.models.models.User",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "username": [
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseEngineSpec.get_configuration_for_impersonation": {
            "name": "get_configuration_for_impersonation",
            "location": 397,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "uri": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "impersonate_user": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "username": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "BaseEngineSpec.execute": {
            "name": "execute",
            "location": 409,
            "return": [],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "cursor": [
                    "type",
                    "int",
                    "bool"
                ],
                "query": [
                    "bytes",
                    "sqlalchemy.orm.Query",
                    "list",
                    "callable",
                    "sqlalchemy.engine.Engine"
                ]
            }
        },
        "BaseEngineSpec.make_label_compatible": {
            "name": "make_label_compatible",
            "location": 415,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "Dict[str, Iterable[Any]]",
                    "Dict[str, Any]",
                    "sqlalchemy.Column",
                    "types.ModuleType"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "BaseEngineSpec.get_sqla_column_type": {
            "name": "get_sqla_column_type",
            "location": 432,
            "return": [
                "str",
                "Type[Any]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "gluonts.core.componenDType",
                    "List[Dict[str, Any]]",
                    "int",
                    "type"
                ],
                "type_": [
                    "str",
                    "gluonts.core.componenDType",
                    "List[Dict[str, Any]]",
                    "int",
                    "type"
                ]
            }
        },
        "BaseEngineSpec.mutate_label": {
            "name": "mutate_label",
            "location": 441,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool",
                    "jgikbase.idmapping.core.tokens.Token",
                    "List[str]",
                    "Iterable[Any]",
                    "Optional[Any]"
                ]
            }
        },
        "BaseEngineSpec.truncate_label": {
            "name": "truncate_label",
            "location": 454,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "flask.Response",
                    "Tuple[int, int]",
                    "List[int]",
                    "float"
                ],
                "label": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "OrderedDict",
                    "List[str]"
                ]
            }
        },
        "BaseEngineSpec.get_timestamp_column": {
            "name": "get_timestamp_column",
            "location": 467,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "expression": [
                    "bool",
                    "click.core.Context",
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "column_name": [
                    "bool",
                    "click.core.Context",
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "PostgresBaseEngineSpec.fetch_data": {
            "name": "fetch_data",
            "location": 492,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "List[int]"
                ],
                "cursor": [
                    "str"
                ],
                "limit": [
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "List[int]"
                ]
            }
        },
        "PostgresBaseEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 500,
            "return": [
                "List[int]",
                "str",
                "int",
                "List[dict]",
                "List[Dict]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "PostgresBaseEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 504,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "PostgresEngineSpec.get_table_names": {
            "name": "get_table_names",
            "location": 513,
            "return": [
                "bool",
                "str",
                "pandas.DataFrame",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.engine.reflection.Inspector",
                    "int"
                ],
                "inspector": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "schema": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "PostgresEngineSpec.get_timestamp_column": {
            "name": "get_timestamp_column",
            "location": 520,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "Tuple[str]",
                    "click.core.Context",
                    "tuple",
                    "Optional[float]",
                    "bool"
                ],
                "column_name": [
                    "str",
                    "Optional[str]",
                    "click.core.Context"
                ]
            }
        },
        "SnowflakeEngineSpec.adjust_database_uri": {
            "name": "adjust_database_uri",
            "location": 556,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "uri": [
                    "sqlalchemy.engine.url.URL",
                    "str",
                    "Optional[int]",
                    "Iterable[str]",
                    "app.models.dto.CoordinateDTO",
                    "List[app.models.Question]"
                ],
                "selected_schema": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "RedshiftEngineSpec.mutate_label": {
            "name": "mutate_label",
            "location": 574,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Set[str]"
                ]
            }
        },
        "OracleEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 602,
            "return": [
                "str",
                "dict",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "Db2EngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 640,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "type",
                "Hashable"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "Db2EngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 644,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "SqliteEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 663,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "SqliteEngineSpec.fetch_result_sets": {
            "name": "fetch_result_sets",
            "location": 667,
            "return": [
                "sqlalchemy.MetaData",
                "Dict[str, str]",
                "Dict[str, float]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes"
                ],
                "db": [
                    "bytes",
                    "str",
                    "int",
                    "dict"
                ],
                "datasource_type": [
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, str]",
                    "int",
                    "type",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "SqliteEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 691,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "SqliteEngineSpec.get_table_names": {
            "name": "get_table_names",
            "location": 698,
            "return": [
                "str",
                "pandas.DataFrame",
                "float",
                "topicdb.core.models.language.Language"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.engine.reflection.Inspector",
                    "int"
                ],
                "inspector": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "types.ModuleType"
                ],
                "schema": [
                    "str",
                    "sqlalchemy.engine.reflection.Inspector",
                    "int"
                ]
            }
        },
        "MySQLEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 732,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Type"
                ],
                "dttm": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MySQLEngineSpec.adjust_database_uri": {
            "name": "adjust_database_uri",
            "location": 739,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "uri": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ],
                "selected_schema": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "MySQLEngineSpec.get_datatype": {
            "name": "get_datatype",
            "location": 745,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "type_code": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MySQLEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 762,
            "return": [
                "str",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "MySQLEngineSpec.extract_error_message": {
            "name": "extract_error_message",
            "location": 766,
            "return": [
                "str",
                "pandas.DataFrame",
                "sqlalchemy.engine.base.Engine",
                "Sequence"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "vimiv.utils.customtypes.FuncT",
                    "float"
                ],
                "e": [
                    "tuple",
                    "int",
                    "str",
                    "wemake_python_styleguide.types.AnyFunctionDefAndLambda"
                ]
            }
        },
        "PrestoEngineSpec.get_view_names": {
            "name": "get_view_names",
            "location": 799,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ],
                "inspector": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ],
                "schema": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "PrestoEngineSpec.adjust_database_uri": {
            "name": "adjust_database_uri",
            "location": 809,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "uri": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ],
                "selected_schema": [
                    "str",
                    "Callable[[str], Any]",
                    "List[int]",
                    "Optional[Callable]"
                ]
            }
        },
        "PrestoEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 820,
            "return": [
                "str",
                "List[str]",
                "Optional[\"LocalizedString\"]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str"
                ]
            }
        },
        "PrestoEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 829,
            "return": [
                "str",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "PrestoEngineSpec.fetch_result_sets": {
            "name": "fetch_result_sets",
            "location": 833,
            "return": [
                "str",
                "List[int]",
                "List[sqlalchemy.engine.resulRowProxy]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes"
                ],
                "db": [
                    "str",
                    "Optional[str]",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "Optional[Dict[str, bool]]"
                ],
                "datasource_type": [
                    "str",
                    "Optional[str]",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "Optional[Dict[str, bool]]"
                ]
            }
        },
        "PrestoEngineSpec.extra_table_metadata": {
            "name": "extra_table_metadata",
            "location": 853,
            "return": [
                "bool",
                "pandas.DataFrame",
                "cmk.utils.type_defs.HostName",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "database": [
                    "str",
                    "Dict[str, Any]"
                ],
                "table_name": [
                    "str"
                ],
                "schema_name": [
                    "str"
                ]
            }
        },
        "PrestoEngineSpec.handle_cursor": {
            "name": "handle_cursor",
            "location": 873,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool",
                    "dict"
                ],
                "cursor": [
                    "str",
                    "mypy.types.CallableType",
                    "bool"
                ],
                "query": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "app.models.Journey"
                ],
                "session": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "PrestoEngineSpec.extract_error_message": {
            "name": "extract_error_message",
            "location": 912,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "vimiv.utils.customtypes.FuncT",
                    "float"
                ],
                "e": [
                    "Type"
                ]
            }
        },
        "PrestoEngineSpec._partition_query": {
            "name": "_partition_query",
            "location": 933,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "limit": [
                    "str",
                    "bool",
                    "pyspark.sql.Column",
                    "Sequence[str]"
                ],
                "order_by": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "filters": [
                    "Optional[dict]",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "PrestoEngineSpec.where_latest_partition": {
            "name": "where_latest_partition",
            "location": 972,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "table_name": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "schema": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "database": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "qry": [
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "columns": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "PrestoEngineSpec._latest_partition_from_df": {
            "name": "_latest_partition_from_df",
            "location": 986,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "Iterator[int]",
                    "Optional[str]"
                ],
                "df": [
                    "int",
                    "List[Match]",
                    "Tuple[str, int, str]",
                    "Type",
                    "tuple",
                    "T",
                    "dict"
                ]
            }
        },
        "PrestoEngineSpec.latest_partition": {
            "name": "latest_partition",
            "location": 992,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]"
                ],
                "table_name": [
                    "str",
                    "Callable[[Any], bool]",
                    "Callable"
                ],
                "schema": [
                    "str",
                    "Optional[Any]"
                ],
                "database": [
                    "str",
                    "Optional[Any]"
                ],
                "show_first": [
                    "bool",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "str"
                ]
            }
        },
        "PrestoEngineSpec.latest_sub_partition": {
            "name": "latest_sub_partition",
            "location": 1023,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "table_name": [
                    "str",
                    "Callable",
                    "Callable[[Any], bool]"
                ],
                "schema": [
                    "str",
                    "Optional[Any]"
                ],
                "database": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "HiveEngineSpec.patch": {
            "name": "patch",
            "location": 1097,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "HiveEngineSpec.fetch_result_sets": {
            "name": "fetch_result_sets",
            "location": 1111,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes"
                ],
                "db": [
                    "Dict[str, Any]",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription",
                    "List[Dict]"
                ],
                "datasource_type": [
                    "Dict[str, Any]",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription",
                    "List[Dict]"
                ]
            }
        },
        "HiveEngineSpec.fetch_data": {
            "name": "fetch_data",
            "location": 1116,
            "return": [
                "utils.diskstaSection",
                "List[dict]",
                "float",
                "List[List[int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "List[Callable]",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str",
                    "pandas.DataFrame"
                ],
                "cursor": [
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "Type['Declared']",
                    "Dict[str, Any]",
                    "werkzeug.exceptions.HTTPException",
                    "bool",
                    "List[dict]"
                ],
                "limit": [
                    "int",
                    "bytes",
                    "List[Callable]",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "HiveEngineSpec.create_table_from_csv": {
            "name": "create_table_from_csv",
            "location": 1128,
            "return": [],
            "arguments": {
                "form": [
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ],
                "table": [
                    "bool",
                    "sqlalchemy.orm.mapper.Mapper",
                    "Callable",
                    "str"
                ]
            }
        },
        "HiveEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1201,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str"
                ]
            }
        },
        "HiveEngineSpec.adjust_database_uri": {
            "name": "adjust_database_uri",
            "location": 1211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "uri": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ],
                "selected_schema": [
                    "sqlalchemy.engine.url.URL",
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "HiveEngineSpec.extract_error_message": {
            "name": "extract_error_message",
            "location": 1217,
            "return": [
                "str",
                "pandas.DataFrame",
                "sqlalchemy.engine.base.Engine",
                "Sequence"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "vimiv.utils.customtypes.FuncT",
                    "float"
                ],
                "e": [
                    "Exception",
                    "str",
                    "int",
                    "Callable",
                    "hashdecoder.lib.types.hash_type"
                ]
            }
        },
        "HiveEngineSpec.progress": {
            "name": "progress",
            "location": 1225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "re.Match[str]"
                ],
                "log_lines": [
                    "List[str]",
                    "str",
                    "Dict[str, object]",
                    "List[object]",
                    "Sequence[Union[str, int]]",
                    "Type[Exception]",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "HiveEngineSpec.get_tracking_url": {
            "name": "get_tracking_url",
            "location": 1258,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "T",
                    "Optional[List[Any]]",
                    "Type[T]",
                    "int"
                ],
                "log_lines": [
                    "List[str]",
                    "bool",
                    "T",
                    "Optional[List[Any]]",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "HiveEngineSpec.handle_cursor": {
            "name": "handle_cursor",
            "location": 1265,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "cursor": [
                    "Callable",
                    "str",
                    "Optional[Tuple[str, int]]",
                    "int"
                ],
                "query": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ],
                "session": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "HiveEngineSpec.where_latest_partition": {
            "name": "where_latest_partition",
            "location": 1316,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "table_name": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "schema": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "database": [
                    "bool",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "qry": [
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "columns": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "HiveEngineSpec.latest_sub_partition": {
            "name": "latest_sub_partition",
            "location": 1330,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "List[List[str]]",
                    "Optional[Any]",
                    "Iterable"
                ],
                "table_name": [
                    "str",
                    "List[List[str]]",
                    "Optional[Any]",
                    "Iterable"
                ],
                "schema": [
                    "str",
                    "List[List[str]]",
                    "Optional[Any]",
                    "Iterable"
                ],
                "database": [
                    "str",
                    "List[List[str]]",
                    "Optional[Any]",
                    "Iterable"
                ]
            }
        },
        "HiveEngineSpec._latest_partition_from_df": {
            "name": "_latest_partition_from_df",
            "location": 1335,
            "return": [
                "utils.Node",
                "List[int]",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "Iterator[int]",
                    "Optional[str]"
                ],
                "df": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HiveEngineSpec._partition_query": {
            "name": "_partition_query",
            "location": 1340,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "table_name": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "limit": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "order_by": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "filters": [
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]",
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "HiveEngineSpec.modify_url_for_impersonation": {
            "name": "modify_url_for_impersonation",
            "location": 1345,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ],
                "url": [
                    "bool",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ],
                "impersonate_user": [
                    "bool",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ],
                "username": [
                    "bool",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ]
            }
        },
        "HiveEngineSpec.get_configuration_for_impersonation": {
            "name": "get_configuration_for_impersonation",
            "location": 1357,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "uri": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "impersonate_user": [
                    "str",
                    "Dict[str, object]",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType",
                    "Optional[Callable[..., static_frame.core.index_base.IndexBase]]"
                ],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "HiveEngineSpec.execute": {
            "name": "execute",
            "location": 1377,
            "return": [],
            "arguments": {
                "cursor": [
                    "str",
                    "List[str]",
                    "sqlalchemy.orm.session.Session"
                ],
                "query": [
                    "str",
                    "List[str]",
                    "sqlalchemy.orm.session.Session"
                ],
                "async_": [
                    "str",
                    "list",
                    "callable",
                    "int"
                ]
            }
        },
        "MssqlEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1405,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "dttm": [
                    "str",
                    "Callable[..., T]",
                    "list",
                    "dict"
                ]
            }
        },
        "MssqlEngineSpec.fetch_data": {
            "name": "fetch_data",
            "location": 1409,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "starfish.types.Axes",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "cursor": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "limit": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "MssqlEngineSpec.get_sqla_column_type": {
            "name": "get_sqla_column_type",
            "location": 1416,
            "return": [
                "mypy.types.Type",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "gluonts.core.componenDType",
                    "List[Dict[str, Any]]",
                    "int",
                    "type"
                ],
                "type_": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "AthenaEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1442,
            "return": [
                "str",
                "List[str]",
                "Optional[\"LocalizedString\"]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str"
                ]
            }
        },
        "AthenaEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 1452,
            "return": [
                "str",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "AthenaEngineSpec.mutate_label": {
            "name": "mutate_label",
            "location": 1456,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Set[str]"
                ]
            }
        },
        "PinotEngineSpec.get_time_expr": {
            "name": "get_time_expr",
            "location": 1484,
            "return": [
                "str",
                "Tuple[str, str]",
                "recidiviz.ingesscrape.constants.ScrapeType"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable",
                    "Type[types.C]",
                    "static_frame.core.util.DtypesSpecifier",
                    "Hashable",
                    "Optional[str]",
                    "type"
                ],
                "expr": [
                    "float",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "pdf": [
                    "Union[int, str]",
                    "str",
                    "bool",
                    "Tuple[int]",
                    "int"
                ],
                "time_grain": [
                    "str",
                    "int"
                ],
                "grain": [
                    "bool",
                    "int",
                    "Callable[[int], Any]",
                    "Callable[[str], Any]",
                    "Optional[Any]"
                ]
            }
        },
        "PinotEngineSpec.make_select_compatible": {
            "name": "make_select_compatible",
            "location": 1500,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "groupby_exprs": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "select_exprs": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "ClickHouseEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1537,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str"
                ]
            }
        },
        "BQEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1579,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "BQEngineSpec.fetch_data": {
            "name": "fetch_data",
            "location": 1586,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "starfish.types.Axes",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "cursor": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "limit": [
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "BQEngineSpec.mutate_label": {
            "name": "mutate_label",
            "location": 1593,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[Optional[str]]",
                    "apps.monero.xmr.types.Ge25519",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "BQEngineSpec.truncate_label": {
            "name": "truncate_label",
            "location": 1616,
            "return": [
                "django.db.migrations.state.StateApps",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Tuple[str]",
                    "list",
                    "Set[str]",
                    "bool"
                ],
                "label": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BQEngineSpec.extra_table_metadata": {
            "name": "extra_table_metadata",
            "location": 1624,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ],
                "database": [
                    "str"
                ],
                "table_name": [
                    "str"
                ],
                "schema_name": [
                    "str"
                ]
            }
        },
        "BQEngineSpec._get_fields": {
            "name": "_get_fields",
            "location": 1646,
            "return": [
                "mypy.types.Type",
                "Optional[Dict[str, str]]",
                "dict",
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[dict]",
                    "List[Dict[str, Any]]",
                    "str",
                    "bool",
                    "dict"
                ],
                "cols": [
                    "Dict[str, Any]",
                    "werkzeug.datastructures.MultiDict",
                    "str"
                ]
            }
        },
        "ImpalaEngineSpec.epoch_to_dttm": {
            "name": "epoch_to_dttm",
            "location": 1676,
            "return": [
                "str",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "ImpalaEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1680,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImpalaEngineSpec.get_schema_names": {
            "name": "get_schema_names",
            "location": 1687,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.engine.reflection.Inspector",
                    "str",
                    "Dict[int, str]",
                    "static_frame.core.util.AnyCallable",
                    "bool",
                    "List[dict]"
                ],
                "inspector": [
                    "bytes",
                    "str",
                    "Callable",
                    "T",
                    "List[str]"
                ]
            }
        },
        "KylinEngineSpec.convert_dttm": {
            "name": "convert_dttm",
            "location": 1739,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "List[Dict[str, Any]]"
                ],
                "target_type": [
                    "str",
                    "types.CodeType",
                    "Optional[str]",
                    "float"
                ],
                "dttm": [
                    "str"
                ]
            }
        },
        "BaseEngineSpec.create_table_from_csv._allowed_file": {
            "name": "_allowed_file",
            "location": 223,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HiveEngineSpec.create_table_from_csv.convert_to_hive_type": {
            "name": "convert_to_hive_type",
            "location": 1130,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "col_type": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/exceptions.py": {
        "SupersetException.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "SupersetSecurityException.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "dict",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Callable[[Dict], None]"
                ],
                "link": [
                    "None",
                    "List[str]",
                    "str",
                    "Sequence",
                    "int",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/extract_table_names.py": {
        "is_subselect": {
            "name": "is_subselect",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "parsed": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "extract_from_part": {
            "name": "extract_from_part",
            "location": 44,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "parsed": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "extract_table_identifiers": {
            "name": "extract_table_identifiers",
            "location": 59,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "token_stream": [
                    "List[str]",
                    "Optional[Container[str]]",
                    "int"
                ]
            }
        },
        "extract_tables": {
            "name": "extract_tables",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "bytes",
                    "Tuple[str]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/forms.py": {
        "filter_not_empty_values": {
            "name": "filter_not_empty_values",
            "location": 50,
            "return": [
                "typing.Optional[list]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "CommaSeparatedListField._value": {
            "name": "_value",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedListField.process_formdata": {
            "name": "process_formdata",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valuelist": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "CsvToDatabaseForm.csv_allowed_dbs": {
            "name": "csv_allowed_dbs",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "CsvToDatabaseForm.at_least_one_schema_is_allowed": {
            "name": "at_least_one_schema_is_allowed",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": []
            }
        }
    },
    "incubator-superset-own-master/superset/jinja_context.py": {
        "url_param": {
            "name": "url_param",
            "location": 44,
            "return": [
                "None",
                "Optional[str]",
                "app.domain.common.TimeWindow",
                "Optional[Dict[str,Any]]",
                "Dict[int,dict]",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "param": [
                    "str",
                    "Tuple[int, int]",
                    "type",
                    "tuple",
                    "Callable",
                    "dict",
                    "float"
                ],
                "default": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Tuple[cirq.Qid]",
                    "Dict"
                ]
            }
        },
        "current_user_id": {
            "name": "current_user_id",
            "location": 73,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "current_username": {
            "name": "current_username",
            "location": 79,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "filter_values": {
            "name": "filter_values",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "column": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "float"
                ],
                "default": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "datetime.date",
                    "Optional[dict]"
                ]
            }
        },
        "get_template_processor": {
            "name": "get_template_processor",
            "location": 217,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "table": [
                    "None",
                    "str",
                    "Set",
                    "Union[int,str]"
                ],
                "query": [
                    "None",
                    "str",
                    "Set",
                    "Union[int,str]"
                ]
            }
        },
        "BaseTemplateProcessor.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "None",
                    "Set[str]",
                    "Tuple[float,float]",
                    "str"
                ],
                "query": [
                    "None"
                ],
                "table": [
                    "None",
                    "Set[str]",
                    "Tuple[float,float]",
                    "str"
                ]
            }
        },
        "BaseTemplateProcessor.process_template": {
            "name": "process_template",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "PrestoTemplateProcessor._schema_table": {
            "name": "_schema_table",
            "location": 186,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PrestoTemplateProcessor.latest_partition": {
            "name": "latest_partition",
            "location": 191,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrestoTemplateProcessor.latest_sub_partition": {
            "name": "latest_sub_partition",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/legacy.py": {
        "cast_filter_data": {
            "name": "cast_filter_data",
            "location": 26,
            "return": [
                "str",
                "set",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "form_data": [
                    "dict",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "cast_form_data": {
            "name": "cast_form_data",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "form_data": [
                    "dict",
                    "Tuple[dict, int]",
                    "\"ImageStack\""
                ]
            }
        },
        "update_time_range": {
            "name": "update_time_range",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "form_data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Sequence"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/security.py": {
        "SupersetSecurityManager.get_schema_perm": {
            "name": "get_schema_perm",
            "location": 98,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "bool"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "SupersetSecurityManager.can_access": {
            "name": "can_access",
            "location": 102,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "permission_name": [
                    "str",
                    "Optional[str]"
                ],
                "view_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SupersetSecurityManager.all_datasource_access": {
            "name": "all_datasource_access",
            "location": 109,
            "return": [
                "salon.models.Stylist",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.database_access": {
            "name": "database_access",
            "location": 113,
            "return": [
                "str",
                "bytes",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "SupersetSecurityManager.schema_access": {
            "name": "schema_access",
            "location": 120,
            "return": [
                "dict",
                "models.Subtask",
                "Dict[str, str]",
                "Dict[str, Any]",
                "str",
                "bool",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "SupersetSecurityManager.datasource_access": {
            "name": "datasource_access",
            "location": 127,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "SupersetSecurityManager.get_datasource_access_error_msg": {
            "name": "get_datasource_access_error_msg",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "dict",
                    "str",
                    "Callable"
                ]
            }
        },
        "SupersetSecurityManager.get_datasource_access_link": {
            "name": "get_datasource_access_link",
            "location": 137,
            "return": [
                "bool",
                "Dict[str, str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Callable",
                    "zerver.models.Realm",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SupersetSecurityManager.get_table_access_error_msg": {
            "name": "get_table_access_error_msg",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "SupersetSecurityManager.get_table_access_link": {
            "name": "get_table_access_link",
            "location": 145,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "tables": [
                    "str",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SupersetSecurityManager.datasource_access_by_name": {
            "name": "datasource_access_by_name",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "datasource_name": [
                    "Optional[str]",
                    "str",
                    "float",
                    "List[str]"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]",
                    "models.KippoProject",
                    "salon.models.Stylist",
                    "Dict[str,zam_repondeur.models.Amendement]"
                ]
            }
        },
        "SupersetSecurityManager.get_schema_and_table": {
            "name": "get_schema_and_table",
            "location": 167,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "table_in_query": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "schema": [
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "SupersetSecurityManager.datasource_access_by_fullname": {
            "name": "datasource_access_by_fullname",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "dict",
                    "sqlalchemy.MetaData"
                ],
                "table_in_query": [
                    "Exception",
                    "Mapping[str, T]",
                    "Dict[str, Any]"
                ],
                "schema": [
                    "sqlalchemy.Column",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "SupersetSecurityManager.rejected_datasources": {
            "name": "rejected_datasources",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "dict",
                    "bool",
                    "core.models.Grouping",
                    "core.models.Registration"
                ],
                "database": [
                    "str",
                    "logging.LogRecord"
                ],
                "schema": [
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "SupersetSecurityManager.user_datasource_perms": {
            "name": "user_datasource_perms",
            "location": 189,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.schemas_accessible_by_user": {
            "name": "schemas_accessible_by_user",
            "location": 199,
            "return": [
                "Union[(list, _T1)]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str"
                ],
                "schemas": [
                    "str",
                    "bool",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ],
                "hierarchical": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "SupersetSecurityManager.accessible_by_user": {
            "name": "accessible_by_user",
            "location": 228,
            "return": [
                "Union[(list, _T1)]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "GPy.models.GPRegression",
                    "Optional[str]",
                    "float",
                    "models.order.Order",
                    "sqlalchemy.orm.state.InstanceState",
                    "bytes"
                ],
                "datasource_names": [
                    "str"
                ],
                "schema": [
                    "None",
                    "str",
                    "List"
                ]
            }
        },
        "SupersetSecurityManager.merge_perm": {
            "name": "merge_perm",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission_name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "view_menu_name": [
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "SupersetSecurityManager.is_user_defined_permission": {
            "name": "is_user_defined_permission",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "SupersetSecurityManager.create_custom_permissions": {
            "name": "create_custom_permissions",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.create_missing_perms": {
            "name": "create_missing_perms",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.clean_perms": {
            "name": "clean_perms",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.sync_role_definitions": {
            "name": "sync_role_definitions",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetSecurityManager.set_role": {
            "name": "set_role",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "Optional[str]"
                ],
                "pvm_check": [
                    "bool",
                    "float"
                ]
            }
        },
        "SupersetSecurityManager.is_admin_only": {
            "name": "is_admin_only",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "str",
                    "float"
                ]
            }
        },
        "SupersetSecurityManager.is_alpha_only": {
            "name": "is_alpha_only",
            "location": 368,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "float",
                    "bool"
                ]
            }
        },
        "SupersetSecurityManager.is_admin_pvm": {
            "name": "is_admin_pvm",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "str",
                    "int"
                ]
            }
        },
        "SupersetSecurityManager.is_alpha_pvm": {
            "name": "is_alpha_pvm",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "str",
                    "int"
                ]
            }
        },
        "SupersetSecurityManager.is_gamma_pvm": {
            "name": "is_gamma_pvm",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "str",
                    "int"
                ]
            }
        },
        "SupersetSecurityManager.is_sql_lab_pvm": {
            "name": "is_sql_lab_pvm",
            "location": 387,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "SupersetSecurityManager.is_granter_pvm": {
            "name": "is_granter_pvm",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pvm": [
                    "str",
                    "salon.models.Stylist",
                    "daylighdb.models.Profile",
                    "blurr.core.schema_loader.SchemaLoader",
                    "dict"
                ]
            }
        },
        "SupersetSecurityManager.set_perm": {
            "name": "set_perm",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "str",
                    "bool"
                ],
                "connection": [
                    "List[int]",
                    "int"
                ],
                "target": [
                    "bool",
                    "str",
                    "Union[str, Dict[str, str]]"
                ]
            }
        },
        "SupersetSecurityManager.assert_datasource_permission": {
            "name": "assert_datasource_permission",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "SupersetSecurityManager.create_missing_perms.merge_pv": {
            "name": "merge_pv",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "view_menu": [
                    "db.models.Region",
                    "Mapping",
                    "bool"
                ],
                "perm": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/sql_lab.py": {
        "handle_query_error": {
            "name": "handle_query_error",
            "location": 63,
            "return": [
                "Union[(Dict[(str, Any)], _T3)]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "Type[django.db.models.base.Model]"
                ],
                "query": [
                    "Query",
                    "Type[tikki.db.tables.Base]",
                    "cnaas_nms.db.session.sqla_session",
                    "Optional[Union[str, Any]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "session": [
                    "Dict[str, Optional[str]]",
                    "type",
                    "str",
                    "bytes"
                ],
                "payload": [
                    "None",
                    "bool",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "T"
                ]
            }
        },
        "get_query": {
            "name": "get_query",
            "location": 80,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "query_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "session": [
                    "int",
                    "shop.transfer.models.ShopID",
                    "datetime.datetime"
                ],
                "retry_count": [
                    "int",
                    "str",
                    "esm.models.LastOperation",
                    "List[int]"
                ]
            }
        },
        "session_scope": {
            "name": "session_scope",
            "location": 101,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "nullpool": [
                    "bool",
                    "Iterable[Any]",
                    "List[str]",
                    "Callable",
                    "zerver.models.Realm",
                    "dict",
                    "Exception"
                ]
            }
        },
        "get_sql_results": {
            "name": "get_sql_results",
            "location": 127,
            "return": [
                "Callable",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "ctask": [
                    "bool",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "query_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "sqlalchemy.Column"
                ],
                "rendered_query": [
                    "bool",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "models.Project",
                    "datetime.datetime",
                    "int"
                ],
                "return_results": [
                    "bool",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "models.Project",
                    "datetime.datetime",
                    "int"
                ],
                "store_results": [
                    "bool",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "models.Project",
                    "datetime.datetime",
                    "int"
                ],
                "user_name": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "models.Project",
                    "datetime.datetime",
                    "int"
                ],
                "start_time": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "models.Project",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "execute_sql_statement": {
            "name": "execute_sql_statement",
            "location": 144,
            "return": [
                "dataframe.SupersetDataFrame"
            ],
            "arguments": {
                "sql_statement": [
                    "bool",
                    "raiden.utils.Type",
                    "float",
                    "Optional[List[Any]]",
                    "int",
                    "type"
                ],
                "query": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "user_name": [
                    "str",
                    "Type[db.models.BaseModel]",
                    "Dict[str, Union[str, Set]]",
                    "Dict[str, str]"
                ],
                "session": [
                    "List[List[int]]",
                    "str",
                    "core.models.Subtask.SubtaskState",
                    "bool"
                ],
                "cursor": [
                    "str",
                    "Union[Callable, str]"
                ],
                "return_results": [
                    "bool",
                    "Optional[Callable]",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Union[int,str]]"
                ]
            }
        },
        "execute_sql_statements": {
            "name": "execute_sql_statements",
            "location": 214,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "ctask": [
                    "bool",
                    "str",
                    "int"
                ],
                "query_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "rendered_query": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[dict]",
                    "dict",
                    "Dict[str, str]"
                ],
                "return_results": [
                    "bool",
                    "Type",
                    "datetime.date",
                    "django.db.models.QuerySet",
                    "Optional[int]",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "deeplearning.ml4pl.models.epoch.Type"
                ],
                "store_results": [
                    "bool",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "int"
                ],
                "user_name": [
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "session": [
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "Optional[Dict[str,str]]"
                ],
                "start_time": [
                    "None",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/sql_parse.py": {
        "ParsedQuery.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_statement": [
                    "int",
                    "dict",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "ParsedQuery.tables": {
            "name": "tables",
            "location": 47,
            "return": [
                "str",
                "Optional[Union[int, float]]",
                "Container[\"Taxon\"]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.limit": {
            "name": "limit",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.is_select": {
            "name": "is_select",
            "location": 54,
            "return": [
                "bool",
                "Name"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.is_explain": {
            "name": "is_explain",
            "location": 57,
            "return": [
                "str",
                "List[str]",
                "bool",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.is_readonly": {
            "name": "is_readonly",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.stripped": {
            "name": "stripped",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.get_statements": {
            "name": "get_statements",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedQuery.__get_full_name": {
            "name": "__get_full_name",
            "location": 78,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "identifier": [
                    "dict",
                    "str",
                    "logging.LogRecord",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Union[Any, Any, Any]]"
                ]
            }
        },
        "ParsedQuery.__is_identifier": {
            "name": "__is_identifier",
            "location": 85,
            "return": [
                "bool",
                "Dict[str,int]",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "token": [
                    "sqlparse.sql.Token",
                    "List[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "ParsedQuery.__process_identifier": {
            "name": "__process_identifier",
            "location": 88,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "type"
                ]
            }
        },
        "ParsedQuery.as_create_table": {
            "name": "as_create_table",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "overwrite": [
                    "bool",
                    "List[Tuple[str,Any]]",
                    "Optional[Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "ParsedQuery.__extract_from_token": {
            "name": "__extract_from_token",
            "location": 123,
            "return": [
                "None",
                "Dict[str,Any]",
                "bytes",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "sqlparse.sql.Token",
                    "Dict[object, Dict[str, Any]]",
                    "Iterator[List[str]]",
                    "Tuple[str, int]",
                    "str"
                ],
                "depth": [
                    "int",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "ParsedQuery._get_limit_from_token": {
            "name": "_get_limit_from_token",
            "location": 157,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "bytes",
                    "str",
                    "Callable"
                ]
            }
        },
        "ParsedQuery._extract_limit_from_query": {
            "name": "_extract_limit_from_query",
            "location": 163,
            "return": [
                "bool",
                "Optional[Dict]",
                "List[Dict[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str",
                    "Sequence[MutableMapping]",
                    "set",
                    "Mapping"
                ]
            }
        },
        "ParsedQuery.get_query_with_new_limit": {
            "name": "get_query_with_new_limit",
            "location": 170,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_limit": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/stats_logger.py": {
        "BaseStatsLogger.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseStatsLogger.key": {
            "name": "key",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "tuple",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "BaseStatsLogger.incr": {
            "name": "incr",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "BaseStatsLogger.decr": {
            "name": "decr",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "BaseStatsLogger.timing": {
            "name": "timing",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "BaseStatsLogger.gauge": {
            "name": "gauge",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "DummyStatsLogger.incr": {
            "name": "incr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "DummyStatsLogger.decr": {
            "name": "decr",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "DummyStatsLogger.timing": {
            "name": "timing",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "DummyStatsLogger.gauge": {
            "name": "gauge",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "StatsdStatsLogger.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "prefix": [
                    "Text",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "StatsdStatsLogger.incr": {
            "name": "incr",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "StatsdStatsLogger.decr": {
            "name": "decr",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "StatsdStatsLogger.timing": {
            "name": "timing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "StatsdStatsLogger.gauge": {
            "name": "gauge",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/viz.py": {
        "geohash_to_json": {
            "name": "geohash_to_json",
            "location": 2687,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "geohash_code": [
                    "int",
                    "str",
                    "Callable[[None], bool]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "BaseViz.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "Optional[Dict]",
                    "pandas.DataFrame",
                    "int"
                ],
                "form_data": [
                    "dict",
                    "Mapping[str, Any]",
                    "flask.wrappers.Response",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "Optional[Dict]",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "BaseViz.process_metrics": {
            "name": "process_metrics",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.handle_js_int_overflow": {
            "name": "handle_js_int_overflow",
            "location": 137,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Union[int, slice]]",
                    "bytes",
                    "dict",
                    "Mapping[str, Any]",
                    "Iterable"
                ]
            }
        },
        "BaseViz.run_extra_queries": {
            "name": "run_extra_queries",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.handle_nulls": {
            "name": "handle_nulls",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "str",
                    "pandas.DataFrame",
                    "Callable[..., bool]",
                    "dict",
                    "datetime.datetime"
                ]
            }
        },
        "BaseViz.get_fillna_for_col": {
            "name": "get_fillna_for_col",
            "location": 174,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseViz.get_fillna_for_columns": {
            "name": "get_fillna_for_columns",
            "location": 181,
            "return": [
                "Union[(dict, int)]"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[Tuple[Any, Any]]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "logging.LogRecord"
                ]
            }
        },
        "BaseViz.get_samples": {
            "name": "get_samples",
            "location": 192,
            "return": [
                "int",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "bytes",
                "tartare.core.models.Job",
                "Callable",
                "Dict[str, digipathos.data.dataseDataset]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.get_df": {
            "name": "get_df",
            "location": 203,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ]
            }
        },
        "BaseViz.df_metrics_to_num": {
            "name": "df_metrics_to_num",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict",
                    "Callable[[T], bool]",
                    "int"
                ]
            }
        },
        "BaseViz.process_query_filters": {
            "name": "process_query_filters",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.query_obj": {
            "name": "query_obj",
            "location": 284,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.cache_timeout": {
            "name": "cache_timeout",
            "location": 362,
            "return": [
                "int",
                "Optional[core.models.User]",
                "flask.Response",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.get_json": {
            "name": "get_json",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.cache_key": {
            "name": "cache_key",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BaseViz.get_payload": {
            "name": "get_payload",
            "location": 419,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "BaseViz.get_df_payload": {
            "name": "get_df_payload",
            "location": 436,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "dict",
                    "float",
                    "List[search_service.models.table.Table]",
                    "Callable"
                ]
            }
        },
        "BaseViz.json_dumps": {
            "name": "json_dumps",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "pandas.DataFrame",
                    "int",
                    "django.db.models.Model"
                ],
                "sort_keys": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[bool]",
                    "pandas.DataFrame",
                    "int",
                    "django.db.models.Model"
                ]
            }
        },
        "BaseViz.payload_json_and_has_error": {
            "name": "payload_json_and_has_error",
            "location": 548,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "dict",
                    "cmk.utils.type_defs.EventRule",
                    "models.seat_group.SeatGroup",
                    "ticketing.models.ticket_bundle.TicketBundle",
                    "str",
                    "Union[Dict, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseViz.data": {
            "name": "data",
            "location": 554,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.get_csv": {
            "name": "get_csv",
            "location": 564,
            "return": [
                "str",
                "bool",
                "bytes",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseViz.get_data": {
            "name": "get_data",
            "location": 569,
            "return": [
                "dict",
                "bytes",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame",
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "BaseViz.json_data": {
            "name": "json_data",
            "location": 573,
            "return": [
                "bool",
                "db.models.taxon.FillDataLevel",
                "int",
                "IO[bytes]",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunnelViz.query_obj": {
            "name": "query_obj",
            "location": 587,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "get_query": [
                    "bool",
                    "Callable",
                    "Callable[,bool]",
                    "Optional[zerver.models.Realm]",
                    "str"
                ]
            }
        },
        "FunnelViz.get_data": {
            "name": "get_data",
            "location": 642,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "TableDrillDownViz.should_be_timeseries": {
            "name": "should_be_timeseries",
            "location": 731,
            "return": [
                "Optional[str]",
                "core.models.Grouping",
                "django.db.models.query.QuerySet",
                "Iterable[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDrillDownViz.query_obj": {
            "name": "query_obj",
            "location": 743,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDrillDownViz.get_data": {
            "name": "get_data",
            "location": 777,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "db.Stock",
                    "List[str]",
                    "float",
                    "int"
                ]
            }
        },
        "TableDrillDownViz.json_dumps": {
            "name": "json_dumps",
            "location": 875,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool"
                ],
                "sort_keys": [
                    "bool"
                ]
            }
        },
        "TableViz.should_be_timeseries": {
            "name": "should_be_timeseries",
            "location": 892,
            "return": [
                "Optional[str]",
                "core.models.Grouping",
                "django.db.models.query.QuerySet",
                "Iterable[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableViz.query_obj": {
            "name": "query_obj",
            "location": 904,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableViz.get_data": {
            "name": "get_data",
            "location": 935,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "db.Stock",
                    "List[str]",
                    "float",
                    "int"
                ]
            }
        },
        "TableViz.json_dumps": {
            "name": "json_dumps",
            "location": 979,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool"
                ],
                "sort_keys": [
                    "bool"
                ]
            }
        },
        "TimeTableViz.query_obj": {
            "name": "query_obj",
            "location": 995,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeTableViz.get_data": {
            "name": "get_data",
            "location": 1007,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[Dict[str, str]]",
                    "Set[str]",
                    "Iterable",
                    "str",
                    "tartare.core.contexContext",
                    "dict"
                ]
            }
        },
        "PivotTableViz.query_obj": {
            "name": "query_obj",
            "location": 1035,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PivotTableViz.get_data": {
            "name": "get_data",
            "location": 1054,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping"
                ]
            }
        },
        "MarkupViz.query_obj": {
            "name": "query_obj",
            "location": 1086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkupViz.get_df": {
            "name": "get_df",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "MarkupViz.get_data": {
            "name": "get_data",
            "location": 1092,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "WordCloudViz.query_obj": {
            "name": "query_obj",
            "location": 1118,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreemapViz._nest": {
            "name": "_nest",
            "location": 1132,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "int",
                    "List[float]",
                    "list",
                    "List[int]"
                ],
                "df": [
                    "int",
                    "List[float]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "TreemapViz.get_data": {
            "name": "get_data",
            "location": 1142,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "CalHeatmapViz.get_data": {
            "name": "get_data",
            "location": 1158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int"
                ]
            }
        },
        "CalHeatmapViz.query_obj": {
            "name": "query_obj",
            "location": 1201,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxPlotViz.to_series": {
            "name": "to_series",
            "location": 1225,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Set[VT]",
                    "numpy.array",
                    "Dict[str, Tuple[int, int]]",
                    "Dict[str, Any]"
                ],
                "classed": [
                    "Text",
                    "Type",
                    "numpy.array",
                    "Callable"
                ],
                "title_suffix": [
                    "Text",
                    "Type",
                    "numpy.array",
                    "Callable"
                ]
            }
        },
        "BoxPlotViz.get_data": {
            "name": "get_data",
            "location": 1248,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "purplship.providers.purolator.utils.Settings",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "str",
                    "purplship.providers.ups.utils.Settings"
                ]
            }
        },
        "BubbleViz.query_obj": {
            "name": "query_obj",
            "location": 1312,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BubbleViz.get_data": {
            "name": "get_data",
            "location": 1336,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "BulletViz.query_obj": {
            "name": "query_obj",
            "location": 1361,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulletViz.get_data": {
            "name": "get_data",
            "location": 1387,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "flask.Request",
                    "str",
                    "Dict[str, Any]",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "BigNumberViz.query_obj": {
            "name": "query_obj",
            "location": 1410,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigNumberTotalViz.query_obj": {
            "name": "query_obj",
            "location": 1428,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NVD3TimeSeriesViz.to_series": {
            "name": "to_series",
            "location": 1446,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool"
                ],
                "classed": [
                    "Text",
                    "Type",
                    "str"
                ],
                "title_suffix": [
                    "Text",
                    "Dict",
                    "bool",
                    "pandas.DataFrame",
                    "Sequence"
                ]
            }
        },
        "NVD3TimeSeriesViz.process_data": {
            "name": "process_data",
            "location": 1501,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "str"
                ],
                "aggregate": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable",
                    "Iterable[str]",
                    "List[str]",
                    "int",
                    "faustypes.app.TaskArg"
                ]
            }
        },
        "NVD3TimeSeriesViz.run_extra_queries": {
            "name": "run_extra_queries",
            "location": 1560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NVD3TimeSeriesViz.get_data": {
            "name": "get_data",
            "location": 1588,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "salon.models.Stylist"
                ]
            }
        },
        "MultiLineViz.query_obj": {
            "name": "query_obj",
            "location": 1638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLineViz.get_data": {
            "name": "get_data",
            "location": 1641,
            "return": [
                "Dict[(str, Dict[(str, list)])]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "NVD3DualLineViz.query_obj": {
            "name": "query_obj",
            "location": 1666,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NVD3DualLineViz.to_series": {
            "name": "to_series",
            "location": 1680,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Tuple[int, int]",
                    "Callable",
                    "int",
                    "Optional[Union[str, Any]]"
                ],
                "classed": [
                    "Text",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "float",
                    "int"
                ]
            }
        },
        "NVD3DualLineViz.get_data": {
            "name": "get_data",
            "location": 1715,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[allennlp.data.instance.Instance]"
                ]
            }
        },
        "NVD3TimePivotViz.query_obj": {
            "name": "query_obj",
            "location": 1747,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NVD3TimePivotViz.get_data": {
            "name": "get_data",
            "location": 1752,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str, Any]",
                    "qutebrowser.utils.usertypes.ClickTarget",
                    "int"
                ]
            }
        },
        "DistributionPieViz.get_data": {
            "name": "get_data",
            "location": 1802,
            "return": [
                "dict",
                "bytes",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[Dict[str, str]]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "HistogramViz.query_obj": {
            "name": "query_obj",
            "location": 1821,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistogramViz.labelify": {
            "name": "labelify",
            "location": 1835,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List[str]",
                    "int",
                    "Union[float, None, int]"
                ],
                "column": [
                    "Optional[Union[int, slice]]",
                    "Optional[Collection[int]]",
                    "List[bytes]",
                    "float",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "HistogramViz.get_data": {
            "name": "get_data",
            "location": 1845,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[dict]",
                    "dict",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "DistributionBarViz.query_obj": {
            "name": "query_obj",
            "location": 1867,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributionBarViz.get_data": {
            "name": "get_data",
            "location": 1883,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict",
                    "int",
                    "List[Dict]",
                    "numpy.ndarray",
                    "List[dict]"
                ]
            }
        },
        "SunburstViz.get_data": {
            "name": "get_data",
            "location": 1938,
            "return": [
                "salon.models.Stylist",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                    "bytes",
                    "salon.models.Stylist",
                    "dict"
                ]
            }
        },
        "SunburstViz.query_obj": {
            "name": "query_obj",
            "location": 1948,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SankeyViz.query_obj": {
            "name": "query_obj",
            "location": 1966,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SankeyViz.get_data": {
            "name": "get_data",
            "location": 1974,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "DirectedForceViz.query_obj": {
            "name": "query_obj",
            "location": 2016,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedForceViz.get_data": {
            "name": "get_data",
            "location": 2023,
            "return": [
                "dict",
                "bytes",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "dict",
                    "cmk.utils.type_defs.EventRule",
                    "app.types.HTML"
                ]
            }
        },
        "ChordViz.query_obj": {
            "name": "query_obj",
            "location": 2036,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChordViz.get_data": {
            "name": "get_data",
            "location": 2043,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[List[str]]",
                    "list",
                    "pandas.Series"
                ]
            }
        },
        "CountryMapViz.query_obj": {
            "name": "query_obj",
            "location": 2068,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountryMapViz.get_data": {
            "name": "get_data",
            "location": 2075,
            "return": [
                "dict",
                "Mapping",
                "Dict[str, Union[str, Set]]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[List[str]]",
                    "pandas.DataFrame",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "WorldMapViz.query_obj": {
            "name": "query_obj",
            "location": 2095,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldMapViz.get_data": {
            "name": "get_data",
            "location": 2100,
            "return": [
                "dict",
                "Mapping",
                "Dict[str, Union[str, Set]]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Any",
                    "models.scenes.scenes_base.Scene",
                    "zam_repondeur.models.Lecture",
                    "pandas.DataFrame",
                    "blurr.core.schema_loader.SchemaLoader",
                    "Dict[str, Any]"
                ]
            }
        },
        "FilterBoxViz.query_obj": {
            "name": "query_obj",
            "location": 2149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterBoxViz.run_extra_queries": {
            "name": "run_extra_queries",
            "location": 2152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterBoxViz.get_data": {
            "name": "get_data",
            "location": 2168,
            "return": [
                "Dict[(Any, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Exception]"
                ]
            }
        },
        "IFrameViz.query_obj": {
            "name": "query_obj",
            "location": 2201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFrameViz.get_df": {
            "name": "get_df",
            "location": 2204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "IFrameViz.get_data": {
            "name": "get_data",
            "location": 2207,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "ParallelCoordinatesViz.query_obj": {
            "name": "query_obj",
            "location": 2225,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelCoordinatesViz.get_data": {
            "name": "get_data",
            "location": 2231,
            "return": [
                "dict",
                "bytes",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame",
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "HeatmapViz.query_obj": {
            "name": "query_obj",
            "location": 2245,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeatmapViz.get_data": {
            "name": "get_data",
            "location": 2252,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "List[str]",
                    "list",
                    "Optional[numpy.dtype]",
                    "int"
                ]
            }
        },
        "MapboxViz.query_obj": {
            "name": "query_obj",
            "location": 2309,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapboxViz.get_data": {
            "name": "get_data",
            "location": 2348,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[numpy.ndarray]",
                    "zam_repondeur.models.Article",
                    "Optional[Dict[str, Any]]",
                    "Optional[utils.diskstaSection]",
                    "Optional[Iterable[str]]",
                    "dict"
                ]
            }
        },
        "DeckGLMultiLayer.query_obj": {
            "name": "query_obj",
            "location": 2425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckGLMultiLayer.get_data": {
            "name": "get_data",
            "location": 2428,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "Optional"
                ]
            }
        },
        "BaseDeckGLViz.handle_nulls": {
            "name": "handle_nulls",
            "location": 2448,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseDeckGLViz.get_metrics": {
            "name": "get_metrics",
            "location": 2451,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLViz.process_spatial_query_obj": {
            "name": "process_spatial_query_obj",
            "location": 2455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "set",
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ],
                "group_by": [
                    "str",
                    "set",
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "BaseDeckGLViz.get_spatial_columns": {
            "name": "get_spatial_columns",
            "location": 2458,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "BaseDeckGLViz.parse_coordinates": {
            "name": "parse_coordinates",
            "location": 2471,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Set[int]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "BaseDeckGLViz.reverse_geohash_decode": {
            "name": "reverse_geohash_decode",
            "location": 2482,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "geohash_code": [
                    "bool",
                    "int",
                    "Optional[\"InventoryMode\"]",
                    "Optional[\"TaxMode\"]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BaseDeckGLViz.reverse_latlong": {
            "name": "reverse_latlong",
            "location": 2487,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]"
                ],
                "key": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]"
                ]
            }
        },
        "BaseDeckGLViz.process_spatial_data_obj": {
            "name": "process_spatial_data_obj",
            "location": 2494,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ],
                "df": [
                    "str",
                    "dict",
                    "KT"
                ]
            }
        },
        "BaseDeckGLViz.add_null_filters": {
            "name": "add_null_filters",
            "location": 2520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLViz.query_obj": {
            "name": "query_obj",
            "location": 2542,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLViz.get_js_columns": {
            "name": "get_js_columns",
            "location": 2570,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseDeckGLViz.get_data": {
            "name": "get_data",
            "location": 2574,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "raiden.utils.Port",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BaseDeckGLViz.get_properties": {
            "name": "get_properties",
            "location": 2596,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "DeckScatterViz.query_obj": {
            "name": "query_obj",
            "location": 2608,
            "return": [
                "Callable",
                "bool",
                "int",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckScatterViz.get_metrics": {
            "name": "get_metrics",
            "location": 2616,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckScatterViz.get_properties": {
            "name": "get_properties",
            "location": 2623,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DeckScatterViz.get_data": {
            "name": "get_data",
            "location": 2632,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "salon.models.Stylist",
                    "int",
                    "bytes"
                ]
            }
        },
        "DeckScreengrid.query_obj": {
            "name": "query_obj",
            "location": 2652,
            "return": [
                "str",
                "trezor.utils.Writer",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckScreengrid.get_properties": {
            "name": "get_properties",
            "location": 2657,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict",
                    "requests.models.Response",
                    "Optional[dict]"
                ]
            }
        },
        "DeckScreengrid.get_data": {
            "name": "get_data",
            "location": 2664,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Tuple[float, float]",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "DeckGrid.get_properties": {
            "name": "get_properties",
            "location": 2676,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict"
                ]
            }
        },
        "DeckGrid.get_data": {
            "name": "get_data",
            "location": 2682,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Tuple[float, float]",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "DeckPathViz.query_obj": {
            "name": "query_obj",
            "location": 2711,
            "return": [
                "str",
                "Dict[str, bool]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Optional[uuid.UUID]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckPathViz.get_properties": {
            "name": "get_properties",
            "location": 2725,
            "return": [
                "str",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "DeckPathViz.get_data": {
            "name": "get_data",
            "location": 2739,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "DeckPolygon.query_obj": {
            "name": "query_obj",
            "location": 2751,
            "return": [
                "str",
                "trezor.utils.Writer",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckPolygon.get_metrics": {
            "name": "get_metrics",
            "location": 2757,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckPolygon.get_properties": {
            "name": "get_properties",
            "location": 2763,
            "return": [
                "str",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "Union[int, str]",
                    "Dict[str, List[str]]",
                    "raiden.utils.Address"
                ]
            }
        },
        "DeckHex.get_properties": {
            "name": "get_properties",
            "location": 2779,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict"
                ]
            }
        },
        "DeckHex.get_data": {
            "name": "get_data",
            "location": 2785,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Tuple[float, float]",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "DeckGeoJson.query_obj": {
            "name": "query_obj",
            "location": 2796,
            "return": [
                "str",
                "Dict[str, bool]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Optional[uuid.UUID]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckGeoJson.get_properties": {
            "name": "get_properties",
            "location": 2803,
            "return": [
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "List[mtg_ssm.scryfall.models.ScryCard]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "DeckArc.query_obj": {
            "name": "query_obj",
            "location": 2816,
            "return": [
                "str",
                "trezor.utils.Writer",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckArc.get_properties": {
            "name": "get_properties",
            "location": 2822,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "requests.models.Response",
                    "Optional[dict]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "DeckArc.get_data": {
            "name": "get_data",
            "location": 2831,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventFlowViz.query_obj": {
            "name": "query_obj",
            "location": 2848,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFlowViz.get_data": {
            "name": "get_data",
            "location": 2866,
            "return": [
                "dict",
                "bytes",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame",
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "PairedTTestViz.get_data": {
            "name": "get_data",
            "location": 2878,
            "return": [
                "Dict[(Any, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "RoseViz.get_data": {
            "name": "get_data",
            "location": 2935,
            "return": [
                "Dict[(Any, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "purplship.providers.purolator.utils.Settings",
                    "int"
                ]
            }
        },
        "PartitionViz.query_obj": {
            "name": "query_obj",
            "location": 2962,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionViz.levels_for": {
            "name": "levels_for",
            "location": 2969,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "time_op": [
                    "core.Year",
                    "pandas.DataFrame",
                    "int",
                    "core.Year.Month",
                    "Dict[str, str]"
                ],
                "groups": [
                    "pandas.DataFrame",
                    "list",
                    "int",
                    "List[int]",
                    "models.Route",
                    "List[List[int]]",
                    "List[T]"
                ],
                "df": [
                    "str",
                    "Callable[[int], bool]",
                    "Iterable[int]"
                ]
            }
        },
        "PartitionViz.levels_for_diff": {
            "name": "levels_for_diff",
            "location": 2981,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "time_op": [
                    "bool",
                    "bytes",
                    "pandas._F"
                ],
                "groups": [
                    "int",
                    "pandas.DataFrame",
                    "type",
                    "models.Route",
                    "list",
                    "List[str]"
                ],
                "df": [
                    "dict",
                    "int",
                    "tracim.models.data.Content"
                ]
            }
        },
        "PartitionViz.levels_for_time": {
            "name": "levels_for_time",
            "location": 3013,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "list",
                    "List[int]",
                    "List[str]",
                    "int"
                ],
                "df": [
                    "bool"
                ]
            }
        },
        "PartitionViz.nest_values": {
            "name": "nest_values",
            "location": 3022,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "bool",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ],
                "level": [
                    "int",
                    "List[int]",
                    "List[List[str]]",
                    "str",
                    "bytearray",
                    "numpy.ndarray",
                    "Dict[str,str]"
                ],
                "metric": [
                    "None",
                    "float",
                    "int",
                    "str"
                ],
                "dims": [
                    "Tuple",
                    "pandas.DataFrame",
                    "float"
                ]
            }
        },
        "PartitionViz.nest_procs": {
            "name": "nest_procs",
            "location": 3049,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "procs": [
                    "list",
                    "List[int]",
                    "float"
                ],
                "level": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Counter",
                    "str",
                    "Tuple[int,int,int]",
                    "pandas.DataFrame"
                ],
                "dims": [
                    "Tuple",
                    "float",
                    "List[int]",
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "time": [
                    "None",
                    "int",
                    "bool",
                    "Union[int,float]",
                    "float",
                    "pandas.Series"
                ]
            }
        },
        "PartitionViz.get_data": {
            "name": "get_data",
            "location": 3069,
            "return": [
                "str",
                "dict",
                "bool",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "bytes",
                    "pygame.math.Vector2",
                    "dict"
                ]
            }
        },
        "BoxPlotViz.get_data.Q1": {
            "name": "Q1",
            "location": 1253,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "BoxPlotViz.get_data.Q3": {
            "name": "Q3",
            "location": 1256,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "BoxPlotViz.get_data.outliers": {
            "name": "outliers",
            "location": 1293,
            "return": [
                "Set",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str,Set[str]]",
                "Callable[...,None]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "bool",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "BulletViz.query_obj.as_strings": {
            "name": "as_strings",
            "location": 1366,
            "return": [
                "List",
                "int",
                "bool",
                "Set[str]",
                "Optional[static_frame.core.util.AnyCallable]",
                "str",
                "Optional[str]",
                "Union[int,float]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "BulletViz.query_obj.as_floats": {
            "name": "as_floats",
            "location": 1370,
            "return": [
                "List[float]",
                "List[str]",
                "str",
                "List",
                "List[Dict[str,Any]]",
                "frozenset",
                "Counter"
            ],
            "arguments": {
                "field": [
                    "Dict[str, int]",
                    "zerver.models.CustomProfileField",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.Item",
                    "str"
                ]
            }
        },
        "SankeyViz.get_data.find_cycle": {
            "name": "find_cycle",
            "location": 1984,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "g": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "BoxPlotViz.get_data.whisker_high": {
            "name": "whisker_high",
            "location": 1284,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "Sequence[int]",
                    "Union[float, int]",
                    "List[int]"
                ]
            }
        },
        "BoxPlotViz.get_data.whisker_low": {
            "name": "whisker_low",
            "location": 1287,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "Sequence[int]",
                    "Union[float, int]",
                    "List[int]"
                ]
            }
        },
        "SankeyViz.get_data.find_cycle.visit": {
            "name": "visit",
            "location": 1988,
            "return": [
                "Tuple",
                "pandas.DataFrame",
                "Dict"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "Type",
                    "dict"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/__init__.py": {
        "parse_manifest_json": {
            "name": "parse_manifest_json",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_js_manifest_files": {
            "name": "get_js_manifest_files",
            "location": 74,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_css_manifest_files": {
            "name": "get_css_manifest_files",
            "location": 81,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_unloaded_chunks": {
            "name": "get_unloaded_chunks",
            "location": 88,
            "return": [
                "list"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "utils.typeshed.pathlike",
                    "IO",
                    "BinaryIO"
                ],
                "loaded_chunks": [
                    "List[str]",
                    "IO[Any]",
                    "BinaryIO",
                    "utils.typeshed.pathlike"
                ]
            }
        },
        "get_manifest": {
            "name": "get_manifest",
            "location": 99,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "Dict[str, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_feature_flags": {
            "name": "get_feature_flags",
            "location": 220,
            "return": [
                "Dict",
                "str",
                "bool",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {}
        },
        "is_feature_enabled": {
            "name": "is_feature_enabled",
            "location": 227,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "feature": [
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "MyIndexView.index": {
            "name": "index",
            "location": 191,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedEncodingFix.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "ChunkedEncodingFix.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "start_response": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/bin/__init__.py": {},
    "incubator-superset-own-master/superset/common/query_context.py": {
        "QueryContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, int]"
                ],
                "queries": [
                    "List[str]",
                    "List[Tuple[float, Any]]",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "QueryContext.get_data": {
            "name": "get_data",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/common/query_object.py": {
        "QueryObject.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "granularity": [
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "groupby": [
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "metrics": [
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "filters": [
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "time_range": [
                    "int",
                    "None"
                ],
                "time_shift": [
                    "int",
                    "None"
                ],
                "is_timeseries": [
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "row_limit": [
                    "Optional[int]",
                    "int"
                ],
                "limit": [
                    "str",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "timeseries_limit_metric": [
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "order_desc": [
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "extras": [
                    "None",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "QueryObject.to_dict": {
            "name": "to_dict",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/common/__init__.py": {},
    "incubator-superset-own-master/superset/connectors/connector_registry.py": {
        "ConnectorRegistry.register_sources": {
            "name": "register_sources",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "datasource_config": [
                    "dict"
                ]
            }
        },
        "ConnectorRegistry.get_datasource": {
            "name": "get_datasource",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ],
                "datasource_type": [
                    "int",
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ],
                "datasource_id": [
                    "int",
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ],
                "session": [
                    "int",
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ]
            }
        },
        "ConnectorRegistry.get_all_datasources": {
            "name": "get_all_datasources",
            "location": 44,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "List['PydanticModelField']"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConnectorRegistry.get_datasource_by_name": {
            "name": "get_datasource_by_name",
            "location": 54,
            "return": [
                "Callable[[list], None]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "session": [
                    "Optional[\"Texte\"]",
                    "int",
                    "sqlalchemy.orm.Session",
                    "str"
                ],
                "datasource_type": [
                    "int",
                    "str",
                    "IO[str]",
                    "bool"
                ],
                "datasource_name": [
                    "str",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "schema": [
                    "str",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "database_name": [
                    "str",
                    "bytes",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "ConnectorRegistry.query_datasources_by_permissions": {
            "name": "query_datasources_by_permissions",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "bytes"
                ],
                "session": [
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "Type",
                    "str",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "Mapping[str, str]"
                ],
                "database": [
                    "sqlalchemy.orm.session.Session",
                    "Type"
                ],
                "permissions": [
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "Type",
                    "str",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "Mapping[str, str]"
                ]
            }
        },
        "ConnectorRegistry.get_eager_datasource": {
            "name": "get_eager_datasource",
            "location": 76,
            "return": [
                "sqlalchemy.MetaData",
                "int",
                "Dict[str, float]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool"
                ],
                "session": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "datasource_type": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str]",
                    "Union[str, List[str]]"
                ],
                "datasource_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ConnectorRegistry.query_datasources_by_name": {
            "name": "query_datasources_by_name",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[Iterable[str]]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "list",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "session": [
                    "str",
                    "Optional[str]",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Dict[str, Any]",
                    "Mapping",
                    "sqlalchemy.orm.session.Session"
                ],
                "database": [
                    "Mapping",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Callable"
                ],
                "datasource_name": [
                    "str",
                    "Optional[str]",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Dict[str, Any]",
                    "Mapping",
                    "sqlalchemy.orm.session.Session"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Dict[str,Any]",
                    "Mapping",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/__init__.py": {},
    "incubator-superset-own-master/superset/connectors/base/models.py": {
        "BaseDatasource.slices": {
            "name": "slices",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.uid": {
            "name": "uid",
            "location": 83,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.column_names": {
            "name": "column_names",
            "location": 88,
            "return": [
                "List",
                "str",
                "bool",
                "List[str]",
                "Iterable[str]",
                "Optional[str]",
                "List[Tuple[str,Any]]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.columns_types": {
            "name": "columns_types",
            "location": 92,
            "return": [
                "Dict",
                "T",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.main_dttm_col": {
            "name": "main_dttm_col",
            "location": 96,
            "return": [
                "Text",
                "str",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.datasource_name": {
            "name": "datasource_name",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.connection": {
            "name": "connection",
            "location": 104,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.schema": {
            "name": "schema",
            "location": 109,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.filterable_column_names": {
            "name": "filterable_column_names",
            "location": 114,
            "return": [
                "List",
                "List[str]",
                "str",
                "Tuple[str]",
                "FrozenSet[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.dttm_cols": {
            "name": "dttm_cols",
            "location": 118,
            "return": [
                "List",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.url": {
            "name": "url",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.explore_url": {
            "name": "explore_url",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.column_formats": {
            "name": "column_formats",
            "location": 133,
            "return": [
                "Dict",
                "str",
                "zerver.models.UserProfile",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.add_missing_metrics": {
            "name": "add_missing_metrics",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BaseDatasource.short_data": {
            "name": "short_data",
            "location": 148,
            "return": [
                "Dict[Text,str]",
                "Dict",
                "Dict[str,bool]",
                "Dict[str,Any]",
                "sqlalchemy.MetaData",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.select_star": {
            "name": "select_star",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.data": {
            "name": "data",
            "location": 166,
            "return": [
                "str",
                "Dict[Text,Union[list[tuple],dict[Text,Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.filter_values_handler": {
            "name": "filter_values_handler",
            "location": 216,
            "return": [
                "None",
                "str",
                "List[list]",
                "int",
                "Dict"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "Sequence[object]",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "target_column_is_numeric": [
                    "bool",
                    "str"
                ],
                "is_list_target": [
                    "bool",
                    "cmk.utils.type_defs.Item",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseDatasource.external_metadata": {
            "name": "external_metadata",
            "location": 244,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.get_query_str": {
            "name": "get_query_str",
            "location": 248,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "BaseDatasource.query": {
            "name": "query",
            "location": 255,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "BaseDatasource.values_for_column": {
            "name": "values_for_column",
            "location": 263,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "BaseDatasource.default_query": {
            "name": "default_query",
            "location": 271,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "qry": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "BaseDatasource.get_column": {
            "name": "get_column",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BaseDatasource.get_fk_many_from_list": {
            "name": "get_fk_many_from_list",
            "location": 279,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "object_list": [
                    "Dict[str, str]",
                    "dict"
                ],
                "fkmany": [
                    "int",
                    "str",
                    "Tuple[List[str], List[str]]"
                ],
                "fkmany_class": [
                    "ItemsView",
                    "Iterator[Tuple[Any, Any]]",
                    "list",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ],
                "key_attr": [
                    "Dict[str, Any]",
                    "boucanpy.core.PaginationQS",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseDatasource.update_from_object": {
            "name": "update_from_object",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "BaseColumn.__repr__": {
            "name": "__repr__",
            "location": 360,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseColumn.is_num": {
            "name": "is_num",
            "location": 371,
            "return": [
                "bool",
                "int",
                "Type",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseColumn.is_time": {
            "name": "is_time",
            "location": 378,
            "return": [
                "bool",
                "Dict[str,Tuple[int,int]]",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseColumn.is_string": {
            "name": "is_string",
            "location": 385,
            "return": [
                "bool",
                "Optional[str]",
                "Union[str,blurr.core.type.Type]",
                "Type[django.db.models.Model]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseColumn.expression": {
            "name": "expression",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseColumn.data": {
            "name": "data",
            "location": 396,
            "return": [
                "Dict[Text,]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetric.perm": {
            "name": "perm",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetric.expression": {
            "name": "expression",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetric.data": {
            "name": "data",
            "location": 442,
            "return": [
                "Dict[Text,]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatasource.filter_values_handler.handle_single_value": {
            "name": "handle_single_value",
            "location": 218,
            "return": [
                "Optional[int]",
                "None",
                "Optional[str]",
                "Text",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "Match"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/base/views.py": {
        "DatasourceModelView.pre_delete": {
            "name": "pre_delete",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/base/__init__.py": {},
    "incubator-superset-own-master/superset/connectors/druid/models.py": {
        "_fetch_metadata_for": {
            "name": "_fetch_metadata_for",
            "location": 67,
            "return": [
                "float",
                "raiden.utils.SecretHash",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "datasource": [
                    "float",
                    "raiden.utils.SecretHash",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "JavascriptPostAggregator.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "int"
                ],
                "field_names": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Callable[[Any], str]"
                ],
                "function": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "CustomPostAggregator.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "abilian.services.security.models.Permission"
                ],
                "post_aggregator": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "DruidCluster.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "sa.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.__html__": {
            "name": "__html__",
            "location": 114,
            "return": [
                "sa.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.data": {
            "name": "data",
            "location": 118,
            "return": [
                "Dict[Text,Text]",
                "Mapping[str,Any]",
                "Dict[str,bool]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.get_base_url": {
            "name": "get_base_url",
            "location": 126,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ]
            }
        },
        "DruidCluster.get_base_broker_url": {
            "name": "get_base_broker_url",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.get_pydruid_client": {
            "name": "get_pydruid_client",
            "location": 138,
            "return": [
                "PyDruid",
                "Optional[str]",
                "str",
                "List[str]",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.get_datasources": {
            "name": "get_datasources",
            "location": 144,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.get_druid_version": {
            "name": "get_druid_version",
            "location": 148,
            "return": [
                "asgard.models.user.User",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.druid_version": {
            "name": "druid_version",
            "location": 155,
            "return": [
                "str",
                "models.Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.refresh_datasources": {
            "name": "refresh_datasources",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource_name": [
                    "None",
                    "bool",
                    "Callable",
                    "str",
                    "Sequence[str]",
                    "Dict",
                    "List",
                    "List[List[str]]",
                    "List[zerver.models.UserProfile]",
                    "Dict[str,Any]"
                ],
                "merge_flag": [
                    "bool",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "refreshAll": [
                    "bool",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        },
        "DruidCluster.refresh": {
            "name": "refresh",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource_names": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "fal.orm.Season",
                    "Optional[str]",
                    "zerver.models.Realm"
                ],
                "merge_flag": [
                    "Union[float, int]",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "refreshAll": [
                    "bool",
                    "Optional[utils.types.Vec3D]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "DruidCluster.perm": {
            "name": "perm",
            "location": 244,
            "return": [
                "str",
                "zerver.models.Realm",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.get_perm": {
            "name": "get_perm",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.name": {
            "name": "name",
            "location": 251,
            "return": [
                "bool",
                "str",
                "Tuple[bool, str]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidCluster.unique_name": {
            "name": "unique_name",
            "location": 255,
            "return": [
                "str",
                "type",
                "Tuple[str, str]",
                "Optional[Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.__repr__": {
            "name": "__repr__",
            "location": 282,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.expression": {
            "name": "expression",
            "location": 286,
            "return": [
                "str",
                "int",
                "models.Trip"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.dimension_spec": {
            "name": "dimension_spec",
            "location": 290,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "pandas.Series",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.get_metrics": {
            "name": "get_metrics",
            "location": 294,
            "return": [
                "Dict[(str, DruidMetric)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.refresh_metrics": {
            "name": "refresh_metrics",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.import_obj": {
            "name": "import_obj",
            "location": 324,
            "return": [
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[DruidColumn]"
                ],
                "i_column": [
                    "str",
                    "int",
                    "bool",
                    "datetime.datetime.timedelta",
                    "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                    "List[str]"
                ]
            }
        },
        "DruidMetric.expression": {
            "name": "expression",
            "location": 357,
            "return": [
                "str",
                "int",
                "models.Trip"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidMetric.json_obj": {
            "name": "json_obj",
            "location": 361,
            "return": [
                "Dict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidMetric.perm": {
            "name": "perm",
            "location": 369,
            "return": [
                "str",
                "Optional[int]",
                "None",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidMetric.get_perm": {
            "name": "get_perm",
            "location": 376,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidMetric.import_obj": {
            "name": "import_obj",
            "location": 380,
            "return": [
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "BinaryIO",
                    "List[magic.models.Deck]",
                    "Callable[..., Awaitable]"
                ],
                "i_metric": [
                    "float",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "DruidDatasource.database": {
            "name": "database",
            "location": 437,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.connection": {
            "name": "connection",
            "location": 441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.num_cols": {
            "name": "num_cols",
            "location": 445,
            "return": [
                "List",
                "List[str]",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.name": {
            "name": "name",
            "location": 449,
            "return": [
                "str",
                "Type",
                "zerver.models.Realm",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.get_query_datasource_name": {
            "name": "get_query_datasource_name",
            "location": 452,
            "return": [
                "sa.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.schema": {
            "name": "schema",
            "location": 456,
            "return": [
                "str",
                "None",
                "Dict[str,Any]",
                "Type",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.schema_perm": {
            "name": "schema_perm",
            "location": 465,
            "return": [
                "str",
                "bool",
                "models.Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.get_perm": {
            "name": "get_perm",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.update_from_object": {
            "name": "update_from_object",
            "location": 474,
            "return": [
                "NotImplementedError"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "Exception",
                    "str"
                ]
            }
        },
        "DruidDatasource.link": {
            "name": "link",
            "location": 478,
            "return": [
                "Markup",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.full_name": {
            "name": "full_name",
            "location": 483,
            "return": [
                "str",
                "taxonomy.db.models.Taxon",
                "Container[\"Taxon\"]",
                "Optional[qutebrowser.utils.urlmatch.UrlPattern]",
                "pringles.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.time_column_grains": {
            "name": "time_column_grains",
            "location": 488,
            "return": [
                "Dict[Text,list[Text]]",
                "datetime.datetime",
                "float",
                "int",
                "Optional[int]",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.__repr__": {
            "name": "__repr__",
            "location": 499,
            "return": [
                "sa.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.datasource_link": {
            "name": "datasource_link",
            "location": 503,
            "return": [
                "Markup",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.get_metric_obj": {
            "name": "get_metric_obj",
            "location": 508,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "DruidDatasource.import_obj": {
            "name": "import_obj",
            "location": 515,
            "return": [
                "Iterable[str]",
                "str",
                "IO[str]",
                "salon.models.Stylist",
                "core.models.Step"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[DruidDatasource]"
                ],
                "i_datasource": [
                    "Optional[List[Any]]",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[bool]"
                ],
                "import_time": [
                    "None",
                    "Optional[List[Any]]",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[bool]"
                ]
            }
        },
        "DruidDatasource.latest_metadata": {
            "name": "latest_metadata",
            "location": 535,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.refresh_metrics": {
            "name": "refresh_metrics",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidDatasource.sync_to_db_from_config": {
            "name": "sync_to_db_from_config",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[DruidDatasource]"
                ],
                "druid_config": [
                    "dict",
                    "Optional[Mapping]",
                    "zerver.models.UserProfile",
                    "Callable",
                    "str"
                ],
                "user": [
                    "str",
                    "dict"
                ],
                "cluster": [
                    "str",
                    "dict"
                ],
                "refresh": [
                    "bool",
                    "float",
                    "str",
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        },
        "DruidDatasource.time_offset": {
            "name": "time_offset",
            "location": 675,
            "return": [
                "int"
            ],
            "arguments": {
                "granularity": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "DruidDatasource.granularity": {
            "name": "granularity",
            "location": 684,
            "return": [
                "Union[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "period_name": [
                    "str"
                ],
                "timezone": [
                    "None",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str,int]"
                ],
                "origin": [
                    "str",
                    "None"
                ]
            }
        },
        "DruidDatasource.get_post_agg": {
            "name": "get_post_agg",
            "location": 732,
            "return": [
                "str",
                "JavascriptPostAggregator",
                "Optional[str]",
                "blurr.core.schema_loader.SchemaLoader",
                "Quantile",
                "Dict",
                "Quantiles",
                "List[str]",
                "Field",
                "Const",
                "HyperUniqueCardinality",
                "Postaggregator",
                "CustomPostAggregator"
            ],
            "arguments": {
                "mconf": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "DruidDatasource.find_postaggs_for": {
            "name": "find_postaggs_for",
            "location": 774,
            "return": [
                "list"
            ],
            "arguments": {
                "postagg_names": [
                    "str",
                    "Type[Any]",
                    "Tuple[Type]",
                    "dict"
                ],
                "metrics_dict": [
                    "str",
                    "Tuple[Type]",
                    "Type[Any]"
                ]
            }
        },
        "DruidDatasource.recursive_get_fields": {
            "name": "recursive_get_fields",
            "location": 786,
            "return": [
                "list"
            ],
            "arguments": {
                "_conf": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "cmk.base.events.EventContext"
                ]
            }
        },
        "DruidDatasource.resolve_postagg": {
            "name": "resolve_postagg",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "postagg": [
                    "allennlp.models.archival.Archive",
                    "bool",
                    "int",
                    "datetime.datetime",
                    "zerver.models.UserProfile"
                ],
                "post_aggs": [
                    "Optional[str]",
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "agg_names": [
                    "bool",
                    "str",
                    "int",
                    "grouper.models.group.Group",
                    "Dict[str, float]"
                ],
                "visited_postaggs": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[Sequence]",
                    "Union[Sequence[str], str]",
                    "Optional[str]"
                ],
                "metrics_dict": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.ChannelMap",
                    "bool"
                ]
            }
        },
        "DruidDatasource.metrics_and_post_aggs": {
            "name": "metrics_and_post_aggs",
            "location": 829,
            "return": [
                "Tuple[(collections.OrderedDict, collections.OrderedDict)]"
            ],
            "arguments": {
                "metrics": [
                    "bool",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "str"
                ],
                "metrics_dict": [
                    "str",
                    "zerver.models.Realm"
                ],
                "druid_version": [
                    "None",
                    "bool",
                    "List[libkol.types.ItemQuantity]",
                    "str"
                ]
            }
        },
        "DruidDatasource.values_for_column": {
            "name": "values_for_column",
            "location": 858,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "limit": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DruidDatasource.get_query_str": {
            "name": "get_query_str",
            "location": 886,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str"
                ],
                "phase": [
                    "str",
                    "int"
                ],
                "client": [
                    "str",
                    "None"
                ]
            }
        },
        "DruidDatasource._add_filter_from_pre_query_data": {
            "name": "_add_filter_from_pre_query_data",
            "location": 889,
            "return": [
                "Filter",
                "bool",
                "Set[jgikbase.idmapping.core.user.AuthsourceID]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[float]",
                    "Union[List, Dict, None]",
                    "bool",
                    "Optional[str]"
                ],
                "dimensions": [
                    "int",
                    "str",
                    "bool"
                ],
                "dim_filter": [
                    "bool",
                    "sqlalchemy.Column",
                    "Type[Any]",
                    "type",
                    "str",
                    "zerver.models.CustomProfileField"
                ]
            }
        },
        "DruidDatasource.druid_type_from_adhoc_metric": {
            "name": "druid_type_from_adhoc_metric",
            "location": 929,
            "return": [
                "Text",
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "adhoc_metric": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DruidDatasource.get_aggregations": {
            "name": "get_aggregations",
            "location": 941,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "metrics_dict": [
                    "str",
                    "Awaitable",
                    "Optional[Mapping[str, Any]]"
                ],
                "saved_metrics": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "adhoc_metrics": [
                    "List",
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "DruidDatasource.check_restricted_metrics": {
            "name": "check_restricted_metrics",
            "location": 973,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregations": [
                    "logging.LogRecord",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "DruidDatasource.get_dimensions": {
            "name": "get_dimensions",
            "location": 985,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "groupby": [
                    "int",
                    "float"
                ],
                "columns_dict": [
                    "bool",
                    "paradigm.models.Plain",
                    "Dict[int, dict]",
                    "List[int]",
                    "Optional[dataclasses.Field]",
                    "int"
                ]
            }
        },
        "DruidDatasource.intervals_from_dttms": {
            "name": "intervals_from_dttms",
            "location": 997,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "from_dttm": [
                    "datetime.datetime",
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "datetime.timedelta"
                ],
                "to_dttm": [
                    "datetime.datetime",
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "DruidDatasource._dimensions_to_values": {
            "name": "_dimensions_to_values",
            "location": 1011,
            "return": [
                "list"
            ],
            "arguments": {
                "dimensions": [
                    "bool"
                ]
            }
        },
        "DruidDatasource.sanitize_metric_object": {
            "name": "sanitize_metric_object",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "metric": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "DruidDatasource.run_query": {
            "name": "run_query",
            "location": 1040,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "groupby": [
                    "pandas.DataFrame",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "\"NameComplex\""
                ],
                "metrics": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ],
                "granularity": [
                    "boucanpy.core.PaginationQS",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, Any]"
                ],
                "from_dttm": [
                    "Tuple[Sequence]",
                    "Union[Sequence[str], str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "to_dttm": [
                    "jumeaux.models.Reqs2ReqsAddOnPayload",
                    "bool",
                    "Union[Sequence[str], str]",
                    "Tuple[Sequence]",
                    "Dict[str, Any]"
                ],
                "filter": [
                    "None",
                    "float",
                    "int"
                ],
                "is_timeseries": [
                    "bool",
                    "pandas.DataFrame",
                    "Optional[int]",
                    "Type[T]",
                    "raiden.utils.Callable",
                    "Exception"
                ],
                "timeseries_limit": [
                    "None",
                    "Sequence[int]",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "int",
                    "Callable",
                    "mode.utils.times.Seconds",
                    "raiden.utils.BlockSpecification"
                ],
                "timeseries_limit_metric": [
                    "None",
                    "Callable[...,T]",
                    "int"
                ],
                "row_limit": [
                    "None",
                    "bool",
                    "Dict",
                    "Dict[int,dict]",
                    "List[asgard.models.app.App]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "inner_from_dttm": [
                    "None",
                    "int",
                    "float",
                    "static_frame.core.util.IndexConstructor",
                    "bool"
                ],
                "inner_to_dttm": [
                    "None",
                    "int",
                    "float",
                    "static_frame.core.util.IndexConstructor",
                    "bool"
                ],
                "orderby": [
                    "None",
                    "bool",
                    "Set[str]",
                    "Type[marshmallow.base.SchemaABC]",
                    "str"
                ],
                "extras": [
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "bool"
                ],
                "columns": [
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Filter",
                    "Pattern"
                ],
                "phase": [
                    "int",
                    "bool",
                    "Set[str]",
                    "Type[marshmallow.base.SchemaABC]",
                    "str"
                ],
                "client": [
                    "None",
                    "tracim.models.data.Content",
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "order_desc": [
                    "bool",
                    "str",
                    "List[sqlalchemy.sql.expression.ColumnClause]",
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "float",
                    "int"
                ],
                "prequeries": [
                    "None",
                    "bool",
                    "Set[str]",
                    "Type[marshmallow.base.SchemaABC]",
                    "str"
                ],
                "is_prequery": [
                    "bool",
                    "Set[str]",
                    "Type[marshmallow.base.SchemaABC]",
                    "str"
                ]
            }
        },
        "DruidDatasource.homogenize_types": {
            "name": "homogenize_types",
            "location": 1270,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "Optional[str]"
                ],
                "groupby_cols": [
                    "str",
                    "bool",
                    "Optional[List[dict]]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "DruidDatasource.query": {
            "name": "query",
            "location": 1284,
            "return": [
                "QueryResult",
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "DruidDatasource._create_extraction_fn": {
            "name": "_create_extraction_fn",
            "location": 1337,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "dim_spec": [
                    "str",
                    "int"
                ]
            }
        },
        "DruidDatasource.get_filters": {
            "name": "get_filters",
            "location": 1360,
            "return": [
                "str",
                "bool",
                "Callable[..., None]",
                "List[str]",
                "Set[starfish.core.types.Axes]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[DruidDatasource]"
                ],
                "raw_filters": [
                    "bool",
                    "str",
                    "int"
                ],
                "num_cols": [
                    "int",
                    "str"
                ],
                "columns_dict": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "DruidDatasource._get_having_obj": {
            "name": "_get_having_obj",
            "location": 1485,
            "return": [
                "str",
                "bool",
                "None",
                "DimSelector"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "zerver.models.Realm"
                ],
                "op": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[dict]",
                    "List[str]"
                ],
                "eq": [
                    "str",
                    "pandas.Series",
                    "Dict[str, str]",
                    "list",
                    "bool",
                    "pandas.DataFrame"
                ]
            }
        },
        "DruidDatasource.get_having_filters": {
            "name": "get_having_filters",
            "location": 1499,
            "return": [
                "None",
                "int",
                "str",
                "bool",
                "List[str]",
                "Set[starfish.core.types.Axes]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "raw_filters": [
                    "int",
                    "Callable[[List], None]",
                    "bool",
                    "dict",
                    "str",
                    "raiden.utils.Address",
                    "List[str]"
                ]
            }
        },
        "DruidDatasource.query_datasources_by_name": {
            "name": "query_datasources_by_name",
            "location": 1526,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[DruidDatasource]"
                ],
                "session": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Union[str, List[str]]",
                    "sqlalchemy.orm.session.Session"
                ],
                "database": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Union[str, List[str]]",
                    "sqlalchemy.orm.session.Session"
                ],
                "datasource_name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Union[str, List[str]]",
                    "sqlalchemy.orm.session.Session"
                ],
                "schema": [
                    "None",
                    "Optional[Iterable[str]]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "Callable",
                    "List",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Iterable",
                    "List[mythril.analysis.module.base.DetectionModule]"
                ]
            }
        },
        "DruidDatasource.external_metadata": {
            "name": "external_metadata",
            "location": 1535,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidColumn.import_obj.lookup_obj": {
            "name": "lookup_obj",
            "location": 325,
            "return": [
                "str",
                "int",
                "Optional[List[topicdb.core.models.association.Association]]"
            ],
            "arguments": {
                "lookup_column": [
                    "int",
                    "myaku.crawlers.base.Crawl",
                    "bool",
                    "Dict[models.characters.mods_base.SlotTypes, int]"
                ]
            }
        },
        "DruidMetric.import_obj.lookup_obj": {
            "name": "lookup_obj",
            "location": 381,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "lookup_metric": [
                    "int",
                    "Optional[int]",
                    "models.topic.Topic",
                    "str"
                ]
            }
        },
        "DruidDatasource.import_obj.lookup_datasource": {
            "name": "lookup_datasource",
            "location": 522,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "magic.models.Card",
                    "Type",
                    "models.User"
                ]
            }
        },
        "DruidDatasource.import_obj.lookup_cluster": {
            "name": "lookup_cluster",
            "location": 528,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "d": [
                    "int",
                    "Dict[str, Any]",
                    "Type",
                    "Awaitable[T]",
                    "str"
                ]
            }
        },
        "DruidDatasource.query.increment_timestamp": {
            "name": "increment_timestamp",
            "location": 1324,
            "return": [
                "datetime.datetime",
                "str",
                "raiden.utils.Address",
                "Callable",
                "bool"
            ],
            "arguments": {
                "ts": [
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/druid/views.py": {
        "DruidColumnInlineView.pre_update": {
            "name": "pre_update",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "Dict[str, Any]",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "str",
                    "bool"
                ]
            }
        },
        "DruidColumnInlineView.post_update": {
            "name": "post_update",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "int",
                    "dict",
                    "float",
                    "Optional[int]",
                    "List[app.models.Question]"
                ]
            }
        },
        "DruidColumnInlineView.post_add": {
            "name": "post_add",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "float",
                    "dict",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "DruidMetricInlineView.post_add": {
            "name": "post_add",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "DruidMetricInlineView.post_update": {
            "name": "post_update",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "DruidClusterModelView.pre_add": {
            "name": "pre_add",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "dict"
                ]
            }
        },
        "DruidClusterModelView.pre_update": {
            "name": "pre_update",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DruidClusterModelView._delete": {
            "name": "_delete",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "int"
                ]
            }
        },
        "DruidDatasourceModelView.pre_add": {
            "name": "pre_add",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "esm.models.service_instance.ServiceInstance",
                    "salon.models.Stylist",
                    "Dict[str, Any]",
                    "dict",
                    "transfer.models.Scope"
                ]
            }
        },
        "DruidDatasourceModelView.post_add": {
            "name": "post_add",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "List[src.main.core.models.display.Display]"
                ]
            }
        },
        "DruidDatasourceModelView.post_update": {
            "name": "post_update",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "Optional[Type]",
                    "float",
                    "dict"
                ]
            }
        },
        "DruidDatasourceModelView._delete": {
            "name": "_delete",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "int"
                ]
            }
        },
        "Druid.refresh_datasources": {
            "name": "refresh_datasources",
            "location": 326,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "refreshAll": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Druid.scan_new_datasources": {
            "name": "scan_new_datasources",
            "location": 354,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Any]",
                "bool",
                "int",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/druid/__init__.py": {},
    "incubator-superset-own-master/superset/connectors/sqla/models.py": {
        "AnnotationDatasource.query": {
            "name": "query",
            "location": 60,
            "return": [
                "QueryResult",
                "cmk.utils.type_defs.UserId",
                "fastapi.dependencies.models.Dependant",
                "zerver.models.UserProfile",
                "pandas.DataFrame",
                "bool",
                "sqlalchemy.orm.Session",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "AnnotationDatasource.get_query_str": {
            "name": "get_query_str",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "AnnotationDatasource.values_for_column": {
            "name": "values_for_column",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "TableColumn.get_sqla_col": {
            "name": "get_sqla_col",
            "location": 118,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TableColumn.datasource": {
            "name": "datasource",
            "location": 130,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableColumn.get_time_filter": {
            "name": "get_time_filter",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "start_dttm": [
                    "int",
                    "dict",
                    "list"
                ],
                "end_dttm": [
                    "int",
                    "pandas.DataFrame",
                    "list",
                    "float"
                ]
            }
        },
        "TableColumn.get_timestamp_expression": {
            "name": "get_timestamp_expression",
            "location": 143,
            "return": [
                "str",
                "Tuple[int, int]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "time_grain": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "TableColumn.import_obj": {
            "name": "import_obj",
            "location": 165,
            "return": [
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "list"
                ],
                "i_column": [
                    "str",
                    "int",
                    "bool",
                    "datetime.datetime.timedelta",
                    "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                    "List[str]"
                ]
            }
        },
        "TableColumn.dttm_sql_literal": {
            "name": "dttm_sql_literal",
            "location": 172,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "dttm": [
                    "Optional[Any]",
                    "raiden.utils.BlockHash",
                    "Optional[T]",
                    "raiden.utils.BlockNumber",
                    "int"
                ],
                "is_epoch_in_utc": [
                    "bool",
                    "List[List[int]]",
                    "Callable[..., None]",
                    "List[int]"
                ]
            }
        },
        "SqlMetric.get_sqla_col": {
            "name": "get_sqla_col",
            "location": 221,
            "return": [
                "str",
                "Optional[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "None",
                    "str",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "SqlMetric.perm": {
            "name": "perm",
            "location": 227,
            "return": [
                "str",
                "Optional[int]",
                "None",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlMetric.get_perm": {
            "name": "get_perm",
            "location": 233,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlMetric.import_obj": {
            "name": "import_obj",
            "location": 237,
            "return": [
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "BinaryIO",
                    "List[magic.models.Deck]",
                    "Callable[..., Awaitable]"
                ],
                "i_metric": [
                    "float",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "SqlaTable.make_sqla_column_compatible": {
            "name": "make_sqla_column_compatible",
            "location": 302,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "models.User",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "sqla_col": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "raiden.utils.TargetAddress"
                ],
                "label": [
                    "None",
                    "str",
                    "Tuple",
                    "Optional[Mapping[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "SqlaTable.__repr__": {
            "name": "__repr__",
            "location": 316,
            "return": [
                "Union[(str, sa.sql.schema.Column)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.connection": {
            "name": "connection",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.description_markeddown": {
            "name": "description_markeddown",
            "location": 324,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.datasource_name": {
            "name": "datasource_name",
            "location": 328,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.database_name": {
            "name": "database_name",
            "location": 332,
            "return": [
                "str",
                "zerver.models.Realm",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.link": {
            "name": "link",
            "location": 336,
            "return": [
                "Markup",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.schema_perm": {
            "name": "schema_perm",
            "location": 342,
            "return": [
                "str",
                "bool",
                "models.Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.get_perm": {
            "name": "get_perm",
            "location": 346,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.name": {
            "name": "name",
            "location": 352,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.full_name": {
            "name": "full_name",
            "location": 358,
            "return": [
                "Optional[BaseException]",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[Iterable[Any]]",
                "str",
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.dttm_cols": {
            "name": "dttm_cols",
            "location": 363,
            "return": [
                "List",
                "List[str]",
                "bool",
                "str",
                "List[Mapping[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.num_cols": {
            "name": "num_cols",
            "location": 370,
            "return": [
                "List",
                "List[str]",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.any_dttm_col": {
            "name": "any_dttm_col",
            "location": 374,
            "return": [
                "int",
                "bool",
                "str",
                "zerver.models.DefaultStreamGroup",
                "Tuple[int]",
                "dict",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.html": {
            "name": "html",
            "location": 380,
            "return": [
                "int",
                "Iterable[str]",
                "IO[str]",
                "viewer.models.Archive",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.sql_url": {
            "name": "sql_url",
            "location": 391,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.external_metadata": {
            "name": "external_metadata",
            "location": 394,
            "return": [
                "bool",
                "int",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.time_column_grains": {
            "name": "time_column_grains",
            "location": 404,
            "return": [
                "Dict[Text,list]",
                "int",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.select_star": {
            "name": "select_star",
            "location": 411,
            "return": [
                "str",
                "pandas.DataFrame",
                "bool",
                "Callable",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.get_col": {
            "name": "get_col",
            "location": 417,
            "return": [
                "str",
                "bool",
                "Tuple[int]",
                "zerver.models.DefaultStreamGroup",
                "dict"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str"
                ]
            }
        },
        "SqlaTable.data": {
            "name": "data",
            "location": 424,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "sqlalchemy.MetaData",
                "int",
                "Union[Dict, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.values_for_column": {
            "name": "values_for_column",
            "location": 437,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "int"
                ],
                "limit": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "SqlaTable.mutate_query_from_config": {
            "name": "mutate_query_from_config",
            "location": 466,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "cmk.utils.type_defs.EventRule",
                    "models.characters.mods_base.SlotTypes",
                    "models.characters.chassis.Chassis",
                    "dict"
                ]
            }
        },
        "SqlaTable.get_template_processor": {
            "name": "get_template_processor",
            "location": 476,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.get_query_str_extended": {
            "name": "get_query_str_extended",
            "location": 480,
            "return": [
                "QueryStringExtended"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "SqlaTable.get_query_str": {
            "name": "get_query_str",
            "location": 495,
            "return": [
                "str",
                "boucanpy.core.http_server.HttpServerRepo",
                "boucanpy.core.dns_server.DnsServerRepo",
                "dict",
                "bool",
                "tracim.models.User"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "\"Fragment\""
                ]
            }
        },
        "SqlaTable.get_sqla_table": {
            "name": "get_sqla_table",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.get_from_clause": {
            "name": "get_from_clause",
            "location": 504,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]"
            ],
            "arguments": {
                "self": [],
                "template_processor": [
                    "None",
                    "str",
                    "bytes",
                    "Union[None,bytes]"
                ]
            }
        },
        "SqlaTable.adhoc_metric_to_sqla": {
            "name": "adhoc_metric_to_sqla",
            "location": 514,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "cols": [
                    "str",
                    "raiden.utils.Optional[str]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ]
            }
        },
        "SqlaTable.get_sqla_query": {
            "name": "get_sqla_query",
            "location": 541,
            "return": [
                "SqlaQuery"
            ],
            "arguments": {
                "self": [],
                "groupby": [
                    "Optional[bool]",
                    "int",
                    "Union[int, str]",
                    "Optional[int]",
                    "pandas.DataFrame",
                    "str"
                ],
                "metrics": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "Optional[bool]",
                    "Union[int, str]",
                    "Optional[static_frame.core.util.IndexConstructors]"
                ],
                "granularity": [
                    "int",
                    "bool",
                    "float"
                ],
                "from_dttm": [
                    "int",
                    "transfer.models.ArticleNumber",
                    "Optional[bool]",
                    "Union[int, str]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "flask_sqlalchemy.Model"
                ],
                "to_dttm": [
                    "int",
                    "transfer.models.ArticleNumber",
                    "Optional[bool]",
                    "Union[int, str]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "flask_sqlalchemy.Model"
                ],
                "filter": [
                    "int",
                    "Optional[bool]",
                    "Union[int, str]",
                    "pandas.DataFrame",
                    "str",
                    "Optional[int]"
                ],
                "is_timeseries": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[Mapping]",
                    "Callable[[google.cloud.bigquery.table.Row],None]"
                ],
                "timeseries_limit": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "timeseries_limit_metric": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "allennlp.models.archival.Archive",
                    "str"
                ],
                "row_limit": [
                    "None",
                    "Optional[bool]",
                    "int",
                    "Union[int,str]",
                    "Optional[int]",
                    "str"
                ],
                "inner_from_dttm": [
                    "None",
                    "bool",
                    "int",
                    "datetime.datetime",
                    "sqlalchemy.sql.ColumnElement",
                    "zerver.models.Realm",
                    "Optional[zerver.models.UserProfile]",
                    "contests.models.User"
                ],
                "inner_to_dttm": [
                    "None",
                    "bool",
                    "int",
                    "datetime.datetime",
                    "sqlalchemy.sql.ColumnElement",
                    "zerver.models.Realm",
                    "Optional[zerver.models.UserProfile]",
                    "contests.models.User"
                ],
                "orderby": [
                    "None",
                    "bool",
                    "Iterable[Entity]",
                    "pandas.DataFrame"
                ],
                "extras": [
                    "str",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "Dict[int, Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "columns": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Union[int, str]",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "order_desc": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[Mapping]",
                    "Callable[[google.cloud.bigquery.table.Row],None]"
                ],
                "prequeries": [
                    "None",
                    "bool",
                    "Dict[str,Any]"
                ],
                "is_prequery": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "SqlaTable._get_timeseries_orderby": {
            "name": "_get_timeseries_orderby",
            "location": 815,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": [],
                "timeseries_limit_metric": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "bytes"
                ],
                "metrics_dict": [
                    "Dict[str, int]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "str",
                    "Dict[str, Any]",
                    "datetime.datetime"
                ],
                "cols": [
                    "bool",
                    "Optional[str]",
                    "List[int]",
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "SqlaTable._get_top_groups": {
            "name": "_get_top_groups",
            "location": 828,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "pyspark.sql.SparkSession"
                ],
                "dimensions": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "groupby_exprs": [
                    "str",
                    "float",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "int"
                ]
            }
        },
        "SqlaTable.query": {
            "name": "query",
            "location": 838,
            "return": [
                "QueryResult",
                "cmk.utils.type_defs.UserId",
                "fastapi.dependencies.models.Dependant",
                "zerver.models.UserProfile",
                "pandas.DataFrame",
                "bool",
                "sqlalchemy.orm.Session",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_obj": [
                    "str",
                    "List[str]",
                    "list",
                    "List[Tuple[str, int]]",
                    "Union[str, int]"
                ]
            }
        },
        "SqlaTable.get_sqla_table_object": {
            "name": "get_sqla_table_object",
            "location": 877,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.fetch_metadata": {
            "name": "fetch_metadata",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTable.import_obj": {
            "name": "import_obj",
            "location": 936,
            "return": [
                "Iterable[str]",
                "str",
                "IO[str]",
                "salon.models.Stylist",
                "core.models.Step"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[SqlaTable]"
                ],
                "i_datasource": [
                    "Optional[List[Any]]",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[bool]"
                ],
                "import_time": [
                    "None",
                    "Optional[List[Any]]",
                    "int",
                    "allennlp.models.model.Model",
                    "Optional[bool]"
                ]
            }
        },
        "SqlaTable.query_datasources_by_name": {
            "name": "query_datasources_by_name",
            "location": 958,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[SqlaTable]"
                ],
                "session": [
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "fal.models.Season"
                ],
                "database": [
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "fal.models.Season"
                ],
                "datasource_name": [
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "fal.models.Season"
                ],
                "schema": [
                    "None",
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "models.Tag",
                    "List[int]",
                    "supersemodels.core.Database"
                ]
            }
        },
        "SqlaTable.default_query": {
            "name": "default_query",
            "location": 970,
            "return": [
                "bool"
            ],
            "arguments": {
                "qry": [
                    "solo.config.app.Config",
                    "models.Person.Person",
                    "cmk.utils.type_defs.HostName",
                    "app.domain.stocks.StockMetadata",
                    "raiden.utils.Address"
                ]
            }
        },
        "TableColumn.import_obj.lookup_obj": {
            "name": "lookup_obj",
            "location": 166,
            "return": [
                "Optional[str]",
                "Union[List[str], List[Any]]",
                "Dict[str, Union[str, int]]",
                "Iterable"
            ],
            "arguments": {
                "lookup_column": [
                    "int",
                    "Optional[int]",
                    "str",
                    "pandas.DataFrame",
                    "myaku.crawlers.base.Crawl",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "SqlMetric.import_obj.lookup_obj": {
            "name": "lookup_obj",
            "location": 238,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "lookup_metric": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "SqlaTable.query.mutator": {
            "name": "mutator",
            "location": 845,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "df": [
                    "Collection[int]",
                    "Deque",
                    "int",
                    "Callable[..., bool]",
                    "pandas.DataFrame"
                ]
            }
        },
        "SqlaTable.import_obj.lookup_sqlatable": {
            "name": "lookup_sqlatable",
            "location": 943,
            "return": [
                "bool",
                "Callable[..., None]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "table": [
                    "models.User",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SqlaTable.import_obj.lookup_database": {
            "name": "lookup_database",
            "location": 950,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/sqla/views.py": {
        "SqlMetricInlineView.post_add": {
            "name": "post_add",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "SqlMetricInlineView.post_update": {
            "name": "post_update",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TableModelView.pre_add": {
            "name": "pre_add",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "models.User",
                    "str",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "superseconnectors.sqla.models.SqlaTable",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase"
                ]
            }
        },
        "TableModelView.post_add": {
            "name": "post_add",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "flash_message": [
                    "str",
                    "bool"
                ]
            }
        },
        "TableModelView.post_update": {
            "name": "post_update",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "int"
                ]
            }
        },
        "TableModelView._delete": {
            "name": "_delete",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "int"
                ]
            }
        },
        "TableModelView.edit": {
            "name": "edit",
            "location": 305,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "dict",
                    "minerstaminers.base.IMiner",
                    "int"
                ]
            }
        },
        "TableModelView.refresh": {
            "name": "refresh",
            "location": 317,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tables": [
                    "T",
                    "List[T]",
                    "str",
                    "Optional[abilian.core.models.Model]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/connectors/sqla/__init__.py": {},
    "incubator-superset-own-master/superset/data/bart_lines.py": {
        "load_bart_lines": {
            "name": "load_bart_lines",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/birth_names.py": {
        "load_birth_names": {
            "name": "load_birth_names",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/countries.py": {
        "get": {
            "name": "get",
            "location": 2499,
            "return": [
                "str",
                "bool",
                "int",
                "list"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bytes"
                ],
                "symbol": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/data/country_map.py": {
        "load_country_map_data": {
            "name": "load_country_map_data",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/css_templates.py": {
        "load_css_templates": {
            "name": "load_css_templates",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/deck.py": {
        "load_deck_dash": {
            "name": "load_deck_dash",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/energy.py": {
        "load_energy": {
            "name": "load_energy",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/flights.py": {
        "load_flights": {
            "name": "load_flights",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/helpers.py": {
        "update_slice_ids": {
            "name": "update_slice_ids",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "layout_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "slices": [
                    "List[Callable]",
                    "Dict[str, str]",
                    "bool",
                    "id3c.db.session.DatabaseSession",
                    "Iterable[int]"
                ]
            }
        },
        "merge_slice": {
            "name": "merge_slice",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "slc": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "get_slice_json": {
            "name": "get_slice_json",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "defaults": [
                    "bool",
                    "str",
                    "BaseException",
                    "Optional[List]",
                    "List[str]",
                    "Optional[List[Type]]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/data/long_lat.py": {
        "load_long_lat_data": {
            "name": "load_long_lat_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/misc_dashboard.py": {
        "load_misc_dashboard": {
            "name": "load_misc_dashboard",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/multiformat_time_series.py": {
        "load_multiformat_time_series": {
            "name": "load_multiformat_time_series",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/multi_line.py": {
        "load_multi_line": {
            "name": "load_multi_line",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/paris.py": {
        "load_paris_iris_geojson": {
            "name": "load_paris_iris_geojson",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/random_time_series.py": {
        "load_random_time_series_data": {
            "name": "load_random_time_series_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/sf_population_polygons.py": {
        "load_sf_population_polygons": {
            "name": "load_sf_population_polygons",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/unicode_test_data.py": {
        "load_unicode_test_data": {
            "name": "load_unicode_test_data",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/world_bank.py": {
        "load_world_bank_health_n_pop": {
            "name": "load_world_bank_health_n_pop",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/data/__init__.py": {},
    "incubator-superset-own-master/superset/db_engines/hive.py": {
        "fetch_logs": {
            "name": "fetch_logs",
            "location": 21,
            "return": [
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "max_rows": [
                    "bool",
                    "List[str]",
                    "List[object]",
                    "List[dict]"
                ],
                "orientation": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/db_engines/__init__.py": {},
    "incubator-superset-own-master/superset/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/migrations/__init__.py": {},
    "incubator-superset-own-master/superset/migrations/versions/0b1f1ab473c0_add_extra_column_to_query.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/0c5070e96b57_add_user_attributes_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1226819ee0e3_fix_wrong_constraint_on_table_columns.py": {
        "find_constraint_name": {
            "name": "find_constraint_name",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "upgrade": [
                    "bool",
                    "str",
                    "IO",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1296d28ec131_druid_exports.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/12d55656cbca_is_featured.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/130915240929_is_sqllab_viz_flow.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/18dc26817ad2_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/18e88e1cc004_making_audit_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/19a814813610_adding_metric_warning_text.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1a1d627ebd8e_position_json.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1a48a5411020_adding_slug_to_dash.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1d2ddd543133_log_dt.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1d9e835a84f9_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/1e2841a4128_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/21e88bc06c02_annotation_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/2591d77e9831_user_id.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/27ae655e4247_make_creator_owners.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/289ce07647b_add_encrypted_password_field.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/2929af7925ed_tz_offsets_in_data_sources.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/2fcdcb35e487_saved_queries.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/30bb17c0dc76_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/315b3f4da9b0_adding_log_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/33d996bcc382_update_slice_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/3b626e2a6783_sync_db_with_models.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/3c3ffe173e4f_add_sql_string_to_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/3dda56f1c4c6_migrate_num_period_compare_and_period_.py": {
        "isodate_duration_to_string": {
            "name": "isodate_duration_to_string",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "timedelta_to_string": {
            "name": "timedelta_to_string",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "format_seconds": {
            "name": "format_seconds",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "float",
                    "datetime.timedelta",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "int",
                    "Tuple[str, str, str]",
                    "str"
                ]
            }
        },
        "compute_time_compare": {
            "name": "compute_time_compare",
            "location": 121,
            "return": [
                "Optional[str]",
                "Optional[datetime.datetime]",
                "float",
                "Optional[int]",
                "Optional[\"Period\"]",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "granularity": [
                    "str",
                    "float"
                ],
                "periods": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/3e1b21cd94a4_change_owner_to_m2m_relation_on_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/41f6a59a61f2_database_options_for_sql_lab.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/430039611635_log_more.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/43df8de3a5f4_dash_json.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4451805bbaa1_remove_double_percents.py": {
        "replace": {
            "name": "replace",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[List]",
                    "Callable"
                ],
                "target": [
                    "str",
                    "Optional[List]",
                    "Callable"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4500485bde7d_allow_run_sync_async.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/46ba6aaaac97_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/46f444d8b9b7_remove_coordinator_from_druid_cluster_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/472d2f73dfd4_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4736ec66ce19_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4ce8df208545_migrate_time_range_for_default_filters.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4e6a06bad7a8_init.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/4fa88fe24e94_owners_many_to_many.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/525c854f0005_log_this_plus.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/55179c7f25c7_sqla_descr.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/55e910a74826_add_metadata_column_to_annotation_model_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/5a7bad26f2a7_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/5ccf602336a0_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/5e4a03ef0bf0_add_request_access_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/6414e83d82b7_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/65903709c321_allow_dml.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/67a6ac9b727b_update_spatial_params.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/6c7537a6004a_models_for_email_reports.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/6ef799a19057_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/705732c70154_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/732f1c06bcbf_add_fetch_values_predicate.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/7467e77870e4_remove_aggs.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/763d4b211ec9_fixing_audit_fk.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/7dbf98566af7_slice_description.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/7e3ddad2a00b_results_key_to_query.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/7fcdcde0761c_.py": {
        "is_v2_dash": {
            "name": "is_v2_dash",
            "location": 49,
            "return": [
                "bool",
                "int",
                "Iterable[int]",
                "str",
                "IO[str]",
                "Callable"
            ],
            "arguments": {
                "positions": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/80a67c5192fa_single_pie_chart_metric.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/836c0bf75904_cache_timeouts.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/867bf4f117f9_adding_extra_field_to_database_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/8b70aa3d0f87_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/8e80a26a31db_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/956a063c52b3_adjusting_key_length.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/960c69cb1f5b_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/979c03af3341_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a2d606a761d9_adding_favstar_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a33a03f16c4a_add_extra_column_to_savedquery.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a61b40f9f57f_remove_allow_run_sync.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a65458420354_add_result_backend_time_logging.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a6c18f869a4e_query_start_running_time.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a99f2f7c195a_rewriting_url_from_shortner_with_new_.py": {
        "parse_querystring": {
            "name": "parse_querystring",
            "location": 39,
            "return": [
                "Dict[(_T0, Union[(List[_T0], _T0)])]"
            ],
            "arguments": {
                "qs": [
                    "str"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/a9c47e2c1547_add_impersonate_user_to_dbs.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ab3d66c4246e_add_cache_timeout_to_druid_cluster.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ad4d656d92bc_add_avg_metric.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ad82a75afd82_add_query_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/afb7730f6a9c_remove_empty_filters.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/b318dfe5fb6c_adding_verbose_name_to_druid_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/b347b202819b_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/b4456560d4f3_change_table_unique_constraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/b46fa1b0b39e_add_params_to_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/bb51420eaf83_add_schema_to_table_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/bcf3126872fc_add_keyvalue.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/bddc498dd179_adhoc_filters.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/bebcf3fed1fe_convert_dashboard_v1_positions.py": {
        "is_v2_dash": {
            "name": "is_v2_dash",
            "location": 103,
            "return": [
                "bool",
                "int",
                "Iterable[int]",
                "str",
                "IO[str]",
                "Callable"
            ],
            "arguments": {
                "positions": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "get_boundary": {
            "name": "get_boundary",
            "location": 110,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "positions": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "generate_id": {
            "name": "generate_id",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "has_overlap": {
            "name": "has_overlap",
            "location": 134,
            "return": [
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "positions": [
                    "list",
                    "tuple",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ],
                "xAxis": [
                    "bool",
                    "List",
                    "Tuple",
                    "List[Tuple[Any,Any]]",
                    "List[tuple]"
                ]
            }
        },
        "get_empty_layout": {
            "name": "get_empty_layout",
            "location": 154,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, List[str])])])])]"
            ],
            "arguments": {}
        },
        "get_header_component": {
            "name": "get_header_component",
            "location": 170,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, _T0)])])]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int"
                ]
            }
        },
        "get_row_container": {
            "name": "get_row_container",
            "location": 180,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, str)], List[nothing])])]"
            ],
            "arguments": {}
        },
        "get_col_container": {
            "name": "get_col_container",
            "location": 191,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, str)], List[nothing])])]"
            ],
            "arguments": {}
        },
        "get_chart_holder": {
            "name": "get_chart_holder",
            "location": 202,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Any)], List[nothing])])]"
            ],
            "arguments": {
                "position": [
                    "int",
                    "str"
                ]
            }
        },
        "get_children_max": {
            "name": "get_children_max",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "children": [
                    "str",
                    "float",
                    "dict"
                ],
                "attr": [
                    "str",
                    "float",
                    "dict"
                ],
                "root": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "get_children_sum": {
            "name": "get_children_sum",
            "location": 251,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "children": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "attr": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "root": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "get_wide_column_ids": {
            "name": "get_wide_column_ids",
            "location": 261,
            "return": [
                "list"
            ],
            "arguments": {
                "children": [
                    "Sequence[str]",
                    "str"
                ],
                "root": [
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "is_wide_leaf_component": {
            "name": "is_wide_leaf_component",
            "location": 270,
            "return": [
                "bool",
                "Type",
                "Tuple"
            ],
            "arguments": {
                "component": [
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "can_reduce_column_width": {
            "name": "can_reduce_column_width",
            "location": 277,
            "return": [
                "bool",
                "Optional[db.models.Taxon]"
            ],
            "arguments": {
                "column_component": [
                    "int",
                    "List[Tuple[int, int]]",
                    "dict"
                ],
                "root": [
                    "int",
                    "List[Tuple[int, int]]",
                    "dict"
                ]
            }
        },
        "reduce_row_width": {
            "name": "reduce_row_width",
            "location": 292,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "row_component": [
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "root": [
                    "List[dict]",
                    "Optional[List[T]]"
                ]
            }
        },
        "reduce_component_width": {
            "name": "reduce_component_width",
            "location": 313,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "component": [
                    "bool",
                    "str",
                    "int",
                    "deque"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "positions": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "level": [
                    "int",
                    "bool",
                    "List[float]",
                    "Union[int, str]",
                    "float"
                ],
                "parent": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "List[Tuple[bool, str]]"
                ],
                "root": [
                    "int",
                    "Iterator",
                    "bool",
                    "str"
                ]
            }
        },
        "convert_to_layout": {
            "name": "convert_to_layout",
            "location": 461,
            "return": [
                "dict"
            ],
            "arguments": {
                "positions": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "merge_position": {
            "name": "merge_position",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "position": [
                    "int",
                    "float"
                ],
                "bottom_line": [
                    "int",
                    "Sized",
                    "List[int]",
                    "bool",
                    "bytes",
                    "list"
                ],
                "last_column_start": [
                    "int",
                    "Sized",
                    "List[int]",
                    "str"
                ]
            }
        },
        "scan_dashboard_positions_data": {
            "name": "scan_dashboard_positions_data",
            "location": 560,
            "return": [
                "list"
            ],
            "arguments": {
                "positions": [
                    "bool",
                    "Sequence[str]",
                    "Iterable"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/bf706ae5eb46_cal_heatmap_metric_to_metrics.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c18bd4186f15_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c3a8f8611885_materializing_permission.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c5756bec8b47_time_grain_sqla.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c611f2b591b8_dim_spec.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c617da68de7d_form_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c829ff0b37d0_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c82ee8a39623_add_implicit_tags.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/c9495751e314_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ca69c70ec99b_tracking_url.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/cefabc8f7d38_increase_size_of_name_column_in_ab_view_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/d2424a248d63_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/d39b1e37131d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/d6db5a5cdb5d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/d827694c7555_css_templates.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/d8bc074f7aad_add_new_field_is_restricted_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/db0c65b146bd_update_slice_model_json.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/db527d8c4c78_add_db_verbose_name.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ddd6ebdd853b_annotations.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/de021a1ca60d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/e3970889f38e_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/e46f2d27a08e_materialize_perms.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/e502db2af7be_add_template_params_to_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/e68c4473c581_allow_multi_schema_metadata_fetch.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/e866bd2d4976_smaller_grid.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ea033256294a_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ec1f88a35cc6_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/eca4694defa7_sqllab_setting_defaults.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ef8843b41dac_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f0fbf6129e13_adding_verbose_name_to_tablecolumn.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f162a1dea4c4_d3format_by_metric.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f18570e03440_add_query_result_key_index.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f1f2d4af5b90_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f231d82b9b26_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/f959a6652acd_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/fb13d49b72f9_better_filters.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/fbd55e0f83eb_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/fc480c87706c_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/fee7b758c130_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/migrations/versions/ff6fefb0d358_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/models/annotations.py": {
        "AnnotationLayer.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation.data": {
            "name": "data",
            "location": 62,
            "return": [
                "Dict[Text,None]",
                "Dict[str,Any]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/models/core.py": {
        "set_related_perm": {
            "name": "set_related_perm",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mapper": [
                    "int",
                    "str",
                    "bool"
                ],
                "connection": [
                    "int",
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "bool",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "copy_dashboard": {
            "name": "copy_dashboard",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "mapper": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "connection": [
                    "bool",
                    "users.models.CustomUser",
                    "str",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.query.Query"
                ],
                "target": [
                    "int",
                    "str",
                    "Union[int, str]",
                    "float",
                    "bool"
                ]
            }
        },
        "Slice.__repr__": {
            "name": "__repr__",
            "location": 165,
            "return": [
                "sqla.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.cls_model": {
            "name": "cls_model",
            "location": 169,
            "return": [
                "str",
                "Mapping[str, Any]",
                "db.models.Taxon",
                "sqlalchemy.engine.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.datasource": {
            "name": "datasource",
            "location": 173,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.clone": {
            "name": "clone",
            "location": 176,
            "return": [
                "Slice"
            ],
            "arguments": {
                "self": [
                    "_TSlice@@Slice@@"
                ]
            }
        },
        "Slice.get_datasource": {
            "name": "get_datasource",
            "location": 189,
            "return": [
                "bool",
                "str",
                "Callable[[Dict], None]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.datasource_link": {
            "name": "datasource_link",
            "location": 197,
            "return": [
                "None",
                "ajapaik.ajapaik.models.Album",
                "Dict",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.datasource_name_text": {
            "name": "datasource_name_text",
            "location": 202,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.datasource_edit_url": {
            "name": "datasource_edit_url",
            "location": 208,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.viz": {
            "name": "viz",
            "location": 215,
            "return": [
                "str",
                "hackathon.utils.utils.DataMessage",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.description_markeddown": {
            "name": "description_markeddown",
            "location": 222,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.data": {
            "name": "data",
            "location": 226,
            "return": [
                "Dict[Text,]",
                "bool",
                "pandas.DataFrame",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.json_data": {
            "name": "json_data",
            "location": 250,
            "return": [
                "bool",
                "db.models.taxon.FillDataLevel",
                "int",
                "IO[bytes]",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.form_data": {
            "name": "form_data",
            "location": 254,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "raiden.utils.signer.Signer",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.get_explore_url": {
            "name": "get_explore_url",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "Text",
                    "str",
                    "Union[List,str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "Dict",
                    "Union[str,bytes]",
                    "Optional[str]"
                ]
            }
        },
        "Slice.slice_url": {
            "name": "slice_url",
            "location": 281,
            "return": [
                "str",
                "Union[str, int]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.explore_json_url": {
            "name": "explore_json_url",
            "location": 286,
            "return": [
                "str",
                "Union[str, int]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.edit_url": {
            "name": "edit_url",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.slice_link": {
            "name": "slice_link",
            "location": 295,
            "return": [
                "Markup",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.get_viz": {
            "name": "get_viz",
            "location": 300,
            "return": [
                "str",
                "esm.models.ServiceType",
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str",
                    "raiden.utils.Address",
                    "Dict[str,Any]",
                    "Union[server.models.User,int]",
                    "Optional[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Slice.icons": {
            "name": "icons",
            "location": 320,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.import_obj": {
            "name": "import_obj",
            "location": 331,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Tuple[Tuple[Any, Any]]"
                ],
                "slc_to_import": [
                    "Optional[int]",
                    "Optional[bool]",
                    "numpy.ndarray",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "slc_to_override": [
                    "str",
                    "Optional[str]",
                    "numpy.ndarray",
                    "bool"
                ],
                "import_time": [
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "models.Model",
                    "contests.models.User",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Slice.url": {
            "name": "url",
            "location": 364,
            "return": [
                "str",
                "numpy.ndarray",
                "bytes",
                "rotkehlchen.db.dbhandler.DBHandler",
                "deeplearning.ml4pl.models.batch.Data"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.__repr__": {
            "name": "__repr__",
            "location": 409,
            "return": [
                "sqla.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.table_names": {
            "name": "table_names",
            "location": 413,
            "return": [
                "str",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.url": {
            "name": "url",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.datasources": {
            "name": "datasources",
            "location": 436,
            "return": [
                "Set",
                "bool",
                "int",
                "Tuple[int,int]",
                "Tuple",
                "List[str]",
                "Union[List[str],str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.sqla_metadata": {
            "name": "sqla_metadata",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.dashboard_link": {
            "name": "dashboard_link",
            "location": 445,
            "return": [
                "Markup",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.data": {
            "name": "data",
            "location": 450,
            "return": [
                "Dict[Text,list]",
                "Dict[str,float]",
                "Dict",
                "Dict[str,str]",
                "str",
                "sqlalchemy.MetaData"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.params": {
            "name": "params",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "Dashboard.position": {
            "name": "position",
            "location": 473,
            "return": [
                "Dict",
                "int",
                "bool",
                "Optional[float]",
                "pandas.Series",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.import_obj": {
            "name": "import_obj",
            "location": 479,
            "return": [
                "bool",
                "int",
                "ddionrails.studies.models.Study",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "Union[Callable, str]",
                    "core.DEPENDENCIES_TYPE"
                ],
                "dashboard_to_import": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Type"
                ],
                "import_time": [
                    "None",
                    "Optional[int]",
                    "int",
                    "pandas.DataFrame",
                    "str"
                ]
            }
        },
        "Dashboard.export_dashboards": {
            "name": "export_dashboards",
            "location": 609,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "utils.types.NDArray[float]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "List[int]"
                ],
                "dashboard_ids": [
                    "list",
                    "str",
                    "List[manager.models.reflection.Reflection]",
                    "bool",
                    "List[manager.models.language.Language]",
                    "app.domains.Role",
                    "Dict[str, Any]"
                ]
            }
        },
        "Database.__repr__": {
            "name": "__repr__",
            "location": 688,
            "return": [
                "sqla.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.name": {
            "name": "name",
            "location": 692,
            "return": [
                "bool",
                "str",
                "Tuple[bool, str]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.allows_subquery": {
            "name": "allows_subquery",
            "location": 696,
            "return": [
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.data": {
            "name": "data",
            "location": 700,
            "return": [
                "Dict[Text,]",
                "Mapping[str,Any]",
                "Dict[str,bool]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.unique_name": {
            "name": "unique_name",
            "location": 711,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.url_object": {
            "name": "url_object",
            "location": 715,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.backend": {
            "name": "backend",
            "location": 719,
            "return": [
                "str",
                "bool",
                "logging.Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.metadata_cache_timeout": {
            "name": "metadata_cache_timeout",
            "location": 724,
            "return": [
                "str",
                "db.models.Taxon",
                "x509_pki.models.Certificate",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.schema_cache_enabled": {
            "name": "schema_cache_enabled",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.schema_cache_timeout": {
            "name": "schema_cache_timeout",
            "location": 732,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.table_cache_enabled": {
            "name": "table_cache_enabled",
            "location": 736,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List",
                "int",
                "List[dict]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.table_cache_timeout": {
            "name": "table_cache_timeout",
            "location": 740,
            "return": [
                "str",
                "bool",
                "django.db.models.Model",
                "pandas.DataFrame",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_password_masked_url_from_uri": {
            "name": "get_password_masked_url_from_uri",
            "location": 744,
            "return": [
                "url.URL"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Database]"
                ],
                "uri": [
                    "str",
                    "Optional[Tuple[str]]",
                    "tracim.models.data.Content"
                ]
            }
        },
        "Database.get_password_masked_url": {
            "name": "get_password_masked_url",
            "location": 749,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Database]"
                ],
                "url": [
                    "str",
                    "List[Tuple[int, int]]",
                    "List[Dict[str, Any]]",
                    "pandas.DataFrame",
                    "Set[str]"
                ]
            }
        },
        "Database.set_sqlalchemy_uri": {
            "name": "set_sqlalchemy_uri",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Database.get_effective_user": {
            "name": "get_effective_user",
            "location": 763,
            "return": [
                "None",
                "str",
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "sqlalchemy.engine.url.URL"
                ],
                "user_name": [
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Database.get_sqla_engine": {
            "name": "get_sqla_engine",
            "location": 784,
            "return": [
                "str",
                "dict",
                "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "None",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "nullpool": [
                    "bool",
                    "Set[str]",
                    "str",
                    "Optional[str]",
                    "List",
                    "int"
                ],
                "user_name": [
                    "None",
                    "str",
                    "List[str]"
                ],
                "source": [
                    "None",
                    "str",
                    "List[torch.nn.utils.rnn.PackedSequence]",
                    "List"
                ]
            }
        },
        "Database.get_reserved_words": {
            "name": "get_reserved_words",
            "location": 822,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_quoter": {
            "name": "get_quoter",
            "location": 825,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_df": {
            "name": "get_df",
            "location": 828,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "int"
                ],
                "schema": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "mutator": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Database.compile_sqla_query": {
            "name": "compile_sqla_query",
            "location": 880,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "qry": [
                    "str",
                    "Optional[int]",
                    "models.characters.states.StatusEffect",
                    "int"
                ],
                "schema": [
                    "None",
                    "str",
                    "int",
                    "logging.LogRecord",
                    "List"
                ]
            }
        },
        "Database.select_star": {
            "name": "select_star",
            "location": 895,
            "return": [
                "Tuple[int, int]",
                "int",
                "app.models.dto.CoordinateDTO",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]",
                    "int"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "limit": [
                    "int",
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]"
                ],
                "show_cols": [
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]",
                    "int"
                ],
                "indent": [
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]",
                    "int"
                ],
                "latest_partition": [
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]",
                    "int"
                ],
                "cols": [
                    "None",
                    "bool",
                    "str",
                    "sqlalchemy.engine.base.Engine",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Database.apply_limit_to_sql": {
            "name": "apply_limit_to_sql",
            "location": 906,
            "return": [
                "int",
                "Optional[Union[Any, Any]]",
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "bool",
                    "int",
                    "dict"
                ],
                "limit": [
                    "int",
                    "bool",
                    "Dict"
                ]
            }
        },
        "Database.safe_sqlalchemy_uri": {
            "name": "safe_sqlalchemy_uri",
            "location": 909,
            "return": [
                "sqla.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.inspector": {
            "name": "inspector",
            "location": 913,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.all_table_names_in_database": {
            "name": "all_table_names_in_database",
            "location": 920,
            "return": [
                "List",
                "str",
                "pandas.DataFrame",
                "List[str]",
                "List[object]",
                "Tuple[List[Any],int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ],
                "cache_timeout": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "force": [
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "Database.all_view_names_in_database": {
            "name": "all_view_names_in_database",
            "location": 930,
            "return": [
                "List",
                "Optional[str]",
                "str",
                "bytes",
                "pandas.DataFrame",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ],
                "cache_timeout": [
                    "None",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ],
                "force": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "Database.all_table_names_in_schema": {
            "name": "all_table_names_in_schema",
            "location": 941,
            "return": [
                "str",
                "Optional[Iterable[str]]",
                "bool",
                "Sequence[int]",
                "dict",
                "T",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]"
                ],
                "cache": [
                    "bool",
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ],
                "cache_timeout": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ]
            }
        },
        "Database.all_view_names_in_schema": {
            "name": "all_view_names_in_schema",
            "location": 971,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "cmk.utils.type_defs.EventRule",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "numpy.ndarray",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "cache": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "float"
                ],
                "cache_timeout": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "float"
                ],
                "force": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "Database.all_schema_names": {
            "name": "all_schema_names",
            "location": 1000,
            "return": [
                "List[str]",
                "bool",
                "dict",
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "cache_timeout": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "force": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Database.db_engine_spec": {
            "name": "db_engine_spec",
            "location": 1018,
            "return": [
                "Tuple[str, str, str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_db_engine_spec_for_backend": {
            "name": "get_db_engine_spec_for_backend",
            "location": 1023,
            "return": [
                "bool",
                "Optional[List[str]]",
                "dict",
                "Optional[List[cmk.utils.type_defs.HostName]]",
                "float"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Database]"
                ],
                "backend": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.Realm",
                    "int"
                ]
            }
        },
        "Database.grains": {
            "name": "grains",
            "location": 1026,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.grains_dict": {
            "name": "grains_dict",
            "location": 1037,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_extra": {
            "name": "get_extra",
            "location": 1045,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_table": {
            "name": "get_table",
            "location": 1055,
            "return": [
                "Table",
                "zilencer.models.RemoteZulipServer",
                "Optional[T]",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "Optional[bool]",
                "Dict[str,Any]",
                "db.models.Taxon"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "schema": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Database.get_columns": {
            "name": "get_columns",
            "location": 1064,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "db.models.Taxon",
                "list",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Database.get_indexes": {
            "name": "get_indexes",
            "location": 1067,
            "return": [
                "Optional[str]",
                "str",
                "db.models.Taxon",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Database.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 1070,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None"
                ]
            }
        },
        "Database.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 1073,
            "return": [
                "str",
                "int",
                "tartare.core.readers.CsvReader",
                "Dict[str, str]",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "int"
                ],
                "schema": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Database.get_schema_access_for_csv_upload": {
            "name": "get_schema_access_for_csv_upload",
            "location": 1076,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[T]",
                "Optional[str]",
                "Callable[[], None]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.sqlalchemy_uri_decrypted": {
            "name": "sqlalchemy_uri_decrypted",
            "location": 1080,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.sql_url": {
            "name": "sql_url",
            "location": 1089,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_perm": {
            "name": "get_perm",
            "location": 1092,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.has_table": {
            "name": "has_table",
            "location": 1096,
            "return": [
                "taxonomy.db.models.Taxon",
                "str",
                "blurr.core.schema_loader.SchemaLoader",
                "Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "sqlalchemy.Table",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "Exception",
                    "type",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "Database.get_dialect": {
            "name": "get_dialect",
            "location": 1102,
            "return": [
                "raiden.utils.BlockNumber",
                "Optional[str]",
                "str",
                "raiden.utils.TokenAmount",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.log_this": {
            "name": "log_this",
            "location": 1130,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "Callable[[], None]",
                    "bool",
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "Iterable[T]",
                    "Callable[[None], \"Expr\"]",
                    "memoryview"
                ],
                "f": [
                    "Callable[[], None]",
                    "bool",
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "Iterable[T]",
                    "Callable[[None], \"Expr\"]",
                    "memoryview"
                ]
            }
        },
        "DatasourceAccessRequest.cls_model": {
            "name": "cls_model",
            "location": 1211,
            "return": [
                "str",
                "Mapping[str, Any]",
                "db.models.Taxon",
                "sqlalchemy.engine.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.username": {
            "name": "username",
            "location": 1215,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.datasource": {
            "name": "datasource",
            "location": 1219,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.get_datasource": {
            "name": "get_datasource",
            "location": 1224,
            "return": [
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.datasource_link": {
            "name": "datasource_link",
            "location": 1231,
            "return": [
                "str",
                "Dict[str, Any]",
                "numpy.ndarray",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.roles_with_datasource": {
            "name": "roles_with_datasource",
            "location": 1235,
            "return": [
                "Text",
                "str",
                "List[Dict]",
                "List",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceAccessRequest.user_roles": {
            "name": "user_roles",
            "location": 1253,
            "return": [
                "Text",
                "str",
                "List[str]",
                "bug_buddy.schema.Commit",
                "List",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dashboard.import_obj.alter_positions": {
            "name": "alter_positions",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "dashboard": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Callable[[Dict], bool]]",
                    "Dict[str, Union[str, int]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "old_to_new_slc_id_dict": [
                    "sqlalchemy.orm.Session",
                    "Dict[str, str]",
                    "Callable[[Type, str], bool]",
                    "Optional[Dict[object, Any]]"
                ]
            }
        },
        "Database.get_df.needs_conversion": {
            "name": "needs_conversion",
            "location": 840,
            "return": [
                "bool"
            ],
            "arguments": {
                "df_series": [
                    "pandas.Series",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, int]",
                    "Mapping[str, Sequence[str]]"
                ]
            }
        },
        "Database.get_df._log_query": {
            "name": "_log_query",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "models.Pkg"
                ]
            }
        },
        "Log.log_this.wrapper": {
            "name": "wrapper",
            "location": 1133,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/models/helpers.py": {
        "json_to_dict": {
            "name": "json_to_dict",
            "location": 37,
            "return": [
                "Dict",
                "str",
                "int",
                "static_frame.core.util.UFunc",
                "Set[cmk.utils.type_defs.HostName]",
                "Optional[float]"
            ],
            "arguments": {
                "json_str": [
                    "str"
                ]
            }
        },
        "ImportMixin._parent_foreign_key_mappings": {
            "name": "_parent_foreign_key_mappings",
            "location": 60,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Optional[Callable[[dict], None]]",
                    "tuple",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "type",
                    "dict"
                ]
            }
        },
        "ImportMixin._unique_constrains": {
            "name": "_unique_constrains",
            "location": 68,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int",
                    "Dict[str, object]",
                    "bool",
                    "str"
                ]
            }
        },
        "ImportMixin.export_schema": {
            "name": "export_schema",
            "location": 76,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable",
                    "dict"
                ],
                "recursive": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "Optional[Tuple[float,float]]",
                    "bytes",
                    "Optional[str]"
                ],
                "include_parent_ref": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "Optional[Tuple[float,float]]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ImportMixin.import_from_dict": {
            "name": "import_from_dict",
            "location": 99,
            "return": [
                "ImportMixin"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImportMixin]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "dict_rep": [
                    "cmk.utils.type_defs.EventRule",
                    "Callable",
                    "src.main.core.models.area.Area"
                ],
                "parent": [
                    "None",
                    "Callable",
                    "str"
                ],
                "recursive": [
                    "bool",
                    "Optional[int]",
                    "List[str]"
                ],
                "sync": [
                    "List",
                    "Optional[List[T]]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "tracim.models.data.Content",
                    "Dict",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "ImportMixin.export_to_dict": {
            "name": "export_to_dict",
            "location": 186,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "recursive": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[float]"
                ],
                "include_parent_ref": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[float]"
                ],
                "include_defaults": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        },
        "ImportMixin.override": {
            "name": "override",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "ruamel.yaml.comments.CommentedMap",
                    "dict",
                    "str"
                ]
            }
        },
        "ImportMixin.copy": {
            "name": "copy",
            "location": 224,
            "return": [
                "ImportMixin"
            ],
            "arguments": {
                "self": [
                    "_TImportMixin@@ImportMixin@@"
                ]
            }
        },
        "ImportMixin.alter_params": {
            "name": "alter_params",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportMixin.params_dict": {
            "name": "params_dict",
            "location": 236,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "int",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportMixin.template_params_dict": {
            "name": "template_params_dict",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.created_by_fk": {
            "name": "created_by_fk",
            "location": 257,
            "return": [
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.changed_by_fk": {
            "name": "changed_by_fk",
            "location": 263,
            "return": [
                "models.Subtask",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable._user_link": {
            "name": "_user_link",
            "location": 268,
            "return": [
                "str",
                "Text",
                "Markup"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AuditMixinNullable.changed_by_name": {
            "name": "changed_by_name",
            "location": 274,
            "return": [
                "Text",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.creator": {
            "name": "creator",
            "location": 280,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "str",
                "sqlalchemy.orm.query.Query",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.changed_by_": {
            "name": "changed_by_",
            "location": 284,
            "return": [
                "bool",
                "zerver.models.Realm",
                "ddionrails.studies.models.Study",
                "lingAny_api.models.reflection.Reflection",
                "int",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.changed_on_": {
            "name": "changed_on_",
            "location": 288,
            "return": [
                "str",
                "Markup"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditMixinNullable.modified": {
            "name": "modified",
            "location": 292,
            "return": [
                "str",
                "Markup"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryResult.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "str",
                    "int"
                ],
                "query": [
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "str",
                    "int"
                ],
                "duration": [
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "str",
                    "int"
                ],
                "status": [
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "str",
                    "int"
                ],
                "error_message": [
                    "None",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ExtraJSONMixin.extra": {
            "name": "extra",
            "location": 320,
            "return": [
                "Dict",
                "int",
                "bool",
                "Optional[float]",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraJSONMixin.set_extra_json": {
            "name": "set_extra_json",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Match",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "ExtraJSONMixin.set_extra_json_key": {
            "name": "set_extra_json_key",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "Optional[bytes]"
                ]
            }
        },
        "ImportMixin.export_schema.formatter": {
            "name": "formatter",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "Iterator[Any]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/models/schedules.py": {
        "get_scheduler_model": {
            "name": "get_scheduler_model",
            "location": 105,
            "return": [
                "Optional[Type[Union[(DashboardEmailSchedule, SliceEmailSchedule)]]]"
            ],
            "arguments": {
                "report_type": [
                    "str",
                    "enum.EnumMeta",
                    "Set[mtg_ssm.scryfall.models.ScrySetType]"
                ]
            }
        },
        "EmailSchedule.user_id": {
            "name": "user_id",
            "location": 62,
            "return": [
                "Column",
                "int",
                "str",
                "bool",
                "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSchedule.user": {
            "name": "user",
            "location": 66,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/models/sql_lab.py": {
        "Query.limit_reached": {
            "name": "limit_reached",
            "location": 98,
            "return": [
                "bool",
                "int",
                "float",
                "raiden.utils.Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.name": {
            "name": "name",
            "location": 132,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavedQuery.pop_tab_link": {
            "name": "pop_tab_link",
            "location": 163,
            "return": [
                "str",
                "Markup"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavedQuery.user_email": {
            "name": "user_email",
            "location": 171,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavedQuery.sqlalchemy_uri": {
            "name": "sqlalchemy_uri",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SavedQuery.url": {
            "name": "url",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/models/tags.py": {
        "get_tag": {
            "name": "get_tag",
            "location": 87,
            "return": [
                "Tag",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[List[str]]"
                ],
                "session": [
                    "str",
                    "Optional[\"TypeResourceIdentifier\"]"
                ],
                "type_": [
                    "str",
                    "Optional[str]",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_object_type": {
            "name": "get_object_type",
            "location": 98,
            "return": [
                "NamedTuple",
                "List[str]"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ObjectUpdater.get_owners_ids": {
            "name": "get_owners_ids",
            "location": 115,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str"
                ],
                "target": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str"
                ]
            }
        },
        "ObjectUpdater._add_owners": {
            "name": "_add_owners",
            "location": 119,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.Session",
                    "set",
                    "int"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "target": [
                    "str",
                    "Optional[int]",
                    "sqlalchemy.orm.session.Session",
                    "int"
                ]
            }
        },
        "ObjectUpdater.after_insert": {
            "name": "after_insert",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "mapper": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "connection": [
                    "str",
                    "dict",
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "List['Product']"
                ],
                "target": [
                    "dict",
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Awaitable[T]",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "esm.models.last_operation.LastOperation"
                ]
            }
        },
        "ObjectUpdater.after_update": {
            "name": "after_update",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "enum.Enum",
                    "T"
                ],
                "mapper": [
                    "str",
                    "Callable[[Any], T]",
                    "int",
                    "bool",
                    "Type[T]"
                ],
                "connection": [
                    "dict",
                    "bool",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "str"
                ],
                "target": [
                    "str",
                    "enum.Enum",
                    "T"
                ]
            }
        },
        "ObjectUpdater.after_delete": {
            "name": "after_delete",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "docker.models.containers.Container",
                    "type"
                ],
                "mapper": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "List[dict]"
                ],
                "connection": [
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "str",
                    "dict",
                    "List[List[str]]"
                ],
                "target": [
                    "Dict[str, Any]",
                    "dict",
                    "docker.models.containers.Container",
                    "type"
                ]
            }
        },
        "ChartUpdater.get_owners_ids": {
            "name": "get_owners_ids",
            "location": 190,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str"
                ],
                "target": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[str]",
                    "sqlalchemy.Table",
                    "Optional[grouper.models.user.User]"
                ]
            }
        },
        "DashboardUpdater.get_owners_ids": {
            "name": "get_owners_ids",
            "location": 199,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str"
                ],
                "target": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[str]",
                    "sqlalchemy.Table",
                    "Optional[grouper.models.user.User]"
                ]
            }
        },
        "QueryUpdater.get_owners_ids": {
            "name": "get_owners_ids",
            "location": 208,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str"
                ],
                "target": [
                    "flask_appbuilder.Model",
                    "sqlalchemy.Table",
                    "Union[str, int]",
                    "dict"
                ]
            }
        },
        "FavStarUpdater.after_insert": {
            "name": "after_insert",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "mapper": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "connection": [
                    "str",
                    "dict",
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "List['Product']"
                ],
                "target": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "FavStarUpdater.after_delete": {
            "name": "after_delete",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "List[dict]"
                ],
                "mapper": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "List[dict]"
                ],
                "connection": [
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "str",
                    "dict",
                    "List[List[str]]"
                ],
                "target": [
                    "dict",
                    "sqlalchemy.orm.session.Session",
                    "List[Tuple[str, str]]",
                    "type",
                    "asgard.models.spec.container.ContainerParameterSpec"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/models/user_attributes.py": {},
    "incubator-superset-own-master/superset/models/__init__.py": {},
    "incubator-superset-own-master/superset/tasks/celery_app.py": {},
    "incubator-superset-own-master/superset/tasks/schedules.py": {
        "_get_recipients": {
            "name": "_get_recipients",
            "location": 66,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "schedule": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_deliver_email": {
            "name": "_deliver_email",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "float",
                    "int"
                ],
                "subject": [
                    "str",
                    "dict"
                ],
                "email": [
                    "str",
                    "dict"
                ]
            }
        },
        "_generate_mail_content": {
            "name": "_generate_mail_content",
            "location": 89,
            "return": [
                "EmailContent"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "supersemodels.schedules.EmailDeliveryType",
                    "int"
                ],
                "screenshot": [
                    "str",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "Optional[str]"
                ],
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_get_auth_cookies": {
            "name": "_get_auth_cookies",
            "location": 121,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "_get_url_path": {
            "name": "_get_url_path",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "str",
                    "tuple",
                    "Optional[str]"
                ]
            }
        },
        "create_webdriver": {
            "name": "create_webdriver",
            "location": 150,
            "return": [
                "Union[(chrome.webdriver.WebDriver, firefox.webdriver.WebDriver)]"
            ],
            "arguments": {}
        },
        "destroy_webdriver": {
            "name": "destroy_webdriver",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "Union[selenium.webdriver.chrome.webdriver.WebDriver, selenium.webdriver.firefox.webdriver.WebDriver]",
                    "selenium.webdriver.remote.webdriver.WebDriver",
                    "libcloud.common.base.BaseDriver",
                    "tartare.core.contexContributorExportContext"
                ]
            }
        },
        "deliver_dashboard": {
            "name": "deliver_dashboard",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "schedule": [
                    "email.message.EmailMessage",
                    "bool",
                    "int",
                    "bytes",
                    "dict",
                    "logging.LogRecord"
                ]
            }
        },
        "_get_slice_data": {
            "name": "_get_slice_data",
            "location": 261,
            "return": [
                "EmailContent"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "_get_slice_visualization": {
            "name": "_get_slice_visualization",
            "location": 313,
            "return": [
                "EmailContent"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "bytes"
                ]
            }
        },
        "deliver_slice": {
            "name": "deliver_slice",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "schedule": [
                    "int",
                    "purplship.core.models.RateRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "schedule_email_report": {
            "name": "schedule_email_report",
            "location": 377,
            "return": [
                "None",
                "Iterator[object]",
                "Union[tuple,list]",
                "bool",
                "app.models.move.Coordinate",
                "DefaultDict"
            ],
            "arguments": {
                "task": [
                    "celery.app.task.Task",
                    "Optional[str]",
                    "Mapping[Any, str]",
                    "str"
                ],
                "report_type": [
                    "Optional[str]",
                    "supersemodels.schedules.ScheduleType",
                    "Mapping[str, str]"
                ],
                "schedule_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "recipients": [
                    "None",
                    "Optional[int]",
                    "Optional[Dict[str,str]]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "next_schedules": {
            "name": "next_schedules",
            "location": 399,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "crontab": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Optional[str]"
                ],
                "start_at": [
                    "datetime.datetime",
                    "str",
                    "Optional[int]"
                ],
                "stop_at": [
                    "int",
                    "datetime.datetime",
                    "dict"
                ],
                "resolution": [
                    "int",
                    "datetime.datetime",
                    "Dict"
                ]
            }
        },
        "schedule_window": {
            "name": "schedule_window",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "report_type": [
                    "str",
                    "bool",
                    "Dict[str, object]",
                    "Type[Any]"
                ],
                "start_at": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "tuple"
                ],
                "stop_at": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "tuple"
                ],
                "resolution": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "tuple"
                ]
            }
        },
        "schedule_hourly": {
            "name": "schedule_hourly",
            "location": 444,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/tasks/__init__.py": {},
    "incubator-superset-own-master/superset/translations/utils.py": {
        "get_language_pack": {
            "name": "get_language_pack",
            "location": 27,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "locale": [
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/translations/__init__.py": {},
    "incubator-superset-own-master/superset/utils/cache.py": {
        "view_cache_key": {
            "name": "view_cache_key",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "memoized_func": {
            "name": "memoized_func",
            "location": 28,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "key": [
                    "Optional[str]",
                    "Callable[..., str]",
                    "str",
                    "Type"
                ],
                "attribute_in_key": [
                    "Optional[str]",
                    "Callable[..., str]",
                    "str",
                    "Type"
                ]
            }
        },
        "memoized_func.wrap": {
            "name": "wrap",
            "location": 44,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "memoized_func.wrap.wrapped_f": {
            "name": "wrapped_f",
            "location": 64,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/utils/core.py": {
        "flasher": {
            "name": "flasher",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "signal.Signals",
                    "Exception"
                ],
                "severity": [
                    "None",
                    "str",
                    "List[str]",
                    "bytes",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        },
        "memoized": {
            "name": "memoized",
            "location": 132,
            "return": [
                "Union[(Callable[([Any], Any)], _memoized)]"
            ],
            "arguments": {
                "func": [
                    "None",
                    "Callable",
                    "Callable[...,None]"
                ],
                "watch": [
                    "None",
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "js_string_to_python": {
            "name": "js_string_to_python",
            "location": 141,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "list",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "string_to_num": {
            "name": "string_to_num",
            "location": 145,
            "return": [
                "Optional[Union[(float, int, _T0)]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "list_minus": {
            "name": "list_minus",
            "location": 185,
            "return": [
                "list"
            ],
            "arguments": {
                "l": [
                    "List[float]",
                    "metrics_backend.utils.Address",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "str"
                ],
                "minus": [
                    "List[float]",
                    "metrics_backend.utils.Address",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "str"
                ]
            }
        },
        "parse_human_datetime": {
            "name": "parse_human_datetime",
            "location": 194,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "dttm_from_timtuple": {
            "name": "dttm_from_timtuple",
            "location": 233,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "magic.models.Deck",
                    "bytes",
                    "snorkel.types.DataPoint",
                    "float"
                ]
            }
        },
        "decode_dashboards": {
            "name": "decode_dashboards",
            "location": 238,
            "return": [
                "Dashboard",
                "datetime.datetime",
                "Slice",
                "Dict",
                "TableColumn",
                "SqlaTable",
                "core_lib.core.models.Venue",
                "SqlMetric",
                "int",
                "raiden.utils.Address",
                "pandas.Series",
                "Optional[str]"
            ],
            "arguments": {
                "o": [
                    "dict",
                    "jumeaux.models.Res2DictAddOnPayload",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_human_timedelta": {
            "name": "parse_human_timedelta",
            "location": 287,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "s": [
                    "Tuple[str, str]",
                    "str",
                    "bytes",
                    "waterbutler.core.path.WaterButlerPath",
                    "waterbutler.core.provider.BaseProvider"
                ]
            }
        },
        "datetime_f": {
            "name": "datetime_f",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "dttm": [
                    "float",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "base_json_conv": {
            "name": "base_json_conv",
            "location": 330,
            "return": [
                "Optional[Union[(float, int, list, str)]]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "float",
                    "List[str]",
                    "Callable[[int], None]",
                    "str"
                ]
            }
        },
        "json_iso_dttm_ser": {
            "name": "json_iso_dttm_ser",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "employees.models.Report",
                    "str",
                    "datetime.date",
                    "models.User",
                    "Union[str, int]"
                ],
                "pessimistic": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "pessimistic_json_iso_dttm_ser": {
            "name": "pessimistic_json_iso_dttm_ser",
            "location": 372,
            "return": [
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "Optional[int]",
                    "mypy.types.Type",
                    "Callable",
                    "str",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "json_int_dttm_ser": {
            "name": "json_int_dttm_ser",
            "location": 379,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[str]",
                    "models.User",
                    "Union[str, int]"
                ]
            }
        },
        "json_dumps_w_dates": {
            "name": "json_dumps_w_dates",
            "location": 394,
            "return": [
                "str"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "Dict[str, models.DeviceRow]",
                    "mypy.types.Type",
                    "types.ModuleType",
                    "server.models.Bike"
                ]
            }
        },
        "error_msg_from_exception": {
            "name": "error_msg_from_exception",
            "location": 398,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "e": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "markdown": {
            "name": "markdown",
            "location": 421,
            "return": [
                "Markup",
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "markup_wrap": [
                    "bool",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "readfile": {
            "name": "readfile",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "generic_find_constraint_name": {
            "name": "generic_find_constraint_name",
            "location": 445,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "table": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, int]"
                ],
                "columns": [
                    "Dict[str, List[bytes]]",
                    "str",
                    "Type",
                    "types.ModuleType",
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "referenced": [
                    "Dict[str, List[bytes]]",
                    "str",
                    "Type",
                    "types.ModuleType",
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "db": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "generic_find_fk_constraint_name": {
            "name": "generic_find_fk_constraint_name",
            "location": 454,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "columns": [
                    "Sequence[str]",
                    "AbstractSet[str]",
                    "Set[cmk.utils.type_defs.SectionName]",
                    "Set[str]",
                    "list",
                    "Callable[..., None]"
                ],
                "referenced": [
                    "Sequence[str]",
                    "AbstractSet[str]",
                    "Set[cmk.utils.type_defs.SectionName]",
                    "Set[str]",
                    "list",
                    "Callable[..., None]"
                ],
                "insp": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "generic_find_fk_constraint_names": {
            "name": "generic_find_fk_constraint_names",
            "location": 461,
            "return": [
                "set"
            ],
            "arguments": {
                "table": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "columns": [
                    "Sequence[str]",
                    "AbstractSet[str]",
                    "Set[cmk.utils.type_defs.SectionName]",
                    "Set[str]",
                    "list",
                    "Callable[..., None]"
                ],
                "referenced": [
                    "Sequence[str]",
                    "AbstractSet[str]",
                    "Set[cmk.utils.type_defs.SectionName]",
                    "Set[str]",
                    "list",
                    "Callable[..., None]"
                ],
                "insp": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "generic_find_uq_constraint_name": {
            "name": "generic_find_uq_constraint_name",
            "location": 472,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Optional[str]",
                    "jfinances.models.TransactionModel",
                    "bool"
                ],
                "columns": [
                    "str",
                    "int"
                ],
                "insp": [
                    "str",
                    "Optional[str]",
                    "jfinances.models.TransactionModel",
                    "bool"
                ]
            }
        },
        "get_datasource_full_name": {
            "name": "get_datasource_full_name",
            "location": 480,
            "return": [
                "str"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "List[str]"
                ],
                "datasource_name": [
                    "str",
                    "List[str]"
                ],
                "schema": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "validate_json": {
            "name": "validate_json",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "raiden.utils.signer.Signer",
                    "bool"
                ]
            }
        },
        "table_has_constraint": {
            "name": "table_has_constraint",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "[str]"
                ],
                "name": [
                    "str"
                ],
                "db": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "[str]"
                ]
            }
        },
        "pessimistic_connection_handling": {
            "name": "pessimistic_connection_handling",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "some_engine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "notify_user_about_perm_udate": {
            "name": "notify_user_about_perm_udate",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "granter": [
                    "dict",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "str"
                ],
                "user": [
                    "dict",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "str"
                ],
                "role": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "static_frame.core.store.StoreConfigMapInitializer",
                    "models.User",
                    "IO"
                ],
                "datasource": [
                    "Dict[str, Any]",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "str",
                    "dict",
                    "pandas.DataFrame"
                ],
                "tpl_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "static_frame.core.store.StoreConfigMapInitializer",
                    "models.User",
                    "IO"
                ],
                "config": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "send_email_smtp": {
            "name": "send_email_smtp",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "to": [
                    "Iterable[str]",
                    "Union[str, None]",
                    "bool",
                    "Union[List, Tuple]",
                    "list",
                    "int"
                ],
                "subject": [
                    "str",
                    "dict"
                ],
                "html_content": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "config": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "instark.application.managers.SessionManager"
                ],
                "files": [
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "bool",
                    "Callable[[pandas.DataFrame],pandas.DataFrame]",
                    "str",
                    "List"
                ],
                "data": [
                    "None",
                    "Dict",
                    "bytes",
                    "Dict[int,Dict]"
                ],
                "images": [
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[int,Dict[str,Any]]",
                    "List"
                ],
                "dryrun": [
                    "bool",
                    "Dict",
                    "models.Channel"
                ],
                "cc": [
                    "None",
                    "Dict[str,Any]",
                    "List[str]",
                    "tartare.core.models.DataSet",
                    "bytes",
                    "List[dict]"
                ],
                "bcc": [
                    "None",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier,raiden.utils.List[raiden.messages.abstracMessage]]",
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[annofabapi.models.Task]",
                    "Dict"
                ],
                "mime_subtype": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "send_MIME_email": {
            "name": "send_MIME_email",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "e_from": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Tuple[int, int]]"
                ],
                "e_to": [
                    "str",
                    "Optional[float]",
                    "logging.Logger"
                ],
                "mime_msg": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "config": [
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str, str, str]]",
                    "List[Tuple[str, str, str, Any, int]]",
                    "Dict[str, Dict]",
                    "dict"
                ],
                "dryrun": [
                    "bool",
                    "str",
                    "List[aw_core.models.Event]",
                    "Optional[str]",
                    "int",
                    "logging.Logger",
                    "Callable[[pandas.DataFrame],pandas.DataFrame]"
                ]
            }
        },
        "get_email_address_list": {
            "name": "get_email_address_list",
            "location": 678,
            "return": [
                "list"
            ],
            "arguments": {
                "address_string": [
                    "str"
                ]
            }
        },
        "choicify": {
            "name": "choicify",
            "location": 691,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "values": [
                    "list",
                    "str",
                    "float",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "setup_cache": {
            "name": "setup_cache",
            "location": 696,
            "return": [
                "Cache",
                "Mapping[str,str]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "str",
                "Dict"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "cache_config": [
                    "dict",
                    "static_frame.core.store.StoreConfigMapInitializer",
                    "types.Config"
                ]
            }
        },
        "zlib_compress": {
            "name": "zlib_compress",
            "location": 702,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int"
                ]
            }
        },
        "zlib_decompress_to_string": {
            "name": "zlib_decompress_to_string",
            "location": 715,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "blob": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_celery_app": {
            "name": "get_celery_app",
            "location": 736,
            "return": [
                "None",
                "flask.Flask",
                "sphinx.application.Sphinx"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "to_adhoc": {
            "name": "to_adhoc",
            "location": 746,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filt": [
                    "Dict[str, type]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "T"
                ],
                "expressionType": [
                    "str",
                    "Text"
                ],
                "clause": [
                    "Text",
                    "str",
                    "int",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ]
            }
        },
        "merge_extra_filters": {
            "name": "merge_extra_filters",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "form_data": [
                    "dict",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "models.Question",
                    "Iterable",
                    "Dict[str, Any]"
                ]
            }
        },
        "merge_request_params": {
            "name": "merge_request_params",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "form_data": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[Dict]",
                    "dict",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "bytes",
                    "Hashable"
                ],
                "params": [
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[bytes, bytes]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_update_perms_flag": {
            "name": "get_update_perms_flag",
            "location": 847,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "user_label": {
            "name": "user_label",
            "location": 852,
            "return": [
                "str",
                "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "models.User",
                    "abilian.core.models.subjects.User",
                    "users.models.User",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "taskiapplication.models.task.Task",
                    "bool"
                ]
            }
        },
        "get_or_create_main_db": {
            "name": "get_or_create_main_db",
            "location": 861,
            "return": [
                "Database",
                "str",
                "pandas.Series",
                "List",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {}
        },
        "get_main_database": {
            "name": "get_main_database",
            "location": 879,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Iterable[str]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "is_adhoc_metric": {
            "name": "is_adhoc_metric",
            "location": 888,
            "return": [
                "bool",
                "mypy.types.Type",
                "str",
                "Optional[List[custom_index]]",
                "exporwiki.types.MissionType"
            ],
            "arguments": {
                "metric": [
                    "Type",
                    "dict",
                    "Optional[mypy.types.Type]"
                ]
            }
        },
        "get_metric_name": {
            "name": "get_metric_name",
            "location": 906,
            "return": [
                "str",
                "Iterable[int]",
                "limbic.emotion.models.LexiconLimbicModel",
                "float",
                "models.order.Order"
            ],
            "arguments": {
                "metric": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "get_metric_names": {
            "name": "get_metric_names",
            "location": 910,
            "return": [
                "list"
            ],
            "arguments": {
                "metrics": [
                    "str",
                    "zerver.models.Realm",
                    "list"
                ]
            }
        },
        "ensure_path_exists": {
            "name": "ensure_path_exists",
            "location": 914,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_since_until": {
            "name": "get_since_until",
            "location": 922,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "float",
                    "list",
                    "Dict[str, Any]",
                    "numpy.ndarray"
                ],
                "since": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "until": [
                    "str",
                    "None"
                ],
                "time_shift": [
                    "None",
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Union[int,None]",
                    "Union[float,int,str]"
                ],
                "relative_end": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ]
            }
        },
        "add_ago_to_since": {
            "name": "add_ago_to_since",
            "location": 998,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "since": [
                    "str"
                ]
            }
        },
        "convert_legacy_filters_into_adhoc": {
            "name": "convert_legacy_filters_into_adhoc",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "list",
                    "django.db.models.query.QuerySet",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "split_adhoc_filters_into_base_filters": {
            "name": "split_adhoc_filters_into_base_filters",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "str",
                    "Callable[[str], str]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "get_username": {
            "name": "get_username",
            "location": 1073,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "MediumText": {
            "name": "MediumText",
            "location": 1081,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "shortid": {
            "name": "shortid",
            "location": 1085,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_memoized.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "List[List[T]]"
                ],
                "watch": [
                    "Tuple",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "List[List[T]]"
                ]
            }
        },
        "_memoized.__call__": {
            "name": "__call__",
            "location": 105,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]",
                "List[zerver.models.DefaultStreamGroup]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_memoized.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "mypy.types.Type",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "types.Resolver",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_memoized.__get__": {
            "name": "__get__",
            "location": 125,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float",
                    "mode.utils.types.trees.NodeT"
                ],
                "objtype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "DimSelector.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardEncoder.default": {
            "name": "default",
            "location": 276,
            "return": [
                "str",
                "Dict[str,dict]",
                "Tuple[Tuple[int,...]]",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "numpy.ndarray",
                    "Dict[str, numpy.ndarray]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "Set[str]"
                ]
            }
        },
        "JSONEncodedDict.process_bind_param": {
            "name": "process_bind_param",
            "location": 306,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[T, Sequence[T]]",
                    "Optional[dict]",
                    "Optional[str]",
                    "Optional[datetime.timedelta]",
                    "float"
                ],
                "dialect": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "JSONEncodedDict.process_result_value": {
            "name": "process_result_value",
            "location": 312,
            "return": [
                "None",
                "str",
                "int",
                "List",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Any]",
                    "str"
                ],
                "dialect": [
                    "str",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        },
        "timeout.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "float"
                ],
                "error_message": [
                    "Text",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "timeout.handle_timeout": {
            "name": "handle_timeout",
            "location": 513,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "Optional[types.FrameType]",
                    "bool",
                    "List[List[Any]]",
                    "List[str]"
                ],
                "frame": [
                    "int",
                    "Optional[types.FrameType]",
                    "bool",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "timeout.__enter__": {
            "name": "__enter__",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "timeout.__exit__": {
            "name": "__exit__",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "pessimistic_connection_handling.ping_connection": {
            "name": "ping_connection",
            "location": 535,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "connection": [
                    "Pattern",
                    "decimal.Decimal",
                    "uuid.UUID",
                    "str"
                ],
                "branch": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "memoized.wrapper": {
            "name": "wrapper",
            "location": 136,
            "return": [
                "_memoized",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "merge_extra_filters.get_filter_key": {
            "name": "get_filter_key",
            "location": 791,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "IO",
                    "qutebrowser.utils.usertypes.KeyMode"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/utils/dashboard_import_export.py": {
        "import_dashboards": {
            "name": "import_dashboards",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "bool",
                    "\"Task\"",
                    "str"
                ],
                "data_stream": [
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "tuple",
                    "int",
                    "list"
                ],
                "import_time": [
                    "None",
                    "float",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.Secret",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "export_dashboards": {
            "name": "export_dashboards",
            "location": 41,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/utils/dates.py": {
        "datetime_to_epoch": {
            "name": "datetime_to_epoch",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int",
                "type",
                "List[str]"
            ],
            "arguments": {
                "dttm": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "now_as_float": {
            "name": "now_as_float",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/utils/decorators.py": {
        "stats_timing": {
            "name": "stats_timing",
            "location": 23,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "stats_key": [
                    "str",
                    "bytes"
                ],
                "stats_logger": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/utils/dict_import_export.py": {
        "export_schema_to_dict": {
            "name": "export_schema_to_dict",
            "location": 28,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "back_references": [
                    "Dict[str, Any]"
                ]
            }
        },
        "export_to_dict": {
            "name": "export_to_dict",
            "location": 42,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.graphs.graph_database.Database",
                    "Optional[labm8.py.sqlutil.Database.SessionType]",
                    "grouper.models.base.session.Session",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ],
                "recursive": [
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "back_references": [
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "include_defaults": [
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "import_from_dict": {
            "name": "import_from_dict",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "core.Pipeline",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "Union[str, int]",
                    "Dict[str, float]"
                ],
                "data": [
                    "dict",
                    "Dict[Any, str]"
                ],
                "sync": [
                    "List",
                    "Dict",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "core.Pipeline",
                    "Union[str,int]",
                    "Dict[str,float]",
                    "Union[HTMLSession,AsyncHTMLSession]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/utils/import_datasource.py": {
        "import_datasource": {
            "name": "import_datasource",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "i_datasource": [
                    "Any",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "lookup_database": [
                    "str",
                    "Optional[str]",
                    "Any"
                ],
                "lookup_datasource": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "import_time": [
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "Optional[float]",
                    "Optional[List[Any]]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "import_simple_obj": {
            "name": "import_simple_obj",
            "location": 77,
            "return": [
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "yawasscanner.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.query.Query"
                ],
                "i_obj": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Optional[Tuple[int, int]]",
                    "Optional[IO[bytes]]",
                    "List[int]",
                    "Optional[int]"
                ],
                "lookup_obj": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/utils/__init__.py": {},
    "incubator-superset-own-master/superset/views/annotations.py": {
        "AnnotationModelView.pre_add": {
            "name": "pre_add",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int"
                ]
            }
        },
        "AnnotationModelView.pre_update": {
            "name": "pre_update",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/views/api.py": {
        "Api.query": {
            "name": "query",
            "location": 36,
            "return": [
                "bool",
                "int",
                "db.models.taxon.FillDataLevel",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/views/base.py": {
        "get_error_msg": {
            "name": "get_error_msg",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "json_error_response": {
            "name": "json_error_response",
            "location": 60,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "jumeaux.models.Request",
                "dict",
                "List[dict]",
                "utils.types.Box3D",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Union[str, bool]",
                    "bool"
                ],
                "status": [
                    "int",
                    "bool",
                    "Callable",
                    "float"
                ],
                "stacktrace": [
                    "bool",
                    "int",
                    "Callable[..., None]",
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ],
                "payload": [
                    "str",
                    "bool"
                ],
                "link": [
                    "bool",
                    "int",
                    "Callable[..., None]",
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "json_success": {
            "name": "json_success",
            "location": 73,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "json_msg": [
                    "int",
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "status": [
                    "int",
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "data_payload_response": {
            "name": "data_payload_response",
            "location": 77,
            "return": [
                "Mapping[str, Any]",
                "cmk.utils.type_defs.EventRule",
                "Hashable",
                "cmk.utils.type_defs.UserId",
                "dict",
                "str",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "payload_json": [
                    "str",
                    "int",
                    "ruamel.yaml.comments.CommentedMap",
                    "Optional[int]",
                    "Dict[int, dict]"
                ],
                "has_error": [
                    "int",
                    "Callable"
                ]
            }
        },
        "generate_download_headers": {
            "name": "generate_download_headers",
            "location": 82,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "extension": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "api": {
            "name": "api",
            "location": 91,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "IO[bytes]"
                ]
            }
        },
        "handle_api_exception": {
            "name": "handle_api_exception",
            "location": 106,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "get_datasource_exist_error_msg": {
            "name": "get_datasource_exist_error_msg",
            "location": 132,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "full_name": [
                    "str"
                ]
            }
        },
        "get_user_roles": {
            "name": "get_user_roles",
            "location": 136,
            "return": [
                "int",
                "raiden.utils.TokenAmount",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "validate_json": {
            "name": "validate_json",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "faustypes.models.ModelT",
                    "str"
                ],
                "field": [
                    "wtforms.fields.core.Field",
                    "list",
                    "type",
                    "List[str]"
                ]
            }
        },
        "check_ownership": {
            "name": "check_ownership",
            "location": 326,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "bool"
                ],
                "raise_if_false": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "api.wraps": {
            "name": "wraps",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "handle_api_exception.wraps": {
            "name": "wraps",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSupersetView.json_response": {
            "name": "json_response",
            "location": 145,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "datetime.datetime",
                    "bytes"
                ],
                "status": [
                    "int",
                    "datetime.datetime",
                    "bytes"
                ]
            }
        },
        "BaseSupersetView.common_bootsrap_payload": {
            "name": "common_bootsrap_payload",
            "location": 151,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlExportMixin.yaml_export": {
            "name": "yaml_export",
            "location": 190,
            "return": [
                "List[str]",
                "str",
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "float",
                "jumeaux.models.Request"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "T",
                    "Pattern",
                    "Sequence[str]",
                    "bool",
                    "Union[application.domain.models.T, List[application.domain.models.T]]"
                ]
            }
        },
        "DeleteMixin._delete": {
            "name": "_delete",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DeleteMixin.muldelete": {
            "name": "muldelete",
            "location": 255,
            "return": [
                "str",
                "int",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "int",
                    "T",
                    "Union[application.domain.models.T, List[application.domain.models.T]]",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "SupersetFilter.get_user_roles": {
            "name": "get_user_roles",
            "location": 278,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "str",
                "Optional[Any]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetFilter.get_all_permissions": {
            "name": "get_all_permissions",
            "location": 281,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetFilter.has_role": {
            "name": "has_role",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role_name_or_list": [
                    "List[str]",
                    "list",
                    "str",
                    "int",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "SupersetFilter.has_perm": {
            "name": "has_perm",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "permission_name": [
                    "str",
                    "Optional[str]"
                ],
                "view_menu_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SupersetFilter.get_view_menus": {
            "name": "get_view_menus",
            "location": 301,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "permission_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DatasourceFilter.apply": {
            "name": "apply",
            "location": 311,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Type"
                ],
                "func": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/views/core.py": {
        "get_database_access_error_msg": {
            "name": "get_database_access_error_msg",
            "location": 94,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ]
            }
        },
        "is_owner": {
            "name": "is_owner",
            "location": 99,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "flask_appbuilder.security.sqla.models.User",
                    "solo.server.db.types.SQLEngine",
                    "app.models.user.UserInDB",
                    "tildes.models.user.User",
                    "flask.Response",
                    "int"
                ],
                "user": [
                    "flask_appbuilder.security.sqla.models.User",
                    "solo.server.db.types.SQLEngine",
                    "app.models.user.UserInDB",
                    "tildes.models.user.User",
                    "flask.Response",
                    "int"
                ]
            }
        },
        "health": {
            "name": "health",
            "location": 746,
            "return": [
                "Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "healthcheck": {
            "name": "healthcheck",
            "location": 751,
            "return": [
                "Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "ping": {
            "name": "ping",
            "location": 756,
            "return": [
                "Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "apply_caching": {
            "name": "apply_caching",
            "location": 3003,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "str",
                    "bool",
                    "dict",
                    "requests.Response"
                ]
            }
        },
        "panoramix": {
            "name": "panoramix",
            "location": 3022,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "caravel": {
            "name": "caravel",
            "location": 3027,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SliceFilter.apply": {
            "name": "apply",
            "location": 113,
            "return": [
                "Mapping",
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "esm.models.last_operation.LastOperation",
                    "MutableMapping[str, Any]",
                    "Dict[str, Dict[str, float]]"
                ],
                "func": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "DashboardFilter.apply": {
            "name": "apply",
            "location": 134,
            "return": [
                "Mapping",
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "esm.models.last_operation.LastOperation",
                    "Set[str]",
                    "int"
                ],
                "func": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "DatabaseView.pre_add": {
            "name": "pre_add",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[sqlalchemy.engine.Engine]"
                ]
            }
        },
        "DatabaseView.pre_update": {
            "name": "pre_update",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.engine.base.Engine"
                ]
            }
        },
        "DatabaseView.pre_delete": {
            "name": "pre_delete",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, float]",
                    "Dict[str, str]",
                    "bool",
                    "fastapi.dependencies.models.Dependant",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, Any]"
                ]
            }
        },
        "DatabaseView._delete": {
            "name": "_delete",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "DatabaseView.check_extra": {
            "name": "check_extra",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "deeplearning.deepsmith.db.session_t",
                    "Iterable[zerver.models.Stream]"
                ]
            }
        },
        "CsvToDatabaseView.form_get": {
            "name": "form_get",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[preacher.core.value.Value.Context]",
                    "models.Route"
                ]
            }
        },
        "CsvToDatabaseView.form_post": {
            "name": "form_post",
            "location": 376,
            "return": [
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "CsvToDatabaseView.is_schema_allowed": {
            "name": "is_schema_allowed",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "List[str]"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "SliceModelView.pre_add": {
            "name": "pre_add",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Union[int, str]",
                    "List[List[str]]",
                    "static_frame.core.frame.Frame"
                ]
            }
        },
        "SliceModelView.pre_update": {
            "name": "pre_update",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "SliceModelView.pre_delete": {
            "name": "pre_delete",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "SliceModelView.add": {
            "name": "add",
            "location": 535,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardModelView.pre_add": {
            "name": "pre_add",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "models.LetterRequest",
                    "Optional[qutebrowser.api.apitypes.Tab]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "DashboardModelView.pre_update": {
            "name": "pre_update",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DashboardModelView.pre_delete": {
            "name": "pre_delete",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "DashboardModelView.mulexport": {
            "name": "mulexport",
            "location": 656,
            "return": [
                "str",
                "Callable",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "T",
                    "Iterable",
                    "int"
                ]
            }
        },
        "DashboardModelView.download_dashboards": {
            "name": "download_dashboards",
            "location": 666,
            "return": [
                "Response",
                "raiden.utils.Dict[str,raiden.utils.Any]",
                "List[str]",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KV.store": {
            "name": "store",
            "location": 767,
            "return": [
                "Response",
                "List[str]",
                "Dict[str,Any]",
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "Dict",
                "Flow"
            ],
            "arguments": {
                "self": []
            }
        },
        "KV.get_value": {
            "name": "get_value",
            "location": 782,
            "return": [
                "Response",
                "Dict[str,Any]",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "transfer.models.Member.shipID",
                    "transfer.models.StorefronID"
                ]
            }
        },
        "R.index": {
            "name": "index",
            "location": 800,
            "return": [
                "str",
                "salon.models.Stylist",
                "raiden.utils.TokenAmount",
                "Dict[int, Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url_id": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "R.shortner": {
            "name": "shortner",
            "location": 816,
            "return": [
                "Response",
                "werkzeug.Response",
                "int",
                "models.Base",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.datasources": {
            "name": "datasources",
            "location": 834,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.override_role_permissions": {
            "name": "override_role_permissions",
            "location": 842,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[dict]",
                "bytes",
                "Tuple[str, str]",
                "int",
                "str",
                "flask.Response",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.request_access": {
            "name": "request_access",
            "location": 896,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "Mapping[str, Any]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.approve": {
            "name": "approve",
            "location": 944,
            "return": [
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.get_form_data": {
            "name": "get_form_data",
            "location": 1028,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "slice_id": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "sqlalchemy.orm.session.Session"
                ],
                "use_slice_data": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Superset.get_viz": {
            "name": "get_viz",
            "location": 1081,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "slice_id": [
                    "None",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "form_data": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "datasource_type": [
                    "None",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "datasource_id": [
                    "None",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "force": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Optional[core.arxiv.submission.domain.submission.Submission]",
                    "Set"
                ]
            }
        },
        "Superset.slice": {
            "name": "slice",
            "location": 1109,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "slice_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "app.schemas.farm.Farm"
                ]
            }
        },
        "Superset.get_query_string_response": {
            "name": "get_query_string_response",
            "location": 1120,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Response"
            ],
            "arguments": {
                "self": [],
                "viz_obj": [
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "Superset.get_raw_results": {
            "name": "get_raw_results",
            "location": 1170,
            "return": [
                "Dict[str, Any]",
                "tests.mock_vws.utils.Endpoint"
            ],
            "arguments": {
                "self": [],
                "viz_obj": [
                    "str",
                    "zerver.models.Realm",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Superset.get_samples": {
            "name": "get_samples",
            "location": 1175,
            "return": [
                "Dict[str, Any]",
                "tests.mock_vws.utils.Endpoint"
            ],
            "arguments": {
                "self": [],
                "viz_obj": [
                    "str",
                    "zerver.models.Realm",
                    "Iterable",
                    "models.order.Order",
                    "Dict[str, str]"
                ]
            }
        },
        "Superset.generate_json": {
            "name": "generate_json",
            "location": 1180,
            "return": [
                "CsvResponse",
                "Optional[str]",
                "pd.DataFrame",
                "Dict[str,Any]",
                "str",
                "Tuple[str,Optional[int]]",
                "Iterator[Vertex]"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "datasource_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "form_data": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "csv": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ],
                "query": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ],
                "force": [
                    "bool",
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "results": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ],
                "samples": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Superset.slice_json": {
            "name": "slice_json",
            "location": 1216,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "slice_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "app.schemas.farm.Farm"
                ]
            }
        },
        "Superset.annotation_json": {
            "name": "annotation_json",
            "location": 1229,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "layer_id": [
                    "str",
                    "transfer.models.MatchCommentID",
                    "transfer.models.TopicID",
                    "services.board.transfer.models.TopicID"
                ]
            }
        },
        "Superset.explore_json": {
            "name": "explore_json",
            "location": 1250,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[None,int,str]",
                    "Optional[List[custom_index]]",
                    "int"
                ],
                "datasource_id": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[None,int,str]",
                    "Optional[List[custom_index]]",
                    "int"
                ]
            }
        },
        "Superset.import_dashboards": {
            "name": "import_dashboards",
            "location": 1284,
            "return": [
                "int",
                "str",
                "starfish.core.imagestack.parser.TileKey",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.explorev2": {
            "name": "explorev2",
            "location": 1295,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[int]",
                "asgard.models.user.User",
                "str"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ],
                "datasource_id": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Superset.datasource_info": {
            "name": "datasource_info",
            "location": 1304,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "datasource_id": [
                    "int",
                    "Optional[int]",
                    "Hashable",
                    "str",
                    "deeplearning.ml4pl.models.epoch.Type"
                ],
                "datasource_type": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "form_data": [
                    "str",
                    "games.models.Game",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "Superset.explore": {
            "name": "explore",
            "location": 1326,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[None,int,str]"
                ],
                "datasource_id": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[None,int,str]"
                ]
            }
        },
        "Superset.filter": {
            "name": "filter",
            "location": 1427,
            "return": [
                "\"Flow\"",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Iterable[str]",
                    "models.Name"
                ],
                "datasource_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Iterable[str]",
                    "models.Name"
                ],
                "column": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Superset.save_or_overwrite_slice": {
            "name": "save_or_overwrite_slice",
            "location": 1450,
            "return": [
                "List[str]",
                "Optional[str]",
                "dict",
                "int",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "slc": [
                    "int",
                    "str",
                    "models.Person.Person"
                ],
                "slice_add_perm": [
                    "contests.models.User",
                    "cmk.utils.type_defs.UserId",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "bool",
                    "Callable"
                ],
                "slice_overwrite_perm": [
                    "int",
                    "Optional[str]",
                    "pandas.Series",
                    "str",
                    "Callable"
                ],
                "slice_download_perm": [
                    "str",
                    "werkzeug.datastructures.MultiDict",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "datasource_id": [
                    "str",
                    "int",
                    "bytearray",
                    "Tuple[int, str]",
                    "Union[server.models.Bike, int]",
                    "Optional[str]"
                ],
                "datasource_type": [
                    "Optional[str]",
                    "Model",
                    "str",
                    "list",
                    "bool",
                    "Sequence[str]"
                ],
                "datasource_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "Superset.save_slice": {
            "name": "save_slice",
            "location": 1532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slc": [
                    "str",
                    "dict",
                    "Mapping",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "Superset.overwrite_slice": {
            "name": "overwrite_slice",
            "location": 1539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slc": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Superset.checkbox": {
            "name": "checkbox",
            "location": 1549,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "model_view": [
                    "int",
                    "str",
                    "dict",
                    "float"
                ],
                "id_": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "verification_token.models.Token",
                    "str",
                    "Iterable[str]"
                ],
                "attr": [
                    "int",
                    "Optional[bool]",
                    "str",
                    "float",
                    "core.types.FBUserID"
                ],
                "value": [
                    "str",
                    "Callable[[Any], None]",
                    "int",
                    "faustypes.models.CoercionHandler",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "Superset.schemas": {
            "name": "schemas",
            "location": 1570,
            "return": [
                "Response",
                "bytes",
                "Dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "db_id": [
                    "int",
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "str"
                ],
                "force_refresh": [
                    "Text",
                    "int",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]"
                ]
            }
        },
        "Superset.tables": {
            "name": "tables",
            "location": 1596,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "db_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bytes"
                ],
                "schema": [
                    "str"
                ],
                "substr": [
                    "str",
                    "datetime.timedelta",
                    "int"
                ],
                "force_refresh": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Superset.copy_dash": {
            "name": "copy_dash",
            "location": 1646,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "dashboard_id": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "Superset.save_dash": {
            "name": "save_dash",
            "location": 1696,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "Sequence[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "dashboard_id": [
                    "int"
                ]
            }
        },
        "Superset._set_dash_metadata": {
            "name": "_set_dash_metadata",
            "location": 1711,
            "return": [
                "None"
            ],
            "arguments": {
                "dashboard": [
                    "bytes",
                    "str",
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "rotkehlchen.db.dbhandler.DBHandler"
                ],
                "data": [
                    "str",
                    "dict",
                    "zerver.models.Realm",
                    "list"
                ]
            }
        },
        "Superset.add_slices": {
            "name": "add_slices",
            "location": 1764,
            "return": [
                "Text",
                "bool",
                "pandas.DataFrame",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": [],
                "dashboard_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str"
                ]
            }
        },
        "Superset.testconn": {
            "name": "testconn",
            "location": 1783,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.recent_activity": {
            "name": "recent_activity",
            "location": 1841,
            "return": [
                "str",
                "Optional[int]",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "Superset.csrf_token": {
            "name": "csrf_token",
            "location": 1892,
            "return": [
                "Response",
                "int",
                "List[str]",
                "str",
                "cmk.base.events.EventContext",
                "Dict",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.fave_dashboards_by_username": {
            "name": "fave_dashboards_by_username",
            "location": 1901,
            "return": [
                "int",
                "List[str]",
                "pandas.DataFrame",
                "cmk.utils.type_defs.HostName",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "bool"
                ]
            }
        },
        "Superset.fave_dashboards": {
            "name": "fave_dashboards",
            "location": 1909,
            "return": [
                "str",
                "Optional[int]",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.UserId",
                    "esm.models.last_operation.LastOperation"
                ]
            }
        },
        "Superset.created_dashboards": {
            "name": "created_dashboards",
            "location": 1948,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "Superset.user_slices": {
            "name": "user_slices",
            "location": 1978,
            "return": [
                "str",
                "dict",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "esm.models.last_operation.LastOperation"
                ]
            }
        },
        "Superset.created_slices": {
            "name": "created_slices",
            "location": 2017,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Superset.fave_slices": {
            "name": "fave_slices",
            "location": 2046,
            "return": [
                "str",
                "Optional[int]",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "None",
                    "str",
                    "int",
                    "Mapping[str,Any]"
                ]
            }
        },
        "Superset.warm_up_cache": {
            "name": "warm_up_cache",
            "location": 2088,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.favstar": {
            "name": "favstar",
            "location": 2143,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "int",
                    "str",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "jgikbase.idmapping.core.tokens.Token",
                    "Optional[str]"
                ],
                "obj_id": [
                    "int",
                    "str",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "jgikbase.idmapping.core.tokens.Token",
                    "Optional[str]"
                ],
                "action": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Superset.dashboard": {
            "name": "dashboard",
            "location": 2172,
            "return": [
                "str",
                "Food.models.Product",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dashboard_id": [
                    "str",
                    "datetime.timedelta",
                    "int"
                ]
            }
        },
        "Superset.log": {
            "name": "log",
            "location": 2250,
            "return": [
                "Response",
                "str",
                "float",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.sync_druid_source": {
            "name": "sync_druid_source",
            "location": 2256,
            "return": [
                "Response",
                "Dict",
                "werkzeug.exceptions.HTTPException",
                "Dict[str,str]",
                "str",
                "Mapping[str,Any]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.sqllab_viz": {
            "name": "sqllab_viz",
            "location": 2308,
            "return": [
                "flask.Response",
                "dict",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.table": {
            "name": "table",
            "location": 2353,
            "return": [
                "str",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "database_id": [
                    "int",
                    "str",
                    "list"
                ],
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "Superset.extra_table_metadata": {
            "name": "extra_table_metadata",
            "location": 2413,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "database_id": [
                    "str",
                    "int",
                    "list"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "Superset.select_star": {
            "name": "select_star",
            "location": 2425,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "database_id": [
                    "int",
                    "str",
                    "list",
                    "transfer.models.PostingID"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None"
                ]
            }
        },
        "Superset.theme": {
            "name": "theme",
            "location": 2438,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.cached_key": {
            "name": "cached_key",
            "location": 2444,
            "return": [
                "Text",
                "str",
                "Dict[str,Any]",
                "Dict",
                "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                "raiden.utils.Dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "Superset.cache_key_exist": {
            "name": "cache_key_exist",
            "location": 2454,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool",
                    "KT",
                    "dict"
                ]
            }
        },
        "Superset.results": {
            "name": "results",
            "location": 2464,
            "return": [
                "bool",
                "List[str]",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "Callable",
                    "core.D.Listing"
                ]
            }
        },
        "Superset.stop_query": {
            "name": "stop_query",
            "location": 2505,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.sql_json": {
            "name": "sql_json",
            "location": 2521,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.csv": {
            "name": "csv",
            "location": 2651,
            "return": [
                "Response",
                "Dict",
                "str",
                "int",
                "Optional[str]",
                "Dict[str,Any]",
                "float",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ]
            }
        },
        "Superset.fetch_datasource_metadata": {
            "name": "fetch_datasource_metadata",
            "location": 2696,
            "return": [
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.queries": {
            "name": "queries",
            "location": 2711,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, str]",
                "int",
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "last_updated_ms": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Superset.search_queries": {
            "name": "search_queries",
            "location": 2768,
            "return": [
                "Response",
                "Dict[str,Any]",
                "Dict[str,str]",
                "asgard.models.job.ScheduledJob",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.show_traceback": {
            "name": "show_traceback",
            "location": 2817,
            "return": [
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.welcome": {
            "name": "welcome",
            "location": 2824,
            "return": [
                "List[str]",
                "Optional[str]",
                "str",
                "bool",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.profile": {
            "name": "profile",
            "location": 2852,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "Superset.sqllab": {
            "name": "sqllab",
            "location": 2871,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superset.slice_query": {
            "name": "slice_query",
            "location": 2887,
            "return": [
                "str",
                "dict",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "slice_id": [
                    "int"
                ]
            }
        },
        "Superset.schemas_access_for_csv_upload": {
            "name": "schemas_access_for_csv_upload",
            "location": 2899,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexConverter.__init__": {
            "name": "__init__",
            "location": 3013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_map": [
                    "models.User",
                    "str",
                    "Optional[int]",
                    "sqlalchemy.Table"
                ]
            }
        },
        "Superset.approve.clean_fulfilled_requests": {
            "name": "clean_fulfilled_requests",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "Superset.dashboard.dashboard": {
            "name": "dashboard",
            "location": 2211,
            "return": [],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/superset/views/dashboard.py": {
        "Dashboard.new": {
            "name": "new",
            "location": 32,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/views/datasource.py": {
        "Datasource.save": {
            "name": "save",
            "location": 35,
            "return": [
                "dict",
                "List[str]",
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource.get": {
            "name": "get",
            "location": 60,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "abilian.core.entities.Entity"
                ],
                "datasource_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "abilian.core.entities.Entity"
                ]
            }
        },
        "Datasource.external_metadata": {
            "name": "external_metadata",
            "location": 79,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "datasource_type": [
                    "None",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[List[custom_index]]",
                    "bool",
                    "Optional[str]"
                ],
                "datasource_id": [
                    "None",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[List[custom_index]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/views/schedules.py": {
        "_register_schedule_menus": {
            "name": "_register_schedule_menus",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EmailScheduleView.process_form": {
            "name": "process_form",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "bool",
                    "Optional[gdpr.models.LegalReason]",
                    "Optional[\"AbstractPurpose\"]",
                    "deeplearning.ml4pl.models.epoch.Results",
                    "Optional[float]"
                ],
                "is_created": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "EmailScheduleView.pre_add": {
            "name": "pre_add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "list",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "EmailScheduleView.pre_update": {
            "name": "pre_update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "EmailScheduleView.post_add": {
            "name": "post_add",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "List[app.models.Question]",
                    "app.models.Question",
                    "int"
                ]
            }
        },
        "EmailScheduleView.post_update": {
            "name": "post_update",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[Type]",
                    "float",
                    "dict"
                ]
            }
        },
        "EmailScheduleView.fetch_schedules": {
            "name": "fetch_schedules",
            "location": 129,
            "return": [
                "str",
                "Optional[int]",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "DashboardEmailScheduleView.pre_add": {
            "name": "pre_add",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "SliceEmailScheduleView.pre_add": {
            "name": "pre_add",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/views/sql_lab.py": {
        "SavedQueryView.pre_add": {
            "name": "pre_add",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "Callable[[T], bool]"
                ]
            }
        },
        "SavedQueryView.pre_update": {
            "name": "pre_update",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SqlLab.my_queries": {
            "name": "my_queries",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/views/tags.py": {
        "process_template": {
            "name": "process_template",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "tracim.models.data.Content"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 60,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "utils.CWLObjectType",
                    "List[str]"
                ]
            }
        },
        "get_creator": {
            "name": "get_creator",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "trezor.utils.Writer",
                    "str"
                ]
            }
        },
        "get_attribute": {
            "name": "get_attribute",
            "location": 78,
            "return": [
                "str",
                "models.Profile",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "attr": [
                    "str",
                    "alerta.database.base.Query",
                    "Dict[str, Any]",
                    "zerver.models.Stream",
                    "models.UserAuth",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "ObjectTypeConverter.to_python": {
            "name": "to_python",
            "location": 43,
            "return": [
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "int",
                    "str"
                ]
            }
        },
        "ObjectTypeConverter.to_url": {
            "name": "to_url",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "TagView.suggestions": {
            "name": "suggestions",
            "location": 91,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagView.get": {
            "name": "get",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Optional[Dict[str, Any]]",
                    "grouper.models.base.session.Session",
                    "grouper.models.group.Group",
                    "django.db.models.Model"
                ],
                "object_id": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Optional[Dict[str, Any]]",
                    "grouper.models.base.session.Session",
                    "grouper.models.group.Group",
                    "django.db.models.Model"
                ]
            }
        },
        "TagView.post": {
            "name": "post",
            "location": 113,
            "return": [
                "Response",
                "app.models.User",
                "app.models.user.User",
                "models.Dashboard",
                "zerver.models.UserProfile",
                "int",
                "bool",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "object_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TagView.delete": {
            "name": "delete",
            "location": 142,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "bool",
                "Optional[Dict[str,str]]",
                "str",
                "django.contrib.auth.models.AbstractUser"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "int",
                    "List[dict]",
                    "str",
                    "Dict[str,str]",
                    "Optional[int]",
                    "cnaas_nms.db.session.sqla_session"
                ],
                "object_id": [
                    "int",
                    "List[dict]",
                    "str",
                    "Dict[str,str]",
                    "Optional[int]",
                    "cnaas_nms.db.session.sqla_session"
                ]
            }
        },
        "TagView.tagged_objects": {
            "name": "tagged_objects",
            "location": 159,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/superset/views/utils.py": {
        "bootstrap_user_data": {
            "name": "bootstrap_user_data",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "username": [
                    "None",
                    "str",
                    "models.Payment",
                    "bool",
                    "db.models.Region",
                    "django.db.models.Model",
                    "db.models.Cowboy"
                ],
                "include_perms": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_permissions": {
            "name": "get_permissions",
            "location": 56,
            "return": [
                "Tuple[(Dict[(Any, List[list])], collections.defaultdict)]"
            ],
            "arguments": {
                "user": [
                    "flask_appbuilder.security.sqla.models.User",
                    "models.User",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser",
                    "user.transfer.models.User"
                ]
            }
        }
    },
    "incubator-superset-own-master/superset/views/__init__.py": {},
    "incubator-superset-own-master/tests/access_tests.py": {
        "create_access_request": {
            "name": "create_access_request",
            "location": 73,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "story.models.Character"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "ds_type": [
                    "str",
                    "int"
                ],
                "ds_name": [
                    "str",
                    "int",
                    "salon.models.Stylist"
                ],
                "role_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "user_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestAccessTests.setUpClass": {
            "name": "setUpClass",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool",
                    "core.D.Event"
                ]
            }
        },
        "RequestAccessTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "RequestAccessTests.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.tearDown": {
            "name": "tearDown",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_override_role_permissions_is_admin_only": {
            "name": "test_override_role_permissions_is_admin_only",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_override_role_permissions_1_table": {
            "name": "test_override_role_permissions_1_table",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_override_role_permissions_druid_and_table": {
            "name": "test_override_role_permissions_druid_and_table",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_override_role_permissions_drops_absent_perms": {
            "name": "test_override_role_permissions_drops_absent_perms",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_clean_requests_after_role_extend": {
            "name": "test_clean_requests_after_role_extend",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_clean_requests_after_alpha_grant": {
            "name": "test_clean_requests_after_alpha_grant",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_clean_requests_after_db_grant": {
            "name": "test_clean_requests_after_db_grant",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_clean_requests_after_schema_grant": {
            "name": "test_clean_requests_after_schema_grant",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestAccessTests.test_approve": {
            "name": "test_approve",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send_mime": [
                    "mock.MagicMock"
                ]
            }
        },
        "RequestAccessTests.test_request_access": {
            "name": "test_request_access",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/base_tests.py": {
        "SupersetTestCase.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.create_druid_test_objects": {
            "name": "create_druid_test_objects",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable",
                    "Callable[[Any], T]",
                    "str"
                ]
            }
        },
        "SupersetTestCase.get_table": {
            "name": "get_table",
            "location": 68,
            "return": [
                "str",
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Callable[[Dict], None]",
                "int"
            ],
            "arguments": {
                "self": [],
                "table_id": [
                    "int",
                    "metrics_backend.utils.ChannelIdentifier",
                    "transfer.models.ChannelID",
                    "bytes"
                ]
            }
        },
        "SupersetTestCase.get_or_create": {
            "name": "get_or_create",
            "location": 76,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "str"
                ],
                "criteria": [
                    "int",
                    "str"
                ],
                "session": [
                    "grouper.models.base.session.Session",
                    "str"
                ]
            }
        },
        "SupersetTestCase.login": {
            "name": "login",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "str",
                    "Dict"
                ],
                "password": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "SupersetTestCase.get_slice": {
            "name": "get_slice",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "slice_name": [
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "SupersetTestCase.get_table_by_name": {
            "name": "get_table_by_name",
            "location": 100,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Callable[[Dict], None]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SupersetTestCase.get_database_by_id": {
            "name": "get_database_by_id",
            "location": 103,
            "return": [
                "Callable[[Dict], None]",
                "cmk.utils.type_defs.UserId",
                "Callable[[], str]",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "db_id": [
                    "int"
                ]
            }
        },
        "SupersetTestCase.get_druid_ds_by_name": {
            "name": "get_druid_ds_by_name",
            "location": 106,
            "return": [
                "models.characters.character_base.Character",
                "Callable[[], str]",
                "Callable[[Dict], None]",
                "str",
                "List[domain.models.User]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SupersetTestCase.get_datasource_mock": {
            "name": "get_datasource_mock",
            "location": 110,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.get_resp": {
            "name": "get_resp",
            "location": 127,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "List[Dict[\"str\", Any]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "data": [
                    "None",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Dict[str,str]"
                ],
                "follow_redirects": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "raise_on_error": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "SupersetTestCase.get_json_resp": {
            "name": "get_json_resp",
            "location": 140,
            "return": [
                "bytes",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "kedro.io.core.Version",
                    "Optional['ConvolutionalEmbeddingConfig']",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "data": [
                    "None",
                    "bool",
                    "kedro.io.core.Version",
                    "Optional[ConvolutionalEmbeddingConfig]",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "follow_redirects": [
                    "bool",
                    "kedro.io.core.Version",
                    "Optional[ConvolutionalEmbeddingConfig]",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "raise_on_error": [
                    "bool",
                    "kedro.io.core.Version",
                    "Optional[ConvolutionalEmbeddingConfig]",
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ]
            }
        },
        "SupersetTestCase.get_access_requests": {
            "name": "get_access_requests",
            "location": 146,
            "return": [
                "List[str]",
                "models.characters.character_base.Character"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "dict",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]"
                ],
                "ds_type": [
                    "str",
                    "dict",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]"
                ],
                "ds_id": [
                    "str",
                    "dict",
                    "Tuple[str, str]",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "SupersetTestCase.logout": {
            "name": "logout",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.grant_public_access_to_table": {
            "name": "grant_public_access_to_table",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[contests.models.User]",
                    "str",
                    "Tuple[type]",
                    "bool"
                ]
            }
        },
        "SupersetTestCase.revoke_public_access_to_table": {
            "name": "revoke_public_access_to_table",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[contests.models.User]",
                    "str",
                    "Tuple[type]",
                    "bool"
                ]
            }
        },
        "SupersetTestCase.run_sql": {
            "name": "run_sql",
            "location": 177,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "Union[str, Dict]",
                "OrderedDict",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "int"
                ],
                "client_id": [
                    "None",
                    "str",
                    "int"
                ],
                "user_name": [
                    "str",
                    "None"
                ],
                "raise_on_error": [
                    "bool",
                    "str",
                    "int"
                ],
                "query_limit": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "SupersetTestCase.validate_sql": {
            "name": "validate_sql",
            "location": 193,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "Optional[str]"
                ],
                "client_id": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "user_name": [
                    "None",
                    "str",
                    "Dict[str,str]"
                ],
                "raise_on_error": [
                    "str",
                    "bool"
                ]
            }
        },
        "SupersetTestCase.test_existing_feature_flags": {
            "name": "test_existing_feature_flags",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_nonexistent_feature_flags": {
            "name": "test_nonexistent_feature_flags",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_feature_flags": {
            "name": "test_feature_flags",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/cache_tests.py": {
        "CacheTests.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTests.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTests.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTests.test_cache_value": {
            "name": "test_cache_value",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/celery_tests.py": {
        "UtilityFunctionTests.test_create_table_as": {
            "name": "test_create_table_as",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.get_query_by_name": {
            "name": "get_query_by_name",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "medtagger.database.models.Task",
                    "Optional[Mapping]",
                    "zerver.models.Stream",
                    "viewer.models.Gallery",
                    "medtagger.database.models.Scan",
                    "sqlalchemy.orm.query.Query"
                ]
            }
        },
        "CeleryTestCase.get_query_by_id": {
            "name": "get_query_by_id",
            "location": 89,
            "return": [
                "str",
                "bool",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "transfer.models.ItemID",
                    "transfer.models.Channel.ID"
                ]
            }
        },
        "CeleryTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool",
                    "core.D.Event"
                ]
            }
        },
        "CeleryTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "CeleryTestCase.run_sql": {
            "name": "run_sql",
            "location": 115,
            "return": [
                "cltk.core.data_types.Doc",
                "str"
            ],
            "arguments": {
                "self": [],
                "db_id": [
                    "str",
                    "int"
                ],
                "sql": [
                    "str",
                    "int"
                ],
                "client_id": [
                    "None",
                    "str",
                    "int"
                ],
                "cta": [
                    "Text",
                    "str",
                    "int"
                ],
                "tmp_table": [
                    "Text",
                    "str",
                    "int"
                ],
                "async_": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "CeleryTestCase.test_run_sync_query_dont_exist": {
            "name": "test_run_sync_query_dont_exist",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.test_run_sync_query_cta": {
            "name": "test_run_sync_query_cta",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.test_run_sync_query_cta_no_data": {
            "name": "test_run_sync_query_cta_no_data",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.drop_table_if_exists": {
            "name": "drop_table_if_exists",
            "location": 174,
            "return": [
                "medtagger.database.models.Slice",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "database": [
                    "None",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "zerver.models.CustomProfileField"
                ]
            }
        },
        "CeleryTestCase.test_run_async_query": {
            "name": "test_run_async_query",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.test_run_async_query_with_lower_limit": {
            "name": "test_run_async_query_with_lower_limit",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryTestCase.de_unicode_dict": {
            "name": "de_unicode_dict",
            "location": 239,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "Iterable[T_co]",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection",
                    "str"
                ]
            }
        },
        "CeleryTestCase.dictify_list_of_dicts": {
            "name": "dictify_list_of_dicts",
            "location": 247,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Callable"
                ],
                "l": [
                    "Callable"
                ],
                "k": [
                    "Callable"
                ]
            }
        },
        "CeleryTestCase.de_unicode_dict.str_if_basestring": {
            "name": "str_if_basestring",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/core_tests.py": {
        "CoreTests.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.setUpClass": {
            "name": "setUpClass",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[Union[str, Any]]",
                    "core.D.Event",
                    "Type[T]",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CoreTests.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_login": {
            "name": "test_login",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_dashboard_endpoint": {
            "name": "test_dashboard_endpoint",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_endpoint": {
            "name": "test_slice_endpoint",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_cache_key": {
            "name": "test_cache_key",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_api_v1_query_endpoint": {
            "name": "test_api_v1_query_endpoint",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_old_slice_json_endpoint": {
            "name": "test_old_slice_json_endpoint",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_json_endpoint": {
            "name": "test_slice_json_endpoint",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_old_slice_csv_endpoint": {
            "name": "test_old_slice_csv_endpoint",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_csv_endpoint": {
            "name": "test_slice_csv_endpoint",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_admin_only_permissions": {
            "name": "test_admin_only_permissions",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_admin_only_menu_views": {
            "name": "test_admin_only_menu_views",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_save_slice": {
            "name": "test_save_slice",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_filter_endpoint": {
            "name": "test_filter_endpoint",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_data": {
            "name": "test_slice_data",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slices": {
            "name": "test_slices",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_tablemodelview_list": {
            "name": "test_tablemodelview_list",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_add_slice": {
            "name": "test_add_slice",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_get_user_slices": {
            "name": "test_get_user_slices",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slices_V2": {
            "name": "test_slices_V2",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_doctests": {
            "name": "test_doctests",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_misc": {
            "name": "test_misc",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_testconn": {
            "name": "test_testconn",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "str",
                    "float"
                ]
            }
        },
        "CoreTests.test_custom_password_store": {
            "name": "test_custom_password_store",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_databaseview_edit": {
            "name": "test_databaseview_edit",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "str",
                    "float"
                ]
            }
        },
        "CoreTests.test_warm_up_cache": {
            "name": "test_warm_up_cache",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_shortner": {
            "name": "test_shortner",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_kv": {
            "name": "test_kv",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_gamma": {
            "name": "test_gamma",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_csv_endpoint": {
            "name": "test_csv_endpoint",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_extra_table_metadata": {
            "name": "test_extra_table_metadata",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_process_template": {
            "name": "test_process_template",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_get_template_kwarg": {
            "name": "test_get_template_kwarg",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_template_kwarg": {
            "name": "test_template_kwarg",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_templated_sql_json": {
            "name": "test_templated_sql_json",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_table_metadata": {
            "name": "test_table_metadata",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_fetch_datasource_metadata": {
            "name": "test_fetch_datasource_metadata",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_user_profile": {
            "name": "test_user_profile",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Text"
                ]
            }
        },
        "CoreTests.test_slice_id_is_always_logged_correctly_on_web_request": {
            "name": "test_slice_id_is_always_logged_correctly_on_web_request",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_id_is_always_logged_correctly_on_ajax_request": {
            "name": "test_slice_id_is_always_logged_correctly_on_ajax_request",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_query_endpoint": {
            "name": "test_slice_query_endpoint",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_import_csv": {
            "name": "test_import_csv",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_dataframe_timezone": {
            "name": "test_dataframe_timezone",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_mssql_engine_spec_pymssql": {
            "name": "test_mssql_engine_spec_pymssql",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_mssql_engine_spec_odbc": {
            "name": "test_mssql_engine_spec_odbc",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_comments_in_sqlatable_query": {
            "name": "test_comments_in_sqlatable_query",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_payload_no_data": {
            "name": "test_slice_payload_no_data",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_payload_invalid_query": {
            "name": "test_slice_payload_invalid_query",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_slice_payload_viz_markdown": {
            "name": "test_slice_payload_viz_markdown",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_schemas_access_for_csv_upload_endpoint": {
            "name": "test_schemas_access_for_csv_upload_endpoint",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_all_datasource_access": [],
                "mock_database_access": [],
                "mock_schemas_accessible": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "CoreTests.test_select_star": {
            "name": "test_select_star",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTests.test_admin_only_permissions.assert_admin_permission_in": {
            "name": "assert_admin_permission_in",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "role_name": [
                    "str",
                    "int",
                    "sqlalchemy.Column",
                    "Tuple[str, float]"
                ],
                "assert_func": [
                    "bool",
                    "static_frame.core.util.PathSpecifier",
                    "Optional[str]",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "CoreTests.test_admin_only_menu_views.assert_admin_view_menus_in": {
            "name": "assert_admin_view_menus_in",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "role_name": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "assert_func": [
                    "bool",
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "dict",
                    "bytes"
                ]
            }
        },
        "CoreTests.test_custom_password_store.custom_password_store": {
            "name": "custom_password_store",
            "location": 388,
            "return": [
                "Text",
                "str",
                "bool",
                "x509_pki.models.Certificate",
                "Dict[str,Any]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "list",
                    "datetime",
                    "List[too_mAny_repos.models.wrapped_repo.WrappedRepo]",
                    "BaseException"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/dashboard_tests.py": {
        "DashboardTests.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.setUpClass": {
            "name": "setUpClass",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool",
                    "core.D.Event"
                ]
            }
        },
        "DashboardTests.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.get_mock_positions": {
            "name": "get_mock_positions",
            "location": 45,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Any)], List[nothing])])])])]"
            ],
            "arguments": {
                "self": [],
                "dash": [
                    "bool",
                    "Callable[[bytes], None]",
                    "float",
                    "str"
                ]
            }
        },
        "DashboardTests.test_dashboard": {
            "name": "test_dashboard",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_new_dashboard": {
            "name": "test_new_dashboard",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_dashboard_modes": {
            "name": "test_dashboard_modes",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_save_dash": {
            "name": "test_save_dash",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "int",
                    "Tuple[float,float,float,float,float]",
                    "float",
                    "core.models.Recipe"
                ]
            }
        },
        "DashboardTests.test_save_dash_with_filter": {
            "name": "test_save_dash_with_filter",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Text"
                ]
            }
        },
        "DashboardTests.test_save_dash_with_invalid_filters": {
            "name": "test_save_dash_with_invalid_filters",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "typing.Text"
                ]
            }
        },
        "DashboardTests.test_save_dash_with_dashboard_title": {
            "name": "test_save_dash_with_dashboard_title",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "int",
                    "Tuple[float,float,float,float,float]",
                    "float",
                    "core.models.Recipe"
                ]
            }
        },
        "DashboardTests.test_save_dash_with_colors": {
            "name": "test_save_dash_with_colors",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "int",
                    "Tuple[float,float,float,float,float]",
                    "float",
                    "core.models.Recipe"
                ]
            }
        },
        "DashboardTests.test_copy_dash": {
            "name": "test_copy_dash",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "str",
                    "float"
                ]
            }
        },
        "DashboardTests.test_add_slices": {
            "name": "test_add_slices",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ]
            }
        },
        "DashboardTests.test_remove_slices": {
            "name": "test_remove_slices",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Text",
                    "str",
                    "float"
                ]
            }
        },
        "DashboardTests.test_public_user_dashboard_access": {
            "name": "test_public_user_dashboard_access",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_dashboard_with_created_by_can_be_accessed_by_public_users": {
            "name": "test_dashboard_with_created_by_can_be_accessed_by_public_users",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_only_owners_can_save": {
            "name": "test_only_owners_can_save",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DashboardTests.test_owners_can_view_empty_dashboard": {
            "name": "test_owners_can_view_empty_dashboard",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/dataframe_test.py": {
        "SupersetDataFrameTestCase.test_dedup": {
            "name": "test_dedup",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_get_columns_basic": {
            "name": "test_get_columns_basic",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_get_columns_with_int": {
            "name": "test_get_columns_with_int",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_get_columns_type_inference": {
            "name": "test_get_columns_type_inference",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_is_date": {
            "name": "test_is_date",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_dedup_with_data": {
            "name": "test_dedup_with_data",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/datasource_tests.py": {
        "DatasourceTests.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTests.test_external_metadata": {
            "name": "test_external_metadata",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTests.compare_lists": {
            "name": "compare_lists",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l1": [
                    "Callable[[], None]",
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "Exception"
                ],
                "l2": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "dict",
                    "str"
                ],
                "key": [
                    "bool",
                    "str"
                ]
            }
        },
        "DatasourceTests.test_save": {
            "name": "test_save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTests.test_get_datasource": {
            "name": "test_get_datasource",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTests.test_get_datasource_failed": {
            "name": "test_get_datasource_failed",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/db_engine_specs_test.py": {
        "DbEngineSpecsTestCase.test_0_progress": {
            "name": "test_0_progress",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_number_of_jobs_progress": {
            "name": "test_number_of_jobs_progress",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_1_launched_progress": {
            "name": "test_job_1_launched_progress",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_1_launched_stage_1_0_progress": {
            "name": "test_job_1_launched_stage_1_0_progress",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_1_launched_stage_1_map_40_progress": {
            "name": "test_job_1_launched_stage_1_map_40_progress",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_1_launched_stage_1_map_80_reduce_40_progress": {
            "name": "test_job_1_launched_stage_1_map_80_reduce_40_progress",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_1_launched_stage_2_stages_progress": {
            "name": "test_job_1_launched_stage_2_stages_progress",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_job_2_launched_stage_2_stages_progress": {
            "name": "test_job_2_launched_stage_2_stages_progress",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_hive_error_msg": {
            "name": "test_hive_error_msg",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.get_generic_database": {
            "name": "get_generic_database",
            "location": 131,
            "return": [
                "Database",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.sql_limit_regex": {
            "name": "sql_limit_regex",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Callable"
                ],
                "expected_sql": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "engine_spec_class": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Callable"
                ],
                "limit": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "DbEngineSpecsTestCase.test_extract_limit_from_query": {
            "name": "test_extract_limit_from_query",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine_spec_class": []
            }
        },
        "DbEngineSpecsTestCase.test_wrapped_query": {
            "name": "test_wrapped_query",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_wrapped_semi": {
            "name": "test_wrapped_semi",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_wrapped_semi_tabs": {
            "name": "test_wrapped_semi_tabs",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_simple_limit_query": {
            "name": "test_simple_limit_query",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_modify_limit_query": {
            "name": "test_modify_limit_query",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_query_with_limit_subquery": {
            "name": "test_limit_query_with_limit_subquery",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_with_expr": {
            "name": "test_limit_with_expr",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_expr_and_semicolon": {
            "name": "test_limit_expr_and_semicolon",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_get_datatype": {
            "name": "test_get_datatype",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_with_implicit_offset": {
            "name": "test_limit_with_implicit_offset",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_with_explicit_offset": {
            "name": "test_limit_with_explicit_offset",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_limit_with_non_token_limit": {
            "name": "test_limit_with_non_token_limit",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_time_grain_blacklist": {
            "name": "test_time_grain_blacklist",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_engine_time_grain_validity": {
            "name": "test_engine_time_grain_validity",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_view_names_return_empty_list": {
            "name": "test_presto_get_view_names_return_empty_list",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.verify_presto_column": {
            "name": "verify_presto_column",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]"
                ],
                "expected_results": [
                    "List[Optional['Cell']]",
                    "Callable[[Type, str], bool]",
                    "List['Entity']",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_column": {
            "name": "test_presto_get_column",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_simple_row_column": {
            "name": "test_presto_get_simple_row_column",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_simple_row_column_with_tricky_name": {
            "name": "test_presto_get_simple_row_column_with_tricky_name",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_simple_array_column": {
            "name": "test_presto_get_simple_array_column",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_row_within_array_within_row_column": {
            "name": "test_presto_get_row_within_array_within_row_column",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_array_within_row_within_array_column": {
            "name": "test_presto_get_array_within_row_within_array_column",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_get_fields": {
            "name": "test_presto_get_fields",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_presto_filter_presto_cols": {
            "name": "test_presto_filter_presto_cols",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_hive_get_view_names_return_empty_list": {
            "name": "test_hive_get_view_names_return_empty_list",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_bigquery_sqla_column_label": {
            "name": "test_bigquery_sqla_column_label",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_oracle_sqla_column_name_length_exceeded": {
            "name": "test_oracle_sqla_column_name_length_exceeded",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_mssql_column_types": {
            "name": "test_mssql_column_types",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_mssql_where_clause_n_prefix": {
            "name": "test_mssql_where_clause_n_prefix",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbEngineSpecsTestCase.test_mssql_column_types.assert_type": {
            "name": "assert_type",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "type_string": [
                    "str",
                    "int"
                ],
                "type_expected": [
                    "faustypes.models.ModelArg",
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/dict_import_export_tests.py": {
        "DictImportExportTests.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.delete_imports": {
            "name": "delete_imports",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "list"
                ]
            }
        },
        "DictImportExportTests.setUpClass": {
            "name": "setUpClass",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "DictImportExportTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "IO[bytes]",
                    "List[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "DictImportExportTests.create_table": {
            "name": "create_table",
            "location": 61,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "qutebrowser.utils.urlmatch.UrlPattern",
                    "Optional[str]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ],
                "schema": [
                    "Text",
                    "str",
                    "Iterable[Hashable]",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Scope]",
                    "static_frame.core.util.NameType",
                    "transfer.models.Scope"
                ],
                "cols_names": [
                    "List",
                    "str",
                    "Iterable[Hashable]",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "metric_names": [
                    "List",
                    "str",
                    "Iterable[Hashable]",
                    "Dict[str,str]",
                    "Optional[str]"
                ]
            }
        },
        "DictImportExportTests.create_druid_datasource": {
            "name": "create_druid_datasource",
            "location": 90,
            "return": [
                "Tuple[(Any, Dict[(str, Union[(str, List[Dict[(str, Any)]], _T1)])])]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "cols_names": [
                    "List",
                    "str",
                    "Iterable[Tuple[int,int]]",
                    "Optional[str]",
                    "Dict[str,Sequence[str]]",
                    "Dict[str,Sequence[Any]]",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "metric_names": [
                    "List",
                    "str",
                    "Iterable[Tuple[int,int]]",
                    "Optional[str]",
                    "Dict[str,Sequence[str]]",
                    "Dict[str,Sequence[Any]]",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "DictImportExportTests.get_datasource": {
            "name": "get_datasource",
            "location": 116,
            "return": [
                "bool",
                "str",
                "zerver.models.UserProfile",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "self": [],
                "datasource_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str",
                    "transfer.models.Member.shipID",
                    "transfer.models.OrgaTeamID"
                ]
            }
        },
        "DictImportExportTests.get_table_by_name": {
            "name": "get_table_by_name",
            "location": 120,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Callable[[Dict], None]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DictImportExportTests.yaml_compare": {
            "name": "yaml_compare",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj_1": [
                    "str",
                    "float",
                    "bool",
                    "Optional[BaseException]"
                ],
                "obj_2": [
                    "str",
                    "float",
                    "bool",
                    "Optional[BaseException]"
                ]
            }
        },
        "DictImportExportTests.assert_table_equals": {
            "name": "assert_table_equals",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_ds": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ],
                "actual_ds": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ]
            }
        },
        "DictImportExportTests.assert_datasource_equals": {
            "name": "assert_datasource_equals",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_ds": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "actual_ds": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "DictImportExportTests.test_import_table_no_metadata": {
            "name": "test_import_table_no_metadata",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_table_1_col_1_met": {
            "name": "test_import_table_1_col_1_met",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_table_2_col_2_met": {
            "name": "test_import_table_2_col_2_met",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_table_override_append": {
            "name": "test_import_table_override_append",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_table_override_sync": {
            "name": "test_import_table_override_sync",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_table_override_identical": {
            "name": "test_import_table_override_identical",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_no_metadata": {
            "name": "test_import_druid_no_metadata",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_1_col_1_met": {
            "name": "test_import_druid_1_col_1_met",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_2_col_2_met": {
            "name": "test_import_druid_2_col_2_met",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_override_append": {
            "name": "test_import_druid_override_append",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_override_sync": {
            "name": "test_import_druid_override_sync",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictImportExportTests.test_import_druid_override_identical": {
            "name": "test_import_druid_override_identical",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/druid_func_tests.py": {
        "mock_metric": {
            "name": "mock_metric",
            "location": 32,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "metric_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "is_postagg": [
                    "str",
                    "bool"
                ]
            }
        },
        "emplace": {
            "name": "emplace",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics_dict": [
                    "str",
                    "T",
                    "MutableMapping[str, Any]",
                    "dict",
                    "qcodes.utils.metadata.Metadatable"
                ],
                "metric_name": [
                    "str",
                    "T",
                    "MutableMapping[str, Any]",
                    "dict",
                    "qcodes.utils.metadata.Metadatable"
                ],
                "is_postagg": [
                    "bool",
                    "str",
                    "T",
                    "MutableMapping[str,Any]",
                    "Dict",
                    "qcodes.utils.metadata.Metadatable"
                ]
            }
        },
        "DruidFuncTestCase.test_get_filters_extraction_fn_map": {
            "name": "test_get_filters_extraction_fn_map",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_extraction_fn_regex": {
            "name": "test_get_filters_extraction_fn_regex",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_ignores_invalid_filter_objects": {
            "name": "test_get_filters_ignores_invalid_filter_objects",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_filter_in": {
            "name": "test_get_filters_constructs_filter_in",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_filter_not_in": {
            "name": "test_get_filters_constructs_filter_not_in",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_filter_equals": {
            "name": "test_get_filters_constructs_filter_equals",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_filter_not_equals": {
            "name": "test_get_filters_constructs_filter_not_equals",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_bounds_filter": {
            "name": "test_get_filters_constructs_bounds_filter",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_regex_filter": {
            "name": "test_get_filters_constructs_regex_filter",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_composes_multiple_filters": {
            "name": "test_get_filters_composes_multiple_filters",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_ignores_in_not_in_with_empty_value": {
            "name": "test_get_filters_ignores_in_not_in_with_empty_value",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_constructs_equals_for_in_not_in_single_value": {
            "name": "test_get_filters_constructs_equals_for_in_not_in_single_value",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_handles_arrays_for_string_types": {
            "name": "test_get_filters_handles_arrays_for_string_types",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_handles_none_for_string_types": {
            "name": "test_get_filters_handles_none_for_string_types",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_extracts_values_in_quotes": {
            "name": "test_get_filters_extracts_values_in_quotes",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_filters_converts_strings_to_num": {
            "name": "test_get_filters_converts_strings_to_num",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_run_query_no_groupby": {
            "name": "test_run_query_no_groupby",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_run_query_with_adhoc_metric": {
            "name": "test_run_query_with_adhoc_metric",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_run_query_single_groupby": {
            "name": "test_run_query_single_groupby",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_run_query_multiple_groupby": {
            "name": "test_run_query_multiple_groupby",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_post_agg_returns_correct_agg_type": {
            "name": "test_get_post_agg_returns_correct_agg_type",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_find_postaggs_for_returns_postaggs_and_removes": {
            "name": "test_find_postaggs_for_returns_postaggs_and_removes",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_recursive_get_fields": {
            "name": "test_recursive_get_fields",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_metrics_and_post_aggs_tree": {
            "name": "test_metrics_and_post_aggs_tree",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_metrics_and_post_aggs": {
            "name": "test_metrics_and_post_aggs",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_druid_type_from_adhoc_metric": {
            "name": "test_druid_type_from_adhoc_metric",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_run_query_order_by_metrics": {
            "name": "test_run_query_order_by_metrics",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_get_aggregations": {
            "name": "test_get_aggregations",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidFuncTestCase.test_metrics_and_post_aggs_tree.depends_on": {
            "name": "depends_on",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "int",
                    "T",
                    "utils.mssql_counters.Section"
                ],
                "fields": [
                    "Dict[str, str]",
                    "zerver.models.CustomProfileField",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/druid_tests.py": {
        "PickableMock.__reduce__": {
            "name": "__reduce__",
            "location": 31,
            "return": [
                "Tuple[(Type[unittest.mock.Mock], Tuple[()])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidTests.setUpClass": {
            "name": "setUpClass",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "type"
                ]
            }
        },
        "DruidTests.get_test_cluster_obj": {
            "name": "get_test_cluster_obj",
            "location": 99,
            "return": [
                "DruidCluster",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidTests.get_cluster": {
            "name": "get_cluster",
            "location": 107,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "PyDruid": [
                    "bool",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "DruidTests.test_client": {
            "name": "test_client",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": []
            }
        },
        "DruidTests.test_druid_sync_from_config": {
            "name": "test_druid_sync_from_config",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidTests.test_filter_druid_datasource": {
            "name": "test_filter_druid_datasource",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidTests.test_sync_druid_perm": {
            "name": "test_sync_druid_perm",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": []
            }
        },
        "DruidTests.test_refresh_metadata": {
            "name": "test_refresh_metadata",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": [
                    "str"
                ]
            }
        },
        "DruidTests.test_refresh_metadata_augment_type": {
            "name": "test_refresh_metadata_augment_type",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": [
                    "pandas.DataFrame"
                ]
            }
        },
        "DruidTests.test_refresh_metadata_augment_verbose_name": {
            "name": "test_refresh_metadata_augment_verbose_name",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": [
                    "str"
                ]
            }
        },
        "DruidTests.test_urls": {
            "name": "test_urls",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DruidTests.test_druid_time_granularities": {
            "name": "test_druid_time_granularities",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": []
            }
        },
        "DruidTests.test_external_metadata": {
            "name": "test_external_metadata",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "PyDruid": [
                    "str"
                ]
            }
        },
        "DruidTests.test_druid_sync_from_config.check": {
            "name": "check",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/tests/email_tests.py": {
        "EmailSmtpTest.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSmtpTest.test_send_smtp": {
            "name": "test_send_smtp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send_mime": []
            }
        },
        "EmailSmtpTest.test_send_smtp_data": {
            "name": "test_send_smtp_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send_mime": []
            }
        },
        "EmailSmtpTest.test_send_smtp_inline_images": {
            "name": "test_send_smtp_inline_images",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send_mime": []
            }
        },
        "EmailSmtpTest.test_send_bcc_smtp": {
            "name": "test_send_bcc_smtp",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_send_mime": []
            }
        },
        "EmailSmtpTest.test_send_mime": {
            "name": "test_send_mime",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_smtp": [],
                "mock_smtp_ssl": [
                    "mock.MagicMock"
                ]
            }
        },
        "EmailSmtpTest.test_send_mime_ssl": {
            "name": "test_send_mime_ssl",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_smtp": [
                    "mock.MagicMock"
                ],
                "mock_smtp_ssl": []
            }
        },
        "EmailSmtpTest.test_send_mime_noauth": {
            "name": "test_send_mime_noauth",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_smtp": [],
                "mock_smtp_ssl": [
                    "mock.MagicMock"
                ]
            }
        },
        "EmailSmtpTest.test_send_mime_dryrun": {
            "name": "test_send_mime_dryrun",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_smtp": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_smtp_ssl": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/form_tests.py": {
        "FormTestCase.test_comma_separated_list_field": {
            "name": "test_comma_separated_list_field",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTestCase.test_filter_not_empty_values": {
            "name": "test_filter_not_empty_values",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/import_export_tests.py": {
        "ImportExportTests.delete_imports": {
            "name": "delete_imports",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "list"
                ]
            }
        },
        "ImportExportTests.setUpClass": {
            "name": "setUpClass",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "type"
                ]
            }
        },
        "ImportExportTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "IO[bytes]",
                    "List[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImportExportTests.create_slice": {
            "name": "create_slice",
            "location": 63,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, None]",
                    "Optional[str]",
                    "List[\"Source\"]",
                    "int"
                ],
                "ds_id": [
                    "None",
                    "str",
                    "Optional[str]",
                    "grouper.models.base.session.Session",
                    "Optional[Period]"
                ],
                "id": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "db_name": [
                    "str",
                    "Text"
                ],
                "table_name": [
                    "Text",
                    "str",
                    "bytes"
                ]
            }
        },
        "ImportExportTests.create_dashboard": {
            "name": "create_dashboard",
            "location": 92,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[Optional[int]]"
                ],
                "id": [
                    "int",
                    "str",
                    "fal.models.Season",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "core.types.UserRole"
                ],
                "slcs": [
                    "List",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[Optional[int]]"
                ]
            }
        },
        "ImportExportTests.create_table": {
            "name": "create_table",
            "location": 103,
            "return": [
                "SqlaTable",
                "Optional[str]",
                "str",
                "List",
                "Optional[cmk.utils.type_defs.HostName]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "sqlalchemy.Column",
                    "bool"
                ],
                "schema": [
                    "Text",
                    "str",
                    "int",
                    "sqlalchemy.Column",
                    "bool"
                ],
                "id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[Hashable]"
                ],
                "cols_names": [
                    "List",
                    "str",
                    "int",
                    "bool"
                ],
                "metric_names": [
                    "List",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ImportExportTests.create_druid_datasource": {
            "name": "create_druid_datasource",
            "location": 119,
            "return": [
                "DruidDatasource",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]"
                ],
                "id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "cols_names": [
                    "List",
                    "str",
                    "bool",
                    "int",
                    "List[Tuple[str,...]]"
                ],
                "metric_names": [
                    "List",
                    "str",
                    "bool",
                    "int",
                    "List[Tuple[str,...]]"
                ]
            }
        },
        "ImportExportTests.get_slice": {
            "name": "get_slice",
            "location": 136,
            "return": [
                "int",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "slc_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str",
                    "transfer.models.Member.shipID"
                ]
            }
        },
        "ImportExportTests.get_slice_by_name": {
            "name": "get_slice_by_name",
            "location": 139,
            "return": [
                "str",
                "List[domain.models.User]",
                "Callable[[Dict], None]",
                "List[str]",
                "int",
                "Optional[List[topicdb.core.models.association.Association]]",
                "Callable[[], str]",
                "models.User",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ImportExportTests.get_dash": {
            "name": "get_dash",
            "location": 143,
            "return": [
                "int",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dash_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str",
                    "transfer.models.Member.shipID"
                ]
            }
        },
        "ImportExportTests.get_dash_by_slug": {
            "name": "get_dash_by_slug",
            "location": 147,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "self": [],
                "dash_slug": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "correios.models.posting.Package",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "ImportExportTests.get_datasource": {
            "name": "get_datasource",
            "location": 152,
            "return": [
                "sqlalchemy.orm.Session",
                "bool",
                "str",
                "zerver.models.UserProfile",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "self": [],
                "datasource_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str",
                    "transfer.models.Member.shipID",
                    "transfer.models.OrgaTeamID"
                ]
            }
        },
        "ImportExportTests.get_table_by_name": {
            "name": "get_table_by_name",
            "location": 156,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Callable[[Dict], None]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "ImportExportTests.assert_dash_equals": {
            "name": "assert_dash_equals",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_dash": [
                    "Optional[\"PNBuffer\"]",
                    "dict",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bytes"
                ],
                "actual_dash": [
                    "Optional[\"PNBuffer\"]",
                    "dict",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bytes"
                ],
                "check_position": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "ImportExportTests.assert_table_equals": {
            "name": "assert_table_equals",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_ds": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ],
                "actual_ds": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ]
            }
        },
        "ImportExportTests.assert_datasource_equals": {
            "name": "assert_datasource_equals",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_ds": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "actual_ds": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ImportExportTests.assert_slice_equals": {
            "name": "assert_slice_equals",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_slc": [
                    "MutableMapping",
                    "asgard.models.spec.env.EnvSpec",
                    "Dict[str, Any]",
                    "type",
                    "bool"
                ],
                "actual_slc": [
                    "Dict[str, Any]",
                    "sqlalchemy.sql.schema.Table",
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "Tuple[Type[Any]]"
                ]
            }
        },
        "ImportExportTests.test_export_1_dashboard": {
            "name": "test_export_1_dashboard",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_export_2_dashboards": {
            "name": "test_export_2_dashboards",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_1_slice": {
            "name": "test_import_1_slice",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_2_slices_for_same_table": {
            "name": "test_import_2_slices_for_same_table",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_slices_for_non_existent_table": {
            "name": "test_import_slices_for_non_existent_table",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_slices_override": {
            "name": "test_import_slices_override",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_empty_dashboard": {
            "name": "test_import_empty_dashboard",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_dashboard_1_slice": {
            "name": "test_import_dashboard_1_slice",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_dashboard_2_slices": {
            "name": "test_import_dashboard_2_slices",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_override_dashboard_2_slices": {
            "name": "test_import_override_dashboard_2_slices",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_table_no_metadata": {
            "name": "test_import_table_no_metadata",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_table_1_col_1_met": {
            "name": "test_import_table_1_col_1_met",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_table_2_col_2_met": {
            "name": "test_import_table_2_col_2_met",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_table_override": {
            "name": "test_import_table_override",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_table_override_identical": {
            "name": "test_import_table_override_identical",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_druid_no_metadata": {
            "name": "test_import_druid_no_metadata",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_druid_1_col_1_met": {
            "name": "test_import_druid_1_col_1_met",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_druid_2_col_2_met": {
            "name": "test_import_druid_2_col_2_met",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_druid_override": {
            "name": "test_import_druid_override",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportExportTests.test_import_druid_override_identical": {
            "name": "test_import_druid_override_identical",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/load_examples_test.py": {
        "SupersetDataFrameTestCase.test_load_css_templates": {
            "name": "test_load_css_templates",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_load_energy": {
            "name": "test_load_energy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_load_world_bank_health_n_pop": {
            "name": "test_load_world_bank_health_n_pop",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_load_birth_names": {
            "name": "test_load_birth_names",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetDataFrameTestCase.test_load_test_users_run": {
            "name": "test_load_test_users_run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/macro_tests.py": {
        "MacroTestCase.test_filter_values_macro": {
            "name": "test_filter_values_macro",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/migration_tests.py": {
        "MigrationTestCase.test_upgrade_slice": {
            "name": "test_upgrade_slice",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/model_tests.py": {
        "DatabaseModelTestCase.test_database_schema_presto": {
            "name": "test_database_schema_presto",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_database_schema_postgres": {
            "name": "test_database_schema_postgres",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_database_schema_hive": {
            "name": "test_database_schema_hive",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_database_schema_mysql": {
            "name": "test_database_schema_mysql",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_database_impersonate_user": {
            "name": "test_database_impersonate_user",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_select_star": {
            "name": "test_select_star",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_grains_dict": {
            "name": "test_grains_dict",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_postgres_expression_time_grain": {
            "name": "test_postgres_expression_time_grain",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_postgres_lowercase_col_time_grain": {
            "name": "test_postgres_lowercase_col_time_grain",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_postgres_mixedcase_col_time_grain": {
            "name": "test_postgres_mixedcase_col_time_grain",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_single_statement": {
            "name": "test_single_statement",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_multi_statement": {
            "name": "test_multi_statement",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_get_timestamp_expression": {
            "name": "test_get_timestamp_expression",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_get_timestamp_expression_epoch": {
            "name": "test_get_timestamp_expression_epoch",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_get_timestamp_expression_backward": {
            "name": "test_get_timestamp_expression_backward",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.query_with_expr_helper": {
            "name": "query_with_expr_helper",
            "location": 238,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "is_timeseries": [
                    "str",
                    "type",
                    "Dict[str, Any]"
                ],
                "inner_join": [
                    "bool",
                    "str",
                    "Type[django.db.models.base.Model]",
                    "int",
                    "raiden.utils.Address",
                    "core.Year.Month",
                    "Optional[int]"
                ]
            }
        },
        "SqlaTableModelTestCase.test_query_with_expr_groupby_timeseries": {
            "name": "test_query_with_expr_groupby_timeseries",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_query_with_expr_groupby": {
            "name": "test_query_with_expr_groupby",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_sql_mutator": {
            "name": "test_sql_mutator",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlaTableModelTestCase.test_query_with_expr_groupby_timeseries.cannonicalize_df": {
            "name": "cannonicalize_df",
            "location": 279,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "df": [
                    "FrozenSet[int]",
                    "Set[str]"
                ]
            }
        },
        "SqlaTableModelTestCase.test_sql_mutator.mutator": {
            "name": "mutator",
            "location": 311,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "incubator-superset-own-master/tests/schedules_test.py": {
        "SchedulesTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "static_frame.core.frame.Frame",
                    "allennlp.common.Params",
                    "type",
                    "Union[str, int]"
                ]
            }
        },
        "SchedulesTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "Type",
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "SchedulesTestCase.test_crontab_scheduler": {
            "name": "test_crontab_scheduler",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulesTestCase.test_wider_schedules": {
            "name": "test_wider_schedules",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulesTestCase.test_complex_schedule": {
            "name": "test_complex_schedule",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulesTestCase.test_create_driver": {
            "name": "test_create_driver",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_driver_class": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_dashboard_inline": {
            "name": "test_deliver_dashboard_inline",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "Optional[Tuple[float, float]]",
                    "zerver.models.Client",
                    "raiden.utils.AddressHex",
                    "authark.application.domain.common.User",
                    "Optional[str]",
                    "tracim.models.auth.User",
                    "bool"
                ],
                "send_email_smtp": [
                    "projects.models.Project",
                    "Dict[str, Sequence[Any]]",
                    "bytes"
                ],
                "driver_class": [
                    "bool",
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "str"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_dashboard_as_attachment": {
            "name": "test_deliver_dashboard_as_attachment",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "raiden.utils.AddressHex",
                    "models.user.User",
                    "zerver.models.Client"
                ],
                "send_email_smtp": [
                    "str",
                    "core.models.Recipe"
                ],
                "driver_class": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "int"
                ]
            }
        },
        "SchedulesTestCase.test_dashboard_chrome_like": {
            "name": "test_dashboard_chrome_like",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "Optional[Tuple[float, float]]",
                    "zerver.models.Client",
                    "raiden.utils.AddressHex",
                    "authark.application.domain.common.User",
                    "Optional[str]",
                    "tracim.models.auth.User",
                    "bool"
                ],
                "send_email_smtp": [
                    "str",
                    "List[str]"
                ],
                "driver_class": [
                    "bool",
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "str"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_email_options": {
            "name": "test_deliver_email_options",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "raiden.utils.AddressHex",
                    "models.user.User",
                    "zerver.models.Client",
                    "Optional[str]"
                ],
                "send_email_smtp": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "driver_class": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_slice_inline_image": {
            "name": "test_deliver_slice_inline_image",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "raiden.utils.AddressHex",
                    "models.user.User",
                    "zerver.models.Client"
                ],
                "send_email_smtp": [
                    "str",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "bool"
                ],
                "driver_class": [
                    "int",
                    "abilian.app.Application",
                    "selenium.webdriver.remote.webdriver.WebDriver"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_slice_attachment": {
            "name": "test_deliver_slice_attachment",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "Optional[Tuple[float, float]]",
                    "zerver.models.Client",
                    "raiden.utils.AddressHex",
                    "authark.application.domain.common.User",
                    "Optional[str]",
                    "tracim.models.auth.User",
                    "bool"
                ],
                "send_email_smtp": [
                    "str"
                ],
                "driver_class": [
                    "bool",
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "str"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_slice_csv_attachment": {
            "name": "test_deliver_slice_csv_attachment",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send_email_smtp": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "lunch_buddies.models.polls.Choice"
                ],
                "get": [
                    "bytes"
                ]
            }
        },
        "SchedulesTestCase.test_deliver_slice_csv_inline": {
            "name": "test_deliver_slice_csv_inline",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send_email_smtp": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ],
                "get": [
                    "bytes"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/security_tests.py": {
        "get_perm_tuples": {
            "name": "get_perm_tuples",
            "location": 23,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "role_name": [
                    "str",
                    "Optional[str]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "RolePermissionTests.assert_can_read": {
            "name": "assert_can_read",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_menu": [
                    "Dict[str, float]",
                    "Optional[Callable]"
                ],
                "permissions_set": []
            }
        },
        "RolePermissionTests.assert_can_write": {
            "name": "assert_can_write",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_menu": [
                    "Dict[str, float]"
                ],
                "permissions_set": []
            }
        },
        "RolePermissionTests.assert_cannot_write": {
            "name": "assert_cannot_write",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_menu": [
                    "Dict[str, float]"
                ],
                "permissions_set": []
            }
        },
        "RolePermissionTests.assert_can_all": {
            "name": "assert_can_all",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_menu": [
                    "float"
                ],
                "permissions_set": []
            }
        },
        "RolePermissionTests.assert_cannot_gamma": {
            "name": "assert_cannot_gamma",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm_set": [
                    "Set[str]",
                    "list",
                    "bytes",
                    "Optional[dict]",
                    "dict",
                    "callable",
                    "str"
                ]
            }
        },
        "RolePermissionTests.assert_can_gamma": {
            "name": "assert_can_gamma",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm_set": [
                    "dict"
                ]
            }
        },
        "RolePermissionTests.assert_can_alpha": {
            "name": "assert_can_alpha",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm_set": [
                    "dict"
                ]
            }
        },
        "RolePermissionTests.assert_cannot_alpha": {
            "name": "assert_cannot_alpha",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm_set": [
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "RolePermissionTests.assert_can_admin": {
            "name": "assert_can_admin",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm_set": [
                    "dict"
                ]
            }
        },
        "RolePermissionTests.test_is_admin_only": {
            "name": "test_is_admin_only",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_is_alpha_only": {
            "name": "test_is_alpha_only",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_is_gamma_pvm": {
            "name": "test_is_gamma_pvm",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_gamma_permissions_basic": {
            "name": "test_gamma_permissions_basic",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_alpha_permissions": {
            "name": "test_alpha_permissions",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_admin_permissions": {
            "name": "test_admin_permissions",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_sql_lab_permissions": {
            "name": "test_sql_lab_permissions",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_granter_permissions": {
            "name": "test_granter_permissions",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_gamma_permissions": {
            "name": "test_gamma_permissions",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_views_are_secured": {
            "name": "test_views_are_secured",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolePermissionTests.test_gamma_permissions.assert_can_read": {
            "name": "assert_can_read",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "view_menu": [
                    "Dict[str, float]",
                    "Optional[Callable]"
                ]
            }
        },
        "RolePermissionTests.test_gamma_permissions.assert_can_write": {
            "name": "assert_can_write",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "view_menu": [
                    "Dict[str, float]"
                ]
            }
        },
        "RolePermissionTests.test_gamma_permissions.assert_cannot_write": {
            "name": "assert_cannot_write",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "view_menu": [
                    "Dict[str, float]"
                ]
            }
        },
        "RolePermissionTests.test_gamma_permissions.assert_can_all": {
            "name": "assert_can_all",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "view_menu": [
                    "float"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/sqla_models_tests.py": {
        "DatabaseModelTestCase.test_is_time_druid_time_col": {
            "name": "test_is_time_druid_time_col",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseModelTestCase.test_is_time_by_type": {
            "name": "test_is_time_by_type",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/sqllab_tests.py": {
        "SqlLabTests.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.run_some_queries": {
            "name": "run_some_queries",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_sql_json": {
            "name": "test_sql_json",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_multi_sql": {
            "name": "test_multi_sql",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_explain": {
            "name": "test_explain",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_sql_json_has_access": {
            "name": "test_sql_json_has_access",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_queries_endpoint": {
            "name": "test_queries_endpoint",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_on_db_id": {
            "name": "test_search_query_on_db_id",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_on_user": {
            "name": "test_search_query_on_user",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_on_status": {
            "name": "test_search_query_on_status",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_on_text": {
            "name": "test_search_query_on_text",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_on_time": {
            "name": "test_search_query_on_time",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_search_query_with_owner_only_perms": {
            "name": "test_search_query_with_owner_only_perms",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_alias_duplicate": {
            "name": "test_alias_duplicate",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_df_conversion_no_dict": {
            "name": "test_df_conversion_no_dict",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_df_conversion_tuple": {
            "name": "test_df_conversion_tuple",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_df_conversion_dict": {
            "name": "test_df_conversion_dict",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_sqllab_viz": {
            "name": "test_sqllab_viz",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_sql_limit": {
            "name": "test_sql_limit",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_queryview_filter": {
            "name": "test_queryview_filter",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlLabTests.test_queryview_filter_owner_only": {
            "name": "test_queryview_filter_owner_only",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/sql_parse_tests.py": {
        "SupersetTestCase.extract_tables": {
            "name": "extract_tables",
            "location": 24,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "SupersetTestCase.test_simple_select": {
            "name": "test_simple_select",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_select_named_table": {
            "name": "test_select_named_table",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_reverse_select": {
            "name": "test_reverse_select",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_subselect": {
            "name": "test_subselect",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_select_in_expression": {
            "name": "test_select_in_expression",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_union": {
            "name": "test_union",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_select_from_values": {
            "name": "test_select_from_values",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_select_array": {
            "name": "test_select_array",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_select_if": {
            "name": "test_select_if",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_show_tables": {
            "name": "test_show_tables",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_show_columns": {
            "name": "test_show_columns",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_where_subquery": {
            "name": "test_where_subquery",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_describe": {
            "name": "test_describe",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_show_partitions": {
            "name": "test_show_partitions",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_join": {
            "name": "test_join",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_combinations": {
            "name": "test_combinations",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_with": {
            "name": "test_with",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_reusing_aliases": {
            "name": "test_reusing_aliases",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_multistatement": {
            "name": "test_multistatement",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_update_not_select": {
            "name": "test_update_not_select",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_explain": {
            "name": "test_explain",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_complex_extract_tables": {
            "name": "test_complex_extract_tables",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_complex_extract_tables2": {
            "name": "test_complex_extract_tables2",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_mixed_from_clause": {
            "name": "test_mixed_from_clause",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_nested_selects": {
            "name": "test_nested_selects",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_complex_extract_tables3": {
            "name": "test_complex_extract_tables3",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_complex_cte_with_prefix": {
            "name": "test_complex_cte_with_prefix",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_get_query_with_new_limit_comment": {
            "name": "test_get_query_with_new_limit_comment",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_get_query_with_new_limit_comment_with_limit": {
            "name": "test_get_query_with_new_limit_comment_with_limit",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_get_query_with_new_limit": {
            "name": "test_get_query_with_new_limit",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_basic_breakdown_statements": {
            "name": "test_basic_breakdown_statements",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_messy_breakdown_statements": {
            "name": "test_messy_breakdown_statements",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupersetTestCase.test_identifier_list_with_keyword_as_alias": {
            "name": "test_identifier_list_with_keyword_as_alias",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/sql_validator_tests.py": {
        "SqlValidatorEndpointTests.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlValidatorEndpointTests.test_validate_sql_endpoint_noconfig": {
            "name": "test_validate_sql_endpoint_noconfig",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlValidatorEndpointTests.test_validate_sql_endpoint_mocked": {
            "name": "test_validate_sql_endpoint_mocked",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_validator_by_name": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "SqlValidatorEndpointTests.test_validate_sql_endpoint_failure": {
            "name": "test_validate_sql_endpoint_failure",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_validator_by_name": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseValidatorTests.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseValidatorTests.test_validator_excepts": {
            "name": "test_validator_excepts",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrestoValidatorTests.setUp": {
            "name": "setUp",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrestoValidatorTests.tearDown": {
            "name": "tearDown",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrestoValidatorTests.test_validator_success": {
            "name": "test_validator_success",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_g": [
                    "str",
                    "float"
                ]
            }
        },
        "PrestoValidatorTests.test_validator_db_error": {
            "name": "test_validator_db_error",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_g": [
                    "str",
                    "int"
                ]
            }
        },
        "PrestoValidatorTests.test_validator_unexpected_error": {
            "name": "test_validator_unexpected_error",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_g": [
                    "str",
                    "int"
                ]
            }
        },
        "PrestoValidatorTests.test_validator_query_error": {
            "name": "test_validator_query_error",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_g": [
                    "str",
                    "int"
                ]
            }
        },
        "PrestoValidatorTests.test_validate_sql_endpoint": {
            "name": "test_validate_sql_endpoint",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/stats_logger_tests.py": {
        "StatsdStatsLoggerTest.verify_client_calls": {
            "name": "verify_client_calls",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "Callable"
                ],
                "client": [
                    "unittesmock.Mock"
                ]
            }
        },
        "StatsdStatsLoggerTest.test_init_with_statsd_client": {
            "name": "test_init_with_statsd_client",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdStatsLoggerTest.test_init_with_params": {
            "name": "test_init_with_params",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/strategy_tests.py": {
        "CacheWarmUpTests.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_chart_only": {
            "name": "test_get_form_data_chart_only",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_no_dashboard_metadata": {
            "name": "test_get_form_data_no_dashboard_metadata",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_immune_slice": {
            "name": "test_get_form_data_immune_slice",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_no_default_filters": {
            "name": "test_get_form_data_no_default_filters",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_immune_fields": {
            "name": "test_get_form_data_immune_fields",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data_no_extra_filters": {
            "name": "test_get_form_data_no_extra_filters",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_get_form_data": {
            "name": "test_get_form_data",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_dummy_strategy": {
            "name": "test_dummy_strategy",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_top_n_dashboards_strategy": {
            "name": "test_top_n_dashboards_strategy",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheWarmUpTests.test_dashboard_tags": {
            "name": "test_dashboard_tags",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/superset_test_config.py": {
        "GET_FEATURE_FLAGS_FUNC": {
            "name": "GET_FEATURE_FLAGS_FUNC",
            "location": 36,
            "return": [
                "int",
                "float",
                "Dict[str, Any]",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "ff": [
                    "bool",
                    "str",
                    "BaseException",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/utils.py": {
        "read_fixture": {
            "name": "read_fixture",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "fixture_file_name": [
                    "str"
                ]
            }
        },
        "load_fixture": {
            "name": "load_fixture",
            "location": 28,
            "return": [
                "bytes",
                "IO",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fixture_file_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/utils_tests.py": {
        "mock_parse_human_datetime": {
            "name": "mock_parse_human_datetime",
            "location": 45,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "mock_to_adhoc": {
            "name": "mock_to_adhoc",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filt": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "expressionType": [
                    "Text",
                    "str",
                    "Iterable",
                    "Union[str,blurr.core.type.Type]",
                    "Dict[str,Any]"
                ],
                "clause": [
                    "Text",
                    "django.utils.safestring.SafeText",
                    "Optional[Dict[str,str]]",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType",
                    "Optional[Callable[...,static_frame.core.index_base.IndexBase]]",
                    "Dict[Hashable,Any]"
                ]
            }
        },
        "UtilsTestCase.test_json_int_dttm_ser": {
            "name": "test_json_int_dttm_ser",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_json_iso_dttm_ser": {
            "name": "test_json_iso_dttm_ser",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_base_json_conv": {
            "name": "test_base_json_conv",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_parse_human_timedelta": {
            "name": "test_parse_human_timedelta",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_now": []
            }
        },
        "UtilsTestCase.test_zlib_compression": {
            "name": "test_zlib_compression",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters": {
            "name": "test_merge_extra_filters",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters_ignores_empty_filters": {
            "name": "test_merge_extra_filters_ignores_empty_filters",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters_ignores_nones": {
            "name": "test_merge_extra_filters_ignores_nones",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters_ignores_equal_filters": {
            "name": "test_merge_extra_filters_ignores_equal_filters",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters_merges_different_val_types": {
            "name": "test_merge_extra_filters_merges_different_val_types",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_extra_filters_adds_unequal_lists": {
            "name": "test_merge_extra_filters_adds_unequal_lists",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_merge_request_params": {
            "name": "test_merge_request_params",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_datetime_f": {
            "name": "test_datetime_f",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_json_encoded_obj": {
            "name": "test_json_encoded_obj",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_validate_json": {
            "name": "test_validate_json",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_memoized_on_functions": {
            "name": "test_memoized_on_functions",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_memoized_on_methods": {
            "name": "test_memoized_on_methods",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_memoized_on_methods_with_watches": {
            "name": "test_memoized_on_methods_with_watches",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_get_since_until": {
            "name": "test_get_since_until",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_where": {
            "name": "test_convert_legacy_filters_into_adhoc_where",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_filters": {
            "name": "test_convert_legacy_filters_into_adhoc_filters",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_having": {
            "name": "test_convert_legacy_filters_into_adhoc_having",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_having_filters": {
            "name": "test_convert_legacy_filters_into_adhoc_having_filters",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_present_and_empty": {
            "name": "test_convert_legacy_filters_into_adhoc_present_and_empty",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_convert_legacy_filters_into_adhoc_present_and_nonempty": {
            "name": "test_convert_legacy_filters_into_adhoc_present_and_nonempty",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_parse_js_uri_path_items_eval_undefined": {
            "name": "test_parse_js_uri_path_items_eval_undefined",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_parse_js_uri_path_items_unquote": {
            "name": "test_parse_js_uri_path_items_unquote",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_parse_js_uri_path_items_item_optional": {
            "name": "test_parse_js_uri_path_items_item_optional",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_memoized_on_functions.test_function": {
            "name": "test_function",
            "location": 526,
            "return": [
                "Mapping[str, Any]",
                "TextIO",
                "List[float]",
                "bool"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "UtilsTestCase.test_memoized_on_methods.test_class.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "UtilsTestCase.test_memoized_on_methods.test_class.test_method": {
            "name": "test_method",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "UtilsTestCase.test_memoized_on_methods_with_watches.test_class.__init__": {
            "name": "__init__",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "UtilsTestCase.test_memoized_on_methods_with_watches.test_class.test_method": {
            "name": "test_method",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "incubator-superset-own-master/tests/viz_tests.py": {
        "BaseVizTestCase.test_constructor_exception_no_datasource": {
            "name": "test_constructor_exception_no_datasource",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVizTestCase.test_process_metrics": {
            "name": "test_process_metrics",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVizTestCase.test_get_df_returns_empty_df": {
            "name": "test_get_df_returns_empty_df",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVizTestCase.test_get_df_handles_dttm_col": {
            "name": "test_get_df_handles_dttm_col",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseVizTestCase.test_cache_timeout": {
            "name": "test_cache_timeout",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableVizTestCase.test_get_data_applies_percentage": {
            "name": "test_get_data_applies_percentage",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableVizTestCase.test_parse_adhoc_filters": {
            "name": "test_parse_adhoc_filters",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableVizTestCase.test_adhoc_filters_overwrite_legacy_filters": {
            "name": "test_adhoc_filters_overwrite_legacy_filters",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableVizTestCase.test_query_obj_merges_percent_metrics": {
            "name": "test_query_obj_merges_percent_metrics",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "TableVizTestCase.test_query_obj_throws_columns_and_metrics": {
            "name": "test_query_obj_throws_columns_and_metrics",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "TableVizTestCase.test_query_obj_merges_all_columns": {
            "name": "test_query_obj_merges_all_columns",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "TableVizTestCase.test_query_obj_uses_sortby": {
            "name": "test_query_obj_uses_sortby",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "TableVizTestCase.test_should_be_timeseries_raises_when_no_granularity": {
            "name": "test_should_be_timeseries_raises_when_no_granularity",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairedTTestTestCase.test_get_data_transforms_dataframe": {
            "name": "test_get_data_transforms_dataframe",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairedTTestTestCase.test_get_data_empty_null_keys": {
            "name": "test_get_data_empty_null_keys",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_query_obj_time_series_option": {
            "name": "test_query_obj_time_series_option",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "PartitionVizTestCase.test_levels_for_computes_levels": {
            "name": "test_levels_for_computes_levels",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_levels_for_diff_computes_difference": {
            "name": "test_levels_for_diff_computes_difference",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_levels_for_time_calls_process_data_and_drops_cols": {
            "name": "test_levels_for_time_calls_process_data_and_drops_cols",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_nest_values_returns_hierarchy": {
            "name": "test_nest_values_returns_hierarchy",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_nest_procs_returns_hierarchy": {
            "name": "test_nest_procs_returns_hierarchy",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_get_data_calls_correct_method": {
            "name": "test_get_data_calls_correct_method",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoseVisTestCase.test_rose_vis_get_data": {
            "name": "test_rose_vis_get_data",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSeriesTableVizTestCase.test_get_data_metrics": {
            "name": "test_get_data_metrics",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSeriesTableVizTestCase.test_get_data_group_by": {
            "name": "test_get_data_group_by",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSeriesTableVizTestCase.test_query_obj_throws_metrics_and_groupby": {
            "name": "test_query_obj_throws_metrics_and_groupby",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_query_obj": []
            }
        },
        "BaseDeckGLVizTestCase.test_get_metrics": {
            "name": "test_get_metrics",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_scatterviz_get_metrics": {
            "name": "test_scatterviz_get_metrics",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_get_js_columns": {
            "name": "test_get_js_columns",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_get_properties": {
            "name": "test_get_properties",
            "location": 916,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_process_spatial_query_obj": {
            "name": "test_process_spatial_query_obj",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_geojson_query_obj": {
            "name": "test_geojson_query_obj",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_parse_coordinates": {
            "name": "test_parse_coordinates",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_parse_coordinates_raises": {
            "name": "test_parse_coordinates_raises",
            "location": 992,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDeckGLVizTestCase.test_filter_nulls": {
            "name": "test_filter_nulls",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_uuid4": []
            }
        },
        "TimeSeriesVizTestCase.test_timeseries_unicode_data": {
            "name": "test_timeseries_unicode_data",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionVizTestCase.test_levels_for_time_calls_process_data_and_drops_cols.return_args": {
            "name": "return_args",
            "location": 641,
            "return": [],
            "arguments": {
                "df_drop": [],
                "aggregate": []
            }
        }
    },
    "incubator-superset-own-master/tests/__init__.py": {},
    "incubator-superset-own-master/tests/fixtures/datasource.py": {},
    "incubator-superset-own-master/tests/fixtures/pyodbcRow.py": {
        "Row.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Row.__name__": {
            "name": "__name__",
            "location": 24,
            "return": [
                "Text",
                "bool",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row.__iter__": {
            "name": "__iter__",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "incubator-superset-own-master/tests/fixtures/__init__.py": {}
}
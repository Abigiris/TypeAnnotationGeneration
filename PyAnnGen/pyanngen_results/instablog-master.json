{
    "instablog-master/setup.py": {},
    "instablog-master/src/instablog/cli.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "image_dir": [
                    "str"
                ],
                "post_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "username": [
                    "str"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "instablog-master/src/instablog/core.py": {
        "download": {
            "name": "download",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "image_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "datetime_str": [
                    "str"
                ]
            }
        },
        "parse_images": {
            "name": "parse_images",
            "location": 35,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "image_dir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_markdown": {
            "name": "create_markdown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "markdown_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping",
                    "List[List[str]]",
                    "str"
                ]
            }
        }
    },
    "instablog-master/src/instablog/__init__.py": {},
    "instablog-master/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 12,
            "return": [
                "typing.Generator[CliRunner]"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_basic_config": [],
                "mock_core": [
                    "mock.Mock"
                ],
                "runner": [
                    "click.testing.CliRunner"
                ],
                "tmpdir": [
                    "str"
                ],
                "verbose": [
                    "click.testing.CliRunner"
                ],
                "expected": []
            }
        },
        "test_main_exception": {
            "name": "test_main_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_core": [],
                "mock_logging": [
                    "Tuple[Union[str,mock.Mock]]",
                    "Tuple[str,mock.Mock]",
                    "mock.Mock"
                ],
                "runner": [],
                "tmpdir": [
                    "neuromation.cli.rooRoot"
                ]
            }
        }
    },
    "instablog-master/tests/test_core.py": {
        "test_parse_datetime": {
            "name": "test_parse_datetime",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "datetime_str": [
                    "str",
                    "Dict[str,str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "expected": [
                    "str",
                    "Dict[str,str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "test_parse_images": {
            "name": "test_parse_images",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_listdir": [],
                "mock_logging": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_parse_images_not_matched": {
            "name": "test_parse_images_not_matched",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_listdir": [],
                "mock_logging": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_create_markdown": {
            "name": "test_create_markdown",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Optional[str]",
                    "MutableMapping",
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str,Any]",
                    "Optional[Union[Dict,str,int,bytes]]"
                ]
            }
        },
        "test_download": {
            "name": "test_download",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_logging": [
                    "mock.Mock"
                ],
                "mock_profile_looter": [
                    "mock.MagicMock"
                ]
            }
        }
    }
}
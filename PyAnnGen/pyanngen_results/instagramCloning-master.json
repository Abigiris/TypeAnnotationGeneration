{
    "instagramCloning-master/get-pip.py": {
        "bootstrap": {
            "name": "bootstrap",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmpdir": [
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 182,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "iterbytes": {
            "name": "iterbytes",
            "location": 37,
            "return": [
                "Iterator[_T2]"
            ],
            "arguments": {
                "buf": []
            }
        },
        "b85decode": {
            "name": "b85decode",
            "location": 46,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": []
            }
        },
        "bootstrap.CertInstallCommand.parse_args": {
            "name": "parse_args",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "instagramCloning-master/manage.py": {},
    "instagramCloning-master/config/urls.py": {},
    "instagramCloning-master/config/wsgi.py": {},
    "instagramCloning-master/config/__init__.py": {},
    "instagramCloning-master/config/settings/base.py": {},
    "instagramCloning-master/config/settings/local.py": {},
    "instagramCloning-master/config/settings/production.py": {},
    "instagramCloning-master/config/settings/test.py": {},
    "instagramCloning-master/config/settings/__init__.py": {},
    "instagramCloning-master/instagram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "instagramCloning-master/instagram/views.py": {
        "ReactAppView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str, str]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/__init__.py": {},
    "instagramCloning-master/instagram/contrib/__init__.py": {},
    "instagramCloning-master/instagram/contrib/sites/__init__.py": {},
    "instagramCloning-master/instagram/contrib/sites/migrations/0001_initial.py": {},
    "instagramCloning-master/instagram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "instagramCloning-master/instagram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/contrib/sites/migrations/__init__.py": {},
    "instagramCloning-master/instagram/images/admin.py": {},
    "instagramCloning-master/instagram/images/apps.py": {},
    "instagramCloning-master/instagram/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 28,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 32,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.natural_time": {
            "name": "natural_time",
            "location": 36,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.is_vertical": {
            "name": "is_vertical",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/images/serializers.py": {
        "ImageSerializer.get_is_liked": {
            "name": "get_is_liked",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/images/tests.py": {},
    "instagramCloning-master/instagram/images/urls.py": {},
    "instagramCloning-master/instagram/images/views.py": {
        "Images.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "list[aw_core.models.Event]",
                    "List[aw_core.models.Event]",
                    "Optional[int]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "Images.post": {
            "name": "post",
            "location": 35,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "LikeImage.get": {
            "name": "get",
            "location": 52,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "bool",
                    "contests.models.User"
                ],
                "id": [
                    "str",
                    "int",
                    "transfer.models.Channel.ID"
                ],
                "format": [
                    "str",
                    "None",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "bool"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 64,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "id": [
                    "int",
                    "str"
                ],
                "format": [
                    "str",
                    "int",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "UnLikeImage.delete": {
            "name": "delete",
            "location": 97,
            "return": [
                "Response",
                "Dict[str, Any]",
                "zerver.models.UserProfile",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "bytes",
                    "str"
                ],
                "format": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 119,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "models.Dashboard"
                ],
                "id": [
                    "int",
                    "str"
                ],
                "format": [
                    "str",
                    "int",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 144,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "id": [
                    "bool",
                    "str",
                    "T"
                ],
                "format": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 157,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "str",
                    "rest_framework.requesRequest",
                    "services.shop.order.models.order_evenOrderEvent",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "ModerateComments.delete": {
            "name": "delete",
            "location": 179,
            "return": [
                "Response",
                "Dict[str, Any]",
                "zerver.models.UserProfile",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "image_id": [
                    "bool",
                    "list[S]",
                    "tildes.models.user.User",
                    "dict[str, typing.Any]",
                    "models.Station",
                    "app.models.models.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Union[server.models.User, int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "comment_id": [
                    "bool",
                    "list[S]",
                    "tildes.models.user.User",
                    "dict[str, typing.Any]",
                    "models.Station",
                    "app.models.models.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Union[server.models.User, int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "format": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ImageDetail.find_own_image": {
            "name": "find_own_image",
            "location": 195,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "int",
                "list[]",
                "bytes",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "int",
                    "str",
                    "bool",
                    "transfer.models.ItemID"
                ],
                "user": [
                    "int",
                    "str",
                    "bool",
                    "transfer.models.ItemID"
                ]
            }
        },
        "ImageDetail.get": {
            "name": "get",
            "location": 202,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "image_id": [
                    "str",
                    "int",
                    "transfer.models.Channel.ID",
                    "bool",
                    "grouper.models.base.session.Session"
                ],
                "format": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ImageDetail.put": {
            "name": "put",
            "location": 215,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "image_id": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "format": [
                    "str",
                    "None"
                ]
            }
        },
        "ImageDetail.delete": {
            "name": "delete",
            "location": 235,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "dict",
                "str",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Union[int, str]"
                ],
                "format": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/images/__init__.py": {},
    "instagramCloning-master/instagram/images/migrations/0001_initial.py": {},
    "instagramCloning-master/instagram/images/migrations/0002_auto_20180924_1801.py": {},
    "instagramCloning-master/instagram/images/migrations/0003_auto_20180924_2211.py": {},
    "instagramCloning-master/instagram/images/migrations/0004_auto_20180924_2324.py": {},
    "instagramCloning-master/instagram/images/migrations/0005_image_tags.py": {},
    "instagramCloning-master/instagram/images/migrations/__init__.py": {},
    "instagramCloning-master/instagram/notifications/admin.py": {},
    "instagramCloning-master/instagram/notifications/apps.py": {},
    "instagramCloning-master/instagram/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/notifications/serializers.py": {},
    "instagramCloning-master/instagram/notifications/tests.py": {},
    "instagramCloning-master/instagram/notifications/urls.py": {},
    "instagramCloning-master/instagram/notifications/views.py": {
        "create_notification": {
            "name": "create_notification",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "creator": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "to": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "notification_type": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "image": [
                    "bool",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "comment": [
                    "bool",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Notifications.get": {
            "name": "get",
            "location": 8,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "zerver.models.UserProfile",
                    "dict[, ]",
                    "Callable",
                    "dict"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/notifications/__init__.py": {},
    "instagramCloning-master/instagram/notifications/migrations/0001_initial.py": {},
    "instagramCloning-master/instagram/notifications/migrations/0002_auto_20180926_0225.py": {},
    "instagramCloning-master/instagram/notifications/migrations/0003_auto_20180926_1635.py": {},
    "instagramCloning-master/instagram/notifications/migrations/0004_auto_20180929_1927.py": {},
    "instagramCloning-master/instagram/notifications/migrations/__init__.py": {},
    "instagramCloning-master/instagram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "user": [
                    "dict",
                    "django.db.models.query.QuerySet",
                    "Optional[bytes]"
                ],
                "form": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 31,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/admin.py": {},
    "instagramCloning-master/instagram/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/users/models.py": {
        "User.post_count": {
            "name": "post_count",
            "location": 30,
            "return": [
                "str",
                "int",
                "Set[Optional[str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 34,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 38,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/users/serializers.py": {
        "UserProfileSerializer.get_is_self": {
            "name": "get_is_self",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "list[R]",
                    "List[server.models.Reservation]",
                    "django.contrib.auth.models.User",
                    "server.models.bike.Bike",
                    "zerver.models.Stream",
                    "zerver.models.UserProfile",
                    "excars.models.rides.Ride.Request"
                ]
            }
        },
        "UserProfileSerializer.get_following": {
            "name": "get_following",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ListUserSerializer.get_following": {
            "name": "get_following",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SignUpSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpSerializer.save": {
            "name": "save",
            "location": 88,
            "return": [
                "set",
                "bool",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Iterable[str]"
                ],
                "user": [
                    "List[int]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/urls.py": {},
    "instagramCloning-master/instagram/users/views.py": {
        "ExploreUsers.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "bool"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 22,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "format": [
                    "str",
                    "int",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 41,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ],
                "id": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "format": [
                    "str",
                    "int",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 56,
            "return": [
                "str",
                "dict[str, str]",
                "Set[str]",
                "dict",
                "int",
                "Optional[str]",
                "list[]",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "zerver.models.Realm",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 63,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "bool",
                    "str",
                    "zerver.models.UserProfile",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 74,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[int, dict]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 101,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 115,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 131,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 150,
            "return": [
                "Response",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "dict",
                "Dict[str, str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "rest_framework.requesRequest"
                ],
                "username": [
                    "str",
                    "int",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/__init__.py": {},
    "instagramCloning-master/instagram/users/management/__init__.py": {},
    "instagramCloning-master/instagram/users/management/commands/ebuser.py": {
        "Command.handle": {
            "name": "handle",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/users/management/commands/__init__.py": {},
    "instagramCloning-master/instagram/users/migrations/0001_initial.py": {},
    "instagramCloning-master/instagram/users/migrations/0002_auto_20180923_1638.py": {},
    "instagramCloning-master/instagram/users/migrations/0003_auto_20180924_1804.py": {},
    "instagramCloning-master/instagram/users/migrations/0004_user_profile_image.py": {},
    "instagramCloning-master/instagram/users/migrations/0005_auto_20180925_0134.py": {},
    "instagramCloning-master/instagram/users/migrations/0006_auto_20180925_0151.py": {},
    "instagramCloning-master/instagram/users/migrations/__init__.py": {},
    "instagramCloning-master/instagram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instagramCloning-master/instagram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instagramCloning-master/instagram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "instagramCloning-master/instagram/users/tests/__init__.py": {}
}
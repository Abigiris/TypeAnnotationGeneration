{
    "instaloader-master/instaloader.py": {},
    "instaloader-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "instaloader-master/deploy/windows/create_exe.py": {},
    "instaloader-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "instaloader-master/docs/sphinx_autodoc_typehints.py": {
        "format_annotation": {
            "name": "format_annotation",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation": []
            }
        },
        "process_signature": {
            "name": "process_signature",
            "location": 156,
            "return": [
                "Optional[Tuple[(Any, None)]]"
            ],
            "arguments": {
                "app": [],
                "what": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "obj": [],
                "options": [],
                "signature": [],
                "return_annotation": []
            }
        },
        "process_docstring": {
            "name": "process_docstring",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "unwrap": {
            "name": "unwrap",
            "location": 36,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "unwrap._is_wrapper": {
            "name": "_is_wrapper",
            "location": 42,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "instaloader-master/docs/codesnippets/113_only_one_per_user.py": {},
    "instaloader-master/docs/codesnippets/120_ghost_followers.py": {},
    "instaloader-master/docs/codesnippets/121_since_until.py": {},
    "instaloader-master/docs/codesnippets/194_top_x_of_user.py": {},
    "instaloader-master/docs/codesnippets/56_track_deleted.py": {},
    "instaloader-master/docs/codesnippets/615_import_firefox_session.py": {
        "get_cookiefile": {
            "name": "get_cookiefile",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "import_session": {
            "name": "import_session",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cookiefile": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "Union[str, int]"
                ],
                "sessionfile": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "instaloader-master/docs/codesnippets/666_historical_hashtag_data.py": {},
    "instaloader-master/instaloader/exceptions.py": {},
    "instaloader-master/instaloader/instaloader.py": {
        "_get_config_dir": {
            "name": "_get_config_dir",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "get_default_session_filename": {
            "name": "get_default_session_filename",
            "location": 42,
            "return": [],
            "arguments": {
                "username": []
            }
        },
        "get_legacy_session_filename": {
            "name": "get_legacy_session_filename",
            "location": 49,
            "return": [],
            "arguments": {
                "username": []
            }
        },
        "get_default_stamps_filename": {
            "name": "get_default_stamps_filename",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "format_string_contains_key": {
            "name": "format_string_contains_key",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "format_string": [],
                "key": []
            }
        },
        "_requires_login": {
            "name": "_requires_login",
            "location": 75,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_retry_on_connection_error": {
            "name": "_retry_on_connection_error",
            "location": 85,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_requires_login.call": {
            "name": "call",
            "location": 78,
            "return": [],
            "arguments": {
                "instaloader": []
            }
        },
        "_retry_on_connection_error.call": {
            "name": "call",
            "location": 95,
            "return": [],
            "arguments": {
                "instaloader": []
            }
        },
        "_ArbitraryItemFormatter.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "_ArbitraryItemFormatter.get_value": {
            "name": "get_value",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "args": [],
                "kwargs": []
            }
        },
        "_ArbitraryItemFormatter.format_field": {
            "name": "format_field",
            "location": 128,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "format_spec": []
            }
        },
        "_PostPathFormatter.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "force_windows_path": [
                    "bool"
                ]
            }
        },
        "_PostPathFormatter.get_value": {
            "name": "get_value",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "args": [],
                "kwargs": []
            }
        },
        "_PostPathFormatter.sanitize_path": {
            "name": "sanitize_path",
            "location": 155,
            "return": [],
            "arguments": {
                "ret": [],
                "force_windows_path": [
                    "bool"
                ]
            }
        },
        "Instaloader.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ],
                "user_agent": [
                    "None"
                ],
                "dirname_pattern": [
                    "None"
                ],
                "filename_pattern": [
                    "None"
                ],
                "download_pictures": [
                    "bool"
                ],
                "download_videos": [
                    "bool"
                ],
                "download_video_thumbnails": [
                    "bool"
                ],
                "download_geotags": [
                    "bool"
                ],
                "download_comments": [
                    "bool"
                ],
                "save_metadata": [
                    "bool"
                ],
                "compress_json": [
                    "bool"
                ],
                "post_metadata_txt_pattern": [
                    "None"
                ],
                "storyitem_metadata_txt_pattern": [
                    "None"
                ],
                "max_connection_attempts": [
                    "int"
                ],
                "request_timeout": [
                    "float"
                ],
                "rate_controller": [
                    "None"
                ],
                "resume_prefix": [
                    "typing.Text"
                ],
                "check_resume_bbd": [
                    "bool"
                ],
                "slide": [
                    "None"
                ],
                "fatal_status_codes": [
                    "None"
                ],
                "iphone_support": [
                    "bool"
                ],
                "title_pattern": [
                    "None"
                ],
                "sanitize_paths": [
                    "bool"
                ]
            }
        },
        "Instaloader.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 293,
            "return": [
                "typing.Generator[Instaloader]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.close": {
            "name": "close",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__enter__": {
            "name": "__enter__",
            "location": 327,
            "return": [
                "Instaloader"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__exit__": {
            "name": "__exit__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_pic": {
            "name": "download_pic",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "url": [],
                "mtime": [],
                "filename_suffix": [
                    "None"
                ],
                "_attempt": [
                    "int"
                ]
            }
        },
        "Instaloader.save_metadata_json": {
            "name": "save_metadata_json",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "structure": []
            }
        },
        "Instaloader.update_comments": {
            "name": "update_comments",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "post": []
            }
        },
        "Instaloader.save_caption": {
            "name": "save_caption",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "mtime": [],
                "caption": []
            }
        },
        "Instaloader.save_location": {
            "name": "save_location",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "location": [],
                "mtime": []
            }
        },
        "Instaloader.format_filename_within_target_path": {
            "name": "format_filename_within_target_path",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "owner_profile": [],
                "identifier": [],
                "name_suffix": [],
                "extension": []
            }
        },
        "Instaloader.download_title_pic": {
            "name": "download_title_pic",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "target": [],
                "name_suffix": [],
                "owner_profile": [],
                "_attempt": [
                    "int"
                ]
            }
        },
        "Instaloader.download_profilepic_if_new": {
            "name": "download_profilepic_if_new",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [],
                "latest_stamps": []
            }
        },
        "Instaloader.download_profilepic": {
            "name": "download_profilepic",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": []
            }
        },
        "Instaloader.download_highlight_cover": {
            "name": "download_highlight_cover",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "highlight": [],
                "target": []
            }
        },
        "Instaloader.download_hashtag_profilepic": {
            "name": "download_hashtag_profilepic",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtag": []
            }
        },
        "Instaloader.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "None"
                ]
            }
        },
        "Instaloader.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "filename": [
                    "None"
                ]
            }
        },
        "Instaloader.test_login": {
            "name": "test_login",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.login": {
            "name": "login",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "passwd": []
            }
        },
        "Instaloader.two_factor_login": {
            "name": "two_factor_login",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_factor_code": []
            }
        },
        "Instaloader.__prepare_filename": {
            "name": "__prepare_filename",
            "location": 648,
            "return": [],
            "arguments": {
                "filename_template": [],
                "url": []
            }
        },
        "Instaloader.format_filename": {
            "name": "format_filename",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "target": [
                    "None"
                ]
            }
        },
        "Instaloader.download_post": {
            "name": "download_post",
            "location": 667,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "post": [],
                "target": []
            }
        },
        "Instaloader.get_stories": {
            "name": "get_stories",
            "location": 775,
            "return": [
                "typing.Generator[typing.Generator[Story]]"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "None"
                ]
            }
        },
        "Instaloader.download_stories": {
            "name": "download_stories",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userids": [],
                "fast_update": [
                    "bool"
                ],
                "filename_target": [
                    "typing.Text"
                ],
                "storyitem_filter": [
                    "None"
                ],
                "latest_stamps": [
                    "None"
                ]
            }
        },
        "Instaloader.download_storyitem": {
            "name": "download_storyitem",
            "location": 862,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "target": []
            }
        },
        "Instaloader.get_highlights": {
            "name": "get_highlights",
            "location": 900,
            "return": [
                "typing.Generator[typing.Generator[Highlight]]"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Instaloader.download_highlights": {
            "name": "download_highlights",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "fast_update": [
                    "bool"
                ],
                "filename_target": [
                    "None"
                ],
                "storyitem_filter": [
                    "None"
                ]
            }
        },
        "Instaloader.posts_download_loop": {
            "name": "posts_download_loop",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "posts": [],
                "target": [],
                "fast_update": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ],
                "max_count": [],
                "total_count": [],
                "owner_profile": [
                    "None"
                ],
                "takewhile": [
                    "None"
                ]
            }
        },
        "Instaloader.get_feed_posts": {
            "name": "get_feed_posts",
            "location": 1054,
            "return": [
                "typing.Generator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_feed_posts": {
            "name": "download_feed_posts",
            "location": 1079,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "None"
                ],
                "fast_update": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ]
            }
        },
        "Instaloader.download_saved_posts": {
            "name": "download_saved_posts",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "None"
                ],
                "fast_update": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ]
            }
        },
        "Instaloader.get_location_posts": {
            "name": "get_location_posts",
            "location": 1117,
            "return": [
                "typing.Generator[SectionIterator]"
            ],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "Instaloader.download_location": {
            "name": "download_location",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [],
                "max_count": [
                    "None"
                ],
                "post_filter": [
                    "None"
                ],
                "fast_update": [
                    "bool"
                ]
            }
        },
        "Instaloader.get_explore_posts": {
            "name": "get_explore_posts",
            "location": 1163,
            "return": [
                "NodeIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.get_hashtag_posts": {
            "name": "get_hashtag_posts",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "hashtag": []
            }
        },
        "Instaloader.download_hashtag": {
            "name": "download_hashtag",
            "location": 1185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtag": [],
                "max_count": [
                    "None"
                ],
                "post_filter": [
                    "None"
                ],
                "fast_update": [
                    "bool"
                ],
                "profile_pic": [
                    "bool"
                ],
                "posts": [
                    "bool"
                ]
            }
        },
        "Instaloader.download_tagged": {
            "name": "download_tagged",
            "location": 1227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [],
                "fast_update": [
                    "bool"
                ],
                "target": [
                    "None"
                ],
                "post_filter": [
                    "None"
                ],
                "latest_stamps": [
                    "None"
                ]
            }
        },
        "Instaloader.download_igtv": {
            "name": "download_igtv",
            "location": 1251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [],
                "fast_update": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ],
                "latest_stamps": [
                    "None"
                ]
            }
        },
        "Instaloader._get_id_filename": {
            "name": "_get_id_filename",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": [],
                "profile_name": []
            }
        },
        "Instaloader.load_profile_id": {
            "name": "load_profile_id",
            "location": 1281,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": []
            }
        },
        "Instaloader.save_profile_id": {
            "name": "save_profile_id",
            "location": 1294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": []
            }
        },
        "Instaloader.check_profile_id": {
            "name": "check_profile_id",
            "location": 1306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [],
                "latest_stamps": [
                    "None"
                ]
            }
        },
        "Instaloader.download_profiles": {
            "name": "download_profiles",
            "location": 1370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profiles": [],
                "profile_pic": [
                    "bool"
                ],
                "posts": [
                    "bool"
                ],
                "tagged": [
                    "bool"
                ],
                "igtv": [
                    "bool"
                ],
                "highlights": [
                    "bool"
                ],
                "stories": [
                    "bool"
                ],
                "fast_update": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ],
                "storyitem_filter": [
                    "None"
                ],
                "raise_errors": [
                    "bool"
                ],
                "latest_stamps": [
                    "None"
                ]
            }
        },
        "Instaloader.download_profile": {
            "name": "download_profile",
            "location": 1481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [],
                "profile_pic": [
                    "bool"
                ],
                "profile_pic_only": [
                    "bool"
                ],
                "fast_update": [
                    "bool"
                ],
                "download_stories": [
                    "bool"
                ],
                "download_stories_only": [
                    "bool"
                ],
                "download_tagged": [
                    "bool"
                ],
                "download_tagged_only": [
                    "bool"
                ],
                "post_filter": [
                    "None"
                ],
                "storyitem_filter": [
                    "None"
                ]
            }
        },
        "Instaloader.interactive_login": {
            "name": "interactive_login",
            "location": 1555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "Instaloader.update_comments._postcommentanswer_asdict": {
            "name": "_postcommentanswer_asdict",
            "location": 373,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "comment": []
            }
        },
        "Instaloader.update_comments._postcomment_asdict": {
            "name": "_postcomment_asdict",
            "location": 380,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "comment": []
            }
        },
        "Instaloader.update_comments.get_unique_comments": {
            "name": "get_unique_comments",
            "location": 386,
            "return": [
                "list[]"
            ],
            "arguments": {
                "comments": [],
                "combine_answers": [
                    "bool"
                ]
            }
        },
        "Instaloader.update_comments.get_new_comments": {
            "name": "get_new_comments",
            "location": 404,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "new_comments": [],
                "start": []
            }
        },
        "Instaloader.update_comments.save_comments": {
            "name": "save_comments",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_comments": []
            }
        },
        "Instaloader.save_caption._elliptify": {
            "name": "_elliptify",
            "location": 448,
            "return": [],
            "arguments": {
                "caption": []
            }
        },
        "Instaloader.download_post._already_downloaded": {
            "name": "_already_downloaded",
            "location": 676,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "Instaloader.download_post._all_already_downloaded": {
            "name": "_all_already_downloaded",
            "location": 683,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_base": [],
                "is_videos_enumerated": []
            }
        },
        "Instaloader.get_stories._userid_chunks": {
            "name": "_userid_chunks",
            "location": 791,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "Instaloader.download_storyitem._already_downloaded": {
            "name": "_already_downloaded",
            "location": 870,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "Instaloader.download_profiles._error_raiser": {
            "name": "_error_raiser",
            "location": 1408,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "_str": []
            }
        },
        "Instaloader.save_caption.get_filename": {
            "name": "get_filename",
            "location": 465,
            "return": [
                "str"
            ],
            "arguments": {
                "index": []
            }
        }
    },
    "instaloader-master/instaloader/instaloadercontext.py": {
        "copy_session": {
            "name": "copy_session",
            "location": 23,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "session": [
                    "requests.sessions.Session"
                ],
                "request_timeout": [
                    "Optional[float]"
                ]
            }
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "InstaloaderContext.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ],
                "user_agent": [
                    "Optional[str]"
                ],
                "max_connection_attempts": [
                    "int"
                ],
                "request_timeout": [
                    "float"
                ],
                "rate_controller": [
                    "Optional[Callable[([InstaloaderContext], RateController)]]"
                ],
                "fatal_status_codes": [
                    "Optional[List[int]]"
                ],
                "iphone_support": [
                    "bool"
                ]
            }
        },
        "InstaloaderContext.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 87,
            "return": [
                "",
                "typing.Generator[InstaloaderContext]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.is_logged_in": {
            "name": "is_logged_in",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.log": {
            "name": "log",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error": {
            "name": "error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ],
                "repeat_at_end": [
                    "bool",
                    "str",
                    "List[object]"
                ]
            }
        },
        "InstaloaderContext.close": {
            "name": "close",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error_catcher": {
            "name": "error_catcher",
            "location": 127,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "extra_info": [
                    "int",
                    "None",
                    "str",
                    "AnyStr",
                    "typing.AnyStr",
                    "Sequence[Any]",
                    "Iterable[T]",
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "InstaloaderContext._default_http_header": {
            "name": "_default_http_header",
            "location": 142,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "empty_session_only": [
                    "bool"
                ]
            }
        },
        "InstaloaderContext.get_anonymous_session": {
            "name": "get_anonymous_session",
            "location": 161,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessionfile": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, bytes]]",
                    "None",
                    "dict[str, bytes]"
                ]
            }
        },
        "InstaloaderContext.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "sessionfile": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "InstaloaderContext.test_login": {
            "name": "test_login",
            "location": 189,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.login": {
            "name": "login",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "passwd": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        },
        "InstaloaderContext.two_factor_login": {
            "name": "two_factor_login",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_factor_code": [
                    "str",
                    "int"
                ]
            }
        },
        "InstaloaderContext.do_sleep": {
            "name": "do_sleep",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.get_json": {
            "name": "get_json",
            "location": 300,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "host": [
                    "str"
                ],
                "session": [
                    "Optional[requests.sessions.Session]"
                ],
                "_attempt": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.graphql_query": {
            "name": "graphql_query",
            "location": 399,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str"
                ],
                "variables": [
                    "Dict[(str, Any)]"
                ],
                "referer": [
                    "Optional[str]"
                ],
                "rhx_gis": [
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.graphql_node_list": {
            "name": "graphql_node_list",
            "location": 436,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str"
                ],
                "query_variables": [
                    "Dict[(str, Any)]"
                ],
                "query_referer": [
                    "Optional[str]"
                ],
                "edge_extractor": [
                    "Callable[([Dict[(str, Any)]], Dict[(str, Any)])]"
                ],
                "rhx_gis": [
                    "Optional[str]"
                ],
                "first_data": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "InstaloaderContext.get_iphone_json": {
            "name": "get_iphone_json",
            "location": 472,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "InstaloaderContext.write_raw": {
            "name": "write_raw",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "Union[(bytes, requests.models.Response)]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.get_raw": {
            "name": "get_raw",
            "location": 502,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "_attempt": [
                    "int",
                    "str",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "InstaloaderContext.get_and_write_raw": {
            "name": "get_and_write_raw",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.head": {
            "name": "head",
            "location": 532,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "allow_redirects": [
                    "bool"
                ]
            }
        },
        "InstaloaderContext.root_rhx_gis": {
            "name": "root_rhx_gis",
            "location": 555,
            "return": [
                "None",
                "Optional[bool]",
                "str",
                "Optional[int]",
                "dict[, ]",
                "typing.Deque",
                "bool",
                "list",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateController.__init__": {
            "name": "__init__",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "InstaloaderContext"
                ]
            }
        },
        "RateController.sleep": {
            "name": "sleep",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secs": [
                    "float"
                ]
            }
        },
        "RateController._dump_query_timestamps": {
            "name": "_dump_query_timestamps",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_time": [
                    "float"
                ],
                "failed_query_type": [
                    "str"
                ]
            }
        },
        "RateController.count_per_sliding_window": {
            "name": "count_per_sliding_window",
            "location": 608,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "str"
                ]
            }
        },
        "RateController._reqs_in_sliding_window": {
            "name": "_reqs_in_sliding_window",
            "location": 619,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "Optional[str]"
                ],
                "current_time": [
                    "float"
                ],
                "window": [
                    "float"
                ]
            }
        },
        "RateController.query_waittime": {
            "name": "query_waittime",
            "location": 630,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "str"
                ],
                "current_time": [
                    "float"
                ],
                "untracked_queries": [
                    "bool"
                ]
            }
        },
        "RateController.wait_before_query": {
            "name": "wait_before_query",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "str"
                ]
            }
        },
        "RateController.handle_429": {
            "name": "handle_429",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.graphql_node_list._query": {
            "name": "_query",
            "location": 448,
            "return": [
                "int",
                "Dict[str, int]",
                "float",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "RateController.query_waittime.per_type_next_request_time": {
            "name": "per_type_next_request_time",
            "location": 639,
            "return": [
                "float",
                "bool",
                "Callable[[], str]",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "RateController.query_waittime.gql_accumulated_next_request_time": {
            "name": "gql_accumulated_next_request_time",
            "location": 646,
            "return": [
                "float",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "RateController.query_waittime.untracked_next_request_time": {
            "name": "untracked_next_request_time",
            "location": 657,
            "return": [
                "Dict[str, Any]",
                "bool",
                "list",
                "int"
            ],
            "arguments": {}
        },
        "RateController.query_waittime.iphone_next_request": {
            "name": "iphone_next_request",
            "location": 669,
            "return": [
                "float",
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "instaloader-master/instaloader/lateststamps.py": {
        "LatestStamps.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_stamps_file": [
                    "bytes",
                    "str",
                    "None",
                    "Union[str, bytes]",
                    "list[str]",
                    "Union[bytes, str, None]",
                    "List[str]"
                ]
            }
        },
        "LatestStamps._save": {
            "name": "_save",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatestStamps._ensure_section": {
            "name": "_ensure_section",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ]
            }
        },
        "LatestStamps.get_profile_id": {
            "name": "get_profile_id",
            "location": 35,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.save_profile_id": {
            "name": "save_profile_id",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "profile_id": [
                    "int"
                ]
            }
        },
        "LatestStamps.rename_profile": {
            "name": "rename_profile",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_profile": [
                    "str"
                ],
                "new_profile": [
                    "str"
                ]
            }
        },
        "LatestStamps._get_timestamp": {
            "name": "_get_timestamp",
            "location": 59,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "LatestStamps._set_timestamp": {
            "name": "_set_timestamp",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ]
            }
        },
        "LatestStamps.get_last_post_timestamp": {
            "name": "get_last_post_timestamp",
            "location": 70,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.set_last_post_timestamp": {
            "name": "set_last_post_timestamp",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ]
            }
        },
        "LatestStamps.get_last_tagged_timestamp": {
            "name": "get_last_tagged_timestamp",
            "location": 78,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.set_last_tagged_timestamp": {
            "name": "set_last_tagged_timestamp",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ]
            }
        },
        "LatestStamps.get_last_igtv_timestamp": {
            "name": "get_last_igtv_timestamp",
            "location": 86,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.set_last_igtv_timestamp": {
            "name": "set_last_igtv_timestamp",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ]
            }
        },
        "LatestStamps.get_last_story_timestamp": {
            "name": "get_last_story_timestamp",
            "location": 94,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.set_last_story_timestamp": {
            "name": "set_last_story_timestamp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ]
            }
        },
        "LatestStamps.get_profile_pic": {
            "name": "get_profile_pic",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "LatestStamps.set_profile_pic": {
            "name": "set_profile_pic",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ],
                "profile_pic": [
                    "str"
                ]
            }
        }
    },
    "instaloader-master/instaloader/nodeiterator.py": {
        "resumable_iteration": {
            "name": "resumable_iteration",
            "location": 233,
            "return": [
                "typing.Generator[tuple[typing.Union[bool,int]]]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "iterator": [
                    "str",
                    "Callable[[str], bool]"
                ],
                "load": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "save": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "check_bbd": [
                    "bool",
                    "int",
                    "List[float]",
                    "datetime.datetime",
                    "str",
                    "dict"
                ],
                "enabled": [
                    "bool",
                    "str",
                    "Mapping[Any, str]",
                    "Optional[str]"
                ]
            }
        },
        "NodeIterator.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "instaloader.instaloadercontext.InstaloaderContext"
                ],
                "query_hash": [
                    "str"
                ],
                "edge_extractor": [
                    "Callable[([Dict[(str, Any)]], Dict[(str, Any)])]"
                ],
                "node_wrapper": [
                    "Callable[([dict], T)]"
                ],
                "query_variables": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "query_referer": [
                    "Optional[str]"
                ],
                "first_data": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "is_first": [
                    "Optional[Callable[([T], bool)]]"
                ]
            }
        },
        "NodeIterator._query": {
            "name": "_query",
            "location": 97,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "after": [
                    "Optional[str]"
                ]
            }
        },
        "NodeIterator.__iter__": {
            "name": "__iter__",
            "location": 119,
            "return": [
                "NodeIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.__next__": {
            "name": "__next__",
            "location": 122,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.count": {
            "name": "count",
            "location": 154,
            "return": [
                "None",
                "int",
                "Callable",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.total_index": {
            "name": "total_index",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.magic": {
            "name": "magic",
            "location": 164,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.first_item": {
            "name": "first_item",
            "location": 173,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.freeze": {
            "name": "freeze",
            "location": 187,
            "return": [
                "FrozenNodeIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIterator.thaw": {
            "name": "thaw",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frozen": [
                    "FrozenNodeIterator"
                ]
            }
        }
    },
    "instaloader-master/instaloader/sectioniterator.py": {
        "SectionIterator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "instaloader.instaloadercontext.InstaloaderContext"
                ],
                "sections_extractor": [
                    "Callable[([Dict[(str, Any)]], Dict[(str, Any)])]"
                ],
                "media_wrapper": [
                    "Callable[([dict], T)]"
                ],
                "query_path": [
                    "str"
                ],
                "first_data": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "SectionIterator.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [
                "SectionIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SectionIterator._query": {
            "name": "_query",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "max_id": [
                    "Optional[str]"
                ]
            }
        },
        "SectionIterator.__next__": {
            "name": "__next__",
            "location": 35,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instaloader-master/instaloader/structures.py": {
        "get_json_structure": {
            "name": "get_json_structure",
            "location": 1800,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]",
                "str",
                "int",
                "Hashable",
                "Callable",
                "bool"
            ],
            "arguments": {
                "structure": [
                    "str",
                    "dict",
                    "float",
                    "Union[str, IO]"
                ]
            }
        },
        "save_structure_to_file": {
            "name": "save_structure_to_file",
            "location": 1814,
            "return": [
                "None"
            ],
            "arguments": {
                "structure": [
                    "str",
                    "int"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "load_structure": {
            "name": "load_structure",
            "location": 1834,
            "return": [
                "bool",
                "Post",
                "list",
                "Profile",
                "int",
                "StoryItem",
                "float",
                "Hashtag",
                "FrozenNodeIterator"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "dict[, ]"
                ],
                "json_structure": [
                    "str",
                    "Type",
                    "int",
                    "Dict[str, pathlib.Path]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "load_structure_from_file": {
            "name": "load_structure_from_file",
            "location": 1864,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[Path]",
                    "typing.Type"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Post.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "node": [
                    "str",
                    "Dict[str, Any]"
                ],
                "owner_profile": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "Post.from_shortcode": {
            "name": "from_shortcode",
            "location": 84,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "list[str]",
                "bytearray",
                "bytes",
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "shortcode": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Post.from_mediaid": {
            "name": "from_mediaid",
            "location": 92,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "mediaid": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Post.from_iphone_struct": {
            "name": "from_iphone_struct",
            "location": 97,
            "return": [
                "str",
                "bool",
                "Optional[Tuple[str, int]]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "Iterable[T]"
                ],
                "context": [
                    "dict[, ]",
                    "dict",
                    "Iterable[T]"
                ],
                "media": [
                    "bool",
                    "dict"
                ]
            }
        },
        "Post.shortcode_to_mediaid": {
            "name": "shortcode_to_mediaid",
            "location": 132,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Post.mediaid_to_shortcode": {
            "name": "mediaid_to_shortcode",
            "location": 139,
            "return": [
                "bool",
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "mediaid": [
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "Post.supported_graphql_types": {
            "name": "supported_graphql_types",
            "location": 145,
            "return": [
                "list[typing.Text]",
                "Sequence['cirq.Qid']",
                "\"Pipeline\"",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "Post._asdict": {
            "name": "_asdict",
            "location": 149,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.shortcode": {
            "name": "shortcode",
            "location": 162,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.mediaid": {
            "name": "mediaid",
            "location": 167,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.title": {
            "name": "title",
            "location": 172,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__repr__": {
            "name": "__repr__",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__eq__": {
            "name": "__eq__",
            "location": 182,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "slice"
                ]
            }
        },
        "Post.__hash__": {
            "name": "__hash__",
            "location": 187,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._full_metadata": {
            "name": "_full_metadata",
            "location": 204,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._iphone_struct": {
            "name": "_iphone_struct",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str",
                "typing.Type",
                "dict[str, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._field": {
            "name": "_field",
            "location": 220,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_profile": {
            "name": "owner_profile",
            "location": 234,
            "return": [
                "str",
                "bytes",
                "list[]",
                "Sequence[Sequence[str]]",
                "typing.Type",
                "Sequence[str]",
                "int",
                "Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_username": {
            "name": "owner_username",
            "location": 249,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_id": {
            "name": "owner_id",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_local": {
            "name": "date_local",
            "location": 265,
            "return": [
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_utc": {
            "name": "date_utc",
            "location": 273,
            "return": [
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date": {
            "name": "date",
            "location": 278,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.profile": {
            "name": "profile",
            "location": 283,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.url": {
            "name": "url",
            "location": 288,
            "return": [
                "str",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.typename": {
            "name": "typename",
            "location": 300,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.mediacount": {
            "name": "mediacount",
            "location": 305,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._get_timestamp_date_created": {
            "name": "_get_timestamp_date_created",
            "location": 316,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_is_videos": {
            "name": "get_is_videos",
            "location": 322,
            "return": [
                "list[typing.Text]",
                "bool",
                "list[]",
                "List[str]",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_sidecar_nodes": {
            "name": "get_sidecar_nodes",
            "location": 333,
            "return": [
                "typing.Iterator[PostSidecarNode]",
                "typing.Generator[PostSidecarNode]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "end": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "Post.caption": {
            "name": "caption",
            "location": 366,
            "return": [
                "None",
                "Iterable[str]",
                "IO[str]",
                "Optional[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_hashtags": {
            "name": "caption_hashtags",
            "location": 381,
            "return": [
                "list[]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_mentions": {
            "name": "caption_mentions",
            "location": 391,
            "return": [
                "list[]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.pcaption": {
            "name": "pcaption",
            "location": 403,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.accessibility_caption": {
            "name": "accessibility_caption",
            "location": 413,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.tagged_users": {
            "name": "tagged_users",
            "location": 423,
            "return": [
                "list[]",
                "bool",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.is_video": {
            "name": "is_video",
            "location": 432,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_url": {
            "name": "video_url",
            "location": 437,
            "return": [
                "None",
                "int",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_view_count": {
            "name": "video_view_count",
            "location": 472,
            "return": [
                "None",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_duration": {
            "name": "video_duration",
            "location": 481,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.viewer_has_liked": {
            "name": "viewer_has_liked",
            "location": 490,
            "return": [
                "None",
                "str",
                "Optional[Sequence]",
                "bool",
                "Optional[Callable[..., Any]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.likes": {
            "name": "likes",
            "location": 499,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.comments": {
            "name": "comments",
            "location": 504,
            "return": [
                "str",
                "bool",
                "Callable",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_comments": {
            "name": "get_comments",
            "location": 516,
            "return": [
                "list[]",
                "NodeIterator",
                "int",
                "list",
                "bool",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_likes": {
            "name": "get_likes",
            "location": 576,
            "return": [
                "Union[tuple, list]",
                "None",
                "Set[str]",
                "typing.Generator[typing.Generator[Profile]]",
                "set",
                "typing.Generator[NodeIterator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.is_sponsored": {
            "name": "is_sponsored",
            "location": 603,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.sponsor_users": {
            "name": "sponsor_users",
            "location": 616,
            "return": [
                "bool",
                "list[Profile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.location": {
            "name": "location",
            "location": 627,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "int",
                "dict[str, int]",
                "typing.DefaultDict",
                "dict[int, typing.Any]",
                "str",
                "dict[, ]",
                "None",
                "PostLocation"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.is_pinned": {
            "name": "is_pinned",
            "location": 648,
            "return": [
                "bool",
                "str",
                "list",
                "dict",
                "Union[int, None]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 682,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "node": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Profile.from_username": {
            "name": "from_username",
            "location": 694,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "username": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Profile.from_id": {
            "name": "from_id",
            "location": 709,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "context": [
                    "int",
                    "Tuple[Any, str]",
                    "tuple[typing.Union[typing.Any,str]]",
                    "Dict[int, int]",
                    "dict[int, int]"
                ],
                "profile_id": [
                    "int",
                    "Tuple[Any, str]",
                    "tuple[typing.Union[typing.Any,str]]",
                    "Dict[int, int]",
                    "dict[int, int]"
                ]
            }
        },
        "Profile.from_iphone_struct": {
            "name": "from_iphone_struct",
            "location": 736,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "context": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "media": [
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Profile.own_profile": {
            "name": "own_profile",
            "location": 750,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "Exception",
                    "str"
                ]
            }
        },
        "Profile._asdict": {
            "name": "_asdict",
            "location": 760,
            "return": [
                "float",
                "set[]",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 771,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._metadata": {
            "name": "_metadata",
            "location": 793,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._iphone_struct": {
            "name": "_iphone_struct",
            "location": 807,
            "return": [
                "int",
                "Callable",
                "str",
                "typing.Type",
                "dict[str, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.userid": {
            "name": "userid",
            "location": 818,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.username": {
            "name": "username",
            "location": 823,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__repr__": {
            "name": "__repr__",
            "location": 827,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__eq__": {
            "name": "__eq__",
            "location": 830,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "float",
                    "str",
                    "int",
                    "tuple[]",
                    "tuple",
                    "list[int]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Profile.__hash__": {
            "name": "__hash__",
            "location": 835,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_private": {
            "name": "is_private",
            "location": 839,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followed_by_viewer": {
            "name": "followed_by_viewer",
            "location": 843,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.mediacount": {
            "name": "mediacount",
            "location": 847,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.igtvcount": {
            "name": "igtvcount",
            "location": 851,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followers": {
            "name": "followers",
            "location": 855,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followees": {
            "name": "followees",
            "location": 859,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.external_url": {
            "name": "external_url",
            "location": 863,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_business_account": {
            "name": "is_business_account",
            "location": 867,
            "return": [
                "bool",
                "float",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.business_category_name": {
            "name": "business_category_name",
            "location": 872,
            "return": [
                "type",
                "Dict[str, str]",
                "List[Callable]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.biography": {
            "name": "biography",
            "location": 877,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.blocked_by_viewer": {
            "name": "blocked_by_viewer",
            "location": 881,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.follows_viewer": {
            "name": "follows_viewer",
            "location": 885,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.full_name": {
            "name": "full_name",
            "location": 889,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_blocked_viewer": {
            "name": "has_blocked_viewer",
            "location": 893,
            "return": [
                "str",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_highlight_reels": {
            "name": "has_highlight_reels",
            "location": 897,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_public_story": {
            "name": "has_public_story",
            "location": 907,
            "return": [
                "int",
                "str",
                "typing.Type",
                "Callable",
                "dict[str, typing.Union[None,typing.Any,typing.Any]]",
                "tuple[typing.Union[tuple[typing.Union[typing.Any,typing.Any]],tuple[typing.Union[typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_viewable_story": {
            "name": "has_viewable_story",
            "location": 922,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_requested_viewer": {
            "name": "has_requested_viewer",
            "location": 933,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_verified": {
            "name": "is_verified",
            "location": 937,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.requested_by_viewer": {
            "name": "requested_by_viewer",
            "location": 941,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.profile_pic_url": {
            "name": "profile_pic_url",
            "location": 945,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_profile_pic_url": {
            "name": "get_profile_pic_url",
            "location": 961,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_posts": {
            "name": "get_posts",
            "location": 967,
            "return": [
                "NodeIterator",
                "bool",
                "Optional[int]",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_saved_posts": {
            "name": "get_saved_posts",
            "location": 983,
            "return": [
                "NodeIterator",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_tagged_posts": {
            "name": "get_tagged_posts",
            "location": 1000,
            "return": [
                "NodeIterator",
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_igtv_posts": {
            "name": "get_igtv_posts",
            "location": 1017,
            "return": [
                "NodeIterator",
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._make_is_newest_checker": {
            "name": "_make_is_newest_checker",
            "location": 1036,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Profile.get_followers": {
            "name": "get_followers",
            "location": 1048,
            "return": [
                "NodeIterator",
                "str",
                "float",
                "Dict[str, Callable]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_followees": {
            "name": "get_followees",
            "location": 1067,
            "return": [
                "NodeIterator",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_similar_accounts": {
            "name": "get_similar_accounts",
            "location": 1086,
            "return": [
                "typing.Iterator['Profile']",
                "typing.Generator[typing.Generator[Profile]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__init__": {
            "name": "__init__",
            "location": 1114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "node": [
                    "list[str]",
                    "tuple[typing.Union[float,float]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Tuple[float, float]",
                    "bool",
                    "set"
                ],
                "owner_profile": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "StoryItem._asdict": {
            "name": "_asdict",
            "location": 1123,
            "return": [
                "int",
                "dict[str, typing.Type]",
                "Iterable[str]",
                "Union[int, slice]",
                "tuple[typing.Union[str,str,str,str]]",
                "Set[int]",
                "str",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "set[]",
                "list[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.mediaid": {
            "name": "mediaid",
            "location": 1132,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.shortcode": {
            "name": "shortcode",
            "location": 1137,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__repr__": {
            "name": "__repr__",
            "location": 1142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__eq__": {
            "name": "__eq__",
            "location": 1145,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "Callable[[str], str]",
                    "None",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "StoryItem.__hash__": {
            "name": "__hash__",
            "location": 1150,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.from_mediaid": {
            "name": "from_mediaid",
            "location": 1154,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "context": [
                    "Optional[str]",
                    "bool",
                    "Iterable[T]"
                ],
                "mediaid": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StoryItem._iphone_struct": {
            "name": "_iphone_struct",
            "location": 1169,
            "return": [
                "int",
                "Callable",
                "str",
                "typing.Type",
                "dict[str, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_profile": {
            "name": "owner_profile",
            "location": 1180,
            "return": [
                "bytes",
                "str",
                "typing.Type",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "list[str]",
                "dict[str, bool]",
                "None",
                "typing.MutableMapping",
                "typing.MutableSequence",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_username": {
            "name": "owner_username",
            "location": 1188,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_id": {
            "name": "owner_id",
            "location": 1193,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_local": {
            "name": "date_local",
            "location": 1198,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_utc": {
            "name": "date_utc",
            "location": 1206,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date": {
            "name": "date",
            "location": 1211,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.profile": {
            "name": "profile",
            "location": 1216,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_local": {
            "name": "expiring_local",
            "location": 1221,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_utc": {
            "name": "expiring_utc",
            "location": 1226,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.url": {
            "name": "url",
            "location": 1231,
            "return": [
                "str",
                "dict",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.typename": {
            "name": "typename",
            "location": 1244,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.is_video": {
            "name": "is_video",
            "location": 1249,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.video_url": {
            "name": "video_url",
            "location": 1254,
            "return": [
                "None",
                "int",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__init__": {
            "name": "__init__",
            "location": 1310,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Story.__repr__": {
            "name": "__repr__",
            "location": 1316,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__eq__": {
            "name": "__eq__",
            "location": 1319,
            "return": [
                "bool",
                "List[str]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Story.__hash__": {
            "name": "__hash__",
            "location": 1324,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.unique_id": {
            "name": "unique_id",
            "location": 1328,
            "return": [
                "str",
                "int",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_local": {
            "name": "last_seen_local",
            "location": 1340,
            "return": [
                "None",
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_utc": {
            "name": "last_seen_utc",
            "location": 1347,
            "return": [
                "None",
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_local": {
            "name": "latest_media_local",
            "location": 1354,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_utc": {
            "name": "latest_media_utc",
            "location": 1359,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.itemcount": {
            "name": "itemcount",
            "location": 1364,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_profile": {
            "name": "owner_profile",
            "location": 1369,
            "return": [
                "bytes",
                "str",
                "dict[, ]",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "int",
                "dict[bytes, str]",
                "None",
                "typing.MutableMapping",
                "typing.MutableSequence",
                "float",
                "Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_username": {
            "name": "owner_username",
            "location": 1376,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_id": {
            "name": "owner_id",
            "location": 1381,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.get_items": {
            "name": "get_items",
            "location": 1385,
            "return": [
                "typing.Iterator[StoryItem]",
                "typing.Generator[typing.Generator[StoryItem]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 1413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "node": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "owner": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Highlight.__repr__": {
            "name": "__repr__",
            "location": 1418,
            "return": [
                "str",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.unique_id": {
            "name": "unique_id",
            "location": 1422,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.owner_profile": {
            "name": "owner_profile",
            "location": 1427,
            "return": [
                "bytes",
                "str",
                "dict[, ]",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "int",
                "dict[bytes, str]",
                "None",
                "typing.MutableMapping",
                "typing.MutableSequence",
                "float",
                "Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.title": {
            "name": "title",
            "location": 1434,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_url": {
            "name": "cover_url",
            "location": 1439,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_cropped_url": {
            "name": "cover_cropped_url",
            "location": 1444,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight._fetch_items": {
            "name": "_fetch_items",
            "location": 1448,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.itemcount": {
            "name": "itemcount",
            "location": 1456,
            "return": [
                "int",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.get_items": {
            "name": "get_items",
            "location": 1462,
            "return": [
                "typing.Iterator[StoryItem]",
                "typing.Generator[typing.Generator[StoryItem]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.__init__": {
            "name": "__init__",
            "location": 1488,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Hashtag.from_name": {
            "name": "from_name",
            "location": 1495,
            "return": [
                "Type[Any]",
                "str",
                "int",
                "Dict[str, Any]",
                "datetime.timedelta"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "type",
                    "pathlib.Path"
                ],
                "context": [
                    "str",
                    "typing.Type",
                    "type",
                    "pathlib.Path"
                ],
                "name": [
                    "str",
                    "type",
                    "pathlib.Path"
                ]
            }
        },
        "Hashtag.name": {
            "name": "name",
            "location": 1510,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag._query": {
            "name": "_query",
            "location": 1514,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Hashtag._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 1518,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag._asdict": {
            "name": "_asdict",
            "location": 1523,
            "return": [
                "set[]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.__repr__": {
            "name": "__repr__",
            "location": 1532,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.__eq__": {
            "name": "__eq__",
            "location": 1535,
            "return": [
                "bool",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "Hashtag.__hash__": {
            "name": "__hash__",
            "location": 1540,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag._metadata": {
            "name": "_metadata",
            "location": 1543,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.hashtagid": {
            "name": "hashtagid",
            "location": 1557,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.profile_pic_url": {
            "name": "profile_pic_url",
            "location": 1561,
            "return": [
                "str",
                "int",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.description": {
            "name": "description",
            "location": 1565,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.allow_following": {
            "name": "allow_following",
            "location": 1569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.is_following": {
            "name": "is_following",
            "location": 1573,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.get_top_posts": {
            "name": "get_top_posts",
            "location": 1579,
            "return": [
                "typing.Iterator[Post]",
                "typing.Generator[typing.Generator[Post]]",
                "typing.Generator[SectionIterator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.mediacount": {
            "name": "mediacount",
            "location": 1594,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.get_posts": {
            "name": "get_posts",
            "location": 1606,
            "return": [
                "typing.Iterator[Post]",
                "typing.Generator[typing.Generator[Post]]",
                "typing.Generator[SectionIterator]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.get_all_posts": {
            "name": "get_all_posts",
            "location": 1629,
            "return": [
                "typing.Iterator[Post]",
                "typing.Generator[]",
                "typing.Generator[typing.Union[int,str,list[typing.Union[typing.Any,typing.Any]],None,typing.Type]]",
                "typing.Generator[typing.Union[str,typing.Counter]]",
                "typing.Generator[typing.Optional[typing.Type]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hashtag.get_posts_resumable": {
            "name": "get_posts_resumable",
            "location": 1658,
            "return": [
                "NodeIterator",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.__init__": {
            "name": "__init__",
            "location": 1684,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ],
                "searchstring": [
                    "str"
                ]
            }
        },
        "TopSearchResults.get_profiles": {
            "name": "get_profiles",
            "location": 1694,
            "return": [
                "typing.Iterator[Profile]",
                "typing.Generator[Profile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.get_prefixed_usernames": {
            "name": "get_prefixed_usernames",
            "location": 1704,
            "return": [
                "typing.Iterator[builtins.str]",
                "typing.Generator[typing.Union[dict[str, str],dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.get_locations": {
            "name": "get_locations",
            "location": 1713,
            "return": [
                "typing.Iterator[PostLocation]",
                "typing.Generator[PostLocation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.get_hashtag_strings": {
            "name": "get_hashtag_strings",
            "location": 1723,
            "return": [
                "typing.Iterator[builtins.str]",
                "typing.Generator[typing.Union[dict[str, str],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.get_hashtags": {
            "name": "get_hashtags",
            "location": 1732,
            "return": [
                "typing.Iterator[Hashtag]",
                "typing.Generator[Hashtag]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopSearchResults.searchstring": {
            "name": "searchstring",
            "location": 1744,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.__init__": {
            "name": "__init__",
            "location": 1752,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "str",
                    "bool"
                ],
                "target": [
                    "int",
                    "str",
                    "bool"
                ],
                "typename": [
                    "int",
                    "str",
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "date_utc": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "TitlePic.profile": {
            "name": "profile",
            "location": 1761,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.owner_username": {
            "name": "owner_username",
            "location": 1765,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.owner_id": {
            "name": "owner_id",
            "location": 1769,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.target": {
            "name": "target",
            "location": 1773,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.typename": {
            "name": "typename",
            "location": 1777,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.filename": {
            "name": "filename",
            "location": 1781,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.date_utc": {
            "name": "date_utc",
            "location": 1785,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.date": {
            "name": "date",
            "location": 1789,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitlePic.date_local": {
            "name": "date_local",
            "location": 1793,
            "return": [
                "None",
                "datetime.date",
                "Optional[str]",
                "datetime.datetime",
                "Optional[datetime.date]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption._normalize": {
            "name": "_normalize",
            "location": 368,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "string": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "Post.pcaption._elliptify": {
            "name": "_elliptify",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "caption": [
                    "Union[io.TextIO, pathlib.Path]",
                    "TextIO",
                    "str",
                    "List[T]",
                    "Union[List[str], str]"
                ]
            }
        },
        "Post.get_comments._postcommentanswer": {
            "name": "_postcommentanswer",
            "location": 526,
            "return": [
                "PostCommentAnswer",
                "bool",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "node": []
            }
        },
        "Post.get_comments._postcommentanswers": {
            "name": "_postcommentanswers",
            "location": 533,
            "return": [
                "None",
                "typing.Generator[typing.Generator[]]",
                "typing.Generator[NodeIterator]"
            ],
            "arguments": {
                "node": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Post.get_comments._postcomment": {
            "name": "_postcomment",
            "location": 554,
            "return": [
                "PostComment",
                "int",
                "float",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "node": []
            }
        },
        "Profile._make_is_newest_checker.is_newest": {
            "name": "is_newest",
            "location": 1038,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": [
                    "int"
                ]
            }
        }
    },
    "instaloader-master/instaloader/__init__.py": {},
    "instaloader-master/instaloader/__main__.py": {
        "usage_string": {
            "name": "usage_string",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "http_status_code_list": {
            "name": "http_status_code_list",
            "location": 31,
            "return": [
                "str",
                "list[int]"
            ],
            "arguments": {
                "code_list_str": [
                    "str",
                    "int"
                ]
            }
        },
        "filterstr_to_filterfunc": {
            "name": "filterstr_to_filterfunc",
            "location": 39,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "filter_str": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "List[List[str]]",
                    "None",
                    "list[list[str]]"
                ],
                "item_type": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "List[List[str]]",
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "instaloader": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "targetlist": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "username": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Union[int, float]]",
                    "int",
                    "Callable[[str], str]",
                    "float",
                    "typing.Callable[str, str]"
                ],
                "password": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "sessionfile": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "download_profile_pic": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "download_posts": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "download_stories": [
                    "bool",
                    "float",
                    "List[str]"
                ],
                "download_highlights": [
                    "bool",
                    "Dict[int, Set[int]]",
                    "List[str]",
                    "str"
                ],
                "download_tagged": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "download_igtv": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "fast_update": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "latest_stamps_file": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[int]",
                    "float",
                    "Optional[bool]",
                    "int"
                ],
                "max_count": [
                    "None",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "post_filter_str": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "storyitem_filter_str": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "filterstr_to_filterfunc.filterfunc": {
            "name": "filterfunc",
            "location": 64,
            "return": [
                "bool",
                "int",
                "list",
                "Optional[bool]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "filterstr_to_filterfunc.TransformFilterAst.visit_Name": {
            "name": "visit_Name",
            "location": 47,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "instaloader-master/test/instaloader_unittests.py": {
        "TestInstaloaderAnonymously.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.post_paging_test": {
            "name": "post_paging_test",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Optional[Type]",
                    "typing.Type",
                    "float",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_download": {
            "name": "test_public_profile_download",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_paging": {
            "name": "test_public_profile_paging",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_profile_pic_download": {
            "name": "test_profile_pic_download",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_hashtag_download": {
            "name": "test_hashtag_download",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_hashtag_paging": {
            "name": "test_hashtag_paging",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_id_by_username": {
            "name": "test_get_id_by_username",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_private": {
            "name": "test_get_username_by_id_private",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_public": {
            "name": "test_get_username_by_id_public",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_empty": {
            "name": "test_get_username_by_id_empty",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_name_empty": {
            "name": "test_get_username_by_name_empty",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_post_from_mediaid": {
            "name": "test_post_from_mediaid",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_tagged_paging": {
            "name": "test_public_profile_tagged_paging",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_igtv": {
            "name": "test_public_profile_igtv",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_stories_download": {
            "name": "test_stories_download",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_private_profile_download": {
            "name": "test_private_profile_download",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_stories_paging": {
            "name": "test_stories_paging",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_highlights_paging": {
            "name": "test_highlights_paging",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_private_profile_paging": {
            "name": "test_private_profile_paging",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_feed_download": {
            "name": "test_feed_download",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_feed_paging": {
            "name": "test_feed_paging",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_saved_download": {
            "name": "test_saved_download",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_saved_paging": {
            "name": "test_saved_paging",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_test_login": {
            "name": "test_test_login",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_followees_and_stories": {
            "name": "test_followees_and_stories",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_followees": {
            "name": "test_get_followees",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_followers": {
            "name": "test_get_followers",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_similar_accounts": {
            "name": "test_get_similar_accounts",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_likes": {
            "name": "test_get_likes",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_explore_paging": {
            "name": "test_explore_paging",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_location_download": {
            "name": "test_location_download",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_location_paging": {
            "name": "test_location_paging",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "interview_tasks-master/habra_proxy/manage.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "runserver": {
            "name": "runserver",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "runclient": {
            "name": "runclient",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "interview_tasks-master/habra_proxy/app/app.py": {
        "runserver": {
            "name": "runserver",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_app": {
            "name": "make_app",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "interview_tasks-master/habra_proxy/app/clients.py": {
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "interview_tasks-master/habra_proxy/app/helpers.py": {
        "add_symbols": {
            "name": "add_symbols",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "symbol": [
                    "str"
                ],
                "searcher": [
                    "str"
                ],
                "ignore_tags": [
                    "Set[Text]",
                    "Iterable",
                    "str",
                    "Callable",
                    "Tuple[type]"
                ],
                "ignore_tag_types": [
                    "Tuple",
                    "Iterable",
                    "str",
                    "Callable",
                    "Tuple[type]"
                ]
            }
        }
    },
    "interview_tasks-master/habra_proxy/app/settings.py": {},
    "interview_tasks-master/habra_proxy/app/views.py": {
        "is_html_response": {
            "name": "is_html_response",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "headers": []
            }
        }
    },
    "interview_tasks-master/habra_proxy/app/__init__.py": {},
    "interview_tasks-master/habra_proxy/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 17,
            "return": [
                "dict",
                "bool",
                "Mapping[str, str]"
            ],
            "arguments": {
                "loop": [
                    "aiohttp.web_app.Application",
                    "tests.e2e.Helper"
                ],
                "aiohttp_client": [
                    "aiohttp.web_app.Application",
                    "tests.e2e.Helper"
                ],
                "app": [
                    "aiohttp.web_app.Application",
                    "tests.e2e.Helper"
                ]
            }
        },
        "mocked_habra_fetch": {
            "name": "mocked_habra_fetch",
            "location": 22,
            "return": [
                "Generator[tests.helpers.MockedFetcher,None,None]",
                "Generator[MockedFetcher]"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web_app.Application",
                    "app.utils.models.ModelManager"
                ]
            }
        }
    },
    "interview_tasks-master/habra_proxy/tests/helpers.py": {
        "MockedFetcher.add_return_values": {
            "name": "add_return_values",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "Dict",
                    "bytes",
                    "int",
                    "List",
                    "Dict[str,Any]",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "headers": [
                    "Dict",
                    "bytes",
                    "int",
                    "List",
                    "Dict[str,Any]",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "body": [
                    "Dict",
                    "bytes",
                    "int",
                    "List",
                    "Dict[str,Any]",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "MockedFetcher.check_call_with": {
            "name": "check_call_with",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "interview_tasks-master/habra_proxy/tests/tests.py": {},
    "interview_tasks-master/habra_proxy/tests/__init__.py": {}
}
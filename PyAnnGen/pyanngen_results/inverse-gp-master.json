{
    "inverse-gp-master/setup.py": {},
    "inverse-gp-master/invgp/__init__.py": {},
    "inverse-gp-master/invgp/__version__.py": {},
    "inverse-gp-master/invgp/acquisition_function/acquisition_function.py": {
        "AcquisitionFunction.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "AcquisitionFunction.forward": {
            "name": "forward",
            "location": 15,
            "return": [
                "torch.Tensor",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bytes",
                    "torch.Tensor",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "list[dict[, ]]",
                    "List[Tuple[str, str]]",
                    "List[Dict]",
                    "typing.BinaryIO",
                    "BinaryIO"
                ],
                "y": [
                    "bytes",
                    "torch.Tensor",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "list[dict[, ]]",
                    "List[Tuple[str, str]]",
                    "List[Dict]",
                    "typing.BinaryIO",
                    "BinaryIO"
                ],
                "candidate_set": [
                    "bytes",
                    "torch.Tensor",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "list[dict[, ]]",
                    "List[Tuple[str, str]]",
                    "List[Dict]",
                    "typing.BinaryIO",
                    "BinaryIO"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/acquisition_function/expected_improvement.py": {
        "ExpectedImprovement.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "invgp.model.GP",
                    "bool"
                ]
            }
        },
        "ExpectedImprovement.forward": {
            "name": "forward",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "Literal"
                ],
                "y": [
                    "bool",
                    "torch.Tensor"
                ],
                "candidate_set": [
                    "int",
                    "str",
                    "float",
                    "pystork.model.Model"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/acquisition_function/__init__.py": {},
    "inverse-gp-master/invgp/examples/run.py": {
        "train": {
            "name": "train",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "invgp.model.gp.GP"
                ],
                "likelihood": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "inverse-gp-master/invgp/examples/__init__.py": {},
    "inverse-gp-master/invgp/model/gp.py": {
        "GP.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "float",
                    "gpytorch.likelihoods.Likelihood",
                    "int"
                ],
                "y": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "gpytorch.likelihoods.Likelihood"
                ],
                "likelihood": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "gpytorch.likelihoods.Likelihood"
                ]
            }
        },
        "GP.get_inputs": {
            "name": "get_inputs",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.forward": {
            "name": "forward",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/model/simulator_gp.py": {
        "SimulatorGP.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "gpytorch.likelihoods.Likelihood"
                ],
                "y": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "gpytorch.likelihoods.Likelihood"
                ],
                "likelihood": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "gpytorch.likelihoods.Likelihood"
                ],
                "simulator": [
                    "float",
                    "int"
                ]
            }
        },
        "SimulatorGP.forward": {
            "name": "forward",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/model/__init__.py": {},
    "inverse-gp-master/invgp/simulator/heavy_simulator.py": {
        "HeavySimulator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeavySimulator.forward": {
            "name": "forward",
            "location": 11,
            "return": [
                "numpy.ndarray",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/simulator/simple_simulator.py": {
        "SimpleSimulator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSimulator.forward": {
            "name": "forward",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "int",
                    "T",
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/simulator/simulator.py": {
        "Simulator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.forward": {
            "name": "forward",
            "location": 12,
            "return": [
                "torch.Tensor",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        }
    },
    "inverse-gp-master/invgp/simulator/__init__.py": {},
    "inverse-gp-master/invgp/tests/test_acquisition_function.py": {
        "TestAcquisitionFunction.test_abc": {
            "name": "test_abc",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_expected_improvement.py": {
        "TestExpectedImprovement.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpectedImprovement.test_forward_return_shape": {
            "name": "test_forward_return_shape",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_gp.py": {
        "TestGP.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGP.test_forward_raises_on_1D_input": {
            "name": "test_forward_raises_on_1D_input",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGP.test_get_inputs": {
            "name": "test_get_inputs",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGP.test_forward_return_shape": {
            "name": "test_forward_return_shape",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_heavy_simulator.py": {
        "TestHeavySimulator.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeavySimulator.test_forward_raises_on_1D_input": {
            "name": "test_forward_raises_on_1D_input",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeavySimulator.test_forward_return_shape": {
            "name": "test_forward_return_shape",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_simple_simulator.py": {
        "TestSimpleSimulator.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleSimulator.test_forward_raises_on_1D_input": {
            "name": "test_forward_raises_on_1D_input",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleSimulator.test_forward_return_shape": {
            "name": "test_forward_return_shape",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_simulator.py": {
        "TestSimulator.test_abc": {
            "name": "test_abc",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/test_simulator_gp.py": {
        "TestSimulatorGP.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimulatorGP.test_forward_raises_on_1D_input": {
            "name": "test_forward_raises_on_1D_input",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimulatorGP.test_get_inputs": {
            "name": "test_get_inputs",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimulatorGP.test_forward_return_shape": {
            "name": "test_forward_return_shape",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inverse-gp-master/invgp/tests/__init__.py": {}
}
{
    "iorefs-master/py_src/binary_heap.py": {
        "parent_0": {
            "name": "parent_0",
            "location": 9,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "str"
                ]
            }
        },
        "left_child_0": {
            "name": "left_child_0",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "right_child_0": {
            "name": "right_child_0",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 21,
            "return": [
                "_T0"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "swap": {
            "name": "swap",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "bool"
                ],
                "j": [
                    "int",
                    "bool"
                ]
            }
        },
        "bubble_up": {
            "name": "bubble_up",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pos": [
                    "float",
                    "int"
                ],
                "prevails": [
                    "int",
                    "Callable",
                    "str"
                ],
                "swap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sink_down": {
            "name": "sink_down",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "List[int]",
                    "list",
                    "List[float]",
                    "bool"
                ],
                "pos": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "prevails": [
                    "int",
                    "bool"
                ],
                "swap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fixup": {
            "name": "fixup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "arr": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "pos": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "prevails": [
                    "int",
                    "Callable",
                    "str"
                ],
                "swap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "internal_node_indices": {
            "name": "internal_node_indices",
            "location": 63,
            "return": [
                "range"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "List[int]",
                    "str",
                    "bytes",
                    "Union[str, List]"
                ]
            }
        },
        "make_heap": {
            "name": "make_heap",
            "location": 67,
            "return": [
                "_T0"
            ],
            "arguments": {
                "l": [
                    "_T0"
                ],
                "prevails": [
                    "float",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "is_valid_heap": {
            "name": "is_valid_heap",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "arr": [
                    "List[int]",
                    "float"
                ],
                "prevails": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "int",
                    "Dict[str, str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "max_heap": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Heap.__len__": {
            "name": "__len__",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.insert": {
            "name": "insert",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "List[str]",
                    "Callable[[], T]",
                    "str"
                ]
            }
        },
        "Heap.peek": {
            "name": "peek",
            "location": 102,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.pop": {
            "name": "pop",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.empty_out": {
            "name": "empty_out",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinHeap.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxHeap.test_one_by_one_inserting_and_deleting": {
            "name": "test_one_by_one_inserting_and_deleting",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "Sequence['cirq.Qid']",
                    "List[str]"
                ]
            }
        },
        "TestMaxHeap.test_batched_inserting_and_deleting": {
            "name": "test_batched_inserting_and_deleting",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float"
                ]
            }
        },
        "TestMaxHeap.test_max_heap_as_min_heap": {
            "name": "test_max_heap_as_min_heap",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "TestMaxHeap.test_fixup_can_fix_anything": {
            "name": "test_fixup_can_fix_anything",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list",
                    "str"
                ],
                "x": [
                    "str",
                    "Callable"
                ],
                "data": [
                    "int"
                ]
            }
        }
    },
    "iorefs-master/py_src/comparable_mixin.py": {
        "Comparable._compare": {
            "name": "_compare",
            "location": 10,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "bytes",
                    "Type[Any]",
                    "float"
                ],
                "op": [
                    "int",
                    "str",
                    "bytes",
                    "float",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__ne__": {
            "name": "__ne__",
            "location": 19,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 22,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__le__": {
            "name": "__le__",
            "location": 25,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__gt__": {
            "name": "__gt__",
            "location": 28,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "iorefs-master/py_src/comparable_protocol.py": {
        "Comparable.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Comparable.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__gt__": {
            "name": "__gt__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__le__": {
            "name": "__le__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        }
    },
    "iorefs-master/py_src/graph_search.py": {
        "search": {
            "name": "search",
            "location": 103,
            "return": [
                "Iterator[N]"
            ],
            "arguments": {
                "Todo": [
                    "Callable[([List[Tuple[(N, Optional[Tuple[(N, E)]])]]], Todo[(N, Optional[Tuple[(N, E)]])])]"
                ],
                "graph": [
                    "Graph[(N, E)]"
                ],
                "start": [
                    "N"
                ]
            }
        },
        "depth_first_search": {
            "name": "depth_first_search",
            "location": 119,
            "return": [
                "Iterator[N]"
            ],
            "arguments": {
                "graph": [
                    "Graph[(N, E)]"
                ],
                "start": [
                    "N"
                ]
            }
        },
        "breadth_first_search": {
            "name": "breadth_first_search",
            "location": 128,
            "return": [
                "Iterator[N]"
            ],
            "arguments": {
                "graph": [
                    "Graph[(N, E)]"
                ],
                "start": [
                    "N"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Iterable[N]"
                ],
                "edges": [
                    "Iterable[Tuple[(Tuple[(N, N)], E)]]"
                ]
            }
        },
        "Graph.out_nodes": {
            "name": "out_nodes",
            "location": 32,
            "return": [
                "Iterable[N]"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "N"
                ]
            }
        },
        "Todo.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "Iterable[N]"
                ]
            }
        },
        "Todo.__len__": {
            "name": "__len__",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Todo.add": {
            "name": "add",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "N"
                ],
                "data": [
                    "T"
                ]
            }
        },
        "Todo.pop": {
            "name": "pop",
            "location": 71,
            "return": [
                "Tuple[(N, T)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoStack.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoStack.__len__": {
            "name": "__len__",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoStack.add": {
            "name": "add",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "N"
                ],
                "data": [
                    "T"
                ]
            }
        },
        "TodoStack.pop": {
            "name": "pop",
            "location": 85,
            "return": [
                "Tuple[(N, T)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoQueue.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoQueue.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoQueue.add": {
            "name": "add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "N"
                ],
                "data": [
                    "T"
                ]
            }
        },
        "TodoQueue.pop": {
            "name": "pop",
            "location": 99,
            "return": [
                "Tuple[(N, T)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iorefs-master/py_src/nx_graphs.py": {
        "generate_random_graph": {
            "name": "generate_random_graph",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node_count": [
                    "int"
                ]
            }
        },
        "show_graph": {
            "name": "show_graph",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "bytes",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 22,
            "return": [
                "Graph",
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "Todo": [
                    "typing.Sequence[T]",
                    "int",
                    "Sequence[object]",
                    "None",
                    "Optional[int]",
                    "dict[str, T]",
                    "Dict[str, T]",
                    "networkx.DiGraph"
                ],
                "graph": [
                    "int",
                    "Sequence[object]",
                    "typing.Sequence[object]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "start": [
                    "typing.Sequence[object]",
                    "int",
                    "Sequence[object]",
                    "None",
                    "Optional[int]",
                    "dict[str, T]",
                    "Dict[str, T]",
                    "networkx.DiGraph"
                ],
                "visit": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Pattern",
                    "Optional[int]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "depth_first_search": {
            "name": "depth_first_search",
            "location": 45,
            "return": [
                "Tuple[(List[nothing], Any)]"
            ],
            "arguments": {
                "graph": [
                    "typing.Pattern",
                    "Optional[Pattern[str]]",
                    "bool",
                    "None",
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "graphbook.graph.cell.Cell"
                ],
                "start": [
                    "typing.Pattern",
                    "Optional[Pattern[str]]",
                    "bool",
                    "None",
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "graphbook.graph.cell.Cell"
                ]
            }
        },
        "breadth_first_search": {
            "name": "breadth_first_search",
            "location": 55,
            "return": [
                "Tuple[(List[nothing], Any)]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list[int]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "start": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list[int]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "iorefs-master/py_src/priority_dict.py": {
        "noop": {
            "name": "noop",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "key": {
            "name": "key",
            "location": 19,
            "return": [
                "K"
            ],
            "arguments": {
                "kp": [
                    "Tuple[(K, P)]"
                ]
            }
        },
        "priority": {
            "name": "priority",
            "location": 24,
            "return": [
                "P"
            ],
            "arguments": {
                "kp": [
                    "Tuple[(K, P)]"
                ]
            }
        },
        "kp_prevails": {
            "name": "kp_prevails",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "kp1": [
                    "Tuple[(K, P)]"
                ],
                "kp2": [
                    "Tuple[(K, P)]"
                ]
            }
        },
        "lookup_matches_array": {
            "name": "lookup_matches_array",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "lookup": [
                    "Dict[(K, int)]"
                ],
                "arr": [
                    "List[Tuple[(K, P)]]"
                ]
            }
        },
        "PriorityDict.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "Optional[Dict[(K, P)]]"
                ]
            }
        },
        "PriorityDict.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.__contains__": {
            "name": "__contains__",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "PriorityDict._swap_with_lookup": {
            "name": "_swap_with_lookup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "list"
                ],
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "PriorityDict._append_with_lookup": {
            "name": "_append_with_lookup",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ],
                "p": [
                    "P"
                ]
            }
        },
        "PriorityDict._pop_with_lookup": {
            "name": "_pop_with_lookup",
            "location": 69,
            "return": [
                "Tuple[(K, P)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict._fixup": {
            "name": "_fixup",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ix": [
                    "int"
                ]
            }
        },
        "PriorityDict.get": {
            "name": "get",
            "location": 79,
            "return": [
                "Optional[P]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "PriorityDict.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [
                "P"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "PriorityDict.__setitem__": {
            "name": "__setitem__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ],
                "p": [
                    "P"
                ]
            }
        },
        "PriorityDict.__delitem__": {
            "name": "__delitem__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "K"
                ]
            }
        },
        "PriorityDict.__iter__": {
            "name": "__iter__",
            "location": 101,
            "return": [
                "Iterator[K]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.copy": {
            "name": "copy",
            "location": 106,
            "return": [
                "PriorityDict[(K, P)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.items": {
            "name": "items",
            "location": 113,
            "return": [
                "Iterable[Tuple[(K, P)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.to_dict": {
            "name": "to_dict",
            "location": 121,
            "return": [
                "Dict[(K, P)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.__eq__": {
            "name": "__eq__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "PriorityDict.peek": {
            "name": "peek",
            "location": 129,
            "return": [
                "Tuple[(K, P)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityDict.pop": {
            "name": "pop",
            "location": 132,
            "return": [
                "Tuple[(K, P)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[K]"
                ]
            }
        },
        "TestPriorityDict._priority_dict_from_list": {
            "name": "_priority_dict_from_list",
            "location": 156,
            "return": [
                "PriorityDict[(P, P)]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "List[P]"
                ]
            }
        },
        "TestPriorityDict._assert_valid_pd": {
            "name": "_assert_valid_pd",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pd": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "TestPriorityDict.test_one_by_one_inserting_and_deleting": {
            "name": "test_one_by_one_inserting_and_deleting",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Callable",
                    "str",
                    "Iterator"
                ]
            }
        },
        "TestPriorityDict.test_iteration_gives_unique_items_in_asc_sorted_order": {
            "name": "test_iteration_gives_unique_items_in_asc_sorted_order",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "list[str]",
                    "typing.Type",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "TestPriorityDict.test_write_invariant": {
            "name": "test_write_invariant",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ],
                "x": [
                    "list",
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "TestPriorityDict.test_inserting_duplicates": {
            "name": "test_inserting_duplicates",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list[typing.Union[int,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "List[int]",
                    "list[float]",
                    "List[float]",
                    "int"
                ],
                "x": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "Iterable[Tuple[str, str]]"
                ]
            }
        },
        "TestPriorityDict.test_inserting_results_in_correct_len": {
            "name": "test_inserting_results_in_correct_len",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "str",
                    "int",
                    "list[int]",
                    "list[list[int]]",
                    "List[int]",
                    "List[List[int]]"
                ],
                "x": [
                    "str",
                    "Sequence['cirq.Qid']",
                    "Tuple[int]",
                    "List[Tuple[int, str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "TestPriorityDict.test_delete_invariant": {
            "name": "test_delete_invariant",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list[list[int]]",
                    "int",
                    "dict[str, int]",
                    "List[List[int]]",
                    "Dict[str, int]",
                    "float"
                ],
                "x": [
                    "list",
                    "list[]",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "int",
                    "None",
                    "[[]]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestPriorityDict.test_dictionary_roundtrip_identity": {
            "name": "test_dictionary_roundtrip_identity",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestPriorityDict.test_dictionary_lookup_equivalence": {
            "name": "test_dictionary_lookup_equivalence",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "x": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "TestPriorityDict.test_to_dict_matches_iteration": {
            "name": "test_to_dict_matches_iteration",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "TestPriorityDict.test_differently_ordered_priority_dicts_are_equivalent": {
            "name": "test_differently_ordered_priority_dicts_are_equivalent",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list[list[int]]",
                    "float",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "TestPriorityDict.test_peek_matches_pop": {
            "name": "test_peek_matches_pop",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "float"
                ]
            }
        },
        "TestPriorityDict.test_copy_diverges": {
            "name": "test_copy_diverges",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [],
                "x": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Set[Optional[str]]",
                    "set[typing.Optional[str]]",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "iorefs-master/py_src/singly_linked_list.py": {
        "from_list": {
            "name": "from_list",
            "location": 28,
            "return": [
                "Optional[Node[N]]"
            ],
            "arguments": {
                "xs": [
                    "List[N]"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 34,
            "return": [
                "Optional[Node[N]]"
            ],
            "arguments": {
                "l": [
                    "Optional[Node[N]]"
                ]
            }
        },
        "foldr": {
            "name": "foldr",
            "location": 42,
            "return": [
                "Z"
            ],
            "arguments": {
                "f": [
                    "Callable[([X, Z], Z)]"
                ],
                "z": [
                    "Z"
                ],
                "xs": [
                    "Iterator[X]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "N"
                ],
                "succ": [
                    "Optional[Node[N]]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__iter__": {
            "name": "__iter__",
            "location": 20,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTests.test_from_list": {
            "name": "test_from_list",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    }
}
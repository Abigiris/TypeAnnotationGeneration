{
    "irrd-main/conftest.py": {
        "config_override": {
            "name": "config_override",
            "location": 16,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "tmp_gpg_dir": {
            "name": "tmp_gpg_dir",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "Optional[List[str]]",
                    "list[str]",
                    "str",
                    "bool",
                    "None",
                    "List[Tuple]",
                    "int",
                    "list[tuple[]]"
                ]
            }
        },
        "preload_gpg_key": {
            "name": "preload_gpg_key",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "reset_config": {
            "name": "reset_config",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "config_override._override": {
            "name": "_override",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "override_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "irrd-main/setup.py": {},
    "irrd-main/docs/conf.py": {},
    "irrd-main/docs/_static/irr_rpsl_submit.py": {},
    "irrd-main/irrd/__init__.py": {},
    "irrd-main/irrd/conf/defaults.py": {},
    "irrd-main/irrd/conf/known_keys.py": {},
    "irrd-main/irrd/conf/test_conf.py": {
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "save_yaml_config._save": {
            "name": "_save",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "run_init": [
                    "bool",
                    "Type[T]",
                    "List[dict]"
                ]
            }
        },
        "TestConfiguration.test_file_not_existing": {
            "name": "test_file_not_existing",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestConfiguration.test_load_invalid_yaml": {
            "name": "test_load_invalid_yaml",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "TestConfiguration.test_load_string_file": {
            "name": "test_load_string_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_yaml_config": [
                    "Exception"
                ]
            }
        },
        "TestConfiguration.test_load_empty_config": {
            "name": "test_load_empty_config",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_yaml_config": []
            }
        },
        "TestConfiguration.test_load_valid_reload_valid_config": {
            "name": "test_load_valid_reload_valid_config",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "save_yaml_config": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "tmpdir": [
                    "Callable"
                ],
                "caplog": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestConfiguration.test_load_custom_logging_config": {
            "name": "test_load_custom_logging_config",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "save_yaml_config": [],
                "tmpdir": [
                    "Callable"
                ],
                "caplog": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestConfiguration.test_load_valid_reload_invalid_config": {
            "name": "test_load_valid_reload_invalid_config",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_yaml_config": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tmpdir": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "caplog": []
            }
        },
        "TestConfiguration.test_load_invalid_config": {
            "name": "test_load_invalid_config",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_yaml_config": [],
                "tmpdir": []
            }
        },
        "TestGetSetting.test_get_setting_default": {
            "name": "test_get_setting_default",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestGetSetting.test_get_setting_env": {
            "name": "test_get_setting_env",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestGetSetting.test_get_setting_unknown": {
            "name": "test_get_setting_unknown",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/conf/__init__.py": {
        "get_configuration": {
            "name": "get_configuration",
            "location": 393,
            "return": [
                "Optional[Configuration]"
            ],
            "arguments": {}
        },
        "config_init": {
            "name": "config_init",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "typing.Callable[str, None]",
                    "pathlib.Path",
                    "Callable[[str], None]"
                ],
                "commit": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Callable[[str], None]"
                ]
            }
        },
        "is_config_initialised": {
            "name": "is_config_initialised",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_setting": {
            "name": "get_setting",
            "location": 419,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "setting_name": [
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "sighup_handler": {
            "name": "sighup_handler",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_config_path": [
                    "Optional[str]"
                ],
                "commit": [
                    "bool",
                    "str",
                    "pathlib2.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration.get_setting_live": {
            "name": "get_setting_live",
            "location": 123,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "setting_name": [
                    "str"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        },
        "Configuration.reload": {
            "name": "reload",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._commit_staging": {
            "name": "_commit_staging",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._staging_reload_check": {
            "name": "_staging_reload_check",
            "location": 178,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "log_success": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Configuration._check_staging_config": {
            "name": "_check_staging_config",
            "location": 208,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._check_is_str": {
            "name": "_check_is_str",
            "location": 384,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "key": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "required": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Union[str, os.PathLike]]"
                ]
            }
        },
        "Configuration._check_staging_config._validate_subconfig": {
            "name": "_validate_subconfig",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT"
                ]
            }
        }
    },
    "irrd-main/irrd/daemon/main.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_irrd": {
            "name": "run_irrd",
            "location": 99,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mirror_frequency": [
                    "int"
                ],
                "config_file_path": [
                    "str"
                ],
                "uid": [
                    "Optional[int]"
                ],
                "gid": [
                    "Optional[int]"
                ]
            }
        },
        "get_configured_owner": {
            "name": "get_configured_owner",
            "location": 184,
            "return": [
                "Tuple[(Optional[int], Optional[int])]"
            ],
            "arguments": {}
        },
        "run_irrd.sighup_handler": {
            "name": "sighup_handler",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_irrd.sigterm_handler": {
            "name": "sigterm_handler",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "irrd-main/irrd/daemon/__init__.py": {},
    "irrd-main/irrd/integration_tests/constants.py": {},
    "irrd-main/irrd/integration_tests/run.py": {
        "TestIntegration.test_irrd_integration": {
            "name": "test_irrd_integration",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestIntegration.check_http": {
            "name": "check_http",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.check_graphql": {
            "name": "check_graphql",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration._start_mailserver": {
            "name": "_start_mailserver",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration._start_irrds": {
            "name": "_start_irrds",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration._prepare_database": {
            "name": "_prepare_database",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration._submit_update": {
            "name": "_submit_update",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": [],
                "request": []
            }
        },
        "TestIntegration._retrieve_mails": {
            "name": "_retrieve_mails",
            "location": 910,
            "return": [
                "List[email.message.Message]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration._extract_message_body": {
            "name": "_extract_message_body",
            "location": 933,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TestIntegration._check_text_in_mails": {
            "name": "_check_text_in_mails",
            "location": 941,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "expected_texts": []
            }
        },
        "TestIntegration._check_recipients_in_mails": {
            "name": "_check_recipients_in_mails",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [],
                "expected_recipients": []
            }
        },
        "TestIntegration.teardown_method": {
            "name": "teardown_method",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        }
    },
    "irrd-main/irrd/integration_tests/__init__.py": {},
    "irrd-main/irrd/mirroring/mirror_runners_export.py": {
        "SourceExportRunner.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "SourceExportRunner.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceExportRunner._export": {
            "name": "_export",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "export_destination": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "typing.AbstractSet",
                    "Optional[str]",
                    "Path",
                    "pathlib.Path",
                    "AbstractSet[str]"
                ],
                "remove_auth_hashes": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/mirror_runners_import.py": {
        "RPSLMirrorImportUpdateRunner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "RPSLMirrorImportUpdateRunner.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLMirrorImportUpdateRunner._status": {
            "name": "_status",
            "location": 67,
            "return": [
                "Tuple[(Optional[int], Optional[bool])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileImportRunnerBase._retrieve_file": {
            "name": "_retrieve_file",
            "location": 78,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "return_contents": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileImportRunnerBase._retrieve_file_download": {
            "name": "_retrieve_file_download",
            "location": 102,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable[[str], None]"
                ],
                "url_parsed": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "return_contents": [
                    "bool",
                    "str",
                    "List[str]",
                    "error.Code",
                    "Optional[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "FileImportRunnerBase._download_file": {
            "name": "_download_file",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "IO"
                ],
                "url": [
                    "str"
                ],
                "url_parsed": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileImportRunnerBase._retrieve_file_local": {
            "name": "_retrieve_file_local",
            "location": 159,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ],
                "return_contents": [
                    "bool",
                    "list",
                    "str"
                ]
            }
        },
        "RPSLMirrorFullImportRunner.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "RPSLMirrorFullImportRunner.run": {
            "name": "run",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "irrd.storage.database_handler.DatabaseHandler",
                    "Tuple[int, int]",
                    "bool"
                ],
                "serial_newest_mirror": [
                    "Optional[int]"
                ],
                "force_reload": [
                    "bool",
                    "Optional[str]",
                    "Optional[Tuple[float, float]]",
                    "Optional[Union[Any, Any]]",
                    "float"
                ]
            }
        },
        "ROAImportRunner.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list",
                    "None",
                    "int",
                    "Iterable[Any]",
                    "list[]"
                ]
            }
        },
        "ROAImportRunner.run": {
            "name": "run",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROAImportRunner._import_roas": {
            "name": "_import_roas",
            "location": 272,
            "return": [
                "List[irrd.rpki.importer.ROA]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeFilterUpdateRunner.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list",
                    "None",
                    "int",
                    "Iterable[Any]",
                    "list[]"
                ]
            }
        },
        "ScopeFilterUpdateRunner.run": {
            "name": "run",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NRTMImportUpdateStreamRunner.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "NRTMImportUpdateStreamRunner.run": {
            "name": "run",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial_newest_mirror": [
                    "int"
                ],
                "database_handler": [
                    "list",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/nrtm_generator.py": {
        "NRTMGenerator.generate": {
            "name": "generate",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "serial_start_requested": [
                    "int"
                ],
                "serial_end_requested": [
                    "Optional[int]"
                ],
                "database_handler": [
                    "Optional[str]",
                    "bool"
                ],
                "remove_auth_hashes": [
                    "bool",
                    "float",
                    "mode.utils.times.Seconds",
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/nrtm_operation.py": {
        "NRTMOperation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "operation": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "serial": [
                    "int"
                ],
                "object_text": [
                    "str"
                ],
                "strict_validation_key_cert": [
                    "bool"
                ],
                "rpki_aware": [
                    "bool"
                ],
                "object_class_filter": [
                    "Optional[List[str]]"
                ]
            }
        },
        "NRTMOperation.save": {
            "name": "save",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "BaseException"
                ]
            }
        },
        "NRTMOperation.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/mirroring/parsers.py": {
        "RPSLImportError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "MirrorParser.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorFileImportParserBase.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "database_handler": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "float",
                    "dict[, ]",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "dict"
                ],
                "direct_error_return": [
                    "bool"
                ],
                "roa_validator": [
                    "Optional[irrd.rpki.validators.BulkRouteROAValidator]"
                ]
            }
        },
        "MirrorFileImportParserBase._parse_object": {
            "name": "_parse_object",
            "location": 70,
            "return": [
                "Optional[irrd.rpsl.parser.RPSLObject]"
            ],
            "arguments": {
                "self": [],
                "rpsl_text": [
                    "str"
                ]
            }
        },
        "MirrorFileImportParser.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "Optional[int]"
                ]
            }
        },
        "MirrorFileImportParser.run_import": {
            "name": "run_import",
            "location": 148,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorFileImportParser.log_report": {
            "name": "log_report",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorUpdateFileImportParser.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorUpdateFileImportParser.run_import": {
            "name": "run_import",
            "location": 206,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorUpdateFileImportParser.log_report": {
            "name": "log_report",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NRTMStreamParser.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "nrtm_data": [
                    "str"
                ],
                "database_handler": [
                    "typing.Callable[, ]",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "dict[str, list[typing.Any]]",
                    "bool",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "NRTMStreamParser._split_stream": {
            "name": "_split_stream",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "NRTMStreamParser._handle_possible_start_line": {
            "name": "_handle_possible_start_line",
            "location": 344,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "NRTMStreamParser._handle_operation": {
            "name": "_handle_operation",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_paragraph": [
                    "str"
                ],
                "paragraphs": [
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/scheduler.py": {
        "ScheduledTaskProcess.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ScheduledTaskProcess.close": {
            "name": "close",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledTaskProcess.run": {
            "name": "run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorScheduler.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorScheduler.run": {
            "name": "run",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorScheduler._check_scopefilter_change": {
            "name": "_check_scopefilter_change",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorScheduler.run_if_relevant": {
            "name": "run_if_relevant",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "runner_class": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "Iterable[str]"
                ],
                "timer": [
                    "int"
                ]
            }
        },
        "MirrorScheduler.terminate_children": {
            "name": "terminate_children",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MirrorScheduler.update_process_state": {
            "name": "update_process_state",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/mirroring/__init__.py": {},
    "irrd-main/irrd/mirroring/tests/nrtm_samples.py": {},
    "irrd-main/irrd/mirroring/tests/test_mirror_runners_export.py": {
        "TestSourceExportRunner.test_export": {
            "name": "test_export",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "config_override": [],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestSourceExportRunner.test_export_unfiltered": {
            "name": "test_export_unfiltered",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "config_override": [],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestSourceExportRunner.test_failure": {
            "name": "test_failure",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "config_override": [],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestSourceExportRunner.test_export_no_serial": {
            "name": "test_export_no_serial",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "config_override": [],
                "monkeypatch": [],
                "caplog": []
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/test_mirror_runners_import.py": {
        "TestRPSLMirrorImportUpdateRunner.test_full_import_call": {
            "name": "test_full_import_call",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestRPSLMirrorImportUpdateRunner.test_force_reload": {
            "name": "test_force_reload",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestRPSLMirrorImportUpdateRunner.test_update_stream_call": {
            "name": "test_update_stream_call",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRPSLMirrorImportUpdateRunner.test_io_exception_handling": {
            "name": "test_io_exception_handling",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "caplog": []
            }
        },
        "TestRPSLMirrorImportUpdateRunner.test_unexpected_exception_handling": {
            "name": "test_unexpected_exception_handling",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestRPSLMirrorFullImportRunner.test_run_import_ftp": {
            "name": "test_run_import_ftp",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_failed_import_ftp": {
            "name": "test_failed_import_ftp",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestRPSLMirrorFullImportRunner.test_run_import_local_file": {
            "name": "test_run_import_local_file",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "int"
                ],
                "tmpdir": [
                    "dict"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_no_serial_ftp": {
            "name": "test_no_serial_ftp",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Optional[Iterable[Any]]",
                    "Optional[Union[bool, Any]]",
                    "typing.Iterable[typing.Any]",
                    "None",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_import_cancelled_serial_too_old": {
            "name": "test_import_cancelled_serial_too_old",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_import_force_reload_with_serial_too_old": {
            "name": "test_import_force_reload_with_serial_too_old",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_missing_source_settings_ftp": {
            "name": "test_missing_source_settings_ftp",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRPSLMirrorFullImportRunner.test_unsupported_protocol": {
            "name": "test_unsupported_protocol",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockUrlopenResponse.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "bytes"
                ],
                "fail": [
                    "bool"
                ]
            }
        },
        "MockMirrorFileImportParser.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "tuple",
                    "tuple[]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "serial": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "Optional[List[str]]",
                    "list[str]",
                    "None",
                    "Optional[bool]"
                ],
                "database_handler": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "tuple",
                    "tuple[]"
                ],
                "direct_error_return": [
                    "bool",
                    "Optional[bool]",
                    "Tuple[str]",
                    "tuple",
                    "str"
                ],
                "roa_validator": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "MockMirrorFileImportParser.run_import": {
            "name": "run_import",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestROAImportRunner.test_run_import_http_file_success": {
            "name": "test_run_import_http_file_success",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [],
                "tmpdir": [],
                "caplog": []
            }
        },
        "TestROAImportRunner.test_run_import_http_file_failed_download": {
            "name": "test_run_import_http_file_failed_download",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [],
                "tmpdir": [],
                "caplog": []
            }
        },
        "TestROAImportRunner.test_exception_handling": {
            "name": "test_exception_handling",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Iterable[Any]",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "tmpdir": [
                    "bool",
                    "IO[str]"
                ],
                "caplog": []
            }
        },
        "TestROAImportRunner.test_file_error_handling": {
            "name": "test_file_error_handling",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "str",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "tmpdir": [
                    "IO[str]",
                    "bool"
                ],
                "caplog": []
            }
        },
        "MockROADataImporter.__init__": {
            "name": "__init__",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpki_text": [
                    "str"
                ],
                "slurm_text": [
                    "str"
                ],
                "database_handler": [
                    "str",
                    "bool",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "Iterable[Dict[str, Any]]",
                    "None",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "TestScopeFilterUpdateRunner.test_run": {
            "name": "test_run",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tmpdir": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "caplog": []
            }
        },
        "TestScopeFilterUpdateRunner.test_exception_handling": {
            "name": "test_exception_handling",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "str",
                    "int"
                ],
                "config_override": [],
                "tmpdir": [],
                "caplog": []
            }
        },
        "TestNRTMImportUpdateStreamRunner.test_run_import": {
            "name": "test_run_import",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestNRTMImportUpdateStreamRunner.test_missing_source_settings": {
            "name": "test_missing_source_settings",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MockNRTMStreamParser.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Optional[List[Dict]]",
                    "None",
                    "list[dict[, ]]"
                ],
                "response": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Optional[List[Dict]]",
                    "None",
                    "list[dict[, ]]"
                ],
                "database_handler": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Optional[List[Dict]]",
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "TestNRTMImportUpdateStreamRunner.test_run_import.mock_whois_query": {
            "name": "mock_whois_query",
            "location": 558,
            "return": [
                "typing.Text",
                "int",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "query": [
                    "str",
                    "int"
                ],
                "end_markings": [
                    "str",
                    "int"
                ]
            }
        },
        "TestROAImportRunner.test_run_import_http_file_success.MockRequestsSuccess.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "stream": [],
                "timeout": []
            }
        },
        "TestROAImportRunner.test_run_import_http_file_success.MockRequestsSuccess.iter_content": {
            "name": "iter_content",
            "location": 388,
            "return": [
                "bytes",
                "Dict[int, List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "bool",
                    "int",
                    "Callable[[Any], int]"
                ]
            }
        },
        "TestROAImportRunner.test_run_import_http_file_failed_download.MockRequestsSuccess.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[Dict[str, str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "stream": [
                    "str",
                    "List[Dict[str, str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "timeout": [
                    "str",
                    "List[Dict[str, str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/test_nrtm_generator.py": {
        "prepare_generator": {
            "name": "prepare_generator",
            "location": 13,
            "return": [
                "typing.Generator[tuple[typing.Union[NRTMGenerator,Mock]]]"
            ],
            "arguments": {
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestNRTMGenerator.test_generate_serial_range_v3": {
            "name": "test_generate_serial_range_v3",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_generate_serial_range_v1": {
            "name": "test_generate_serial_range_v1",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_generate_until_last": {
            "name": "test_generate_until_last",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_serial_range_start_higher_than_low": {
            "name": "test_serial_range_start_higher_than_low",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_serial_start_too_low": {
            "name": "test_serial_start_too_low",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_serial_start_too_high": {
            "name": "test_serial_start_too_high",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_serial_end_too_high": {
            "name": "test_serial_end_too_high",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_no_new_updates": {
            "name": "test_no_new_updates",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_no_updates": {
            "name": "test_no_updates",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        },
        "TestNRTMGenerator.test_no_journal_kept": {
            "name": "test_no_journal_kept",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": [],
                "config_override": []
            }
        },
        "TestNRTMGenerator.test_no_source_status_entry": {
            "name": "test_no_source_status_entry",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": [],
                "config_override": []
            }
        },
        "TestNRTMGenerator.test_include_auth_hash": {
            "name": "test_include_auth_hash",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_generator": []
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/test_nrtm_operation.py": {
        "TestNRTMOperation.test_nrtm_add_valid_without_strict_import_keycert": {
            "name": "test_nrtm_add_valid_without_strict_import_keycert",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "tmp_gpg_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "TestNRTMOperation.test_nrtm_add_valid_with_strict_import_keycert": {
            "name": "test_nrtm_add_valid_with_strict_import_keycert",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "tmp_gpg_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "TestNRTMOperation.test_nrtm_add_valid_rpki_scopefilter_aware": {
            "name": "test_nrtm_add_valid_rpki_scopefilter_aware",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestNRTMOperation.test_nrtm_add_valid_ignored_object_class": {
            "name": "test_nrtm_add_valid_ignored_object_class",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_delete_valid": {
            "name": "test_nrtm_delete_valid",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_add_invalid_unknown_object_class": {
            "name": "test_nrtm_add_invalid_unknown_object_class",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_add_invalid_inconsistent_source": {
            "name": "test_nrtm_add_invalid_inconsistent_source",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_add_invalid_rpsl_errors": {
            "name": "test_nrtm_add_invalid_rpsl_errors",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_delete_valid_incomplete_object": {
            "name": "test_nrtm_delete_valid_incomplete_object",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMOperation.test_nrtm_add_invalid_incomplete_object": {
            "name": "test_nrtm_add_invalid_incomplete_object",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/test_parsers.py": {
        "mock_scopefilter": {
            "name": "mock_scopefilter",
            "location": 25,
            "return": [
                "Mock",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestMirrorFileImportParser.test_parse": {
            "name": "test_parse",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "mock.Mock"
                ],
                "caplog": [
                    "IO[str]",
                    "typing.IO"
                ],
                "tmp_gpg_dir": [
                    "mock.Mock"
                ],
                "config_override": []
            }
        },
        "TestMirrorFileImportParser.test_direct_error_return_invalid_source": {
            "name": "test_direct_error_return_invalid_source",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "mock.Mock"
                ],
                "caplog": [
                    "core.models.Recipe"
                ],
                "tmp_gpg_dir": [
                    "mock.Mock"
                ],
                "config_override": [
                    "mock.Mock"
                ]
            }
        },
        "TestMirrorFileImportParser.test_direct_error_return_malformed_pk": {
            "name": "test_direct_error_return_malformed_pk",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "mock.Mock"
                ],
                "caplog": [
                    "str",
                    "core.models.Recipe"
                ],
                "tmp_gpg_dir": [
                    "mock.Mock"
                ],
                "config_override": [
                    "mock.Mock"
                ]
            }
        },
        "TestMirrorFileImportParser.test_direct_error_return_unknown_class": {
            "name": "test_direct_error_return_unknown_class",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "mock.Mock"
                ],
                "caplog": [
                    "str",
                    "core.models.Recipe"
                ],
                "tmp_gpg_dir": [
                    "mock.Mock"
                ],
                "config_override": [
                    "mock.Mock"
                ]
            }
        },
        "TestMirrorUpdateFileImportParser.test_parse": {
            "name": "test_parse",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.Mock",
                    "Generator[None, Any, None]"
                ],
                "caplog": [
                    "IO[str]",
                    "typing.IO"
                ],
                "config_override": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.Mock",
                    "Generator[None, Any, None]"
                ]
            }
        },
        "TestMirrorUpdateFileImportParser.test_direct_error_return": {
            "name": "test_direct_error_return",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_scopefilter": [
                    "mock.Mock"
                ],
                "config_override": [
                    "mock.Mock"
                ]
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v3_valid": {
            "name": "test_test_parse_nrtm_v3_valid",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v1_valid": {
            "name": "test_test_parse_nrtm_v1_valid",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "bool",
                    "None",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict[, ]",
                    "dict",
                    "typing.Callable[, ]",
                    "alerta.models.alerAlert",
                    "Union[Callable, None]"
                ]
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v3_valid_serial_gap": {
            "name": "test_test_parse_nrtm_v3_valid_serial_gap",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v3_invalid_serial_out_of_order": {
            "name": "test_test_parse_nrtm_v3_invalid_serial_out_of_order",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v3_invalid_unexpected_source": {
            "name": "test_test_parse_nrtm_v3_invalid_unexpected_source",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_v1_invalid_too_many_items": {
            "name": "test_test_parse_nrtm_v1_invalid_too_many_items",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_invalid_invalid_version": {
            "name": "test_test_parse_nrtm_invalid_invalid_version",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_invalid_multiple_start_lines": {
            "name": "test_test_parse_nrtm_invalid_multiple_start_lines",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_invalid_no_start_line": {
            "name": "test_test_parse_nrtm_invalid_no_start_line",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser.test_test_parse_nrtm_no_end": {
            "name": "test_test_parse_nrtm_no_end",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNRTMStreamParser._assert_valid": {
            "name": "_assert_valid",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "irrd.mirroring.parsers.NRTMStreamParser"
                ]
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/test_scheduler.py": {
        "TestMirrorScheduler.test_scheduler_database_readonly": {
            "name": "test_scheduler_database_readonly",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestMirrorScheduler.test_scheduler_runs_rpsl_import": {
            "name": "test_scheduler_runs_rpsl_import",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestMirrorScheduler.test_scheduler_limits_simultaneous_runs": {
            "name": "test_scheduler_limits_simultaneous_runs",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMirrorScheduler.test_scheduler_runs_roa_import": {
            "name": "test_scheduler_runs_roa_import",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestMirrorScheduler.test_scheduler_runs_scopefilter": {
            "name": "test_scheduler_runs_scopefilter",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestMirrorScheduler.test_scheduler_import_ignores_timer_not_expired": {
            "name": "test_scheduler_import_ignores_timer_not_expired",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestMirrorScheduler.test_scheduler_runs_export": {
            "name": "test_scheduler_runs_export",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestMirrorScheduler.test_scheduler_export_ignores_timer_not_expired": {
            "name": "test_scheduler_export_ignores_timer_not_expired",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestScheduledTaskProcess.test_task": {
            "name": "test_task",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRunner.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list[]",
                    "int",
                    "list",
                    "Iterable[Any]"
                ]
            }
        },
        "MockRunner.run": {
            "name": "run",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockScheduledTaskProcess.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockScheduledTaskProcess.run": {
            "name": "run",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockScheduledTaskProcess.close": {
            "name": "close",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/mirroring/tests/__init__.py": {},
    "irrd-main/irrd/rpki/importer.py": {
        "ROADataImporter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpki_json_str": [
                    "str"
                ],
                "slurm_json_str": [
                    "Optional[str]"
                ],
                "database_handler": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ROADataImporter._load_roa_dicts": {
            "name": "_load_roa_dicts",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpki_json_str": [
                    "str"
                ]
            }
        },
        "ROADataImporter._load_slurm": {
            "name": "_load_slurm",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slurm_json_str": [
                    "str"
                ]
            }
        },
        "ROA.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.ServiceName]",
                    "None"
                ],
                "asn": [
                    "int"
                ],
                "max_length": [
                    "str"
                ],
                "trust_anchor": [
                    "str"
                ]
            }
        },
        "ROA.save": {
            "name": "save",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "bool",
                    "torch.utils.data.DataLoader"
                ],
                "scopefilter_validator": [
                    "irrd.scopefilter.validators.ScopeFilterValidator"
                ]
            }
        },
        "RPSLObjectFromROA.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "Literal"
                ],
                "prefix_str": [
                    "str"
                ],
                "asn": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "trust_anchor": [
                    "str"
                ],
                "scopefilter_validator": [
                    "irrd.scopefilter.validators.ScopeFilterValidator"
                ]
            }
        },
        "RPSLObjectFromROA.source": {
            "name": "source",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObjectFromROA.pk": {
            "name": "pk",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObjectFromROA.render_rpsl_text": {
            "name": "render_rpsl_text",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "last_modified": [
                    "List[dict]",
                    "None",
                    "Callable",
                    "list[dict[, ]]",
                    "str",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[cmk.gui.plugins.visuals.utils.Filter]",
                    "list[str]",
                    "Union[Callable, Type]",
                    "typing.Type"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/notifications.py": {
        "notify_rpki_invalid_owners": {
            "name": "notify_rpki_invalid_owners",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "database_handler": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "rpsl_dicts_now_invalid": [
                    "List[Dict[(str, str)]]"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/status.py": {},
    "irrd-main/irrd/rpki/validators.py": {
        "BulkRouteROAValidator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dh": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ],
                "roas": [
                    "Optional[List[irrd.rpki.importer.ROA]]"
                ]
            }
        },
        "BulkRouteROAValidator.validate_all_routes": {
            "name": "validate_all_routes",
            "location": 72,
            "return": [
                "Tuple[(List[Dict[(str, str)]], List[Dict[(str, str)]], List[Dict[(str, str)]])]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ]
            }
        },
        "BulkRouteROAValidator.validate_route": {
            "name": "validate_route",
            "location": 122,
            "return": [
                "irrd.rpki.status.RPKIStatus"
            ],
            "arguments": {
                "self": [],
                "prefix_ip": [
                    "str"
                ],
                "prefix_length": [
                    "int"
                ],
                "prefix_asn": [
                    "int"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "BulkRouteROAValidator._build_roa_tree_from_roa_objs": {
            "name": "_build_roa_tree_from_roa_objs",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "roas": [
                    "List[irrd.rpki.importer.ROA]"
                ]
            }
        },
        "BulkRouteROAValidator._build_roa_tree_from_db": {
            "name": "_build_roa_tree_from_db",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulkRouteROAValidator._ip_to_binary_str": {
            "name": "_ip_to_binary_str",
            "location": 173,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "str"
                ]
            }
        },
        "SingleRouteROAValidator.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "SingleRouteROAValidator.validate_route": {
            "name": "validate_route",
            "location": 190,
            "return": [
                "irrd.rpki.status.RPKIStatus"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "asn": [
                    "int"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/__init__.py": {},
    "irrd-main/irrd/rpki/tests/test_importer.py": {
        "mock_scopefilter": {
            "name": "mock_scopefilter",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestROAImportProcess.test_valid_process": {
            "name": "test_valid_process",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "mock_scopefilter": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestROAImportProcess.test_invalid_rpki_json": {
            "name": "test_invalid_rpki_json",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "mock_scopefilter": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestROAImportProcess.test_invalid_data_in_roa": {
            "name": "test_invalid_data_in_roa",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "mock_scopefilter": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestROAImportProcess.test_invalid_slurm_version": {
            "name": "test_invalid_slurm_version",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock"
                ],
                "mock_scopefilter": [
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/tests/test_notifications.py": {
        "TestNotifyRPKIInvalidOwners.test_notify_regular": {
            "name": "test_notify_regular",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "tests.async_mock.Mock"
                ],
                "config_override": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestNotifyRPKIInvalidOwners.test_notify_disabled": {
            "name": "test_notify_disabled",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestNotifyRPKIInvalidOwners.test_notify_no_relevant_objects": {
            "name": "test_notify_no_relevant_objects",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/tests/test_validators.py": {
        "TestBulkRouteROAValidator.test_validate_routes_from_roa_objs": {
            "name": "test_validate_routes_from_roa_objs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ],
                "config_override": []
            }
        },
        "TestBulkRouteROAValidator.test_validate_routes_with_roa_from_database": {
            "name": "test_validate_routes_with_roa_from_database",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "config_override": [
                    "int",
                    "str"
                ]
            }
        },
        "TestSingleRouteROAValidator.test_validator_normal_roa": {
            "name": "test_validator_normal_roa",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        },
        "TestSingleRouteROAValidator.test_validator_as0_roa": {
            "name": "test_validator_as0_roa",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestSingleRouteROAValidator.test_validator_no_matching_roa": {
            "name": "test_validator_no_matching_roa",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/rpki/tests/__init__.py": {},
    "irrd-main/irrd/rpsl/fields.py": {
        "parse_set_name": {
            "name": "parse_set_name",
            "location": 522,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "prefixes": [
                    "List[str]"
                ],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RPSLTextField.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optional": [
                    "bool"
                ],
                "multiple": [
                    "bool"
                ],
                "primary_key": [
                    "bool"
                ],
                "lookup_key": [
                    "bool"
                ]
            }
        },
        "RPSLTextField.parse": {
            "name": "parse",
            "location": 69,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLFieldListMixin.parse": {
            "name": "parse",
            "location": 84,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "RPSLIPv4PrefixField.parse": {
            "name": "parse",
            "location": 101,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLIPv6PrefixField.parse": {
            "name": "parse",
            "location": 131,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLIPv4AddressRangeField.parse": {
            "name": "parse",
            "location": 166,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLRouteSetMemberField.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_version": [
                    "Optional[int]"
                ]
            }
        },
        "RPSLRouteSetMemberField.parse": {
            "name": "parse",
            "location": 216,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "RPSLASNumberField.parse": {
            "name": "parse",
            "location": 279,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLASBlockField.parse": {
            "name": "parse",
            "location": 294,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLSetNameField.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "RPSLSetNameField.parse": {
            "name": "parse",
            "location": 337,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RPSLEmailField.parse": {
            "name": "parse",
            "location": 343,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLChangedField.parse": {
            "name": "parse",
            "location": 352,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLDNSNameField.parse": {
            "name": "parse",
            "location": 376,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLURLField.parse": {
            "name": "parse",
            "location": 388,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RPSLGenericNameField.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_prefixes": [
                    "List[str]"
                ],
                "non_strict_allow_any": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "RPSLGenericNameField.parse": {
            "name": "parse",
            "location": 420,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "RPSLReferenceField.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "referring": [
                    "List[str]"
                ],
                "strong": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "RPSLReferenceField.parse": {
            "name": "parse",
            "location": 468,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "RPSLReferenceField.resolve_references": {
            "name": "resolve_references",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLReferenceListField.__init__": {
            "name": "__init__",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_kw_any": [
                    "bool"
                ]
            }
        },
        "RPSLReferenceListField.parse": {
            "name": "parse",
            "location": 501,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "parser_state.RPSLParserMessages",
                    "str"
                ]
            }
        },
        "RPSLAuthField.parse": {
            "name": "parse",
            "location": 509,
            "return": [
                "Optional[irrd.rpsl.parser_state.RPSLFieldParseResult]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "messages": [
                    "irrd.rpsl.parser_state.RPSLParserMessages"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "irrd-main/irrd/rpsl/parser.py": {
        "RPSLObjectMeta.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "RPSLObjectMeta"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "clsdict": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RPSLObject.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_text": [
                    "Optional[str]"
                ],
                "strict_validation": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "default_source": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[bool]"
                ]
            }
        },
        "RPSLObject.pk": {
            "name": "pk",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.source": {
            "name": "source",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.ip_version": {
            "name": "ip_version",
            "location": 123,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.referred_strong_objects": {
            "name": "referred_strong_objects",
            "location": 132,
            "return": [
                "List[Tuple[(str, list, list)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.references_strong_inbound": {
            "name": "references_strong_inbound",
            "location": 154,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.render_rpsl_text": {
            "name": "render_rpsl_text",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "last_modified": [
                    "datetime.datetime"
                ]
            }
        },
        "RPSLObject.generate_template": {
            "name": "generate_template",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.clean": {
            "name": "clean",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.clean_for_create": {
            "name": "clean_for_create",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject._extract_attributes_values": {
            "name": "_extract_attributes_values",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "RPSLObject._validate_object": {
            "name": "_validate_object",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject._validate_attribute_counts": {
            "name": "_validate_attribute_counts",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject._parse_attribute_data": {
            "name": "_parse_attribute_data",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_invalid_metadata": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RPSLObject._normalise_rpsl_value": {
            "name": "_normalise_rpsl_value",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RPSLObject._update_attribute_value": {
            "name": "_update_attribute_value",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "new_values": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Dict[int, Tuple[int, int]]",
                    "dict[int, tuple[typing.Union[int,int]]]",
                    "dict",
                    "dict[, ]",
                    "cmk.utils.type_defs.Item",
                    "typing.TextIO",
                    "TextIO",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "RPSLObject.__repr__": {
            "name": "__repr__",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.__key": {
            "name": "__key",
            "location": 457,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.__hash__": {
            "name": "__hash__",
            "location": 460,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLObject.__eq__": {
            "name": "__eq__",
            "location": 463,
            "return": [
                "bool",
                "bytes",
                "Optional[BaseException]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Set[VT]",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "UnknownRPSLObjectClassException.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "rpsl_object_class": [
                    "str"
                ]
            }
        },
        "UnknownRPSLObjectClassException.__str__": {
            "name": "__str__",
            "location": 472,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/rpsl/parser_state.py": {
        "RPSLParserMessages.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLParserMessages.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLParserMessages.messages": {
            "name": "messages",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLParserMessages.infos": {
            "name": "infos",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLParserMessages.errors": {
            "name": "errors",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLParserMessages.info": {
            "name": "info",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "RPSLParserMessages.error": {
            "name": "error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "RPSLParserMessages.merge_messages": {
            "name": "merge_messages",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_messages": [
                    "RPSLParserMessagesType"
                ]
            }
        },
        "RPSLParserMessages._message": {
            "name": "_message",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "RPSLFieldParseResult.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "values_list": [
                    "List[str]"
                ],
                "ip_first": [
                    "bool",
                    "None",
                    "Optional[\"GraphLogger\"]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List['cirq.Circuit']",
                    "list['cirq.Circuit']",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "ip_last": [
                    "bool",
                    "None",
                    "Optional[\"GraphLogger\"]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List['cirq.Circuit']",
                    "list['cirq.Circuit']",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "prefix": [
                    "bool",
                    "None",
                    "Optional[\"GraphLogger\"]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List['cirq.Circuit']",
                    "list['cirq.Circuit']",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "prefix_length": [
                    "int"
                ],
                "asn_first": [
                    "int"
                ],
                "asn_last": [
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/rpsl/passwords.py": {
        "get_password_hashers": {
            "name": "get_password_hashers",
            "location": 20,
            "return": [
                "Dict[(str, Type[Union[(passlib.handlers.bcrypt.bcrypt, passlib.handlers.des_crypt.des_crypt, passlib.handlers.md5_crypt.md5_crypt)]])]"
            ],
            "arguments": {
                "permit_legacy": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Sequence[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "irrd-main/irrd/rpsl/rpsl_objects.py": {
        "rpsl_object_from_text": {
            "name": "rpsl_object_from_text",
            "location": 24,
            "return": [
                "irrd.rpsl.parser.RPSLObject"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "strict_validation": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "default_source": [
                    "Optional[str]"
                ]
            }
        },
        "lookup_field_names": {
            "name": "lookup_field_names",
            "location": 529,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        },
        "RPSLSet.clean_for_create": {
            "name": "clean_for_create",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLKeyCert.clean": {
            "name": "clean",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLKeyCert.verify": {
            "name": "verify",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "RPSLKeyCert.format_fingerprint": {
            "name": "format_fingerprint",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "fingerprint": [
                    "str"
                ]
            }
        },
        "RPSLMntner.clean": {
            "name": "clean",
            "location": 300,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLMntner.verify_auth": {
            "name": "verify_auth",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "passwords": [
                    "List[str]"
                ],
                "keycert_obj_pk": [
                    "Optional[str]"
                ]
            }
        },
        "RPSLMntner.has_dummy_auth_value": {
            "name": "has_dummy_auth_value",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLMntner.force_single_new_password": {
            "name": "force_single_new_password",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "RPSLMntner._auth_lines": {
            "name": "_auth_lines",
            "location": 352,
            "return": [
                "List[Union[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "password_hashes": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/rpsl/__init__.py": {},
    "irrd-main/irrd/rpsl/tests/test_fields.py": {
        "assert_validation_err": {
            "name": "assert_validation_err",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_errors": [],
                "callable": []
            }
        },
        "test_rpsl_text_field": {
            "name": "test_rpsl_text_field",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv4_prefix_field": {
            "name": "test_ipv4_prefix_field",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv4_prefixes_field": {
            "name": "test_ipv4_prefixes_field",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv6_prefix_field": {
            "name": "test_ipv6_prefix_field",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv6_prefixes_field": {
            "name": "test_ipv6_prefixes_field",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv4_address_range_field": {
            "name": "test_ipv4_address_range_field",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route_set_members_field": {
            "name": "test_route_set_members_field",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_as_number_field": {
            "name": "test_validate_as_number_field",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_as_block_field": {
            "name": "test_validate_as_block_field",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_set_name_field": {
            "name": "test_validate_set_name_field",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_email_field": {
            "name": "test_validate_email_field",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_changed_field": {
            "name": "test_validate_changed_field",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_dns_name_field": {
            "name": "test_validate_dns_name_field",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_url_field": {
            "name": "test_validate_url_field",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_generic_name_field": {
            "name": "test_validate_generic_name_field",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rpsl_reference_field": {
            "name": "test_rpsl_reference_field",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rpsl_references_field": {
            "name": "test_rpsl_references_field",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rpsl_auth_field": {
            "name": "test_rpsl_auth_field",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "config_override": []
            }
        }
    },
    "irrd-main/irrd/rpsl/tests/test_rpsl_objects.py": {
        "TestRPSLParsingGeneric.test_unknown_class": {
            "name": "test_unknown_class",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_malformed_empty_line": {
            "name": "test_malformed_empty_line",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_malformed_attribute_name": {
            "name": "test_malformed_attribute_name",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_missing_mandatory_attribute": {
            "name": "test_missing_mandatory_attribute",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_unknown_atribute": {
            "name": "test_unknown_atribute",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_invalid_multiple_attribute": {
            "name": "test_invalid_multiple_attribute",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_malformed_pk": {
            "name": "test_malformed_pk",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_malformed_source": {
            "name": "test_malformed_source",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_missing_source_optional_default_source": {
            "name": "test_missing_source_optional_default_source",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_line_neither_continuation_nor_attribute": {
            "name": "test_line_neither_continuation_nor_attribute",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLParsingGeneric.test_double_object_297": {
            "name": "test_double_object_297",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAsBlock.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAsBlock.test_parse": {
            "name": "test_parse",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAsSet.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAsSet.test_parse": {
            "name": "test_parse",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAsSet.test_clean_for_create": {
            "name": "test_clean_for_create",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": []
            }
        },
        "TestRPSLAutNum.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLAutNum.test_parse": {
            "name": "test_parse",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLDomain.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLDomain.test_parse": {
            "name": "test_parse",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLFilterSet.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLFilterSet.test_parse": {
            "name": "test_parse",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInetRtr.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInetRtr.test_parse": {
            "name": "test_parse",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInet6Num.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInet6Num.test_parse": {
            "name": "test_parse",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInetnum.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLInetnum.test_parse": {
            "name": "test_parse",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLKeyCert.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLKeyCert.test_parse_parse": {
            "name": "test_parse_parse",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLKeyCert.test_parse_incorrect_object_name": {
            "name": "test_parse_incorrect_object_name",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": []
            }
        },
        "TestRPSLKeyCert.test_parse_missing_key": {
            "name": "test_parse_missing_key",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": []
            }
        },
        "TestRPSLKeyCert.test_parse_invalid_key": {
            "name": "test_parse_invalid_key",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": []
            }
        },
        "TestRPSLKeyCert.test_verify": {
            "name": "test_verify",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": []
            }
        },
        "TestRPSLMntner.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLMntner.test_parse": {
            "name": "test_parse",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": []
            }
        },
        "TestRPSLMntner.test_parse_invalid_partial_dummy_hash": {
            "name": "test_parse_invalid_partial_dummy_hash",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": []
            }
        },
        "TestRPSLMntner.test_verify": {
            "name": "test_verify",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": []
            }
        },
        "TestRPSLPeeringSet.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLPeeringSet.test_parse": {
            "name": "test_parse",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLPerson.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLPerson.test_parse": {
            "name": "test_parse",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLPerson.test_generate_template": {
            "name": "test_generate_template",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRole.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRole.test_parse": {
            "name": "test_parse",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute.test_parse": {
            "name": "test_parse",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute.test_missing_pk_nonstrict": {
            "name": "test_missing_pk_nonstrict",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute.test_generate_template": {
            "name": "test_generate_template",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRouteSet.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRouteSet.test_parse": {
            "name": "test_parse",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute6.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRoute6.test_parse": {
            "name": "test_parse",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRtrSet.test_has_mapping": {
            "name": "test_has_mapping",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLRtrSet.test_parse": {
            "name": "test_parse",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLastModified.test_authoritative": {
            "name": "test_authoritative",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": []
            }
        },
        "TestLastModified.test_not_authoritative": {
            "name": "test_not_authoritative",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/rpsl/tests/__init__.py": {},
    "irrd-main/irrd/scopefilter/status.py": {},
    "irrd-main/irrd/scopefilter/validators.py": {
        "ScopeFilterValidator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeFilterValidator.load_filters": {
            "name": "load_filters",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeFilterValidator.validate": {
            "name": "validate",
            "location": 40,
            "return": [
                "irrd.scopefilter.status.ScopeFilterStatus"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "prefix": [
                    "Optional[str]",
                    "Optional[Type]",
                    "Optional[Exception]",
                    "Optional[int]"
                ],
                "asn": [
                    "Optional[int]"
                ]
            }
        },
        "ScopeFilterValidator._validate_rpsl_data": {
            "name": "_validate_rpsl_data",
            "location": 65,
            "return": [
                "Tuple[(irrd.scopefilter.status.ScopeFilterStatus, str)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "object_class": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "asn_first": [
                    "Optional[int]"
                ]
            }
        },
        "ScopeFilterValidator.validate_rpsl_object": {
            "name": "validate_rpsl_object",
            "location": 87,
            "return": [
                "Tuple[(irrd.scopefilter.status.ScopeFilterStatus, str)]"
            ],
            "arguments": {
                "self": [],
                "rpsl_object": [
                    "irrd.rpsl.parser.RPSLObject"
                ]
            }
        },
        "ScopeFilterValidator.validate_all_rpsl_objects": {
            "name": "validate_all_rpsl_objects",
            "location": 99,
            "return": [
                "Tuple[(List[Dict[(str, str)]], List[Dict[(str, str)]], List[Dict[(str, str)]])]"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/scopefilter/__init__.py": {},
    "irrd-main/irrd/scopefilter/tests/test_scopefilter.py": {
        "TestScopeFilterValidator.test_validate": {
            "name": "test_validate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestScopeFilterValidator.test_invalid_input": {
            "name": "test_invalid_input",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScopeFilterValidator.test_validate_rpsl_object": {
            "name": "test_validate_rpsl_object",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestScopeFilterValidator.test_validate_all_rpsl_objects": {
            "name": "test_validate_all_rpsl_objects",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "monkeypatch": [
                    "Callable",
                    "opwen_email_server.services.storage.AzureTextStorage",
                    "dict"
                ]
            }
        }
    },
    "irrd-main/irrd/scopefilter/tests/__init__.py": {},
    "irrd-main/irrd/scripts/database_downgrade.py": {
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/database_upgrade.py": {
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/irr_rpsl_submit.py": {
        "run": {
            "name": "run",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "requests_text": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "debug": [
                    "bool",
                    "bytes",
                    "str",
                    "float"
                ],
                "metadata": [
                    "str",
                    "None",
                    "Dict[str, str]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "extract_request_body": {
            "name": "extract_request_body",
            "location": 66,
            "return": [
                "Dict[(str, Union[(str, List[Union[(str, Dict[(str, str)])]])])]"
            ],
            "arguments": {
                "requests_text": [
                    "str"
                ]
            }
        },
        "format_report": {
            "name": "format_report",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "response": [
                    "str",
                    "bytes",
                    "bool",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "format_report_object": {
            "name": "format_report_object",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "list[list[str]]",
                    "Dict[str, Set[str]]",
                    "list[]",
                    "List[List[str]]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "main.metadata": {
            "name": "metadata",
            "location": 155,
            "return": [
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/load_database.py": {
        "load": {
            "name": "load",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "pathlib.Path",
                    "typing.Callable[str, str]",
                    "path.Path",
                    "None",
                    "Optional[Callable[[str], str]]",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "serial": [
                    "pathlib.Path",
                    "typing.Callable[str, str]",
                    "path.Path",
                    "None",
                    "Optional[Callable[[str], str]]",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/load_pgp_keys.py": {
        "load_pgp_keys": {
            "name": "load_pgp_keys",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/load_test.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "Union[str, object]"
                ],
                "port": [
                    "str",
                    "int",
                    "Union[str, object]"
                ],
                "count": [
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/mirror_force_reload.py": {
        "set_force_reload": {
            "name": "set_force_reload",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "typing.Callable[, ]",
                    "Exception",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/query_qa_comparison.py": {
        "main": {
            "name": "main",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QueryComparison.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "host_reference": [
                    "int",
                    "str",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "port_reference": [
                    "int",
                    "str",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "host_tested": [
                    "int",
                    "str",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "port_tested": [
                    "int",
                    "str",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "QueryComparison.clean": {
            "name": "clean",
            "location": 126,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "response": [
                    "Optional[str]"
                ]
            }
        },
        "QueryComparison.write_inconsistency_report": {
            "name": "write_inconsistency_report",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int"
                ],
                "cleaned_reference": [
                    "str",
                    "int"
                ],
                "cleaned_tested": [
                    "str",
                    "int"
                ]
            }
        },
        "QueryComparison.render_diff": {
            "name": "render_diff",
            "location": 166,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "cleaned_reference": [
                    "str"
                ],
                "cleaned_tested": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/rpsl_read.py": {
        "main": {
            "name": "main",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RPSLParse.main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "homeassistanhelpers.storage.Store"
                ],
                "strict_validation": [
                    "bool",
                    "tuple[]",
                    "int",
                    "tuple"
                ],
                "database": [
                    "bool",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ],
                "show_info": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "RPSLParse.parse_object": {
            "name": "parse_object",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_text": [
                    "str"
                ],
                "strict_validation": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/set_last_modified_auth.py": {
        "set_last_modified": {
            "name": "set_last_modified",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/submit_changes.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/submit_email.py": {
        "run": {
            "name": "run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "memoryview",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/update_database.py": {
        "update": {
            "name": "update",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "list[str]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "typing.Callable[str, str]",
                    "pathlib.Path",
                    "None",
                    "Path",
                    "Optional[Callable[[str], str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/scripts/__init__.py": {},
    "irrd-main/irrd/scripts/tests/test_irr_rpsl_submit.py": {
        "test_call_success": {
            "name": "test_call_success",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Type"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_call_failed": {
            "name": "test_call_failed",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Type"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_input_mixed": {
            "name": "test_input_mixed",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "monkeypatch": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_no_input": {
            "name": "test_no_input",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "tests.async_mock.Mock",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_load_database.py": {
        "test_load_database_success": {
            "name": "test_load_database_success",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": []
            }
        },
        "test_load_database_import_error": {
            "name": "test_load_database_import_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": [],
                "caplog": [
                    "int",
                    "str",
                    "float",
                    "Tuple[float, float, float, float, float]",
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_reject_import_source_set": {
            "name": "test_reject_import_source_set",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str"
                ],
                "config_override": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_load_pgp_keys.py": {
        "test_load_pgp_keys": {
            "name": "test_load_pgp_keys",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": [
                    "str",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_mirror_force_reload.py": {
        "test_set_force_reload": {
            "name": "test_set_force_reload",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_rpsl_read.py": {
        "test_rpsl_read": {
            "name": "test_rpsl_read",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "tmpdir": [
                    "unittesmock.Mock"
                ],
                "monkeypatch": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_set_last_modified_auth.py": {
        "test_set_last_modified": {
            "name": "test_set_last_modified",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Sequence[int]",
                    "str",
                    "typing.Sequence[int]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [
                    "str"
                ],
                "config_override": []
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_submit_email.py": {
        "test_submit_email_success": {
            "name": "test_submit_email_success",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_submit_email_fail": {
            "name": "test_submit_email_fail",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": [
                    "str"
                ],
                "caplog": []
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_submit_update.py": {
        "test_submit_changes": {
            "name": "test_submit_changes",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/test_update_database.py": {
        "test_update_database_success": {
            "name": "test_update_database_success",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": []
            }
        },
        "test_update_database_import_error": {
            "name": "test_update_database_import_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "monkeypatch": [],
                "caplog": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[float, float, float, float, float]",
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_reject_import_source_set": {
            "name": "test_reject_import_source_set",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str"
                ],
                "config_override": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/scripts/tests/__init__.py": {},
    "irrd-main/irrd/server/access_check.py": {
        "is_client_permitted": {
            "name": "is_client_permitted",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": [
                    "str"
                ],
                "access_list_setting": [
                    "str"
                ],
                "default_deny": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "log": [
                    "bool",
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/query_resolver.py": {
        "QueryResolver.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preloader": [
                    "int",
                    "float",
                    "bool"
                ],
                "database_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "QueryResolver.set_query_sources": {
            "name": "set_query_sources",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "Optional[List[str]]"
                ]
            }
        },
        "QueryResolver.disable_rpki_filter": {
            "name": "disable_rpki_filter",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryResolver.disable_out_of_scope_filter": {
            "name": "disable_out_of_scope_filter",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryResolver.set_object_class_filter_next_query": {
            "name": "set_object_class_filter_next_query",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_classes": [
                    "List[str]"
                ]
            }
        },
        "QueryResolver.key_lookup": {
            "name": "key_lookup",
            "location": 78,
            "return": [
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "object_class": [
                    "str"
                ],
                "rpsl_pk": [
                    "str"
                ]
            }
        },
        "QueryResolver.rpsl_text_search": {
            "name": "rpsl_text_search",
            "location": 83,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "QueryResolver.route_search": {
            "name": "route_search",
            "location": 87,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Pattern",
                    "typing.Pattern"
                ],
                "lookup_type": [
                    "RouteLookupType"
                ]
            }
        },
        "QueryResolver.rpsl_attribute_search": {
            "name": "rpsl_attribute_search",
            "location": 99,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "QueryResolver.routes_for_origin": {
            "name": "routes_for_origin",
            "location": 113,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ],
                "ip_version": [
                    "Optional[int]"
                ]
            }
        },
        "QueryResolver.routes_for_as_set": {
            "name": "routes_for_as_set",
            "location": 121,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ],
                "ip_version": [
                    "Optional[int]"
                ],
                "exclude_sets": [
                    "Set[str]"
                ]
            }
        },
        "QueryResolver.members_for_set_per_source": {
            "name": "members_for_set_per_source",
            "location": 132,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ],
                "exclude_sets": [
                    "Set[str]"
                ],
                "depth": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "QueryResolver.members_for_set": {
            "name": "members_for_set",
            "location": 155,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ],
                "exclude_sets": [
                    "Set[str]"
                ],
                "depth": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "MutableMapping",
                    "float"
                ],
                "recursive": [
                    "bool",
                    "Iterable[str]"
                ],
                "root_source": [
                    "Optional[str]"
                ]
            }
        },
        "QueryResolver._recursive_set_resolve": {
            "name": "_recursive_set_resolve",
            "location": 189,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "members": [
                    "Set[str]"
                ],
                "sets_seen": [
                    "dict[, ]",
                    "Callable",
                    "dict"
                ],
                "root_source": [
                    "Optional[str]"
                ]
            }
        },
        "QueryResolver._find_set_members": {
            "name": "_find_set_members",
            "location": 244,
            "return": [
                "Tuple[(Set[str], Set[str])]"
            ],
            "arguments": {
                "self": [],
                "set_names": [
                    "Set[str]"
                ],
                "limit_source": [
                    "Optional[str]"
                ]
            }
        },
        "QueryResolver.database_status": {
            "name": "database_status",
            "location": 326,
            "return": [
                "collections.OrderedDict[(str, collections.OrderedDict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "Optional[List[str]]"
                ]
            }
        },
        "QueryResolver.rpsl_object_template": {
            "name": "rpsl_object_template",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_class": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "QueryResolver.enable_sql_trace": {
            "name": "enable_sql_trace",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryResolver.retrieve_sql_trace": {
            "name": "retrieve_sql_trace",
            "location": 365,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryResolver._prepare_query": {
            "name": "_prepare_query",
            "location": 371,
            "return": [
                "RPSLDatabaseQuery",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "column_names": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]"
                ],
                "ordered_by_sources": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "QueryResolver._execute_query": {
            "name": "_execute_query",
            "location": 385,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List['Query']",
                    "list[Q]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/test_access_check.py": {
        "TestIsClientPermitted.test_no_access_list": {
            "name": "test_no_access_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsClientPermitted.test_access_list_permitted": {
            "name": "test_access_list_permitted",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestIsClientPermitted.test_access_list_denied": {
            "name": "test_access_list_denied",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestIsClientPermitted.test_access_list_denied_invalid_ip": {
            "name": "test_access_list_denied_invalid_ip",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/server/__init__.py": {},
    "irrd-main/irrd/server/graphql/extensions.py": {
        "error_formatter": {
            "name": "error_formatter",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "logging.Logger",
                    "typing.Type",
                    "logging.FileHandler",
                    "Type"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "QueryMetadataExtension.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryMetadataExtension.request_started": {
            "name": "request_started",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "types.ContextValue",
                    "typing.IO",
                    "list[dict[, ]]",
                    "IO[str]",
                    "List[dict]"
                ]
            }
        },
        "QueryMetadataExtension.format": {
            "name": "format",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[]",
                    "int",
                    "Mapping[str, int]",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "irrd-main/irrd/server/graphql/resolvers.py": {
        "resolve_rpsl_object_type": {
            "name": "resolve_rpsl_object_type",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "resolve_rpsl_objects": {
            "name": "resolve_rpsl_objects",
            "location": 39,
            "return": [
                "List[str]",
                "str",
                "dict",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ],
                "info": [
                    "str",
                    "memoryview",
                    "bool",
                    "T",
                    "None",
                    "Optional[object]"
                ]
            }
        },
        "resolve_rpsl_object_mnt_by_objs": {
            "name": "resolve_rpsl_object_mnt_by_objs",
            "location": 112,
            "return": [
                "List[dict]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "info": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "resolve_rpsl_object_adminc_objs": {
            "name": "resolve_rpsl_object_adminc_objs",
            "location": 117,
            "return": [
                "List[dict]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "info": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "resolve_rpsl_object_techc_objs": {
            "name": "resolve_rpsl_object_techc_objs",
            "location": 122,
            "return": [
                "List[dict]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "info": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "resolve_rpsl_object_members_by_ref_objs": {
            "name": "resolve_rpsl_object_members_by_ref_objs",
            "location": 127,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "float",
                "utils.Node"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "info": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "resolve_rpsl_object_member_of_objs": {
            "name": "resolve_rpsl_object_member_of_objs",
            "location": 132,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "float",
                "bytes"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "int",
                    "bool",
                    "kitovu.utils.JsonType"
                ],
                "info": [
                    "bool",
                    "dict[, ]",
                    "graphql.ResolveInfo",
                    "dict"
                ]
            }
        },
        "resolve_rpsl_object_members_objs": {
            "name": "resolve_rpsl_object_members_objs",
            "location": 139,
            "return": [
                "List[dict]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "int",
                    "bool",
                    "Match[str]"
                ],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_resolve_subquery": {
            "name": "_resolve_subquery",
            "location": 152,
            "return": [
                "Union[(Generator[(Any, Any, None)], List[nothing])]"
            ],
            "arguments": {
                "rpsl_object": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "info": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "object_classes": [
                    "List[str]"
                ],
                "pk_field": [
                    "str"
                ],
                "sticky_source": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "resolve_rpsl_object_journal": {
            "name": "resolve_rpsl_object_journal",
            "location": 174,
            "return": [
                "Generator[(Dict[(Union[(list, str)], Any)], Any, None)]"
            ],
            "arguments": {
                "rpsl_object": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "info": [
                    "List[Dict[str, float]]",
                    "list[dict[str, float]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_rpsl_db_query_to_graphql_out": {
            "name": "_rpsl_db_query_to_graphql_out",
            "location": 195,
            "return": [
                "Generator[(Dict[(Union[(list, str)], Any)], Any, None)]"
            ],
            "arguments": {
                "query": [
                    "Type",
                    "bool",
                    "typing.Type"
                ],
                "info": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "resolve_database_status": {
            "name": "resolve_database_status",
            "location": 235,
            "return": [
                "",
                "typing.Generator[OrderedDict]"
            ],
            "arguments": {
                "_": [
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "info": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "sources": [
                    "str",
                    "None",
                    "float",
                    "type",
                    "typing.Type",
                    "list",
                    "list[]"
                ]
            }
        },
        "resolve_asn_prefixes": {
            "name": "resolve_asn_prefixes",
            "location": 250,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "info": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "None",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Optional[bool]",
                    "int",
                    "Iterable",
                    "dict"
                ],
                "asns": [
                    "str",
                    "bool",
                    "Optional[Callable]"
                ],
                "ip_version": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list",
                    "list[]"
                ],
                "sources": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "resolve_as_set_prefixes": {
            "name": "resolve_as_set_prefixes",
            "location": 265,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "info": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]"
                ],
                "set_names": [
                    "str",
                    "list[]",
                    "list[L]",
                    "list",
                    "list[list[str]]",
                    "Optional[str]",
                    "bool",
                    "List['LabelTag']",
                    "List[List[str]]",
                    "Collection[str]"
                ],
                "sources": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.LabelSources",
                    "cmk.utils.type_defs.Labels"
                ],
                "ip_version": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "list[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "exclude_sets": [
                    "str",
                    "Optional[str]",
                    "dict[str, str]",
                    "Dict[str, str]"
                ],
                "sql_trace": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "resolve_recursive_set_members": {
            "name": "resolve_recursive_set_members",
            "location": 284,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]"
                ],
                "set_names": [
                    "str",
                    "list[]",
                    "list",
                    "Iterable"
                ],
                "depth": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "sources": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "List[List]",
                    "list[list[]]",
                    "List[str]",
                    "list[str]"
                ],
                "exclude_sets": [
                    "bytes",
                    "str",
                    "Iterable[object]",
                    "Sequence[str]",
                    "Optional[Sequence[str]]",
                    "Container[T]",
                    "int",
                    "List[str]"
                ],
                "sql_trace": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "_columns_for_graphql_selection": {
            "name": "_columns_for_graphql_selection",
            "location": 303,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "info": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "_collect_predicate_names": {
            "name": "_collect_predicate_names",
            "location": 326,
            "return": [
                "list"
            ],
            "arguments": {
                "selections": []
            }
        }
    },
    "irrd-main/irrd/server/graphql/schema_builder.py": {
        "build_executable_schema": {
            "name": "build_executable_schema",
            "location": 17,
            "return": [
                "Type[Any]",
                "IO",
                "dict"
            ],
            "arguments": {}
        },
        "build_executable_schema.parse_asn_scalar": {
            "name": "parse_asn_scalar",
            "location": 54,
            "return": [
                "int",
                "str",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "build_executable_schema.parse_ip_scalar": {
            "name": "parse_ip_scalar",
            "location": 61,
            "return": [
                "IP",
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "irrd-main/irrd/server/graphql/schema_generator.py": {
        "SchemaGenerator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._set_rpsl_query_fields": {
            "name": "_set_rpsl_query_fields",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._set_enums": {
            "name": "_set_enums",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._set_rpsl_object_interface_schema": {
            "name": "_set_rpsl_object_interface_schema",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._set_rpsl_contact_schema": {
            "name": "_set_rpsl_contact_schema",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._dict_for_common_fields": {
            "name": "_dict_for_common_fields",
            "location": 186,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "common_fields": [
                    "List[str]"
                ]
            }
        },
        "SchemaGenerator._set_rpsl_object_schemas": {
            "name": "_set_rpsl_object_schemas",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaGenerator._graphql_type_for_rpsl_field": {
            "name": "_graphql_type_for_rpsl_field",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "irrd.rpsl.fields.RPSLTextField"
                ]
            }
        },
        "SchemaGenerator._grapql_type_for_reference_field": {
            "name": "_grapql_type_for_reference_field",
            "location": 258,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "rpsl_field": [
                    "irrd.rpsl.fields.RPSLTextField"
                ]
            }
        },
        "SchemaGenerator._generate_schema_str": {
            "name": "_generate_schema_str",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "graphql_type": [
                    "str"
                ],
                "fields": [
                    "Dict[(str, str)]"
                ],
                "implements": [
                    "Optional[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/graphql/__init__.py": {},
    "irrd-main/irrd/server/graphql/tests/test_extensions.py": {
        "test_query_metedata_extension": {
            "name": "test_query_metedata_extension",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_error_formatter": {
            "name": "test_error_formatter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/server/graphql/tests/test_resolvers.py": {
        "prepare_resolver": {
            "name": "prepare_resolver",
            "location": 62,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock,Mock]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_objects": {
            "name": "test_resolve_rpsl_objects",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": []
            }
        },
        "TestGraphQLResolvers.test_strips_auth_attribute_hashes": {
            "name": "test_strips_auth_attribute_hashes",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_mnt_by_objs": {
            "name": "test_resolve_rpsl_object_mnt_by_objs",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": []
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_adminc_objs": {
            "name": "test_resolve_rpsl_object_adminc_objs",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": []
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_techc_objs": {
            "name": "test_resolve_rpsl_object_techc_objs",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": []
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_members_by_ref_objs": {
            "name": "test_resolve_rpsl_object_members_by_ref_objs",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_member_of_objs": {
            "name": "test_resolve_rpsl_object_member_of_objs",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_members_objs": {
            "name": "test_resolve_rpsl_object_members_objs",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": []
            }
        },
        "TestGraphQLResolvers.test_resolve_rpsl_object_journal": {
            "name": "test_resolve_rpsl_object_journal",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "monkeypatch": [],
                "config_override": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_database_status": {
            "name": "test_resolve_database_status",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_asn_prefixes": {
            "name": "test_resolve_asn_prefixes",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": []
            }
        },
        "TestGraphQLResolvers.test_resolve_as_set_prefixes": {
            "name": "test_resolve_as_set_prefixes",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestGraphQLResolvers.test_resolve_recursive_set_members": {
            "name": "test_resolve_recursive_set_members",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "irrd-main/irrd/server/graphql/tests/test_schema_generator.py": {
        "test_schema_generator": {
            "name": "test_schema_generator",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/server/graphql/tests/__init__.py": {},
    "irrd-main/irrd/server/http/app.py": {
        "MemoryTrimMiddleware.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "irrd-main/irrd/server/http/endpoints.py": {
        "StatusEndpoint.get": {
            "name": "get",
            "location": 23,
            "return": [
                "PlainTextResponse",
                "bool",
                "dict",
                "Dict[str, Any]",
                "int",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "WhoisQueryEndpoint.get": {
            "name": "get",
            "location": 32,
            "return": [
                "PlainTextResponse",
                "Response",
                "IO[str]",
                "Iterable[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception"
                ]
            }
        }
    },
    "irrd-main/irrd/server/http/server.py": {
        "run_http_server": {
            "name": "run_http_server",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ]
            }
        },
        "subprocess_started": {
            "name": "subprocess_started",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]"
                ],
                "target": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bytes"
                ],
                "sockets": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bytes"
                ],
                "stdin_fileno": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/http/status_generator.py": {
        "StatusGenerator.generate_status": {
            "name": "generate_status",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusGenerator._generate_header": {
            "name": "_generate_header",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusGenerator._generate_statistics_table": {
            "name": "_generate_statistics_table",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusGenerator._statistics_for_source": {
            "name": "_statistics_for_source",
            "location": 75,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]"
                ]
            }
        },
        "StatusGenerator._generate_source_detail": {
            "name": "_generate_source_detail",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "str",
                    "bool"
                ]
            }
        },
        "StatusGenerator._generate_remote_status_info": {
            "name": "_generate_remote_status_info",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "nrtm_host": [
                    "Optional[str]"
                ],
                "nrtm_port": [
                    "int"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/server/http/__init__.py": {},
    "irrd-main/irrd/server/http/tests/test_endpoints.py": {
        "TestStatusEndpoint.setup_method": {
            "name": "setup_method",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusEndpoint.test_status_no_access_list": {
            "name": "test_status_no_access_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusEndpoint.test_status_access_list_permitted": {
            "name": "test_status_access_list_permitted",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [],
                "monkeypatch": []
            }
        },
        "TestStatusEndpoint.test_status_access_list_denied": {
            "name": "test_status_access_list_denied",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": []
            }
        },
        "TestWhoisQueryEndpoint.test_query_endpoint": {
            "name": "test_query_endpoint",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestObjectSubmissionEndpoint.test_endpoint": {
            "name": "test_endpoint",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestSuspensionSubmissionEndpoint.test_endpoint": {
            "name": "test_endpoint",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        }
    },
    "irrd-main/irrd/server/http/tests/test_status_generator.py": {
        "TestStatusGenerator.test_request": {
            "name": "test_request",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "config_override": [
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestStatusGenerator.test_request.mock_whois_query": {
            "name": "mock_whois_query",
            "location": 26,
            "return": [
                "bool",
                "tuple[bool]"
            ],
            "arguments": {
                "nrtm_host": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "nrtm_port": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/http/tests/__init__.py": {},
    "irrd-main/irrd/server/tests/test_query_resolver.py": {
        "prepare_resolver": {
            "name": "prepare_resolver",
            "location": 43,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock,Mock,list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]],QueryResolver]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]"
                ],
                "config_override": []
            }
        },
        "TestQueryResolver.test_set_sources": {
            "name": "test_set_sources",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestQueryResolver.test_default_sources": {
            "name": "test_default_sources",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestQueryResolver.test_restrict_object_class": {
            "name": "test_restrict_object_class",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_key_lookup": {
            "name": "test_key_lookup",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestQueryResolver.test_key_lookup_with_sql_trace": {
            "name": "test_key_lookup_with_sql_trace",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestQueryResolver.test_limit_sources_key_lookup": {
            "name": "test_limit_sources_key_lookup",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestQueryResolver.test_text_search": {
            "name": "test_text_search",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_search_exact": {
            "name": "test_route_search_exact",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_search_less_specific_one_level": {
            "name": "test_route_search_less_specific_one_level",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_search_less_specific": {
            "name": "test_route_search_less_specific",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_search_more_specific": {
            "name": "test_route_search_more_specific",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_search_exact_rpki_aware": {
            "name": "test_route_search_exact_rpki_aware",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "TestQueryResolver.test_route_search_exact_with_scopefilter": {
            "name": "test_route_search_exact_with_scopefilter",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "TestQueryResolver.test_rpsl_attribute_search": {
            "name": "test_rpsl_attribute_search",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_routes_for_origin": {
            "name": "test_routes_for_origin",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_routes_for_as_set": {
            "name": "test_routes_for_as_set",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ],
                "monkeypatch": [
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TestQueryResolver.test_as_set_members": {
            "name": "test_as_set_members",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock",
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_route_set_members": {
            "name": "test_route_set_members",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_as_route_set_mbrs_by_ref": {
            "name": "test_as_route_set_mbrs_by_ref",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestQueryResolver.test_route_set_compatibility_ipv4_only_route_set_members": {
            "name": "test_route_set_compatibility_ipv4_only_route_set_members",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": []
            }
        },
        "TestQueryResolver.test_members_for_set_per_source": {
            "name": "test_members_for_set_per_source",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "unittesmock.Mock",
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestQueryResolver.test_database_status": {
            "name": "test_database_status",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "prepare_resolver": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestQueryResolver.test_object_template": {
            "name": "test_object_template",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_resolver": [
                    "scraper.storage.Storage"
                ]
            }
        }
    },
    "irrd-main/irrd/server/tests/__init__.py": {},
    "irrd-main/irrd/server/whois/query_parser.py": {
        "WhoisQueryParser.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_ip": [
                    "str"
                ],
                "client_str": [
                    "str"
                ],
                "preloader": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "set",
                    "set[]"
                ],
                "database_handler": [
                    "list[list[int]]",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "int",
                    "List[List[int]]",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "WhoisQueryParser.handle_query": {
            "name": "handle_query",
            "location": 51,
            "return": [
                "irrd.server.whois.query_response.WhoisQueryResponse"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_command": {
            "name": "handle_irrd_command",
            "location": 100,
            "return": [
                "irrd.server.whois.query_response.WhoisQueryResponse"
            ],
            "arguments": {
                "self": [],
                "full_command": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_timeout_update": {
            "name": "handle_irrd_timeout_update",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_routes_for_origin_v4": {
            "name": "handle_irrd_routes_for_origin_v4",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_routes_for_origin_v6": {
            "name": "handle_irrd_routes_for_origin_v6",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser._routes_for_origin": {
            "name": "_routes_for_origin",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ],
                "ip_version": [
                    "Optional[int]"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_routes_for_as_set": {
            "name": "handle_irrd_routes_for_as_set",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_set_members": {
            "name": "handle_irrd_set_members",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_database_serial_range": {
            "name": "handle_irrd_database_serial_range",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_database_status": {
            "name": "handle_irrd_database_status",
            "location": 271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_exact_key": {
            "name": "handle_irrd_exact_key",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_route_search": {
            "name": "handle_irrd_route_search",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_sources_list": {
            "name": "handle_irrd_sources_list",
            "location": 329,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_irrd_version": {
            "name": "handle_irrd_version",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisQueryParser.handle_ripe_command": {
            "name": "handle_ripe_command",
            "location": 346,
            "return": [
                "irrd.server.whois.query_response.WhoisQueryResponse"
            ],
            "arguments": {
                "self": [],
                "full_query": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_ripe_route_search": {
            "name": "handle_ripe_route_search",
            "location": 406,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "parameter": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_ripe_sources_list": {
            "name": "handle_ripe_sources_list",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources_list": [
                    "Optional[str]"
                ]
            }
        },
        "WhoisQueryParser.handle_ripe_restrict_object_class": {
            "name": "handle_ripe_restrict_object_class",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_classes": [
                    "type",
                    "bool"
                ]
            }
        },
        "WhoisQueryParser.handle_ripe_request_object_template": {
            "name": "handle_ripe_request_object_template",
            "location": 441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_class": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "type",
                    "typing.Type",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "WhoisQueryParser.handle_ripe_key_fields_only": {
            "name": "handle_ripe_key_fields_only",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisQueryParser.handle_ripe_text_search": {
            "name": "handle_ripe_text_search",
            "location": 449,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_user_agent": {
            "name": "handle_user_agent",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_agent": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser.handle_nrtm_request": {
            "name": "handle_nrtm_request",
            "location": 458,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "WhoisQueryParser.handle_inverse_attr_search": {
            "name": "handle_inverse_attr_search",
            "location": 493,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "WhoisQueryParser._flatten_query_output": {
            "name": "_flatten_query_output",
            "location": 502,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_response": [
                    "bytes",
                    "str",
                    "dict[str, raiden.utils.Any]",
                    "Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]",
                    "Sequence",
                    "Optional[Dict[str, Any]]",
                    "Type[object]"
                ]
            }
        },
        "WhoisQueryParser._filter_key_fields": {
            "name": "_filter_key_fields",
            "location": 525,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query_response": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "irrd-main/irrd/server/whois/query_response.py": {
        "WhoisQueryResponse.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "WhoisQueryResponseType"
                ],
                "mode": [
                    "WhoisQueryResponseMode"
                ],
                "result": [
                    "Optional[str]"
                ],
                "remove_auth_hashes": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterator[str]"
                ]
            }
        },
        "WhoisQueryResponse.generate_response": {
            "name": "generate_response",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisQueryResponse.clean_response": {
            "name": "clean_response",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisQueryResponse._generate_response_irrd": {
            "name": "_generate_response_irrd",
            "location": 71,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisQueryResponse._generate_response_ripe": {
            "name": "_generate_response_ripe",
            "location": 86,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/server/whois/server.py": {
        "start_whois_server": {
            "name": "start_whois_server",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "uid": [
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "list[str]",
                    "typing.Type",
                    "Literal[False]",
                    "Literal[True]",
                    "List[str]",
                    "Type[T]"
                ],
                "gid": [
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "list[str]",
                    "typing.Type",
                    "Literal[False]",
                    "Literal[True]",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "start_whois_server.sigterm_handler": {
            "name": "sigterm_handler",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WhoisTCPServer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "bytes",
                    "str",
                    "int"
                ],
                "uid": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "gid": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "bind_and_activate": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "WhoisTCPServer.process_request": {
            "name": "process_request",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "Iterator",
                    "list[]",
                    "typing.Iterator"
                ],
                "client_address": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "Iterator",
                    "list[]",
                    "typing.Iterator"
                ]
            }
        },
        "WhoisTCPServer.handle_error": {
            "name": "handle_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "bytes"
                ],
                "client_address": [
                    "int",
                    "boyleworkflow.storage.Storage",
                    "solo.server.requesRequest"
                ]
            }
        },
        "WhoisTCPServer.shutdown": {
            "name": "shutdown",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisWorker.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_queue": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "WhoisWorker.run": {
            "name": "run",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep_running": [
                    "bool",
                    "str",
                    "Optional[threading.Lock]"
                ]
            }
        },
        "WhoisWorker.close_request": {
            "name": "close_request",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisWorker.handle_connection": {
            "name": "handle_connection",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhoisWorker.handle_query": {
            "name": "handle_query",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "WhoisWorker.is_client_permitted": {
            "name": "is_client_permitted",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "str"
                ]
            }
        },
        "start_whois_server.sigterm_handler.shutdown": {
            "name": "shutdown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "IO"
                ]
            }
        }
    },
    "irrd-main/irrd/server/whois/__init__.py": {},
    "irrd-main/irrd/server/whois/tests/test_query_parser.py": {
        "prepare_parser": {
            "name": "prepare_parser",
            "location": 91,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock,WhoisQueryParser]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Dict[str, Any]]",
                    "List[dict]",
                    "int"
                ],
                "config_override": [
                    "bool"
                ]
            }
        },
        "TestWhoisQueryParserRIPE.test_invalid_flag": {
            "name": "test_invalid_flag",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_null_bytes": {
            "name": "test_null_bytes",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_keepalive": {
            "name": "test_keepalive",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_route_search_exact": {
            "name": "test_route_search_exact",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_route_search_less_specific_one_level": {
            "name": "test_route_search_less_specific_one_level",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_route_search_less_specific": {
            "name": "test_route_search_less_specific",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_route_search_more_specific": {
            "name": "test_route_search_more_specific",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_route_search_invalid_parameter": {
            "name": "test_route_search_invalid_parameter",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_inverse_attribute_search": {
            "name": "test_inverse_attribute_search",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_sources_list": {
            "name": "test_sources_list",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [
                    "Tuple[Callable, Callable]",
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]"
                ]
            }
        },
        "TestWhoisQueryParserRIPE.test_sources_all": {
            "name": "test_sources_all",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]",
                    "Tuple[Callable, Callable]",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestWhoisQueryParserRIPE.test_restrict_object_class": {
            "name": "test_restrict_object_class",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_object_template": {
            "name": "test_object_template",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_key_fields_only": {
            "name": "test_key_fields_only",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_user_agent": {
            "name": "test_user_agent",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_nrtm_request": {
            "name": "test_nrtm_request",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [
                    "unittesmock.Mock"
                ],
                "monkeypatch": [
                    "str",
                    "List[str]"
                ],
                "config_override": [
                    "bool",
                    "Exception",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestWhoisQueryParserRIPE.test_text_search": {
            "name": "test_text_search",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_missing_argument": {
            "name": "test_missing_argument",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserRIPE.test_exception_handling": {
            "name": "test_exception_handling",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [],
                "caplog": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "TestWhoisQueryParserIRRD.test_invalid_command": {
            "name": "test_invalid_command",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_parameter_required": {
            "name": "test_parameter_required",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_multiple_command_mode": {
            "name": "test_multiple_command_mode",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_update_timeout": {
            "name": "test_update_timeout",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_routes_for_origin": {
            "name": "test_routes_for_origin",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_routes_for_origin_invalid": {
            "name": "test_routes_for_origin_invalid",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_handle_irrd_routes_for_as_set": {
            "name": "test_handle_irrd_routes_for_as_set",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [],
                "monkeypatch": [
                    "int",
                    "str"
                ]
            }
        },
        "TestWhoisQueryParserIRRD.test_set_members": {
            "name": "test_set_members",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_database_serial_range": {
            "name": "test_database_serial_range",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_database_status": {
            "name": "test_database_status",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "prepare_parser": [],
                "config_override": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestWhoisQueryParserIRRD.test_exact_key": {
            "name": "test_exact_key",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_user_agent": {
            "name": "test_user_agent",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_objects_maintained_by": {
            "name": "test_objects_maintained_by",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_exact": {
            "name": "test_route_search_exact",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_exact_rpki_aware": {
            "name": "test_route_search_exact_rpki_aware",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_less_specific_one_level": {
            "name": "test_route_search_less_specific_one_level",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_less_specific": {
            "name": "test_route_search_less_specific",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_more_specific": {
            "name": "test_route_search_more_specific",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_route_search_invalid": {
            "name": "test_route_search_invalid",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_sources_list": {
            "name": "test_sources_list",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [],
                "config_override": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "TestWhoisQueryParserIRRD.test_irrd_version": {
            "name": "test_irrd_version",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_disable_filters": {
            "name": "test_disable_filters",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": []
            }
        },
        "TestWhoisQueryParserIRRD.test_exception_handling": {
            "name": "test_exception_handling",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_parser": [],
                "caplog": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        }
    },
    "irrd-main/irrd/server/whois/tests/test_query_response.py": {
        "TestWhoisQueryResponse.test_response": {
            "name": "test_response",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhoisQueryResponse.test_auth_hash_removal": {
            "name": "test_auth_hash_removal",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/server/whois/tests/test_server.py": {
        "create_worker": {
            "name": "create_worker",
            "location": 40,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[WhoisWorker,MockSocket]]]"
            ],
            "arguments": {
                "config_override": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MockSocket.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSocket.makefile": {
            "name": "makefile",
            "location": 23,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "bool"
                ],
                "bufsize": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MockSocket.sendall": {
            "name": "sendall",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MockSocket.shutdown": {
            "name": "shutdown",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "memoryview",
                    "Iterable[Tuple[int, int]]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "MockSocket.close": {
            "name": "close",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSocket.settimeout": {
            "name": "settimeout",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "Iterable[T]",
                    "int",
                    "typing.Iterable[T]",
                    "Sized",
                    "typing.Sized"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_no_access_list": {
            "name": "test_whois_request_worker_no_access_list",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create_worker": [
                    "str",
                    "None",
                    "Literal",
                    "Optional[str]"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_exception": {
            "name": "test_whois_request_worker_exception",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create_worker": [
                    "str",
                    "None",
                    "Literal",
                    "Optional[str]"
                ],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_preload_failed": {
            "name": "test_whois_request_worker_preload_failed",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create_worker": [
                    "str"
                ],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_timeout": {
            "name": "test_whois_request_worker_timeout",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create_worker": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_write_error": {
            "name": "test_whois_request_worker_write_error",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create_worker": [
                    "bytes",
                    "str"
                ],
                "caplog": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_access_list_permitted": {
            "name": "test_whois_request_worker_access_list_permitted",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "create_worker": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_access_list_denied": {
            "name": "test_whois_request_worker_access_list_denied",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config_override": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "create_worker": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestWhoisWorker.test_whois_request_worker_timeout.mock_readline": {
            "name": "mock_readline",
            "location": 109,
            "return": [
                "bytes",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/server/whois/tests/__init__.py": {},
    "irrd-main/irrd/storage/database_handler.py": {
        "is_serial_synchronised": {
            "name": "is_serial_synchronised",
            "location": 849,
            "return": [
                "bool"
            ],
            "arguments": {
                "database_handler": [
                    "DatabaseHandler"
                ],
                "source": [
                    "str"
                ],
                "settings_only": [
                    "bool",
                    "str"
                ]
            }
        },
        "DatabaseHandler.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "readonly": [
                    "bool",
                    "int",
                    "str",
                    "Union[str, List[Any]]",
                    "List[int]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "DatabaseHandler.refresh_connection": {
            "name": "refresh_connection",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler._start_transaction": {
            "name": "_start_transaction",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.disable_journaling": {
            "name": "disable_journaling",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.enable_journaling": {
            "name": "enable_journaling",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.commit": {
            "name": "commit",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.rollback": {
            "name": "rollback",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_transaction": [
                    "bool",
                    "list",
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "DatabaseHandler.execute_query": {
            "name": "execute_query",
            "location": 133,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "flush_rpsl_buffer": [
                    "bool",
                    "Optional[bytes]"
                ],
                "refresh_on_error": [
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "DatabaseHandler.execute_statement": {
            "name": "execute_statement",
            "location": 167,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str",
                    "bool",
                    "typing.Callable[str, bool]",
                    "Callable[[str], bool]",
                    "Callable"
                ]
            }
        },
        "DatabaseHandler.upsert_rpsl_object": {
            "name": "upsert_rpsl_object",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_object": [
                    "irrd.rpsl.parser.RPSLObject"
                ],
                "origin": [
                    "str",
                    "List[bytes]",
                    "list[bytes]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ],
                "rpsl_guaranteed_no_existing": [
                    "bool",
                    "str"
                ],
                "source_serial": [
                    "Optional[int]"
                ],
                "forced_created_value": [
                    "Optional[str]"
                ]
            }
        },
        "DatabaseHandler.insert_roa_object": {
            "name": "insert_roa_object",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_version": [
                    "int"
                ],
                "prefix_str": [
                    "str"
                ],
                "asn": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "trust_anchor": [
                    "str"
                ]
            }
        },
        "DatabaseHandler.update_rpki_status": {
            "name": "update_rpki_status",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_objs_now_valid": [
                    "List[Dict[(str, str)]]"
                ],
                "rpsl_objs_now_invalid": [
                    "List[Dict[(str, str)]]"
                ],
                "rpsl_objs_now_not_found": [
                    "List[Dict[(str, str)]]"
                ]
            }
        },
        "DatabaseHandler.update_scopefilter_status": {
            "name": "update_scopefilter_status",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_objs_now_in_scope": [
                    "List[Dict[(str, str)]]"
                ],
                "rpsl_objs_now_out_scope_as": [
                    "List[Dict[(str, str)]]"
                ],
                "rpsl_objs_now_out_scope_prefix": [
                    "List[Dict[(str, str)]]"
                ]
            }
        },
        "DatabaseHandler.delete_rpsl_object": {
            "name": "delete_rpsl_object",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "bool",
                    "None",
                    "sqlalchemy.Table",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "Callable"
                ],
                "rpsl_object": [
                    "Optional[irrd.rpsl.parser.RPSLObject]"
                ],
                "source": [
                    "Optional[str]"
                ],
                "rpsl_pk": [
                    "Optional[str]"
                ],
                "object_class": [
                    "Optional[str]"
                ],
                "source_serial": [
                    "Optional[int]"
                ]
            }
        },
        "DatabaseHandler.suspend_rpsl_object": {
            "name": "suspend_rpsl_object",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk_uuid": [
                    "str"
                ]
            }
        },
        "DatabaseHandler.delete_suspended_rpsl_objects": {
            "name": "delete_suspended_rpsl_objects",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk_uuids": [
                    "Set[str]"
                ]
            }
        },
        "DatabaseHandler._flush_rpsl_object_writing_buffer": {
            "name": "_flush_rpsl_object_writing_buffer",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler._flush_roa_writing_buffer": {
            "name": "_flush_roa_writing_buffer",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.delete_all_rpsl_objects_with_journal": {
            "name": "delete_all_rpsl_objects_with_journal",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "journal_guaranteed_empty": [
                    "bool",
                    "str"
                ]
            }
        },
        "DatabaseHandler.delete_all_roa_objects": {
            "name": "delete_all_roa_objects",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.set_force_reload": {
            "name": "set_force_reload",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "DatabaseHandler.record_serial_newest_mirror": {
            "name": "record_serial_newest_mirror",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseHandler.record_serial_seen": {
            "name": "record_serial_seen",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseHandler.record_mirror_error": {
            "name": "record_mirror_error",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "error": [
                    "str"
                ]
            }
        },
        "DatabaseHandler.record_serial_exported": {
            "name": "record_serial_exported",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseHandler.close": {
            "name": "close",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler._check_write_permitted": {
            "name": "_check_write_permitted",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler._check_single_row_match": {
            "name": "_check_single_row_match",
            "location": 634,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_results": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "int"
                ],
                "user_identifier": [
                    "str"
                ]
            }
        },
        "DatabaseStatusTracker.__init__": {
            "name": "__init__",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "DatabaseHandler"
                ],
                "journaling_enabled": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "DatabaseStatusTracker.record_serial_newest_mirror": {
            "name": "record_serial_newest_mirror",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseStatusTracker.record_serial_seen": {
            "name": "record_serial_seen",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseStatusTracker.record_mirror_error": {
            "name": "record_mirror_error",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "error": [
                    "str"
                ]
            }
        },
        "DatabaseStatusTracker.record_serial_exported": {
            "name": "record_serial_exported",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "serial": [
                    "int"
                ]
            }
        },
        "DatabaseStatusTracker.record_operation": {
            "name": "record_operation",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rpsl_pk": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "object_class": [
                    "str"
                ],
                "object_text": [
                    "str"
                ],
                "origin": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "source_serial": [
                    "Optional[int]"
                ]
            }
        },
        "DatabaseStatusTracker.finalise_transaction": {
            "name": "finalise_transaction",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStatusTracker._is_serial_synchronised": {
            "name": "_is_serial_synchronised",
            "location": 836,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DatabaseStatusTracker.reset": {
            "name": "reset",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseHandler.execute_query.execute_query": {
            "name": "execute_query",
            "location": 144,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/models.py": {
        "RPSLDatabaseObject.__table_args__": {
            "name": "__table_args__",
            "location": 76,
            "return": [
                "tuple[]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[]",
                    "T",
                    "typing.Type",
                    "Iterable",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "RPSLDatabaseObject.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseJournal.__table_args__": {
            "name": "__table_args__",
            "location": 118,
            "return": [
                "tuple[]",
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[]",
                    "T",
                    "typing.Type",
                    "Iterable",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "RPSLDatabaseJournal.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseObjectSuspended.__repr__": {
            "name": "__repr__",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseStatus.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [
                "sa.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROADatabaseObject.__table_args__": {
            "name": "__table_args__",
            "location": 202,
            "return": [
                "tuple[]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[]",
                    "T",
                    "typing.Type",
                    "Iterable",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "ROADatabaseObject.__repr__": {
            "name": "__repr__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/storage/preload.py": {
        "PersistentPubSubWorkerThread.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PersistentPubSubWorkerThread.run": {
            "name": "run",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preloader.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "enable_queries": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Preloader.signal_reload": {
            "name": "signal_reload",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_classes_changed": [
                    "str",
                    "Type",
                    "Optional[\"Scope\"]",
                    "Callable"
                ]
            }
        },
        "Preloader.routes_for_origins": {
            "name": "routes_for_origins",
            "location": 113,
            "return": [
                "set[]",
                "Set[str]",
                "dict[, ]",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "origins": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']"
                ],
                "sources": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']"
                ],
                "ip_version": [
                    "str",
                    "float",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Preloader._load_routes_into_memory": {
            "name": "_load_routes_into_memory",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_message": [
                    "bool",
                    "None",
                    "str",
                    "list",
                    "IO[str]",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "PreloadStoreManager.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreloadStoreManager.main": {
            "name": "main",
            "location": 187,
            "return": [
                "None",
                "bytes",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreloadStoreManager._clear_existing_data": {
            "name": "_clear_existing_data",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreloadStoreManager.perform_reload": {
            "name": "perform_reload",
            "location": 235,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreloadStoreManager.update_route_store": {
            "name": "update_route_store",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_origin_route4_store": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "int"
                ],
                "new_origin_route6_store": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "PreloadStoreManager._remove_dead_threads": {
            "name": "_remove_dead_threads",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreloadUpdater.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "preloader": [
                    "int",
                    "float",
                    "bool"
                ],
                "reload_lock": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PreloadUpdater.run": {
            "name": "run",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_database_handler": []
            }
        },
        "PreloadUpdater.update": {
            "name": "update",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_database_handler": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Preloader._load_routes_into_memory._load": {
            "name": "_load",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "redis_key": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "target": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/storage/queries.py": {
        "BaseRPSLObjectDatabaseQuery.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ordered_by_sources": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "enable_ordering": [
                    "bool",
                    "int",
                    "raiden.utils.signer.Signer",
                    "List[float]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.pk": {
            "name": "pk",
            "location": 32,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "pk": [
                    "str"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.pks": {
            "name": "pks",
            "location": 36,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "pks": [
                    "List[str]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.rpsl_pk": {
            "name": "rpsl_pk",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "rpsl_pk": [
                    "str"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.rpsl_pks": {
            "name": "rpsl_pks",
            "location": 44,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "rpsl_pks": [
                    "List[str]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.sources": {
            "name": "sources",
            "location": 49,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "sources": [
                    "List[str]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.object_classes": {
            "name": "object_classes",
            "location": 61,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "object_classes": [
                    "List[str]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.first_only": {
            "name": "first_only",
            "location": 72,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.limit": {
            "name": "limit",
            "location": 76,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "record_limit": [
                    "int"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery.finalise_statement": {
            "name": "finalise_statement",
            "location": 81,
            "return": [
                "sa.sql.selectable.Select"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPSLObjectDatabaseQuery._filter": {
            "name": "_filter",
            "location": 111,
            "return": [
                "BaseRPSLObjectDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TBaseRPSLObjectDatabaseQuery"
                ],
                "fltr": [
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "Callable[[None], None]",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "BaseRPSLObjectDatabaseQuery._check_query_frozen": {
            "name": "_check_query_frozen",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseQuery.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_names": [
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "dict",
                    "str",
                    "bool",
                    "dict[, ]",
                    "Iterable[Tuple[str, Any]]",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "RPSLDatabaseQuery.lookup_attr": {
            "name": "lookup_attr",
            "location": 160,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "attr_name": [
                    "str"
                ],
                "attr_value": [
                    "str"
                ]
            }
        },
        "RPSLDatabaseQuery.lookup_attrs_in": {
            "name": "lookup_attrs_in",
            "location": 168,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "attr_names": [
                    "List[str]"
                ],
                "attr_values": [
                    "List[str]"
                ]
            }
        },
        "RPSLDatabaseQuery.ip_exact": {
            "name": "ip_exact",
            "location": 194,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "ip": [
                    "IPy.IP",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "RPSLDatabaseQuery.ip_less_specific": {
            "name": "ip_less_specific",
            "location": 208,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "ip": []
            }
        },
        "RPSLDatabaseQuery.ip_less_specific_one_level": {
            "name": "ip_less_specific_one_level",
            "location": 221,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "ip": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "RPSLDatabaseQuery.ip_more_specific": {
            "name": "ip_more_specific",
            "location": 249,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "ip": []
            }
        },
        "RPSLDatabaseQuery.ip_any": {
            "name": "ip_any",
            "location": 269,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "ip": [
                    "int"
                ]
            }
        },
        "RPSLDatabaseQuery.asn": {
            "name": "asn",
            "location": 300,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "asn": [
                    "int"
                ]
            }
        },
        "RPSLDatabaseQuery.asns_first": {
            "name": "asns_first",
            "location": 307,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "asns": [
                    "List[int]"
                ]
            }
        },
        "RPSLDatabaseQuery.asn_less_specific": {
            "name": "asn_less_specific",
            "location": 315,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "asn": [
                    "int"
                ]
            }
        },
        "RPSLDatabaseQuery.rpki_status": {
            "name": "rpki_status",
            "location": 325,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "status": [
                    "List[irrd.rpki.status.RPKIStatus]"
                ]
            }
        },
        "RPSLDatabaseQuery.scopefilter_status": {
            "name": "scopefilter_status",
            "location": 332,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseQuery"
                ],
                "status": [
                    "List[irrd.scopefilter.status.ScopeFilterStatus]"
                ]
            }
        },
        "RPSLDatabaseQuery.text_search": {
            "name": "text_search",
            "location": 339,
            "return": [
                "RPSLDatabaseQuery"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "extract_asn_ip": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "RPSLDatabaseQuery._prefix_query_permitted": {
            "name": "_prefix_query_permitted",
            "location": 385,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseQuery.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseJournalQuery.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseJournalQuery.serial_range": {
            "name": "serial_range",
            "location": 417,
            "return": [
                "RPSLDatabaseJournalQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseJournalQuery"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ]
            }
        },
        "RPSLDatabaseJournalQuery.__repr__": {
            "name": "__repr__",
            "location": 427,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseSuspendedQuery.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseSuspendedQuery.mntner": {
            "name": "mntner",
            "location": 443,
            "return": [
                "RPSLDatabaseSuspendedQuery"
            ],
            "arguments": {
                "self": [
                    "_TRPSLDatabaseSuspendedQuery"
                ],
                "mntner_rpsl_pk": [
                    "str"
                ]
            }
        },
        "RPSLDatabaseSuspendedQuery.__repr__": {
            "name": "__repr__",
            "location": 450,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStatusQuery.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStatusQuery.source": {
            "name": "source",
            "location": 477,
            "return": [
                "DatabaseStatusQuery"
            ],
            "arguments": {
                "self": [
                    "_TDatabaseStatusQuery"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "DatabaseStatusQuery.sources": {
            "name": "sources",
            "location": 481,
            "return": [
                "DatabaseStatusQuery"
            ],
            "arguments": {
                "self": [
                    "_TDatabaseStatusQuery"
                ],
                "sources": [
                    "List[str]"
                ]
            }
        },
        "DatabaseStatusQuery.finalise_statement": {
            "name": "finalise_statement",
            "location": 486,
            "return": [
                "List[str]",
                "str",
                "list[]",
                "Optional[str]",
                "dict[str, list[int]]",
                "list[str]",
                "int",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseStatusQuery._filter": {
            "name": "_filter",
            "location": 503,
            "return": [
                "DatabaseStatusQuery"
            ],
            "arguments": {
                "self": [
                    "_TDatabaseStatusQuery"
                ],
                "fltr": [
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "Callable[[None], None]",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "DatabaseStatusQuery.__repr__": {
            "name": "__repr__",
            "location": 507,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseObjectStatisticsQuery.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseObjectStatisticsQuery.finalise_statement": {
            "name": "finalise_statement",
            "location": 526,
            "return": [
                "List[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPSLDatabaseObjectStatisticsQuery.__repr__": {
            "name": "__repr__",
            "location": 529,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROADatabaseObjectQuery.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROADatabaseObjectQuery.ip_less_specific_or_exact": {
            "name": "ip_less_specific_or_exact",
            "location": 551,
            "return": [
                "ROADatabaseObjectQuery"
            ],
            "arguments": {
                "self": [
                    "_TROADatabaseObjectQuery"
                ],
                "ip": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "zam_repondeur.models.Lecture",
                    "bool"
                ]
            }
        },
        "ROADatabaseObjectQuery.finalise_statement": {
            "name": "finalise_statement",
            "location": 559,
            "return": [
                "List[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ROADatabaseObjectQuery.__repr__": {
            "name": "__repr__",
            "location": 562,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/storage/__init__.py": {
        "get_engine": {
            "name": "get_engine",
            "location": 12,
            "return": [
                "sa.engine.base.Engine"
            ],
            "arguments": {}
        },
        "translate_url": {
            "name": "translate_url",
            "location": 41,
            "return": [
                "sa.engine.url.URL"
            ],
            "arguments": {
                "url_str": [
                    "str"
                ]
            }
        },
        "get_engine.connect": {
            "name": "connect",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dbapi_connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "connection_record": [
                    "str",
                    "dict"
                ]
            }
        },
        "get_engine.checkout": {
            "name": "checkout",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dbapi_connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "connection_record": [
                    "Callable",
                    "bool"
                ],
                "connection_proxy": [
                    "Optional[BaseException]",
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/storage/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/__init__.py": {},
    "irrd-main/irrd/storage/alembic/versions/0548f1aa4f10_add_rpsl_objects_suspended.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/1743f98a456d_add_serial_newest_mirror.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/181670a62643_add_journal_entry_origin.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/28dc1cd85bdc_initial_db.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/39e4f15ed80c_add_bogon_status.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/4a514ead8fc2_bogon_to_scope_filter.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/64a3d6faf6d4_add_prefix_length_rpki_status_to_rpsl_objects.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/8744b4b906bb_fix_rpsl_unique_key.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/893d0d5363b3_add_rpsl_prefix_idx.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/a7766c144d61_add_synchronised_serial_to_database_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/a8609af97aa3_set_prefix_length_in_existing_rpsl_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/b175c262448f_set_rpsl_prefix.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/e07863eac52f_add_roa_object_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/f4c837d8258c_add_rpsl_prefix.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/storage/alembic/versions/__init__.py": {},
    "irrd-main/irrd/storage/tests/test_database.py": {
        "irrd_database": {
            "name": "irrd_database",
            "location": 33,
            "return": [
                "",
                "typing.Generator[None]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[Dict]]",
                    "List[List[int]]",
                    "Optional[str]"
                ]
            }
        },
        "database_handler_with_route": {
            "name": "database_handler_with_route",
            "location": 57,
            "return": [
                "",
                "typing.Generator[DatabaseHandler]"
            ],
            "arguments": {}
        },
        "TestDatabaseHandlerLive.test_readonly": {
            "name": "test_readonly",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "irrd_database": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "config_override": [
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "TestDatabaseHandlerLive.test_duplicate_key_different_class": {
            "name": "test_duplicate_key_different_class",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "irrd_database": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestDatabaseHandlerLive.test_object_writing_and_status_checking": {
            "name": "test_object_writing_and_status_checking",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "irrd_database": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ],
                "config_override": []
            }
        },
        "TestDatabaseHandlerLive.test_disable_journaling": {
            "name": "test_disable_journaling",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "irrd_database": [
                    "str",
                    "typing.Mapping",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestDatabaseHandlerLive.test_roa_handling_and_query": {
            "name": "test_roa_handling_and_query",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": []
            }
        },
        "TestDatabaseHandlerLive.test_rpki_status_storage": {
            "name": "test_rpki_status_storage",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, float]"
                ],
                "irrd_database": [],
                "database_handler_with_route": [
                    "Dict[str, float]"
                ]
            }
        },
        "TestDatabaseHandlerLive.test_scopefilter_status_storage": {
            "name": "test_scopefilter_status_storage",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, float]"
                ],
                "irrd_database": [],
                "database_handler_with_route": [
                    "Dict[str, float]"
                ]
            }
        },
        "TestDatabaseHandlerLive._clean_result": {
            "name": "_clean_result",
            "location": 581,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[str]",
                    "bool",
                    "dict[str, int]",
                    "List[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "TestDatabaseHandlerLive.test_suspension": {
            "name": "test_suspension",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "irrd_database": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "database_handler_with_route": [],
                "config_override": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_matching_filters": {
            "name": "test_matching_filters",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "str"
                ],
                "database_handler_with_route": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_chained_filters": {
            "name": "test_chained_filters",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "str"
                ],
                "database_handler_with_route": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_non_matching_filters": {
            "name": "test_non_matching_filters",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "str"
                ],
                "database_handler_with_route": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_ordering_sources": {
            "name": "test_ordering_sources",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "tests.async_mock.Mock"
                ],
                "database_handler_with_route": [
                    "str",
                    "int",
                    "typing.Type",
                    "tests.async_mock.Mock",
                    "Type"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_text_search_person_role": {
            "name": "test_text_search_person_role",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "str",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_more_less_specific_filters": {
            "name": "test_more_less_specific_filters",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "irrd_database": [
                    "str"
                ],
                "database_handler_with_route": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive.test_modify_frozen_filter": {
            "name": "test_modify_frozen_filter",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLDatabaseQueryLive.test_invalid_lookup_attribute": {
            "name": "test_invalid_lookup_attribute",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPSLDatabaseQueryLive._assert_match": {
            "name": "_assert_match",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestRPSLDatabaseQueryLive._assert_no_match": {
            "name": "_assert_no_match",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None",
                    "zerver.models.Realm",
                    "Optional[\"PNSqlCursor\"]"
                ]
            }
        }
    },
    "irrd-main/irrd/storage/tests/test_preload.py": {
        "mock_preload_updater": {
            "name": "mock_preload_updater",
            "location": 23,
            "return": [
                "",
                "typing.Generator[Mock]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "config_override": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "mock_redis_keys": {
            "name": "mock_redis_keys",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]",
                    "str"
                ],
                "config_override": [
                    "bool",
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "TestPreloading.test_load_reload_thread_management": {
            "name": "test_load_reload_thread_management",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_preload_updater": [
                    "unittesmock.Mock"
                ],
                "mock_redis_keys": [
                    "str"
                ]
            }
        },
        "TestPreloading.test_routes_for_origins": {
            "name": "test_routes_for_origins",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis_keys": [
                    "list[T]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "List[T]",
                    "mock.MagicMock",
                    "Generator[None, Any, None]"
                ]
            }
        },
        "TestPreloadUpdater.test_preload_updater": {
            "name": "test_preload_updater",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestPreloadUpdater.test_preload_updater_failure": {
            "name": "test_preload_updater_failure",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "irrd-main/irrd/storage/tests/__init__.py": {},
    "irrd-main/irrd/updates/email.py": {
        "handle_email_submission": {
            "name": "handle_email_submission",
            "location": 12,
            "return": [
                "Optional[irrd.updates.handler.ChangeSubmissionHandler]"
            ],
            "arguments": {
                "email_txt": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/handler.py": {
        "ChangeSubmissionHandler.load_text_blob": {
            "name": "load_text_blob",
            "location": 29,
            "return": [
                "ChangeSubmissionHandler"
            ],
            "arguments": {
                "self": [
                    "_TChangeSubmissionHandler"
                ],
                "object_texts_blob": [
                    "str"
                ],
                "pgp_fingerprint": [
                    "str"
                ],
                "request_meta": [
                    "Dict[(str, Optional[str])]"
                ]
            }
        },
        "ChangeSubmissionHandler.load_change_submission": {
            "name": "load_change_submission",
            "location": 44,
            "return": [
                "ChangeSubmissionHandler"
            ],
            "arguments": {
                "self": [
                    "_TChangeSubmissionHandler"
                ],
                "data": [
                    "irrd.utils.validators.RPSLChangeSubmission"
                ],
                "delete": [
                    "bool",
                    "list",
                    "Mapping",
                    "bytes",
                    "dict"
                ],
                "request_meta": [
                    "Dict[(str, Optional[str])]"
                ]
            }
        },
        "ChangeSubmissionHandler.load_suspension_submission": {
            "name": "load_suspension_submission",
            "location": 83,
            "return": [
                "ChangeSubmissionHandler"
            ],
            "arguments": {
                "self": [
                    "_TChangeSubmissionHandler"
                ],
                "data": [
                    "irrd.utils.validators.RPSLSuspensionSubmission"
                ],
                "request_meta": [
                    "Dict[(str, Optional[str])]"
                ]
            }
        },
        "ChangeSubmissionHandler._handle_change_requests": {
            "name": "_handle_change_requests",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_requests": [
                    "List[Union[(irrd.updates.parser.ChangeRequest, irrd.updates.parser.SuspensionRequest)]]"
                ],
                "reference_validator": [
                    "irrd.updates.validators.ReferenceValidator"
                ],
                "auth_validator": [
                    "irrd.updates.validators.AuthValidator"
                ]
            }
        },
        "ChangeSubmissionHandler._resolve_pgp_key_id": {
            "name": "_resolve_pgp_key_id",
            "location": 160,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pgp_fingerprint": [
                    "str"
                ]
            }
        },
        "ChangeSubmissionHandler.status": {
            "name": "status",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeSubmissionHandler.submitter_report_human": {
            "name": "submitter_report_human",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeSubmissionHandler.submitter_report_json": {
            "name": "submitter_report_json",
            "location": 220,
            "return": [
                "Dict[(str, Union[(Dict[(str, Optional[Union[(int, str)]])], List[Dict[(str, Optional[Union[(bool, str, List[str])]])]])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeSubmissionHandler.send_notification_target_reports": {
            "name": "send_notification_target_reports",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeSubmissionHandler._request_meta_str": {
            "name": "_request_meta_str",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/updates/parser.py": {
        "parse_change_requests": {
            "name": "parse_change_requests",
            "location": 496,
            "return": [
                "List[Union[(ChangeRequest, SuspensionRequest)]]"
            ],
            "arguments": {
                "requests_text": [
                    "str"
                ],
                "database_handler": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "dict"
                ],
                "auth_validator": [
                    "irrd.updates.validators.AuthValidator"
                ],
                "reference_validator": [
                    "irrd.updates.validators.ReferenceValidator"
                ]
            }
        },
        "ChangeRequest.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_text_submitted": [
                    "str"
                ],
                "database_handler": [
                    "int",
                    "float",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "list[str]",
                    "bool",
                    "None",
                    "typing.Callable[[], int]",
                    "Optional[List[str]]",
                    "Callable[[], int]"
                ],
                "auth_validator": [
                    "irrd.updates.validators.AuthValidator"
                ],
                "reference_validator": [
                    "irrd.updates.validators.ReferenceValidator"
                ],
                "delete_reason": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ChangeRequest._retrieve_existing_version": {
            "name": "_retrieve_existing_version",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.save": {
            "name": "save",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.is_valid": {
            "name": "is_valid",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.submitter_report_human": {
            "name": "submitter_report_human",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.submitter_report_json": {
            "name": "submitter_report_json",
            "location": 159,
            "return": [
                "Dict[(str, Optional[Union[(bool, str, List[str])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.notification_target_report": {
            "name": "notification_target_report",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.request_type_str": {
            "name": "request_type_str",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.object_pk_str": {
            "name": "object_pk_str",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.object_class_str": {
            "name": "object_class_str",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.notification_targets": {
            "name": "notification_targets",
            "location": 215,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest.validate": {
            "name": "validate",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest._check_auth": {
            "name": "_check_auth",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest._check_references": {
            "name": "_check_references",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest._check_conflicting_roa": {
            "name": "_check_conflicting_roa",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeRequest._check_scopefilter": {
            "name": "_check_scopefilter",
            "location": 338,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpsl_text_submitted": [
                    "str"
                ],
                "database_handler": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "bytes",
                    "Optional[Callable[..., Any]]",
                    "typing.Callable[..., typing.Any]"
                ],
                "auth_validator": [
                    "irrd.updates.validators.AuthValidator"
                ],
                "suspension_state": [
                    "bool"
                ]
            }
        },
        "SuspensionRequest.save": {
            "name": "save",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.is_valid": {
            "name": "is_valid",
            "location": 442,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.submitter_report_human": {
            "name": "submitter_report_human",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.submitter_report_json": {
            "name": "submitter_report_json",
            "location": 458,
            "return": [
                "Dict[(str, Optional[Union[(bool, str, List[str])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.notification_target_report": {
            "name": "notification_target_report",
            "location": 469,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.request_type_str": {
            "name": "request_type_str",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.object_pk_str": {
            "name": "object_pk_str",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.object_class_str": {
            "name": "object_class_str",
            "location": 479,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.notification_targets": {
            "name": "notification_targets",
            "location": 482,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuspensionRequest.validate": {
            "name": "validate",
            "location": 486,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/updates/parser_state.py": {
        "RPSLSetAutnumAuthenticationMode.for_set_name": {
            "name": "for_set_name",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "set_name": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/suspension.py": {
        "suspend_for_mntner": {
            "name": "suspend_for_mntner",
            "location": 17,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "database_handler": [
                    "Optional[Union[str, Any]]",
                    "str",
                    "bool",
                    "zerver.models.Realm",
                    "int",
                    "list"
                ],
                "suspended_mntner": [
                    "irrd.rpsl.rpsl_objects.RPSLMntner"
                ]
            }
        },
        "reactivate_for_mntner": {
            "name": "reactivate_for_mntner",
            "location": 79,
            "return": [
                "Tuple[(List[irrd.rpsl.parser.RPSLObject], List[str])]"
            ],
            "arguments": {
                "database_handler": [
                    "Optional[Union[str, Any]]",
                    "List[List[Any]]",
                    "Callable",
                    "Optional[str]"
                ],
                "reactivated_mntner": [
                    "irrd.rpsl.rpsl_objects.RPSLMntner"
                ]
            }
        },
        "suspend_for_mntner.mntner_active": {
            "name": "mntner_active",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "rpsl_pk": [
                    "int",
                    "str"
                ]
            }
        },
        "reactivate_for_mntner.pk_exists": {
            "name": "pk_exists",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "pk": [
                    "Optional[str]",
                    "irrd.storage.database_handler.DatabaseHandler"
                ],
                "rpsl_object_class": [
                    "bool"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/validators.py": {
        "_init_related_object_query": {
            "name": "_init_related_object_query",
            "location": 386,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "rpsl_object_class": [
                    "str"
                ],
                "rpsl_obj_new": [
                    "irrd.rpsl.parser.RPSLObject"
                ]
            }
        },
        "ValidatorResult.is_valid": {
            "name": "is_valid",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceValidator.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "ReferenceValidator.preload": {
            "name": "preload",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(irrd.updates.parser.ChangeRequest, irrd.updates.parser.SuspensionRequest)]]"
                ]
            }
        },
        "ReferenceValidator.check_references_to_others": {
            "name": "check_references_to_others",
            "location": 66,
            "return": [
                "ValidatorResult"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj": [
                    "irrd.rpsl.parser.RPSLObject"
                ]
            }
        },
        "ReferenceValidator._check_reference_to_others": {
            "name": "_check_reference_to_others",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "object_classes": [
                    "List[str]"
                ],
                "object_pk": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "ReferenceValidator.check_references_from_others": {
            "name": "check_references_from_others",
            "location": 111,
            "return": [
                "ValidatorResult"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj": [
                    "irrd.rpsl.parser.RPSLObject"
                ]
            }
        },
        "AuthValidator.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ],
                "keycert_obj_pk": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "AuthValidator.pre_approve": {
            "name": "pre_approve",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "presumed_valid_new_mntners": [
                    "List[irrd.rpsl.rpsl_objects.RPSLMntner]"
                ]
            }
        },
        "AuthValidator.process_auth": {
            "name": "process_auth",
            "location": 169,
            "return": [
                "ValidatorResult"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj_new": [
                    "irrd.rpsl.parser.RPSLObject"
                ],
                "rpsl_obj_current": [
                    "Optional[irrd.rpsl.parser.RPSLObject]"
                ]
            }
        },
        "AuthValidator.check_override": {
            "name": "check_override",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthValidator._check_mntners": {
            "name": "_check_mntners",
            "location": 252,
            "return": [
                "Tuple[(bool, List[irrd.rpsl.rpsl_objects.RPSLMntner])]"
            ],
            "arguments": {
                "self": [],
                "mntner_pk_list": [
                    "List[str]"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "AuthValidator._generate_failure_message": {
            "name": "_generate_failure_message",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "ValidatorResult"
                ],
                "failed_mntner_list": [
                    "List[str]"
                ],
                "rpsl_obj": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "related_object_class": [
                    "Optional[str]"
                ],
                "related_pk": [
                    "Optional[str]"
                ]
            }
        },
        "AuthValidator._find_related_mntners": {
            "name": "_find_related_mntners",
            "location": 297,
            "return": [
                "Optional[Tuple[(str, str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj_new": [
                    "irrd.rpsl.parser.RPSLObject"
                ],
                "result": [
                    "ValidatorResult"
                ]
            }
        },
        "AuthValidator._find_related_object_route": {
            "name": "_find_related_object_route",
            "location": 324,
            "return": [
                "None",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj_new": [
                    "dict[, ]",
                    "irrd.rpsl.parser.RPSLObject",
                    "dict",
                    "T"
                ]
            }
        },
        "AuthValidator._find_related_object_set": {
            "name": "_find_related_object_set",
            "location": 356,
            "return": [
                "bool",
                "None",
                "Optional[float]",
                "str",
                "int",
                "List[str]",
                "Optional[Union[str, bool]]",
                "set[int]",
                "list[str]",
                "dict[, ]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj_new": [
                    "irrd.rpsl.parser.RPSLObject"
                ],
                "result": [
                    "ValidatorResult"
                ]
            }
        },
        "RulesValidator.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "str",
                    "irrd.storage.database_handler.DatabaseHandler",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "RulesValidator.validate": {
            "name": "validate",
            "location": 401,
            "return": [
                "ValidatorResult"
            ],
            "arguments": {
                "self": [],
                "rpsl_obj": [
                    "irrd.rpsl.parser.RPSLObject"
                ],
                "request_type": [
                    "irrd.updates.parser_state.UpdateRequestType"
                ]
            }
        },
        "RulesValidator._check_suspended_mntner_with_same_pk": {
            "name": "_check_suspended_mntner_with_same_pk",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "source": [
                    "str",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AuthValidator._find_related_object_set._find_in_db": {
            "name": "_find_in_db",
            "location": 363,
            "return": [
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/updates/__init__.py": {},
    "irrd-main/irrd/updates/tests/test_email.py": {
        "mock_email_dh": {
            "name": "mock_email_dh",
            "location": 11,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TestHandleEmailSubmission.test_valid_plain": {
            "name": "test_valid_plain",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_email_dh": [
                    "unittesmock.Mock"
                ],
                "tmp_gpg_dir": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHandleEmailSubmission.test_invalid_no_text_plain": {
            "name": "test_invalid_no_text_plain",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_email_dh": [
                    "unittesmock.Mock"
                ],
                "tmp_gpg_dir": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHandleEmailSubmission.test_handles_exception_email_parser": {
            "name": "test_handles_exception_email_parser",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "tmp_gpg_dir": [
                    "str"
                ]
            }
        },
        "TestHandleEmailSubmission.test_handles_exception_submission_request_handler": {
            "name": "test_handles_exception_submission_request_handler",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "tmp_gpg_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHandleEmailSubmission.test_handles_exception_smtp": {
            "name": "test_handles_exception_smtp",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_email_dh": [
                    "unittesmock.Mock"
                ],
                "caplog": [],
                "tmp_gpg_dir": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHandleEmailSubmission.test_invalid_no_from": {
            "name": "test_invalid_no_from",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_email_dh": [
                    "unittesmock.Mock"
                ],
                "caplog": [],
                "tmp_gpg_dir": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/tests/test_handler.py": {
        "prepare_mocks": {
            "name": "prepare_mocks",
            "location": 19,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock,Mock]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "config_override": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_valid_new_objects_with_override": {
            "name": "test_parse_valid_new_objects_with_override",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_valid_new_person_existing_mntner_pgp_key": {
            "name": "test_parse_valid_new_person_existing_mntner_pgp_key",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_invalid_new_objects_pgp_key_does_not_exist": {
            "name": "test_parse_invalid_new_objects_pgp_key_does_not_exist",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestChangeSubmissionHandler.test_parse_valid_delete": {
            "name": "test_parse_valid_delete",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_invalid_cascading_failure": {
            "name": "test_parse_invalid_cascading_failure",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_invalid_single_failure_invalid_password": {
            "name": "test_parse_invalid_single_failure_invalid_password",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_invalid_cascading_failure_invalid_password": {
            "name": "test_parse_invalid_cascading_failure_invalid_password",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_parse_invalid_object_delete_syntax": {
            "name": "test_parse_invalid_object_delete_syntax",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestChangeSubmissionHandler.test_load_suspension_submission": {
            "name": "test_load_suspension_submission",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ],
                "monkeypatch": []
            }
        }
    },
    "irrd-main/irrd/updates/tests/test_parser.py": {
        "prepare_mocks": {
            "name": "prepare_mocks",
            "location": 27,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[Mock,Mock]]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "dict",
                    "bool"
                ],
                "config_override": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_parse": {
            "name": "test_parse",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestSingleChangeRequestHandling.test_non_authorative_source": {
            "name": "test_non_authorative_source",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestSingleChangeRequestHandling.test_validates_for_create": {
            "name": "test_validates_for_create",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_calls_rules_validator": {
            "name": "test_calls_rules_validator",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_save_nonexistent_object": {
            "name": "test_save_nonexistent_object",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_valid": {
            "name": "test_check_references_valid",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_invalid_referred_objects_dont_exist": {
            "name": "test_check_references_invalid_referred_objects_dont_exist",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_valid_preload_references": {
            "name": "test_check_references_valid_preload_references",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_valid_deleting_object_with_no_inbound_refs": {
            "name": "test_check_references_valid_deleting_object_with_no_inbound_refs",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_invalid_deleting_object_with_refs_in_db": {
            "name": "test_check_references_invalid_deleting_object_with_refs_in_db",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_invalid_deleting_object_with_refs_in_update_message": {
            "name": "test_check_references_invalid_deleting_object_with_refs_in_update_message",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_references_valid_deleting_object_referencing_to_be_deleted_object": {
            "name": "test_check_references_valid_deleting_object_referencing_to_be_deleted_object",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_valid_update_mntner": {
            "name": "test_check_auth_valid_update_mntner",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_valid_create_mntner_referencing_self": {
            "name": "test_check_auth_valid_create_mntner_referencing_self",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_create_mntner_referencing_self_wrong_override_password": {
            "name": "test_check_auth_invalid_create_mntner_referencing_self_wrong_override_password",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_valid_update_mntner_submits_new_object_with_all_dummy_hash_values": {
            "name": "test_check_auth_valid_update_mntner_submits_new_object_with_all_dummy_hash_values",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_submits_new_object_with_mixed_dummy_hash_real_hash": {
            "name": "test_check_auth_invalid_update_mntner_submits_new_object_with_mixed_dummy_hash_real_hash",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_submits_new_object_with_dummy_hash_multiple_passwords": {
            "name": "test_check_auth_invalid_update_mntner_submits_new_object_with_dummy_hash_multiple_passwords",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_wrong_password_current_db_object": {
            "name": "test_check_auth_invalid_update_mntner_wrong_password_current_db_object",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_create_with_incorrect_password_referenced_mntner": {
            "name": "test_check_auth_invalid_create_with_incorrect_password_referenced_mntner",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_with_nonexistent_referenced_mntner": {
            "name": "test_check_auth_invalid_update_with_nonexistent_referenced_mntner",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_valid_update_mntner_using_override": {
            "name": "test_check_auth_valid_update_mntner_using_override",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_using_incorrect_override": {
            "name": "test_check_auth_invalid_update_mntner_using_incorrect_override",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_override_hash_misconfigured": {
            "name": "test_check_auth_invalid_update_mntner_override_hash_misconfigured",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestSingleChangeRequestHandling.test_check_auth_invalid_update_mntner_override_hash_empty": {
            "name": "test_check_auth_invalid_update_mntner_override_hash_empty",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "TestSingleChangeRequestHandling.test_check_valid_related_mntners_disabled": {
            "name": "test_check_valid_related_mntners_disabled",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [],
                "config_override": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_invalid_related_mntners_inetnum_exact": {
            "name": "test_check_invalid_related_mntners_inetnum_exact",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestSingleChangeRequestHandling.test_check_valid_related_mntners_inet6num_exact": {
            "name": "test_check_valid_related_mntners_inet6num_exact",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_valid_related_mntners_inetnum_less_specific": {
            "name": "test_check_valid_related_mntners_inetnum_less_specific",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_valid_related_mntners_route": {
            "name": "test_check_valid_related_mntners_route",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_check_valid_no_related_mntners": {
            "name": "test_check_valid_no_related_mntners",
            "location": 929,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_rpki_validation": {
            "name": "test_rpki_validation",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [],
                "monkeypatch": [],
                "config_override": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_scopefilter_validation": {
            "name": "test_scopefilter_validation",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [],
                "monkeypatch": [],
                "config_override": [
                    "typing.Callable[[], int]",
                    "Callable[[], int]",
                    "mock.Mock"
                ]
            }
        },
        "TestSingleChangeRequestHandling.test_user_report": {
            "name": "test_user_report",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": []
            }
        },
        "TestSingleChangeRequestHandling._request_text": {
            "name": "_request_text",
            "location": 1198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuspensionRequest.prepare_suspension_request_test": {
            "name": "prepare_suspension_request_test",
            "location": 1211,
            "return": [
                "tuple[typing.Union[Mock,dict[str, typing.Union[typing.Any,int,str]],str]]",
                "bytes",
                "dict",
                "str",
                "int",
                "raiden.utils.List[raiden.raiden_service.RaidenService]",
                "bool",
                "unittesmock.Mock"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "monkeypatch": [
                    "unittesmock.Mock",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "config_override": [
                    "dict",
                    "dict[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "None"
                ]
            }
        },
        "TestSuspensionRequest.test_valid_suspension": {
            "name": "test_valid_suspension",
            "location": 1231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_valid_reactivation": {
            "name": "test_valid_reactivation",
            "location": 1271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_failed_reactivation": {
            "name": "test_failed_reactivation",
            "location": 1297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_not_authoritative": {
            "name": "test_not_authoritative",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "int"
                ]
            }
        },
        "TestSuspensionRequest.test_unknown_suspension": {
            "name": "test_unknown_suspension",
            "location": 1326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_invalid_rpsl_object": {
            "name": "test_invalid_rpsl_object",
            "location": 1339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_invalid_rpsl_object_class": {
            "name": "test_invalid_rpsl_object_class",
            "location": 1351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_incorrect_object_class": {
            "name": "test_incorrect_object_class",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestSuspensionRequest.test_invalid_override_password": {
            "name": "test_invalid_override_password",
            "location": 1375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_suspension_request_test": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/tests/test_suspension.py": {
        "TestSuspension.test_suspend_for_mntner": {
            "name": "test_suspend_for_mntner",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestSuspension.test_reactivate_for_mntner": {
            "name": "test_reactivate_for_mntner",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/tests/test_validators.py": {
        "TestAuthValidator.prepare_mocks": {
            "name": "prepare_mocks",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[AuthValidator,Mock,Mock]]]"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool"
                ],
                "config_override": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestAuthValidator.test_override_valid": {
            "name": "test_override_valid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [],
                "config_override": [
                    "str"
                ]
            }
        },
        "TestAuthValidator.test_override_invalid_or_missing": {
            "name": "test_override_invalid_or_missing",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock",
                    "scraper.storage.Storage"
                ],
                "config_override": [
                    "str"
                ]
            }
        },
        "TestAuthValidator.test_valid_new_person": {
            "name": "test_valid_new_person",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock",
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestAuthValidator.test_existing_person_mntner_change": {
            "name": "test_existing_person_mntner_change",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_valid_new_person_preapproved_mntner": {
            "name": "test_valid_new_person_preapproved_mntner",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock",
                    "scraper.storage.Storage"
                ]
            }
        },
        "TestAuthValidator.test_create_mntner_requires_override": {
            "name": "test_create_mntner_requires_override",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock"
                ],
                "config_override": [
                    "str"
                ]
            }
        },
        "TestAuthValidator.test_modify_mntner": {
            "name": "test_modify_mntner",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock",
                    "scraper.storage.Storage"
                ],
                "config_override": [
                    "mock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_related_route_exact_inetnum": {
            "name": "test_related_route_exact_inetnum",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock",
                    "scraper.storage.Storage"
                ],
                "config_override": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_related_route_less_specific_inetnum": {
            "name": "test_related_route_less_specific_inetnum",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_related_route_less_specific_route": {
            "name": "test_related_route_less_specific_route",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_related_route_no_match_v6": {
            "name": "test_related_route_no_match_v6",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_as_set_autnum_disabled": {
            "name": "test_as_set_autnum_disabled",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock"
                ],
                "config_override": [
                    "typing.Callable[[], int]",
                    "Callable[[], int]",
                    "mock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_as_set_autnum_opportunistic_exists_default": {
            "name": "test_as_set_autnum_opportunistic_exists_default",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock"
                ],
                "config_override": [
                    "typing.Callable[[], int]",
                    "Callable[[], int]",
                    "mock.Mock"
                ]
            }
        },
        "TestAuthValidator.test_as_set_autnum_opportunistic_does_not_exist": {
            "name": "test_as_set_autnum_opportunistic_does_not_exist",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock"
                ],
                "config_override": [
                    "int"
                ]
            }
        },
        "TestAuthValidator.test_as_set_autnum_required_does_not_exist": {
            "name": "test_as_set_autnum_required_does_not_exist",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "mock.MagicMock"
                ],
                "config_override": [
                    "int"
                ]
            }
        },
        "TestAuthValidator.test_filter_set_autnum_required_no_prefix": {
            "name": "test_filter_set_autnum_required_no_prefix",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "unittesmock.Mock"
                ],
                "config_override": [
                    "bytes"
                ]
            }
        },
        "TestRulesValidator.prepare_mocks": {
            "name": "prepare_mocks",
            "location": 605,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[RulesValidator,Mock,Mock]]]"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRulesValidator.test_mntner_create": {
            "name": "test_mntner_create",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepare_mocks": [
                    "scraper.storage.Storage"
                ]
            }
        }
    },
    "irrd-main/irrd/updates/tests/__init__.py": {},
    "irrd-main/irrd/utils/email.py": {
        "send_email": {
            "name": "send_email",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str"
                ],
                "subject": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "EmailParser.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_txt": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/pgp.py": {
        "get_gpg_instance": {
            "name": "get_gpg_instance",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "validate_pgp_signature": {
            "name": "validate_pgp_signature",
            "location": 23,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "detached_signature": [
                    "Optional[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/process_support.py": {
        "memory_trim": {
            "name": "memory_trim",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ExceptionLoggingProcess.run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "irrd-main/irrd/utils/rpsl_samples.py": {},
    "irrd-main/irrd/utils/test_utils.py": {
        "flatten_mock_calls": {
            "name": "flatten_mock_calls",
            "location": 1,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "mock": [],
                "flatten_objects": [
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/text.py": {
        "remove_auth_hashes": {
            "name": "remove_auth_hashes",
            "location": 11,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "input": [
                    "Optional[str]"
                ]
            }
        },
        "remove_last_modified": {
            "name": "remove_last_modified",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "rpsl_text": [
                    "str"
                ]
            }
        },
        "splitline_unicodesafe": {
            "name": "splitline_unicodesafe",
            "location": 33,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "split_paragraphs_rpsl": {
            "name": "split_paragraphs_rpsl",
            "location": 47,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "input": [
                    "Union[(str, TextIO)]"
                ],
                "strip_comments": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "snake_to_camel_case": {
            "name": "snake_to_camel_case",
            "location": 79,
            "return": [
                "Union[(list, str)]"
            ],
            "arguments": {
                "snake": [
                    "Union[(str, List[str], Set[str])]"
                ]
            }
        },
        "clean_ip_value_error": {
            "name": "clean_ip_value_error",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "value_error": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "snake_to_camel_case._str_to_camel_case": {
            "name": "_str_to_camel_case",
            "location": 84,
            "return": [
                "int",
                "str",
                "List[int]",
                "List[List[int]]"
            ],
            "arguments": {
                "snake_str": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/validators.py": {
        "parse_as_number": {
            "name": "parse_as_number",
            "location": 7,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "value": [
                    "Union[(int, str)]"
                ],
                "permit_plain": [
                    "bool",
                    "str",
                    "complex",
                    "float"
                ]
            }
        },
        "RPSLChangeSubmissionObjectAttribute.translate_list_to_str": {
            "name": "translate_list_to_str",
            "location": 42,
            "return": [
                "str",
                "bool",
                "Dict[str, float]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Union[str, Sequence[str]]"
                ]
            }
        },
        "RPSLChangeSubmissionObject.check_text_xor_attributes_present": {
            "name": "check_text_xor_attributes_present",
            "location": 55,
            "return": [
                "dict[, ]",
                "str",
                "dict[str, typing.Any]",
                "list",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "values": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/whois_client.py": {
        "whois_query": {
            "name": "whois_query",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "query": [
                    "str"
                ],
                "end_markings": [
                    "List[str]"
                ]
            }
        },
        "whois_query_irrd": {
            "name": "whois_query_irrd",
            "location": 44,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "query": [
                    "str"
                ]
            }
        },
        "whois_query_source_status": {
            "name": "whois_query_source_status",
            "location": 100,
            "return": [
                "Tuple[(Optional[bool], int, int, Optional[int])]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/__init__.py": {},
    "irrd-main/irrd/utils/tests/test_email.py": {
        "TestEmailParser.test_parse_valid_plain_with_charset": {
            "name": "test_parse_valid_plain_with_charset",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailParser.test_parse_valid_plain_without_charset": {
            "name": "test_parse_valid_plain_without_charset",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailParser.test_parse_valid_multipart_text_plain_with_charset": {
            "name": "test_parse_valid_multipart_text_plain_with_charset",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailParser.test_parse_valid_multipart_quoted_printable_with_charset": {
            "name": "test_parse_valid_multipart_quoted_printable_with_charset",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailParser.test_parse_valid_multipart_quoted_printable_without_charset": {
            "name": "test_parse_valid_multipart_quoted_printable_without_charset",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailParser.test_parse_valid_multipart_signed_ascii": {
            "name": "test_parse_valid_multipart_signed_ascii",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_parse_invalid_multipart_signed_ascii_with_additional_text_part": {
            "name": "test_parse_invalid_multipart_signed_ascii_with_additional_text_part",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_parse_valid_inline_signed_ascii": {
            "name": "test_parse_valid_inline_signed_ascii",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_parse_invalid_inline_signed_ascii_multiple_messages": {
            "name": "test_parse_invalid_inline_signed_ascii_multiple_messages",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_parse_valid_multipart_signed_unicode": {
            "name": "test_parse_valid_multipart_signed_unicode",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_parse_invalid_signature_multipart_signed_ascii_bad_signature": {
            "name": "test_parse_invalid_signature_multipart_signed_ascii_bad_signature",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [],
                "preload_gpg_key": []
            }
        },
        "TestEmailParser.test_invalid_blank_body": {
            "name": "test_invalid_blank_body",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendEmail.test_send_email": {
            "name": "test_send_email",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestSendEmail.test_send_email_with_recipient_override": {
            "name": "test_send_email_with_recipient_override",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "config_override": []
            }
        }
    },
    "irrd-main/irrd/utils/tests/test_pgp.py": {
        "TestValidatePGPSignature.test_valid_detached_signed_ascii": {
            "name": "test_valid_detached_signed_ascii",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "preload_gpg_key": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "TestValidatePGPSignature.test_valid_inline_signed_ascii": {
            "name": "test_valid_inline_signed_ascii",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "preload_gpg_key": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "TestValidatePGPSignature.test_invalid_inline_signed_ascii_multiple_messages": {
            "name": "test_invalid_inline_signed_ascii_multiple_messages",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "preload_gpg_key": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "TestValidatePGPSignature.test_invalid_signature_detached_signed_ascii": {
            "name": "test_invalid_signature_detached_signed_ascii",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_gpg_dir": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "preload_gpg_key": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/tests/test_text.py": {
        "test_remove_auth_hashes": {
            "name": "test_remove_auth_hashes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_last_modified": {
            "name": "test_remove_last_modified",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_splitline_unicodesafe": {
            "name": "test_splitline_unicodesafe",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_paragraphs_rpsl": {
            "name": "test_split_paragraphs_rpsl",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snake_to_camel_case": {
            "name": "test_snake_to_camel_case",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/utils/tests/test_validators.py": {
        "test_validate_as_number": {
            "name": "test_validate_as_number",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_rpsl_change_submission": {
            "name": "test_validate_rpsl_change_submission",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "irrd-main/irrd/utils/tests/test_whois_client.py": {
        "TestWhoisQuery.test_query_end_line": {
            "name": "test_query_end_line",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWhoisQuery.test_no_more_data": {
            "name": "test_no_more_data",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWhoisQuery.test_query_timeout": {
            "name": "test_query_timeout",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_query_valid": {
            "name": "test_query_valid",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_query_valid_empty_c_response": {
            "name": "test_query_valid_empty_c_response",
            "location": 104,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_query_valid_empty_d_response": {
            "name": "test_query_valid_empty_d_response",
            "location": 123,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestWhoisQueryIRRD.test_query_invalid_f_response": {
            "name": "test_query_invalid_f_response",
            "location": 142,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_no_valid_start": {
            "name": "test_no_valid_start",
            "location": 162,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_no_more_data": {
            "name": "test_no_more_data",
            "location": 184,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_query_timeout": {
            "name": "test_query_timeout",
            "location": 208,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuerySourceStatus.test_query_valid_with_export": {
            "name": "test_query_valid_with_export",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestQuerySourceStatus.test_query_valid_without_export": {
            "name": "test_query_valid_without_export",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestQuerySourceStatus.test_query_invalid_source": {
            "name": "test_query_invalid_source",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestQuerySourceStatus.test_query_empty_response": {
            "name": "test_query_empty_response",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestWhoisQuery.test_query_end_line.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 19,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQuery.test_no_more_data.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQuery.test_query_timeout.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 61,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "bytes": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestWhoisQueryIRRD.test_query_valid.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 86,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_query_valid_empty_c_response.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 109,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_query_valid_empty_d_response.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 128,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_query_invalid_f_response.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 147,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_no_valid_start.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 167,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_no_more_data.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bytes": []
            }
        },
        "TestWhoisQueryIRRD.test_query_timeout.mock_socket_recv": {
            "name": "mock_socket_recv",
            "location": 213,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "bytes": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuerySourceStatus.test_query_valid_with_export.mock_whois_query_irrd": {
            "name": "mock_whois_query_irrd",
            "location": 236,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "query": []
            }
        },
        "TestQuerySourceStatus.test_query_valid_without_export.mock_whois_query_irrd": {
            "name": "mock_whois_query_irrd",
            "location": 251,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "query": []
            }
        },
        "TestQuerySourceStatus.test_query_invalid_source.mock_whois_query_irrd": {
            "name": "mock_whois_query_irrd",
            "location": 266,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "query": []
            }
        },
        "TestQuerySourceStatus.test_query_empty_response.mock_whois_query_irrd": {
            "name": "mock_whois_query_irrd",
            "location": 279,
            "return": [
                "typing.Text",
                "Optional[str]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "query": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "irrd-main/irrd/utils/tests/__init__.py": {},
    "irrd-main/irrd/vendor/__init__.py": {},
    "irrd-main/irrd/vendor/dotted/collection.py": {
        "is_dotted_key": {
            "name": "is_dotted_key",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "split_key": {
            "name": "split_key",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "max_keys": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DottedCollection.factory": {
            "name": "factory",
            "location": 72,
            "return": [
                "Union[(DottedDict, DottedList, _T0)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "initial": [
                    "_T0"
                ]
            }
        },
        "DottedCollection.load_json": {
            "name": "load_json",
            "location": 85,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Awaitable",
                    "collections.abc.Awaitable[]"
                ],
                "json_value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Awaitable",
                    "collections.abc.Awaitable[]"
                ]
            }
        },
        "DottedCollection._factory_by_index": {
            "name": "_factory_by_index",
            "location": 90,
            "return": [
                "Union[(DottedDict, DottedList)]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "dotted_key": [
                    "bytes",
                    "str",
                    "Union[str, bytes]",
                    "Union[bytes, str, None]"
                ]
            }
        },
        "DottedCollection.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DottedCollection._validate_initial": {
            "name": "_validate_initial",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "str",
                    "typing.Iterable[typing.Type]",
                    "Iterable",
                    "Iterable[Type]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "DottedCollection.__len__": {
            "name": "__len__",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedCollection.__iter__": {
            "name": "__iter__",
            "location": 142,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedCollection.__repr__": {
            "name": "__repr__",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedCollection.to_json": {
            "name": "to_json",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedCollection.__getitem__": {
            "name": "__getitem__",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DottedCollection.__setitem__": {
            "name": "__setitem__",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DottedCollection.__delitem__": {
            "name": "__delitem__",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DottedCollection.to_python": {
            "name": "to_python",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedList.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "Dict[str, str]",
                    "int",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "DottedList.__getitem__": {
            "name": "__getitem__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DottedList.__setitem__": {
            "name": "__setitem__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "Sequence"
                ],
                "value": [
                    "bool",
                    "list[float]",
                    "List[float]",
                    "T"
                ]
            }
        },
        "DottedList.__delitem__": {
            "name": "__delitem__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "Union[int, slice]"
                ]
            }
        },
        "DottedList.to_python": {
            "name": "to_python",
            "location": 252,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedList.insert": {
            "name": "insert",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "typing.Iterator",
                    "T",
                    "Iterator[Any]"
                ],
                "value": [
                    "str",
                    "int",
                    "typing.Iterator",
                    "T",
                    "Iterator[Any]"
                ]
            }
        },
        "DottedDict.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "DottedDict.__getitem__": {
            "name": "__getitem__",
            "location": 276,
            "return": [
                "bool",
                "Dict[str, str]",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "DottedDict.__setitem__": {
            "name": "__setitem__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "Sequence[Tuple[float, Any]]",
                    "typing.Sequence[tuple[typing.Union[float,typing.Any]]]"
                ],
                "value": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "DottedDict.__delitem__": {
            "name": "__delitem__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "DottedDict.to_python": {
            "name": "to_python",
            "location": 329,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DottedDict.__setattr__": {
            "name": "__setattr__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "DottedDict.__delattr__": {
            "name": "__delattr__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "DottedDict.__contains__": {
            "name": "__contains__",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "DottedDict.__keytransform__": {
            "name": "__keytransform__",
            "location": 371,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "_T0"
                ]
            }
        },
        "DottedJSONEncoder.default": {
            "name": "default",
            "location": 381,
            "return": [
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "irrd-main/irrd/vendor/dotted/__init__.py": {},
    "irrd-main/irrd/vendor/postgres_copy/__init__.py": {
        "copy_to": {
            "name": "copy_to",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Pattern",
                    "str",
                    "typing.Pattern",
                    "bytes",
                    "Optional[Union[Any, Any]]",
                    "typing.Any",
                    "None"
                ],
                "dest": [
                    "int",
                    "Dict[str, Dict]",
                    "str",
                    "dict[str, dict[, ]]",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "engine_or_conn": [
                    "Dict[str, int]",
                    "int",
                    "dict[str, int]",
                    "float",
                    "str",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "copy_from": {
            "name": "copy_from",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "dest": [
                    "str",
                    "int",
                    "None",
                    "list[]",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "engine_or_conn": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "columns": [
                    "tuple[]",
                    "str",
                    "bool",
                    "Dict[str, List[bytes]]",
                    "Optional[str]"
                ]
            }
        },
        "raw_connection_from": {
            "name": "raw_connection_from",
            "location": 108,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "engine_or_conn": [
                    "_T0"
                ]
            }
        },
        "format_flags": {
            "name": "format_flags",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "flags": [
                    "str",
                    "sqlalchemy.Column",
                    "T"
                ]
            }
        },
        "format_flag": {
            "name": "format_flag",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "typing.Iterable[]",
                    "bool",
                    "Iterable",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List]",
                    "T",
                    "Optional[Dict]"
                ]
            }
        },
        "relabel_query": {
            "name": "relabel_query",
            "location": 135,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "str",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "bool"
                ]
            }
        },
        "query_entities": {
            "name": "query_entities",
            "location": 146,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "query": [
                    "int",
                    "typing.Callable[str, bool]",
                    "Callable[[str], bool]",
                    "str",
                    "list['Product']",
                    "List['Product']",
                    "Optional[str]",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "desc_entities": {
            "name": "desc_entities",
            "location": 153,
            "return": [
                "list[]",
                "Callable",
                "Type"
            ],
            "arguments": {
                "desc": [
                    "str",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "mapper_entities": {
            "name": "mapper_entities",
            "location": 165,
            "return": [
                "list"
            ],
            "arguments": {
                "mapper": [
                    "bool"
                ]
            }
        },
        "is_model": {
            "name": "is_model",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "type",
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        }
    }
}
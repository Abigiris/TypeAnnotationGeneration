{
    "is-mila-master/mila/cli.py": {
        "flickr_run": {
            "name": "flickr_run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "train_split_run": {
            "name": "train_split_run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "train_simple_run": {
            "name": "train_simple_run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "train_mobilenet_run": {
            "name": "train_mobilenet_run",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "predict_run": {
            "name": "predict_run",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "explore_run": {
            "name": "explore_run",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "evaluate_run": {
            "name": "evaluate_run",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 92,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        },
        "create_parser.image_size_tuple": {
            "name": "image_size_tuple",
            "location": 129,
            "return": [
                "tuple[]",
                "List[int]",
                "List[List[int]]",
                "List[Tuple[int, str, str]]",
                "Optional[dict]",
                "Union[float, None]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "is-mila-master/mila/config.py": {},
    "is-mila-master/mila/evaluate.py": {
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cm": [
                    "numpy.array",
                    "float",
                    "int"
                ],
                "classes": [
                    "str",
                    "Sequence[T]",
                    "Iterable[str]",
                    "int"
                ],
                "normalize": [
                    "bool"
                ],
                "title": [
                    "typing.Text"
                ],
                "cmap": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "model_output_dir": [
                    "Union[os.PathLike, str]",
                    "str"
                ],
                "image_dir": [
                    "typing.Text",
                    "str",
                    "int",
                    "sklearn.base.BaseEstimator"
                ]
            }
        }
    },
    "is-mila-master/mila/predict.py": {
        "load": {
            "name": "load",
            "location": 18,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "model_output_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "model_info": {
            "name": "model_info",
            "location": 34,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "model_output_dir": [
                    "typing.BinaryIO",
                    "str",
                    "BinaryIO",
                    "int",
                    "typing.TextIO",
                    "TextIO",
                    "io.BufferedReader",
                    "gobbli.io.TrainOutput",
                    "gobbli.io.PredictOutput"
                ]
            }
        },
        "prepare_image": {
            "name": "prepare_image",
            "location": 49,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "image_file": [
                    "_T0"
                ],
                "target_size": [
                    "int",
                    "bytes",
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 72,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "image_file": [
                    "str"
                ],
                "model_output_dir": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "cache_model": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "is-mila-master/mila/util.py": {
        "find_categories": {
            "name": "find_categories",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "from_dir": [
                    "typing.Text",
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "num_samples": {
            "name": "num_samples",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "from_dir": [
                    "typing.Text",
                    "int",
                    "bytes",
                    "List[raiden.utils.Address]",
                    "float",
                    "Callable",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        },
        "compute_class_weight": {
            "name": "compute_class_weight",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "category_mapping": [
                    "dict"
                ],
                "from_dir": [
                    "typing.Text",
                    "str",
                    "Callable",
                    "int",
                    "dict"
                ]
            }
        },
        "image_preprocessing_fun": {
            "name": "image_preprocessing_fun",
            "location": 53,
            "return": [
                "typing.Callable[, ]",
                "List[int]",
                "int",
                "utils.Node",
                "str",
                "bool"
            ],
            "arguments": {
                "trainer": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "is-mila-master/mila/__init__.py": {},
    "is-mila-master/mila/prepare/flickr.py": {
        "add_default_params": {
            "name": "add_default_params",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "params": [
                    "dict"
                ]
            }
        },
        "create_flickr_url": {
            "name": "create_flickr_url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "photo": [
                    "int",
                    "bool"
                ],
                "size": [
                    "int",
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "tags": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "limit": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "is-mila-master/mila/prepare/train_split.py": {
        "split_categories": {
            "name": "split_categories",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "categories": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "equal_splits": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "equal_splits": [
                    "bool",
                    "int",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "float",
                    "bytes",
                    "List[float]"
                ]
            }
        }
    },
    "is-mila-master/mila/prepare/__init__.py": {},
    "is-mila-master/mila/serve/app.py": {
        "render": {
            "name": "render",
            "location": 21,
            "return": [
                "str",
                "dict",
                "float",
                "bool"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        }
    },
    "is-mila-master/mila/serve/__init__.py": {},
    "is-mila-master/mila/train/callback.py": {
        "ModelMetadata.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "categories": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "trainer": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ModelMetadata.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "None",
                    "bool",
                    "List[float]",
                    "list[float]"
                ],
                "logs": [
                    "bool",
                    "None",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        }
    },
    "is-mila-master/mila/train/mobilenet.py": {
        "setup_network": {
            "name": "setup_network",
            "location": 15,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "image_size": [
                    "tuple"
                ],
                "num_classes": [
                    "int"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "batch_size": [
                    "bool",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]"
                ],
                "output_dir": [
                    "str"
                ],
                "use_class_weights": [
                    "bool"
                ],
                "use_image_variations": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "is-mila-master/mila/train/simple.py": {
        "setup_network": {
            "name": "setup_network",
            "location": 16,
            "return": [
                "Model",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "image_shape": [
                    "tuple"
                ],
                "num_classes": [
                    "int"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "image_size": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Callable[[str, str], float]",
                    "typing.Callable[str,str, float]",
                    "List[bool]",
                    "list[bool]",
                    "List[str]",
                    "list[str]"
                ],
                "epochs": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ],
                "output_dir": [
                    "bool",
                    "str"
                ],
                "tensorboard_logs": [
                    "typing.Text",
                    "dict",
                    "List[Tuple[Any, Dict]]",
                    "django.db.models.Model",
                    "list",
                    "Optional[gdpr.models.LegalReason]",
                    "Dict[str, Any]",
                    "str"
                ],
                "save_model_checkpoints": [
                    "bool",
                    "dict",
                    "List[Tuple[Any, Dict]]",
                    "django.db.models.Model",
                    "list",
                    "Optional[gdpr.models.LegalReason]",
                    "Dict[str, Any]",
                    "str"
                ],
                "early_stopping": [
                    "bool",
                    "dict",
                    "List[Tuple[Any, Dict]]",
                    "django.db.models.Model",
                    "list",
                    "Optional[gdpr.models.LegalReason]",
                    "Dict[str, Any]",
                    "str"
                ],
                "use_class_weights": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "debug": [
                    "bool",
                    "int"
                ],
                "use_image_variations": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "is-mila-master/mila/train/__init__.py": {
        "create_image_iterators": {
            "name": "create_image_iterators",
            "location": 19,
            "return": [
                "tuple"
            ],
            "arguments": {
                "image_size": [
                    "tuple"
                ],
                "batch_size": [
                    "int"
                ],
                "categories": [
                    "list"
                ],
                "save_output": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "str",
                    "Callable[[str], str]"
                ],
                "preprocessing_function": [
                    "bool",
                    "None"
                ],
                "use_image_variations": [
                    "bool"
                ]
            }
        },
        "prepare_callbacks": {
            "name": "prepare_callbacks",
            "location": 65,
            "return": [
                "list"
            ],
            "arguments": {
                "model_filename": [
                    "list",
                    "list[]"
                ],
                "model_meta_filename": [
                    "List[bytes]",
                    "list[bytes]",
                    "Optional[Iterable]",
                    "None"
                ],
                "categories": [
                    "List[bytes]",
                    "list[bytes]",
                    "Optional[Iterable]",
                    "None"
                ],
                "batch_size": [
                    "bool",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]"
                ],
                "trainer": [
                    "List[bytes]",
                    "list[bytes]",
                    "Optional[Iterable]",
                    "None"
                ],
                "tensorboard_logs": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "save_model_checkpoints": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "early_stopping": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "reduce_learning_on_plateau": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "monitor": [
                    "typing.Text",
                    "list",
                    "tuple"
                ]
            }
        }
    },
    "is-mila-master/tests/cli_test.py": {
        "test_main_prepare_flickr": {
            "name": "test_main_prepare_flickr",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_prepare_flickr_limit": {
            "name": "test_main_prepare_flickr_limit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_prepare_test_split": {
            "name": "test_main_prepare_test_split",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_train_simple_defaults": {
            "name": "test_main_train_simple_defaults",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_train_simple_with_params": {
            "name": "test_main_train_simple_with_params",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_train_mobilenet_defaults": {
            "name": "test_main_train_mobilenet_defaults",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_predict_defaults": {
            "name": "test_main_predict_defaults",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main_explore": {
            "name": "test_main_explore",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "is-mila-master/tests/util_test.py": {
        "imagedata": {
            "name": "imagedata",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ]
            }
        },
        "cats_and_dogs": {
            "name": "cats_and_dogs",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_find_categories": {
            "name": "test_find_categories",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_find_categories_different_dir": {
            "name": "test_find_categories_different_dir",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_find_categories_binary": {
            "name": "test_find_categories_binary",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_num_samples": {
            "name": "test_num_samples",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cats_and_dogs": [
                    "str"
                ]
            }
        },
        "test_compute_class_weight": {
            "name": "test_compute_class_weight",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "cats_and_dogs": [
                    "str",
                    "int"
                ]
            }
        },
        "test_compute_class_weight_reverse": {
            "name": "test_compute_class_weight_reverse",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cats_and_dogs": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "is-mila-master/tests/prepare/flickr_test.py": {
        "configmock": {
            "name": "configmock",
            "location": 19,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ]
            }
        },
        "create_session_get_callable": {
            "name": "create_session_get_callable",
            "location": 28,
            "return": [
                "type"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "list[str]",
                    "bytes",
                    "list",
                    "str",
                    "list[]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_merge_params": {
            "name": "test_merge_params",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "configmock": [
                    "str",
                    "typing.Mapping",
                    "tests.async_mock.MagicMock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_create_flickr_url": {
            "name": "test_create_flickr_url",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "is-mila-master/tests/prepare/train_split_test.py": {
        "num_images": {
            "name": "num_images",
            "location": 13,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "categories": {
            "name": "categories",
            "location": 18,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "imagedata": {
            "name": "imagedata",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "Iterable"
                ],
                "num_images": [
                    "Union[Iterable[int], int]",
                    "typing.Iterable[int]",
                    "Set[T]",
                    "int"
                ],
                "categories": [
                    "dict[str, typing.Any]",
                    "bool",
                    "list[]",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "test_split_categories_less_than_hundred": {
            "name": "test_split_categories_less_than_hundred",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str"
                ],
                "categories": [
                    "float"
                ]
            }
        },
        "test_split_categories_more_than_hundred": {
            "name": "test_split_categories_more_than_hundred",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str"
                ],
                "categories": [
                    "float"
                ]
            }
        },
        "test_split_categories_non_equal_splits": {
            "name": "test_split_categories_non_equal_splits",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "imagedata": [
                    "str"
                ],
                "categories": [
                    "int"
                ]
            }
        }
    },
    "is-mila-master/tests/serve/app_test.py": {
        "modeldata": {
            "name": "modeldata",
            "location": 18,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "configmock": {
            "name": "configmock",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ]
            }
        },
        "test_index_get": {
            "name": "test_index_get",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "modeldata": [
                    "str"
                ],
                "configmock": [
                    "str"
                ]
            }
        },
        "test_model_get_404": {
            "name": "test_model_get_404",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "modeldata": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ],
                "configmock": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_model_get_success": {
            "name": "test_model_get_success",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "modeldata": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ],
                "configmock": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_model_get_prediction": {
            "name": "test_model_get_prediction",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "modeldata": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ],
                "configmock": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        }
    }
}
{
    "is_it_up-master/build.py": {
        "clean_state": {
            "name": "clean_state",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "update_pip_and_pipenv": {
            "name": "update_pip_and_pipenv",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "prospector": {
            "name": "prospector",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 87,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "nose_tests": {
            "name": "nose_tests",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 168,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "dead_code": {
            "name": "dead_code",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 207,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "compile_md": {
            "name": "compile_md",
            "location": 330,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "jiggle_version": {
            "name": "jiggle_version",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "check_setup_py": {
            "name": "check_setup_py",
            "location": 365,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "gemfury": {
            "name": "gemfury",
            "location": 402,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "mypy.is_third_party": {
            "name": "is_third_party",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "is_it_up-master/build_utils.py": {
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ],
                "expect_file": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 112,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "expect_files": [
                    "bool",
                    "None",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 131,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "env": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "get_packages": {
            "name": "get_packages",
            "location": 161,
            "return": [
                "Tuple[(list, bool)]"
            ],
            "arguments": {}
        },
        "get_versions": {
            "name": "get_versions",
            "location": 178,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "timed": {
            "name": "timed",
            "location": 199,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "is_it_worse": {
            "name": "is_it_worse",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str"
                ],
                "current_rows": [
                    "int"
                ],
                "margin": [
                    "int"
                ]
            }
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "where": [
                    "str",
                    "bool"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 114,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timed.real_decorator": {
            "name": "real_decorator",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timed.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 203,
            "return": [
                "None",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "is_it_up-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "is_it_up-master/docs/source/conf.py": {},
    "is_it_up-master/is_it_up/base.py": {
        "IsItUpBase.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "ports": [
                    "Optional[List[str]]"
                ],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "IsItUpBase._resolve_dns_or_ip": {
            "name": "_resolve_dns_or_ip",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "IsItUpBase.__get_ip": {
            "name": "__get_ip",
            "location": 35,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "IsItUpBase.__get_hostname": {
            "name": "__get_hostname",
            "location": 42,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "ipaddr": [
                    "int",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "IsItUpBase._ping": {
            "name": "_ping",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "times": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "IsItUpBase._scan_ports": {
            "name": "_scan_ports",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "ports": [
                    "List[str]"
                ],
                "timeout": [
                    "float"
                ]
            }
        }
    },
    "is_it_up-master/is_it_up/core.py": {
        "entry": {
            "name": "entry",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "is_it_up-master/is_it_up/database.py": {
        "DatabaseChecker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "database": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "port": [
                    "Union[(int, str)]"
                ]
            }
        },
        "DatabaseChecker.check_postgres": {
            "name": "check_postgres",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseChecker.check_mysql": {
            "name": "check_mysql",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "is_it_up-master/is_it_up/ec2.py": {
        "EC2Checker.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "Union[(int, str)]"
                ]
            }
        },
        "EC2Checker.ping_nlp": {
            "name": "ping_nlp",
            "location": 18,
            "return": [
                "Dict[(str, Optional[float])]"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "timeout": [
                    "float"
                ]
            }
        }
    },
    "is_it_up-master/is_it_up/elasticache.py": {
        "ElastiCacheChecker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "Union[(int, str)]"
                ]
            }
        }
    },
    "is_it_up-master/is_it_up/exceptions.py": {},
    "is_it_up-master/is_it_up/redis.py": {
        "RedisChecker.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ],
                "port": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ],
                "cloud": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "is_it_up-master/is_it_up/remote_machine.py": {
        "RemoteMachineChecker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "ports": [
                    "List[str]"
                ]
            }
        }
    },
    "is_it_up-master/is_it_up/__init__.py": {},
    "is_it_up-master/is_it_up/__main__.py": {},
    "is_it_up-master/is_it_up/__version__.py": {},
    "is_it_up-master/test/test_minimal.py": {
        "test_remote_machine": {
            "name": "test_remote_machine",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redis": {
            "name": "test_redis",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ec2": {
            "name": "test_ec2",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_database": {
            "name": "test_database",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_elasticache": {
            "name": "test_elasticache",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
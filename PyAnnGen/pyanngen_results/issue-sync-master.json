{
    "issue-sync-master/app.py": {},
    "issue-sync-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "environ": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Callable",
                    "bytes"
                ],
                "start_response": [
                    "Callable",
                    "bytes"
                ]
            }
        }
    },
    "issue-sync-master/sync/config.py": {},
    "issue-sync-master/sync/controllers.py": {
        "handle_issuesevent": {
            "name": "handle_issuesevent",
            "location": 14,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "raw": [
                    "Dict",
                    "Optional[dict]",
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "handle_issuecommentevent": {
            "name": "handle_issuecommentevent",
            "location": 21,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "raw": [
                    "dict",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "_handle_event": {
            "name": "_handle_event",
            "location": 28,
            "return": [
                "Tuple[(Dict[(str, Any)], Any, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "event_type": [
                    "str",
                    "bool"
                ],
                "raw": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "issue-sync-master/sync/domain.py": {
        "is_comment_event": {
            "name": "is_comment_event",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "jira_event": [
                    "str"
                ]
            }
        },
        "is_gh_comment_event": {
            "name": "is_gh_comment_event",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "gh_event": [
                    "Dict",
                    "str",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "is_gh_update_event": {
            "name": "is_gh_update_event",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "gh_event": [
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "is_creation_event": {
            "name": "is_creation_event",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "jira_event": [
                    "str"
                ]
            }
        },
        "is_gh_creation_event": {
            "name": "is_gh_creation_event",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "gh_event": [
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "is_update_event": {
            "name": "is_update_event",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "jira_event": [
                    "int"
                ]
            }
        }
    },
    "issue-sync-master/sync/factory.py": {
        "create_app": {
            "name": "create_app",
            "location": 13,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        },
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 39,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "bytes",
                    "werkzeug.Request",
                    "dict"
                ]
            }
        }
    },
    "issue-sync-master/sync/parse.py": {
        "_parse_time": {
            "name": "_parse_time",
            "location": 12,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "parse_github_event": {
            "name": "parse_github_event",
            "location": 16,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event_type": [
                    "str",
                    "Dict[str,Any]",
                    "ebl.corpus.domain.texText"
                ],
                "event": [
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "dict",
                    "ebl.corpus.domain.texText"
                ]
            }
        }
    },
    "issue-sync-master/sync/process.py": {
        "translate": {
            "name": "translate",
            "location": 20,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Optional[int]",
                    "Optional[bytes]",
                    "bool"
                ],
                "issue_key": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "comment_id": [
                    "Optional[str]",
                    "None",
                    "Dict[cirq.Qid,str]",
                    "Dict[str,str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "List[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "_make_description": {
            "name": "_make_description",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "gh_event": []
            }
        },
        "_make_comment_body": {
            "name": "_make_comment_body",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "gh_event": [
                    "int"
                ]
            }
        },
        "_mark_edited": {
            "name": "_mark_edited",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "gh_event": [
                    "float"
                ],
                "value": [
                    "float"
                ]
            }
        },
        "_get_components": {
            "name": "_get_components",
            "location": 53,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "gh_event": [
                    "set",
                    "dict",
                    "domain.Thing",
                    "Dict[str, Any]"
                ]
            }
        },
        "translate_issue_opened": {
            "name": "translate_issue_opened",
            "location": 61,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": []
            }
        },
        "translate_issue_edited": {
            "name": "translate_issue_edited",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "bool"
                ]
            }
        },
        "translate_issue_closed": {
            "name": "translate_issue_closed",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "translate_issue_reopened": {
            "name": "translate_issue_reopened",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "translate_issue_deleted": {
            "name": "translate_issue_deleted",
            "location": 110,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "int",
                    "List[Tuple[str,Callable]]",
                    "List[tuple[Union[str,Callable]]]"
                ]
            }
        },
        "translate_comment_created": {
            "name": "translate_comment_created",
            "location": 119,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "Dict"
                ]
            }
        },
        "translate_comment_deleted": {
            "name": "translate_comment_deleted",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "int",
                    "List[Tuple[str,Callable]]",
                    "List[tuple[Union[str,Callable]]]"
                ]
            }
        },
        "translate_comment_edited": {
            "name": "translate_comment_edited",
            "location": 134,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gh_event": [
                    "List[dict[str,Any]]",
                    "Dict",
                    "Optional[models.LTI1p3Provider]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "issue-sync-master/sync/routes.py": {
        "status": {
            "name": "status",
            "location": 10,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {}
        },
        "issuesevent": {
            "name": "issuesevent",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {}
        },
        "issuecommentevent": {
            "name": "issuecommentevent",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {}
        }
    },
    "issue-sync-master/sync/serialize.py": {
        "EnumJSONEncoder.default": {
            "name": "default",
            "location": 10,
            "return": [
                "List",
                "int",
                "List[int]",
                "bool",
                "Dict[Tuple[str,str],Tuple[float,float]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "List[util.Block]",
                    "str",
                    "util.XYZ"
                ]
            }
        }
    },
    "issue-sync-master/sync/__init__.py": {},
    "issue-sync-master/sync/services/database.py": {
        "init_app": {
            "name": "init_app",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "create_all": {
            "name": "create_all",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_jira_issue_key": {
            "name": "get_jira_issue_key",
            "location": 85,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "github_issue_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_jira_comment_id": {
            "name": "get_jira_comment_id",
            "location": 94,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "github_comment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "store_github_event": {
            "name": "store_github_event",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "gh_event": [
                    "str",
                    "domain.GithubEvent",
                    "domain.evenEvent"
                ]
            }
        },
        "store_comment_mapping": {
            "name": "store_comment_mapping",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "gh_comment_id": [
                    "str",
                    "int",
                    "List[int]",
                    "Set[int]"
                ],
                "jira_comment_id": [
                    "str",
                    "int",
                    "List[int]",
                    "Set[int]"
                ]
            }
        },
        "store_issue_mapping": {
            "name": "store_issue_mapping",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "gh_issue_id": [
                    "str",
                    "int",
                    "Set[int]",
                    "bytes"
                ],
                "jira_issue_key": [
                    "str",
                    "int",
                    "Set[int]",
                    "bytes"
                ]
            }
        },
        "FriendlyJSONType.process_bind_param": {
            "name": "process_bind_param",
            "location": 28,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "dialect": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FriendlyJSONType.process_result_value": {
            "name": "process_result_value",
            "location": 36,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ],
                "dialect": [
                    "str",
                    "Tuple[Union[Any,Any]]",
                    "Callable",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Dict",
                    "None",
                    "Optional[Tuple[Any,Any]]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "issue-sync-master/sync/services/jira.py": {
        "propagate": {
            "name": "propagate",
            "location": 77,
            "return": [
                "str",
                "bool",
                "List[Any]",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "jira_event": [
                    "str",
                    "List[Any]",
                    "domain.JiraEvent",
                    "Optional[List[Any]]",
                    "domain.evenEvent"
                ]
            }
        },
        "init_app": {
            "name": "init_app",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "flask.Flask",
                    "flask.app.Flask"
                ]
            }
        },
        "JiraService.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "List[str]",
                    "Sequence"
                ],
                "username": [
                    "str",
                    "List[str]",
                    "Sequence"
                ],
                "token": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "JiraService._new_connection": {
            "name": "_new_connection",
            "location": 21,
            "return": [
                "str",
                "dict",
                "Iterable",
                "IO[str]"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "Set[str]",
                    "float"
                ],
                "username": [
                    "str",
                    "Set[str]",
                    "float"
                ],
                "token": [
                    "str",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "JiraService.create_ticket": {
            "name": "create_ticket",
            "location": 24,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "JiraService.update_ticket": {
            "name": "update_ticket",
            "location": 29,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "JiraService.transition_ticket": {
            "name": "transition_ticket",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict",
                    "Dict[str,object]"
                ]
            }
        },
        "JiraService.create_comment": {
            "name": "create_comment",
            "location": 45,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[Any, dict]",
                    "Optional[Dict]"
                ]
            }
        },
        "JiraService.update_comment": {
            "name": "update_comment",
            "location": 53,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "bool"
                ]
            }
        },
        "JiraService.delete_comment": {
            "name": "delete_comment",
            "location": 64,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Tuple",
                    "Dict"
                ]
            }
        }
    },
    "issue-sync-master/sync/services/__init__.py": {},
    "issue-sync-master/tests/test_controllers.py": {
        "TestIssuesEventEdited.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuesEventEdited.test_handle_event": {
            "name": "test_handle_event",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_jira": [
                    "mock.MagicMock"
                ],
                "mock_database": [
                    "Tuple[str,mock.Mock]",
                    "Tuple[Union[str,mock.Mock]]"
                ]
            }
        }
    },
    "issue-sync-master/tests/test_process.py": {
        "TestIssuesEventEdited.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuesEventEdited.test_translate": {
            "name": "test_translate",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "issue-sync-master/tests/__init__.py": {}
}
{
    "issue-watcher-main/src/issue_watcher/constants.py": {},
    "issue-watcher-main/src/issue_watcher/github.py": {
        "AssertGitHubIssue.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_id": [
                    "str"
                ]
            }
        },
        "AssertGitHubIssue._handle_rate_limit_error": {
            "name": "_handle_rate_limit_error",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.models.Response"
                ]
            }
        },
        "AssertGitHubIssue._handle_connection_error": {
            "name": "_handle_connection_error",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.models.Response"
                ]
            }
        },
        "AssertGitHubIssue.is_state": {
            "name": "is_state",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issue_id": [
                    "int"
                ],
                "expected_state": [
                    "GitHubIssueState"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "AssertGitHubIssue.is_open": {
            "name": "is_open",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issue_id": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "AssertGitHubIssue.is_closed": {
            "name": "is_closed",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issue_id": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "AssertGitHubIssue.current_release": {
            "name": "current_release",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_release_number": [
                    "Optional[int]"
                ]
            }
        },
        "AssertGitHubIssue._parse_version_number": {
            "name": "_parse_version_number",
            "location": 182,
            "return": [
                "None",
                "Version"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "pattern": [
                    "Pattern[str]"
                ]
            }
        },
        "AssertGitHubIssue._ordered_version_numbers": {
            "name": "_ordered_version_numbers",
            "location": 191,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "List[Dict[(str, Any)]]"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "AssertGitHubIssue.fixed_in": {
            "name": "fixed_in",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Optional[str]"
                ],
                "pattern": [
                    "str"
                ]
            }
        }
    },
    "issue-watcher-main/src/issue_watcher/temporary_cache.py": {
        "TemporaryCache.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_identifier": [
                    "str"
                ]
            }
        },
        "TemporaryCache._session": {
            "name": "_session",
            "location": 37,
            "return": [
                "typing.Iterator[typing.DefaultDict[builtins.str, typing.Dict[typing.Union[builtins.str, builtins.int], typing.Tuple[builtins.str, builtins.int]]]]",
                "typing.Generator[typing.Union[str,dict[, ],dict[str, typing.Type],list[]]]"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "bool",
                    "list[dict[, ]]",
                    "List[dict]",
                    "typing.Container",
                    "T",
                    "tuple[]",
                    "Container[T]",
                    "tuple"
                ]
            }
        },
        "TemporaryCache.__setitem__": {
            "name": "__setitem__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TemporaryCache.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "TemporaryCache.get": {
            "name": "get",
            "location": 75,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ],
                "default": [
                    "Optional[str]"
                ]
            }
        },
        "TemporaryCache.clear": {
            "name": "clear",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "issue-watcher-main/src/issue_watcher/version_check.py": {
        "check_python_support": {
            "name": "check_python_support",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "issue-watcher-main/src/issue_watcher/__init__.py": {},
    "issue-watcher-main/tests/__init__.py": {},
    "issue-watcher-main/tests/helpers/__init__.py": {},
    "issue-watcher-main/tests/integration/test_changelog.py": {
        "changelog": {
            "name": "changelog",
            "location": 9,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "TestChangeLog.should_have_current_version_as_a_header": {
            "name": "should_have_current_version_as_a_header",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "changelog": [
                    "str"
                ]
            }
        }
    },
    "issue-watcher-main/tests/integration/__init__.py": {},
    "issue-watcher-main/tests/unit/conftest.py": {},
    "issue-watcher-main/tests/unit/test_setup.py": {
        "cleanup_build_artefacts": {
            "name": "cleanup_build_artefacts",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_return_code": {
            "name": "build_return_code",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TestBuildProcess.test_it_builds_sources": {
            "name": "test_it_builds_sources",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "build_return_code": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestBuildProcess.assert_file_is_build": {
            "name": "assert_file_is_build",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "suffix": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "replace_hyphens": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "TestBuildProcess.test_it_creates_whl_file": {
            "name": "test_it_creates_whl_file",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildProcess.test_it_creates_tar_file": {
            "name": "test_it_creates_tar_file",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "issue-watcher-main/tests/unit/test_temporary_cache.py": {
        "_create_temp_file": {
            "name": "_create_temp_file",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Union[(dict, list, str)]"
                ]
            }
        },
        "_remove_temp_file": {
            "name": "_remove_temp_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_read_temp_file": {
            "name": "_read_temp_file",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_instance": {
            "name": "_get_instance",
            "location": 34,
            "return": [
                "issue_watcher.temporary_cache.TemporaryCache"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_can_read_from_a_file": {
            "name": "test_it_can_read_from_a_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_can_write_into_a_file": {
            "name": "test_it_can_write_into_a_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_raises_key_error_when_key_is_missing": {
            "name": "test_it_raises_key_error_when_key_is_missing",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_ignores_non_json_file": {
            "name": "test_it_ignores_non_json_file",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_ignores_json_file_without_top_level_dict": {
            "name": "test_it_ignores_json_file_without_top_level_dict",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_ignores_missing_file": {
            "name": "test_it_ignores_missing_file",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_can_be_cleared": {
            "name": "test_it_can_be_cleared",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCache.test_it_separates_projects": {
            "name": "test_it_separates_projects",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCacheGet.set_up": {
            "name": "set_up",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestTempCacheGet.test_it_returns_value_if_exists": {
            "name": "test_it_returns_value_if_exists",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCacheGet.test_it_returns_none_by_default_when_key_is_missing": {
            "name": "test_it_returns_none_by_default_when_key_is_missing",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTempCacheGet.test_it_returns_custom_default_value_when_key_is_missing": {
            "name": "test_it_returns_custom_default_value_when_key_is_missing",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_is_set_to_one_day_in_seconds_by_default": {
            "name": "test_it_is_set_to_one_day_in_seconds_by_default",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_can_be_overriden_with_environment_variable": {
            "name": "test_it_can_be_overriden_with_environment_variable",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_warns_when_environment_variable_is": {
            "name": "test_it_warns_when_environment_variable_is",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestCacheInvalidation.test_it_ignores_invalid_environment_variable_value": {
            "name": "test_it_ignores_invalid_environment_variable_value",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "TestCacheInvalidation.test_it_will_not_return_expired_entry": {
            "name": "test_it_will_not_return_expired_entry",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_will_return_valid_entry": {
            "name": "test_it_will_return_valid_entry",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_doesnt_write_to_cache_when_disabled": {
            "name": "test_it_doesnt_write_to_cache_when_disabled",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_doesnt_read_cache_when_disabled": {
            "name": "test_it_doesnt_read_cache_when_disabled",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCacheInvalidation.test_it_ignores_invalid_expiry_cache_value_": {
            "name": "test_it_ignores_invalid_expiry_cache_value_",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/test___init__.py": {
        "TestLibraryTopLevelExports.test_it_contains": {
            "name": "test_it_contains",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/__init__.py": {},
    "issue-watcher-main/tests/unit/github/constants.py": {},
    "issue-watcher-main/tests/unit/github/fixtures.py": {
        "assert_github_issue_no_cache": {
            "name": "assert_github_issue_no_cache",
            "location": 10,
            "return": [
                "AssertGitHubIssue",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "requests_mock": {
            "name": "requests_mock",
            "location": 18,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "issue-watcher-main/tests/unit/github/mocking.py": {
        "set_issue_state": {
            "name": "set_issue_state",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "req_mock": [
                    "unittest.mock.MagicMock"
                ],
                "value": [
                    "str"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "set_limit_exceeded": {
            "name": "set_limit_exceeded",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "req_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "set_number_of_releases_to": {
            "name": "set_number_of_releases_to",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "req_mock": [
                    "unittest.mock.MagicMock"
                ],
                "count": [
                    "int"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "set_git_tags_to": {
            "name": "set_git_tags_to",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "req_mock": [
                    "unittest.mock.MagicMock"
                ],
                "tags": [
                    "List[str]"
                ],
                "status_code": [
                    "int"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_authentication.py": {
        "noop": {
            "name": "noop",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestAuthentication._init_with_user_name_token_and_assert": {
            "name": "_init_with_user_name_token_and_assert",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ],
                "username": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "assertion": [
                    "Callable[([issue_watcher.github.AssertGitHubIssue], None)]"
                ]
            }
        },
        "TestAuthentication.test_it_is_not_used_when": {
            "name": "test_it_is_not_used_when",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "username": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "token": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestAuthentication.test_it_displays_warning_when_partial_credentials_supplied": {
            "name": "test_it_displays_warning_when_partial_credentials_supplied",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestAuthentication.test_it_displays_no_warnings_when": {
            "name": "test_it_displays_no_warnings_when",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "username": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "token": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestAuthentication.test_it_is_used_when_credentials_supplied": {
            "name": "test_it_is_used_when_credentials_supplied",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestAuthentication.test_it_is_suggested_when_api_rate_exceeded": {
            "name": "test_it_is_suggested_when_api_rate_exceeded",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestAuthentication.test_it_is_suggested_when_api_rate_exceeded._assertion": {
            "name": "_assertion",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue": [
                    "issuewatcher.AssertGitHubIssue",
                    "str",
                    "bool",
                    "Optional[Iterable[Any]]"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_caching.py": {
        "_timer": {
            "name": "_timer",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "assert_github_issue_caching": {
            "name": "assert_github_issue_caching",
            "location": 23,
            "return": [
                "AssertGitHubIssue",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestCaching.test_closed_issue_check_does_not_fail_when_closed": {
            "name": "test_closed_issue_check_does_not_fail_when_closed",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_caching": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestCaching.test_release_check_fails_when_new_releases_available": {
            "name": "test_release_check_fails_when_new_releases_available",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_caching": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestCaching.test_version_check_fails_when_available": {
            "name": "test_version_check_fails_when_available",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_caching": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_http.py": {
        "TestHttpErrorRaising.test_it_raises_when_status_not_200_in_state_check": {
            "name": "test_it_raises_when_status_not_200_in_state_check",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestHttpErrorRaising.test_it_raises_when_status_not_200_in_releases_check": {
            "name": "test_it_raises_when_status_not_200_in_releases_check",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestHttpErrorRaising.test_it_raises_with_info_about_rate_limit_when_exceeded": {
            "name": "test_it_raises_with_info_about_rate_limit_when_exceeded",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_live.py": {
        "TestChecksLive.test_open_issue_check_fails_when_closed": {
            "name": "test_open_issue_check_fails_when_closed",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestChecksLive.test_open_issue_check_does_not_fail_when_open": {
            "name": "test_open_issue_check_does_not_fail_when_open",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestChecksLive.test_closed_issue_check_fails_when_open": {
            "name": "test_closed_issue_check_fails_when_open",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestChecksLive.test_closed_issue_check_does_not_fail_when_closed": {
            "name": "test_closed_issue_check_does_not_fail_when_closed",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestChecksLive.test_release_number_check_fails_when_new_releases_available": {
            "name": "test_release_number_check_fails_when_new_releases_available",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        },
        "TestChecksLive.test_version_check_fails_when_available": {
            "name": "test_version_check_fails_when_available",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_python_version_check.py": {
        "python_version_mock": {
            "name": "python_version_mock",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "TestPythonSupportChecks.test_it_raises": {
            "name": "test_it_raises",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "python_version_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ],
                "expectation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_release_version.py": {
        "TestReleaseVersionCheck.test_it_fails_when_latest_version_is": {
            "name": "test_it_fails_when_latest_version_is",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issuewatcher.AssertGitHubIssue",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock",
                    "list[str]",
                    "List[str]"
                ],
                "latest_version": [
                    "str",
                    "unittesmock.MagicMock",
                    "tests.clienMDMClient"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_fails_when_latest_version_high_enough_but_first_is_tag_is_not": {
            "name": "test_it_fails_when_latest_version_high_enough_but_first_is_tag_is_not",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_ignores_invalid_version_numbers": {
            "name": "test_it_ignores_invalid_version_numbers",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_does_not_fail_when_latest_version_is": {
            "name": "test_it_does_not_fail_when_latest_version_is",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issuewatcher.AssertGitHubIssue",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock",
                    "list[str]",
                    "List[str]"
                ],
                "latest_version": [
                    "str",
                    "unittesmock.MagicMock",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_ignores_invalid_version_tags": {
            "name": "test_it_ignores_invalid_version_tags",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issuewatcher.AssertGitHubIssue",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "version": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_shows_current_release_number_if_none_given": {
            "name": "test_it_shows_current_release_number_if_none_given",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_parses_out_version_specified_by_pattern": {
            "name": "test_it_parses_out_version_specified_by_pattern",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseVersionCheck.test_it_refuses_pattern_without_a_group": {
            "name": "test_it_refuses_pattern_without_a_group",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_relese_number.py": {
        "TestReleaseNumberCheck.test_it_fails_when_new_releases_available": {
            "name": "test_it_fails_when_new_releases_available",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseNumberCheck.test_it_does_not_fail_when_expected_releases_available": {
            "name": "test_it_does_not_fail_when_expected_releases_available",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseNumberCheck.test_it_checks_if_release_number_is_properly_configured": {
            "name": "test_it_checks_if_release_number_is_properly_configured",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestReleaseNumberCheck.test_it_shows_current_release_number_if_none_given": {
            "name": "test_it_shows_current_release_number_if_none_given",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_repository_validation.py": {
        "TestRepositoryAttributeHandling.test_it_raises_error_when_repository_id": {
            "name": "test_it_raises_error_when_repository_id",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "constructor_arguments": [
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/test_state.py": {
        "_fail_open_state_check": {
            "name": "_fail_open_state_check",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "req_mock": [
                    "unittest.mock.MagicMock"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "TestStateCheck.test_it_fails_on_non_matching_state": {
            "name": "test_it_fails_on_non_matching_state",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "str",
                    "issuewatcher.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "expected_state": [
                    "str",
                    "issuewatcher.AssertGitHubIssue"
                ],
                "returned_state": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestStateCheck.test_it_does_not_fail_on_matching_state": {
            "name": "test_it_does_not_fail_on_matching_state",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "str",
                    "issuewatcher.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "expected_state": [
                    "str",
                    "issuewatcher.AssertGitHubIssue"
                ],
                "returned_state": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestFailingStateCheck.test_it_contains": {
            "name": "test_it_contains",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "regexp": [
                    "str"
                ],
                "assert_github_issue_no_cache": [
                    "unittesmock.MagicMock",
                    "issuewatcher.AssertGitHubIssue",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.Mock"
                ],
                "requests_mock": [
                    "unittesmock.MagicMock",
                    "issuewatcher.AssertGitHubIssue",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.Mock"
                ]
            }
        },
        "TestFailingStateCheck.test_it_contains_custom_message_if_one_provided": {
            "name": "test_it_contains_custom_message_if_one_provided",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        },
        "TestFailingStateCheck.test_it_does_not_contains_custom_message_if_none_provided": {
            "name": "test_it_does_not_contains_custom_message_if_none_provided",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "assert_github_issue_no_cache": [
                    "issue_watcher.github.AssertGitHubIssue"
                ],
                "requests_mock": [
                    "unittest.mock.MagicMock"
                ]
            }
        }
    },
    "issue-watcher-main/tests/unit/github/__init__.py": {}
}
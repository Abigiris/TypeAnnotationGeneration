{
    "item-catalog-master/default_config.py": {},
    "item-catalog-master/run.py": {},
    "item-catalog-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 10,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        }
    },
    "item-catalog-master/app/forms/item_forms.py": {
        "ItemForm.set_categories": {
            "name": "set_categories",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categories": [
                    "str",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]",
                    "List[int]",
                    "List[tuple[Union[float,str]]]",
                    "Dict[str,Any]",
                    "List[Tuple[float,str]]",
                    "List",
                    "Union[str,List]",
                    "bool"
                ]
            }
        },
        "ItemForm.build_item": {
            "name": "build_item",
            "location": 26,
            "return": [
                "CategoryItem",
                "Dict",
                "Dict[str,Any]",
                "str",
                "List",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditItemForm.set_item": {
            "name": "set_item",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_item": [
                    "str",
                    "int",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "T"
                ],
                "categories": [
                    "int",
                    "str",
                    "None",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "List",
                    "Callable",
                    "List[dict]",
                    "List[Dict]",
                    "bool"
                ]
            }
        }
    },
    "item-catalog-master/app/forms/__init__.py": {},
    "item-catalog-master/app/models/category.py": {
        "Category.to_dict": {
            "name": "to_dict",
            "location": 22,
            "return": [
                "Dict[Text,dict[Text,list]]",
                "Dict[str,Any]",
                "Optional[Dict[str,str]]",
                "bytes",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/models/category_item.py": {
        "CategoryItem.to_dict": {
            "name": "to_dict",
            "location": 19,
            "return": [
                "Dict[Text,dict[Text,]]",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/models/db_setup.py": {
        "DbSetup.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_string": [
                    "str",
                    "Union[str,BinaryIO]",
                    "BinaryIO"
                ]
            }
        },
        "DbSetup.create_session": {
            "name": "create_session",
            "location": 13,
            "return": [
                "str",
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbSetup.initialize_database": {
            "name": "initialize_database",
            "location": 16,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/models/openid_account.py": {},
    "item-catalog-master/app/models/user.py": {
        "User.is_active": {
            "name": "is_active",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_anonymous": {
            "name": "is_anonymous",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/models/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        }
    },
    "item-catalog-master/app/services/catalog_service.py": {
        "CatalogService.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbsetup": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CatalogService.get_catalog": {
            "name": "get_catalog",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatalogService.get_categories": {
            "name": "get_categories",
            "location": 22,
            "return": [
                "str",
                "bool",
                "int",
                "List[dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatalogService.get_category": {
            "name": "get_category",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "category_name": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CatalogService.get_category_item": {
            "name": "get_category_item",
            "location": 42,
            "return": [
                "int",
                "List",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "category_item_id": [
                    "int",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "CatalogService.delete_category_item": {
            "name": "delete_category_item",
            "location": 52,
            "return": [
                "None",
                "int",
                "Iterable[str]",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "self": [],
                "category_item_id": [
                    "int",
                    "List[int]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "CatalogService.save_category_item": {
            "name": "save_category_item",
            "location": 64,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "allennlp.models.model.Model",
                    "Dict[str, Any]",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "CatalogService.update_category_item": {
            "name": "update_category_item",
            "location": 72,
            "return": [
                "List[Dict]",
                "bool",
                "int",
                "Optional[BaseException]",
                "ClassVar"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ],
                "item_id": [
                    "int",
                    "str",
                    "None",
                    "ticketing.transfer.models.TicketCategoryID",
                    "transfer.models.TopicID",
                    "Optional[int]"
                ]
            }
        }
    },
    "item-catalog-master/app/services/user_service.py": {
        "UserService.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbsetup": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserService.get_user": {
            "name": "get_user",
            "location": 8,
            "return": [
                "None",
                "zam_repondeur.models.Lecture",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "bob_emploi.frontend.api.user_pb2.User",
                "Dict[str,Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User",
                "domain.User"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "transfer.models.ItemID"
                ]
            }
        },
        "UserService.get_or_add_openid_account": {
            "name": "get_or_add_openid_account",
            "location": 16,
            "return": [
                "User",
                "zam_repondeur.models.Lecture",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "user_models.User",
                "metaswitch_tinder.database.models.User",
                "bob_emploi.frontend.api.user_pb2.User",
                "Dict[str,Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User"
            ],
            "arguments": {
                "self": [],
                "issuer_identifier": [
                    "str",
                    "bool",
                    "excars.models.user.User",
                    "tracim.models.auth.User",
                    "karmabomodels.User"
                ],
                "subject_identifier": [
                    "str",
                    "bool",
                    "excars.models.user.User",
                    "tracim.models.auth.User",
                    "karmabomodels.User"
                ]
            }
        }
    },
    "item-catalog-master/app/services/__init__.py": {},
    "item-catalog-master/app/views/category_view.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "routemaster.app.App"
                ],
                "catalog_service": [
                    "flask.Flask",
                    "routemaster.app.App"
                ]
            }
        },
        "CategoriesView.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CategoriesView.dispatch_request": {
            "name": "dispatch_request",
            "location": 42,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "Optional[Union[Dict, str, int, bytes]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoriesViewJson.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CategoriesViewJson.get": {
            "name": "get",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryView.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CategoryView.dispatch_request": {
            "name": "dispatch_request",
            "location": 63,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "Optional[Union[Dict, str, int, bytes]]"
            ],
            "arguments": {
                "self": [],
                "category_name": [
                    "str",
                    "List"
                ]
            }
        },
        "CategoryViewJson.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CategoryViewJson.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str",
                "Callable",
                "Dict[int, Dict]",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "category_name": [
                    "str",
                    "List"
                ]
            }
        },
        "CatalogViewJson.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CatalogViewJson.get": {
            "name": "get",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/views/default_view.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "DefaultView.get": {
            "name": "get",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/views/google_auth.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ],
                "google_auth": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "GoogleAuthConfig.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secrets_file": [
                    "str",
                    "None",
                    "abilian.core.models.subjects.User",
                    "Dict",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "user_service": [
                    "str",
                    "List[U]",
                    "int",
                    "List[domain.models.User]",
                    "None",
                    "Optional[int]",
                    "User",
                    "daylighdb.models.User",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GoogleAuthConfig.build_flow": {
            "name": "build_flow",
            "location": 24,
            "return": [
                "int",
                "Sequence[int]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict",
                    "None",
                    "int",
                    "List[Callable]",
                    "str",
                    "bytes",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "GoogleLoginView.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_auth": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "GoogleLoginView.get": {
            "name": "get",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleAuthCallback.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_auth": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "GoogleAuthCallback.get": {
            "name": "get",
            "location": 55,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/views/item_view.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "routemaster.app.App"
                ],
                "catalog_service": [
                    "flask.Flask",
                    "routemaster.app.App"
                ]
            }
        },
        "CatalogItemView.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CatalogItemView.dispatch_request": {
            "name": "dispatch_request",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "int",
                    "bool"
                ]
            }
        },
        "CatalogItemViewJson.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CatalogItemViewJson.get": {
            "name": "get",
            "location": 65,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int"
                ]
            }
        },
        "NewCatalogItemView.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NewCatalogItemView.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewCatalogItemView.post": {
            "name": "post",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EditCatalogItemView.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EditCatalogItemView.get": {
            "name": "get",
            "location": 108,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int"
                ]
            }
        },
        "EditCatalogItemView.post": {
            "name": "post",
            "location": 118,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "DeleteCatalogItemView.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_service": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeleteCatalogItemView.get": {
            "name": "get",
            "location": 137,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "item-catalog-master/app/views/logout_view.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "LogoutView.get": {
            "name": "get",
            "location": 12,
            "return": [
                "str",
                "list",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "item-catalog-master/app/views/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "flask.ctx.AppContext"
                ],
                "catalog_service": [
                    "flask.Flask",
                    "flask.ctx.AppContext"
                ],
                "google_auth_config": [
                    "flask.Flask"
                ]
            }
        }
    }
}
{
    "iterative-search-semparse-master/scripts/__init__.py": {},
    "iterative-search-semparse-master/scripts/ai2_internal/run_with_beaker.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "param_file": [
                    "str"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/ai2_internal/__init__.py": {},
    "iterative-search-semparse-master/scripts/latent_alignment/latent_alignment_predictions.py": {
        "make_data": {
            "name": "make_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "input_examples_file": [
                    "str"
                ],
                "archived_model_file": [
                    "str"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/latent_alignment/latent_alignment_reranker.py": {
        "rerank_lf": {
            "name": "rerank_lf",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "model_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "input_examples_file": [
                    "str",
                    "dict",
                    "int"
                ],
                "params_file": [
                    "str",
                    "bool"
                ],
                "lf_directory": [
                    "str"
                ],
                "output_directory": [
                    "str"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/latent_alignment/preprocess_for_latent_alignment.py": {
        "process_file": {
            "name": "process_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "out_path": [
                    "str"
                ],
                "lf_path": [
                    "str"
                ],
                "is_labeled": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "pymatgen.util.PathLike"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/wikitables/generate_data_from_erm_model.py": {
        "make_data": {
            "name": "make_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "input_examples_file": [
                    "str"
                ],
                "tables_directory": [
                    "str"
                ],
                "archived_model_file": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "num_logical_forms": [
                    "int"
                ],
                "variable_free": [
                    "bool"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/wikitables/search_for_logical_forms.py": {
        "search": {
            "name": "search",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tables_directory": [
                    "str"
                ],
                "data": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[str, str]"
                ],
                "output_path": [
                    "str"
                ],
                "max_path_length": [
                    "int"
                ],
                "max_num_logical_forms": [
                    "int"
                ],
                "use_agenda": [
                    "bool"
                ],
                "output_separate_files": [
                    "bool"
                ],
                "conservative_agenda": [
                    "bool"
                ]
            }
        }
    },
    "iterative-search-semparse-master/scripts/wikitables/__init__.py": {},
    "iterative-search-semparse-master/tests/__init__.py": {},
    "iterative-search-semparse-master/tests/data/__init__.py": {},
    "iterative-search-semparse-master/tests/data/dataset_readers/latent_alignment_test.py": {
        "TestLatentAlignmentDatasetReader.test_reader_can_read": {
            "name": "test_reader_can_read",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/data/dataset_readers/__init__.py": {},
    "iterative-search-semparse-master/tests/data/dataset_readers/semantic_parsing/wikitables_variable_free_test.py": {
        "assert_dataset_correct": {
            "name": "assert_dataset_correct",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "WikiTablesVariableFreeDatasetReaderTest.test_reader_reads": {
            "name": "test_reader_reads",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesVariableFreeDatasetReaderTest.test_reader_reads_with_lfs_in_tarball": {
            "name": "test_reader_reads_with_lfs_in_tarball",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/data/dataset_readers/semantic_parsing/__init__.py": {},
    "iterative-search-semparse-master/tests/data/dataset_readers/semantic_parsing/wikitables/util_test.py": {
        "UtilTest.test_parse_example_line": {
            "name": "test_parse_example_line",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_parse_labeled_example": {
            "name": "test_parse_labeled_example",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/latent_alignment_shared_char_test.py": {
        "LatentAlignmentSharedCharModelTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentAlignmentSharedCharModelTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/latent_alignment_simple_decomposable_attention_test.py": {
        "LatentAlignmentDAMTest.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentAlignmentDAMTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/latent_alignment_test.py": {
        "LatentAlignmentModelTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentAlignmentModelTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/latent_ibm_model_1_test.py": {
        "LatentIbmModel1Test.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentIbmModel1Test.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/__init__.py": {},
    "iterative-search-semparse-master/tests/models/semantic_parsing/__init__.py": {},
    "iterative-search-semparse-master/tests/models/semantic_parsing/wikitables_variable_free/wikitables_variable_free_erm_test.py": {
        "WikiTablesVariableFreeErmTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesVariableFreeErmTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/semantic_parsing/wikitables_variable_free/wikitables_variable_free_mml_test.py": {
        "WikiTablesMmlSemanticParserTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.test_model_decode": {
            "name": "test_model_decode",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.test_get_neighbor_indices": {
            "name": "test_get_neighbor_indices",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.test_get_type_vector": {
            "name": "test_get_type_vector",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.test_get_linking_probabilities": {
            "name": "test_get_linking_probabilities",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesMmlSemanticParserTest.get_fake_worlds": {
            "name": "get_fake_worlds",
            "location": 98,
            "return": [
                "tuple[typing.Union[list[],int]]",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/models/semantic_parsing/wikitables_variable_free/__init__.py": {},
    "iterative-search-semparse-master/tests/predictors/__init__.py": {},
    "iterative-search-semparse-master/tests/semparse/action_space_walker_test.py": {
        "FakeWorldWithAssertions.get_valid_starting_types": {
            "name": "get_valid_starting_types",
            "location": 15,
            "return": [
                "set[]",
                "str",
                "Set[str]",
                "Type[Any]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeWorldWithAssertions.get_basic_types": {
            "name": "get_basic_types",
            "location": 19,
            "return": [
                "set[NamedBasicType]",
                "bool",
                "Union[str, 'Type']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeWorldWithAssertions.get_valid_actions": {
            "name": "get_valid_actions",
            "location": 23,
            "return": [
                "dict[typing.Text, list[typing.Text]]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeWorldWithAssertions.is_terminal": {
            "name": "is_terminal",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Type",
                    "typing.Type",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "ActionSpaceWalkerTest.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_logical_forms_with_agenda": {
            "name": "test_get_logical_forms_with_agenda",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_logical_forms_with_agenda_and_partial_match": {
            "name": "test_get_logical_forms_with_agenda_and_partial_match",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_logical_forms_with_empty_agenda_returns_all_logical_forms": {
            "name": "test_get_logical_forms_with_empty_agenda_returns_all_logical_forms",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_logical_forms_with_unmatched_agenda_returns_all_logical_forms": {
            "name": "test_get_logical_forms_with_unmatched_agenda_returns_all_logical_forms",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_logical_forms_with_agenda_ignores_null_set_item": {
            "name": "test_get_logical_forms_with_agenda_ignores_null_set_item",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalkerTest.test_get_all_logical_forms": {
            "name": "test_get_all_logical_forms",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/semparse/__init__.py": {},
    "iterative-search-semparse-master/tests/semparse/contexts/table_question_context_test.py": {
        "TestTableQuestionContext.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_table_data": {
            "name": "test_table_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_number_extraction": {
            "name": "test_number_extraction",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_date_extraction": {
            "name": "test_date_extraction",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_date_extraction_2": {
            "name": "test_date_extraction_2",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_entity_extraction_from_question_with_quotes": {
            "name": "test_entity_extraction_from_question_with_quotes",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_multiword_entity_extraction": {
            "name": "test_multiword_entity_extraction",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_rank_number_extraction": {
            "name": "test_rank_number_extraction",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_null_extraction": {
            "name": "test_null_extraction",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_numerical_column_type_extraction": {
            "name": "test_numerical_column_type_extraction",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_date_column_type_extraction_1": {
            "name": "test_date_column_type_extraction_1",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_date_column_type_extraction_2": {
            "name": "test_date_column_type_extraction_2",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_string_column_types_extraction": {
            "name": "test_string_column_types_extraction",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_number_and_entity_extraction": {
            "name": "test_number_and_entity_extraction",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_get_knowledge_graph": {
            "name": "test_get_knowledge_graph",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTableQuestionContext.test_knowledge_graph_has_correct_neighbors": {
            "name": "test_knowledge_graph_has_correct_neighbors",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/semparse/contexts/__init__.py": {},
    "iterative-search-semparse-master/tests/semparse/executors/wikitables_variable_free_executor_test.py": {
        "TestWikiTablesVariableFreeExecutor.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_fails_with_unknown_function": {
            "name": "test_execute_fails_with_unknown_function",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_select": {
            "name": "test_execute_works_with_select",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_select_number": {
            "name": "test_execute_works_with_select_number",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_argmax": {
            "name": "test_execute_works_with_argmax",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_argmax_on_dates": {
            "name": "test_execute_works_with_argmax_on_dates",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_argmin": {
            "name": "test_execute_works_with_argmin",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_argmin_on_dates": {
            "name": "test_execute_works_with_argmin_on_dates",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_greater": {
            "name": "test_execute_works_with_filter_number_greater",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_greater": {
            "name": "test_execute_works_with_filter_date_greater",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_greater_equals": {
            "name": "test_execute_works_with_filter_number_greater_equals",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_greater_equals": {
            "name": "test_execute_works_with_filter_date_greater_equals",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_lesser": {
            "name": "test_execute_works_with_filter_number_lesser",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_lesser": {
            "name": "test_execute_works_with_filter_date_lesser",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_lesser_equals": {
            "name": "test_execute_works_with_filter_number_lesser_equals",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_lesser_equals": {
            "name": "test_execute_works_with_filter_date_lesser_equals",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_equals": {
            "name": "test_execute_works_with_filter_number_equals",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_equals": {
            "name": "test_execute_works_with_filter_date_equals",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_number_not_equals": {
            "name": "test_execute_works_with_filter_number_not_equals",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_date_not_equals": {
            "name": "test_execute_works_with_filter_date_not_equals",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_in": {
            "name": "test_execute_works_with_filter_in",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_filter_not_in": {
            "name": "test_execute_works_with_filter_not_in",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_first": {
            "name": "test_execute_works_with_first",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_logs_warning_with_first_on_empty_list": {
            "name": "test_execute_logs_warning_with_first_on_empty_list",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_last": {
            "name": "test_execute_works_with_last",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_logs_warning_with_last_on_empty_list": {
            "name": "test_execute_logs_warning_with_last_on_empty_list",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_previous": {
            "name": "test_execute_works_with_previous",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_logs_warning_with_previous_on_empty_list": {
            "name": "test_execute_logs_warning_with_previous_on_empty_list",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_next": {
            "name": "test_execute_works_with_next",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_logs_warning_with_next_on_empty_list": {
            "name": "test_execute_logs_warning_with_next_on_empty_list",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_max_date": {
            "name": "test_execute_works_with_max_date",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_min_date": {
            "name": "test_execute_works_with_min_date",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_mode_number": {
            "name": "test_execute_works_with_mode_number",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_mode_string": {
            "name": "test_execute_works_with_mode_string",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_mode_date": {
            "name": "test_execute_works_with_mode_date",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_same_as": {
            "name": "test_execute_works_with_same_as",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_sum": {
            "name": "test_execute_works_with_sum",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_average": {
            "name": "test_execute_works_with_average",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_works_with_diff": {
            "name": "test_execute_works_with_diff",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_execute_fails_with_diff_on_non_numerical_columns": {
            "name": "test_execute_fails_with_diff_on_non_numerical_columns",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_date_comparison_works": {
            "name": "test_date_comparison_works",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_number_comparison_works": {
            "name": "test_number_comparison_works",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_evaluate_logical_form": {
            "name": "test_evaluate_logical_form",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeExecutor.test_evaluate_logical_form_with_invalid_logical_form": {
            "name": "test_evaluate_logical_form_with_invalid_logical_form",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/semparse/executors/__init__.py": {},
    "iterative-search-semparse-master/tests/semparse/worlds/wikitables_variable_free_world_test.py": {
        "check_productions_match": {
            "name": "check_productions_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "actual_rules": [
                    "List[str]"
                ],
                "expected_right_sides": [
                    "List[str]"
                ]
            }
        },
        "TestWikiTablesVariableFreeWorld.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld._get_world_with_question_tokens": {
            "name": "_get_world_with_question_tokens",
            "location": 32,
            "return": [
                "weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "list"
                ]
            }
        },
        "TestWikiTablesVariableFreeWorld.test_get_valid_actions_returns_correct_set": {
            "name": "test_get_valid_actions_returns_correct_set",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_parsing_logical_form_with_string_not_in_question_fails": {
            "name": "test_parsing_logical_form_with_string_not_in_question_fails",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld._get_alias": {
            "name": "_get_alias",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "types_": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "TestWikiTablesVariableFreeWorld.test_world_processes_logical_forms_correctly": {
            "name": "test_world_processes_logical_forms_correctly",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_world_gets_correct_actions": {
            "name": "test_world_gets_correct_actions",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_world_gets_logical_form_from_actions": {
            "name": "test_world_gets_logical_form_from_actions",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_world_processes_logical_forms_with_number_correctly": {
            "name": "test_world_processes_logical_forms_with_number_correctly",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_world_processes_logical_forms_with_date_correctly": {
            "name": "test_world_processes_logical_forms_with_date_correctly",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesVariableFreeWorld.test_get_agenda": {
            "name": "test_get_agenda",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iterative-search-semparse-master/tests/semparse/worlds/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/data/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/semantic_parsing/latent_alignment.py": {
        "preprocess_tokens": {
            "name": "preprocess_tokens",
            "location": 18,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "LatentAlignmentDatasetReader.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "List[float]",
                    "None",
                    "List[str]",
                    "list[float]",
                    "str",
                    "int",
                    "List[int]",
                    "list[str]",
                    "bytes",
                    "list[int]",
                    "Union[int, str]"
                ],
                "utterance_token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "str",
                    "None",
                    "int",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]"
                ],
                "logical_form_token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "str",
                    "None",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]"
                ],
                "max_logical_forms": [
                    "int",
                    "Optional[int]"
                ],
                "process_tokens": [
                    "bool",
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "Dict[str, int]",
                    "int"
                ],
                "lazy": [
                    "bool",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "LatentAlignmentDatasetReader._read": {
            "name": "_read",
            "location": 50,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "LatentAlignmentDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 62,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "str"
                ],
                "logical_forms": [
                    "List[str]",
                    "list[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list",
                    "list[]",
                    "List[int]",
                    "list[int]",
                    "List[shromazdeni.reports.utils.Field]",
                    "list[F]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/semantic_parsing/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/semantic_parsing/wikitables/util.py": {
        "translate_to_lambda_dcs": {
            "name": "translate_to_lambda_dcs",
            "location": 22,
            "return": [
                "str",
                "dict[, ]",
                "dict",
                "list[str]",
                "Type[T]",
                "dict[str, typing.Type]"
            ],
            "arguments": {
                "formula": [
                    "str"
                ]
            }
        },
        "parse_example_line_with_labels": {
            "name": "parse_example_line_with_labels",
            "location": 67,
            "return": [
                "dict"
            ],
            "arguments": {
                "lisp_string": [
                    "str"
                ]
            }
        },
        "parse_example_line": {
            "name": "parse_example_line",
            "location": 96,
            "return": [
                "dict"
            ],
            "arguments": {
                "lisp_string": [
                    "str"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/semantic_parsing/wikitables/wikitables_variable_free.py": {
        "WikiTablesVariableFreeDatasetReader.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool",
                    "str"
                ],
                "tables_directory": [
                    "dict",
                    "None",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "offline_logical_forms_directory": [
                    "str",
                    "None",
                    "Optional[List]",
                    "Dict[str, Tuple[str, str]]",
                    "list[]",
                    "Callable",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "typing.Callable[, ]"
                ],
                "max_offline_logical_forms": [
                    "int",
                    "float"
                ],
                "keep_if_no_logical_forms": [
                    "bool",
                    "str",
                    "Optional[List]",
                    "Dict[str, Tuple[str, str]]",
                    "Callable"
                ],
                "tokenizer": [
                    "Iterable[Any]",
                    "None",
                    "type",
                    "typing.Iterable[typing.Any]",
                    "typing.Type"
                ],
                "question_token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                    "None",
                    "str",
                    "dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                    "Optional[str]"
                ],
                "table_token_indexers": [
                    "str",
                    "None",
                    "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                    "dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]"
                ],
                "use_table_for_vocab": [
                    "bool",
                    "Tuple[bool, str]"
                ],
                "max_table_tokens": [
                    "Optional[Dict]",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "output_agendas": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeDatasetReader._read": {
            "name": "_read",
            "location": 64,
            "return": [
                "",
                "typing.Generator[typing.Union[dict[str, typing.Any],int]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 127,
            "return": [
                "None",
                "Union[bool, str]",
                "Union[None, int, str]",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Set[str]]",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "table_lines": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "target_values": [
                    "List[str]",
                    "bytes",
                    "list[str]",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "offline_search_output": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "int"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/data/dataset_readers/semantic_parsing/wikitables/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/models/latent_alignment.py": {
        "LatentAlignment.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "utterance_embedder": [
                    "int",
                    "float",
                    "bool"
                ],
                "logical_form_embedder": [
                    "float",
                    "zam_repondeur.models.Lecture",
                    "torch.Tensor"
                ],
                "utterance_encoder": [
                    "str",
                    "zam_repondeur.models.Lecture"
                ],
                "normalize_by_len": [
                    "bool",
                    "int",
                    "float"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "None",
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "deoplete.util.Nvim",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "LatentAlignment.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "dict[typing.Text, typing.Union[int,float,list[],list[str],str,dict[, ]]]",
                "busboy.util.Maybe[psycopg2.extensions.connection]",
                "str"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "int",
                    "str",
                    "flambe.nn.Module",
                    "core.models.DepositAccount"
                ],
                "logical_forms": [
                    "int",
                    "float",
                    "bool",
                    "typing.Iterator",
                    "Iterator[str]"
                ],
                "utterance_string": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "logical_form_strings": [
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LatentAlignment.get_metrics": {
            "name": "get_metrics",
            "location": 108,
            "return": [
                "str",
                "dict[typing.Text, int]",
                "bool",
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/latent_alignment_shared_char.py": {
        "LatentAlignmentSharedChar.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "None",
                    "str",
                    "allennlp.data.Vocabulary",
                    "Optional[allennlp.nn.RegularizerApplicator]"
                ],
                "utterance_embedder": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "logical_form_embedder": [
                    "int",
                    "typing.Iterator",
                    "bool",
                    "list[int]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "char_embedder": [
                    "dict[int, dict[int, typing.Any]]",
                    "models.transaction.EndorsedTX",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "utterance_encoder": [
                    "dict[int, dict[int, typing.Any]]",
                    "models.transaction.EndorsedTX",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "normalize_by_len": [
                    "bool",
                    "int",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "str"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "int",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "str",
                    "bool"
                ],
                "regularizer": [
                    "None",
                    "str",
                    "allennlp.data.Vocabulary",
                    "Optional[allennlp.nn.RegularizerApplicator]"
                ]
            }
        },
        "LatentAlignmentSharedChar.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[int,float,list[],list[str],str]]",
                "busboy.util.Maybe[psycopg2.extensions.connection]",
                "str"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "str",
                    "bool",
                    "int"
                ],
                "logical_forms": [
                    "tuple[]",
                    "int",
                    "float",
                    "bool",
                    "tuple",
                    "Optional[Pattern]"
                ],
                "utterance_string": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "logical_form_strings": [
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LatentAlignmentSharedChar.get_metrics": {
            "name": "get_metrics",
            "location": 123,
            "return": [
                "str",
                "dict[typing.Text, int]",
                "bool",
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/latent_alignment_simple_decomposable_attention.py": {
        "LatentAlignmentDAM.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "utterance_embedder": [
                    "int",
                    "float",
                    "bool"
                ],
                "logical_form_embedder": [
                    "float",
                    "zam_repondeur.models.Lecture",
                    "torch.Tensor"
                ],
                "utterance_encoder": [
                    "bool",
                    "str",
                    "zam_repondeur.models.Lecture"
                ],
                "normalize_by_len": [
                    "bool",
                    "int",
                    "float"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "None",
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "deoplete.util.Nvim",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "LatentAlignmentDAM.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "dict[typing.Text, typing.Union[int,float,list[],list[str],str,dict[, ]]]",
                "busboy.util.Maybe[psycopg2.extensions.connection]",
                "str"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "int",
                    "str",
                    "flambe.nn.Module",
                    "core.models.DepositAccount"
                ],
                "logical_forms": [
                    "int",
                    "str",
                    "lib.model.share.share.Share",
                    "Union[str, int]"
                ],
                "utterance_string": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "logical_form_strings": [
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LatentAlignmentDAM.get_metrics": {
            "name": "get_metrics",
            "location": 108,
            "return": [
                "str",
                "dict[typing.Text, int]",
                "bool",
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/latent_ibm_model_1.py": {
        "LatentIbmModel1.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "utterance_embedder": [
                    "int",
                    "float",
                    "bool"
                ],
                "logical_form_embedder": [
                    "int",
                    "float",
                    "bool"
                ],
                "translation_layer": [
                    "int",
                    "float",
                    "bool"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "None",
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "deoplete.util.Nvim",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "LatentIbmModel1.forward": {
            "name": "forward",
            "location": 37,
            "return": [
                "busboy.util.Maybe[psycopg2.extensions.connection]",
                "str"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "str",
                    "list[]",
                    "Dict[str, torch.LongTensor]",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[dict, list]",
                    "int",
                    "float"
                ],
                "logical_forms": [
                    "str",
                    "Dict[str, torch.LongTensor]",
                    "int"
                ],
                "utterance_string": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "logical_form_strings": [
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LatentIbmModel1.get_metrics": {
            "name": "get_metrics",
            "location": 187,
            "return": [
                "str",
                "dict[typing.Text, int]",
                "bool",
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/models/semantic_parsing/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/models/semantic_parsing/wikitables_variable_free/wikitables_variable_free_erm.py": {
        "WikiTablesVariableFreeErm.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "question_embedder": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "action_embedding_dim": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "encoder": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "entity_encoder": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "attention": [
                    "Optional[bool]",
                    "models.transaction.EndorsedTX",
                    "List[str]",
                    "zerver.models.UserProfile"
                ],
                "decoder_beam_size": [
                    "int",
                    "str",
                    "list"
                ],
                "decoder_num_finished_states": [
                    "int",
                    "str",
                    "list"
                ],
                "max_decoding_steps": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "mixture_feedforward": [
                    "Optional[bool]",
                    "models.transaction.EndorsedTX",
                    "List[str]",
                    "zerver.models.UserProfile"
                ],
                "add_action_bias": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "normalize_beam_score_by_length": [
                    "int",
                    "str",
                    "list"
                ],
                "checklist_cost_weight": [
                    "int",
                    "Callable",
                    "bool",
                    "Callable[..., None]",
                    "float"
                ],
                "use_neighbor_similarity_for_linking": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "dropout": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "num_linking_features": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "rule_namespace": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "mml_model_file": [
                    "str",
                    "Optional[str]",
                    "Optional[\"GraphQLFieldResolver\"]",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "WikiTablesVariableFreeErm._initialize_weights_from_archive": {
            "name": "_initialize_weights_from_archive",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive": [
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "lingAny_api.models.word.Word"
                ]
            }
        },
        "WikiTablesVariableFreeErm._get_vocab_index_mapping": {
            "name": "_get_vocab_index_mapping",
            "location": 177,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "archived_vocab": [
                    "bool",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ]
            }
        },
        "WikiTablesVariableFreeErm.forward": {
            "name": "forward",
            "location": 191,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Dict[str, torch.LongTensor]",
                    "int",
                    "Optional[int]",
                    "List[allennlp.semparse.worlds.AtisWorld]"
                ],
                "table": [
                    "Dict[str, torch.LongTensor]",
                    "str",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "Hashable",
                    "int"
                ],
                "world": [
                    "torch.Tensor",
                    "bool",
                    "List[List[int]]",
                    "int",
                    "list"
                ],
                "actions": [
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Optional[List[Any]]",
                    "int",
                    "Callable[[str], bool]"
                ],
                "agenda": [
                    "Sequence[int]",
                    "int",
                    "list"
                ],
                "target_values": [
                    "int",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "WikiTablesVariableFreeErm._get_checklist_info": {
            "name": "_get_checklist_info",
            "location": 310,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "agenda": [
                    "Optional[str]"
                ],
                "all_actions": [
                    "Set[str]",
                    "List[allennlp.data.fields.production_rule_field.ProductionRule]",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "tuple",
                    "Optional[str]"
                ],
                "terminal_productions": [
                    "Set[str]",
                    "List[allennlp.data.fields.production_rule_field.ProductionRule]",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "tuple",
                    "Optional[str]"
                ],
                "max_num_terminals": [
                    "int"
                ]
            }
        },
        "WikiTablesVariableFreeErm._get_state_cost": {
            "name": "_get_state_cost",
            "location": 357,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "worlds": [
                    "allennlp.nn.decoding.decoder_state.DecoderState",
                    "dict",
                    "str",
                    "torch.IntTensor",
                    "Dict[str, torch.LongTensor]"
                ],
                "state": [
                    "Callable",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "WikiTablesVariableFreeErm.get_metrics": {
            "name": "get_metrics",
            "location": 394,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "human_activities.model.DirectoryViews",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/semantic_parsing/wikitables_variable_free/wikitables_variable_free_mml.py": {
        "WikiTablesVariableFreeMml.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "question_embedder": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "action_embedding_dim": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "encoder": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "entity_encoder": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "decoder_beam_search": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "bool",
                    "Callable[..., None]"
                ],
                "max_decoding_steps": [
                    "int",
                    "str",
                    "float",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "attention": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "models.transaction.EndorsedTX",
                    "list[str]",
                    "List[str]",
                    "list[int]",
                    "zerver.models.UserProfile",
                    "List[int]"
                ],
                "mixture_feedforward": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "models.transaction.EndorsedTX",
                    "list[str]",
                    "List[str]",
                    "list[int]",
                    "zerver.models.UserProfile",
                    "List[int]"
                ],
                "add_action_bias": [
                    "bool",
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "training_beam_size": [
                    "int",
                    "None",
                    "float",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable[..., None]"
                ],
                "use_neighbor_similarity_for_linking": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "dropout": [
                    "float",
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder"
                ],
                "num_linking_features": [
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ],
                "rule_namespace": [
                    "typing.Text",
                    "int",
                    "allennlp.modules.Seq2SeqEncoder",
                    "str",
                    "allennlp.modules.TextFieldEmbedder",
                    "allennlp.modules.Seq2VecEncoder",
                    "float"
                ]
            }
        },
        "WikiTablesVariableFreeMml.forward": {
            "name": "forward",
            "location": 121,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Dict[str, torch.LongTensor]",
                    "dict[str, torch.LongTensor]",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "float",
                    "list[allennlp.semparse.worlds.WikiTablesWorld]",
                    "str",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRuleArray]]"
                ],
                "table": [
                    "Dict[str, torch.LongTensor]",
                    "dict[str, torch.LongTensor]",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "float",
                    "list[allennlp.semparse.worlds.WikiTablesWorld]",
                    "str",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRuleArray]]"
                ],
                "world": [
                    "Dict[str, torch.LongTensor]",
                    "dict[str, torch.LongTensor]",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "float",
                    "list[allennlp.semparse.worlds.WikiTablesWorld]",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRuleArray]]"
                ],
                "actions": [
                    "Dict[str, torch.LongTensor]",
                    "dict[str, torch.LongTensor]",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "list[allennlp.semparse.worlds.WikiTablesWorld]",
                    "daylighdb.models.User",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "typing.Callable[D, typing.Any]",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "None"
                ],
                "target_values": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "target_action_sequences": [
                    "None",
                    "Optional[Callable]",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "Optional[float]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/semantic_parsing/wikitables_variable_free/wikitables_variable_free_parser.py": {
        "WikiTablesVariableFreeParser.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "List[int]"
                ],
                "question_embedder": [
                    "int",
                    "List[bool]",
                    "BinaryIO",
                    "float"
                ],
                "action_embedding_dim": [
                    "int"
                ],
                "encoder": [
                    "Optional[str]"
                ],
                "entity_encoder": [
                    "str",
                    "zerver.models.Realm",
                    "models.transaction.EndorsedTX",
                    "int",
                    "float"
                ],
                "max_decoding_steps": [
                    "int"
                ],
                "add_action_bias": [
                    "bool"
                ],
                "use_neighbor_similarity_for_linking": [
                    "bool"
                ],
                "dropout": [
                    "float"
                ],
                "num_linking_features": [
                    "int"
                ],
                "rule_namespace": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeParser._get_initial_rnn_and_grammar_state": {
            "name": "_get_initial_rnn_and_grammar_state",
            "location": 135,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Dict[(str, Any)]"
                ],
                "table": [
                    "Dict[(str, Any)]"
                ],
                "world": [
                    "List[weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld]"
                ],
                "actions": [
                    "List[list]"
                ],
                "outputs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "WikiTablesVariableFreeParser._get_neighbor_indices": {
            "name": "_get_neighbor_indices",
            "location": 300,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "worlds": [
                    "List[weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld]"
                ],
                "num_entities": [
                    "int"
                ],
                "tensor": [
                    "float",
                    "bool",
                    "torch.Tensor",
                    "typing.Type",
                    "list[str]",
                    "Type[models.taxonomies.T]",
                    "List[str]",
                    "flambe.nn.Module"
                ]
            }
        },
        "WikiTablesVariableFreeParser._get_type_vector": {
            "name": "_get_type_vector",
            "location": 353,
            "return": [
                "Tuple[(Any, Dict[(int, int)])]"
            ],
            "arguments": {
                "worlds": [
                    "List[weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld]"
                ],
                "num_entities": [
                    "int"
                ],
                "tensor": [
                    "typing.Type",
                    "torch.Tensor",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "type",
                    "Type[T]",
                    "Callable",
                    "Mapping"
                ]
            }
        },
        "WikiTablesVariableFreeParser._get_linking_probabilities": {
            "name": "_get_linking_probabilities",
            "location": 403,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "worlds": [
                    "List[weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld]"
                ],
                "linking_scores": [
                    "int",
                    "torch.FloatTensor",
                    "bool"
                ],
                "question_mask": [
                    "list[allennlp.semparse.domain_languages.WikiTablesLanguage]",
                    "torch.LongTensor",
                    "bool",
                    "str",
                    "List[allennlp.semparse.domain_languages.WikiTablesLanguage]",
                    "set[str]",
                    "Set[str]"
                ],
                "entity_type_dict": [
                    "Dict[(int, int)]"
                ]
            }
        },
        "WikiTablesVariableFreeParser._action_history_match": {
            "name": "_action_history_match",
            "location": 486,
            "return": [
                "int"
            ],
            "arguments": {
                "predicted": [
                    "List[int]"
                ],
                "targets": [
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "WikiTablesVariableFreeParser.get_metrics": {
            "name": "get_metrics",
            "location": 497,
            "return": [
                "dict[typing.Text, ]",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "fonduer.candidates.models.SpanMention",
                    "str",
                    "salon.models.Stylist",
                    "int",
                    "List[torch.Tensor]"
                ]
            }
        },
        "WikiTablesVariableFreeParser._create_grammar_state": {
            "name": "_create_grammar_state",
            "location": 524,
            "return": [
                "denite.util.UserContext",
                "str",
                "viewer.models.Archive",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld"
                ],
                "possible_actions": [
                    "list"
                ],
                "linking_scores": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "entity_types": [
                    "typing.Callable[, ]",
                    "grouper.models.group.Group",
                    "typing.Sequence[str]",
                    "str",
                    "Callable",
                    "dict[, ]",
                    "Sequence[str]",
                    "bool",
                    "typing.Mapping",
                    "dict",
                    "typing.Type",
                    "Model",
                    "Mapping",
                    "Type[Any]"
                ]
            }
        },
        "WikiTablesVariableFreeParser._compute_validation_outputs": {
            "name": "_compute_validation_outputs",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "List[list]"
                ],
                "best_final_states": [
                    "Mapping[(int, Sequence)]"
                ],
                "world": [
                    "List[weak_supervision.semparse.worlds.wikitables_variable_free_world.WikiTablesVariableFreeWorld]"
                ],
                "target_list": [
                    "List[List[str]]"
                ],
                "metadata": [
                    "List[Dict[(str, Any)]]"
                ],
                "outputs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "WikiTablesVariableFreeParser.decode": {
            "name": "decode",
            "location": 677,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/models/semantic_parsing/wikitables_variable_free/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/predictors/latent_alignment.py": {
        "LatentAlignmentPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 12,
            "return": [
                "Dict[str, int]",
                "str",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "str",
                    "allennlp.common.util.JsonDict",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/predictors/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/action_space_walker.py": {
        "ActionSpaceWalker.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "max_path_length": [
                    "int"
                ]
            }
        },
        "ActionSpaceWalker._walk": {
            "name": "_walk",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionSpaceWalker._get_right_side_parts": {
            "name": "_get_right_side_parts",
            "location": 104,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "action": [
                    "str"
                ]
            }
        },
        "ActionSpaceWalker.get_logical_forms_with_agenda": {
            "name": "get_logical_forms_with_agenda",
            "location": 112,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "agenda": [
                    "List[str]"
                ],
                "max_num_logical_forms": [
                    "int"
                ],
                "allow_partial_match": [
                    "bool"
                ]
            }
        },
        "ActionSpaceWalker.get_all_logical_forms": {
            "name": "get_all_logical_forms",
            "location": 176,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "max_num_logical_forms": [
                    "int"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/semparse/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/contexts/table_question_context.py": {
        "Date.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ],
                "day": [
                    "int"
                ]
            }
        },
        "Date.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Date.__gt__": {
            "name": "__gt__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Date.__ge__": {
            "name": "__ge__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Date.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.__hash__": {
            "name": "__hash__",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.make_date": {
            "name": "make_date",
            "location": 139,
            "return": [
                "Date"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDate]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "TableQuestionContext.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_data": [
                    "List[Dict[(str, Union[(Date, float, str)])]]"
                ],
                "column_types": [
                    "Dict[(str, Set[str])]"
                ],
                "question_tokens": [
                    "list"
                ]
            }
        },
        "TableQuestionContext.__eq__": {
            "name": "__eq__",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TableQuestionContext.get_table_knowledge_graph": {
            "name": "get_table_knowledge_graph",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableQuestionContext.read_from_lines": {
            "name": "read_from_lines",
            "location": 242,
            "return": [
                "ableQuestionContext"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTableQuestionContext]"
                ],
                "lines": [
                    "List[List[str]]"
                ],
                "question_tokens": [
                    "list"
                ]
            }
        },
        "TableQuestionContext.read_from_file": {
            "name": "read_from_file",
            "location": 319,
            "return": [
                "ableQuestionContext"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTableQuestionContext]"
                ],
                "filename": [
                    "str"
                ],
                "question_tokens": [
                    "list"
                ]
            }
        },
        "TableQuestionContext.get_entities_from_question": {
            "name": "get_entities_from_question",
            "location": 325,
            "return": [
                "Tuple[(List[Tuple[(str, str)]], List[Tuple[(str, int)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableQuestionContext._get_numbers_from_tokens": {
            "name": "_get_numbers_from_tokens",
            "location": 352,
            "return": [
                "List[Tuple[(str, int)]]"
            ],
            "arguments": {
                "tokens": [
                    "list"
                ]
            }
        },
        "TableQuestionContext._string_in_table": {
            "name": "_string_in_table",
            "location": 412,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str"
                ]
            }
        },
        "TableQuestionContext._process_conjunction": {
            "name": "_process_conjunction",
            "location": 429,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "entity_data": []
            }
        },
        "TableQuestionContext._expand_entities": {
            "name": "_expand_entities",
            "location": 432,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "question": [],
                "entity_data": []
            }
        },
        "TableQuestionContext.normalize_string": {
            "name": "normalize_string",
            "location": 470,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/semparse/contexts/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/executors/wikitables_variable_free_executor.py": {
        "WikiTablesVariableFreeExecutor.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_data": [
                    "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._make_date": {
            "name": "_make_date",
            "location": 42,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.execute": {
            "name": "execute",
            "location": 59,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "logical_form": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.evaluate_logical_form": {
            "name": "evaluate_logical_form",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "logical_form": [
                    "str"
                ],
                "target_list": [
                    "List[str]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._handle_expression": {
            "name": "_handle_expression",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "expression_list": [
                    "int",
                    "List[int]",
                    "list",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "bool"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._handle_constant": {
            "name": "_handle_constant",
            "location": 114,
            "return": [
                "Union[(float, str, List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]])]"
            ],
            "arguments": {
                "self": [],
                "constant": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._get_number_row_pairs_to_filter": {
            "name": "_get_number_row_pairs_to_filter",
            "location": 126,
            "return": [
                "List[Tuple[(float, Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])])]]"
            ],
            "arguments": {
                "row_list": [
                    "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
                ],
                "column_name": [
                    "str"
                ],
                "keep_none_values": [
                    "bool"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._get_date_row_pairs_to_filter": {
            "name": "_get_date_row_pairs_to_filter",
            "location": 145,
            "return": [
                "List[Tuple[(weak_supervision.semparse.contexts.table_question_context.Date, Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])])]]"
            ],
            "arguments": {
                "row_list": [
                    "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
                ],
                "column_name": [
                    "str"
                ],
                "keep_none_values": [
                    "bool"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor._get_row_index": {
            "name": "_get_row_index",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.select_string": {
            "name": "select_string",
            "location": 178,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.select_number": {
            "name": "select_number",
            "location": 187,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.select_date": {
            "name": "select_date",
            "location": 199,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.argmax": {
            "name": "argmax",
            "location": 210,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.argmin": {
            "name": "argmin",
            "location": 228,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_greater": {
            "name": "filter_number_greater",
            "location": 246,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_greater_equals": {
            "name": "filter_number_greater_equals",
            "location": 267,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_lesser": {
            "name": "filter_number_lesser",
            "location": 289,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_lesser_equals": {
            "name": "filter_number_lesser_equals",
            "location": 310,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_equals": {
            "name": "filter_number_equals",
            "location": 331,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_number_not_equals": {
            "name": "filter_number_not_equals",
            "location": 352,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_greater": {
            "name": "filter_date_greater",
            "location": 375,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_greater_equals": {
            "name": "filter_date_greater_equals",
            "location": 396,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_lesser": {
            "name": "filter_date_lesser",
            "location": 418,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_lesser_equals": {
            "name": "filter_date_lesser_equals",
            "location": 439,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_equals": {
            "name": "filter_date_equals",
            "location": 460,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_date_not_equals": {
            "name": "filter_date_not_equals",
            "location": 481,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_in": {
            "name": "filter_in",
            "location": 502,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.filter_not_in": {
            "name": "filter_not_in",
            "location": 532,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ],
                "value_expression": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.first": {
            "name": "first",
            "location": 561,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.last": {
            "name": "last",
            "location": 572,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.previous": {
            "name": "previous",
            "location": 583,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.next": {
            "name": "next",
            "location": 602,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.count": {
            "name": "count",
            "location": 619,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.max_number": {
            "name": "max_number",
            "location": 627,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.min_number": {
            "name": "min_number",
            "location": 640,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.max_date": {
            "name": "max_date",
            "location": 653,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.min_date": {
            "name": "min_date",
            "location": 666,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.sum": {
            "name": "sum",
            "location": 679,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str",
                    "bool",
                    "list[typing.Any]",
                    "int",
                    "None",
                    "Optional[List[Any]]",
                    "Optional[bool]"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.average": {
            "name": "average",
            "location": 692,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.mode_string": {
            "name": "mode_string",
            "location": 705,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.mode_number": {
            "name": "mode_number",
            "location": 732,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.mode_date": {
            "name": "mode_date",
            "location": 760,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.same_as": {
            "name": "same_as",
            "location": 788,
            "return": [
                "List[Dict[(str, Union[(float, str, weak_supervision.semparse.contexts.table_question_context.Date)])]]"
            ],
            "arguments": {
                "self": [],
                "row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.diff": {
            "name": "diff",
            "location": 808,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "first_row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "second_row_expression_list": [
                    "List[Union[(list, str)]]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeExecutor.date": {
            "name": "date",
            "location": 840,
            "return": [
                "weak_supervision.semparse.contexts.table_question_context.Date"
            ],
            "arguments": {
                "year_string": [
                    "str"
                ],
                "month_string": [
                    "str"
                ],
                "day_string": [
                    "str"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/semparse/executors/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/type_declarations/wikitables_variable_free.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/type_declarations/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/semparse/worlds/wikitables_variable_free_world.py": {
        "WikiTablesVariableFreeWorld.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_context": [
                    "weak_supervision.semparse.contexts.table_question_context.TableQuestionContext"
                ]
            }
        },
        "WikiTablesVariableFreeWorld.is_instance_specific_entity": {
            "name": "is_instance_specific_entity",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "entity_name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeWorld._get_curried_functions": {
            "name": "_get_curried_functions",
            "location": 145,
            "return": [
                "str",
                "pyspark.sql.types.DataType",
                "bool",
                "nltk.sem.logic.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesVariableFreeWorld.get_basic_types": {
            "name": "get_basic_types",
            "location": 149,
            "return": [
                "mypy.types.Type",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesVariableFreeWorld.get_valid_starting_types": {
            "name": "get_valid_starting_types",
            "location": 162,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiTablesVariableFreeWorld._translate_name_and_add_mapping": {
            "name": "_translate_name_and_add_mapping",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeWorld._map_name": {
            "name": "_map_name",
            "location": 195,
            "return": [
                "str",
                "dict[str, str]",
                "mypy.types.Instance",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "keep_mapping": [
                    "bool"
                ]
            }
        },
        "WikiTablesVariableFreeWorld.get_agenda": {
            "name": "get_agenda",
            "location": 207,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "conservative": [
                    "bool"
                ]
            }
        },
        "WikiTablesVariableFreeWorld.execute": {
            "name": "execute",
            "location": 386,
            "return": [
                "Union[(int, List[str])]"
            ],
            "arguments": {
                "self": [],
                "logical_form": [
                    "str"
                ]
            }
        },
        "WikiTablesVariableFreeWorld.evaluate_logical_form": {
            "name": "evaluate_logical_form",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "logical_form": [
                    "str"
                ],
                "target_list": [
                    "List[str]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/semparse/worlds/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/state_machines/__init__.py": {},
    "iterative-search-semparse-master/weak_supervision/state_machines/transition_functions/linking_coverage_transition_function.py": {
        "LinkingCoverageTransitionFunction.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_output_dim": [
                    "int"
                ],
                "action_embedding_dim": [
                    "int"
                ],
                "input_attention": [
                    "int",
                    "allennlp.nn.Activation",
                    "float",
                    "allennlp.modules.Attention",
                    "bool"
                ],
                "activation": [
                    "int",
                    "allennlp.nn.Activation",
                    "float",
                    "allennlp.modules.Attention",
                    "bool"
                ],
                "predict_start_type_separately": [
                    "bool"
                ],
                "num_start_types": [
                    "int"
                ],
                "add_action_bias": [
                    "bool"
                ],
                "mixture_feedforward": [
                    "int",
                    "allennlp.modules.FeedForward",
                    "str",
                    "bool"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "LinkingCoverageTransitionFunction._compute_action_probabilities": {
            "name": "_compute_action_probabilities",
            "location": 77,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.Tensor",
                    "List[int]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "hidden_state": [
                    "torch.Tensor",
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState"
                ],
                "attention_weights": [
                    "torch.Tensor",
                    "str",
                    "List[List[int]]",
                    "bool",
                    "int"
                ],
                "predicted_action_embeddings": [
                    "torch.Tensor",
                    "bool",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "LinkingCoverageTransitionFunction._get_linked_logits_addition": {
            "name": "_get_linked_logits_addition",
            "location": 174,
            "return": [
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "checklist_state": [
                    "int",
                    "float"
                ],
                "action_ids": [
                    "List[int]"
                ],
                "action_logits": [
                    "str",
                    "Dict[str, str]",
                    "List[float]"
                ]
            }
        }
    },
    "iterative-search-semparse-master/weak_supervision/state_machines/transition_functions/__init__.py": {}
}
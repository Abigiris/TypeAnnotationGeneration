{
    "jab-master/example.py": {
        "API.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.add_route": {
            "name": "add_route",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "int",
                    "Type"
                ],
                "uri": [
                    "str",
                    "int",
                    "Type"
                ],
                "methods": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "GetSetter.get": {
            "name": "get",
            "location": 33,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GetSetter.set": {
            "name": "set",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "T",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "T",
                    "None"
                ]
            }
        },
        "RouteAdder.add_route": {
            "name": "add_route",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple"
                ],
                "uri": [
                    "Callable",
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple"
                ],
                "methods": [
                    "Callable",
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "Routes.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get": {
            "name": "get",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Database.set": {
            "name": "set",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        }
    },
    "jab-master/setup.py": {},
    "jab-master/jab/asgi.py": {},
    "jab-master/jab/closures.py": {
        "closure": {
            "name": "closure",
            "location": 7,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls_": [
                    "Type[T]",
                    "Callable",
                    "Callable[..., str]",
                    "str"
                ]
            }
        },
        "closure._closure": {
            "name": "_closure",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "closure._closure.inner": {
            "name": "inner",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "jab-master/jab/exceptions.py": {},
    "jab-master/jab/harness.py": {
        "Harness.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness.inspect": {
            "name": "inspect",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Harness._build_inspect": {
            "name": "_build_inspect",
            "location": 80,
            "return": [
                "jab.inspect.Provided"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str"
                ]
            }
        },
        "Harness.provide": {
            "name": "provide",
            "location": 139,
            "return": [
                "Harness"
            ],
            "arguments": {
                "self": [
                    "_THarness@@Harness@@"
                ]
            }
        },
        "Harness._build_graph": {
            "name": "_build_graph",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness.build": {
            "name": "build",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness._build_env": {
            "name": "_build_env",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness._search_protocol": {
            "name": "_search_protocol",
            "location": 252,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "Harness._search_concrete": {
            "name": "_search_concrete",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "str",
                    "BaseException",
                    "None",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Harness._check_provide": {
            "name": "_check_provide",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "Harness._run": {
            "name": "_run",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness.run": {
            "name": "run",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Harness.asgi": {
            "name": "asgi",
            "location": 486,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Harness._asgi_http": {
            "name": "_asgi_http",
            "location": 533,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Harness._asgi_ws": {
            "name": "_asgi_ws",
            "location": 539,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "jab-master/jab/inspect.py": {},
    "jab-master/jab/logging.py": {
        "Logger.debug": {
            "name": "debug",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "List",
                    "Dict",
                    "int"
                ]
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "Logger.critical": {
            "name": "critical",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DefaultJabLogger.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultJabLogger.debug": {
            "name": "debug",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "DefaultJabLogger.info": {
            "name": "info",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "float",
                    "Exception"
                ]
            }
        },
        "DefaultJabLogger.warning": {
            "name": "warning",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]",
                    "logging.Logger"
                ]
            }
        },
        "DefaultJabLogger.error": {
            "name": "error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "DefaultJabLogger.critical": {
            "name": "critical",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        }
    },
    "jab-master/jab/search.py": {
        "isimplementation": {
            "name": "isimplementation",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls_": [
                    "str",
                    "Optional[int]"
                ],
                "proto": [
                    "AsyncGenerator",
                    "str",
                    "type"
                ]
            }
        },
        "func_satisfies": {
            "name": "func_satisfies",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "impl": [],
                "proto": []
            }
        }
    },
    "jab-master/jab/__init__.py": {},
    "jab-master/test/closure_test.py": {
        "test_closure_func": {
            "name": "test_closure_func",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_closure_return": {
            "name": "test_closure_return",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_closure_pass": {
            "name": "test_closure_pass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_closure_jab_flag": {
            "name": "test_closure_jab_flag",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_well_with_others": {
            "name": "test_play_well_with_others",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SampleClass.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "SampleClass.get_name": {
            "name": "get_name",
            "location": 15,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jab-master/test/harness_test.py": {
        "ProvideCounter": {
            "name": "ProvideCounter",
            "location": 120,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {}
        },
        "ProvidesShouter": {
            "name": "ProvidesShouter",
            "location": 143,
            "return": [
                "ImplementsShout"
            ],
            "arguments": {}
        },
        "FunctionalRequire": {
            "name": "FunctionalRequire",
            "location": 155,
            "return": [
                "NeedsCounter"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]"
                ]
            }
        },
        "test_harness": {
            "name": "test_harness",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mult_harness": {
            "name": "test_mult_harness",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_annotation": {
            "name": "test_no_annotation",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_dep": {
            "name": "test_missing_dep",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_run": {
            "name": "test_sync_run",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_circular_dependency": {
            "name": "test_circular_dependency",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_protocol": {
            "name": "test_missing_protocol",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_class_provide": {
            "name": "test_non_class_provide",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_on_start": {
            "name": "test_on_start",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger": {
            "name": "test_logger",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arugments_in_on_start": {
            "name": "test_arugments_in_on_start",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functional_constructor": {
            "name": "test_functional_constructor",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_concrete_function_protocol_need": {
            "name": "test_concrete_function_protocol_need",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functional_requires": {
            "name": "test_functional_requires",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_function": {
            "name": "test_bad_function",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inspect": {
            "name": "test_inspect",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NumberProvider.provide_number": {
            "name": "provide_number",
            "location": 14,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassBasic.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "ClassBasic.get_thing": {
            "name": "get_thing",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thing.get_thing": {
            "name": "get_thing",
            "location": 35,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcreteNumber.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcreteNumber.provide_number": {
            "name": "provide_number",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassNew.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "ClassNew.on_stop": {
            "name": "on_stop",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingAnnotations.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "age": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "MissingAnnotations.who_am_i": {
            "name": "who_am_i",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadOnStart.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadOnStart.on_start": {
            "name": "on_start",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRun.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRun.run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twoer.two": {
            "name": "two",
            "location": 90,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CircleOne.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "List[int]",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Union[IndexBase,Series]",
                    "Tuple[str,str]"
                ]
            }
        },
        "CircleTwo.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "List[int]",
                    "Tuple[Union[str,str]]",
                    "bool",
                    "Union[IndexBase,Series]",
                    "Tuple[str,str]"
                ]
            }
        },
        "CircleTwo.two": {
            "name": "two",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeedsLogger.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "str",
                    "float",
                    "BaseException",
                    "Dict[str,Any]"
                ]
            }
        },
        "ArgedOnStart.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeedsCounter.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "float",
                    "bool",
                    "Optional[Iterable]",
                    "int"
                ]
            }
        },
        "Shouter.shout": {
            "name": "shout",
            "location": 131,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplementsShout.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ImplementsShout.shout": {
            "name": "shout",
            "location": 139,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeedsShouter.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool",
                    "None",
                    "Optional[dict]",
                    "T"
                ]
            }
        },
        "test_bad_function.bad_func": {
            "name": "bad_func",
            "location": 239,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "jab-master/test/impl_test.py": {
        "protocol": {
            "name": "protocol",
            "location": 10,
            "return": [
                "StringerProvider",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "impl": {
            "name": "impl",
            "location": 23,
            "return": [
                "Implementation",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_protocol_returning_protocol": {
            "name": "test_protocol_returning_protocol",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "protocol": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Callable",
                    "Tuple[Union[float,float,float,float,float]]"
                ],
                "impl": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Callable",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "impl_with_proto": {
            "name": "impl_with_proto",
            "location": 46,
            "return": [
                "Implementation",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_impl_with_proto_return": {
            "name": "test_impl_with_proto_return",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "protocol": [
                    "str",
                    "Callable",
                    "int",
                    "Type"
                ],
                "impl_with_proto": [
                    "str",
                    "Callable",
                    "int",
                    "Type"
                ]
            }
        },
        "overloaded": {
            "name": "overloaded",
            "location": 66,
            "return": [
                "Tuple[Union[Overloaded,Names]]",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "test_good_overloaded": {
            "name": "test_good_overloaded",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "overloaded": []
            }
        },
        "bad_overloaded": {
            "name": "bad_overloaded",
            "location": 108,
            "return": [
                "Tuple[Union[Overloaded,Names]]",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "test_bad_overloaded": {
            "name": "test_bad_overloaded",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_overloaded": []
            }
        },
        "protocol.Stringer.string": {
            "name": "string",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "protocol.StringerProvider.provide_stringer": {
            "name": "provide_stringer",
            "location": 16,
            "return": [
                "Stringer",
                "None"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "impl.StringerImpl.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "impl.StringerImpl.string": {
            "name": "string",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "impl.Implementation.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stringer": []
            }
        },
        "impl.Implementation.provide_stringer": {
            "name": "provide_stringer",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ending": []
            }
        },
        "impl_with_proto.Stringer.string": {
            "name": "string",
            "location": 48,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "impl_with_proto.Implementation.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stringer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "impl_with_proto.Implementation.provide_stringer": {
            "name": "provide_stringer",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ending": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "overloaded.Namer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "overloaded.Namer.name": {
            "name": "name",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "overloaded.Overloaded.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "overloaded.Overloaded.names": {
            "name": "names",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namers": []
            }
        },
        "overloaded.Names.names": {
            "name": "names",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namers": []
            }
        },
        "bad_overloaded.Namer.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "bad_overloaded.Namer.name": {
            "name": "name",
            "location": 113,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "bad_overloaded.Overloaded.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "bad_overloaded.Overloaded.names": {
            "name": "names",
            "location": 129,
            "return": [
                "None",
                "Tuple[bool,str]",
                "NamedTuple",
                "str",
                "Dict[str,str]",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "namers": [
                    "Dict[str, int]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "bad_overloaded.Names.names": {
            "name": "names",
            "location": 136,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "namers": [
                    "list",
                    "bool",
                    "List[List]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    }
}
{
    "jdata-master/setup.py": {},
    "jdata-master/test_environment.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jdata-master/docs/conf.py": {},
    "jdata-master/src/__init__.py": {
        "to_unix": {
            "name": "to_unix",
            "location": 13,
            "return": [
                "int",
                "Type[T]",
                "Union[int,Tuple[int,...]]"
            ],
            "arguments": {
                "dt": [
                    "int",
                    "float",
                    "datetime.date.time",
                    "bool"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 20,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "Tuple[cirq.Qid]",
                    "List[float]",
                    "pandas.Series"
                ]
            }
        },
        "drop_duplicated_columns": {
            "name": "drop_duplicated_columns",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "List",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "jdata-master/src/data/concat_action_files.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "input_dir": [
                    "str",
                    "Union[str, List]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        }
    },
    "jdata-master/src/data/drop_duplicated_actions.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jdata-master/src/data/merge_all_files.py": {
        "load_files": {
            "name": "load_files",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "add_dt_features": {
            "name": "add_dt_features",
            "location": 68,
            "return": [
                "str",
                "list",
                "List[str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "bool"
                ],
                "dt_col": [
                    "int",
                    "float",
                    "str",
                    "Dict",
                    "bool"
                ],
                "features": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "complex",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ]
            }
        }
    },
    "jdata-master/src/data/optimizer.py": {
        "info": {
            "name": "info",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "bytes",
                    "List[str]",
                    "str"
                ]
            }
        },
        "mem_usage": {
            "name": "mem_usage",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "pd_obj": [
                    "int",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "compare_mem_usage": {
            "name": "compare_mem_usage",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "int",
                    "float"
                ],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "get_column_types": {
            "name": "get_column_types",
            "location": 28,
            "return": [
                "dict"
            ],
            "arguments": {
                "dtypes": [
                    "Type"
                ]
            }
        },
        "show_dtypes": {
            "name": "show_dtypes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "optimize_numeric_values": {
            "name": "optimize_numeric_values",
            "location": 45,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "df": [
                    "float",
                    "int",
                    "list",
                    "numpy.ndarray"
                ],
                "fillna": [
                    "str",
                    "None",
                    "int",
                    "Optional[dict]",
                    "Optional[int]",
                    "Dict"
                ],
                "as_int": [
                    "None",
                    "bool",
                    "numpy.ndarray",
                    "AnyStr",
                    "Optional[AnyStr]",
                    "str",
                    "int",
                    "Callable[...,Any]",
                    "Optional[str]",
                    "float",
                    "Optional[Callable[...,Any]]",
                    "Optional[float]"
                ]
            }
        }
    },
    "jdata-master/src/data/readwriter.py": {
        "DataReadWriter.read": {
            "name": "read",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataReadWriter.write": {
            "name": "write",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyReadWriter.read": {
            "name": "read",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyReadWriter.write": {
            "name": "write",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.extension": {
            "name": "extension",
            "location": 54,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.read": {
            "name": "read",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "FileReadWriter.write": {
            "name": "write",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "dir": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FileReadWriter.extend_name": {
            "name": "extend_name",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FileReadWriter.fpath": {
            "name": "fpath",
            "location": 72,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "List"
                ],
                "name": [
                    "str",
                    "List"
                ]
            }
        },
        "FileReadWriter.set_path_dict": {
            "name": "set_path_dict",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.create_folder_if_not_exist": {
            "name": "create_folder_if_not_exist",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReadWriter.create_file_if_not_exist": {
            "name": "create_file_if_not_exist",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.extension": {
            "name": "extension",
            "location": 95,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVReadWriter.read": {
            "name": "read",
            "location": 102,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "version": [
                    "str",
                    "Dict",
                    "Type",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "CSVReadWriter.write": {
            "name": "write",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[Type]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict",
                    "Dict[str,Dict]",
                    "Dict[str,dict]"
                ],
                "name": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[Type]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ],
                "save_dtypes": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "Callable[[str],bool]",
                    "List[str]"
                ]
            }
        },
        "CSVReadWriter.save_dtypes": {
            "name": "save_dtypes",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ],
                "version": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FeatherReadWriter.extension": {
            "name": "extension",
            "location": 121,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherReadWriter.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherReadWriter.read": {
            "name": "read",
            "location": 127,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "nthreads": [
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "FeatherReadWriter.write": {
            "name": "write",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "collections.abc.Awaitable",
                    "pandas.DataFrame",
                    "Awaitable"
                ],
                "dir": [
                    "str",
                    "int",
                    "collections.abc.Awaitable",
                    "pandas.DataFrame",
                    "Awaitable"
                ],
                "name": [
                    "str",
                    "int",
                    "collections.abc.Awaitable",
                    "pandas.DataFrame",
                    "Awaitable"
                ]
            }
        },
        "CompositeReadWriter.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "float",
                    "bool"
                ],
                "writer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CompositeReadWriter.read": {
            "name": "read",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeReadWriter.write": {
            "name": "write",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.get": {
            "name": "get",
            "location": 173,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Optional[str]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str",
                    "int"
                ]
            }
        },
        "Schema.save": {
            "name": "save",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str,Any]",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "value": [
                    "Dict[str,Any]",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "version": [
                    "str",
                    "bytes",
                    "float",
                    "List[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "TrainTestReadWriter.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainTestReadWriter.read": {
            "name": "read",
            "location": 218,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "version": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TrainTestReadWriter.write": {
            "name": "write",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "Union[str,int]",
                    "bool"
                ],
                "value": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "str",
                    "T",
                    "int"
                ],
                "version": [
                    "float",
                    "str",
                    "T"
                ],
                "force": [
                    "bool",
                    "str",
                    "Union[str,bytes]",
                    "float",
                    "Dict[str,Any]",
                    "Exception",
                    "Optional[Any]"
                ]
            }
        },
        "TrainTestReadWriter.get_config": {
            "name": "get_config",
            "location": 258,
            "return": [
                "str",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,list[int]]",
                "Optional[str]",
                "Dict[str,dict[str,bool]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "T"
                ],
                "version": [
                    "int",
                    "float",
                    "T",
                    "str"
                ]
            }
        },
        "TrainTestReadWriter.show": {
            "name": "show",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List",
                    "None",
                    "Dict[str,str]"
                ],
                "version": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "JDataTrainTestReadWriter.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JDataTrainTestReadWriter.read": {
            "name": "read",
            "location": 277,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "Set[str]",
                    "Callable[[float], bool]"
                ],
                "encode_type": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "add_feature": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "jdata-master/src/data/save_npy.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jdata-master/src/data/split_train_test.py": {
        "BaseSpliter.parse_dates": {
            "name": "parse_dates",
            "location": 17,
            "return": [
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSpliter.parse_sme_dates": {
            "name": "parse_sme_dates",
            "location": 20,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "mid": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "end": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "BaseSpliter.make_train": {
            "name": "make_train",
            "location": 32,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BaseSpliter.make_test": {
            "name": "make_test",
            "location": 35,
            "return": [
                "int",
                "bool",
                "str",
                "Callable[,bytes]",
                "Dict[str,int]",
                "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId,pathlib.Path]",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "Callable[,bytes]",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId,pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "BaseSpliter.run": {
            "name": "run",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_p": [
                    "str",
                    "int"
                ],
                "start": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "mid": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "end": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "time_col": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "unix_time": [
                    "bool",
                    "str",
                    "Callable[,Iterable[Any]]"
                ],
                "keep_cols": [
                    "List",
                    "int",
                    "str",
                    "IO[bytes]",
                    "Type",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "only_keep_train_index": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "JDataSpliter.make_test": {
            "name": "make_test",
            "location": 113,
            "return": [
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict",
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "JDataSpliter.run": {
            "name": "run",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_p": [
                    "int",
                    "str",
                    "bool"
                ],
                "start": [
                    "int",
                    "str",
                    "bool"
                ],
                "mid": [
                    "int",
                    "str",
                    "bool"
                ],
                "end": [
                    "int",
                    "str",
                    "bool"
                ],
                "time_col": [
                    "int",
                    "str",
                    "bool"
                ],
                "unix_time": [
                    "bool",
                    "int",
                    "str"
                ],
                "keep_cols": [
                    "List",
                    "int",
                    "str",
                    "bool"
                ],
                "only_keep_train_index": [
                    "bool",
                    "int",
                    "str"
                ],
                "version": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "jdata-master/src/data/__init__.py": {},
    "jdata-master/src/features/build_features.py": {
        "prepare_train_pair": {
            "name": "prepare_train_pair",
            "location": 70,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[int]",
                    "pandas.DataFrame",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "get_actions": {
            "name": "get_actions",
            "location": 94,
            "return": [
                "Generator[(Tuple[(str, Any, str)], Any, None)]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]"
                ],
                "actions": [
                    "List",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,str]"
                ],
                "version": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "get_actions.get_suffix": {
            "name": "get_suffix",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "int",
                    "tuple"
                ]
            }
        }
    },
    "jdata-master/src/features/helper.py": {
        "create_group_interval_features": {
            "name": "create_group_interval_features",
            "location": 7,
            "return": [
                "bool",
                "str",
                "allennlp.data.dataseDataset",
                "Dict[str,str]",
                "float",
                "Set[str]"
            ],
            "arguments": {
                "train": [
                    "int"
                ],
                "train_pair": [
                    "int"
                ],
                "gp": [
                    "int"
                ],
                "tc": [
                    "int"
                ],
                "suffix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "merge_time_window_agg": {
            "name": "merge_time_window_agg",
            "location": 16,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "List[str]",
                "Tuple",
                "Mapping",
                "Dict[str,int]",
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "List[Any]",
                    "List[str]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]"
                ],
                "target": [
                    "List[str]",
                    "Mapping",
                    "Dict[str,int]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "rules": [
                    "str",
                    "Callable",
                    "List",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "windows": [
                    "bool",
                    "Optional[str]"
                ],
                "time_column": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[List[str]]"
                ],
                "end_time_unix": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "suffix": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "jdata-master/src/features/__init__.py": {
        "drop_duplicated_columns": {
            "name": "drop_duplicated_columns",
            "location": 280,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "df": [
                    "List",
                    "pandas.DataFrame"
                ]
            }
        },
        "count_unique_ratio": {
            "name": "count_unique_ratio",
            "location": 286,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Callable[[int], int]"
                ]
            }
        },
        "Feature.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Feature.name": {
            "name": "name",
            "location": 18,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feature.create": {
            "name": "create",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feature.create_and_merge": {
            "name": "create_and_merge",
            "location": 25,
            "return": [
                "Dict[str, int]",
                "float",
                "bool",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "bool",
                    "pandas.DataFrame"
                ],
                "how": [
                    "Text",
                    "Callable[[Mapping],Awaitable]",
                    "Dict"
                ],
                "suffix": [
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "Feature.concat": {
            "name": "concat",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rslt": [
                    "str",
                    "List[str]"
                ],
                "axis": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "join": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Feature.get_rename_mapper": {
            "name": "get_rename_mapper",
            "location": 43,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "old": [
                    "List",
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "new": [
                    "List",
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "suffix": [
                    "Match",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[int]",
                    "Dict",
                    "List",
                    "Tuple[Union[list[int],list[int]]]",
                    "Iterable[str]",
                    "Tuple[List[int],List[int]]"
                ]
            }
        },
        "Feature.categorical_features": {
            "name": "categorical_features",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "UserItemCrossTimeFeature.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "pandas.DataFrame",
                    "None",
                    "Optional[str]"
                ],
                "user_column": [
                    "int",
                    "List[str]"
                ],
                "item_column": [
                    "str",
                    "Optional[int]",
                    "Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "time_column": [
                    "int",
                    "str",
                    "List[int]",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "end_time": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "UserItemCrossTimeFeature.create": {
            "name": "create",
            "location": 79,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserItemCrossTimeFeature.add_time_diff_features": {
            "name": "add_time_diff_features",
            "location": 117,
            "return": [
                "str",
                "Union[str, int]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int"
                ],
                "ts": [
                    "int"
                ]
            }
        },
        "UserItemCrossTimeFeature.get_columns_dict": {
            "name": "get_columns_dict",
            "location": 123,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserItemCrossTimeFeature.categorical_features": {
            "name": "categorical_features",
            "location": 149,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "GroupIntervalTimeFeature.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "pandas.DataFrame",
                    "bool",
                    "str",
                    "Optional[object]"
                ],
                "group_column": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "time_column": [
                    "int",
                    "str",
                    "pandas.DataFrame"
                ],
                "shift": [
                    "int",
                    "pandas.DataFrame",
                    "str"
                ]
            }
        },
        "GroupIntervalTimeFeature.create": {
            "name": "create",
            "location": 162,
            "return": [
                "str",
                "bool",
                "Dict[str,int]",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupIntervalTimeFeature.categorical_features": {
            "name": "categorical_features",
            "location": 186,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "AggFeature.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "target": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "rules": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "AggFeature.create": {
            "name": "create",
            "location": 198,
            "return": [
                "bool",
                "List[int]",
                "float",
                "allennlp.data.dataseDataset",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggFeature.categorical_features": {
            "name": "categorical_features",
            "location": 233,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        }
    },
    "jdata-master/src/models/choose_sampler.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jdata-master/src/models/metrics.py": {
        "division": {
            "name": "division",
            "location": 7,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float,int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float,int]"
                ]
            }
        },
        "multidim_intersect": {
            "name": "multidim_intersect",
            "location": 13,
            "return": [
                "set"
            ],
            "arguments": {
                "arr1": [
                    "List[int]",
                    "List",
                    "str",
                    "Set[int]",
                    "Union[tuple,list]",
                    "Tuple"
                ],
                "arr2": [
                    "List[int]",
                    "List",
                    "str",
                    "Set[int]",
                    "Union[tuple,list]",
                    "Tuple"
                ]
            }
        },
        "jdata_fscorer": {
            "name": "jdata_fscorer",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "user_sku_pair": [
                    "Dict",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ]
            }
        },
        "get_jdata_scoring": {
            "name": "get_jdata_scoring",
            "location": 217,
            "return": [
                "Tuple[(Dict[(str, Union[(JDataScore, str)])], JDataScore)]"
            ],
            "arguments": {
                "user_sku_pair": [
                    "str",
                    "None",
                    "Dict",
                    "[dict]"
                ]
            }
        },
        "jdata_fscorer.f11": {
            "name": "f11",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "pred_pair": [
                    "pandas.DataFrame",
                    "bool"
                ],
                "y_pair": [
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "jdata_fscorer.f12": {
            "name": "f12",
            "location": 31,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "pred_pair": [
                    "int",
                    "List['cirq.Qid']",
                    "pandas.DataFrame",
                    "bool"
                ],
                "y_pair": [
                    "int",
                    "List['cirq.Qid']",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "jdata_fscorer.prepare_y_pair": {
            "name": "prepare_y_pair",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None",
                    "int"
                ]
            }
        },
        "jdata_fscorer.prepare_pair": {
            "name": "prepare_pair",
            "location": 51,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "clf": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "X": [
                    "str",
                    "int",
                    "bytes",
                    "List[int]",
                    "pandas.DataFrame",
                    "List",
                    "Union[int,str]",
                    "bool"
                ],
                "y": [
                    "int"
                ],
                "indices": [
                    "bool",
                    "pandas.DataFrame"
                ],
                "threshold": [
                    "float",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "jdata_fscorer.score": {
            "name": "score",
            "location": 82,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "clf": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "X": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "y": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "indices": [
                    "float",
                    "Iterable[T]",
                    "None",
                    "int"
                ]
            }
        },
        "JDataScore.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_sku_pair": [
                    "None"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "JDataScore.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "numpy.ndarray",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "float",
                    "numpy.ndarray"
                ],
                "X": [
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ],
                "indices": [
                    "float",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "JDataScore.save": {
            "name": "save",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JDataScore.get": {
            "name": "get",
            "location": 115,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "Text",
                    "bool",
                    "int",
                    "Iterable[dict]",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "JDataScore.f11": {
            "name": "f11",
            "location": 127,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "pred_pair": [
                    "pandas.DataFrame",
                    "bool"
                ],
                "y_pair": [
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "JDataScore.f12": {
            "name": "f12",
            "location": 145,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "pred_pair": [
                    "int",
                    "List['cirq.Qid']",
                    "pandas.DataFrame",
                    "bool"
                ],
                "y_pair": [
                    "int",
                    "List['cirq.Qid']",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "JDataScore.prepare_y_pair": {
            "name": "prepare_y_pair",
            "location": 163,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None",
                    "int"
                ]
            }
        },
        "JDataScore.prepare_pair": {
            "name": "prepare_pair",
            "location": 172,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "X": [
                    "str",
                    "int",
                    "bytes",
                    "List[int]",
                    "pandas.DataFrame",
                    "List",
                    "Union[int,str]",
                    "bool"
                ],
                "y": [
                    "int"
                ],
                "indices": [
                    "bool",
                    "pandas.DataFrame"
                ],
                "threshold": [
                    "float",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "JDataScore.score": {
            "name": "score",
            "location": 206,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "X": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "y": [
                    "float",
                    "Iterable[T]",
                    "int"
                ],
                "indices": [
                    "float",
                    "Iterable[T]",
                    "None",
                    "int"
                ]
            }
        }
    },
    "jdata-master/src/models/monkey_patch.py": {
        "is_use_index": {
            "name": "is_use_index",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "use_or_not": {
            "name": "use_or_not",
            "location": 19,
            "return": [
                "Optional[_T1]"
            ],
            "arguments": {
                "use": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "arr": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "_fit_and_score": {
            "name": "_fit_and_score",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "estimator": [
                    "bool"
                ],
                "X": [
                    "List[str]",
                    "bool",
                    "Dict[str,int]",
                    "Callable",
                    "int"
                ],
                "y": [
                    "bool"
                ],
                "scorer": [
                    "Dict[str,Any]",
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "train": [
                    "List[str]",
                    "bool",
                    "Dict[str,int]",
                    "Callable",
                    "int"
                ],
                "test": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "parameters": [
                    "bool",
                    "str",
                    "Type",
                    "Callable",
                    "numpy.ndarray",
                    "Type[SerializationDialect]",
                    "None",
                    "Optional[numpy.ndarray]"
                ],
                "fit_params": [
                    "float",
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "return_train_score": [
                    "bool",
                    "int"
                ],
                "return_parameters": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "return_n_test_samples": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "return_times": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "return_estimator": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "error_score": [
                    "Text",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Union[np.ndarray,Dict[str,np.ndarray],loompy.LayerManager]"
                ]
            }
        },
        "_score": {
            "name": "_score",
            "location": 160,
            "return": [
                "Iterable[str]",
                "dict",
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "estimator": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "X_test": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "y_test": [
                    "bool",
                    "str",
                    "Optional[List[int]]",
                    "List[int]",
                    "None",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "scorer": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "is_multimetric": [
                    "bool",
                    "float"
                ],
                "indices": [
                    "None",
                    "Optional[List[int]]",
                    "List[int]",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "bool"
                ]
            }
        },
        "_multimetric_score": {
            "name": "_multimetric_score",
            "location": 192,
            "return": [
                "dict"
            ],
            "arguments": {
                "estimator": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "X_test": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "y_test": [
                    "float",
                    "Optional[float]",
                    "bool",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "Optional[numpy.ndarray]",
                    "int"
                ],
                "scorers": [
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,float]",
                    "Dict",
                    "Dict[str,int]",
                    "Union[AsyncIterable[Any],Iterable[Any]]"
                ],
                "indices": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Callable]",
                    "float",
                    "Optional[numpy.ndarray]",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jdata-master/src/models/predict_model.py": {},
    "jdata-master/src/models/sampling.py": {
        "sampler": {
            "name": "sampler",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "TomekLinks",
                "str",
                "AllKNN",
                "RepeatedEditedNearestNeighbours",
                "EditedNearestNeighbours",
                "NearMiss",
                "RandomUnderSampler"
            ],
            "arguments": {
                "name": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "bool",
                    "Any",
                    "Optional[Any]",
                    "None"
                ],
                "ratio": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Union[str,None]"
                ],
                "random_state": [
                    "int",
                    "bool",
                    "str",
                    "Union[str,None]"
                ],
                "return_indices": [
                    "bool",
                    "str",
                    "int",
                    "Union[str,None]"
                ]
            }
        },
        "Sampler.name": {
            "name": "name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.fit_sample": {
            "name": "fit_sample",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        }
    },
    "jdata-master/src/models/train_model.py": {},
    "jdata-master/src/models/__init__.py": {
        "get_X_y": {
            "name": "get_X_y",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "dataset": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "Union[tuple,list]",
                    "Tuple",
                    "bool",
                    "List"
                ]
            }
        },
        "merge_scoring_metrics": {
            "name": "merge_scoring_metrics",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "int",
                    "IO[str]",
                    "IO"
                ],
                "scorer": [
                    "Dict"
                ]
            }
        },
        "score_whole_dataset": {
            "name": "score_whole_dataset",
            "location": 24,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "clf": [
                    "int",
                    "List[list]",
                    "float",
                    "List[float]",
                    "Union[int, float]",
                    "Iterable[Any]"
                ],
                "dataset": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Optional[int]"
                ],
                "pre_train": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Model.name": {
            "name": "name",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.train": {
            "name": "train",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "pred": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Model.dump": {
            "name": "dump",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.scale_pos_weight": {
            "name": "scale_pos_weight",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.get_tree_feature": {
            "name": "get_tree_feature",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.get_feature_importance": {
            "name": "get_feature_importance",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeModel.plot_importance": {
            "name": "plot_importance",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jdata-master/src/visualization/visualize.py": {},
    "jdata-master/src/visualization/__init__.py": {},
    "jdata-master/tests/__init__.py": {},
    "jdata-master/tests/models/test_metrics.py": {
        "get_jdata_test_cases": {
            "name": "get_jdata_test_cases",
            "location": 38,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, np.ndarray)]"
            ],
            "arguments": {}
        },
        "test_jdata_fscorer": {
            "name": "test_jdata_fscorer",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jdata_fscorer_class": {
            "name": "test_jdata_fscorer_class",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockEstimatorWithPredefinedPrediction.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred_map": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction.fit": {
            "name": "fit",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction._decision_function": {
            "name": "_decision_function",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "T"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction.predict": {
            "name": "predict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "threshold": [
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction.predict_proba": {
            "name": "predict_proba",
            "location": 28,
            "return": [
                "bool",
                "Counter",
                "int"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "Dict",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction.set": {
            "name": "set",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "django.db.models.Model",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "pred": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "django.db.models.Model",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ]
            }
        },
        "MockEstimatorWithPredefinedPrediction.hash": {
            "name": "hash",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "jdata-master/tests/models/__init__.py": {}
}
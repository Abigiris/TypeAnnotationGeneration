{
    "jfly.github.io-master/resize_images.py": {
        "is_image": {
            "name": "is_image",
            "location": 18,
            "return": [
                "Match[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, dict]",
                    "dict[str, dict[, ]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "is_master_image": {
            "name": "is_master_image",
            "location": 21,
            "return": [
                "Union[(bool, Match[str])]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dataclasses.Field"
                ]
            }
        },
        "is_thumbnail_image": {
            "name": "is_thumbnail_image",
            "location": 24,
            "return": [
                "Match[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_thumbnail_name": {
            "name": "get_thumbnail_name",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "get_image_metadata": {
            "name": "get_image_metadata",
            "location": 51,
            "return": [
                "ImageMetadata"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "resize": {
            "name": "resize",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Dimension.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "Dimension"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDimension]"
                ],
                "s": [
                    "str",
                    "Optional[str]",
                    "Type[object]"
                ]
            }
        },
        "Dimension.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jfly.github.io-master/misc/b99-islanders/main.py": {
        "operate_scale": {
            "name": "operate_scale",
            "location": 131,
            "return": [
                "Dict[(ScaleResult, Islanders)]"
            ],
            "arguments": {
                "operation": [
                    "ScaleOperation"
                ]
            }
        },
        "get_operations": {
            "name": "get_operations",
            "location": 179,
            "return": [
                "FrozenSet[ScaleOperation]"
            ],
            "arguments": {
                "islanders": [
                    "Islanders"
                ]
            }
        },
        "get_worst_result_score": {
            "name": "get_worst_result_score",
            "location": 233,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "islanders": [
                    "Islanders"
                ],
                "operation": [
                    "ScaleOperation"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 247,
            "return": [
                "ScoredOperation",
                "None"
            ],
            "arguments": {
                "islanders": []
            }
        },
        "test": {
            "name": "test",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_tree": {
            "name": "build_tree",
            "location": 298,
            "return": [
                "Node"
            ],
            "arguments": {
                "original_islanders": [
                    "Islanders"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Weight.to_unicode": {
            "name": "to_unicode",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Islanders.__post_init__": {
            "name": "__post_init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Islanders.is_solved": {
            "name": "is_solved",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Islanders.total_count": {
            "name": "total_count",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Islanders.to_count_by_weight": {
            "name": "to_count_by_weight",
            "location": 64,
            "return": [
                "Dict[(Weight, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Islanders.__add__": {
            "name": "__add__",
            "location": 73,
            "return": [
                "Islanders"
            ],
            "arguments": {
                "self": [
                    "_TIslanders"
                ],
                "other": []
            }
        },
        "Islanders.__sub__": {
            "name": "__sub__",
            "location": 81,
            "return": [
                "Islanders"
            ],
            "arguments": {
                "self": [
                    "_TIslanders"
                ],
                "other": []
            }
        },
        "Islanders.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleOperation.get_not_on_scale": {
            "name": "get_not_on_scale",
            "location": 105,
            "return": [
                "Islanders"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleOperation.__post_init__": {
            "name": "__post_init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleOperation.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "islanders": [
                    "Islanders"
                ],
                "parent": [
                    "Optional[Node]"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jfly.github.io-master/misc/ipp-passport/board.py": {
        "northwestmost_location": {
            "name": "northwestmost_location",
            "location": 7,
            "return": [
                "str",
                "list[str]",
                "Callable[[Any], bool]",
                "int",
                "float",
                "Dict[int, dict]"
            ],
            "arguments": {
                "locations": [
                    "int",
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "PlacedPiece.board_locations": {
            "name": "board_locations",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixel_str": [
                    "Sequence[int]",
                    "str",
                    "typing.Sequence[int]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "placed_pieces": [
                    "\"Node\"",
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Board.can_place_pixel_at": {
            "name": "can_place_pixel_at",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "int",
                    "Optional[Type]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "Board.can_place_piece": {
            "name": "can_place_piece",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "placed_piece": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Board.is_full": {
            "name": "is_full",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_unfilled_locations": {
            "name": "get_unfilled_locations",
            "location": 51,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_board_with_piece_placed": {
            "name": "get_board_with_piece_placed",
            "location": 54,
            "return": [
                "Board"
            ],
            "arguments": {
                "self": [
                    "_TBoard"
                ],
                "placed_piece": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Board.get_unfilled_region_at": {
            "name": "get_unfilled_region_at",
            "location": 59,
            "return": [
                "Set[_T0]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "_T0"
                ]
            }
        },
        "Board.is_unsolvable": {
            "name": "is_unsolvable",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_all_boards_with_piece_placed": {
            "name": "get_all_boards_with_piece_placed",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "piece": [
                    "str",
                    "float"
                ]
            }
        },
        "Board.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jfly.github.io-master/misc/ipp-passport/colors.py": {
        "to_black_bg": {
            "name": "to_black_bg",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "AnyStr",
                    "Iterable[T]"
                ]
            }
        }
    },
    "jfly.github.io-master/misc/ipp-passport/memoize.py": {
        "memoize": {
            "name": "memoize",
            "location": 1,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "memoize.memoized": {
            "name": "memoized",
            "location": 3,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "jfly.github.io-master/misc/ipp-passport/piece.py": {
        "Piece.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixel_str": [
                    "bytes",
                    "str"
                ],
                "char": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "Piece.getPrintablePixel": {
            "name": "getPrintablePixel",
            "location": 13,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Piece.get_variants": {
            "name": "get_variants",
            "location": 17,
            "return": [
                "set[Piece]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jfly.github.io-master/misc/ipp-passport/pixel_thing.py": {
        "grid_to_pixel_str": {
            "name": "grid_to_pixel_str",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[str]",
                    "list[]",
                    "int",
                    "List[str]",
                    "list",
                    "bool"
                ]
            }
        },
        "Location.__add__": {
            "name": "__add__",
            "location": 4,
            "return": [
                "Location"
            ],
            "arguments": {
                "self": [
                    "_TLocation"
                ],
                "other": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Location.__sub__": {
            "name": "__sub__",
            "location": 7,
            "return": [
                "Location"
            ],
            "arguments": {
                "self": [
                    "_TLocation"
                ],
                "other": [
                    "float",
                    "int",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "PixelThing.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixel_str": [
                    "str",
                    "int"
                ]
            }
        },
        "PixelThing.get_pixel_count": {
            "name": "get_pixel_count",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelThing.get_pixel_locations": {
            "name": "get_pixel_locations",
            "location": 23,
            "return": [
                "List[Location]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelThing.width": {
            "name": "width",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelThing.height": {
            "name": "height",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelThing.mirror": {
            "name": "mirror",
            "location": 37,
            "return": [
                "PixelThing"
            ],
            "arguments": {
                "self": [
                    "_TPixelThing"
                ]
            }
        },
        "PixelThing.rotate_clockwise_90": {
            "name": "rotate_clockwise_90",
            "location": 41,
            "return": [
                "PixelThing"
            ],
            "arguments": {
                "self": [
                    "_TPixelThing"
                ]
            }
        },
        "PixelThing.__hash__": {
            "name": "__hash__",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelThing.__eq__": {
            "name": "__eq__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "PixelThing.to_pixel_str": {
            "name": "to_pixel_str",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jfly.github.io-master/misc/ipp-passport/search.py": {
        "search": {
            "name": "search",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "starting_board": [
                    "int"
                ],
                "starting_pieces": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "jibrel_test_assignment-master/custom_types.py": {},
    "jibrel_test_assignment-master/jibrel.py": {},
    "jibrel_test_assignment-master/log_analyzer.py": {
        "calculate": {
            "name": "calculate",
            "location": 41,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "events": []
            }
        },
        "build_requests": {
            "name": "build_requests",
            "location": 52,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "events": [
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "count_failed": {
            "name": "count_failed",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "requests": []
            }
        },
        "calculate_percentile": {
            "name": "calculate_percentile",
            "location": 82,
            "return": [
                "int",
                "List[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "times": [
                    "int",
                    "list",
                    "List[int]",
                    "tuple",
                    "Sized"
                ],
                "percent": [
                    "float",
                    "List[int]",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.request_time": {
            "name": "request_time",
            "location": 25,
            "return": [
                "int",
                "Optional[str]",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.is_contains_fail": {
            "name": "is_contains_fail",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jibrel_test_assignment-master/log_parser.py": {
        "log_file": {
            "name": "log_file",
            "location": 9,
            "return": [
                "Generator[(Tuple[(int, int, Any, Optional[int], Any)], Any, None)]"
            ],
            "arguments": {
                "file_object": [
                    "List[str]",
                    "IO[str]",
                    "IO[Any]",
                    "Sequence[str]"
                ],
                "throw": [
                    "str",
                    "int"
                ]
            }
        },
        "convert_line": {
            "name": "convert_line",
            "location": 23,
            "return": [
                "Optional[Tuple[(int, int, Any, Optional[int], Any)]]"
            ],
            "arguments": {
                "log_line": [
                    "str"
                ],
                "throw": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    }
}
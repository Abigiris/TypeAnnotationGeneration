{
    "jira_timemachine-main/setup.py": {},
    "jira_timemachine-main/docs/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "jira_timemachine-main/src/jira_timemachine/__init__.py": {
        "get_tempo_client": {
            "name": "get_tempo_client",
            "location": 251,
            "return": [
                "TempoClient"
            ],
            "arguments": {
                "config": [
                    "str"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 257,
            "return": [
                "Union[(JIRAClient, TempoClient)]"
            ],
            "arguments": {
                "config": [
                    "Dict"
                ]
            }
        },
        "get_worklogs": {
            "name": "get_worklogs",
            "location": 264,
            "return": [
                "Generator[(Worklog, Any, None)]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "since": [
                    "int",
                    "str"
                ],
                "all_users": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Callable[[str],None]",
                    "str"
                ]
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": [
                    "Sequence[int]",
                    "str",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "match_worklog": {
            "name": "match_worklog",
            "location": 304,
            "return": [
                "None",
                "Type",
                "str",
                "Optional[str]",
                "bool",
                "Tuple[List[str],Optional[str]]"
            ],
            "arguments": {
                "source_worklogs": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str,Any]]"
                ],
                "worklog": [
                    "str",
                    "Tuple[type]",
                    "Tuple[Type]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 325,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Parameter",
                    "bool",
                    "List"
                ],
                "param": [
                    "str",
                    "click.Parameter",
                    "bool",
                    "List"
                ],
                "value": [
                    "str",
                    "click.Context",
                    "bytes"
                ]
            }
        },
        "timemachine": {
            "name": "timemachine",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "days": [
                    "Dict"
                ]
            }
        },
        "timecheck": {
            "name": "timecheck",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "bytes"
                ],
                "since": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "List",
                    "T",
                    "Dict"
                ],
                "is_pm": [
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "Worklog.to_tempo": {
            "name": "to_tempo",
            "location": 91,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempoClient.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tempo_token": [
                    "str"
                ],
                "account_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Set[int]",
                    "None"
                ]
            }
        },
        "TempoClient.get_worklogs": {
            "name": "get_worklogs",
            "location": 117,
            "return": [
                "Generator[(Worklog, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "from_date": [
                    "str",
                    "List",
                    "Set[str]",
                    "datetime.date",
                    "datetime.timedelta"
                ],
                "single_user": [
                    "bool",
                    "str"
                ]
            }
        },
        "TempoClient.update_worklog": {
            "name": "update_worklog",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worklog": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TempoClient.post_worklog": {
            "name": "post_worklog",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worklog": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseJIRAClient.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]"
                ]
            }
        },
        "JIRAClient.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "JIRAClient._issues": {
            "name": "_issues",
            "location": 210,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Callable[[str],bool]",
                    "Dict",
                    "Callable[str,bool]",
                    "Optional[libkol.Item]",
                    "None",
                    "Union[int,slice]",
                    "int"
                ]
            }
        },
        "JIRAClient.get_worklogs": {
            "name": "get_worklogs",
            "location": 229,
            "return": [
                "Generator[(Worklog, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "from_date": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "single_user": [
                    "bool",
                    "str"
                ]
            }
        },
        "timecheck.worklog_key": {
            "name": "worklog_key",
            "location": 398,
            "return": [
                "Tuple",
                "str",
                "List[str]"
            ],
            "arguments": {
                "worklog": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        }
    },
    "jira_timemachine-main/tests/test_unit.py": {
        "test_worklog_to_tempo": {
            "name": "test_worklog_to_tempo",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_worklogs": {
            "name": "test_get_worklogs",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "all_users": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "single_user": []
            }
        },
        "test_format_time": {
            "name": "test_format_time",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "bool"
                ],
                "result": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "test_match_worklog": {
            "name": "test_match_worklog",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_config_ok": {
            "name": "test_get_config_ok",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_config_invalid": {
            "name": "test_get_config_invalid",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_worklog.make": {
            "name": "make",
            "location": 113,
            "return": [
                "Worklog",
                "bool",
                "int",
                "Optional[Any]",
                "OrderedDict",
                "Union[type,Tuple[type,...]]"
            ],
            "arguments": {
                "i": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[Dict[str, str]]",
                    "Type[T]"
                ],
                "description": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[Dict[str, str]]",
                    "Type[T]"
                ]
            }
        }
    },
    "jira_timemachine-main/tests/__init__.py": {}
}
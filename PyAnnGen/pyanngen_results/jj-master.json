{
    "jj-master/setup.py": {
        "find_required": {
            "name": "find_required",
            "location": 4,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "find_dev_required": {
            "name": "find_dev_required",
            "location": 9,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "jj-master/examples/custom_matcher/body_matcher.py": {
        "match_body_key": {
            "name": "match_body_key",
            "location": 36,
            "return": [
                "BodyKeyMatcher",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "Union[str, int]",
                    "str",
                    "Tuple[str, str]",
                    "Optional[Callable]"
                ]
            }
        },
        "BodyKeyMatcher.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "BodyKeyMatcher.__packed__": {
            "name": "__packed__",
            "location": 25,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyKeyMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 29,
            "return": [
                "Sequence[str]",
                "Dict[str, str]",
                "bool",
                "Union[str, bytes]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "jj-master/examples/custom_matcher/start_client.py": {},
    "jj-master/examples/custom_matcher/start_server.py": {},
    "jj-master/examples/expiration_policy/start_client.py": {},
    "jj-master/examples/expiration_policy/start_server.py": {},
    "jj-master/examples/https/start_client.py": {},
    "jj-master/jj/_core.py": {
        "match_method": {
            "name": "match_method",
            "location": 59,
            "return": [
                "MethodMatcher",
                "str",
                "Mapping[str,str]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "method": [
                    "matchers.request_matchers.StrOrAttrMatcher",
                    "str",
                    "dict"
                ]
            }
        },
        "match_methods": {
            "name": "match_methods",
            "location": 63,
            "return": [
                "AnyMatcher",
                "int",
                "float",
                "Sequence[float]"
            ],
            "arguments": {}
        },
        "match_path": {
            "name": "match_path",
            "location": 71,
            "return": [
                "PathMatcher",
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "matchers.request_matchers.StrOrAttrMatcher",
                    "bool",
                    "str"
                ]
            }
        },
        "match_headers": {
            "name": "match_headers",
            "location": 75,
            "return": [
                "HeaderMatcher",
                "str",
                "Dict[str,Union[str,int]]",
                "Dict",
                "Dict[str,Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "headers": [
                    "aiohttp.web.Request",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Mapping"
                ]
            }
        },
        "match_header": {
            "name": "match_header",
            "location": 79,
            "return": [
                "HeaderMatcher",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "matchers.request_matchers.StrOrAttrMatcher",
                    "Tuple[str]"
                ],
                "value": [
                    "str",
                    "matchers.request_matchers.StrOrAttrMatcher",
                    "Tuple[str]"
                ]
            }
        },
        "match_params": {
            "name": "match_params",
            "location": 83,
            "return": [
                "ParamMatcher",
                "IO[str]",
                "Dict[str,Any]",
                "str",
                "List[matchers.ResolvableMatcher]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "float",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "match_param": {
            "name": "match_param",
            "location": 87,
            "return": [
                "ParamMatcher",
                "Optional[str]",
                "str",
                "Dict[str,Dict]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "matchers.request_matchers.StrOrAttrMatcher"
                ],
                "value": [
                    "str",
                    "matchers.request_matchers.StrOrAttrMatcher"
                ]
            }
        },
        "match_all": {
            "name": "match_all",
            "location": 91,
            "return": [
                "AllMatcher",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "str",
                "Set",
                "bool"
            ],
            "arguments": {
                "matchers": [
                    "List[matchers.ResolvableMatcher]",
                    "Tuple[bytes]",
                    "float",
                    "int"
                ]
            }
        },
        "match_any": {
            "name": "match_any",
            "location": 95,
            "return": [
                "AnyMatcher",
                "IO[str]",
                "Dict[str,Any]",
                "str",
                "List[matchers.ResolvableMatcher]"
            ],
            "arguments": {
                "matchers": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "str",
                    "List[matchers.ResolvableMatcher]"
                ]
            }
        },
        "match": {
            "name": "match",
            "location": 99,
            "return": [
                "AllMatcher",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "method": [
                    "None",
                    "str",
                    "List[str]",
                    "Type"
                ],
                "path": [
                    "None",
                    "str",
                    "aiohttp.web.Application"
                ],
                "params": [
                    "None",
                    "str",
                    "Optional[Callable[...,Any]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "headers": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "exceptions": [
                    "List[Exception]",
                    "int",
                    "Dict[str, str]",
                    "float",
                    "bool"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "DefaultApp",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/_version.py": {},
    "jj-master/jj/__init__.py": {},
    "jj-master/jj/apps/_abstract_app.py": {},
    "jj-master/jj/apps/_base_app.py": {
        "_register": {
            "name": "_register",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[float]",
                    "Callable",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_deregister": {
            "name": "_deregister",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "Mapping[str, Any]"
                ],
                "name": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "define_app": {
            "name": "define_app",
            "location": 48,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Callable[[Any],bool]",
                    "int"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 64,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "None",
                    "Optional[str]",
                    "Optional[resolvers.Resolver]",
                    "str",
                    "Dict",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "_Registrar.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ],
                "namespace": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[Hashable, Any]",
                    "List[str]"
                ]
            }
        },
        "_Registrar.__setattr__": {
            "name": "__setattr__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "list"
                ],
                "value": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "_Registrar.__delattr__": {
            "name": "__delattr__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "BaseApp.resolver": {
            "name": "resolver",
            "location": 44,
            "return": [
                "resolvers.Resolver",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/apps/_default_app.py": {
        "_Singleton.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        }
    },
    "jj-master/jj/apps/__init__.py": {},
    "jj-master/jj/expiration_policy/_expiration_policy.py": {
        "ExpirationPolicy.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/expiration_policy/_expire_after_requests.py": {
        "ExpireAfterRequests.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_requests_count": [
                    "int",
                    "bytes"
                ]
            }
        },
        "ExpireAfterRequests.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpireAfterRequests.__packed__": {
            "name": "__packed__",
            "location": 29,
            "return": [
                "Dict[Text,]",
                "Union[str,List[str]]",
                "Dict",
                "Dict[str,Any]",
                "List[Tuple[int,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpireAfterRequests.__unpacked__": {
            "name": "__unpacked__",
            "location": 35,
            "return": [
                "int",
                "Dict[str, int]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "Union[int, float]"
                ]
            }
        }
    },
    "jj-master/jj/expiration_policy/_expire_never.py": {
        "ExpireNever.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpireNever.__packed__": {
            "name": "__packed__",
            "location": 19,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,int]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpireNever.__unpacked__": {
            "name": "__unpacked__",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/expiration_policy/__init__.py": {},
    "jj-master/jj/handlers/_handler.py": {},
    "jj-master/jj/handlers/_handler_function.py": {},
    "jj-master/jj/handlers/__init__.py": {},
    "jj-master/jj/http/__init__.py": {},
    "jj-master/jj/http/codes/__init__.py": {},
    "jj-master/jj/http/headers/__init__.py": {},
    "jj-master/jj/http/methods/__init__.py": {},
    "jj-master/jj/logs/_filter.py": {
        "Filter.filter_request": {
            "name": "filter_request",
            "location": 11,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "flask.Request",
                    "dict"
                ],
                "record": [
                    "Dict[str, Any]",
                    "Tuple[str, str, str]",
                    "dict",
                    "set",
                    "Iterator",
                    "bool"
                ]
            }
        },
        "Filter.filter_response": {
            "name": "filter_response",
            "location": 14,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float",
                    "dict",
                    "Dict[str, str]",
                    "responses.Response",
                    "requests.Request",
                    "_models.Response"
                ],
                "request": [
                    "float",
                    "dict",
                    "Dict[str, str]",
                    "responses.Response",
                    "requests.Request",
                    "_models.Response"
                ],
                "record": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Tuple[List[str], List[str], List[str]]",
                    "int",
                    "Response"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 17,
            "return": [
                "List[Dict[str, Any]]",
                "List[Callable]",
                "Optional[Tuple]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Optional[Tuple]",
                    "List[Callable]"
                ]
            }
        }
    },
    "jj-master/jj/logs/_logger.py": {
        "Logger.clearHandlers": {
            "name": "clearHandlers",
            "location": 7,
            "return": [
                "Logger",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/logs/__init__.py": {},
    "jj-master/jj/logs/formatters/_formatter.py": {
        "Formatter.format_request": {
            "name": "format_request",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "str",
                    "Request",
                    "aiohttp.web.Request",
                    "bool"
                ],
                "record": [
                    "logging.LogRecord",
                    "str",
                    "dict",
                    "requests.Session"
                ]
            }
        },
        "Formatter.format_response": {
            "name": "format_response",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "responses.Response",
                    "requests.Request",
                    "dict",
                    "aiohttp.web.Request",
                    "pyramid.response.Response"
                ],
                "request": [
                    "responses.Response",
                    "requests.Request",
                    "dict",
                    "aiohttp.web.Request",
                    "pyramid.response.Response"
                ],
                "record": [
                    "logging.LogRecord",
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "Formatter.format": {
            "name": "format",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Optional[Tuple]",
                    "Dict[str, Any]",
                    "dict",
                    "List[Callable]"
                ]
            }
        }
    },
    "jj-master/jj/logs/formatters/_simple_formatter.py": {
        "SimpleFormatter.format_request": {
            "name": "format_request",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "scrapy.http.Request",
                    "flask.Request"
                ],
                "record": [
                    "requests.Request",
                    "str",
                    "Request",
                    "aiohttp.web.Request",
                    "bool"
                ]
            }
        },
        "SimpleFormatter.format_response": {
            "name": "format_response",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "flask.Response",
                    "requests.Response",
                    "requests.models.Response",
                    "dict",
                    "Dict[str, Any]"
                ],
                "request": [
                    "responses.Response",
                    "requests.Request",
                    "dict",
                    "aiohttp.web.Request",
                    "pyramid.response.Response"
                ],
                "record": [
                    "responses.Response",
                    "requests.Request",
                    "dict",
                    "aiohttp.web.Request",
                    "pyramid.response.Response"
                ]
            }
        }
    },
    "jj-master/jj/logs/formatters/__init__.py": {},
    "jj-master/jj/matchers/_resolvable_matcher.py": {
        "ResolvableMatcher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolvableMatcher.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "list",
                    "set",
                    "Set[str]"
                ]
            }
        },
        "ResolvableMatcher.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/matchers/__init__.py": {
        "_exists.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_attribute_matcher.py": {
        "AttributeMatcher.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_contain_matcher.py": {
        "ContainMatcher.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ContainMatcher.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "Text",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainMatcher.__packed__": {
            "name": "__packed__",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 25,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "NotContainMatcher.__packed__": {
            "name": "__packed__",
            "location": 34,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotContainMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 38,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_equal_matcher.py": {
        "EqualMatcher.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EqualMatcher.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "Text",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqualMatcher.__packed__": {
            "name": "__packed__",
            "location": 21,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqualMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 25,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "NotEqualMatcher.__packed__": {
            "name": "__packed__",
            "location": 34,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotEqualMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 38,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_exist_matcher.py": {
        "ExistMatcher.__packed__": {
            "name": "__packed__",
            "location": 15,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 19,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_multi_dict_matcher.py": {
        "MultiDictMatcher.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "bool",
                    "Dict[int, List[Any]]",
                    "Optional[float]",
                    "dict"
                ]
            }
        },
        "MultiDictMatcher.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "Text",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDictMatcher.__packed__": {
            "name": "__packed__",
            "location": 44,
            "return": [
                "Dict[Text,list[list]]",
                "str",
                "Dict[str,str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDictMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 49,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_regex_matcher.py": {
        "RegexMatcher.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "list",
                    "int",
                    "str"
                ],
                "flags": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "RegexMatcher.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "Text",
                "str",
                "Dict[str,Any]",
                "bool",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexMatcher.__packed__": {
            "name": "__packed__",
            "location": 26,
            "return": [
                "Dict[Text,]",
                "str",
                "List[Dict[str,Any]]",
                "bool",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 30,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict",
                    "Sequence[T]"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/_route_matcher.py": {
        "_Resource.match": {
            "name": "match",
            "location": 12,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RouteMatcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RouteMatcher.get_segments": {
            "name": "get_segments",
            "location": 22,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RouteMatcher.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteMatcher.__packed__": {
            "name": "__packed__",
            "location": 31,
            "return": [
                "Dict[Text,]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "jj-master/jj/matchers/attribute_matchers/__init__.py": {},
    "jj-master/jj/matchers/logical_matchers/_all_matcher.py": {
        "AllMatcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matchers": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AllMatcher.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "Text",
                "str",
                "Mapping[str,Any]",
                "Dict[str,Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMatcher.__packed__": {
            "name": "__packed__",
            "location": 30,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "jj-master/jj/matchers/logical_matchers/_any_matcher.py": {
        "AnyMatcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matchers": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AnyMatcher.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "Text",
                "str",
                "Mapping[str,Any]",
                "Dict[str,Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyMatcher.__packed__": {
            "name": "__packed__",
            "location": 30,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "jj-master/jj/matchers/logical_matchers/_logical_matcher.py": {},
    "jj-master/jj/matchers/logical_matchers/__init__.py": {},
    "jj-master/jj/matchers/request_matchers/_header_matcher.py": {
        "HeaderMatcher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict",
                    "str",
                    "requests.Response"
                ]
            }
        },
        "HeaderMatcher.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderMatcher.__packed__": {
            "name": "__packed__",
            "location": 30,
            "return": [
                "Dict[Text,]",
                "Dict",
                "int",
                "str",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 34,
            "return": [
                "str",
                "int",
                "Union[str, Dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "resolvers.Resolver",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/matchers/request_matchers/_method_matcher.py": {
        "MethodMatcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bytes",
                    "dict",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MethodMatcher.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodMatcher.__packed__": {
            "name": "__packed__",
            "location": 28,
            "return": [
                "Dict[Text,]",
                "str",
                "Optional[str]",
                "Callable[[str],T]",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 32,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "jj-master/jj/matchers/request_matchers/_param_matcher.py": {
        "ParamMatcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str, List[int]]",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "ParamMatcher.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamMatcher.__packed__": {
            "name": "__packed__",
            "location": 31,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "resolvers.Resolver",
                    "str",
                    "Dict[str, object]"
                ]
            }
        }
    },
    "jj-master/jj/matchers/request_matchers/_path_matcher.py": {
        "PathMatcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str"
                ]
            }
        },
        "PathMatcher.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatcher.__packed__": {
            "name": "__packed__",
            "location": 33,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatcher.__unpacked__": {
            "name": "__unpacked__",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "attribute_matchers.StrOrAttrMatcher",
                    "resolvers.Resolver"
                ]
            }
        }
    },
    "jj-master/jj/matchers/request_matchers/_request_matcher.py": {},
    "jj-master/jj/matchers/request_matchers/__init__.py": {},
    "jj-master/jj/middlewares/_abstract_middleware.py": {
        "AbstractMiddleware.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "None",
                    "int",
                    "Optional[Tuple[int,int]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "jj-master/jj/middlewares/_base_middleware.py": {
        "BaseMiddleware.on_app": {
            "name": "on_app",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Type[apps.AbstractApp]",
                    "bool"
                ]
            }
        },
        "BaseMiddleware.on_handler": {
            "name": "on_handler",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseMiddleware._call_hooks": {
            "name": "_call_hooks",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "app_or_handler": []
            }
        },
        "BaseMiddleware._register_middleware": {
            "name": "_register_middleware",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_or_handler": [],
                "middleware": [
                    "str"
                ]
            }
        },
        "BaseMiddleware.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "app_or_handler": [
                    "IO[str]"
                ]
            }
        }
    },
    "jj-master/jj/middlewares/_logger_middleware.py": {
        "LoggerMiddleware.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "logging.Logger",
                    "resolvers.Resolver",
                    "bool",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "LoggerMiddleware.on_app": {
            "name": "on_app",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "LoggerMiddleware.on_handler": {
            "name": "on_handler",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "List[str]",
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "LoggerMiddleware._register_middleware": {
            "name": "_register_middleware",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_or_handler": [],
                "middleware": [
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/middlewares/_middleware_type.py": {},
    "jj-master/jj/middlewares/_root_middleware.py": {
        "RootMiddleware.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "dict"
                ]
            }
        }
    },
    "jj-master/jj/middlewares/_self_middleware.py": {},
    "jj-master/jj/middlewares/__init__.py": {},
    "jj-master/jj/mock/_mock.py": {
        "Mock.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_factory": [],
                "resolver_factory": [
                    "str"
                ]
            }
        },
        "Mock._decode": {
            "name": "_decode",
            "location": 36,
            "return": [
                "Tuple",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Mock._decode.resolver": {
            "name": "resolver",
            "location": 38,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Tuple[int, Any]]"
                ]
            }
        }
    },
    "jj-master/jj/mock/_mocked.py": {
        "Mocked.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Mocked.history": {
            "name": "history",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mocked.__enter__": {
            "name": "__enter__",
            "location": 60,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mocked.__exit__": {
            "name": "__exit__",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type",
                    "Optional[mypy.types.Type]",
                    "Iterable[str]"
                ],
                "exc_val": [
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type",
                    "Optional[mypy.types.Type]",
                    "Iterable[str]"
                ],
                "exc_tb": [
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type",
                    "Optional[mypy.types.Type]",
                    "Iterable[str]"
                ]
            }
        },
        "Mocked.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "Text",
                "str",
                "Optional[int]",
                "Union[str,Callable]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/_remote_handler.py": {
        "RemoteHandler.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "int",
                    "bool",
                    "list",
                    "Optional[Dict]"
                ],
                "matcher": [
                    "int",
                    "bool",
                    "list",
                    "Optional[Dict]"
                ],
                "response": [
                    "int",
                    "bool",
                    "list",
                    "Optional[Dict]"
                ],
                "expiration_policy": [
                    "None",
                    "int",
                    "bool",
                    "List",
                    "Optional[Dict]"
                ]
            }
        },
        "RemoteHandler.id": {
            "name": "id",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteHandler.matcher": {
            "name": "matcher",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteHandler.response": {
            "name": "response",
            "location": 44,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteHandler.expiration_policy": {
            "name": "expiration_policy",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/_remote_mock.py": {
        "RemoteMock.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "RemoteMock.create_handler": {
            "name": "create_handler",
            "location": 27,
            "return": [
                "RemoteHandler",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "List[Dict[str, Any]]",
                    "aiohttp.web.Request"
                ],
                "response": [
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "List[Dict[str, Any]]",
                    "aiohttp.web.Request"
                ],
                "expiration_policy": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "List[Dict[str,Any]]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "RemoteMock._pack_payload": {
            "name": "_pack_payload",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "jj-master/jj/mock/_remote_response.py": {},
    "jj-master/jj/mock/_system_log_filter.py": {
        "SystemLogFilter.filter_request": {
            "name": "filter_request",
            "location": 11,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "httpx.Request"
                ],
                "record": [
                    "flask.Request",
                    "dict"
                ]
            }
        },
        "SystemLogFilter.filter_response": {
            "name": "filter_response",
            "location": 14,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float",
                    "dict",
                    "Dict[str, str]",
                    "responses.Response",
                    "requests.Request",
                    "_models.Response"
                ],
                "request": [
                    "scrapy.http.Response",
                    "_models.Request",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "record": [
                    "scrapy.http.Response",
                    "_models.Request",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "jj-master/jj/mock/_utils.py": {
        "run_async": {
            "name": "run_async",
            "location": 30,
            "return": [
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "target": [
                    "asyncio.AbstractEventLoop",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Thread.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "int",
                    "bool",
                    "float"
                ],
                "target": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Thread.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/__init__.py": {
        "mocked": {
            "name": "mocked",
            "location": 27,
            "return": [
                "Mocked"
            ],
            "arguments": {
                "matcher": [
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "mock.Mock",
                    "Dict[str, str]"
                ],
                "response": [
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "mock.Mock",
                    "Dict[str, str]"
                ],
                "expiration_policy": [
                    "None",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "mock.Mock",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "jj-master/jj/mock/_history/_body_parser.py": {
        "BodyParser._parse_by_content_type": {
            "name": "_parse_by_content_type",
            "location": 14,
            "return": [
                "Callable[[], None]"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str"
                ],
                "body": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "BodyParser._parse_request_body": {
            "name": "_parse_request_body",
            "location": 27,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "http.MITMRequest",
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BodyParser._parse_response_body": {
            "name": "_parse_response_body",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "BodyParser.parse": {
            "name": "parse",
            "location": 35,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "history_item": []
            }
        }
    },
    "jj-master/jj/mock/_history/_history_adapter.py": {},
    "jj-master/jj/mock/_history/_history_item.py": {},
    "jj-master/jj/mock/_history/_history_repository.py": {
        "HistoryRepository.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/_history/_history_request.py": {
        "HistoryRequest.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.method": {
            "name": "method",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.path": {
            "name": "path",
            "location": 35,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.segments": {
            "name": "segments",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.params": {
            "name": "params",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.headers": {
            "name": "headers",
            "location": 47,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.body": {
            "name": "body",
            "location": 51,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.raw": {
            "name": "raw",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.to_dict": {
            "name": "to_dict",
            "location": 75,
            "return": [
                "Dict[Text,list[list]]",
                "Optional[BaseException]",
                "List[str]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.__packed__": {
            "name": "__packed__",
            "location": 88,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRequest.from_dict": {
            "name": "from_dict",
            "location": 92,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "Match"
            ],
            "arguments": {
                "cls": [
                    "requests.Response",
                    "dict"
                ],
                "request": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "HistoryRequest.__unpacked__": {
            "name": "__unpacked__",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HistoryRequest.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/_history/_history_response.py": {
        "HistoryResponse.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.status": {
            "name": "status",
            "location": 26,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.reason": {
            "name": "reason",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.headers": {
            "name": "headers",
            "location": 34,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.body": {
            "name": "body",
            "location": 38,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.raw": {
            "name": "raw",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.to_dict": {
            "name": "to_dict",
            "location": 59,
            "return": [
                "Dict[Text,list[list]]",
                "Dict[str,Any]",
                "List[Dict[str,Any]]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.__packed__": {
            "name": "__packed__",
            "location": 69,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResponse.from_dict": {
            "name": "from_dict",
            "location": 73,
            "return": [
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, List[str]]"
                ],
                "request": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "requests.Response",
                    "starlette.responses.Response",
                    "aiohttp.web.StreamResponse"
                ]
            }
        },
        "HistoryResponse.__unpacked__": {
            "name": "__unpacked__",
            "location": 85,
            "return": [
                "bool",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        },
        "HistoryResponse.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "Text",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/mock/_history/__init__.py": {},
    "jj-master/jj/requests/_request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.params": {
            "name": "params",
            "location": 17,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.segments": {
            "name": "segments",
            "location": 27,
            "return": [
                "None",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "segments": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "jj-master/jj/requests/__init__.py": {},
    "jj-master/jj/resolvers/_matcher_function.py": {},
    "jj-master/jj/resolvers/_registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mutable_mapping_factory": [
                    "OrderedDict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,bool]",
                    "Dict[str,str]",
                    "str",
                    "Dict[str,Type[Any]]",
                    "Dict"
                ]
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "dict"
                ],
                "value": [
                    "None",
                    "str",
                    "Dict"
                ]
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 20,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "Optional[str]",
                    "Container"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Container"
                ]
            }
        },
        "Registry.remove": {
            "name": "remove",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "Optional[str]",
                    "Optional[BaseException]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[BaseException]"
                ],
                "key": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "MutableMapping"
                ]
            }
        }
    },
    "jj-master/jj/resolvers/_resolver.py": {
        "Resolver.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "bool",
                    "int",
                    "str"
                ],
                "default_app": [
                    "bool",
                    "int",
                    "str"
                ],
                "default_handler": [
                    "str",
                    "handlers.HandlerFunction",
                    "bool",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "Resolver.unwrap": {
            "name": "unwrap",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "Resolver.register_app": {
            "name": "register_app",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict"
                ]
            }
        },
        "Resolver.deregister_app": {
            "name": "deregister_app",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Resolver.get_apps": {
            "name": "get_apps",
            "location": 45,
            "return": [
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolver.register_handler": {
            "name": "register_handler",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "dict",
                    "bool"
                ],
                "app": []
            }
        },
        "Resolver.deregister_handler": {
            "name": "deregister_handler",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable"
                ],
                "app": []
            }
        },
        "Resolver.get_handlers": {
            "name": "get_handlers",
            "location": 61,
            "return": [
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Type[apps.AbstractApp]"
                ]
            }
        },
        "Resolver.register_matcher": {
            "name": "register_matcher",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "VT",
                    "T"
                ],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Resolver.deregister_matcher": {
            "name": "deregister_matcher",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "Callable",
                    "str"
                ],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Resolver.get_matchers": {
            "name": "get_matchers",
            "location": 77,
            "return": [
                "List",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "bool"
                ]
            }
        },
        "Resolver.register_attribute": {
            "name": "register_attribute",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "handler": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Resolver.deregister_attribute": {
            "name": "deregister_attribute",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "bool"
                ],
                "handler": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str, int]"
                ]
            }
        },
        "Resolver.get_attribute": {
            "name": "get_attribute",
            "location": 92,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "handler": [
                    "int",
                    "str",
                    "bool"
                ],
                "default": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "jj-master/jj/resolvers/_reversed_resolver.py": {
        "ReversedResolver.get_handlers": {
            "name": "get_handlers",
            "location": 11,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "jj-master/jj/resolvers/__init__.py": {},
    "jj-master/jj/responses/_relay_response.py": {
        "RelayResponse.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayResponse.target": {
            "name": "target",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayResponse.copy": {
            "name": "copy",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayResponse.__packed__": {
            "name": "__packed__",
            "location": 71,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayResponse.__unpacked__": {
            "name": "__unpacked__",
            "location": 75,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Tuple['cirq.Qid']",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "jj-master/jj/responses/_response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.content_coding": {
            "name": "content_coding",
            "location": 49,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response._cookie_to_dict": {
            "name": "_cookie_to_dict",
            "location": 52,
            "return": [
                "Dict[Text,None]",
                "float",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "Dict[str, Any]",
                    "\"Event\""
                ]
            }
        },
        "Response.copy": {
            "name": "copy",
            "location": 63,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.get_body": {
            "name": "get_body",
            "location": 76,
            "return": [
                "bytes",
                "Dict[str,Any]",
                "Dict[str,str]",
                "int",
                "bool",
                "Exception",
                "Optional[Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__packed__": {
            "name": "__packed__",
            "location": 95,
            "return": [
                "Dict[Text,list[list]]",
                "Dict[str,str]",
                "Dict",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__unpacked__": {
            "name": "__unpacked__",
            "location": 120,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "jj-master/jj/responses/_static_response.py": {
        "StaticResponse.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[str, pathlib.Path]",
                    "int",
                    "str",
                    "Optional[pathlib.Path]",
                    "aiohttp.ClientTimeout",
                    "bool"
                ]
            }
        }
    },
    "jj-master/jj/responses/_stream_response.py": {
        "StreamResponse.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/responses/__init__.py": {},
    "jj-master/jj/runners/_runner.py": {
        "AppRunner.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "resolver": [
                    "bool",
                    "str"
                ],
                "middlewares": [
                    "bool",
                    "str"
                ],
                "loop": [
                    "bool",
                    "str"
                ],
                "handle_signals": [
                    "bool",
                    "int"
                ],
                "client_max_size": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "AppRunner._merge_middlewares": {
            "name": "_merge_middlewares",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "root_middlewares": [
                    "list",
                    "str",
                    "Container"
                ],
                "app_middlewares": [
                    "list",
                    "str",
                    "Container"
                ],
                "handler_middlewares": [
                    "list",
                    "str",
                    "Container"
                ]
            }
        },
        "AppRunner._make_request": {
            "name": "_make_request",
            "location": 81,
            "return": [
                "Request",
                "str",
                "Dict",
                "Dict[str,str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/runners/__init__.py": {},
    "jj-master/jj/servers/_server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "bool",
                    "float"
                ],
                "runner_factory": [
                    "int",
                    "bool",
                    "float"
                ],
                "site_factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Server.start": {
            "name": "start",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "host": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "port": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str"
                ]
            }
        },
        "Server.serve": {
            "name": "serve",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exceptions": [
                    "Tuple[KeyboardInterrupt]",
                    "Type",
                    "Optional[Exception]",
                    "Type[BaseException]",
                    "Exception",
                    "bool"
                ]
            }
        },
        "Server.cleanup": {
            "name": "cleanup",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._cancel_tasks": {
            "name": "_cancel_tasks",
            "location": 58,
            "return": [
                "None",
                "bytes",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "doitask.Task",
                    "str",
                    "dict",
                    "celery.events.state.State.Task",
                    "khetha.models.Task",
                    "List[asyncio.Task]"
                ]
            }
        },
        "Server.shutdown": {
            "name": "shutdown",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/jj/servers/__init__.py": {},
    "jj-master/tests/__init__.py": {},
    "jj-master/tests/apps/test_app.py": {
        "TestApp.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_handler_with_matcher_and_decorators.decorator_before": {
            "name": "decorator_before",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestApp.test_handler_with_matcher_and_decorators.decorator_after": {
            "name": "decorator_after",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestApp.test_handler_with_matchers_and_decorator.decorator": {
            "name": "decorator",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "jj-master/tests/apps/test_default_app.py": {
        "TestDefaultApp.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultApp.test_default_app_is_singleton": {
            "name": "test_default_app_is_singleton",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/apps/test_define_app.py": {
        "TestDefineApp.test_define_app": {
            "name": "test_define_app",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefineApp.test_define_app_with_name": {
            "name": "test_define_app_with_name",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/apps/__init__.py": {},
    "jj-master/tests/expiration_policy/test_expiration_policy.py": {},
    "jj-master/tests/expiration_policy/test_expiration_policy_history.py": {},
    "jj-master/tests/expiration_policy/test_expiration_policy_packing.py": {
        "test_pack_expire_never": {
            "name": "test_pack_expire_never",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_expire_after_requests": {
            "name": "test_pack_expire_after_requests",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/expiration_policy/test_expiration_policy_unpacking.py": {
        "test_unpack_expire_never": {
            "name": "test_unpack_expire_never",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_expire_after_requests": {
            "name": "test_unpack_expire_after_requests",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/expiration_policy/test_expire_after_requests.py": {
        "test_expired_after_requests_with_invalid_count_requests": {
            "name": "test_expired_after_requests_with_invalid_count_requests",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "count_requests": [
                    "str",
                    "Optional[float]"
                ]
            }
        }
    },
    "jj-master/tests/expiration_policy/test_expire_never.py": {},
    "jj-master/tests/expiration_policy/__init__.py": {},
    "jj-master/tests/imports/test_imports.py": {
        "test_import_abstract_app": {
            "name": "test_import_abstract_app",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_base_app": {
            "name": "test_import_base_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_app": {
            "name": "test_import_default_app",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_app_factory": {
            "name": "test_import_app_factory",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_registrar": {
            "name": "test_import_registrar",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_singleton": {
            "name": "test_import_singleton",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_app": {
            "name": "test_import_app",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_handler_function": {
            "name": "test_import_handler_function",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_handler": {
            "name": "test_import_default_handler",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_http_codes": {
            "name": "test_import_http_codes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_http_headers": {
            "name": "test_import_http_headers",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_http_methods": {
            "name": "test_import_http_methods",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_logger": {
            "name": "test_import_logger",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_logger": {
            "name": "test_import_default_logger",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_filter": {
            "name": "test_import_filter",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_filter": {
            "name": "test_import_default_filter",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_formatter": {
            "name": "test_import_formatter",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_formatter": {
            "name": "test_import_default_formatter",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_simple_formatter": {
            "name": "test_import_simple_formatter",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_default_log_handler": {
            "name": "test_import_default_log_handler",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_resolvable_matcher": {
            "name": "test_import_resolvable_matcher",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_match_methods": {
            "name": "test_import_match_methods",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_matcher_shorthands": {
            "name": "test_import_matcher_shorthands",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_matcher": {
            "name": "test_import_attribute_matcher",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_contain_matcher": {
            "name": "test_import_attribute_contain_matcher",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_not_contain_matcher": {
            "name": "test_import_attribute_not_contain_matcher",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_equal_matcher": {
            "name": "test_import_attribute_equal_matcher",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_not_equal_matcher": {
            "name": "test_import_attribute_not_equal_matcher",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_exist_matcher": {
            "name": "test_import_attribute_exist_matcher",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_multi_dict_matcher": {
            "name": "test_import_attribute_multi_dict_matcher",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_regex_matcher": {
            "name": "test_import_attribute_regex_matcher",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_attribute_route_matcher": {
            "name": "test_import_attribute_route_matcher",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_logical_all_matcher": {
            "name": "test_import_logical_all_matcher",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_logical_any_matcher": {
            "name": "test_import_logical_any_matcher",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_logical_matcher": {
            "name": "test_import_logical_matcher",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request_header_matcher": {
            "name": "test_import_request_header_matcher",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request_method_matcher": {
            "name": "test_import_request_method_matcher",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request_param_matcher": {
            "name": "test_import_request_param_matcher",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request_path_matcher": {
            "name": "test_import_request_path_matcher",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request_matcher": {
            "name": "test_import_request_matcher",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_abstract_middleware": {
            "name": "test_import_abstract_middleware",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_root_middleware": {
            "name": "test_import_root_middleware",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_base_middleware": {
            "name": "test_import_base_middleware",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_self_middleware": {
            "name": "test_import_self_middleware",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_logger_middleware": {
            "name": "test_import_logger_middleware",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_middleware": {
            "name": "test_import_middleware",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_request": {
            "name": "test_import_request",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_registry": {
            "name": "test_import_registry",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_resolver": {
            "name": "test_import_resolver",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_reversed_resolver": {
            "name": "test_import_reversed_resolver",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_response": {
            "name": "test_import_response",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_static_response": {
            "name": "test_import_static_response",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_stream_response": {
            "name": "test_import_stream_response",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_relay_response": {
            "name": "test_import_relay_response",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_runner": {
            "name": "test_import_runner",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_server": {
            "name": "test_import_server",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_start": {
            "name": "test_import_start",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_wait_for": {
            "name": "test_import_wait_for",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_serve": {
            "name": "test_import_serve",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_version": {
            "name": "test_import_version",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/imports/__init__.py": {},
    "jj-master/tests/logs/test_filter.py": {
        "record": {
            "name": "record",
            "location": 12,
            "return": [
                "bool",
                "TestLogRecord"
            ],
            "arguments": {}
        },
        "test_filter_without_request_and_response": {
            "name": "test_filter_without_request_and_response",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "record": []
            }
        },
        "test_filter_with_request": {
            "name": "test_filter_with_request",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "record": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_filter_with_response": {
            "name": "test_filter_with_response",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Optional[float]",
                    "str",
                    "unittesmock.Mock",
                    "dict"
                ],
                "record": [
                    "List[Dict[str, Any]]",
                    "Mapping"
                ]
            }
        },
        "test_request_filter": {
            "name": "test_request_filter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "set"
                ]
            }
        },
        "test_response_filter": {
            "name": "test_response_filter",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "jj-master/tests/logs/test_formatter.py": {
        "formatter": {
            "name": "formatter",
            "location": 17,
            "return": [
                "Formatter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "record": {
            "name": "record",
            "location": 25,
            "return": [
                "bool",
                "TestLogRecord"
            ],
            "arguments": {}
        },
        "test_format_without_request_and_response": {
            "name": "test_format_without_request_and_response",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "List[Dict]"
                ],
                "record": [
                    "int",
                    "bytes",
                    "IO[bytes]",
                    "str",
                    "bool",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "test_format_with_request": {
            "name": "test_format_with_request",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "Sequence[int]"
                ],
                "record": [
                    "str",
                    "dict",
                    "mock.Mock"
                ]
            }
        },
        "test_format_with_response": {
            "name": "test_format_with_response",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "str",
                    "IO"
                ],
                "record": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_request_format": {
            "name": "test_request_format",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "record": []
            }
        },
        "test_response_format": {
            "name": "test_response_format",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "Optional[Exception]"
                ]
            }
        }
    },
    "jj-master/tests/logs/test_logger.py": {
        "logger": {
            "name": "logger",
            "location": 11,
            "return": [
                "Logger",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_no_default_handlers": {
            "name": "test_no_default_handlers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "pypi2nix.logger.Logger",
                    "logging.Logger"
                ]
            }
        },
        "test_add_handler": {
            "name": "test_add_handler",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "pypi2nix.logger.Logger"
                ]
            }
        },
        "test_clear_handlers": {
            "name": "test_clear_handlers",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "pypi2nix.logger.Logger"
                ]
            }
        }
    },
    "jj-master/tests/logs/test_simple_formatter.py": {
        "formatter": {
            "name": "formatter",
            "location": 12,
            "return": [
                "SimpleFormatter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "record": {
            "name": "record",
            "location": 17,
            "return": [
                "bool",
                "TestLogRecord"
            ],
            "arguments": {}
        },
        "test_format_without_request_and_response": {
            "name": "test_format_without_request_and_response",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "str",
                    "BaseException",
                    "bool",
                    "int"
                ],
                "record": [
                    "str",
                    "BaseException",
                    "bool",
                    "int"
                ]
            }
        },
        "test_format_with_request": {
            "name": "test_format_with_request",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "str",
                    "BaseException",
                    "Dict[str, object]",
                    "int"
                ],
                "record": [
                    "dict",
                    "Optional[Exception]"
                ]
            }
        },
        "test_format_with_response": {
            "name": "test_format_with_response",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "formatter": [
                    "str",
                    "BaseException",
                    "int"
                ],
                "record": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "jj-master/tests/logs/_log_record.py": {
        "TestLogRecord.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "jj-master/tests/logs/__init__.py": {},
    "jj-master/tests/matchers/test_resolvable_matcher.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/__init__.py": {},
    "jj-master/tests/matchers/attribute_matchers/test_attribute_contain_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "matcher_class": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_equal_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "matcher_class": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_class": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_exist_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack": {
            "name": "test_pack",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_matcher.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_matcher_shorthands.py": {
        "test_is_instance_of": {
            "name": "test_is_instance_of",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_factory": [
                    "slice"
                ],
                "instance_class": [
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_factory": [
                    "str",
                    "float"
                ],
                "representation": [
                    "str",
                    "float"
                ]
            }
        },
        "test_packable": {
            "name": "test_packable",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_factory": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_multi_dict_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[Tuple[bool, Any]]",
                    "List[str]"
                ],
                "representation": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_attribute_regex_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_factory": [
                    "str",
                    "float"
                ],
                "representation": [
                    "str",
                    "float"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/attribute_matchers/test_route_matcher.py": {
        "test_is_instance_of_attribute_matcher": {
            "name": "test_is_instance_of_attribute_matcher",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack": {
            "name": "test_pack",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/attribute_matchers/__init__.py": {},
    "jj-master/tests/matchers/logical_matchers/test_logical_all_matcher.py": {
        "test_empty_submatchers_raises_exception": {
            "name": "test_empty_submatchers_raises_exception",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_instance_of_logical_matcher": {
            "name": "test_is_instance_of_logical_matcher",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack": {
            "name": "test_pack",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/logical_matchers/test_logical_any_matcher.py": {
        "test_empty_submatchers_raises_exception": {
            "name": "test_empty_submatchers_raises_exception",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_instance_of_logical_matcher": {
            "name": "test_is_instance_of_logical_matcher",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack": {
            "name": "test_pack",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/logical_matchers/test_logical_matcher.py": {
        "test_is_instance_of_resolvable_matcher": {
            "name": "test_is_instance_of_resolvable_matcher",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/logical_matchers/__init__.py": {},
    "jj-master/tests/matchers/request_matchers/test_request_header_matcher.py": {
        "test_is_instance_of_request_matcher": {
            "name": "test_is_instance_of_request_matcher",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "bool"
                ],
                "representation": []
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/request_matchers/test_request_matcher.py": {
        "test_is_instance_of_resolvable_matcher": {
            "name": "test_is_instance_of_resolvable_matcher",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/request_matchers/test_request_method_matcher.py": {
        "test_is_instance_of_request_matcher": {
            "name": "test_is_instance_of_request_matcher",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "representation": [
                    "bytes",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/request_matchers/test_request_param_matcher.py": {
        "test_is_instance_of_request_matcher": {
            "name": "test_is_instance_of_request_matcher",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "Mapping[str, Any]"
                ],
                "representation": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/request_matchers/test_request_path_matcher.py": {
        "test_is_instance_of_request_matcher": {
            "name": "test_is_instance_of_request_matcher",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/matchers/request_matchers/__init__.py": {},
    "jj-master/tests/middlewares/test_base_middleware.py": {
        "TestBaseMiddleware.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.test_middleware_without_resolver": {
            "name": "test_middleware_without_resolver",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.test_middleware_with_instance_resolver": {
            "name": "test_middleware_with_instance_resolver",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.test_middleware_with_class_resolver": {
            "name": "test_middleware_with_class_resolver",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.test_app_middleware_hook.Middleware.on_app": {
            "name": "on_app",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestBaseMiddleware.test_app_middleware_hook.Middleware.on_handler": {
            "name": "on_handler",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestBaseMiddleware.test_handler_middleware_hook.Middleware.on_app": {
            "name": "on_app",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestBaseMiddleware.test_handler_middleware_hook.Middleware.on_handler": {
            "name": "on_handler",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "jj-master/tests/middlewares/test_logger_middleware.py": {
        "TestLoggerMiddleware.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerMiddleware.test_middleware_without_resolver": {
            "name": "test_middleware_without_resolver",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerMiddleware.test_middleware_without_logger": {
            "name": "test_middleware_without_logger",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerMiddleware.test_middleware_with_instance_resolver": {
            "name": "test_middleware_with_instance_resolver",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/middlewares/test_root_middleware.py": {
        "TestRootMiddleware.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootMiddleware.test_middleware_without_resolver": {
            "name": "test_middleware_without_resolver",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootMiddleware.test_middleware_with_instance_resolver": {
            "name": "test_middleware_with_instance_resolver",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRootMiddleware.test_middleware_with_class_resolver": {
            "name": "test_middleware_with_class_resolver",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/middlewares/test_self_middleware.py": {
        "TestSelfMiddleware.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelfMiddleware.test_middleware_without_resolver": {
            "name": "test_middleware_without_resolver",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelfMiddleware.test_middleware_with_instance_resolver": {
            "name": "test_middleware_with_instance_resolver",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelfMiddleware.test_middleware_with_class_resolver": {
            "name": "test_middleware_with_class_resolver",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/middlewares/__init__.py": {},
    "jj-master/tests/mock/test_mock.py": {},
    "jj-master/tests/mock/test_mocked.py": {},
    "jj-master/tests/mock/test_mock_history.py": {},
    "jj-master/tests/mock/test_system_log_filter.py": {
        "record": {
            "name": "record",
            "location": 12,
            "return": [
                "bool",
                "TestLogRecord"
            ],
            "arguments": {}
        },
        "test_log_filter": {
            "name": "test_log_filter",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "int"
                ]
            }
        },
        "test_log_filter_request_without_header": {
            "name": "test_log_filter_request_without_header",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        },
        "test_log_filter_request_with_header": {
            "name": "test_log_filter_request_with_header",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        },
        "test_log_filter_response_without_header": {
            "name": "test_log_filter_response_without_header",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        },
        "test_log_filter_response_with_header": {
            "name": "test_log_filter_response_with_header",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        }
    },
    "jj-master/tests/mock/__init__.py": {},
    "jj-master/tests/requests/test_request.py": {
        "TestRequest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/requests/__init__.py": {},
    "jj-master/tests/resolvers/test_resolver.py": {
        "TestResolver.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_apps": {
            "name": "test_get_apps",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_app": {
            "name": "test_register_app",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_another_app": {
            "name": "test_register_another_app",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_app_twice": {
            "name": "test_register_app_twice",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_single_app": {
            "name": "test_deregister_single_app",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_app": {
            "name": "test_deregister_app",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_nonexisting_app": {
            "name": "test_deregister_nonexisting_app",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_handlers": {
            "name": "test_get_handlers",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_handlers_with_nonexisting_app": {
            "name": "test_get_handlers_with_nonexisting_app",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_handler": {
            "name": "test_register_handler",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_another_handler": {
            "name": "test_register_another_handler",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_handler_twice": {
            "name": "test_register_handler_twice",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_single_handler": {
            "name": "test_deregister_single_handler",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_handler": {
            "name": "test_deregister_handler",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_nonexisting_handler": {
            "name": "test_deregister_nonexisting_handler",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_handler_with_nonexisting_app": {
            "name": "test_deregister_handler_with_nonexisting_app",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_nonexisting_attribute": {
            "name": "test_get_nonexisting_attribute",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_attribute_with_non_existing_handler": {
            "name": "test_get_attribute_with_non_existing_handler",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_attribute": {
            "name": "test_register_attribute",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_another_attribute": {
            "name": "test_register_another_attribute",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_attribute_twice": {
            "name": "test_register_attribute_twice",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_attribute": {
            "name": "test_deregister_attribute",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_nonexisting_attribute": {
            "name": "test_deregister_nonexisting_attribute",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_attribute_with_nonexisting_handler": {
            "name": "test_deregister_attribute_with_nonexisting_handler",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_matchers_without_matchers": {
            "name": "test_get_matchers_without_matchers",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_matchers_with_one_matcher": {
            "name": "test_get_matchers_with_one_matcher",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_get_matchers_with_multiple_matchers": {
            "name": "test_get_matchers_with_multiple_matchers",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_register_matcher": {
            "name": "test_register_matcher",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_matcher": {
            "name": "test_deregister_matcher",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolver.test_deregister_matcher_with_nonexisting_handler": {
            "name": "test_deregister_matcher_with_nonexisting_handler",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/resolvers/test_reversed_resolver.py": {
        "TestReversedResolver.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReversedResolver.test_handler_getter_without_handlers": {
            "name": "test_handler_getter_without_handlers",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReversedResolver.test_handler_getter_with_one_handler": {
            "name": "test_handler_getter_with_one_handler",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReversedResolver.test_handler_getter_with_multiple_handlers": {
            "name": "test_handler_getter_with_multiple_handlers",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/resolvers/__init__.py": {},
    "jj-master/tests/responses/test_relay_response.py": {
        "TestRelayResponse.make_app_with_response": {
            "name": "make_app_with_response",
            "location": 24,
            "return": [
                "App"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayResponse.make_debug_app": {
            "name": "make_debug_app",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRelayResponse.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/responses/test_response.py": {
        "TestResponse.make_app_with_response": {
            "name": "make_app_with_response",
            "location": 23,
            "return": [
                "App"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponse.make_path": {
            "name": "make_path",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestResponse.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/responses/test_response_copy.py": {
        "eq": {
            "name": "eq",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "r1": [
                    "int",
                    "float",
                    "Dict[int, float]"
                ],
                "r2": [
                    "int",
                    "float",
                    "Dict[int, float]"
                ]
            }
        },
        "test_response_attrs": {
            "name": "test_response_attrs",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "int",
                    "aiohttp.ClientSession"
                ],
                "val": [
                    "str",
                    "int",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "test_response_cookies": {
            "name": "test_response_cookies",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_chunked": {
            "name": "test_response_chunked",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_compression": {
            "name": "test_response_compression",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/responses/test_response_packing.py": {
        "default_packed": {
            "name": "default_packed",
            "location": 13,
            "return": [
                "Dict[Text,Union[int,Text,bytes,None,list]]",
                "Dict[str,str]",
                "Dict",
                "int",
                "Exception"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "status": [
                    "int",
                    "str",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "reason": [
                    "Text",
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "body": [
                    "bytes",
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "cookies": [
                    "None",
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "chunked": [
                    "bool",
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ],
                "compression": [
                    "None",
                    "str",
                    "int",
                    "MutableMapping",
                    "List[str]",
                    "aiohttp.ClientSession",
                    "Optional[str]"
                ]
            }
        },
        "test_pack_text_body": {
            "name": "test_pack_text_body",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_json_body": {
            "name": "test_pack_json_body",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_body": {
            "name": "test_pack_body",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "headers": [
                    "str"
                ]
            }
        },
        "test_pack_unsupported_body": {
            "name": "test_pack_unsupported_body",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_chunked": {
            "name": "test_pack_chunked",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_compressed": {
            "name": "test_pack_compressed",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_cookies": {
            "name": "test_pack_cookies",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_text_body_with_headers": {
            "name": "test_pack_text_body_with_headers",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_unsupported_body.AsyncIterable.__aiter__": {
            "name": "__aiter__",
            "location": 118,
            "return": [
                "AsyncIterable",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/responses/test_response_unpacking.py": {
        "test_unpack_binary": {
            "name": "test_unpack_binary",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_text": {
            "name": "test_unpack_text",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_no_body": {
            "name": "test_unpack_no_body",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_cookies": {
            "name": "test_unpack_cookies",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_chunked": {
            "name": "test_unpack_chunked",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_compressed": {
            "name": "test_unpack_compressed",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_text_body_with_headers": {
            "name": "test_unpack_text_body_with_headers",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/responses/test_static_response.py": {
        "TestStaticResponse.make_app_with_response": {
            "name": "make_app_with_response",
            "location": 23,
            "return": [
                "App"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStaticResponse.make_path": {
            "name": "make_path",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestStaticResponse.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/responses/test_stream_response.py": {
        "TestStreamResponse.make_app_with_response": {
            "name": "make_app_with_response",
            "location": 22,
            "return": [
                "App"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamResponse.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/responses/_request_formatter.py": {
        "RequestFormatter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RequestFormatter.format_params": {
            "name": "format_params",
            "location": 10,
            "return": [
                "Dict",
                "List[str]",
                "Mapping[str,str]",
                "Dict[str,Set[str]]",
                "KeysView[str]",
                "str",
                "Dict[str,object]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Set[int]",
                    "Iterable",
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "RequestFormatter.format_headers": {
            "name": "format_headers",
            "location": 13,
            "return": [
                "Dict",
                "Dict[str,str]",
                "Dict[str,object]",
                "Mapping[str,str]",
                "KeysView[str]",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "RequestFormatter.format_data": {
            "name": "format_data",
            "location": 16,
            "return": [
                "Dict",
                "List[str]",
                "Mapping[str,str]",
                "Dict[str,int]",
                "Dict[str,object]",
                "Dict[str,Any]",
                "KeysView[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[None, int, str]",
                    "bytes",
                    "List[str]",
                    "Tuple[int, dict]"
                ]
            }
        },
        "RequestFormatter.format_file": {
            "name": "format_file",
            "location": 19,
            "return": [
                "Dict[Text,str]",
                "int",
                "List[str]",
                "List[List[str]]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "file_field": [
                    "tuple",
                    "int",
                    "dict"
                ]
            }
        },
        "RequestFormatter.format_form": {
            "name": "format_form",
            "location": 29,
            "return": [
                "Dict[,list]",
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "str",
                    "OrderedDict",
                    "int"
                ]
            }
        },
        "RequestFormatter.format_raw": {
            "name": "format_raw",
            "location": 37,
            "return": [
                "Text",
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        }
    },
    "jj-master/tests/responses/__init__.py": {},
    "jj-master/tests/_test_utils/fixtures.py": {
        "resolver_": {
            "name": "resolver_",
            "location": 17,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "request_": {
            "name": "request_",
            "location": 22,
            "return": [
                "Mock",
                "str",
                "Dict[str,Union[int,str]]",
                "Dict",
                "Optional[Dict[str,Any]]",
                "Dict[str,Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "handler_": {
            "name": "handler_",
            "location": 27,
            "return": [
                "AsyncMock",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "jj-master/tests/_test_utils/server.py": {
        "TestServer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application"
                ],
                "resolver": [
                    "str",
                    "None"
                ],
                "middlewares": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "jj-master/tests/_test_utils/steps.py": {
        "Context.__enter__": {
            "name": "__enter__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__exit__": {
            "name": "__exit__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "Context",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jj-master/tests/_test_utils/__init__.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "TestClient",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "app": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "Callable"
                ],
                "resolver": [
                    "None",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "Callable"
                ],
                "middlewares": [
                    "None",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "Callable"
                ]
            }
        }
    }
}
{
    "json_checker-master/setup.py": {},
    "json_checker-master/json_checker/app.py": {
        "Checker.validate": {
            "name": "validate",
            "location": 15,
            "return": [
                "str",
                "Dict",
                "bytes",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "json_checker-master/json_checker/__init__.py": {},
    "json_checker-master/json_checker/core/base.py": {
        "format_data": {
            "name": "format_data",
            "location": 9,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "Dict[str,object]",
                    "Optional[IO[bytes]]",
                    "IO",
                    "None"
                ]
            }
        },
        "format_error_message": {
            "name": "format_error_message",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "expected_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "current_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "filtered_by_type": {
            "name": "filtered_by_type",
            "location": 24,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "expected_data": [
                    "str",
                    "Iterable",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Callable",
                    "core.ICanonicalStorage",
                    "List",
                    "bool"
                ],
                "_type": [
                    "Type"
                ]
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_data": [
                    "bool",
                    "bytes",
                    "List[str]",
                    "Dict[str,Any]",
                    "Union[bytes,str,None]",
                    "str",
                    "None"
                ],
                "soft": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Union[Callable,str]"
                ],
                "ignore_extra_keys": [
                    "bool",
                    "bytes",
                    "Dict[str,bytes]",
                    "T"
                ]
            }
        },
        "Base.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.validate": {
            "name": "validate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BaseOperator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOperator.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOperator.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOperator.validate": {
            "name": "validate",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BaseValidator.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_data": [
                    "bool",
                    "bytes",
                    "None",
                    "str",
                    "Optional[ShippingInfo]",
                    "int"
                ],
                "report": [
                    "bool",
                    "bytes",
                    "None",
                    "str",
                    "Optional[ShippingInfo]",
                    "int"
                ],
                "ignore_extra_keys": [
                    "bool",
                    "Optional[ShippingInfo]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "BaseValidator.add_or_raise": {
            "name": "add_or_raise",
            "location": 96,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[ics.types.ContextDict]",
                    "Dict[str,Any]",
                    "None",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "BaseValidator.validate": {
            "name": "validate",
            "location": 100,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "json_checker-master/json_checker/core/checkers.py": {
        "filtered_items": {
            "name": "filtered_items",
            "location": 27,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "expected_data": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "current_keys": [
                    "List",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]",
                    "List[int]",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "TypeChecker.validate": {
            "name": "validate",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict",
                    "int",
                    "str"
                ]
            }
        },
        "FunctionChecker.validate": {
            "name": "validate",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ListChecker.validate": {
            "name": "validate",
            "location": 120,
            "return": [
                "str",
                "dict",
                "int",
                "abilian.core.models.subjects.Principal",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "dict",
                    "Iterable",
                    "list",
                    "List[List[Any]]",
                    "List[Dict]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DictChecker.validate": {
            "name": "validate",
            "location": 194,
            "return": [
                "bool",
                "str",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,bool]]",
                    "bytes"
                ]
            }
        },
        "OptionalKey.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Dict[str,Any]",
                    "List[int]",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "OptionalKey.__repr__": {
            "name": "__repr__",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalKey.__str__": {
            "name": "__str__",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.validate": {
            "name": "validate",
            "location": 312,
            "return": [
                "json_checker.core.reports.Report"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,utils.types.A]",
                    "Dict[str,A]"
                ]
            }
        },
        "And.validate": {
            "name": "validate",
            "location": 354,
            "return": [
                "json_checker.core.reports.Report"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict",
                    "Dict[str,Union[int,bool]]",
                    "Dict[str,float]",
                    "List"
                ]
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 386,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "current_data": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "json_checker-master/json_checker/core/exceptions.py": {},
    "json_checker-master/json_checker/core/reports.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soft": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Report.__repr__": {
            "name": "__repr__",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__len__": {
            "name": "__len__",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Report.__ne__": {
            "name": "__ne__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Report.__contains__": {
            "name": "__contains__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float",
                    "int",
                    "Dict",
                    "List",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Report.has_errors": {
            "name": "has_errors",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.merge": {
            "name": "merge",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "List[str]",
                    "List",
                    "str",
                    "Iterable[float]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Report.add": {
            "name": "add",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "List[str]",
                    "Callable[,T]",
                    "int",
                    "str"
                ]
            }
        },
        "Report.add_or_raise": {
            "name": "add_or_raise",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "bool",
                    "List[str]",
                    "int",
                    "Iterable[bytes]"
                ],
                "exception": [
                    "Dict[str,Any]",
                    "Exception",
                    "str",
                    "List[str]",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "json_checker-master/json_checker/core/__init__.py": {},
    "json_checker-master/tests/test_checker.py": {
        "test_create_checker_instance_with_default_param": {
            "name": "test_create_checker_instance_with_default_param",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_checker_instance_with_custom_param": {
            "name": "test_create_checker_instance_with_custom_param",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checker_string_with_callable_data": {
            "name": "test_checker_string_with_callable_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checker_string": {
            "name": "test_checker_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_checker_class": {
            "name": "test_repr_checker_class",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "test_data": [
                    "str"
                ],
                "expected_result": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_checker_positive": {
            "name": "test_checker_positive",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "current": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "soft": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_soft_checker_with_errors": {
            "name": "test_soft_checker_with_errors",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "src.core.model.scripScript",
                    "src.core.manager.script_manager.ScriptManager"
                ],
                "current": [
                    "src.core.model.scripScript",
                    "src.core.manager.script_manager.ScriptManager"
                ]
            }
        },
        "test_checker_with_errors": {
            "name": "test_checker_with_errors",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "int"
                ],
                "current": [
                    "str",
                    "int"
                ],
                "exception": [
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "test_checker_list_dicts_hard_positive": {
            "name": "test_checker_list_dicts_hard_positive",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "soft": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "int"
                ]
            }
        },
        "test_checker_list_dicts_hard": {
            "name": "test_checker_list_dicts_hard",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checker_list_dicts_soft": {
            "name": "test_checker_list_dicts_soft",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checker_assert": {
            "name": "test_checker_assert",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "current": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "soft": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_miss_keys": {
            "name": "test_miss_keys",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "Dict[str,Union[int,str]]",
                    "bytes"
                ],
                "current": [
                    "str",
                    "Dict[str,Union[int,str]]",
                    "bytes"
                ],
                "exp_exception": [
                    "str",
                    "int",
                    "float",
                    "Mapping",
                    "Mapping[str,Any]",
                    "bool"
                ]
            }
        },
        "test_miss_keys_soft": {
            "name": "test_miss_keys_soft",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "bool",
                    "Dict",
                    "core.models.UserPreferences"
                ],
                "current": [
                    "str",
                    "bool",
                    "Dict",
                    "core.models.UserPreferences"
                ]
            }
        }
    },
    "json_checker-master/tests/__init__.py": {},
    "json_checker-master/tests/core/test_report.py": {
        "test_create_instance_with_default_params": {
            "name": "test_create_instance_with_default_params",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_instance_with_custom_params": {
            "name": "test_create_instance_with_custom_params",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_instance_string": {
            "name": "test_report_instance_string",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_instance_string_with_custom_param": {
            "name": "test_report_instance_string_with_custom_param",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_instance_string_with_errors": {
            "name": "test_report_instance_string_with_errors",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_error_to_report": {
            "name": "test_add_error_to_report",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_soft_add_or_rise_error_to_report": {
            "name": "test_soft_add_or_rise_error_to_report",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_or_rise_error_to_report": {
            "name": "test_add_or_rise_error_to_report",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_without_errors": {
            "name": "test_report_without_errors",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_has_errors": {
            "name": "test_report_has_errors",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_reports": {
            "name": "test_merge_reports",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_length_without_errors": {
            "name": "test_report_length_without_errors",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_report_length_with_errors": {
            "name": "test_report_length_with_errors",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equal_report": {
            "name": "test_equal_report",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "exp_message": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "test_not_equal_report": {
            "name": "test_not_equal_report",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "exp_message": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "test_contain_report": {
            "name": "test_contain_report",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_contain_report": {
            "name": "test_not_contain_report",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "json_checker-master/tests/core/__init__.py": {},
    "json_checker-master/tests/core/checkers/test_and.py": {
        "test_create_and_instance": {
            "name": "test_create_and_instance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_and_instance_with_empty_param": {
            "name": "test_create_and_instance_with_empty_param",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_and_operator_string": {
            "name": "test_and_operator_string",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_and": {
            "name": "test_operator_and",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "current_data": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_error_messages_operator_and": {
            "name": "test_error_messages_operator_and",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "and_data": [
                    "Optional[Any]",
                    "Any",
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "current_data": [
                    "Optional[Any]",
                    "Any",
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "error_message": [
                    "Optional[Any]",
                    "Any",
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_dict_checker.py": {
        "test_dict_checker_instance_with_default_param": {
            "name": "test_dict_checker_instance_with_default_param",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_checker_instance_with_custom_param": {
            "name": "test_dict_checker_instance_with_custom_param",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_checker_as_string": {
            "name": "test_dict_checker_as_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_checker_positive": {
            "name": "test_dict_checker_positive",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ],
                "soft": [
                    "str",
                    "int"
                ],
                "current_data": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "expected_result": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_dict_checker_positive_message": {
            "name": "test_dict_checker_positive_message",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "blurr.core.aggregate_window.WindowAggregateSchema"
                ],
                "current_data": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str,Union[int,str]]",
                    "Dict[str,Optional[str]]",
                    "str",
                    "None",
                    "Dict[str,Union[str,None]]"
                ],
                "exp_msg": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str,Union[int,str]]",
                    "Dict[str,Optional[str]]",
                    "str",
                    "None",
                    "Dict[str,Union[str,None]]"
                ]
            }
        },
        "test_dict_checker_negative": {
            "name": "test_dict_checker_negative",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_data": [
                    "Dict",
                    "Dict[str,str]",
                    "int",
                    "Tuple[int,str,bytearray]",
                    "Tuple[Union[int,str,bytearray]]"
                ],
                "current_data": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool",
                    "core.types.FBAccessToken"
                ]
            }
        },
        "test_dict_checker_assert": {
            "name": "test_dict_checker_assert",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_data": [
                    "Dict",
                    "Dict[str,str]",
                    "int",
                    "Tuple[int,str,bytearray]",
                    "Tuple[Union[int,str,bytearray]]"
                ],
                "current_data": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool",
                    "core.types.FBAccessToken"
                ]
            }
        },
        "test_validator_miss_key": {
            "name": "test_validator_miss_key",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_data": [
                    "int",
                    "Dict",
                    "Dict[str,Union[str,None]]",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Any]"
                ],
                "cu_data": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "int",
                    "Dict[str,str]",
                    "None",
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Union[str,None]]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "ex_exception": [
                    "str",
                    "List",
                    "bytes",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_function_checker.py": {
        "foo": {
            "name": "foo",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_function_checker_instance_with_default_params": {
            "name": "test_function_checker_instance_with_default_params",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function_checker_instance_with_custom_params": {
            "name": "test_function_checker_instance_with_custom_params",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function_checker_as_string": {
            "name": "test_function_checker_as_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_soft_function_checker_with_valid_data": {
            "name": "test_soft_function_checker_with_valid_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "List[float]",
                    "Dict",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "test_soft_function_checker_with_not_valid_data": {
            "name": "test_soft_function_checker_with_not_valid_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_soft_function_checker_with_invalid_data": {
            "name": "test_soft_function_checker_with_invalid_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        },
        "test_hard_function_checker_with_valid_data": {
            "name": "test_hard_function_checker_with_valid_data",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "List[float]",
                    "Dict",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "test_hard_function_checker_with_not_valid_data": {
            "name": "test_hard_function_checker_with_not_valid_data",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_list_checker.py": {
        "test_list_checker_instance_with_default_param": {
            "name": "test_list_checker_instance_with_default_param",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_checker_instance_with_custom_param": {
            "name": "test_list_checker_instance_with_custom_param",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_checker_as_string": {
            "name": "test_list_checker_as_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_checker_positive": {
            "name": "test_list_checker_positive",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "list_data": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "soft": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "current_data": [
                    "bytes",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "test_list_checker_positive_message": {
            "name": "test_list_checker_positive_message",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "list_data": [
                    "str",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "tartare.core.publisher.AbstractProtocol"
                ],
                "current_data": [
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "ex_message": [
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "test_list_checker_negative": {
            "name": "test_list_checker_negative",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "list_data": [
                    "str",
                    "int",
                    "float"
                ],
                "current_data": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "bool"
                ],
                "ex_exception": [
                    "int"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_optional_key.py": {
        "test_create_optional_key_instance": {
            "name": "test_create_optional_key_instance",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optional_key_str": {
            "name": "test_optional_key_str",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optional_key_string": {
            "name": "test_optional_key_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_optional_key": {
            "name": "test_operator_optional_key",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "bytes",
                    "Optional[AbstractSet[str]]",
                    "AbstractSet",
                    "None"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_or.py": {
        "test_filtered_by_type": {
            "name": "test_filtered_by_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict",
                    "Type"
                ],
                "_type": [
                    "str",
                    "Dict",
                    "Type"
                ],
                "expected": [
                    "str",
                    "Dict",
                    "Type"
                ]
            }
        },
        "test_create_or_instance": {
            "name": "test_create_or_instance",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_or_instance_with_empty_param": {
            "name": "test_create_or_instance_with_empty_param",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_or_operator_string": {
            "name": "test_or_operator_string",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_operator_or": {
            "name": "test_operator_or",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "or_data": [
                    "int",
                    "Dict",
                    "bytes",
                    "str",
                    "IO",
                    "bool",
                    "IO[str]"
                ],
                "current_data": [
                    "int",
                    "Dict",
                    "bytes",
                    "str",
                    "IO",
                    "bool",
                    "IO[str]"
                ],
                "expected_result": [
                    "int",
                    "Dict",
                    "bytes",
                    "str",
                    "IO",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "test_operator_or_message": {
            "name": "test_operator_or_message",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "json_checker-master/tests/core/checkers/test_type_checker.py": {
        "test_type_checker_instance_with_default_param": {
            "name": "test_type_checker_instance_with_default_param",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_checker_instance_with_custom_param": {
            "name": "test_type_checker_instance_with_custom_param",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_checker_as_string": {
            "name": "test_type_checker_as_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_checker_positive": {
            "name": "test_type_checker_positive",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "type_data": [
                    "str",
                    "Optional[str]",
                    "None",
                    "BinaryIO",
                    "Optional[ShippingInfo]",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]",
                    "int",
                    "Optional[int]"
                ],
                "soft": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Union[Callable,str]",
                    "Callable"
                ],
                "current_data": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[object]",
                    "None"
                ],
                "expected_result": [
                    "Dict",
                    "str",
                    "Dict[str,bool]",
                    "Dict[str,dict]",
                    "bool"
                ]
            }
        },
        "test_type_checker_negative": {
            "name": "test_type_checker_negative",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "type_data": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "current_data": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "json_checker-master/tests/core/checkers/test_validator.py": {
        "test_validator_instance_with_default_param": {
            "name": "test_validator_instance_with_default_param",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_instance_with_custom_param": {
            "name": "test_validator_instance_with_custom_param",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_as_string": {
            "name": "test_validator_as_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_positive": {
            "name": "test_validator_positive",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "validator_data": [
                    "Dict",
                    "int"
                ],
                "soft": [
                    "Dict",
                    "int"
                ],
                "current_data": [
                    "bytes",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "bool"
                ],
                "expected_result": [
                    "bytes",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "test_validator_some_dicts": {
            "name": "test_validator_some_dicts",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_positive_message": {
            "name": "test_validator_positive_message",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "validator_data": [
                    "bytes",
                    "Dict",
                    "List[List[int]]",
                    "List[list[int]]",
                    "Optional[Exception]",
                    "Exception",
                    "starfish.core.imagestack.parser.TileData",
                    "None",
                    "Union[Dict,List]",
                    "List"
                ],
                "current_data": [
                    "bytes",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "expected_result": [
                    "bytes",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "test_exist_validators": {
            "name": "test_exist_validators",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "json_checker-master/tests/core/checkers/__init__.py": {}
}
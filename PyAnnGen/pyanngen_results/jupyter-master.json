{
    "jupyter-master/pandas_util.py": {
        "toPercentNP": {
            "name": "toPercentNP",
            "location": 35,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "toPercentForMonkeyPatch": {
            "name": "toPercentForMonkeyPatch",
            "location": 39,
            "return": [
                "Iterable[int]",
                "pandas.DataFrame",
                "IO[str]"
            ],
            "arguments": {
                "appliable": [
                    "Any",
                    "typing.Any",
                    "str",
                    "Type['Payload']",
                    "typing.Type",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "time_it": {
            "name": "time_it",
            "location": 59,
            "return": [
                "Measure_Helper",
                "int",
                "float",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Measure_Helper.stop": {
            "name": "stop",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/PlayCustomerData.py": {
        "isFlatDistribution": {
            "name": "isFlatDistribution",
            "location": 143,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "Dict[str, numpy.ndarray]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "numpy.ndarray",
                    "Callable[[Any], T]",
                    "int"
                ]
            }
        },
        "plot_distribution_for": {
            "name": "plot_distribution_for",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "count_buckets": [
                    "int",
                    "float",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Union[float, int]"
                ],
                "minimum_call_count": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "df_w_multi_customers": {
            "name": "df_w_multi_customers",
            "location": 200,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "cid_by_freq": {
            "name": "cid_by_freq",
            "location": 235,
            "return": [
                "numpy.array",
                "str",
                "int"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "T"
                ],
                "freq": [
                    "int",
                    "pandas.DataFrame",
                    "T"
                ]
            }
        },
        "print_freq": {
            "name": "print_freq",
            "location": 247,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "dict[, ]",
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ],
                "freq": [
                    "bool",
                    "dict[, ]",
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ],
                "cuteName": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "minUsage": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "filter_work_hours": {
            "name": "filter_work_hours",
            "location": 303,
            "return": [
                "int",
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]"
            ],
            "arguments": {
                "df": [
                    "dict[, ]",
                    "bool",
                    "pandas.DataFrame",
                    "dict",
                    "T"
                ]
            }
        },
        "by_hour_count": {
            "name": "by_hour_count",
            "location": 307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "pivot_day_by_hour_no_melt": {
            "name": "pivot_day_by_hour_no_melt",
            "location": 310,
            "return": [
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "df": [
                    "int",
                    "T"
                ],
                "agg": [
                    "typing.Type",
                    "pandas.Series",
                    "list['cirq.Qid']",
                    "str",
                    "type",
                    "typing.Mapping",
                    "List['cirq.Qid']",
                    "dict[str, typing.Any]",
                    "Type",
                    "Mapping[str, Sequence[str]]",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "pivot_day_by_hour": {
            "name": "pivot_day_by_hour",
            "location": 317,
            "return": [
                "int",
                "float",
                "pathlib.Path"
            ],
            "arguments": {
                "df": [
                    "str",
                    "list['cirq.Qid']",
                    "List['cirq.Qid']",
                    "int",
                    "dict[str, typing.Any]",
                    "pandas.Series",
                    "Dict[str, Any]",
                    "typing.Type",
                    "typing.Mapping",
                    "type",
                    "Mapping[str, str]"
                ],
                "agg": [
                    "str",
                    "list['cirq.Qid']",
                    "List['cirq.Qid']",
                    "int",
                    "dict[str, typing.Any]",
                    "pandas.Series",
                    "Dict[str, Any]",
                    "typing.Type",
                    "typing.Mapping",
                    "type",
                    "Mapping[str, str]"
                ]
            }
        },
        "heat_map": {
            "name": "heat_map",
            "location": 323,
            "return": [
                "str",
                "float",
                "list[typing.Union[str,str]]",
                "int"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "str",
                    "\"ComplexNumber\""
                ],
                "agg": [
                    "bool",
                    "str",
                    "\"ComplexNumber\""
                ],
                "title": [
                    "int",
                    "float"
                ],
                "is_pivoted": [
                    "bool",
                    "\"ComplexNumber\"",
                    "str"
                ]
            }
        }
    },
    "jupyter-master/PlayNLP.py": {
        "get_nlp_model": {
            "name": "get_nlp_model",
            "location": 78,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "LoadCorpus": {
            "name": "LoadCorpus",
            "location": 101,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "corpus_path": []
            }
        },
        "DocForCorpus": {
            "name": "DocForCorpus",
            "location": 186,
            "return": [
                "list[]"
            ],
            "arguments": {
                "nlp": [],
                "corpus": []
            }
        },
        "glob750_latest": {
            "name": "glob750_latest",
            "location": 219,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "glob750_new_archive": {
            "name": "glob750_new_archive",
            "location": 224,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "glob750_old_archive": {
            "name": "glob750_old_archive",
            "location": 230,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "corpus_paths_months_for_year": {
            "name": "corpus_paths_months_for_year",
            "location": 236,
            "return": [
                "list[]"
            ],
            "arguments": {
                "year": []
            }
        },
        "GraphWordDistribution": {
            "name": "GraphWordDistribution",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "words": [],
                "title": [
                    "typing.Text"
                ],
                "skip": [
                    "int"
                ],
                "length": [
                    "int"
                ],
                "includeCDF": [
                    "bool"
                ]
            }
        },
        "GetInterestingWords": {
            "name": "GetInterestingWords",
            "location": 351,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pos": [],
                "doc": [],
                "corpus": []
            }
        },
        "GraphPoSForDoc": {
            "name": "GraphPoSForDoc",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "pos": [],
                "doc": [],
                "corpus": []
            }
        },
        "GraphScratchForCorpus": {
            "name": "GraphScratchForCorpus",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [],
                "pos": [
                    "typing.Text"
                ]
            }
        },
        "GetInterestingForCorpusPath": {
            "name": "GetInterestingForCorpusPath",
            "location": 374,
            "return": [],
            "arguments": {
                "corpus_path": [],
                "pos": [
                    "typing.Text"
                ]
            }
        },
        "MakePDF": {
            "name": "MakePDF",
            "location": 415,
            "return": [],
            "arguments": {
                "words": [],
                "name": []
            }
        },
        "PathToFriendlyTitle": {
            "name": "PathToFriendlyTitle",
            "location": 422,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "animate": {
            "name": "animate",
            "location": 482,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "i": []
            }
        },
        "Corpus.__hash__": {
            "name": "__hash__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadCorpus.capitalizeProperNouns": {
            "name": "capitalizeProperNouns",
            "location": 136,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "LoadCorpus.fixTypos": {
            "name": "fixTypos",
            "location": 165,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "GraphWordDistribution.GetPDFCDF": {
            "name": "GetPDFCDF",
            "location": 285,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "words": []
            }
        },
        "GraphWordDistribution.PlotOnAxis": {
            "name": "PlotOnAxis",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "series": [],
                "ax": [],
                "label": [],
                "color": []
            }
        },
        "MakePDF.ToPercent": {
            "name": "ToPercent",
            "location": 416,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "GraphWordDistribution.GetPDFCDF.ToPercent": {
            "name": "ToPercent",
            "location": 286,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "jupyter-master/py_generated/Array.py": {
        "unsortedMin": {
            "name": "unsortedMin",
            "location": 17,
            "return": [
                "int",
                "tuple[typing.Union[int,str]]",
                "Optional[int]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "list[int]",
                    "int",
                    "List[int]",
                    "bool",
                    "dict"
                ],
                "i": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "List[float]"
                ],
                "iMin": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "unsortedRange": {
            "name": "unsortedRange",
            "location": 35,
            "return": [
                "str",
                "None",
                "tuple[typing.Union[None,int,float]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "dict",
                    "Sequence[T]",
                    "list"
                ]
            }
        },
        "plusOne": {
            "name": "plusOne",
            "location": 68,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ds": [
                    "str",
                    "Sequence[T]",
                    "list",
                    "List[FrozenSet[str]]",
                    "int"
                ]
            }
        }
    },
    "jupyter-master/py_generated/BitTwiddling.py": {
        "printB": {
            "name": "printB",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "InsertBits": {
            "name": "InsertBits",
            "location": 34,
            "return": [
                "int",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "src": [
                    "int",
                    "str",
                    "Optional[\"Address\"]"
                ],
                "dst": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "start": [
                    "int",
                    "bool",
                    "str"
                ],
                "end": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "PrintDoubleAsString": {
            "name": "PrintDoubleAsString",
            "location": 51,
            "return": [
                "None",
                "typing.Text",
                "Optional[Any]",
                "Optional[str]",
                "Sequence[str]",
                "Optional[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Set[int]",
                    "List[str]",
                    "List[int]",
                    "bytes"
                ]
            }
        }
    },
    "jupyter-master/py_generated/ElegantPython.py": {
        "merge": {
            "name": "merge",
            "location": 161,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "int",
                "Set[str]",
                "list[]",
                "dict",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "ys": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "maxAlive": {
            "name": "maxAlive",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bds": [
                    "str",
                    "int"
                ]
            }
        },
        "gen3": {
            "name": "gen3",
            "location": 286,
            "return": [
                "typing.Generator[int]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "bool"
                ]
            }
        },
        "gen4": {
            "name": "gen4",
            "location": 293,
            "return": [
                "typing.Generator[int]",
                "Union[tuple, list]",
                "typing.Generator[]",
                "List[int]",
                "None",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "PeekIterator.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "iter": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PeekIterator.peek": {
            "name": "peek",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.__iter__": {
            "name": "__iter__",
            "location": 107,
            "return": [
                "PeekIterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.__next__": {
            "name": "__next__",
            "location": 110,
            "return": [
                "List[str]",
                "dict[int, str]",
                "bool",
                "str",
                "dict[str, int]",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "float",
                "list[]",
                "dict[str, str]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.is_empty": {
            "name": "is_empty",
            "location": 120,
            "return": [
                "bool",
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "int",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.has_elements": {
            "name": "has_elements",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.pop": {
            "name": "pop",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/py_generated/Heap.py": {
        "lhs": {
            "name": "lhs",
            "location": 19,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "rhs": {
            "name": "rhs",
            "location": 23,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "parent": {
            "name": "parent",
            "location": 27,
            "return": [
                "int",
                "bytes",
                "str",
                "tuple",
                "dict"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "isEven": {
            "name": "isEven",
            "location": 31,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice"
                ]
            }
        },
        "heapify_up": {
            "name": "heapify_up",
            "location": 35,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "storage": [
                    "list",
                    "List[str]",
                    "Callable"
                ],
                "lastElement": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "List[T]"
                ]
            }
        },
        "heapify_down": {
            "name": "heapify_down",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "storage": [
                    "list",
                    "List[List[str]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.last": {
            "name": "last",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "bool"
                ]
            }
        },
        "Heap.head": {
            "name": "head",
            "location": 95,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.push": {
            "name": "push",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "Heap.pop": {
            "name": "pop",
            "location": 105,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "int",
                "dict[str, bool]",
                "bool",
                "Dict[str, Any]",
                "Set[str]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/py_generated/HtmlToMarkdown.py": {
        "dump": {
            "name": "dump",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "el": [
                    "str",
                    "int",
                    "Callable"
                ],
                "indent": [
                    "typing.Text",
                    "dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "jupyter-master/py_generated/InterviewPythonTips.py": {
        "merge": {
            "name": "merge",
            "location": 161,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "int",
                "Set[str]",
                "list[]",
                "dict",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "ys": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "maxAlive": {
            "name": "maxAlive",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bds": [
                    "str",
                    "int"
                ]
            }
        },
        "PeekIterator.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "iter": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PeekIterator.peek": {
            "name": "peek",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.__iter__": {
            "name": "__iter__",
            "location": 107,
            "return": [
                "PeekIterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.__next__": {
            "name": "__next__",
            "location": 110,
            "return": [
                "List[str]",
                "dict[int, str]",
                "bool",
                "str",
                "dict[str, int]",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "float",
                "list[]",
                "dict[str, str]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.is_empty": {
            "name": "is_empty",
            "location": 120,
            "return": [
                "bool",
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "int",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.has_elements": {
            "name": "has_elements",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeekIterator.pop": {
            "name": "pop",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/py_generated/Math.py": {
        "Primes": {
            "name": "Primes",
            "location": 16,
            "return": [
                "list[int]",
                "list[]",
                "Set[str]",
                "Dict[int, int]",
                "List[list]",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "crossOff": {
            "name": "crossOff",
            "location": 30,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "possible": [
                    "str",
                    "List[int]",
                    "List[float]",
                    "list"
                ],
                "prime": [
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "jupyter-master/py_generated/pandasPdfCdf.py": {},
    "jupyter-master/py_generated/PickYourProject.py": {},
    "jupyter-master/py_generated/play-opencv.py": {
        "remove_background.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "base_filename": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "in_fps": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "bytes"
                ]
            }
        },
        "remove_background.create": {
            "name": "create",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input_video": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator"
                ]
            }
        },
        "remove_background.destroy": {
            "name": "destroy",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "remove_background.frame": {
            "name": "frame",
            "location": 44,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "original_frame": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "PIL.Image.Image"
                ]
            }
        }
    },
    "jupyter-master/py_generated/PlayAnimation.py": {
        "init": {
            "name": "init",
            "location": 65,
            "return": [
                "tuple[]",
                "str",
                "List[str]",
                "Union[str, List[str]]"
            ],
            "arguments": {}
        },
        "animate": {
            "name": "animate",
            "location": 70,
            "return": [
                "tuple[]",
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "jupyter-master/py_generated/PlayCustomerData.py": {
        "isFlatDistribution": {
            "name": "isFlatDistribution",
            "location": 130,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "Dict[str, numpy.ndarray]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "numpy.ndarray",
                    "Callable[[Any], T]",
                    "int"
                ]
            }
        },
        "plot_distribution_for": {
            "name": "plot_distribution_for",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "count_buckets": [
                    "int",
                    "float",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Union[float, int]"
                ],
                "minimum_call_count": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "df_w_multi_customers": {
            "name": "df_w_multi_customers",
            "location": 185,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "cid_by_freq": {
            "name": "cid_by_freq",
            "location": 219,
            "return": [
                "numpy.array",
                "str",
                "int"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "T"
                ],
                "freq": [
                    "int",
                    "pandas.DataFrame",
                    "T"
                ]
            }
        },
        "print_freq": {
            "name": "print_freq",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "dict[, ]",
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ],
                "freq": [
                    "bool",
                    "dict[, ]",
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ],
                "cuteName": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "minUsage": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "MutableMapping[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "filter_work_hours": {
            "name": "filter_work_hours",
            "location": 285,
            "return": [
                "int",
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]"
            ],
            "arguments": {
                "df": [
                    "dict[, ]",
                    "bool",
                    "pandas.DataFrame",
                    "dict",
                    "T"
                ]
            }
        },
        "by_hour_count": {
            "name": "by_hour_count",
            "location": 289,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "pivot_day_by_hour_no_melt": {
            "name": "pivot_day_by_hour_no_melt",
            "location": 292,
            "return": [
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "df": [
                    "int",
                    "T"
                ],
                "agg": [
                    "typing.Type",
                    "pandas.Series",
                    "list['cirq.Qid']",
                    "str",
                    "type",
                    "typing.Mapping",
                    "List['cirq.Qid']",
                    "dict[str, typing.Any]",
                    "Type",
                    "Mapping[str, Sequence[str]]",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "pivot_day_by_hour": {
            "name": "pivot_day_by_hour",
            "location": 299,
            "return": [
                "int",
                "float",
                "pathlib.Path"
            ],
            "arguments": {
                "df": [
                    "str",
                    "list['cirq.Qid']",
                    "List['cirq.Qid']",
                    "int",
                    "dict[str, typing.Any]",
                    "pandas.Series",
                    "Dict[str, Any]",
                    "typing.Type",
                    "typing.Mapping",
                    "type",
                    "Mapping[str, str]"
                ],
                "agg": [
                    "str",
                    "list['cirq.Qid']",
                    "List['cirq.Qid']",
                    "int",
                    "dict[str, typing.Any]",
                    "pandas.Series",
                    "Dict[str, Any]",
                    "typing.Type",
                    "typing.Mapping",
                    "type",
                    "Mapping[str, str]"
                ]
            }
        },
        "heat_map": {
            "name": "heat_map",
            "location": 305,
            "return": [
                "str",
                "float",
                "list[typing.Union[str,str]]",
                "int"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "str",
                    "\"ComplexNumber\""
                ],
                "agg": [
                    "bool",
                    "str",
                    "\"ComplexNumber\""
                ],
                "title": [
                    "int",
                    "float"
                ],
                "is_pivoted": [
                    "bool",
                    "\"ComplexNumber\"",
                    "str"
                ]
            }
        }
    },
    "jupyter-master/py_generated/PlayML.py": {},
    "jupyter-master/py_generated/PlayNLP.py": {
        "get_nlp_model": {
            "name": "get_nlp_model",
            "location": 77,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "LoadCorpus": {
            "name": "LoadCorpus",
            "location": 100,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "corpus_path": []
            }
        },
        "DocForCorpus": {
            "name": "DocForCorpus",
            "location": 185,
            "return": [
                "list[]"
            ],
            "arguments": {
                "nlp": [],
                "corpus": []
            }
        },
        "glob750_latest": {
            "name": "glob750_latest",
            "location": 220,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "glob750_new_archive": {
            "name": "glob750_new_archive",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "glob750_old_archive": {
            "name": "glob750_old_archive",
            "location": 232,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "corpus_paths_months_for_year": {
            "name": "corpus_paths_months_for_year",
            "location": 238,
            "return": [
                "list[]"
            ],
            "arguments": {
                "year": []
            }
        },
        "GraphWordDistribution": {
            "name": "GraphWordDistribution",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "words": [],
                "title": [
                    "typing.Text"
                ],
                "skip": [
                    "int"
                ],
                "length": [
                    "int"
                ],
                "includeCDF": [
                    "bool"
                ]
            }
        },
        "GetInterestingWords": {
            "name": "GetInterestingWords",
            "location": 355,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pos": [],
                "doc": [],
                "corpus": []
            }
        },
        "GraphPoSForDoc": {
            "name": "GraphPoSForDoc",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "pos": [],
                "doc": [],
                "corpus": []
            }
        },
        "GraphScratchForCorpus": {
            "name": "GraphScratchForCorpus",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus_path": [],
                "pos": [
                    "typing.Text"
                ]
            }
        },
        "GetInterestingForCorpusPath": {
            "name": "GetInterestingForCorpusPath",
            "location": 378,
            "return": [],
            "arguments": {
                "corpus_path": [],
                "pos": [
                    "typing.Text"
                ]
            }
        },
        "MakePDF": {
            "name": "MakePDF",
            "location": 416,
            "return": [],
            "arguments": {
                "words": [],
                "name": []
            }
        },
        "PathToFriendlyTitle": {
            "name": "PathToFriendlyTitle",
            "location": 423,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "animate": {
            "name": "animate",
            "location": 485,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "i": []
            }
        },
        "Corpus.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadCorpus.capitalizeProperNouns": {
            "name": "capitalizeProperNouns",
            "location": 135,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "LoadCorpus.fixTypos": {
            "name": "fixTypos",
            "location": 164,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "GraphWordDistribution.GetPDFCDF": {
            "name": "GetPDFCDF",
            "location": 289,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "words": []
            }
        },
        "GraphWordDistribution.PlotOnAxis": {
            "name": "PlotOnAxis",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "series": [],
                "ax": [],
                "label": [],
                "color": []
            }
        },
        "MakePDF.ToPercent": {
            "name": "ToPercent",
            "location": 417,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "GraphWordDistribution.GetPDFCDF.ToPercent": {
            "name": "ToPercent",
            "location": 290,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "jupyter-master/py_generated/ProductivityGraphs.py": {},
    "jupyter-master/py_generated/Recursion.py": {
        "CountSteps": {
            "name": "CountSteps",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "CountMakeChangeExternal": {
            "name": "CountMakeChangeExternal",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denoms": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total": [
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "CountMakeChange": {
            "name": "CountMakeChange",
            "location": 56,
            "return": [
                "int",
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "denoms": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "combsN": {
            "name": "combsN",
            "location": 83,
            "return": [
                "",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "bool"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "NQueensE": {
            "name": "NQueensE",
            "location": 100,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "N": [
                    "int",
                    "float"
                ]
            }
        },
        "NQueens": {
            "name": "NQueens",
            "location": 105,
            "return": [
                "Iterator",
                "None",
                "Iterator[T]",
                "typing.Generator[]"
            ],
            "arguments": {
                "board": [
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "int",
                    "List[int]",
                    "List[Tuple[str, str]]",
                    "bytes",
                    "list"
                ],
                "toPlace": [
                    "int",
                    "list[dict[, ]]",
                    "list[str]",
                    "bytes",
                    "tuple[int]",
                    "List[Dict]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[str]",
                    "Dict[int, str]",
                    "Tuple[int]",
                    "Set[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "lost": {
            "name": "lost",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "genBalancedE": {
            "name": "genBalancedE",
            "location": 139,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "genBalanced": {
            "name": "genBalanced",
            "location": 143,
            "return": [
                "str",
                "typing.Generator[typing.Union[tuple[typing.Union[int,int]],str,tuple[typing.Union[float,float]]]]",
                "Sequence[str]",
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "partial": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[int, int]",
                    "Tuple[float, float]",
                    "int"
                ],
                "cUnMatchedOpen": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[float, float]"
                ],
                "rOpen": [
                    "float",
                    "int",
                    "str"
                ],
                "rClosed": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "decomposePalindrome": {
            "name": "decomposePalindrome",
            "location": 163,
            "return": [
                "typing.Generator[list[]]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "float"
                ]
            }
        },
        "isPalindrome": {
            "name": "isPalindrome",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "between": {
            "name": "between",
            "location": 196,
            "return": [
                "bool",
                "str",
                "int",
                "Match"
            ],
            "arguments": {
                "t": [
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "s": [
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ],
                "e": [
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "isRotated": {
            "name": "isRotated",
            "location": 200,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Callable"
                ],
                "e": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "onLeft": {
            "name": "onLeft",
            "location": 204,
            "return": [
                "bool",
                "tuple",
                "Type"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "int",
                    "Mapping[str, float]",
                    "Literal"
                ],
                "t": [
                    "int"
                ],
                "s": [
                    "int",
                    "Mapping[str, float]",
                    "float"
                ],
                "m": [
                    "int",
                    "Mapping[str, float]",
                    "float"
                ],
                "e": [
                    "int",
                    "Callable[[str, str], float]",
                    "float"
                ]
            }
        },
        "findRotatedE": {
            "name": "findRotatedE",
            "location": 217,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Optional[bytes]",
                "List[int]"
            ],
            "arguments": {
                "xs": [
                    "list",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Match",
                    "int"
                ],
                "t": [
                    "list[]",
                    "list",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Match",
                    "Match",
                    "int"
                ]
            }
        },
        "findRotated": {
            "name": "findRotated",
            "location": 221,
            "return": [
                "None",
                "int",
                "Optional[int]",
                "Optional[Dict]",
                "bool",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "Union[int, float]",
                    "int"
                ],
                "t": [
                    "int"
                ],
                "s": [
                    "int"
                ],
                "e": [
                    "int",
                    "T"
                ]
            }
        }
    },
    "jupyter-master/py_generated/SleepAnalysis.py": {
        "toDecimal": {
            "name": "toDecimal",
            "location": 46,
            "return": [
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "box_plot_metric": {
            "name": "box_plot_metric",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "bytes",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "x": [
                    "int",
                    "bytes",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "fact": [
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "title": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "frozenset",
                    "numpy.ndarray",
                    "FrozenSet"
                ],
                "domain": [
                    "str",
                    "Callable"
                ]
            }
        },
        "box_plot_metric_vegas_broken_sort_order": {
            "name": "box_plot_metric_vegas_broken_sort_order",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "int"
                ],
                "x": [
                    "bool",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "int"
                ],
                "fact": [
                    "bool",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "int"
                ],
                "title": [
                    "bool",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "int"
                ],
                "domain": [
                    "bool",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "quantile_support_empty": {
            "name": "quantile_support_empty",
            "location": 212,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int"
                ],
                "q": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "p25": {
            "name": "p25",
            "location": 223,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "p50": {
            "name": "p50",
            "location": 227,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "p90": {
            "name": "p90",
            "location": 231,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "FixUpBedtime": {
            "name": "FixUpBedtime",
            "location": 172,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "jupyter-master/py_generated/StackAndQueue.py": {
        "QueueFromStacks.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueFromStacks.push": {
            "name": "push",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "list",
                    "list[]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "float",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "QueueFromStacks.pop": {
            "name": "pop",
            "location": 27,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/py_generated/stock_analysis.py": {
        "display_correlation_matrix": {
            "name": "display_correlation_matrix",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "typing.Type",
                    "Type",
                    "typing.AbstractSet",
                    "str",
                    "click.core.Context",
                    "None",
                    "Optional[AbstractSet[str]]",
                    "Optional[matplotlib.axes.Axes]"
                ],
                "earliest": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "latest": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "jupyter-master/py_generated/Strings.py": {
        "reverse": {
            "name": "reverse",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "words": {
            "name": "words",
            "location": 25,
            "return": [
                "typing.Generator[tuple[typing.Union[int,int]]]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "reverseWords": {
            "name": "reverseWords",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "computeLongestFirstSubPaths": {
            "name": "computeLongestFirstSubPaths",
            "location": 64,
            "return": [
                "None",
                "Optional[str]",
                "typing.Generator[]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "jupyter-master/py_generated/SubArray.py": {
        "len1d": {
            "name": "len1d",
            "location": 16,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "smallest": {
            "name": "smallest",
            "location": 20,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "jupyter-master/py_generated/sympy.py": {},
    "jupyter-master/py_generated/Technology vs Entrepreneur.py": {},
    "jupyter-master/py_generated/TF-IFD.py": {
        "path_glob_to_string_of_words": {
            "name": "path_glob_to_string_of_words",
            "location": 45,
            "return": [
                "str",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "dict",
                "Dict[str, str]",
                "TextIO",
                "Union[str, bytes]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "jupyter-master/py_generated/Tree Questions.py": {
        "printTree": {
            "name": "printTree",
            "location": 87,
            "return": [
                "None",
                "int",
                "str"
            ],
            "arguments": {
                "tree": [
                    "dict",
                    "dict[, ]"
                ],
                "depth": [
                    "dict",
                    "int"
                ]
            }
        },
        "InOrderTraverse": {
            "name": "InOrderTraverse",
            "location": 109,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "tree": []
            }
        },
        "IsBst": {
            "name": "IsBst",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "tree": []
            }
        },
        "FindFlip": {
            "name": "FindFlip",
            "location": 140,
            "return": [
                "List[str]",
                "bool",
                "Iterable[str]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]"
                ]
            }
        },
        "FindFlipR": {
            "name": "FindFlipR",
            "location": 144,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "Type[object]"
                ],
                "start": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "end": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list[]",
                    "tuple[typing.Union[int,int]]",
                    "list",
                    "Tuple[int, int]",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "lhs": [
                    "int",
                    "None",
                    "Iterable[List[str]]",
                    "typing.Iterable[list[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "rhs": [
                    "int",
                    "None",
                    "Iterable[List[str]]",
                    "typing.Iterable[list[str]]",
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "Tree.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jupyter-master/py_generated/Weight Analysis.py": {
        "box_plot_weight_over_time": {
            "name": "box_plot_weight_over_time",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ],
                "x": [
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ],
                "title": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "box_plot_weight_over_time_sigh_vegas_broken": {
            "name": "box_plot_weight_over_time_sigh_vegas_broken",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "x": [
                    "int",
                    "list[bytes]",
                    "numpy.ndarray",
                    "matplotlib.axes.Axes",
                    "List[bytes]"
                ],
                "title": [
                    "int",
                    "list[bytes]",
                    "numpy.ndarray",
                    "matplotlib.axes.Axes",
                    "List[bytes]"
                ],
                "domain": [
                    "tuple[int]",
                    "int",
                    "numpy.ndarray",
                    "matplotlib.axes.Axes",
                    "List[bytes]"
                ]
            }
        },
        "graph_weight_as_line": {
            "name": "graph_weight_as_line",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "float",
                    "Type[numpy.number]",
                    "typing.Type",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "freq": [
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "bool"
                ]
            }
        },
        "animate": {
            "name": "animate",
            "location": 184,
            "return": [
                "numpy.ndarray",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    }
}
{
    "kafkian-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "kafkian-master/kafkian/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "logging.Logger"
                ],
                "topics": [
                    "int",
                    "Set[str]",
                    "Union[str, None]",
                    "Optional[List[str]]",
                    "List[list]"
                ],
                "value_deserializer": [
                    "bool"
                ],
                "key_deserializer": [
                    "List[str]",
                    "int",
                    "bool",
                    "dict"
                ],
                "error_callback": [
                    "zerver.models.Message",
                    "int",
                    "bool",
                    "str"
                ],
                "commit_success_callback": [
                    "zerver.models.Message",
                    "int",
                    "bool",
                    "str"
                ],
                "commit_error_callback": [
                    "Optional[Callable]",
                    "Dict[str, str]",
                    "bool"
                ],
                "metrics": [
                    "zerver.models.Message",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Consumer._init_consumer_impl": {
            "name": "_init_consumer_impl",
            "location": 80,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "Consumer._subscribe": {
            "name": "_subscribe",
            "location": 83,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__next__": {
            "name": "__next__",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__enter__": {
            "name": "__enter__",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__exit__": {
            "name": "__exit__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Consumer._close": {
            "name": "_close",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer._poll": {
            "name": "_poll",
            "location": 122,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._message_generator": {
            "name": "_message_generator",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.commit": {
            "name": "commit",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Consumer._on_commit": {
            "name": "_on_commit",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "float",
                    "Union[BinaryIO, str]",
                    "dict"
                ],
                "topics_partitions": [
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "email.message.EmailMessage",
                    "bool"
                ]
            }
        },
        "Consumer._on_error": {
            "name": "_on_error",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception",
                    "BaseException",
                    "werkzeug.exceptions.NotFound",
                    "werkzeug.exceptions.InternalServerError",
                    "werkzeug.exceptions.Forbidden",
                    "werkzeug.exceptions.Unauthorized"
                ]
            }
        },
        "Consumer._on_throttle": {
            "name": "_on_throttle",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "Consumer._on_stats": {
            "name": "_on_stats",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [
                    "str",
                    "Message",
                    "discord.Message",
                    "baseplate.lib.metrics.Batch"
                ]
            }
        }
    },
    "kafkian-master/kafkian/exceptions.py": {},
    "kafkian-master/kafkian/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "List[List[str]]",
                    "List[list[str]]",
                    "MutableMapping[str,Any]",
                    "MutableMapping",
                    "Optional[str]",
                    "str",
                    "Dict[str,Tuple[str,str]]",
                    "None",
                    "bool",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "key_deserializer": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "value_deserializer": [
                    "str",
                    "List[T]",
                    "Optional[int]",
                    "int",
                    "ArticleComment",
                    "None"
                ]
            }
        },
        "Message.key": {
            "name": "key",
            "location": 32,
            "return": [
                "str",
                "bool",
                "bytes",
                "int",
                "List[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.value": {
            "name": "value",
            "location": 44,
            "return": [
                "bool",
                "float",
                "int",
                "Tuple[float]",
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.topic": {
            "name": "topic",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.partition": {
            "name": "partition",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.offset": {
            "name": "offset",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.timestamp": {
            "name": "timestamp",
            "location": 77,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.timestamp_type": {
            "name": "timestamp_type",
            "location": 88,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.headers": {
            "name": "headers",
            "location": 97,
            "return": [
                "List",
                "int",
                "Dict",
                "Dict[str,Union[str,int]]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/kafkian/producer.py": {
        "Producer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Mapping",
                    "logging.Logger"
                ],
                "value_serializer": [
                    "Dict[str, Any]",
                    "float",
                    "Optional[Dict[str, Any]]"
                ],
                "key_serializer": [
                    "dict",
                    "bytes",
                    "bool"
                ],
                "error_callback": [],
                "delivery_success_callback": [],
                "delivery_error_callback": [
                    "Optional[Callable]",
                    "bool",
                    "str",
                    "List[bytes]"
                ],
                "metrics": []
            }
        },
        "Producer._init_producer_impl": {
            "name": "_init_producer_impl",
            "location": 67,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "Producer._close": {
            "name": "_close",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Producer.flush": {
            "name": "flush",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Producer.poll": {
            "name": "poll",
            "location": 84,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Producer.produce": {
            "name": "produce",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "Optional[str]",
                    "Sequence[bytes]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "sync": [
                    "str",
                    "Optional[bool]",
                    "Sequence[Union[str, int]]",
                    "list",
                    "int"
                ]
            }
        },
        "Producer._produce": {
            "name": "_produce",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "dict",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Producer._on_delivery": {
            "name": "_on_delivery",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "dict",
                    "int",
                    "Tuple[str, int]",
                    "Dict[str, Any]"
                ],
                "msg": [
                    "str",
                    "dict",
                    "int",
                    "Tuple[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Producer._on_error": {
            "name": "_on_error",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "Producer._on_throttle": {
            "name": "_on_throttle",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "Producer._on_stats": {
            "name": "_on_stats",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "stats": [
                    "str"
                ]
            }
        }
    },
    "kafkian-master/kafkian/__init__.py": {},
    "kafkian-master/kafkian/metrics/consts.py": {},
    "kafkian-master/kafkian/metrics/__init__.py": {
        "KafkaMetrics.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statsd": [
                    "int",
                    "str",
                    "bool",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "basename": [
                    "Text",
                    "int",
                    "bool",
                    "str",
                    "List[List[str]]"
                ],
                "tags": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[str]"
                ]
            }
        },
        "KafkaMetrics.send": {
            "name": "send",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_raw": [
                    "str"
                ]
            }
        },
        "KafkaMetrics._send_stats": {
            "name": "_send_stats",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "KafkaMetrics._send_broker_stats": {
            "name": "_send_broker_stats",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "KafkaMetrics._send_topic_partition_stats": {
            "name": "_send_topic_partition_stats",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "KafkaMetrics._send_cgrp_stats": {
            "name": "_send_cgrp_stats",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "KafkaMetrics._send_eos_stats": {
            "name": "_send_eos_stats",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/avroserdebase.py": {
        "_wrap": {
            "name": "_wrap",
            "location": 28,
            "return": [
                "int",
                "str",
                "Callable",
                "Pattern",
                "bool",
                "Match",
                "None",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "List"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "HasSchemaMixin.schema": {
            "name": "schema",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSerDeBase.decode_message": {
            "name": "decode_message",
            "location": 57,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "Optional[IO[bytes]]",
                    "str",
                    "Optional[IO[str]]",
                    "IO[str]"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/deserialization.py": {
        "Deserializer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deserializer.deserialize": {
            "name": "deserialize",
            "location": 15,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "AvroDeserializer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_registry_url": [
                    "str"
                ]
            }
        },
        "AvroDeserializer.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [
                "bool",
                "\"CollectionList\"",
                "str",
                "float",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/serialization.py": {
        "Serializer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 25,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ],
                "topic": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "AvroSerializerBase.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_registry_url": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "bool",
                    "IO[Any]",
                    "IO"
                ],
                "auto_register_schemas": [
                    "bool",
                    "int",
                    "List[List[str]]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "subject_name_strategy": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AvroSerializerBase._get_subject": {
            "name": "_get_subject",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "Optional[Any]"
                ],
                "schema": [
                    "str"
                ],
                "is_key": [
                    "bool",
                    "str",
                    "Dict[Any,list]",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "AvroSerializerBase._ensure_schema": {
            "name": "_ensure_schema",
            "location": 55,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "schema": [
                    "int",
                    "List[Callable]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "is_key": [
                    "str",
                    "bool"
                ]
            }
        },
        "AvroSerializerBase.serialize": {
            "name": "serialize",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ],
                "topic": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "AvroSerializer.serialize": {
            "name": "serialize",
            "location": 72,
            "return": [
                "bool",
                "Dict[str, Any]",
                "\"CollectionList\"",
                "float",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "topic": [
                    "str",
                    "int"
                ],
                "is_key": [
                    "bool",
                    "str",
                    "Union[str,int]"
                ]
            }
        },
        "AvroStringKeySerializer.serialize": {
            "name": "serialize",
            "location": 85,
            "return": [
                "bool",
                "Dict[str, Any]",
                "\"CollectionList\"",
                "float",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "Any",
                    "Optional[str]",
                    "None",
                    "Union[int,str]",
                    "int"
                ],
                "topic": [
                    "Exception",
                    "Protocol",
                    "int",
                    "data_platform.datasource.abc.doc.DocKeyPair",
                    "str",
                    "Callable[None,Any]",
                    "Callable[[None],Any]",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "is_key": [
                    "bool",
                    "bytes",
                    "Iterable",
                    "str"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/__init__.py": {},
    "kafkian-master/tests/__init__.py": {},
    "kafkian-master/tests/system/test_produce_consume_avro.py": {
        "producer": {
            "name": "producer",
            "location": 46,
            "return": [
                "Producer",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 55,
            "return": [
                "Consumer",
                "bool",
                "Dict[str,str]",
                "bytes",
                "Optional[int]",
                "IO"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "int"
                ]
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "int"
                ]
            }
        }
    },
    "kafkian-master/tests/system/test_produce_consume_b.py": {
        "producer": {
            "name": "producer",
            "location": 22,
            "return": [
                "Producer",
                "Optional[str]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 27,
            "return": [
                "Consumer",
                "Mapping[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "int"
                ]
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "int"
                ]
            }
        }
    },
    "kafkian-master/tests/system/test_produce_consume_commit_offset.py": {
        "producer": {
            "name": "producer",
            "location": 22,
            "return": [
                "Producer",
                "Optional[str]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 27,
            "return": [
                "Consumer",
                "Mapping[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "test_produce_many_consume_one": {
            "name": "test_produce_many_consume_one",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "bool"
                ],
                "consumer": [
                    "int"
                ]
            }
        },
        "test_produce_many_consume_some": {
            "name": "test_produce_many_consume_some",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "bool"
                ],
                "consumer": [
                    "int"
                ]
            }
        }
    },
    "kafkian-master/tests/system/__init__.py": {},
    "kafkian-master/tests/unit/conftest.py": {},
    "kafkian-master/tests/unit/test_avro_serde_base.py": {
        "test_schema_mixin_wrapper_record_schema": {
            "name": "test_schema_mixin_wrapper_record_schema",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_mixin_wrapper_key_schema": {
            "name": "test_schema_mixin_wrapper_key_schema",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kafkian-master/tests/unit/test_consumer.py": {
        "consumer": {
            "name": "consumer",
            "location": 19,
            "return": [
                "Consumer",
                "Mapping[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "test_consume_one_b": {
            "name": "test_consume_one_b",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "int"
                ]
            }
        },
        "test_consume_one_tombstone": {
            "name": "test_consume_one_tombstone",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 24,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 27,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "List[str]",
                    "Optional[IO[str]]",
                    "IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/tests/unit/test_consumer_avro.py": {
        "consumer": {
            "name": "consumer",
            "location": 52,
            "return": [
                "Consumer",
                "float",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "test_consume_one_avro_value": {
            "name": "test_consume_one_avro_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "dict"
                ]
            }
        },
        "test_consume_one_tombstone": {
            "name": "test_consume_one_tombstone",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 58,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 61,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "List[str]",
                    "Optional[IO[str]]",
                    "IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/tests/unit/test_consumer_errors.py": {
        "consumer": {
            "name": "consumer",
            "location": 21,
            "return": [
                "Consumer",
                "Mapping[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "test_consumer_ignores_partition_eof": {
            "name": "test_consumer_ignores_partition_eof",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_consumer_generator_raises_and_closed_on_error": {
            "name": "test_consumer_generator_raises_and_closed_on_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict",
                    "Type"
                ]
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "Dict",
                    "MutableMapping",
                    "bool",
                    "object"
                ],
                "_value": [
                    "bool",
                    "bytes"
                ],
                "_error": [
                    "float",
                    "Optional[float]",
                    "bool",
                    "None",
                    "str",
                    "Type",
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 31,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 34,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "List[str]",
                    "Optional[IO[str]]",
                    "IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 43,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_code": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MockError.code": {
            "name": "code",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_consumer_ignores_partition_eof.next_message": {
            "name": "next_message",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ignored": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_avro.py": {
        "teardown_function": {
            "name": "teardown_function",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "Exception",
                    "tests.hints.Function.Call",
                    "Callable[...,T]"
                ]
            }
        },
        "avro_producer": {
            "name": "avro_producer",
            "location": 52,
            "return": [
                "Producer",
                "Optional[str]",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "test_producer_init": {
            "name": "test_producer_init",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "int"
                ]
            }
        },
        "test_avro_producer_produce": {
            "name": "test_avro_producer_produce",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "dict"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_avro_key.py": {
        "teardown_function": {
            "name": "teardown_function",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "Exception",
                    "tests.hints.Function.Call",
                    "Callable[...,T]"
                ]
            }
        },
        "avro_producer": {
            "name": "avro_producer",
            "location": 26,
            "return": [
                "bytes",
                "Tuple[str, str]",
                "Awaitable"
            ],
            "arguments": {}
        },
        "test_producer_init": {
            "name": "test_producer_init",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "int"
                ]
            }
        },
        "test_avro_producer_produce": {
            "name": "test_avro_producer_produce",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "Iterable[Any]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_consume_b.py": {
        "producer": {
            "name": "producer",
            "location": 27,
            "return": [
                "Producer",
                "Optional[str]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 32,
            "return": [
                "Consumer",
                "Mapping[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "str"
                ],
                "consumer": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/test_subject_name_strategy.py": {
        "test_subject_name_strategy": {
            "name": "test_subject_name_strategy",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "List[str]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "is_key": [
                    "str",
                    "bytes"
                ],
                "subject": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/__init__.py": {}
}
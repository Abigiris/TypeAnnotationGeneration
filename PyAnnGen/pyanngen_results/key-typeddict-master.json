{
    "key-typeddict-master/setup.py": {},
    "key-typeddict-master/key_typeddict/core.py": {
        "_key_typeddict_new": {
            "name": "_key_typeddict_new",
            "location": 14,
            "return": [
                "_KeyTypedDictMeta",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List['PydanticModelField']",
                    "list['PydanticModelField']",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ],
                "_typename": [
                    "str",
                    "Exception",
                    "type",
                    "typing.Type"
                ],
                "_fields": [
                    "Type",
                    "None",
                    "bool",
                    "str",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        },
        "_KeyTypedDictMeta.__new__": {
            "name": "__new__",
            "location": 26,
            "return": [
                "dict",
                "dict[, ]",
                "int",
                "Dict[str, float]",
                "dict[typing.Any, str]",
                "typing.Type",
                "dict[str, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "name": [
                    "list",
                    "bool",
                    "list[]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "bases": [
                    "dict[, ]",
                    "bool",
                    "int",
                    "dict"
                ],
                "ns": [
                    "list",
                    "list[]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "total": [
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[Callable[[dict], None]]"
                ],
                "allow_extra": [
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[Callable[[dict], None]]"
                ]
            }
        }
    },
    "key-typeddict-master/key_typeddict/plugin.py": {
        "parse_key_typeddict_fields": {
            "name": "parse_key_typeddict_fields",
            "location": 18,
            "return": [
                "Tuple[(List[str], list, Set[str])]"
            ],
            "arguments": {
                "attrs_expr": [
                    "mypy.nodes.DictExpr",
                    "MutableMapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "mypy.types.Overloaded",
                    "dict",
                    "Union[type, Tuple[type, ...]]",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "check_typeddict_call_with_kwargs": {
            "name": "check_typeddict_call_with_kwargs",
            "location": 40,
            "return": [
                "mypy.nodes.PrintStmt",
                "mypy.types.Type",
                "mypy.types.Instance",
                "mypy.nodes.CallExpr",
                "mypy.nodes.OpExpr"
            ],
            "arguments": {
                "self": [],
                "callee": [
                    "OrderedDict[str, Expression]",
                    "mypy.types.Type.dDictType",
                    "dict",
                    "mypy.types.TypedDictType"
                ],
                "kwargs": [
                    "collections.OrderedDict[(str, Any)]"
                ],
                "context": [
                    "type",
                    "TextIO"
                ]
            }
        },
        "copy_modified": {
            "name": "copy_modified",
            "location": 68,
            "return": [
                "mypy.types.Type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "add_key_typeddict_to_global_symboltable": {
            "name": "add_key_typeddict_to_global_symboltable",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.DynamicClassDefContext",
                    "trezor.wire.Context",
                    "click.Context",
                    "discord.excommands.Context"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 117,
            "return": [
                "typing.Type[KeyTypedDictPlugin]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "KeyTypedDictPlugin.get_dynamic_class_hook": {
            "name": "get_dynamic_class_hook",
            "location": 110,
            "return": [
                "Optional[Callable[([Any], None)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "key-typeddict-master/key_typeddict/__init__.py": {}
}
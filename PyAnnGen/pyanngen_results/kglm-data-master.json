{
    "kglm-data-master/setup.py": {},
    "kglm-data-master/kglm_data/add_redirects.py": {
        "extract_redirect": {
            "name": "extract_redirect",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "elem": [
                    "ElementTree.Element"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/annotate.py": {
        "_extract_annotation": {
            "name": "_extract_annotation",
            "location": 40,
            "return": [
                "Tuple[str]"
            ],
            "arguments": {
                "token": [
                    "T"
                ]
            }
        },
        "capitalize": {
            "name": "capitalize",
            "location": 53,
            "return": [
                "tuple"
            ],
            "arguments": {
                "tokens": [
                    "oj.tokens.Token",
                    "List[spacy.tokens.Token]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "allennlp.data.tokenizers.token.Token",
                    "sqlparse.sql.Token",
                    "spacy.tokens.Token",
                    "int"
                ]
            }
        },
        "_bad_alias": {
            "name": "_bad_alias",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "tokens": [
                    "list[T]",
                    "List[allennlp.data.tokenizers.Token]",
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[float]",
                    "List[float]"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "multiprocessing.queues.JoinableQueue"
                ],
                "i": [
                    "int"
                ],
                "output": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "allennlp.common.util.JsonDict",
                    "bytes",
                    "dict[, ]",
                    "list[str]",
                    "dict",
                    "List[str]",
                    "list[int]",
                    "List[int]"
                ],
                "print_lock": [
                    "bool",
                    "bytes",
                    "float",
                    "int"
                ],
                "FLAGS": [
                    "Tuple[Any]"
                ]
            }
        },
        "loader": {
            "name": "loader",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "multiprocessing.queues.JoinableQueue"
                ],
                "FLAGS": [
                    "Tuple[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Annotator.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias_db": [
                    "int",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "relation_db": [
                    "int",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "wiki_db": [
                    "int",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "distance_cutoff": [
                    "int"
                ],
                "match_aliases": [
                    "bool"
                ],
                "unmatch": [
                    "bool"
                ],
                "prune_clusters": [
                    "bool"
                ]
            }
        },
        "Annotator._reset": {
            "name": "_reset",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotator._add_wikilinks": {
            "name": "_add_wikilinks",
            "location": 127,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "str",
                    "float"
                ],
                "wikilinks": [
                    "list"
                ]
            }
        },
        "Annotator._add_nel": {
            "name": "_add_nel",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "Union[bytes, str, SupportsInt]",
                    "Optional[bool]"
                ],
                "nel": [
                    "list"
                ],
                "wiki_ids": [
                    "Set[str]"
                ]
            }
        },
        "Annotator._detect_cluster_ids": {
            "name": "_detect_cluster_ids",
            "location": 180,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "float",
                    "Callable[[int], None]",
                    "typing.Callable[int, None]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "cluster": [
                    "List[List[int]]"
                ]
            }
        },
        "Annotator._prune_cluster": {
            "name": "_prune_cluster",
            "location": 190,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "doc": [
                    "float",
                    "str",
                    "int",
                    "None",
                    "bool",
                    "list[int]",
                    "Optional[str]",
                    "List[int]"
                ],
                "cluster": [
                    "List[List[int]]"
                ],
                "alias_token_set": [
                    "Set[str]"
                ]
            }
        },
        "Annotator._propagate_ids": {
            "name": "_propagate_ids",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "int",
                    "list[int]",
                    "List[int]",
                    "Union['KspNativeControl', int]"
                ],
                "clusters": [
                    "List[List[int]]"
                ],
                "wiki_ids": [
                    "Set[str]"
                ]
            }
        },
        "Annotator._json_to_doc": {
            "name": "_json_to_doc",
            "location": 281,
            "return": [
                "str",
                "bytes",
                "int",
                "dict[str, dict[str, typing.Any]]",
                "IO",
                "Doc",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Dict[(str, Any)]"
                ],
                "root_id": [
                    "str"
                ]
            }
        },
        "Annotator._add_aliases": {
            "name": "_add_aliases",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Annotator._add_relations": {
            "name": "_add_relations",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Annotator._expand": {
            "name": "_expand",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "loc": [
                    "int"
                ]
            }
        },
        "Annotator._existing_id": {
            "name": "_existing_id",
            "location": 392,
            "return": [
                "Deque[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "active": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ],
                "token_stack": [
                    "Deque"
                ]
            }
        },
        "Annotator._unknown_id": {
            "name": "_unknown_id",
            "location": 423,
            "return": [
                "Deque[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "List[str]",
                    "list[str]"
                ],
                "token_stack": [
                    "Deque"
                ]
            }
        },
        "Annotator._annotate_tokens": {
            "name": "_annotate_tokens",
            "location": 463,
            "return": [
                "spacy.tokens.Doc",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "float"
                ]
            }
        },
        "Annotator._serialize_annotations": {
            "name": "_serialize_annotations",
            "location": 561,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "Annotator.annotate": {
            "name": "annotate",
            "location": 585,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/build_alias_db.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/build_relation_db.py": {
        "load_allowed_properties": {
            "name": "load_allowed_properties",
            "location": 25,
            "return": [
                "Optional[Set[str]]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "TextIO",
                    "typing.TextIO",
                    "dict",
                    "dict[, ]",
                    "Optional[IO[str]]",
                    "typing.IO"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/build_wiki_db.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/diff_annotations.py": {
        "default_factory": {
            "name": "default_factory",
            "location": 10,
            "return": [
                "List[None]"
            ],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 14,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data1": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[bytes]"
                ],
                "data2": [
                    "str",
                    "int",
                    "dict",
                    "AnyStr",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/fan.py": {
        "fan_stats": {
            "name": "fan_stats",
            "location": 15,
            "return": [
                "Tuple[(int, Union[(float, int)], int, int)]"
            ],
            "arguments": {
                "edges": [
                    "list",
                    "Iterable[int]",
                    "List[Tuple[int, Any]]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "readable": {
            "name": "readable",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "relation": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]"
                ],
                "alias_db": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "main._callable": {
            "name": "_callable",
            "location": 53,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "kglm-data-master/kglm_data/filter_good_featured.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/filter_no_tokens.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/list_entities.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/make_readable.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "main.lookup": {
            "name": "lookup",
            "location": 19,
            "return": [
                "typing.Text",
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/manual_annotation_deletions.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "kglm-data-master/kglm_data/parse_wikitext.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/prefix_tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "TreeNode.is_terminal": {
            "name": "is_terminal",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixTree.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixed": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "PrefixTree.__contains__": {
            "name": "__contains__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "iter": [
                    "Iterable[str]"
                ]
            }
        },
        "PrefixTree.step": {
            "name": "step",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "PrefixTree.add": {
            "name": "add",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter": [
                    "Iterable[str]"
                ],
                "id": [
                    "str"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/process_html.py": {
        "generate_instances": {
            "name": "generate_instances",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "clean_soup": {
            "name": "clean_soup",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "root": [
                    "bs4.BeautifulSoup"
                ],
                "wiki_db": [
                    "str",
                    "bool",
                    "type",
                    "typing.Type"
                ],
                "nlp": [
                    "spacy.language.Language"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "process._recursion": {
            "name": "_recursion",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "node": [
                    "bytearray"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/prune.py": {
        "_callable": {
            "name": "_callable",
            "location": 17,
            "return": [
                "collections.defaultdict[(nothing, set)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/realm_coref.py": {
        "_window": {
            "name": "_window",
            "location": 20,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "List[str]",
                    "Sequence[T]"
                ],
                "size": [
                    "int",
                    "str",
                    "float",
                    "List[List[str]]"
                ]
            }
        },
        "_add_offset": {
            "name": "_add_offset",
            "location": 26,
            "return": [
                "int",
                "list[]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "str",
                    "float"
                ],
                "offset": [
                    "int",
                    "List[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "_tuplify_set": {
            "name": "_tuplify_set",
            "location": 39,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "_min_span": {
            "name": "_min_span",
            "location": 46,
            "return": [
                "int",
                "Tuple[int]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cluster": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "tuple[frozenset]",
                    "[[]]",
                    "Tuple[FrozenSet[int]]",
                    "int"
                ]
            }
        },
        "_merge_clusters": {
            "name": "_merge_clusters",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "all_clusters": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "CoreNLPCorefPredictor.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "n_threads": [
                    "int"
                ]
            }
        },
        "CoreNLPCorefPredictor.predict_json": {
            "name": "predict_json",
            "location": 81,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "CoreNLPCorefPredictor.predict_instance": {
            "name": "predict_instance",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "requests.Response"
                ],
                "clusters": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/relation_examples.py": {
        "generate_instances": {
            "name": "generate_instances",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/render.py": {
        "parse_iso8601": {
            "name": "parse_iso8601",
            "location": 82,
            "return": [
                "Optional[Date]"
            ],
            "arguments": {
                "iso_string": [
                    "str"
                ]
            }
        },
        "custom_strftime": {
            "name": "custom_strftime",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "formats": [
                    "str",
                    "Union[str, Pattern[str]]"
                ],
                "date": [
                    "str"
                ]
            }
        },
        "render_time": {
            "name": "render_time",
            "location": 107,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "render_quantity": {
            "name": "render_quantity",
            "location": 119,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list[]",
                    "float",
                    "bool",
                    "int",
                    "list",
                    "Sequence[float]"
                ]
            }
        },
        "process_literal": {
            "name": "process_literal",
            "location": 143,
            "return": [
                "Tuple[(Optional[str], Any)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Date.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "month": [
                    "int",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "day": [
                    "int",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Date.year": {
            "name": "year",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.month": {
            "name": "month",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.day": {
            "name": "day",
            "location": 67,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.strftime": {
            "name": "strftime",
            "location": 70,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/split_by_title.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/summarize.py": {
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Stats.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.update": {
            "name": "update",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[bytes, Any]",
                    "list[]",
                    "dict",
                    "Dict[Any, bytes]",
                    "list"
                ]
            }
        },
        "Stats.log": {
            "name": "log",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kglm-data-master/kglm_data/util.py": {
        "flatten_tokens": {
            "name": "flatten_tokens",
            "location": 17,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "tokens": [
                    "List[List[str]]"
                ]
            }
        },
        "format_wikilink": {
            "name": "format_wikilink",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "wikilink": [
                    "str"
                ]
            }
        },
        "generate_from_wikidump": {
            "name": "generate_from_wikidump",
            "location": 31,
            "return": [
                "Generator[(Dict[(str, Any)], None, None)]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "load_allowed_entities": {
            "name": "load_allowed_entities",
            "location": 49,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "kglm-data-master/kglm_data/__init__.py": {},
    "kglm-data-master/tests/test_annotator.py": {
        "TestStandardAnnotator.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_reset": {
            "name": "test_reset",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_wikilinks": {
            "name": "test_add_wikilinks",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_nel": {
            "name": "test_add_nel",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_nel_avoids_overwriting_wikilinks": {
            "name": "test_add_nel_avoids_overwriting_wikilinks",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_detect_cluster_ids": {
            "name": "test_detect_cluster_ids",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_prune_cluster": {
            "name": "test_prune_cluster",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_propagate_ids": {
            "name": "test_propagate_ids",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_dont_propagate_ids": {
            "name": "test_dont_propagate_ids",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_json_to_doc": {
            "name": "test_json_to_doc",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_aliases": {
            "name": "test_add_aliases",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_relations": {
            "name": "test_add_relations",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_expand": {
            "name": "test_expand",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_existing_id": {
            "name": "test_existing_id",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_unknown_id_no_match": {
            "name": "test_unknown_id_no_match",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_unknown_id_alias_match": {
            "name": "test_unknown_id_alias_match",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_annotate_tokens": {
            "name": "test_annotate_tokens",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_serialize_annotations": {
            "name": "test_serialize_annotations",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_wikilinks_match_aliases": {
            "name": "test_add_wikilinks_match_aliases",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandardAnnotator.test_add_nel_unmatch": {
            "name": "test_add_nel_unmatch",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kglm-data-master/tests/test_prefix_tree.py": {
        "TestTreeNode.test_is_dict": {
            "name": "test_is_dict",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_id": {
            "name": "test_id",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTreeNode.test_is_terminal": {
            "name": "test_is_terminal",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrefixTree.test_add": {
            "name": "test_add",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrefixTree.test_terminal": {
            "name": "test_terminal",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kglm-data-master/tests/test_realm_coref_fcts.py": {
        "TestRealmCorefFcts.test_window": {
            "name": "test_window",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealmCorefFcts.test_add_offset": {
            "name": "test_add_offset",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealmCorefFcts.test_merge_clusters": {
            "name": "test_merge_clusters",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kglm-data-master/tests/__init__.py": {}
}
{
    "kinesis-test-loading-master/loading/cli.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "send_events": {
            "name": "send_events",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "Exception",
                    "Optional[Exception]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "event_count": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "accounts": [
                    "str",
                    "list[\"custom_index\"]",
                    "Optional[List[\"custom_index\"]]",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "T"
                ],
                "emails": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kinesis-test-loading-master/loading/config.py": {
        "load_config": {
            "name": "load_config",
            "location": 9,
            "return": [
                "str",
                "Config"
            ],
            "arguments": {}
        }
    },
    "kinesis-test-loading-master/loading/data_generation.py": {
        "_get_random": {
            "name": "_get_random",
            "location": 8,
            "return": [
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "random_account": {
            "name": "random_account",
            "location": 13,
            "return": [
                "int",
                "application.domain.repositories.RoleRepository",
                "application.domain.repositories.DominionRepository",
                "application.domain.repositories.UserRepository",
                "application.domain.repositories.RankingRepository",
                "str"
            ],
            "arguments": {
                "account_ids": [
                    "list"
                ]
            }
        },
        "random_email": {
            "name": "random_email",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "emails": [
                    "List[str]"
                ]
            }
        },
        "random_email_or_nothing": {
            "name": "random_email_or_nothing",
            "location": 23,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "emails": [
                    "List[str]"
                ],
                "weighting": [
                    "int"
                ]
            }
        },
        "event_key": {
            "name": "event_key",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "random_url": {
            "name": "random_url",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "urls": [
                    "List[str]"
                ]
            }
        },
        "random_event_type": {
            "name": "random_event_type",
            "location": 48,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Union[str, List[str]]",
                "Optional[str]",
                "Mapping"
            ],
            "arguments": {}
        },
        "random_conversion_id": {
            "name": "random_conversion_id",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "ids": [
                    "List[int]"
                ]
            }
        },
        "generate_account_ids": {
            "name": "generate_account_ids",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "count": [
                    "int"
                ]
            }
        },
        "generate_emails": {
            "name": "generate_emails",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "domain": [
                    "str"
                ]
            }
        },
        "generate_account_event_keys": {
            "name": "generate_account_event_keys",
            "location": 65,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "account_ids": [
                    "list"
                ]
            }
        },
        "generate_event_data": {
            "name": "generate_event_data",
            "location": 71,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "generate_visit_data": {
            "name": "generate_visit_data",
            "location": 75,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "generate_event_fn": {
            "name": "generate_event_fn",
            "location": 79,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "account_ids": [
                    "list"
                ],
                "emails": [
                    "List[str]"
                ]
            }
        },
        "generate_event_fn.generate_event": {
            "name": "generate_event",
            "location": 85,
            "return": [
                "Event",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "kinesis-test-loading-master/loading/domain.py": {
        "StreamSendable.partition_key": {
            "name": "partition_key",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamSendable.data": {
            "name": "data",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamSendable.to_record": {
            "name": "to_record",
            "location": 34,
            "return": [
                "Record"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamSendableDataClass.data": {
            "name": "data",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamSendableDataClass.to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.partition_key": {
            "name": "partition_key",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visit.partition_key": {
            "name": "partition_key",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.partition_key": {
            "name": "partition_key",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kinesis-test-loading-master/loading/sender.py": {
        "Sender.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_client": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Sender.send_data": {
            "name": "send_data",
            "location": 9,
            "return": [
                "int",
                "Optional[Dict]",
                "bytes",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[int, str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "dict",
                    "Tuple[Optional[float], Optional[float]]"
                ]
            }
        }
    },
    "kinesis-test-loading-master/loading/stream_client.py": {
        "StreamClient.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "stream_name": [
                    "str"
                ]
            }
        },
        "StreamClient.put_record": {
            "name": "put_record",
            "location": 16,
            "return": [
                "bool",
                "PutRecordResponse"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    }
}
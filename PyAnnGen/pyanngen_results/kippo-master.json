{
    "kippo-master/conf/update_zappasettings_with_vpcinfo.py": {
        "find_zappasettings_filepath": {
            "name": "find_zappasettings_filepath",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[List]"
                ]
            }
        },
        "get_vpc_privatesubents_and_sgid": {
            "name": "get_vpc_privatesubents_and_sgid",
            "location": 27,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "stackname": [
                    "str",
                    "bool",
                    "int"
                ],
                "region": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "update_zappa_settings": {
            "name": "update_zappa_settings",
            "location": 58,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "stackname": [],
                "stage": [
                    "List[str]",
                    "Dict[str,Any]",
                    "str"
                ],
                "region": [
                    "typing.Text"
                ],
                "filepath": [
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "kippo-master/docs/conf.py": {},
    "kippo-master/kippo/manage.py": {},
    "kippo-master/kippo/accounts/admin.py": {
        "EmailDomainAdminReadOnlyInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ],
                "obj": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "EmailDomainAdminReadOnlyInline.get_queryset": {
            "name": "get_queryset",
            "location": 30,
            "return": [
                "str",
                "List[str]",
                "Dict[str,str]",
                "bool",
                "Dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "EmailDomainAdminInline.get_queryset": {
            "name": "get_queryset",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "List",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "GithubAccessTokenAdminReadOnlyInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ],
                "obj": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "GithubAccessTokenAdminInline.get_queryset": {
            "name": "get_queryset",
            "location": 61,
            "return": [
                "str",
                "List[str]",
                "List",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "GithubAccessTokenAdminInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ],
                "obj": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "OrganizationMembershipAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 76,
            "return": [
                "int",
                "Dict[str,dict[str,Any]]",
                "List",
                "str",
                "float",
                "List[str]",
                "bool",
                "List[tuple[Union[str,Any]]]",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "OrganizationMembershipAdmin.get_user_github_login": {
            "name": "get_user_github_login",
            "location": 82,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "KippoOrganizationAdmin.collect_organization_projects_action": {
            "name": "collect_organization_projects_action",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "queryset": [
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "KippoOrganizationAdmin.collect_github_project_issues_action": {
            "name": "collect_github_project_issues_action",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "KippoUserAdmin.get_is_collaborator": {
            "name": "get_is_collaborator",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "KippoUserAdmin.get_github_organizations": {
            "name": "get_github_organizations",
            "location": 159,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "PersonalHolidayAdmin.get_form": {
            "name": "get_form",
            "location": 173,
            "return": [
                "str",
                "List[tuple[Union[str,Any]]]",
                "bool",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "Dict",
                    "None"
                ]
            }
        },
        "PersonalHolidayAdmin.save_model": {
            "name": "save_model",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Tuple[int]",
                    "Dict",
                    "django.http.HttpRequest",
                    "viewer.models.Archive"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "form": [
                    "bool",
                    "Dict",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest"
                ],
                "change": [
                    "bool",
                    "Dict",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "PersonalHolidayAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 185,
            "return": [
                "List",
                "Tuple[float,float]",
                "int",
                "List[str]",
                "cmk.utils.type_defs.UserId",
                "List[tuple[Union[str,Any]]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "LogEntryAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "LogEntryAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "LogEntryAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "LogEntryAdmin.has_view_permission": {
            "name": "has_view_permission",
            "location": 221,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Dict[str,str]]",
                "Dict[str,Type[Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "core.models.Recipe",
                    "django.http.HttpRequest",
                    "viewer.models.Archive"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "LogEntryAdmin.object_link": {
            "name": "object_link",
            "location": 226,
            "return": [
                "str",
                "List",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str,Any]",
                    "models.Location"
                ]
            }
        },
        "LogEntryAdmin.queryset": {
            "name": "queryset",
            "location": 242,
            "return": [
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "kippo-master/kippo/accounts/apps.py": {},
    "kippo-master/kippo/accounts/exceptions.py": {},
    "kippo-master/kippo/accounts/models.py": {
        "generate_random_secret": {
            "name": "generate_random_secret",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "get_climanager_user": {
            "name": "get_climanager_user",
            "location": 321,
            "return": [
                "Dict[int,Any]",
                "tracim.models.auth.User",
                "Dict",
                "Dict[str,str]",
                "zam_repondeur.models.Lecture",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "Set"
            ],
            "arguments": {}
        },
        "delete_kippouser_organizationmemberships": {
            "name": "delete_kippouser_organizationmemberships",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "uuid.UUID",
                    "T"
                ],
                "instance": [
                    "str",
                    "Iterable[str]",
                    "uuid.UUID",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "KippoOrganization.email_domains": {
            "name": "email_domains",
            "location": 76,
            "return": [
                "str",
                "Dict[str,Dict[str,int]]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.slug": {
            "name": "slug",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.get_github_developer_kippousers": {
            "name": "get_github_developer_kippousers",
            "location": 84,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.webhook_url": {
            "name": "webhook_url",
            "location": 94,
            "return": [
                "Text",
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.create_unassigned_kippouser": {
            "name": "create_unassigned_kippouser",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.get_unassigned_kippouser": {
            "name": "get_unassigned_kippouser",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.clean": {
            "name": "clean",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.save": {
            "name": "save",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganization.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailDomain.clean": {
            "name": "clean",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.committed_days": {
            "name": "committed_days",
            "location": 162,
            "return": [
                "int",
                "bool",
                "zerver.models.Realm",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.committed_weekdays": {
            "name": "committed_weekdays",
            "location": 168,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.get_workday_identifers": {
            "name": "get_workday_identifers",
            "location": 178,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.email_domain": {
            "name": "email_domain",
            "location": 189,
            "return": [
                "str",
                "Dict[str,Dict[str,int]]",
                "List[str]",
                "Dict[int,dict[str,str]]",
                "float",
                "Pattern",
                "Dict[str,dict[str,str]]",
                "Dict[str,dict[str,Any]]",
                "List[tuple[Union[str,str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.clean": {
            "name": "clean",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.save": {
            "name": "save",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMembership.__str__": {
            "name": "__str__",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.display_name": {
            "name": "display_name",
            "location": 235,
            "return": [
                "Text",
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.personal_holiday_dates": {
            "name": "personal_holiday_dates",
            "location": 244,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.public_holiday_dates": {
            "name": "public_holiday_dates",
            "location": 251,
            "return": [
                "int",
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.organizations": {
            "name": "organizations",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.get_membership": {
            "name": "get_membership",
            "location": 259,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "str",
                    "common.DictOfAny",
                    "django.template.RequestContext"
                ]
            }
        },
        "KippoUser.get_assigned_kippotasks": {
            "name": "get_assigned_kippotasks",
            "location": 262,
            "return": [
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course",
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.get_estimatedays": {
            "name": "get_estimatedays",
            "location": 267,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUser.__str__": {
            "name": "__str__",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonalHoliday.__str__": {
            "name": "__str__",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.__str__": {
            "name": "__str__",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicHoliday.__str__": {
            "name": "__str__",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/urls.py": {},
    "kippo-master/kippo/accounts/views.py": {
        "_get_organization_monthly_available_workdays": {
            "name": "_get_organization_monthly_available_workdays",
            "location": 16,
            "return": [
                "Tuple[(list, collections.defaultdict[(str, Any)])]"
            ],
            "arguments": {
                "organization": [
                    "Tuple[Union[int,int]]",
                    "Set",
                    "zerver.models.Realm",
                    "bool",
                    "str",
                    "Tuple[int,int]",
                    "Dict[str,Any]",
                    "models.Payment",
                    "django.forms.ModelForm",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "view_organization_members": {
            "name": "view_organization_members",
            "location": 50,
            "return": [
                "Dict[str,Any]",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "request": [
                    "str",
                    "models.WalletRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "kippo-master/kippo/accounts/__init__.py": {},
    "kippo-master/kippo/accounts/management/__init__.py": {},
    "kippo-master/kippo/accounts/management/commands/loadcountries.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/management/commands/__init__.py": {},
    "kippo-master/kippo/accounts/migrations/0001_initial.py": {},
    "kippo-master/kippo/accounts/migrations/0002_auto_20190730_0421.py": {},
    "kippo-master/kippo/accounts/migrations/0003_auto_20200120_0926.py": {},
    "kippo-master/kippo/accounts/migrations/0004_auto_20200330_1202.py": {},
    "kippo-master/kippo/accounts/migrations/__init__.py": {},
    "kippo-master/kippo/accounts/tests/test_admin.py": {
        "IsStaffOrganizationKippoUserModelAdminTestCase.test_users_list_objects": {
            "name": "test_users_list_objects",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoUserModelAdminTestCase.test_kippoorganization_list_objects": {
            "name": "test_kippoorganization_list_objects",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoUserModelAdminTestCase.test_organizationmemberships_list_objects": {
            "name": "test_organizationmemberships_list_objects",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoUserModelAdminTestCase.test_personalholidays_list_objects": {
            "name": "test_personalholidays_list_objects",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/tests/test_admin_publicholiday.py": {
        "AdminPublicHolidayTestCase.test_form_return_correctly": {
            "name": "test_form_return_correctly",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminPublicHolidayTestCase.test_personalholidays_list_objects_by_super_user": {
            "name": "test_personalholidays_list_objects_by_super_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminPublicHolidayTestCase.test_personalholidays_list_objects_by_staff_user_with_no_org": {
            "name": "test_personalholidays_list_objects_by_staff_user_with_no_org",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminPublicHolidayTestCase.test_personalholidays_list_objects_by_staff_user_with_org": {
            "name": "test_personalholidays_list_objects_by_staff_user_with_org",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/tests/test_kippoorganization_model.py": {
        "KippoOrganizationTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoOrganizationTestCase.create_organization_unassigned_kippouser": {
            "name": "create_organization_unassigned_kippouser",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/tests/test_kippouser_model.py": {
        "KippoUserCreationTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_create_kippouser": {
            "name": "test_create_kippouser",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_invalid_emaildomain": {
            "name": "test_invalid_emaildomain",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_valid_emaildomain": {
            "name": "test_valid_emaildomain",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_valid_login_org_user": {
            "name": "test_valid_login_org_user",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_valid_login_multi_org_user": {
            "name": "test_valid_login_multi_org_user",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_invalid_email_for_org_membership": {
            "name": "test_invalid_email_for_org_membership",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_noemail_for_org_membership": {
            "name": "test_noemail_for_org_membership",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_organization_get_github_developer_kippousers": {
            "name": "test_organization_get_github_developer_kippousers",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoUserCreationTestCase.test_organizationmembership_get_workday_identifers": {
            "name": "test_organizationmembership_get_workday_identifers",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/tests/test_views.py": {
        "AccountsViewsTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTestCase.test___get_organization_monthly_available_workdays": {
            "name": "test___get_organization_monthly_available_workdays",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTestCase.test___get_organization_monthly_available_workdays__publicholidays": {
            "name": "test___get_organization_monthly_available_workdays__publicholidays",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTestCase.test___get_organization_monthly_available_workdays__persionalholidays": {
            "name": "test___get_organization_monthly_available_workdays__persionalholidays",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTestCase.test_view_organization_members": {
            "name": "test_view_organization_members",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/accounts/tests/__init__.py": {},
    "kippo-master/kippo/common/admin.py": {
        "UserCreatedBaseModelAdmin.save_model": {
            "name": "save_model",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Dict[str,Any]",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "form": [
                    "bool",
                    "Dict",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest"
                ],
                "change": [
                    "bool",
                    "Dict",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "UserCreatedBaseModelAdmin.save_formset": {
            "name": "save_formset",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "form": [
                    "List",
                    "bool",
                    "django.forms.Form",
                    "django.http.requesHttpRequest"
                ],
                "formset": [],
                "change": [
                    "List",
                    "bool",
                    "django.forms.Form",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "AllowIsStaffAdminMixin.check_perm": {
            "name": "check_perm",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_obj": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "AllowIsStaffAdminMixin.has_view_permission": {
            "name": "has_view_permission",
            "location": 40,
            "return": [
                "int",
                "Callable[[], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "AllowIsStaffAdminMixin.has_add_permission": {
            "name": "has_add_permission",
            "location": 43,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AllowIsStaffAdminMixin.has_change_permission": {
            "name": "has_change_permission",
            "location": 46,
            "return": [
                "int",
                "Callable[[], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "AllowIsStaffAdminMixin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 49,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "AllowIsStaffAdminMixin.has_module_permission": {
            "name": "has_module_permission",
            "location": 52,
            "return": [
                "int",
                "str",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form"
                ]
            }
        },
        "AllowIsStaffReadonlyMixin.check_perm": {
            "name": "check_perm",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_obj": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "AllowIsStaffReadonlyMixin.has_add_permission": {
            "name": "has_add_permission",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Tuple[int]",
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AllowIsStaffReadonlyMixin.has_change_permission": {
            "name": "has_change_permission",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Tuple[int]",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "AllowIsStaffReadonlyMixin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Tuple[int]",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "AllowIsStaffReadonlyMixin.has_module_permission": {
            "name": "has_module_permission",
            "location": 88,
            "return": [
                "int",
                "str",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form"
                ]
            }
        },
        "AllowIsSuperuserAdminMixin.check_perm": {
            "name": "check_perm",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_obj": [
                    "int"
                ]
            }
        },
        "AllowIsSuperuserAdminMixin.has_add_permission": {
            "name": "has_add_permission",
            "location": 100,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AllowIsSuperuserAdminMixin.has_change_permission": {
            "name": "has_change_permission",
            "location": 103,
            "return": [
                "int",
                "Callable[[], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "AllowIsSuperuserAdminMixin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 106,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "AllowIsSuperuserAdminMixin.has_module_permission": {
            "name": "has_module_permission",
            "location": 109,
            "return": [
                "int",
                "str",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form"
                ]
            }
        },
        "OrganizationTaskQuerysetModelAdminMixin.get_queryset": {
            "name": "get_queryset",
            "location": 114,
            "return": [
                "float",
                "int",
                "bool",
                "List",
                "Optional[str]",
                "List[tuple[Union[str,Any]]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "OrganizationQuerysetModelAdminMixin.get_queryset": {
            "name": "get_queryset",
            "location": 122,
            "return": [
                "float",
                "bool",
                "str",
                "Dict[str,dict[str,Any]]",
                "Dict[str,list[Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "PrettyJSONWidget.format_value": {
            "name": "format_value",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "kippo-master/kippo/common/apps.py": {},
    "kippo-master/kippo/common/models.py": {},
    "kippo-master/kippo/common/tests.py": {
        "setup_basic_project": {
            "name": "setup_basic_project",
            "location": 17,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "organization": [
                    "str",
                    "None",
                    "int",
                    "Set[str]",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "repository_name": [
                    "Text",
                    "str",
                    "Sequence[str]",
                    "List"
                ],
                "github_project_api_id": [
                    "Text",
                    "str",
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "column_info": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "IsStaffModelAdminTestCaseBase.setUp": {
            "name": "setUp",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/common/views.py": {},
    "kippo-master/kippo/common/__init__.py": {},
    "kippo-master/kippo/common/migrations/__init__.py": {},
    "kippo-master/kippo/kippo/aws.py": {
        "parse_s3_uri": {
            "name": "parse_s3_uri",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "uri": [
                    "bool",
                    "str"
                ]
            }
        },
        "s3_key_exists": {
            "name": "s3_key_exists",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "upload_s3_csv": {
            "name": "upload_s3_csv",
            "location": 44,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "headers": [
                    "str"
                ],
                "row_generator": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "download_s3_csv": {
            "name": "download_s3_csv",
            "location": 58,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "kippo-master/kippo/kippo/context_processors.py": {
        "global_view_additional_context": {
            "name": "global_view_additional_context",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "models.WalletRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "kippo-master/kippo/kippo/urls.py": {},
    "kippo-master/kippo/kippo/wsgi.py": {},
    "kippo-master/kippo/kippo/__init__.py": {},
    "kippo-master/kippo/kippo/settings/base.py": {},
    "kippo-master/kippo/kippo/settings/circleci.py": {},
    "kippo-master/kippo/kippo/settings/local.py": {},
    "kippo-master/kippo/kippo/settings/production.py": {},
    "kippo-master/kippo/kippo/settings/__init__.py": {},
    "kippo-master/kippo/octocat/admin.py": {
        "update_repository_labels": {
            "name": "update_repository_labels",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "github_orgainization_name": [
                    "str",
                    "bool",
                    "raiden.utils.Address",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "token": [
                    "bool",
                    "str"
                ],
                "repository_name": [
                    "str"
                ],
                "label_definitions": [
                    "str",
                    "Dict[str,list[Any]]",
                    "bool",
                    "Optional[str]",
                    "Dict[str,List[Any]]",
                    "Iterable[int]"
                ],
                "delete": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,List[Any]]",
                    "Iterable[int]"
                ]
            }
        },
        "GithubRepositoryAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 53,
            "return": [
                "int",
                "Dict[str,dict[str,Any]]",
                "List",
                "str",
                "float",
                "List[str]",
                "bool",
                "List[tuple[Union[str,Any]]]",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "GithubRepositoryAdmin.get_label_set_name": {
            "name": "get_label_set_name",
            "location": 60,
            "return": [
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List",
                "Set"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "List"
                ]
            }
        },
        "GithubRepositoryAdmin.update_labels": {
            "name": "update_labels",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "GithubRepositoryAdmin.get_html_url": {
            "name": "get_html_url",
            "location": 90,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict",
                    "bool",
                    "Tuple[str,int]",
                    "Dict[str,Any]",
                    "Tuple[Union[str,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GithubMilestoneAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 103,
            "return": [
                "float",
                "bool",
                "str",
                "Dict[str,dict[str,Any]]",
                "Dict[str,list[Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "GithubMilestoneAdmin.get_kippomilestone_title": {
            "name": "get_kippomilestone_title",
            "location": 110,
            "return": [
                "Text",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GithubMilestoneAdmin.get_githubrepository_name": {
            "name": "get_githubrepository_name",
            "location": 116,
            "return": [
                "Text",
                "str",
                "Mapping[str,Any]",
                "Dict[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                    "MutableSequence",
                    "str",
                    "Dict",
                    "None",
                    "bytes",
                    "zam_repondeur.models.Lecture",
                    "Dict[str,Any]"
                ]
            }
        },
        "GithubMilestoneAdmin.get_html_url": {
            "name": "get_html_url",
            "location": 122,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict",
                    "bool",
                    "Tuple[str,int]",
                    "Dict[str,Any]",
                    "Tuple[Union[str,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GithubRepositoryLabelSetAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 137,
            "return": [
                "float",
                "int",
                "bool",
                "List[tuple[Union[str,Any]]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "GithubRepositoryLabelSetAdmin.get_label_count": {
            "name": "get_label_count",
            "location": 144,
            "return": [
                "Text",
                "int",
                "str",
                "Dict[str,Any]",
                "bytes",
                "Callable",
                "Optional[Dict[str,Any]]",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[torch.nn.utils.rnn.PackedSequence]",
                    "List[P]"
                ]
            }
        },
        "GithubRepositoryLabelSetAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "Callable[...,collections.abc.Coroutine]",
                    "Tuple[int]",
                    "viewer.models.Archive",
                    "Callable[...,Coroutine]"
                ],
                "obj": [
                    "None",
                    "str",
                    "django.http.HttpRequest",
                    "core.models.Recipe"
                ]
            }
        },
        "GithubWebhookEventAdmin.get_pprint_event": {
            "name": "get_pprint_event",
            "location": 171,
            "return": [
                "Text",
                "str",
                "List[tuple[Union[str,str]]]",
                "Union[int,float,complex]",
                "List",
                "IO",
                "List[annofabapi.models.Task]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[bool,int,str]",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "GithubWebhookEventAdmin.get_event_action": {
            "name": "get_event_action",
            "location": 181,
            "return": [
                "List[str]",
                "Text",
                "str",
                "Dict",
                "int",
                "float",
                "zam_repondeur.models.Lecture",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "GithubWebhookEventAdmin.process_webhook_events": {
            "name": "process_webhook_events",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse"
                ],
                "queryset": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "app.models.dto.RenewRequest"
                ]
            }
        },
        "GithubWebhookEventAdmin.reset_webhook_events": {
            "name": "reset_webhook_events",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse"
                ],
                "queryset": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,dict[str,Any]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "bytes"
                ]
            }
        }
    },
    "kippo-master/kippo/octocat/apps.py": {},
    "kippo-master/kippo/octocat/functions.py": {
        "get_github_issue_estimate_label": {
            "name": "get_github_issue_estimate_label",
            "location": 50,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "ghorgs.wrappers.GithubIssue",
                    "bool",
                    "Dict",
                    "Mapping"
                ],
                "prefix": [
                    "str"
                ],
                "day_workhours": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "build_latest_comment": {
            "name": "build_latest_comment",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "issue": [
                    "bytes",
                    "annofabapi.models.Inspection",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "get_github_issue_category_label": {
            "name": "get_github_issue_category_label",
            "location": 112,
            "return": [
                "None",
                "ghorgs.wrappers.GithubIssue",
                "List",
                "int",
                "str",
                "Tuple"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "List[str]",
                    "ghorgs.wrappers.GithubIssue",
                    "logging.LogRecord"
                ],
                "prefix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_github_issue_prefixed_labels": {
            "name": "get_github_issue_prefixed_labels",
            "location": 140,
            "return": [
                "List[GithubIssuePrefixedLabel]"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "ghorgs.wrappers.GithubIssue",
                    "str",
                    "Tuple"
                ],
                "prefix_delim": [
                    "Text",
                    "str",
                    "bytes",
                    "Callable[[bytes],bytes]",
                    "List",
                    "int"
                ]
            }
        },
        "get_tags_from_prefixedlabels": {
            "name": "get_tags_from_prefixedlabels",
            "location": 149,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "prefixed_labels": [
                    "str",
                    "List[dict[str,str]]",
                    "bool",
                    "List[Dict[str,str]]",
                    "Iterable[str]"
                ]
            }
        },
        "get_repo_url_from_issuecomment_url": {
            "name": "get_repo_url_from_issuecomment_url",
            "location": 157,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "queue_incoming_project_card_event": {
            "name": "queue_incoming_project_card_event",
            "location": 168,
            "return": [
                "octocat.models.GithubWebhookEvent"
            ],
            "arguments": {
                "organization": [
                    "str",
                    "abilian.core.models.subjects.User",
                    "models.User",
                    "models.UserAuth",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ],
                "event_type": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "event": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "raiden.utils.Address"
                ]
            }
        },
        "get_kippomilestone_from_github_issue": {
            "name": "get_kippomilestone_from_github_issue",
            "location": 182,
            "return": [
                "None",
                "str",
                "bytes",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "Dict[str,bool]",
                    "Callable",
                    "str",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str,Any]"
                ],
                "organization": [
                    "str",
                    "Tuple[Union[str,int]]",
                    "djmoney.contrib.exchange.models.Rate",
                    "None",
                    "Tuple[str,int]",
                    "Optional[str]"
                ]
            }
        },
        "process_webhookevent_ids": {
            "name": "process_webhookevent_ids",
            "location": 208,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "webhookevent_ids": [
                    "str",
                    "int",
                    "transfer.models.OrderID"
                ]
            }
        },
        "GithubIssuePrefixedLabel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "prefix_delim": [
                    "Text",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "GithubIssuePrefixedLabel.prefix": {
            "name": "prefix",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssuePrefixedLabel.value": {
            "name": "value",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookProcessor.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookProcessor.get_organization_issue_processor": {
            "name": "get_organization_issue_processor",
            "location": 224,
            "return": [
                "tasks.periodic.tasks.OrganizationIssueProcessor"
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "bool",
                    "Set",
                    "abilian.core.models.subjects.User",
                    "int",
                    "db.models.Cowboy"
                ]
            }
        },
        "GithubWebhookProcessor._load_event_to_githubissue": {
            "name": "_load_event_to_githubissue",
            "location": 233,
            "return": [
                "bool",
                "Dict[str, Any]",
                "models.PermissionLookup",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[KT, VT]"
                ]
            }
        },
        "GithubWebhookProcessor._process_projectcard_event": {
            "name": "_process_projectcard_event",
            "location": 246,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "webhookevent": [
                    "bool",
                    "List[str]",
                    "str",
                    "Exception",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "GithubWebhookProcessor._process_issues_event": {
            "name": "_process_issues_event",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "webhookevent": [
                    "Dict",
                    "raiden.utils.Address",
                    "qutebrowser.utils.usertypes.ClickTarget"
                ]
            }
        },
        "GithubWebhookProcessor._process_issuecomment_event": {
            "name": "_process_issuecomment_event",
            "location": 474,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "webhookevent": [
                    "Dict[str,Any]",
                    "Dict",
                    "purplship.core.models.ShipmentRequest",
                    "logging.LogRecord",
                    "qutebrowser.utils.usertypes.ClickTarget"
                ]
            }
        },
        "GithubWebhookProcessor._get_events": {
            "name": "_get_events",
            "location": 524,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookProcessor.process_webhook_events": {
            "name": "process_webhook_events",
            "location": 545,
            "return": [
                "Counter"
            ],
            "arguments": {
                "self": [],
                "webhookevents": [
                    "List",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "kippo-master/kippo/octocat/models.py": {
        "webhook_events_default": {
            "name": "webhook_events_default",
            "location": 89,
            "return": [
                "str",
                "List[Text]"
            ],
            "arguments": {}
        },
        "GithubRepositoryLabelSet.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "Union[int,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRepository.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAccessToken.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "Text",
                "str",
                "Dict",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookEvent.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/urls.py": {},
    "kippo-master/kippo/octocat/views.py": {
        "validate_webhook_request": {
            "name": "validate_webhook_request",
            "location": 23,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Dict",
                "List"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "Dict[str,Any]",
                    "django.http.HttpRequest"
                ],
                "organization": [
                    "Set[str]",
                    "scrapy.http.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "webhook": {
            "name": "webhook",
            "location": 53,
            "return": [
                "Dict[str,Any]",
                "HttpResponseBadRequest",
                "str",
                "HttpResponseForbidden",
                "Optional[str]",
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "organization_id": [
                    "int",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None"
                ]
            }
        }
    },
    "kippo-master/kippo/octocat/__init__.py": {},
    "kippo-master/kippo/octocat/event_handlers/webhooks.py": {
        "process_webhooks": {
            "name": "process_webhooks",
            "location": 15,
            "return": [
                "Tuple[(Counter, Any)]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        }
    },
    "kippo-master/kippo/octocat/event_handlers/__init__.py": {},
    "kippo-master/kippo/octocat/migrations/0001_initial.py": {},
    "kippo-master/kippo/octocat/migrations/0002_auto_20190803_0239.py": {},
    "kippo-master/kippo/octocat/migrations/0003_auto_20190805_0944.py": {},
    "kippo-master/kippo/octocat/migrations/0004_githubrepositorylabelset_organization.py": {},
    "kippo-master/kippo/octocat/migrations/0005_auto_20200120_0926.py": {},
    "kippo-master/kippo/octocat/migrations/0006_auto_20200304_1325.py": {},
    "kippo-master/kippo/octocat/migrations/0007_auto_20200330_1202.py": {},
    "kippo-master/kippo/octocat/migrations/0008_auto_20201023_1804.py": {},
    "kippo-master/kippo/octocat/migrations/__init__.py": {},
    "kippo-master/kippo/octocat/tests/test_admin.py": {
        "IsStaffOrganizationAdminTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationAdminTestCase.test_githubrepositoryadmin_list_objects": {
            "name": "test_githubrepositoryadmin_list_objects",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationAdminTestCase.test_githubmilestoneadmin_list_objects": {
            "name": "test_githubmilestoneadmin_list_objects",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationAdminTestCase.test_githublabelsetadmin_list_objects": {
            "name": "test_githublabelsetadmin_list_objects",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookEventAdminActionsTestCase.setUp": {
            "name": "setUp",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookEventAdminActionsTestCase.test_process_webhook_events_action": {
            "name": "test_process_webhook_events_action",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubWebhookEventAdminActionsTestCase.test_reset_webhook_events_action": {
            "name": "test_reset_webhook_events_action",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_eventhandlers_webhooks.py": {
        "ProcessWebhooksTestCase.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessWebhooksTestCase.test_process_webhooks": {
            "name": "test_process_webhooks",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_functions.py": {
        "OctocatFunctionsTestCase.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsTestCase.test_get_kippomilestone_from_github_issue__without__githubmilestone": {
            "name": "test_get_kippomilestone_from_github_issue__without__githubmilestone",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsTestCase.test_get_kippomilestone_from_github_issue__with__githubmilestone__with__githubrepository": {
            "name": "test_get_kippomilestone_from_github_issue__with__githubmilestone__with__githubrepository",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsTestCase.test_get_kippomilestone_from_github_issue__githubmilestone__with__kippomilestone": {
            "name": "test_get_kippomilestone_from_github_issue__githubmilestone__with__kippomilestone",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_functions_webhookeventprocessor.py": {
        "OctocatFunctionsGithubWebhookProcessorTestCase.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test__get_events": {
            "name": "test__get_events",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_issues_event__existing": {
            "name": "test_issues_event__existing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_issues_event__nonexisting_with_other_same_repo_task": {
            "name": "test_issues_event__nonexisting_with_other_same_repo_task",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_issues_event__nonexisting_with_no_same_repo_task": {
            "name": "test_issues_event__nonexisting_with_no_same_repo_task",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_issuecomment_event__existing_issue": {
            "name": "test_issuecomment_event__existing_issue",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_issuecomment_event__nonexisting_issue": {
            "name": "test_issuecomment_event__nonexisting_issue",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_projectcard_event__existing_taskstatus": {
            "name": "test_projectcard_event__existing_taskstatus",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorTestCase.test_projectcard_event__nonexisting_taskstatus": {
            "name": "test_projectcard_event__nonexisting_taskstatus",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_views.py": {
        "OctocatViewsTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatViewsTestCase.test_application_xwwwformurlencoded": {
            "name": "test_application_xwwwformurlencoded",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatViewsTestCase.test_application_json": {
            "name": "test_application_json",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatViewsTestCase.test_invalid_contenttype": {
            "name": "test_invalid_contenttype",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_webhookevent_issueflow.py": {
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevent_issue_standard_lifecycle__same_assignment": {
            "name": "test_webhookevent_issue_standard_lifecycle__same_assignment",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhook_issue__change_assignee": {
            "name": "test_webhook_issue__change_assignee",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevents_issuefromnote__get_events": {
            "name": "test_webhookevents_issuefromnote__get_events",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevents_issuefromnote__get_events__new_repo": {
            "name": "test_webhookevents_issuefromnote__get_events__new_repo",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevent_issue_unassigned_closed_task_github_user_removed": {
            "name": "test_webhookevent_issue_unassigned_closed_task_github_user_removed",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevent_issue_existing_issues_milestoned__with_existing_milestone": {
            "name": "test_webhookevent_issue_existing_issues_milestoned__with_existing_milestone",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OctocatFunctionsGithubWebhookProcessorIssueLifecycleTestCase.test_webhookevent_issue_existing_issues_milestoned__without_existing_milestone": {
            "name": "test_webhookevent_issue_existing_issues_milestoned__without_existing_milestone",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/test_webhookevent_model.py": {
        "WebhookTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_webhook_ping_event": {
            "name": "test_webhook_ping_event",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_project_card_webhook_valid_signature": {
            "name": "test_project_card_webhook_valid_signature",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_project_card_webhook_invalid_signature": {
            "name": "test_project_card_webhook_invalid_signature",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_project_card_webhook_no_signature": {
            "name": "test_project_card_webhook_no_signature",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_queue_incoming_project_card_event__created": {
            "name": "test_queue_incoming_project_card_event__created",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_queue_incoming_project_card_event__edited": {
            "name": "test_queue_incoming_project_card_event__edited",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_queue_incoming_project_card_event__moved": {
            "name": "test_queue_incoming_project_card_event__moved",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_queue_incoming_project_card_event__converted": {
            "name": "test_queue_incoming_project_card_event__converted",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhookTestCase.test_queue_incoming_project_card_event__deleted": {
            "name": "test_queue_incoming_project_card_event__deleted",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/octocat/tests/utils.py": {
        "load_webhookevent": {
            "name": "load_webhookevent",
            "location": 8,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "IO[Any]"
                ],
                "secret_encoded": [
                    "dict",
                    "Callable",
                    "Dict[str, Dict[str, Any]]"
                ],
                "decode": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[Sequence[int]]",
                    "Sequence",
                    "int"
                ]
            }
        }
    },
    "kippo-master/kippo/octocat/tests/__init__.py": {},
    "kippo-master/kippo/projects/admin.py": {
        "create_github_organizational_project_action": {
            "name": "create_github_organizational_project_action",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [],
                "request": [],
                "queryset": []
            }
        },
        "create_github_repository_milestones_action": {
            "name": "create_github_repository_milestones_action",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [],
                "request": [],
                "queryset": []
            }
        },
        "collect_project_github_repositories_action": {
            "name": "collect_project_github_repositories_action",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [],
                "request": [],
                "queryset": []
            }
        },
        "KippoMilestoneReadOnlyInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "KippoMilestoneReadOnlyInline.get_queryset": {
            "name": "get_queryset",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "KippoMilestoneAdminInline.get_queryset": {
            "name": "get_queryset",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectWeeklyEffortReadOnlyInine.has_add_permission": {
            "name": "has_add_permission",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "ProjectWeeklyEffortReadOnlyInine.get_queryset": {
            "name": "get_queryset",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectWeeklyEffortAdminInline.get_queryset": {
            "name": "get_queryset",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectWeeklyEffortAdminInline.get_formset": {
            "name": "get_formset",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectStatusReadOnlyInine.has_add_permission": {
            "name": "has_add_permission",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "KippoProjectStatusReadOnlyInine.get_queryset": {
            "name": "get_queryset",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "KippoProjectStatusAdminInline.get_queryset": {
            "name": "get_queryset",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "KippoProjectAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectAdmin.get_updated_by_display": {
            "name": "get_updated_by_display",
            "location": 293,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.get_confidence_display": {
            "name": "get_confidence_display",
            "location": 301,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.get_projectsurvey_display_url": {
            "name": "get_projectsurvey_display_url",
            "location": 310,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.export_project_kippotaskstatus_csv": {
            "name": "export_project_kippotaskstatus_csv",
            "location": 319,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": []
            }
        },
        "KippoProjectAdmin.export_kippoprojectstatus_comments_csv": {
            "name": "export_kippoprojectstatus_comments_csv",
            "location": 343,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": []
            }
        },
        "KippoProjectAdmin.get_latest_kippoprojectstatus_comment": {
            "name": "get_latest_kippoprojectstatus_comment",
            "location": 361,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.get_projecteffort_display": {
            "name": "get_projecteffort_display",
            "location": 372,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.show_github_project_html_url": {
            "name": "show_github_project_html_url",
            "location": 394,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoProjectAdmin.save_formset": {
            "name": "save_formset",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "form": [],
                "formset": [],
                "change": []
            }
        },
        "KippoProjectAdmin.get_form": {
            "name": "get_form",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectAdmin.save_model": {
            "name": "save_model",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [],
                "form": [],
                "change": []
            }
        },
        "KippoProjectAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "KippoMilestoneAdmin.get_project_name": {
            "name": "get_project_name",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoMilestoneAdmin.get_task_count": {
            "name": "get_task_count",
            "location": 489,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "KippoMilestoneAdmin.response_add": {
            "name": "response_add",
            "location": 497,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [],
                "post_url_continue": [
                    "None"
                ]
            }
        },
        "KippoMilestoneAdmin.response_change": {
            "name": "response_change",
            "location": 502,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "KippoMilestoneAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectAssignmentAdmin.get_project_organization": {
            "name": "get_project_organization",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ProjectWeeklyEffortAdmin.get_project_name": {
            "name": "get_project_name",
            "location": 560,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "ProjectWeeklyEffortAdmin.get_user_display_name": {
            "name": "get_user_display_name",
            "location": 568,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "ProjectWeeklyEffortAdmin.download_csv": {
            "name": "download_csv",
            "location": 576,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": []
            }
        },
        "ProjectWeeklyEffortAdmin.get_form": {
            "name": "get_form",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "ProjectWeeklyEffortAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.get_project_name": {
            "name": "get_project_name",
            "location": 633,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.get_user_display_name": {
            "name": "get_user_display_name",
            "location": 641,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.get_project_targetdate": {
            "name": "get_project_targetdate",
            "location": 649,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.get_form": {
            "name": "get_form",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 675,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdminForm.clean": {
            "name": "clean",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_project_name": {
            "name": "get_project_name",
            "location": 710,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_user_display_name": {
            "name": "get_user_display_name",
            "location": 718,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_project_targetdate": {
            "name": "get_project_targetdate",
            "location": 726,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_entry_yearmonth": {
            "name": "get_entry_yearmonth",
            "location": 734,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_form": {
            "name": "get_form",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 759,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [
                    "None"
                ]
            }
        },
        "KippoProjectUserStatisfactionResultAdmin.get_form.get_project_display_name": {
            "name": "get_project_display_name",
            "location": 662,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "KippoProjectUserMonthlyStatisfactionResultAdmin.get_form.get_project_display_name": {
            "name": "get_project_display_name",
            "location": 748,
            "return": [],
            "arguments": {
                "project": []
            }
        }
    },
    "kippo-master/kippo/projects/apps.py": {},
    "kippo-master/kippo/projects/exceptions.py": {},
    "kippo-master/kippo/projects/functions.py": {
        "get_user_session_organization": {
            "name": "get_user_session_organization",
            "location": 24,
            "return": [
                "Tuple[Union[int,list[dict[str,Any]],str,list]]",
                "str",
                "zerver.models.Realm",
                "Union[str,int]"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "collect_existing_github_projects": {
            "name": "collect_existing_github_projects",
            "location": 46,
            "return": [
                "List[KippoProject]",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "organization": [
                    "bool",
                    "zerver.models.UserProfile",
                    "salon.models.Stylist",
                    "videoarchiver.tvasahi.models.Episode"
                ],
                "as_user": [
                    "Dict",
                    "bool",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "get_kippoproject_taskstatus_csv_rows": {
            "name": "get_kippoproject_taskstatus_csv_rows",
            "location": 83,
            "return": [
                "Generator",
                "Generator[tuple[Text]]"
            ],
            "arguments": {
                "kippo_project": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "with_headers": [
                    "bool",
                    "Optional[datetime.date]",
                    "str",
                    "List[str]"
                ],
                "status_effort_date": [
                    "bool",
                    "None",
                    "str",
                    "Optional[datetime.date]",
                    "List[str]"
                ]
            }
        },
        "previous_week_startdate": {
            "name": "previous_week_startdate",
            "location": 125,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "today": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "generate_projectweeklyeffort_csv": {
            "name": "generate_projectweeklyeffort_csv",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "None"
                ],
                "key": [
                    "str"
                ],
                "from_datetime_isoformat": [
                    "str",
                    "None",
                    "int",
                    "Optional[datetime.date]",
                    "datetime.tzinfo",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        },
        "generate_projectstatuscomments_csv": {
            "name": "generate_projectstatuscomments_csv",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "project_ids": [
                    "str",
                    "int"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "kippo-master/kippo/projects/models.py": {
        "get_target_date_default": {
            "name": "get_target_date_default",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "category_prefixes_default": {
            "name": "category_prefixes_default",
            "location": 41,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "estimate_prefixes_default": {
            "name": "estimate_prefixes_default",
            "location": 45,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "cleanup_github_milestones": {
            "name": "cleanup_github_milestones",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "ProjectColumnSet.get_column_names": {
            "name": "get_column_names",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectColumnSet.get_active_column_names": {
            "name": "get_active_column_names",
            "location": 86,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "with_priority": [
                    "bool"
                ]
            }
        },
        "ProjectColumnSet.get_done_column_names": {
            "name": "get_done_column_names",
            "location": 95,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectColumnSet.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectColumn.clean": {
            "name": "clean",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectColumn.save": {
            "name": "save",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectColumn.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_columnset_id_to_name_mapping": {
            "name": "get_columnset_id_to_name_mapping",
            "location": 205,
            "return": [
                "dict[int, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_columnname_from_id": {
            "name": "get_columnname_from_id",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "column_id": []
            }
        },
        "KippoProject.clean": {
            "name": "clean",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.developers": {
            "name": "developers",
            "location": 228,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.default_column_name": {
            "name": "default_column_name",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_admin_url": {
            "name": "get_admin_url",
            "location": 242,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 245,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_column_names": {
            "name": "get_column_names",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_active_column_names": {
            "name": "get_active_column_names",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_latest_kippoprojectstatus": {
            "name": "get_latest_kippoprojectstatus",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_active_taskstatus": {
            "name": "get_active_taskstatus",
            "location": 269,
            "return": [
                "tuple[typing.Union[list[],bool]]"
            ],
            "arguments": {
                "self": [],
                "max_effort_date": [
                    "None"
                ],
                "additional_filters": [
                    "None"
                ]
            }
        },
        "KippoProject.get_latest_taskstatuses": {
            "name": "get_latest_taskstatuses",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "current_date": [
                    "None"
                ],
                "active_only": [
                    "bool"
                ]
            }
        },
        "KippoProject.get_projectsurvey_url": {
            "name": "get_projectsurvey_url",
            "location": 314,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.active_milestones": {
            "name": "active_milestones",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.related_github_repositories": {
            "name": "related_github_repositories",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.get_total_effort": {
            "name": "get_total_effort",
            "location": 352,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.github_project_name": {
            "name": "github_project_name",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.github_project_description": {
            "name": "github_project_description",
            "location": 364,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.save": {
            "name": "save",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProject.__str__": {
            "name": "__str__",
            "location": 387,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveKippoProjectManager.get_queryset": {
            "name": "get_queryset",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectStatus.__str__": {
            "name": "__str__",
            "location": 411,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.github_state": {
            "name": "github_state",
            "location": 440,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.clean": {
            "name": "clean",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 458,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.get_url": {
            "name": "get_url",
            "location": 461,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.is_delayed": {
            "name": "is_delayed",
            "location": 466,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.estimated_completion_date": {
            "name": "estimated_completion_date",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.get_assignee_workdays": {
            "name": "get_assignee_workdays",
            "location": 505,
            "return": [
                "Counter"
            ],
            "arguments": {
                "self": [],
                "start_date": []
            }
        },
        "KippoMilestone.assignee_available_workdays": {
            "name": "assignee_available_workdays",
            "location": 539,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.available_work_days": {
            "name": "available_work_days",
            "location": 543,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "None"
                ]
            }
        },
        "KippoMilestone.estimated_work_days": {
            "name": "estimated_work_days",
            "location": 550,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.get_assignee_task_counts": {
            "name": "get_assignee_task_counts",
            "location": 557,
            "return": [
                "Counter"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.get_assignee_estimated_workdays": {
            "name": "get_assignee_estimated_workdays",
            "location": 566,
            "return": [
                "Counter"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.tasks": {
            "name": "tasks",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.active_tasks": {
            "name": "active_tasks",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.update_github_milestones": {
            "name": "update_github_milestones",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "None"
                ],
                "close": [
                    "bool"
                ]
            }
        },
        "KippoMilestone.save": {
            "name": "save",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestone.__str__": {
            "name": "__str__",
            "location": 714,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectIssuesAction.status": {
            "name": "status",
            "location": 757,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectIssuesAction.new_task_count": {
            "name": "new_task_count",
            "location": 768,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectIssuesAction.new_taskstatus_count": {
            "name": "new_taskstatus_count",
            "location": 776,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectIssuesAction.updated_taskstatus_count": {
            "name": "updated_taskstatus_count",
            "location": 784,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectIssuesAction.save": {
            "name": "save",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectUserStatisfactionResult.__str__": {
            "name": "__str__",
            "location": 818,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectUserMonthlyStatisfactionResult.__str__": {
            "name": "__str__",
            "location": 833,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/urls.py": {},
    "kippo-master/kippo/projects/views.py": {
        "project_assignee_keyfunc": {
            "name": "project_assignee_keyfunc",
            "location": 28,
            "return": [
                "Tuple[Union[Text,dict[Any,str]]]",
                "bool",
                "int"
            ],
            "arguments": {
                "task": [
                    "Dict[str,Any]"
                ]
            }
        },
        "_get_task_details": {
            "name": "_get_task_details",
            "location": 47,
            "return": [
                "Tuple[list]",
                "Optional[str]",
                "Dict[str,Any]",
                "List[Dict[str,Any]]",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "active_taskstatus": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "bytes",
                    "List[int]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "view_inprogress_projects_status": {
            "name": "view_inprogress_projects_status",
            "location": 58,
            "return": [
                "HttpResponseBadRequest",
                "str",
                "Dict[str,str]",
                "Dict",
                "botocore.exceptions.ClientError",
                "bool",
                "zerver.models.Subscription",
                "Dict[str,Any]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "set_user_session_organization": {
            "name": "set_user_session_organization",
            "location": 162,
            "return": [
                "HttpResponseBadRequest",
                "Dict[str,Any]",
                "HttpResponseRedirect",
                "Tuple[int,str]",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "django.http.HttpRequest"
                ],
                "organization_id": [
                    "django.http.HttpRequest",
                    "str",
                    "None",
                    "int",
                    "FrozenSet[bytes]",
                    "frozenset"
                ]
            }
        },
        "_get_milestone_assignee_status": {
            "name": "_get_milestone_assignee_status",
            "location": 179,
            "return": [
                "List[AssigneeStatus]",
                "bool",
                "List[Dict[str,Any]]",
                "apistar.http.QueryParam"
            ],
            "arguments": {
                "milestone": [
                    "Dict[str, Any]",
                    "Optional[Iterable[T]]",
                    "bool",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "view_milestone_status": {
            "name": "view_milestone_status",
            "location": 216,
            "return": [
                "str",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "django.http.requesHttpRequest",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "django.http.HttpRequest"
                ],
                "milestone_id": [
                    "int",
                    "None",
                    "str",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "data_download_waiter": {
            "name": "data_download_waiter",
            "location": 255,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Union[Dict, str, int, bytes]]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "scrapy.http.Request",
                    "django.http.HttpRequest",
                    "models.Workspace"
                ]
            }
        },
        "data_download_done": {
            "name": "data_download_done",
            "location": 277,
            "return": [
                "HttpResponseRedirect",
                "Dict[str,Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "kippo-master/kippo/projects/__init__.py": {},
    "kippo-master/kippo/projects/charts/functions.py": {
        "_get_target_search_dates": {
            "name": "_get_target_search_dates",
            "location": 28,
            "return": [
                "List[Union[None,str,dict[datetime.date,dict[str,Any]]]]",
                "str",
                "int",
                "datetime.datetime",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "project": [
                    "str",
                    "datetime.date",
                    "models.KippoProject"
                ],
                "current_date": [
                    "None",
                    "datetime.date",
                    "str",
                    "Optional[str]",
                    "Dict[datetime.date,dict[str,Any]]",
                    "Dict[datetime.date,Dict[str,Any]]"
                ],
                "representative_day": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]",
                    "datetime.date"
                ]
            }
        },
        "get_project_weekly_effort": {
            "name": "get_project_weekly_effort",
            "location": 56,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "project": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "None",
                    "models.KippoProject",
                    "Dict[datetime.date,dict[str,Any]]",
                    "excars.models.user.User",
                    "Callable",
                    "Optional[str]",
                    "Dict[datetime.date,Dict[str,Any]]",
                    "Optional[Callable]",
                    "datetime.datetime"
                ],
                "current_date": [
                    "int",
                    "None",
                    "str",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "representative_day": [
                    "int",
                    "str",
                    "Optional[str]",
                    "datetime.datetime",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "prepare_project_plot_data": {
            "name": "prepare_project_plot_data",
            "location": 116,
            "return": [
                "List[T]",
                "Dict[str, List[Any]]",
                "TextIO",
                "bytes",
                "int"
            ],
            "arguments": {
                "project": [
                    "str",
                    "int",
                    "models.KippoProject",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "current_date": [
                    "str",
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "prepare_burndown_chart_components": {
            "name": "prepare_burndown_chart_components",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "project": [
                    "str",
                    "models.KippoProject",
                    "datetime.date"
                ],
                "current_date": [
                    "None",
                    "str",
                    "datetime.date",
                    "IO",
                    "Dict[str,Any]",
                    "models.KippoProject"
                ]
            }
        }
    },
    "kippo-master/kippo/projects/charts/__init__.py": {},
    "kippo-master/kippo/projects/handlers/functions.py": {
        "_get_projectid_mapping_ignore_date": {
            "name": "_get_projectid_mapping_ignore_date",
            "location": 15,
            "return": [
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {}
        },
        "_prepare_mapping": {
            "name": "_prepare_mapping",
            "location": 20,
            "return": [
                "Dict[Text,]",
                "str",
                "OrderedDict",
                "bytes",
                "Dict[str,Any]",
                "Dict",
                "Mapping[str,Any]"
            ],
            "arguments": {}
        },
        "write_projectid_json": {
            "name": "write_projectid_json",
            "location": 29,
            "return": [
                "bool",
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "projectid_mapping_json_s3uri": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "None",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "handle_projectid_mapping": {
            "name": "handle_projectid_mapping",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "None"
                ],
                "context": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "kippo-master/kippo/projects/handlers/__init__.py": {},
    "kippo-master/kippo/projects/management/__init__.py": {},
    "kippo-master/kippo/projects/management/commands/collect_github_organizational_projects.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/management/commands/dumpdata_to_s3.py": {
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/management/commands/load_from_db.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/management/commands/load_from_json.py": {
        "DjangoJsonParser.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsondump_filepath": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DjangoJsonParser.load": {
            "name": "load",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoJsonParser._reformat_record": {
            "name": "_reformat_record",
            "location": 43,
            "return": [
                "Iterable[str]",
                "shapely.geometry.base.BaseGeometry",
                "int",
                "Callable",
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float"
                ]
            }
        },
        "DjangoJsonParser.get_modelrecords": {
            "name": "get_modelrecords",
            "location": 48,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "modelname": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/management/commands/__init__.py": {},
    "kippo-master/kippo/projects/migrations/0001_initial.py": {},
    "kippo-master/kippo/projects/migrations/0002_collectissuesaction_collectissuesprojectresult.py": {},
    "kippo-master/kippo/projects/migrations/0003_auto_20190731_1802.py": {},
    "kippo-master/kippo/projects/migrations/0004_auto_20190803_0121.py": {},
    "kippo-master/kippo/projects/migrations/0005_kippoproject_github_project_api_url.py": {},
    "kippo-master/kippo/projects/migrations/0006_kippoproject_column_info.py": {},
    "kippo-master/kippo/projects/migrations/0007_projectcolumnset_default_column_name.py": {},
    "kippo-master/kippo/projects/migrations/0008_projectcolumn_github_id.py": {},
    "kippo-master/kippo/projects/migrations/0009_kippoproject_slack_channel_name.py": {},
    "kippo-master/kippo/projects/migrations/0010_auto_20200330_1202.py": {},
    "kippo-master/kippo/projects/migrations/0011_projectweeklyeffort.py": {},
    "kippo-master/kippo/projects/migrations/0012_auto_20210510_0950.py": {},
    "kippo-master/kippo/projects/migrations/0013_auto_20210510_1346.py": {},
    "kippo-master/kippo/projects/migrations/0014_auto_20220610_1022.py": {},
    "kippo-master/kippo/projects/migrations/0015_auto_20220610_1105.py": {},
    "kippo-master/kippo/projects/migrations/0016_auto_20220610_1118.py": {},
    "kippo-master/kippo/projects/migrations/0017_auto_20220610_1209.py": {},
    "kippo-master/kippo/projects/migrations/__init__.py": {},
    "kippo-master/kippo/projects/tests/test_admin.py": {
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_full_path": {
            "name": "get_full_path",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoProjectAdminTestCase.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoProjectAdminTestCase.test_list_objects": {
            "name": "test_list_objects",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoProjectAdminTestCase.test_projectweeklyeffort_inlineadmin": {
            "name": "test_projectweeklyeffort_inlineadmin",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoMilestoneAdminTestCase.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoMilestoneAdminTestCase.test_list_objects": {
            "name": "test_list_objects",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAdminViewTestCase.setUp": {
            "name": "setUp",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAdminViewTestCase.test_kippomilestone_view": {
            "name": "test_kippomilestone_view",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_admin_projectweeklyeffortadmin.py": {
        "ProjectWeeklyEffortAdminTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectWeeklyEffortAdminTestCase.test_download_action": {
            "name": "test_download_action",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_chart_functions.py": {
        "ProjectsChartFunctionsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsChartFunctionsTestCase.test_get_project_weekly_effort": {
            "name": "test_get_project_weekly_effort",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsChartFunctionsTestCase.test_prepare_project_plot_data": {
            "name": "test_prepare_project_plot_data",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsChartFunctionsTestCase.test_get_project_weekly_effort__with_kippomilestone": {
            "name": "test_get_project_weekly_effort__with_kippomilestone",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_functions.py": {
        "ProjectsFunctionsTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFunctionsTestCase.test_get_kippoproject_taskstatus_csv": {
            "name": "test_get_kippoproject_taskstatus_csv",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFunctionsTestCase.test_previous_week_startdate__monday": {
            "name": "test_previous_week_startdate__monday",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFunctionsTestCase.test_previous_week_startdate__tuesday": {
            "name": "test_previous_week_startdate__tuesday",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFunctionsTestCase.test_previous_week_startdate__sunday": {
            "name": "test_previous_week_startdate__sunday",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_functions_generate_projectweeklyeffort_csv.py": {
        "GenerateProjectWeeklyEffortCsvTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateProjectWeeklyEffortCsvTestCase.test_generate_projectweeklyeffort_csv": {
            "name": "test_generate_projectweeklyeffort_csv",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_handlers_functions.py": {
        "ProjectsHandlersFunctionsTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsHandlersFunctionsTestCase.test__prepare_mapping": {
            "name": "test__prepare_mapping",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsHandlersFunctionsTestCase.test_write_projectid_json": {
            "name": "test_write_projectid_json",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_models.py": {
        "KippoProjectMethodsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectMethodsTestCase.test_get_active_taskstatus__no_max_date": {
            "name": "test_get_active_taskstatus__no_max_date",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectMethodsTestCase.test__get_active_taskstatus_from_projects__with_max_effort_date": {
            "name": "test__get_active_taskstatus_from_projects__with_max_effort_date",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectMethodsTestCase.test__get_active_taskstatus__done__latest_taskstatus": {
            "name": "test__get_active_taskstatus__done__latest_taskstatus",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoProjectMethodsTestCase.test_related_github_repositories": {
            "name": "test_related_github_repositories",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.setUp": {
            "name": "setUp",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_estimated_completion_date": {
            "name": "test_estimated_completion_date",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_available_work_days": {
            "name": "test_available_work_days",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_estimated_work_days": {
            "name": "test_estimated_work_days",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_tasks": {
            "name": "test_tasks",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_active_tasks": {
            "name": "test_active_tasks",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_delete_milestone": {
            "name": "test_delete_milestone",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_get_assignee_task_counts": {
            "name": "test_get_assignee_task_counts",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoMilestoneMethodsTestCase.test_get_assignee_estimated_workdays": {
            "name": "test_get_assignee_estimated_workdays",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_views.py": {
        "SetOrganizationTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOrganizationTestCase.test_set_organization__valid_user": {
            "name": "test_set_organization__valid_user",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOrganizationTestCase.test_set_organization__valid_user_nonmember_org": {
            "name": "test_set_organization__valid_user_nonmember_org",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOrganizationTestCase.test_set_organization__user_no_org": {
            "name": "test_set_organization__user_no_org",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMilestonesTestCase.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMilestonesTestCase.test_view_milestone_status__no_kippotaskstatus": {
            "name": "test_view_milestone_status__no_kippotaskstatus",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMilestonesTestCase.test_view_milestone_status__with_kippotaskstatus": {
            "name": "test_view_milestone_status__with_kippotaskstatus",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectMilestonesTestCase.test_view_milestone_status__with_milestone_id": {
            "name": "test_view_milestone_status__with_milestone_id",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/test_views_download.py": {
        "DownloadViewTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadViewTestCase.test_data_download_waiter__generate_projectweeklyeffort_csv": {
            "name": "test_data_download_waiter__generate_projectweeklyeffort_csv",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadViewTestCase.test_data_download_waiter__generate_projectstatuscomments_csv": {
            "name": "test_data_download_waiter__generate_projectstatuscomments_csv",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/utils.py": {
        "reset_buckets": {
            "name": "reset_buckets",
            "location": 24,
            "return": [
                "List",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_full_path": {
            "name": "get_full_path",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/projects/tests/__init__.py": {},
    "kippo-master/kippo/tasks/admin.py": {
        "KippoTaskAdmin.get_kippoproject_name": {
            "name": "get_kippoproject_name",
            "location": 23,
            "return": [
                "Text",
                "str",
                "Mapping[str,Any]",
                "Dict[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "KippoTaskAdmin.get_kippomilestone_title": {
            "name": "get_kippomilestone_title",
            "location": 31,
            "return": [
                "Text",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "KippoTaskAdmin.get_assignee_display_name": {
            "name": "get_assignee_display_name",
            "location": 39,
            "return": [
                "Text",
                "Dict",
                "bool",
                "Tuple[int,Dict[str,Any]]",
                "List[object]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str,float]",
                    "bytes",
                    "Dict",
                    "str",
                    "salon.models.Stylist",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "KippoTaskAdmin.get_github_issue_html_url": {
            "name": "get_github_issue_html_url",
            "location": 47,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "KippoTaskStatusAdmin.get_assignee": {
            "name": "get_assignee",
            "location": 61,
            "return": [
                "Text",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "bool",
                    "models.Name",
                    "zerver.models.Realm"
                ]
            }
        },
        "KippoTaskStatusAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 69,
            "return": [
                "int",
                "List[str]",
                "float",
                "str",
                "Optional[bool]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "kippo-master/kippo/tasks/apps.py": {},
    "kippo-master/kippo/tasks/exceptions.py": {},
    "kippo-master/kippo/tasks/functions.py": {
        "get_github_issue_prefixed_labels": {
            "name": "get_github_issue_prefixed_labels",
            "location": 48,
            "return": [
                "List[GithubIssuePrefixedLabel]"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "ghorgs.wrappers.GithubIssue",
                    "str",
                    "Tuple"
                ],
                "prefix_delim": [
                    "Text",
                    "str",
                    "bytes",
                    "Callable[[bytes],bytes]",
                    "List",
                    "int"
                ]
            }
        },
        "build_latest_comment": {
            "name": "build_latest_comment",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "issue": [
                    "bytes",
                    "annofabapi.models.Inspection",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "get_tags_from_prefixedlabels": {
            "name": "get_tags_from_prefixedlabels",
            "location": 64,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "prefixed_labels": [
                    "str",
                    "List[dict[str,str]]",
                    "bool",
                    "List[Dict[str,str]]",
                    "Iterable[str]"
                ]
            }
        },
        "get_github_issue_estimate_label": {
            "name": "get_github_issue_estimate_label",
            "location": 72,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "ghorgs.wrappers.GithubIssue",
                    "bool",
                    "Dict",
                    "Mapping"
                ],
                "prefix": [
                    "str"
                ],
                "day_workhours": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "get_github_issue_category_label": {
            "name": "get_github_issue_category_label",
            "location": 128,
            "return": [
                "ghorgs.wrappers.GithubIssue",
                "None",
                "int",
                "str",
                "Type",
                "Tuple"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "ghorgs.wrappers.GithubIssue"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "window": {
            "name": "window",
            "location": 156,
            "return": [
                "Generator",
                "Generator[Union[tuple[Union[Any,Any,Any,Any,Any,Any]],Iterator,list[int],list[tuple],dict,tuple[tuple]]]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "float",
                    "bool"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "update_kippotaskstatus_hours_worked": {
            "name": "update_kippotaskstatus_hours_worked",
            "location": 170,
            "return": [
                "List",
                "str",
                "int",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "projects": [
                    "str",
                    "List",
                    "datetime.datetime",
                    "Union[datetime.datetime,str]",
                    "bool",
                    "Type[analytics.models.BaseCount]"
                ],
                "start_date": [
                    "str",
                    "None",
                    "int",
                    "datetime.date"
                ],
                "date_delta": [
                    "str",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "_get_latest_kippotaskstatus_effortdate": {
            "name": "_get_latest_kippotaskstatus_effortdate",
            "location": 219,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "List[datetime.date]"
            ],
            "arguments": {
                "organization": [
                    "str",
                    "tildes.models.user.User",
                    "purplship.core.utils.Element",
                    "purplship.core.utils.xml.Element",
                    "zerver.models.Realm",
                    "server.models.User",
                    "zerver.models.UserProfile",
                    "accounts.models.KippoOrganization"
                ]
            }
        },
        "get_ttlhash": {
            "name": "get_ttlhash",
            "location": 232,
            "return": [
                "int",
                "contests.models.User",
                "Dict[int,datetime.datetime]",
                "str",
                "bool"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "Optional[Period]",
                    "Union[str,type]"
                ]
            }
        },
        "get_projects_load": {
            "name": "get_projects_load",
            "location": 237,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "organization": [
                    "int",
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "bool"
                ],
                "schedule_start_date": [
                    "bytes",
                    "None",
                    "int",
                    "Mapping[str,Any]",
                    "Sequence[str]",
                    "Mapping",
                    "zerver.models.UserProfile"
                ],
                "ttl_hash": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "datetime.datetime"
                ]
            }
        },
        "_add_assignee_project_data": {
            "name": "_add_assignee_project_data",
            "location": 431,
            "return": [
                "str",
                "videoarchiver.tvasahi.models.Episode",
                "tracim.models.data.Content",
                "list",
                "purplship.core.utils.xml.Element"
            ],
            "arguments": {
                "organization": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "schedule_start_date": [
                    "List[int]",
                    "int",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "assignee_github_login": [
                    "float",
                    "str",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "assignee_tasks": [
                    "List",
                    "List[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]"
                ],
                "country_holidays": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "assignee_date_keyed_scheduled_projects_ids": [
                    "int",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ],
                "max_days": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple"
                ]
            }
        },
        "prepare_project_engineering_load_plot_data": {
            "name": "prepare_project_engineering_load_plot_data",
            "location": 680,
            "return": [
                "str",
                "int",
                "models.User",
                "bool"
            ],
            "arguments": {
                "organization": [
                    "str",
                    "accounts.models.KippoOrganization",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "datetime.datetime",
                    "List[str]",
                    "Optional[str]",
                    "Union[int,str]",
                    "Optional[List[str]]"
                ],
                "assignee_filter": [
                    "str",
                    "None",
                    "float",
                    "Exception",
                    "int"
                ],
                "schedule_start_date": [
                    "int",
                    "None",
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GithubIssuePrefixedLabel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "prefix_delim": [
                    "Text",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "GithubIssuePrefixedLabel.prefix": {
            "name": "prefix",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssuePrefixedLabel.value": {
            "name": "value",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_projects_load.nesteddictlist": {
            "name": "nesteddictlist",
            "location": 381,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {}
        }
    },
    "kippo-master/kippo/tasks/models.py": {
        "KippoTask.github_repository_html_url": {
            "name": "github_repository_html_url",
            "location": 30,
            "return": [
                "str",
                "Dict[str,Union[str,None]]",
                "int",
                "Dict[Any,str]",
                "Optional[str]",
                "Dict[str,Pattern]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTask.latest_kippotaskstatus": {
            "name": "latest_kippotaskstatus",
            "location": 39,
            "return": [
                "int",
                "str",
                "None",
                "Generator[Union[Any,None,None]]",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet",
                "Dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTask.effort_days_remaining": {
            "name": "effort_days_remaining",
            "location": 47,
            "return": [
                "bool",
                "str",
                "app.models.Tweet",
                "app.models.Position",
                "Optional[int]",
                "List['Product']"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTask.save": {
            "name": "save",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTask.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTaskStatus.display_name": {
            "name": "display_name",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KippoTaskStatus.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/urls.py": {},
    "kippo-master/kippo/tasks/views.py": {
        "assignee_project_keyfunc": {
            "name": "assignee_project_keyfunc",
            "location": 27,
            "return": [
                "Tuple[Text]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "task_object": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "view_inprogress_task_status": {
            "name": "view_inprogress_task_status",
            "location": 45,
            "return": [
                "HttpResponseBadRequest",
                "str",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "metaswitch_tinder.database.models.Request",
                    "http.MITMRequest",
                    "dict"
                ]
            }
        }
    },
    "kippo-master/kippo/tasks/__init__.py": {},
    "kippo-master/kippo/tasks/charts/functions.py": {
        "prepare_project_schedule_chart_components": {
            "name": "prepare_project_schedule_chart_components",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "project_data": [
                    "Dict[str,Any]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "start_date": [
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "datetime.date",
                    "pandas.Timestamp",
                    "datetime.timedelta"
                ],
                "project_milestones": [
                    "str",
                    "None",
                    "List[str]",
                    "IO",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,tuple]",
                    "Dict[str,Any]",
                    "Union[str,List[str],Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ],
                "display_days": [
                    "int",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "kippo-master/kippo/tasks/charts/__init__.py": {},
    "kippo-master/kippo/tasks/management/__init__.py": {},
    "kippo-master/kippo/tasks/management/commands/get_kippotaskstatus_tag_states.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/management/commands/update_github_project_tasks.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/management/commands/__init__.py": {},
    "kippo-master/kippo/tasks/migrations/0001_initial.py": {},
    "kippo-master/kippo/tasks/migrations/0002_auto_20190805_0944.py": {},
    "kippo-master/kippo/tasks/migrations/0003_kippotask_project_card_id.py": {},
    "kippo-master/kippo/tasks/migrations/0004_auto_20200302_1522.py": {},
    "kippo-master/kippo/tasks/migrations/0005_auto_20200330_1202.py": {},
    "kippo-master/kippo/tasks/migrations/0006_auto_20200924_1431.py": {},
    "kippo-master/kippo/tasks/migrations/__init__.py": {},
    "kippo-master/kippo/tasks/periodic/tasks.py": {
        "get_existing_kippo_project": {
            "name": "get_existing_kippo_project",
            "location": 322,
            "return": [
                "None",
                "Text",
                "str",
                "List[str]",
                "bool",
                "int",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "github_project": [
                    "Callable",
                    "Dict[str,Any]",
                    "bool",
                    "piccolo.conf.apps.AppConfig"
                ],
                "existing_open_projects": [
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "IO",
                    "int",
                    "bool"
                ]
            }
        },
        "collect_github_project_issues": {
            "name": "collect_github_project_issues",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "action_tracker_id": [
                    "int",
                    "str",
                    "Set[int]",
                    "Mapping",
                    "Mapping[str,Any]",
                    "bool",
                    "zerver.models.Realm"
                ],
                "kippo_organization_id": [
                    "int",
                    "str",
                    "stiff.models.Tagging"
                ],
                "status_effort_date_iso8601": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[float]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "github_project_html_urls": [
                    "None",
                    "tartare.core.models.ValidityPeriod",
                    "models.memberships.Memberships",
                    "salon.models.Stylist",
                    "legistar.models.CodeSection",
                    "multinedb.models.workspace.WorkspacePermissions",
                    "chalice.deploy.models.SNSLambdaSubscription"
                ]
            }
        },
        "run_collect_github_project_issues": {
            "name": "run_collect_github_project_issues",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "OrganizationIssueProcessor.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "bytes",
                    "raiden.utils.BlockIdentifier",
                    "zerver.models.UserProfile"
                ],
                "status_effort_date": [
                    "None",
                    "str",
                    "datetime.datetime",
                    "bool",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ],
                "github_project_html_urls": [
                    "List[str]",
                    "None",
                    "str",
                    "bool",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "OrganizationIssueProcessor.github_projects": {
            "name": "github_projects",
            "location": 76,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationIssueProcessor.get_existing_task_by_html_url": {
            "name": "get_existing_task_by_html_url",
            "location": 79,
            "return": [
                "Dict[str,Any]",
                "str",
                "bytes",
                "Dict",
                "List[str]",
                "Dict[str,str]",
                "excars.models.profiles.Profile",
                "List[bool]",
                "Tuple",
                "Dict[int,Any]"
            ],
            "arguments": {
                "self": [],
                "html_url": [
                    "str",
                    "Dict",
                    "zerver.models.UserProfile",
                    "datetime.datetime"
                ]
            }
        },
        "OrganizationIssueProcessor.get_kippo_milestone_by_html_url": {
            "name": "get_kippo_milestone_by_html_url",
            "location": 83,
            "return": [
                "salon.models.Stylist",
                "List[str]",
                "Dict[str,datetime.datetime]",
                "str",
                "int",
                "Callable",
                "Dict[datetime.date,dict[str,Any]]",
                "Dict[datetime.date,dict[str,float]]",
                "Tuple[Union[tuple[Union[str,str]],tuple[Union[str,str]],tuple[Union[str,str]]]]",
                "Dict[str,float]",
                "Dict[datetime.date,float]",
                "OrderedDict",
                "KippoMilestone"
            ],
            "arguments": {
                "self": [],
                "kippo_project": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "issue": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict",
                    "Dict[str,str]",
                    "List[Tuple[str,...]]",
                    "List[tuple[Union[str,...]]]"
                ],
                "html_url": [
                    "str",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "OrganizationIssueProcessor.get_githubrepository": {
            "name": "get_githubrepository",
            "location": 134,
            "return": [
                "str",
                "bool",
                "Dict[str,Union[float,str]]",
                "List",
                "Dict[str,list[str]]",
                "GithubRepository"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "bool"
                ],
                "api_url": [
                    "str",
                    "List[str]"
                ],
                "html_url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "OrganizationIssueProcessor.process": {
            "name": "process",
            "location": 172,
            "return": [
                "Tuple[(bool, list, list)]"
            ],
            "arguments": {
                "self": [],
                "kippo_project": [
                    "str",
                    "Dict[str,Any]"
                ],
                "issue": [
                    "Dict",
                    "ghorgs.wrappers.GithubIssue",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        }
    },
    "kippo-master/kippo/tasks/periodic/__init__.py": {},
    "kippo-master/kippo/tasks/tests/test_admin.py": {
        "IsStaffOrganizationKippoTaskAdminTestCase.test_list_objects": {
            "name": "test_list_objects",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsStaffOrganizationKippoTaskStatusAdminTestCase.test_list_objects": {
            "name": "test_list_objects",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/tests/test_periodic_tasks.py": {
        "load_json_to_githubissue": {
            "name": "load_json_to_githubissue",
            "location": 27,
            "return": [
                "str",
                "list",
                "Tuple[int, int]"
            ],
            "arguments": {
                "json_filepath": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "GithubOrganizationProjectMock.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html_url": [
                    "str"
                ]
            }
        },
        "PeriodicTaskFunctionsTestCase.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTaskFunctionsTestCase.test_get_existing_kippo_project": {
            "name": "test_get_existing_kippo_project",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationIssueProcessorTestCase.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationIssueProcessorTestCase.test_organizationissueprocessor___init__": {
            "name": "test_organizationissueprocessor___init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationIssueProcessorTestCase.test_process_new_task": {
            "name": "test_process_new_task",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationIssueProcessorTestCase.test_process_existing_task": {
            "name": "test_process_existing_task",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/tests/test_taskstatus_hoursworked_calculation.py": {
        "CalculateKippoTaskStatusHoursWorkedTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateKippoTaskStatusHoursWorkedTestCase.test_estimate_decrease": {
            "name": "test_estimate_decrease",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateKippoTaskStatusHoursWorkedTestCase.test_estimate_increase": {
            "name": "test_estimate_increase",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/tests/test_task_functions.py": {
        "LabelMock.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "IssueMock.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_names": [
                    "List",
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_prefixed_labels": {
            "name": "test_get_github_issue_prefixed_labels",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_estimate_label_hours": {
            "name": "test_get_github_issue_estimate_label_hours",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_estimate_label_days": {
            "name": "test_get_github_issue_estimate_label_days",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_estimate_label_nosuffix": {
            "name": "test_get_github_issue_estimate_label_nosuffix",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_estimate_label_multiestimatelabels": {
            "name": "test_get_github_issue_estimate_label_multiestimatelabels",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_category_label_singlelabel": {
            "name": "test_get_github_issue_category_label_singlelabel",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGithubLabelFunctionsTestCase.test_get_github_issue_category_label_multiplelabels": {
            "name": "test_get_github_issue_category_label_multiplelabels",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKippoProjectLoadTestCase.setUp": {
            "name": "setUp",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKippoProjectLoadTestCase.test_get_projects_load": {
            "name": "test_get_projects_load",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKippoProjectLoadTestCase.test_prepare_project_engineering_load_plot_data": {
            "name": "test_prepare_project_engineering_load_plot_data",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kippo-master/kippo/tasks/tests/__init__.py": {}
}
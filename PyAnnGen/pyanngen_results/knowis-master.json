{
    "knowis-master/manage.py": {},
    "knowis-master/config/urls.py": {},
    "knowis-master/config/wsgi.py": {},
    "knowis-master/config/__init__.py": {},
    "knowis-master/config/settings/base.py": {},
    "knowis-master/config/settings/local.py": {},
    "knowis-master/config/settings/production.py": {},
    "knowis-master/config/settings/test.py": {},
    "knowis-master/config/settings/__init__.py": {},
    "knowis-master/docs/conf.py": {},
    "knowis-master/docs/__init__.py": {},
    "knowis-master/knowis/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "knowis-master/knowis/__init__.py": {},
    "knowis-master/knowis/contrib/__init__.py": {},
    "knowis-master/knowis/contrib/sites/__init__.py": {},
    "knowis-master/knowis/contrib/sites/migrations/__init__.py": {},
    "knowis-master/knowis/core/api_urls.py": {},
    "knowis-master/knowis/core/permissions.py": {
        "IsOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "Dict"
                ],
                "obj": [
                    "rest_framework.requesRequest"
                ]
            }
        },
        "IsUserOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Callable[...,Coroutine]",
                    "Callable[...,collections.abc.Coroutine]"
                ],
                "view": [
                    "Dict"
                ],
                "obj": [
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "IsUser.has_object_permission": {
            "name": "has_object_permission",
            "location": 25,
            "return": [
                "bool",
                "Dict[str,Tuple[Any,Any]]",
                "Optional[Set[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "Dict"
                ],
                "obj": [
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "knowis-master/knowis/core/utils.py": {
        "RemovedIdSerializer.get_fields": {
            "name": "get_fields",
            "location": 8,
            "return": [
                "List[str]",
                "Dict[str,str]",
                "bool",
                "MutableMapping[str,int]",
                "Set[str]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/core/__init__.py": {},
    "knowis-master/knowis/question/admin.py": {},
    "knowis-master/knowis/question/apps.py": {},
    "knowis-master/knowis/question/forms.py": {},
    "knowis-master/knowis/question/models.py": {
        "validate_draftjs_not_blank": {
            "name": "validate_draftjs_not_blank",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "field": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.username": {
            "name": "username",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.save": {
            "name": "save",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_tags": {
            "name": "get_tags",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_num_answers": {
            "name": "get_num_answers",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.create_tags": {
            "name": "create_tags",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_list": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_popular_tags": {
            "name": "get_popular_tags",
            "location": 105,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {}
        },
        "QuestionAnswer.question_title": {
            "name": "question_title",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuestionAnswer.question_uuid": {
            "name": "question_uuid",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuestionAnswer.username": {
            "name": "username",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuestionAnswer.get_upvoters": {
            "name": "get_upvoters",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/question/urls.py": {},
    "knowis-master/knowis/question/views.py": {},
    "knowis-master/knowis/question/__init__.py": {},
    "knowis-master/knowis/question/api/serializers.py": {},
    "knowis-master/knowis/question/api/views.py": {
        "QuestionListAPIViewByUser.get_queryset": {
            "name": "get_queryset",
            "location": 35,
            "return": [
                "str",
                "None",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionListAPIViewBySlug.get_queryset": {
            "name": "get_queryset",
            "location": 58,
            "return": [
                "Dict[str,dict]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionPostAPIView.post": {
            "name": "post",
            "location": 111,
            "return": [
                "Response",
                "List[Dict[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "AnswerCreateAPIViewByQuestionUUID.get_object": {
            "name": "get_object",
            "location": 128,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "AnswerCreateAPIViewByQuestionUUID.post": {
            "name": "post",
            "location": 134,
            "return": [
                "Response",
                "List[Dict[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "django.http.HttpRequest",
                    "int",
                    "zerver.models.UserProfile",
                    "rest_framework.requesRequest"
                ],
                "uuid": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ],
                "format": [
                    "django.http.HttpRequest",
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "AnswersListApiViewByQuestionUUID.get_queryset": {
            "name": "get_queryset",
            "location": 174,
            "return": [
                "str",
                "Dict[str,dict[str,Any]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagQuestionListByTagListApiView.get_queryset": {
            "name": "get_queryset",
            "location": 198,
            "return": [
                "str",
                "List[str]",
                "Dict[str,str]",
                "bool",
                "Dict",
                "Dict[Any,dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/question/api/__init__.py": {},
    "knowis-master/knowis/question/migrations/0001_initial.py": {},
    "knowis-master/knowis/question/migrations/__init__.py": {},
    "knowis-master/knowis/question/tests/__init__.py": {},
    "knowis-master/knowis/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CeleryAppConfig.ready": {
            "name": "ready",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/taskapp/__init__.py": {},
    "knowis-master/knowis/useraccount/admin.py": {},
    "knowis-master/knowis/useraccount/apps.py": {
        "UseraccountConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/useraccount/models.py": {
        "Useraccount.username": {
            "name": "username",
            "location": 32,
            "return": [
                "bool",
                "set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Useraccount.first_name": {
            "name": "first_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Useraccount.last_name": {
            "name": "last_name",
            "location": 40,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Useraccount.save": {
            "name": "save",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/useraccount/tests.py": {},
    "knowis-master/knowis/useraccount/views.py": {},
    "knowis-master/knowis/useraccount/__init__.py": {},
    "knowis-master/knowis/useraccount/api/serializers.py": {
        "UseraccountSerializer.get_fields": {
            "name": "get_fields",
            "location": 20,
            "return": [
                "List[str]",
                "Dict[str,str]",
                "bool",
                "Set[str]",
                "MutableMapping[str,int]",
                "Dict",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileRegisterSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "knowis-master/knowis/useraccount/api/views.py": {
        "UseraccountListAPIView.get_object": {
            "name": "get_object",
            "location": 23,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "boucanpy.core.http_server.HttpServerRepo",
                "boucanpy.core.dns_server.DnsServerRepo",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str,str]",
                    "zerver.models.UserProfile",
                    "str",
                    "int",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "UseraccountListAPIView.get": {
            "name": "get",
            "location": 29,
            "return": [
                "Response",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bytes",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        }
    },
    "knowis-master/knowis/useraccount/api/__init__.py": {},
    "knowis-master/knowis/useraccount/migrations/0001_initial.py": {},
    "knowis-master/knowis/useraccount/migrations/__init__.py": {},
    "knowis-master/knowis/useraccount/signals/handlers.py": {
        "create_useraccount": {
            "name": "create_useraccount",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int",
                    "bool"
                ],
                "instance": [
                    "bool",
                    "List[str]",
                    "List[cirq.Circuit]",
                    "Dict[str,tuple[Union[str,str]]]",
                    "int",
                    "Dict[str,Tuple[str,str]]"
                ],
                "created": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "knowis-master/knowis/useraccount/signals/__init__.py": {},
    "knowis-master/utility/fill_db.py": {}
}
{
    "kobin-master/setup.py": {
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.finalize_options": {
            "name": "finalize_options",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kobin-master/docs/source/conf.py": {},
    "kobin-master/example/helloworld/hello.py": {
        "hello": {
            "name": "hello",
            "location": 13,
            "return": [
                "Response",
                "str",
                "Optional[str]",
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "kobin-master/example/template_and_static_files/app.py": {
        "index": {
            "name": "index",
            "location": 8,
            "return": [
                "TemplateResponse",
                "dict",
                "int",
                "werkzeug.wrappers.Response",
                "Dict[str, Any]",
                "str",
                "Dict[str, Callable[[str], Any]]"
            ],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 15,
            "return": [
                "Response",
                "int",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]",
                "Optional[T]",
                "bool",
                "OrderedDict",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "kobin-master/example/template_and_static_files/config.py": {},
    "kobin-master/kobin/app.py": {
        "_get_exception_message": {
            "name": "_get_exception_message",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "Exception",
                    "Union[str, List[str]]",
                    "list[]",
                    "list",
                    "Iterable"
                ],
                "debug": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "bool",
                    "List[str]",
                    "typing.Callable[, ]",
                    "list[str]",
                    "Iterable[str]"
                ]
            }
        },
        "_current_app": {
            "name": "_current_app",
            "location": 134,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "template_router_reverse": {
            "name": "template_router_reverse",
            "location": 139,
            "return": [
                "str",
                "typing.Text",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "with_host": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "load_jinja2_env": {
            "name": "load_jinja2_env",
            "location": 149,
            "return": [
                "Environment",
                "int",
                "Dict[str, str]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "template_dirs": [
                    "str",
                    "bool"
                ],
                "global_variables": [
                    "dict",
                    "None",
                    "str",
                    "dict[, ]",
                    "requests.Session",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "global_filters": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "_get_default_logger": {
            "name": "_get_default_logger",
            "location": 162,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "debug": [
                    "int",
                    "List[Tuple[str, str]]",
                    "Exception",
                    "list[tuple[typing.Union[str,str]]]",
                    "Type[T]",
                    "str",
                    "typing.Type",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 173,
            "return": [
                "dict"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Type['BaseConfig']",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "load_config_from_module": {
            "name": "load_config_from_module",
            "location": 193,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "module": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type['Declared']",
                    "typing.Type",
                    "bytes",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "load_config_from_pyfile": {
            "name": "load_config_from_pyfile",
            "location": 198,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "filepath": [
                    "Optional[IO[str]]",
                    "typing.IO",
                    "IO[bytes]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "current_config": {
            "name": "current_config",
            "location": 203,
            "return": [
                "dict",
                "jinja2.BaseLoader"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Kobin.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Kobin.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "bool",
                "Dict[str, str]",
                "List[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str"
                ],
                "start_response": [
                    "bytes",
                    "dict[str, str]",
                    "requests.Response",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Kobin.__setattr__": {
            "name": "__setattr__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "Kobin.__delattr__": {
            "name": "__delattr__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "Optional[str]",
                    "str",
                    "list",
                    "None",
                    "Sequence",
                    "list[]",
                    "typing.Sequence[]"
                ]
            }
        },
        "Kobin.frozen": {
            "name": "frozen",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kobin.route": {
            "name": "route",
            "location": 71,
            "return": [
                "Union[(Callable[([Any], Any)], _T3)]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "int",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "method": [
                    "typing.Text",
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ],
                "name": [
                    "str",
                    "int",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "callback": [
                    "_T3"
                ]
            }
        },
        "Kobin.before_request": {
            "name": "before_request",
            "location": 77,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "_T0"
                ]
            }
        },
        "Kobin.after_request": {
            "name": "after_request",
            "location": 83,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "_T0"
                ]
            }
        },
        "Kobin._handle": {
            "name": "_handle",
            "location": 89,
            "return": [
                "kobin.responses.HTTPError"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Kobin.route.decorator": {
            "name": "decorator",
            "location": 72,
            "return": [],
            "arguments": {
                "callback_func": []
            }
        },
        "Kobin.before_request.decorator": {
            "name": "decorator",
            "location": 78,
            "return": [],
            "arguments": {
                "callback_func": []
            }
        },
        "Kobin.after_request.decorator": {
            "name": "decorator",
            "location": 84,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "callback_func": [
                    "str",
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "kobin-master/kobin/requests.py": {
        "_split_into_mimetype_and_priority": {
            "name": "_split_into_mimetype_and_priority",
            "location": 161,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "app.domains.Role",
                    "Iterator[T]",
                    "Tuple[bytes, bytes, bytes]",
                    "int",
                    "Dict[str, Any]",
                    "Callable[[], Any]"
                ]
            }
        },
        "_parse_and_sort_accept_header": {
            "name": "_parse_and_sort_accept_header",
            "location": 180,
            "return": [
                "list"
            ],
            "arguments": {
                "accept_header": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "accept_best_match": {
            "name": "accept_best_match",
            "location": 190,
            "return": [
                "str",
                "bool",
                "T",
                "Type[Any]"
            ],
            "arguments": {
                "accept_header": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "mimetypes": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict",
                    "bool"
                ]
            }
        },
        "_local_property": {
            "name": "_local_property",
            "location": 206,
            "return": [
                "property"
            ],
            "arguments": {}
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Optional[bool]",
                    "None",
                    "Optional[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "Request.get": {
            "name": "get",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, tuple[]]",
                    "Dict[str, tuple]",
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "list",
                    "Dict[str, Any]"
                ],
                "default": [
                    "str",
                    "None",
                    "Dict[str, tuple]",
                    "dict",
                    "dict[str, tuple[]]",
                    "list",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "list[]"
                ]
            }
        },
        "Request.path": {
            "name": "path",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 48,
            "return": [
                "str",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 53,
            "return": [
                "dict[, ]",
                "Optional[str]",
                "Set[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.query": {
            "name": "query",
            "location": 59,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "Optional[str]",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.forms": {
            "name": "forms",
            "location": 68,
            "return": [
                "int",
                "str",
                "Callable",
                "list[int]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.raw_body": {
            "name": "raw_body",
            "location": 79,
            "return": [
                "bytes",
                "dict[int, typing.Any]",
                "dict",
                "dict[str, str]",
                "str",
                "int",
                "dict[str, bool]",
                "Optional[Dict[str, Any]]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "dict[str, typing.Union[int,str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.body": {
            "name": "body",
            "location": 91,
            "return": [
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.json": {
            "name": "json",
            "location": 95,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.url": {
            "name": "url",
            "location": 99,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.cookies": {
            "name": "cookies",
            "location": 107,
            "return": [
                "dict[, ]",
                "dict",
                "str",
                "Optional[List[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.get_cookie": {
            "name": "get_cookie",
            "location": 111,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "int",
                "Dict[str, str]",
                "float",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "default": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "secret": [
                    "Optional[int]",
                    "None",
                    "Union[str, bytes]",
                    "bytes",
                    "int",
                    "Optional[Sequence[Any]]",
                    "str",
                    "Optional[bytes]",
                    "typing.Sequence[typing.Any]"
                ],
                "digestmod": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "Request.__getitem__": {
            "name": "__getitem__",
            "location": 129,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[KT, VT]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "Request.__delitem__": {
            "name": "__delitem__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Request.__setitem__": {
            "name": "__setitem__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "VT",
                    "KT",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Request.__len__": {
            "name": "__len__",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_local_property.fget": {
            "name": "fget",
            "location": 209,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_local_property.fset": {
            "name": "fset",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "_local_property.fdel": {
            "name": "fdel",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "kobin-master/kobin/responses.py": {
        "BaseResponse.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "List[str]",
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "int"
                ],
                "status": [
                    "int",
                    "bytes",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "headers": [
                    "dict[, ]",
                    "Optional[str]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "BaseResponse.body": {
            "name": "body",
            "location": 47,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.status_code": {
            "name": "status_code",
            "location": 51,
            "return": [
                "int",
                "bytes",
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.status": {
            "name": "status",
            "location": 62,
            "return": [
                "",
                "str"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "BaseResponse.headerlist": {
            "name": "headerlist",
            "location": 68,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "bytes",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.set_cookie": {
            "name": "set_cookie",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "float",
                    "bytes"
                ],
                "value": [
                    "bytes",
                    "tuple",
                    "List[List[int]]",
                    "bool",
                    "bytearray",
                    "Union[bytes, str]"
                ],
                "expires": [
                    "int",
                    "None",
                    "Optional[int]",
                    "List[\"Issue\"]",
                    "list[\"Issue\"]",
                    "Union[int, List[\"Outcome\"]]",
                    "list[\"Outcome\"]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "max_age": [
                    "int",
                    "None",
                    "Optional[float]",
                    "Dict[str, str]",
                    "float",
                    "Optional[str]",
                    "dict[str, str]",
                    "str"
                ],
                "path": [
                    "typing.Text",
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "secret": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Union[bytes, str]"
                ],
                "digestmod": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseResponse.delete_cookie": {
            "name": "delete_cookie",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Hashable",
                    "str",
                    "Hashable",
                    "int",
                    "dict[str, str]",
                    "Union[int, slice]",
                    "Dict[str, str]"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "status": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "app.domains.Usergroup",
                    "Union[int, str]"
                ],
                "headers": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "app.domains.Usergroup",
                    "Union[int, str]"
                ],
                "charset": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "JSONResponse.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dic": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]"
                ],
                "status": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "headers": [
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "charset": [
                    "typing.Text",
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "TemplateResponse.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[int]",
                    "int",
                    "Optional[\"Page\"]",
                    "None"
                ],
                "status": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "headers": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "str",
                    "Optional[int]",
                    "dict[str, typing.Any]"
                ],
                "charset": [
                    "typing.Text",
                    "str",
                    "bool",
                    "bytes",
                    "Sequence[str]"
                ]
            }
        },
        "RedirectResponse.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "None",
                    "Optional[str]",
                    "frozenset",
                    "FrozenSet[bytes]"
                ]
            }
        },
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "status": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "headers": [
                    "int",
                    "None",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "charset": [
                    "typing.Text",
                    "int",
                    "Dict[str, str]",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "kobin-master/kobin/routes.py": {
        "split_by_slash": {
            "name": "split_by_slash",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list",
                    "List[int]"
                ]
            }
        },
        "match_url_vars_type": {
            "name": "match_url_vars_type",
            "location": 84,
            "return": [
                "Tuple[(bool, dict)]"
            ],
            "arguments": {
                "url_vars": [
                    "Dict[str, Any]",
                    "Optional[List[Any]]",
                    "type"
                ],
                "type_hints": [
                    "str",
                    "dict"
                ]
            }
        },
        "match_path": {
            "name": "match_path",
            "location": 105,
            "return": [
                "Tuple[(bool, dict)]"
            ],
            "arguments": {
                "rule": [
                    "List[str]",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "List[Tuple[int, int]]"
                ],
                "path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.match": {
            "name": "match",
            "location": 137,
            "return": [
                "Tuple[(nothing, dict)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str"
                ],
                "method": [
                    "str",
                    "int"
                ]
            }
        },
        "Router.add": {
            "name": "add",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "method": [
                    "str",
                    "Type[T]"
                ],
                "name": [
                    "Optional[str]",
                    "Type",
                    "str"
                ],
                "callback": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Type"
                ]
            }
        },
        "Router.reverse": {
            "name": "reverse",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kobin-master/kobin/__init__.py": {},
    "kobin-master/tests/dummy_config.py": {},
    "kobin-master/tests/test_apps.py": {
        "KobinTests.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_route": {
            "name": "test_route",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_typed_url_var": {
            "name": "test_typed_url_var",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_404_not_found": {
            "name": "test_404_not_found",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_404_when_cast_error": {
            "name": "test_404_when_cast_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_response_status_when_500_raised": {
            "name": "test_response_status_when_500_raised",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_response_body_when_500_raised_and_enable_debugging": {
            "name": "test_response_body_when_500_raised_and_enable_debugging",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_response_body_when_500_raised_and_disable_debugging": {
            "name": "test_response_body_when_500_raised_and_disable_debugging",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_handled_body_message_when_404_not_found": {
            "name": "test_handled_body_message_when_404_not_found",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.test_wsgi": {
            "name": "test_wsgi",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinHookTests.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinHookTests.test_before_request": {
            "name": "test_before_request",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinHookTests.test_after_request": {
            "name": "test_after_request",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleUnexpectedExceptionTests.test_get_exception_message_when_debugging": {
            "name": "test_get_exception_message_when_debugging",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleUnexpectedExceptionTests.test_get_exception_message_when_not_debugging": {
            "name": "test_get_exception_message_when_not_debugging",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinAfterHookTests.setUp": {
            "name": "setUp",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinAfterHookTests.test_after_request": {
            "name": "test_after_request",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinFrozenTests.setUp": {
            "name": "setUp",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinFrozenTests.test_can_change_state_before_running": {
            "name": "test_can_change_state_before_running",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.setUp": {
            "name": "setUp",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_lazy_reverse_router": {
            "name": "test_lazy_reverse_router",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_mock": []
            }
        },
        "ConfigTests.test_lazy_reverse_router_not_found": {
            "name": "test_lazy_reverse_router_not_found",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_mock": []
            }
        },
        "ConfigTests.test_load_jinja2_env_with_globals": {
            "name": "test_load_jinja2_env_with_globals",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_load_jinja2_env_with_filters": {
            "name": "test_load_jinja2_env_with_filters",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_constructor": {
            "name": "test_constructor",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_load_from_module": {
            "name": "test_load_from_module",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_load_from_pyfile": {
            "name": "test_load_from_pyfile",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_config_has_not_lower_case_variable": {
            "name": "test_config_has_not_lower_case_variable",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_failure_for_loading_config": {
            "name": "test_failure_for_loading_config",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KobinTests.setUp.dummy_func": {
            "name": "dummy_func",
            "location": 20,
            "return": [
                "Response",
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {}
        },
        "KobinTests.setUp.typed_url_var": {
            "name": "typed_url_var",
            "location": 24,
            "return": [
                "Response",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "typed_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "KobinTests.setUp.raise500": {
            "name": "raise500",
            "location": 29,
            "return": [
                "Response",
                "bytes",
                "int",
                "dict",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "typed_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "KobinHookTests.setUp.dummy_func": {
            "name": "dummy_func",
            "location": 104,
            "return": [
                "Response",
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {}
        },
        "KobinHookTests.setUp.before": {
            "name": "before",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "KobinHookTests.setUp.before2": {
            "name": "before2",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "KobinHookTests.setUp.after": {
            "name": "after",
            "location": 116,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "KobinHookTests.setUp.after2": {
            "name": "after2",
            "location": 121,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "KobinAfterHookTests.setUp.dummy_func": {
            "name": "dummy_func",
            "location": 167,
            "return": [
                "Response",
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {}
        },
        "KobinAfterHookTests.setUp.after_do_not_return_response": {
            "name": "after_do_not_return_response",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "list"
                ]
            }
        },
        "KobinFrozenTests.setUp.dummy_func": {
            "name": "dummy_func",
            "location": 186,
            "return": [
                "Response",
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {}
        },
        "KobinFrozenTests.test_can_change_state_before_running.dummy_start_response": {
            "name": "dummy_start_response",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Iterable",
                    "bool"
                ],
                "h": [
                    "str",
                    "Iterable",
                    "bool"
                ]
            }
        },
        "ConfigTests.test_lazy_reverse_router.top": {
            "name": "top",
            "location": 209,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "ConfigTests.test_load_jinja2_env_with_filters.foo_filter": {
            "name": "foo_filter",
            "location": 231,
            "return": [
                "int",
                "Set[Optional[str]]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "kobin-master/tests/test_requests.py": {
        "RequestTests.test_initialized": {
            "name": "test_initialized",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_get": {
            "name": "test_get",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_getitem": {
            "name": "test_getitem",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_get_default_value": {
            "name": "test_get_default_value",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_path_property": {
            "name": "test_path_property",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_path_property_stripped_last_slash": {
            "name": "test_path_property_stripped_last_slash",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_method_name_to_uppercase": {
            "name": "test_method_name_to_uppercase",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_POST_a_parameter": {
            "name": "test_POST_a_parameter",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_POST_parameters": {
            "name": "test_POST_parameters",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_GET_a_parameter": {
            "name": "test_GET_a_parameter",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_GET_parameters": {
            "name": "test_GET_parameters",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_raw_body": {
            "name": "test_raw_body",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_raw_body_with_empty_string_content_length": {
            "name": "test_raw_body_with_empty_string_content_length",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_body": {
            "name": "test_body",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_json": {
            "name": "test_json",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_url": {
            "name": "test_url",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTests.test_headers": {
            "name": "test_headers",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_split_into_mimetype_and_priority_without_priority": {
            "name": "test_split_into_mimetype_and_priority_without_priority",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_split_into_mimetype_and_priority_with_priority": {
            "name": "test_split_into_mimetype_and_priority_with_priority",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_parse_and_sort_accept_header": {
            "name": "test_parse_and_sort_accept_header",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_best_match_without_priority": {
            "name": "test_best_match_without_priority",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_best_match_with_priority": {
            "name": "test_best_match_with_priority",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptBestMatchTests.test_best_match_with_priority_and_wildcard": {
            "name": "test_best_match_with_priority_and_wildcard",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie": {
            "name": "test_set_cookie",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie_with_max_age": {
            "name": "test_set_cookie_with_max_age",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie_with_expires": {
            "name": "test_set_cookie_with_expires",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie_with_path": {
            "name": "test_set_cookie_with_path",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_cookies_property_has_nothing": {
            "name": "test_cookies_property_has_nothing",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_cookies_property_has_an_item": {
            "name": "test_cookies_property_has_an_item",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_get_cookie": {
            "name": "test_get_cookie",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_delete_cookie": {
            "name": "test_delete_cookie",
            "location": 240,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie_with_secret": {
            "name": "test_set_cookie_with_secret",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_get_cookie_with_secret": {
            "name": "test_get_cookie_with_secret",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieTests.test_set_cookie_with_secret_in_config": {
            "name": "test_set_cookie_with_secret_in_config",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_config": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "kobin-master/tests/test_responses.py": {
        "BaseResponseTests.test_constructor_body": {
            "name": "test_constructor_body",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_constructor_status": {
            "name": "test_constructor_status",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_set_status": {
            "name": "test_set_status",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_set_invalid_status": {
            "name": "test_set_invalid_status",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_constructor_headerlist": {
            "name": "test_constructor_headerlist",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_constructor_headerlist_has_already_content_type": {
            "name": "test_constructor_headerlist_has_already_content_type",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_add_header": {
            "name": "test_add_header",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_constructor_headerlist_with_add_header": {
            "name": "test_constructor_headerlist_with_add_header",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseTests.test_constructor_status": {
            "name": "test_constructor_status",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseTests.test_constructor_body_when_given_bytes": {
            "name": "test_constructor_body_when_given_bytes",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseTests.test_constructor_body_when_given_str": {
            "name": "test_constructor_body_when_given_str",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONResponseTests.test_constructor_status": {
            "name": "test_constructor_status",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONResponseTests.test_constructor_headerlist": {
            "name": "test_constructor_headerlist",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONResponseTests.test_constructor_headerlist_with_add_header": {
            "name": "test_constructor_headerlist_with_add_header",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jinja2TemplateTests.test_file": {
            "name": "test_file",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RedirectResponseTests.test_constructor_body": {
            "name": "test_constructor_body",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectResponseTests.test_constructor_status_when_http10": {
            "name": "test_constructor_status_when_http10",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectResponseTests.test_constructor_status_when_http11": {
            "name": "test_constructor_status_when_http11",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectResponseTests.test_constructor_headerlist_has_location": {
            "name": "test_constructor_headerlist_has_location",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponseTests.test_set_invalid_status.set_status": {
            "name": "set_status",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kobin-master/tests/test_routes.py": {
        "view_int": {
            "name": "view_int",
            "location": 6,
            "return": [
                "kobin.responses.Response"
            ],
            "arguments": {
                "year": [
                    "int"
                ]
            }
        },
        "view_str": {
            "name": "view_str",
            "location": 10,
            "return": [
                "kobin.responses.Response"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "RouterTests.test_match_dynamic_routes_with_casted_number": {
            "name": "test_match_dynamic_routes_with_casted_number",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTests.test_match_dynamic_routes_with_string": {
            "name": "test_match_dynamic_routes_with_string",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTests.test_404_not_found": {
            "name": "test_404_not_found",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTests.test_405_method_not_allowed": {
            "name": "test_405_method_not_allowed",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseRoutingTests.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseRoutingTests.test_reverse_route_without_url_vars": {
            "name": "test_reverse_route_without_url_vars",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseRoutingTests.test_reverse_route_with_url_vars": {
            "name": "test_reverse_route_with_url_vars",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseRoutingTests.test_reverse_not_match": {
            "name": "test_reverse_not_match",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseRoutingTests.setUp.index": {
            "name": "index",
            "location": 46,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "ReverseRoutingTests.setUp.user_detail": {
            "name": "user_detail",
            "location": 49,
            "return": [
                "Response",
                "set",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "kobin-master/tests/__init__.py": {}
}
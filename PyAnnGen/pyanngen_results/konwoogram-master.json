{
    "konwoogram-master/manage.py": {},
    "konwoogram-master/config/urls.py": {},
    "konwoogram-master/config/wsgi.py": {},
    "konwoogram-master/config/__init__.py": {},
    "konwoogram-master/config/settings/base.py": {},
    "konwoogram-master/config/settings/local.py": {},
    "konwoogram-master/config/settings/production.py": {},
    "konwoogram-master/config/settings/test.py": {},
    "konwoogram-master/config/settings/__init__.py": {},
    "konwoogram-master/konwoogram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "konwoogram-master/konwoogram/views.py": {
        "ReactAppViews.get": {
            "name": "get",
            "location": 8,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str, str]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/__init__.py": {},
    "konwoogram-master/konwoogram/contrib/__init__.py": {},
    "konwoogram-master/konwoogram/contrib/sites/__init__.py": {},
    "konwoogram-master/konwoogram/contrib/sites/migrations/0001_initial.py": {},
    "konwoogram-master/konwoogram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "konwoogram-master/konwoogram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/contrib/sites/migrations/__init__.py": {},
    "konwoogram-master/konwoogram/images/admin.py": {},
    "konwoogram-master/konwoogram/images/apps.py": {},
    "konwoogram-master/konwoogram/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 25,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 29,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.natural_time": {
            "name": "natural_time",
            "location": 33,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/images/serializers.py": {
        "ImageSerializer.get_is_liked": {
            "name": "get_is_liked",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/images/tests.py": {},
    "konwoogram-master/konwoogram/images/urls.py": {},
    "konwoogram-master/konwoogram/images/views.py": {
        "Images.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "list[aw_core.models.Event]",
                    "List[aw_core.models.Event]",
                    "Optional[int]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "Images.post": {
            "name": "post",
            "location": 39,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "LikeImage.get": {
            "name": "get",
            "location": 57,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "int",
                    "dict[str, int]",
                    "Dict[str, int]"
                ],
                "image_id": [
                    "int",
                    "django.contrib.auth.models.User"
                ],
                "foemat": [
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 70,
            "return": [
                "Response",
                "Dict[str, Any]",
                "Dict[int, dict]",
                "List[Dict[str, Any]]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "image_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "format": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "UnLikeImage.delete": {
            "name": "delete",
            "location": 99,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "Optional[Dict[str, str]]",
                "Optional[str]",
                "List[str]",
                "bool",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "str",
                    "None"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 119,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "image_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "format": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 146,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "comment_id": [
                    "bool",
                    "bytes",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 159,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "requests.Response",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Optional[dict]",
                    "Optional[requests.Response]"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "ModerateComments.delete": {
            "name": "delete",
            "location": 180,
            "return": [
                "Response",
                "Dict[str, Any]",
                "zerver.models.UserProfile",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "image_id": [
                    "bool",
                    "list[S]",
                    "tildes.models.user.User",
                    "dict[str, typing.Any]",
                    "models.Station",
                    "app.models.models.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Union[server.models.User, int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "comment_id": [
                    "bool",
                    "list[S]",
                    "tildes.models.user.User",
                    "dict[str, typing.Any]",
                    "models.Station",
                    "app.models.models.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Union[server.models.User, int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "format": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ImageDetail.find_own_image": {
            "name": "find_own_image",
            "location": 194,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "int",
                "list[]",
                "bytes",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "int",
                    "str",
                    "bool",
                    "transfer.models.ItemID"
                ],
                "user": [
                    "int",
                    "str",
                    "bool",
                    "transfer.models.ItemID"
                ]
            }
        },
        "ImageDetail.get": {
            "name": "get",
            "location": 203,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "image_id": [
                    "str",
                    "int",
                    "transfer.models.Channel.ID",
                    "bool",
                    "grouper.models.base.session.Session"
                ],
                "format": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ImageDetail.put": {
            "name": "put",
            "location": 216,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "image_id": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None",
                    "transfer.models.OrderID",
                    "set[int]",
                    "Set[int]",
                    "zerver.models.Realm"
                ],
                "format": [
                    "str",
                    "bool"
                ]
            }
        },
        "ImageDetail.delete": {
            "name": "delete",
            "location": 243,
            "return": [
                "Response",
                "zerver.models.UserProfile",
                "dict",
                "str",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "image_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Union[int, str]"
                ],
                "format": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/images/__init__.py": {},
    "konwoogram-master/konwoogram/images/migrations/0001_initial.py": {},
    "konwoogram-master/konwoogram/images/migrations/0002_auto_20190221_1405.py": {},
    "konwoogram-master/konwoogram/images/migrations/0003_auto_20190221_1759.py": {},
    "konwoogram-master/konwoogram/images/migrations/0004_auto_20190222_1208.py": {},
    "konwoogram-master/konwoogram/images/migrations/0005_image_tags.py": {},
    "konwoogram-master/konwoogram/images/migrations/__init__.py": {},
    "konwoogram-master/konwoogram/notifications/admin.py": {},
    "konwoogram-master/konwoogram/notifications/apps.py": {},
    "konwoogram-master/konwoogram/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/notifications/serializers.py": {},
    "konwoogram-master/konwoogram/notifications/tests.py": {},
    "konwoogram-master/konwoogram/notifications/urls.py": {},
    "konwoogram-master/konwoogram/notifications/views.py": {
        "create_notification": {
            "name": "create_notification",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "creator": [
                    "str",
                    "int",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "audiopyle.lib.models.plugin.VampyPlugin"
                ],
                "to": [
                    "str",
                    "int",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "audiopyle.lib.models.plugin.VampyPlugin"
                ],
                "notification_type": [
                    "str",
                    "int",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "audiopyle.lib.models.plugin.VampyPlugin"
                ],
                "image": [
                    "str",
                    "None",
                    "int",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "audiopyle.lib.models.plugin.VampyPlugin"
                ],
                "comment": [
                    "str",
                    "None",
                    "int",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "audiopyle.lib.models.plugin.VampyPlugin"
                ]
            }
        },
        "Notifications.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/notifications/__init__.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/0001_initial.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/0002_auto_20190227_1625.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/0003_auto_20190227_1626.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/0004_notification_comment.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/0005_auto_20190408_1234.py": {},
    "konwoogram-master/konwoogram/notifications/migrations/__init__.py": {},
    "konwoogram-master/konwoogram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "user": [
                    "dict",
                    "django.db.models.query.QuerySet",
                    "Optional[bytes]"
                ],
                "form": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 30,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/admin.py": {},
    "konwoogram-master/konwoogram/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.post_count": {
            "name": "post_count",
            "location": 33,
            "return": [
                "str",
                "int",
                "Set[Optional[str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 37,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 41,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/users/serializers.py": {
        "ListUserSerializer.get_following": {
            "name": "get_following",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SignUpSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpSerializer.save": {
            "name": "save",
            "location": 66,
            "return": [
                "set",
                "bool",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Iterable[str]"
                ],
                "user": [
                    "List[int]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/urls.py": {},
    "konwoogram-master/konwoogram/users/views.py": {
        "ExploreUsers.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "bool"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 21,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "int",
                    "None",
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 40,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "int",
                    "None",
                    "Iterable[int]",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 57,
            "return": [
                "str",
                "dict[str, str]",
                "Set[str]",
                "dict",
                "int",
                "Optional[str]",
                "list[]",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "zerver.models.Realm",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 65,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Iterable"
                ],
                "username": [
                    "bool",
                    "str",
                    "zerver.models.UserProfile",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 78,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[int, dict]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 107,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "UserFollowings.get": {
            "name": "get",
            "location": 122,
            "return": [
                "Response",
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "dict[str, typing.Any]",
                    "None",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 137,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 157,
            "return": [
                "Response",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "dict",
                "Dict[str, str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "rest_framework.requesRequest"
                ],
                "username": [
                    "str",
                    "int",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/__init__.py": {},
    "konwoogram-master/konwoogram/users/migrations/0001_initial.py": {},
    "konwoogram-master/konwoogram/users/migrations/0002_auto_20190221_1131.py": {},
    "konwoogram-master/konwoogram/users/migrations/0003_auto_20190221_1405.py": {},
    "konwoogram-master/konwoogram/users/migrations/0004_auto_20190221_1410.py": {},
    "konwoogram-master/konwoogram/users/migrations/0005_user_profile_image.py": {},
    "konwoogram-master/konwoogram/users/migrations/0006_auto_20190225_1725.py": {},
    "konwoogram-master/konwoogram/users/migrations/__init__.py": {},
    "konwoogram-master/konwoogram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "konwoogram-master/konwoogram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "konwoogram-master/konwoogram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "konwoogram-master/konwoogram/users/tests/__init__.py": {}
}
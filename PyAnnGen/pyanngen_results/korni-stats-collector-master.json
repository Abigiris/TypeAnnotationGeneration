{
    "korni-stats-collector-master/setup.py": {},
    "korni-stats-collector-master/ksc/utils.py": {
        "parse_link_header": {
            "name": "parse_link_header",
            "location": 8,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "link_header": [
                    "str",
                    "int",
                    "Dict[str,Union[Any,bool,str]]",
                    "Optional[str]",
                    "Type[Dict[str,Any]]"
                ]
            }
        },
        "get_next_link": {
            "name": "get_next_link",
            "location": 23,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "link_header": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "ilen": {
            "name": "ilen",
            "location": 33,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Tuple[str]",
                    "List[int]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "korni-stats-collector-master/ksc/__init__.py": {},
    "korni-stats-collector-master/ksc/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "collect": {
            "name": "collect",
            "location": 26,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "display": [
                    "bool",
                    "List[str]"
                ],
                "no_upload": [
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "korni-stats-collector-master/ksc/collector/base.py": {
        "Collector.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "since": [
                    "Optional[datetime.datetime]",
                    "None",
                    "Dict",
                    "datetime.datetime",
                    "Tuple[Union[datetime.datetime,datetime.datetime]]",
                    "Tuple[datetime.datetime,datetime.datetime]",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "until": [
                    "None",
                    "datetime.datetime",
                    "str",
                    "Tuple[Union[datetime.datetime,datetime.datetime]]",
                    "Optional[datetime.datetime]",
                    "Tuple[datetime.datetime,datetime.datetime]"
                ]
            }
        },
        "Collector.collect": {
            "name": "collect",
            "location": 48,
            "return": [
                "ksc.collector.model.collector.Result",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "korni-stats-collector-master/ksc/collector/__init__.py": {},
    "korni-stats-collector-master/ksc/collector/github/collector.py": {
        "raise_for_limit": {
            "name": "raise_for_limit",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "Dict",
                    "Dict[str,object]"
                ]
            }
        },
        "fetch_contributions.filter_pr_open_since": {
            "name": "filter_pr_open_since",
            "location": 71,
            "return": [
                "bool",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "pr": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "fetch_contributions.filter_pr_merged_since": {
            "name": "filter_pr_merged_since",
            "location": 74,
            "return": [
                "bool",
                "float",
                "logging.LogRecord",
                "Callable[[None],bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "pr": [
                    "Callable[[yarl.URL], Awaitable[None]]",
                    "model.View",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "GithubCollector.collect": {
            "name": "collect",
            "location": 339,
            "return": [
                "collector.Result"
            ],
            "arguments": {
                "self": []
            }
        },
        "fetch_list.parse_obj_safe": {
            "name": "parse_obj_safe",
            "location": 237,
            "return": [
                "None",
                "bool",
                "Tuple[float,float]",
                "str",
                "rflx.model.Refinement"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "MutableMapping",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        }
    },
    "korni-stats-collector-master/ksc/collector/github/github.py": {
        "PullRequest.is_authored_by": {
            "name": "is_authored_by",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "korni-stats-collector-master/ksc/collector/github/__init__.py": {},
    "korni-stats-collector-master/ksc/collector/model/collector.py": {},
    "korni-stats-collector-master/ksc/collector/model/__init__.py": {},
    "korni-stats-collector-master/ksc/tests/base_collector_test.py": {
        "test_no_arg_constructor": {
            "name": "test_no_arg_constructor",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_since_only_constructor": {
            "name": "test_since_only_constructor",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_until_only_constructor_fails": {
            "name": "test_until_only_constructor_fails",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if_since_larger_then_until": {
            "name": "test_if_since_larger_then_until",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dates_are_in_utc": {
            "name": "test_dates_are_in_utc",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockedCollector.collect": {
            "name": "collect",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "korni-stats-collector-master/ksc/tests/__init__.py": {}
}
{
    "koubachi-pyserver-master/src/koubachi_pyserver/app.py": {
        "get_device_key": {
            "name": "get_device_key",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "mac_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_device_calibration_parameters": {
            "name": "get_device_calibration_parameters",
            "location": 41,
            "return": [
                "str",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "mac_address": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_device_config": {
            "name": "get_device_config",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "_mac_address": [
                    "str",
                    "Dict[str,BinaryIO]",
                    "bool"
                ]
            }
        },
        "get_device_last_config_change": {
            "name": "get_device_last_config_change",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "_mac_address": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "convert_readings": {
            "name": "convert_readings",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "mac_address": [
                    "int",
                    "str",
                    "Union[str,int]"
                ],
                "body": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_mqtt_config": {
            "name": "get_mqtt_config",
            "location": 80,
            "return": [
                "dict"
            ],
            "arguments": {
                "output": [
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "handle_readings": {
            "name": "handle_readings",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "mac_address": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ],
                "readings": [
                    "str",
                    "server.models.Bike"
                ]
            }
        },
        "write_to_csv": {
            "name": "write_to_csv",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "mac_address": [
                    "bool",
                    "float"
                ],
                "readings": [
                    "str",
                    "List[int]",
                    "int",
                    "List[list[str]]",
                    "float",
                    "List[List[str]]"
                ],
                "directory": [
                    "bool",
                    "float"
                ]
            }
        },
        "post_to_thingsboard_mqtt": {
            "name": "post_to_thingsboard_mqtt",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "mac_address": [
                    "bool",
                    "float",
                    "Dict"
                ],
                "readings": [
                    "Dict",
                    "bool",
                    "float"
                ]
            }
        },
        "post_to_latestvals_mqtt": {
            "name": "post_to_latestvals_mqtt",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "readings": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "post_to_mqtt_individual": {
            "name": "post_to_mqtt_individual",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "readings": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 166,
            "return": [
                "Response",
                "str",
                "flask.Response",
                "Optional[str]",
                "Dict",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "connect": {
            "name": "connect",
            "location": 171,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "Dict[str,str]",
                "Optional[Dict]",
                "collector_utilities.type.Response"
            ],
            "arguments": {
                "mac_address": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 180,
            "return": [
                "Response",
                "str",
                "Dict[str,Any]",
                "int",
                "Dict"
            ],
            "arguments": {
                "mac_address": [
                    "str",
                    "os.stat_result"
                ]
            }
        },
        "add_readings": {
            "name": "add_readings",
            "location": 189,
            "return": [
                "Response",
                "Dict[str,Any]",
                "Dict[str,str]",
                "str",
                "Optional[Dict]",
                "Exception"
            ],
            "arguments": {
                "mac_address": [
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "koubachi-pyserver-master/src/koubachi_pyserver/crypto.py": {
        "decrypt": {
            "name": "decrypt",
            "location": 12,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[libkol.types.ItemQuantity]",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Union[str,Any]]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "Union[str, bytes]"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[libkol.types.ItemQuantity]",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Union[str,Any]]"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "koubachi-pyserver-master/src/koubachi_pyserver/sensors.py": {
        "convert_lm94022_temperature": {
            "name": "convert_lm94022_temperature",
            "location": 4,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[int,float]",
                    "Mapping[str,float]",
                    "float",
                    "Mapping"
                ],
                "calibration_parameters": [
                    "Union[int, float]",
                    "Mapping[str, float]",
                    "int"
                ]
            }
        },
        "convert_sfh3710_light": {
            "name": "convert_sfh3710_light",
            "location": 11,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[int,float]",
                    "float",
                    "Tuple[float]"
                ],
                "calibration_parameters": [
                    "Mapping[str, float]",
                    "int",
                    "float"
                ]
            }
        },
        "convert_soil_moisture": {
            "name": "convert_soil_moisture",
            "location": 18,
            "return": [
                "float",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[int,float]",
                    "float"
                ],
                "calibration_parameters": [
                    "Mapping[str, float]",
                    "int",
                    "float"
                ]
            }
        },
        "convert_tsl2561_light": {
            "name": "convert_tsl2561_light",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "_calibration_parameters": [
                    "Mapping",
                    "bool",
                    "Mapping[str,float]",
                    "str",
                    "Sequence[str]",
                    "Exception",
                    "Callable[...,bool]",
                    "int"
                ]
            }
        }
    },
    "koubachi-pyserver-master/src/koubachi_pyserver/__init__.py": {},
    "koubachi-pyserver-master/tests/test_koubachi_crypto.py": {
        "test_decryption": {
            "name": "test_decryption",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encryption_and_decryption": {
            "name": "test_encryption_and_decryption",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
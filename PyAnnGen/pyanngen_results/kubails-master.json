{
    "kubails-master/setup.py": {},
    "kubails-master/kubails/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "kubails-master/kubails/main.py": {
        "construct_cli": {
            "name": "construct_cli",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "commands": [
                    "str",
                    "Callable[..., None]",
                    "bool"
                ],
                "docstring": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "construct_cli.cli": {
            "name": "cli",
            "location": 23,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "only_changed_services": [
                    "bool",
                    "str",
                    "Union[str, int]"
                ],
                "all_services_branch": [
                    "str",
                    "List[str]",
                    "AsyncIterator[T]",
                    "bool"
                ]
            }
        }
    },
    "kubails-master/kubails/test_main.py": {
        "TestCli.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCli.test_short_help_option_enabled": {
            "name": "test_short_help_option_enabled",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubails-master/kubails/__init__.py": {},
    "kubails-master/kubails/commands/cluster.py": {
        "cluster": {
            "name": "cluster",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "destroy": {
            "name": "destroy",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cleanup_namespaces": {
            "name": "cleanup_namespaces",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_new_namespace": {
            "name": "is_new_namespace",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": [
                    "Optional[int]",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "manifests": {
            "name": "manifests",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "tag": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "namespace": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "manifests_deploy": {
            "name": "manifests_deploy",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "namespace": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "secrets": {
            "name": "secrets",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "secrets_deploy": {
            "name": "secrets_deploy",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ],
                "namespace": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_get_service_from_folder": {
            "name": "_get_service_from_folder",
            "location": 130,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "create": {
            "name": "create",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "service": [
                    "str"
                ],
                "secret_name": [
                    "str"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/config.py": {
        "config": {
            "name": "config",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "list": {
            "name": "list",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "flattened": [
                    "str",
                    "int"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "key_path": [
                    "str",
                    "bool",
                    "Optional[tuple]",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "key_path": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/helpers.py": {
        "generate_service": {
            "name": "generate_service",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "service_service": [
                    "bool",
                    "Dict[str, object]",
                    "Literal"
                ],
                "service_index": [
                    "None"
                ],
                "service_type": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "subdomain": [
                    "Optional[str]",
                    "None",
                    "Optional[Type]",
                    "str",
                    "Optional[int]",
                    "typing.Type",
                    "int"
                ],
                "title": [
                    "Sequence[Callable]",
                    "None",
                    "Optional[int]",
                    "typing.Sequence[typing.Callable[, ]]",
                    "Optional[Tuple[float, float]]",
                    "int",
                    "Optional[float]",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ]
            }
        },
        "_build_extra_service_generation_options": {
            "name": "_build_extra_service_generation_options",
            "location": 59,
            "return": [
                "dict[, ]",
                "Sequence",
                "Mapping[str, int]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "service_type": [
                    "str"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/infra.py": {
        "infra": {
            "name": "infra",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unauthenticate": {
            "name": "unauthenticate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "terraform": {
            "name": "terraform",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]",
                    "Optional[Union[str, Any]]",
                    "typing.Any",
                    "list",
                    "None",
                    "list[]"
                ],
                "arguments": [
                    "str",
                    "tuple[str]",
                    "bool",
                    "list[str]",
                    "list[]",
                    "Tuple[str]",
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "list"
                ],
                "with_vars": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]",
                    "Optional[Union[str, Any]]",
                    "typing.Any",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/notify.py": {
        "notify": {
            "name": "notify",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "slack": {
            "name": "slack",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "success": {
            "name": "success",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "webhook": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "commit": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "deploy_failure_notifier": {
            "name": "deploy_failure_notifier",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "webhook": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "repo": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "git": {
            "name": "git",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "deploy_github_notifier": {
            "name": "deploy_github_notifier",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "repo": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "deploy_bitbucket_notifier": {
            "name": "deploy_bitbucket_notifier",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "repo": [
                    "str"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/root.py": {
        "root": {
            "name": "root",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_generate_new_project": {
            "name": "_generate_new_project",
            "location": 27,
            "return": [
                "None",
                "set",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_get_immediate_subdirs": {
            "name": "_get_immediate_subdirs",
            "location": 56,
            "return": [
                "list[]",
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/commands/service.py": {
        "service": {
            "name": "service",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "tuple[typing.Union[str,str,str,str,str,str,str,str]]",
                    "str",
                    "Tuple[str]",
                    "Callable",
                    "int",
                    "type",
                    "Union[str, zgoubidoo.commands.Command]"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "tag": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "Tuple[str]",
                    "str",
                    "tuple[typing.Union[str,str,str,str,str,str,str,str,str]]",
                    "List[str]",
                    "list[str]"
                ],
                "tag": [
                    "Tuple[str]",
                    "str",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ci": {
            "name": "ci",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "tag": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "make": {
            "name": "make",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "robot_server.service.session.command_execution.Command",
                    "click.Command"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "service_type": [
                    "str",
                    "Optional[BaseException]",
                    "int",
                    "BaseException",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "subdomain": [
                    "str",
                    "Optional[BaseException]",
                    "int",
                    "BaseException",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "title": [
                    "str",
                    "Optional[BaseException]",
                    "int",
                    "BaseException",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "has_changed": {
            "name": "has_changed",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "current_branch": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "service": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "images": {
            "name": "images",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "tuple[str]",
                    "Tuple[str]",
                    "int"
                ],
                "branch": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "commit": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "push": {
            "name": "push",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "branch": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "commit": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "kubails-master/kubails/commands/__init__.py": {},
    "kubails-master/kubails/external_services/dependency_checker.py": {
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "check_dependencies_for_function": {
            "name": "check_dependencies_for_function",
            "location": 46,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "_get_missing_dependencies": {
            "name": "_get_missing_dependencies",
            "location": 69,
            "return": [
                "list[typing.Text]",
                "bool",
                "int",
                "Optional[dict]",
                "list",
                "Optional[T]",
                "Sequence[Any]"
            ],
            "arguments": {}
        },
        "_get_method_dependencies": {
            "name": "_get_method_dependencies",
            "location": 74,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Union[Dict, List, str]",
                    "dict[, ]",
                    "list[]"
                ],
                "func": [
                    "str"
                ],
                "dependencies_whitelist": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "check_dependencies.decorator": {
            "name": "decorator",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "check_dependencies_for_function.decorator": {
            "name": "decorator",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "check_dependencies_for_function.decorator.wrapper": {
            "name": "wrapper",
            "location": 49,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/external_services/docker.py": {
        "Docker.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Docker.build": {
            "name": "build",
            "location": 14,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "list",
                    "list[]",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "List[float]",
                    "list[float]"
                ],
                "tags": [
                    "list[]",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "List[int]",
                    "Optional[bool]"
                ],
                "target_stage": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "List[Dict[str, Any]]",
                    "typing.Any",
                    "Optional[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "cache_images": [
                    "list[]",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "List[int]",
                    "Optional[bool]"
                ],
                "branch": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "bytes",
                    "list[str]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Docker.pull": {
            "name": "pull",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "bool",
                    "bytes",
                    "list[]",
                    "list",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "Docker.push": {
            "name": "push",
            "location": 65,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "bool",
                    "list[]",
                    "torch.nn.utils.rnn.PackedSequence",
                    "list",
                    "int"
                ]
            }
        },
        "Docker._pull_from_images": {
            "name": "_pull_from_images",
            "location": 69,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/docker_compose.py": {
        "yaml_represent_none": {
            "name": "yaml_represent_none",
            "location": 15,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DockerCompose.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "dict"
                ],
                "compose_folder": [
                    "str"
                ]
            }
        },
        "DockerCompose.up": {
            "name": "up",
            "location": 27,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str",
                    "int",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "DockerCompose.down": {
            "name": "down",
            "location": 31,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerCompose.add_service_config": {
            "name": "add_service_config",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_service_config": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "DockerCompose.add_volume_config": {
            "name": "add_volume_config",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_volume": [
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "DockerCompose._read_config": {
            "name": "_read_config",
            "location": 58,
            "return": [
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerCompose._write_config": {
            "name": "_write_config",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DockerCompose._fix_conflicting_ports": {
            "name": "_fix_conflicting_ports",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services_config": [
                    "str"
                ],
                "new_service_config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "DockerCompose._get_all_service_ports": {
            "name": "_get_all_service_ports",
            "location": 100,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "services_config": [
                    "Dict[str, Any]",
                    "bytes",
                    "Callable"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/gcloud.py": {
        "GoogleCloud.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "project_region": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "None",
                    "dict",
                    "Optional[Dict]"
                ],
                "project_zone": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "None",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "GoogleCloud.set_project": {
            "name": "set_project",
            "location": 30,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.deploy_builder_image": {
            "name": "deploy_builder_image",
            "location": 36,
            "return": [
                "List[str]",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.delete_builder_image": {
            "name": "delete_builder_image",
            "location": 67,
            "return": [
                "str",
                "Type[Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.create_service_account": {
            "name": "create_service_account",
            "location": 80,
            "return": [
                "float",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "project_title": [
                    "str",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "GoogleCloud.delete_service_account": {
            "name": "delete_service_account",
            "location": 93,
            "return": [
                "float",
                "str",
                "bool",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "Match[str]",
                    "typing.Match"
                ]
            }
        },
        "GoogleCloud.create_key_for_service_account": {
            "name": "create_key_for_service_account",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "bytes",
                    "logging.Logger"
                ],
                "key_folder": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "GoogleCloud.delete_key_for_service_account": {
            "name": "delete_key_for_service_account",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "key_folder": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "GoogleCloud.enable_apis": {
            "name": "enable_apis",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "apis_to_enable": [
                    "int",
                    "str"
                ]
            }
        },
        "GoogleCloud.create_bucket": {
            "name": "create_bucket",
            "location": 173,
            "return": [
                "str",
                "list",
                "Callable[[None], None]",
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str"
                ]
            }
        },
        "GoogleCloud.delete_bucket": {
            "name": "delete_bucket",
            "location": 181,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str"
                ]
            }
        },
        "GoogleCloud.does_bucket_exist_in_project": {
            "name": "does_bucket_exist_in_project",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GoogleCloud.does_bucket_exist_in_another_project": {
            "name": "does_bucket_exist_in_another_project",
            "location": 198,
            "return": [
                "bool",
                "Optional[T]",
                "int",
                "Dict[str, Any]",
                "Optional[Mapping[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GoogleCloud.add_role_to_service_account": {
            "name": "add_role_to_service_account",
            "location": 204,
            "return": [
                "str",
                "Optional[\"Texte\"]"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "role": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "GoogleCloud.add_role_to_current_user": {
            "name": "add_role_to_current_user",
            "location": 212,
            "return": [
                "bool",
                "str",
                "Callable[[], T]"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "GoogleCloud.delete_role_from_service_account": {
            "name": "delete_role_from_service_account",
            "location": 220,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "int"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "GoogleCloud.add_role_to_entity": {
            "name": "add_role_to_entity",
            "location": 228,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "entity_type": [
                    "str"
                ],
                "entity": [
                    "str"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "GoogleCloud.delete_role_from_entity": {
            "name": "delete_role_from_entity",
            "location": 237,
            "return": [
                "str",
                "bool",
                "float",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "entity_type": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ],
                "entity": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ],
                "role": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GoogleCloud.authenticate_cluster": {
            "name": "authenticate_cluster",
            "location": 246,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.AbstractSet",
                    "AbstractSet[str]",
                    "None",
                    "torch.utils.data.DataLoader",
                    "Optional[str]"
                ]
            }
        },
        "GoogleCloud.kms_encrypt": {
            "name": "kms_encrypt",
            "location": 254,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[Union[Any, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str"
                ],
                "encrypted_file": [
                    "str"
                ],
                "keyring": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "GoogleCloud.kms_decrypt": {
            "name": "kms_decrypt",
            "location": 266,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[Union[Any, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "encrypted_file": [
                    "str"
                ],
                "decrypted_file": [
                    "str"
                ],
                "keyring": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "GoogleCloud.deploy_function": {
            "name": "deploy_function",
            "location": 278,
            "return": [
                "Union"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[Set[str]]",
                    "set[str]"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[Set[str]]",
                    "set[str]"
                ],
                "entrypoint": [
                    "str",
                    "None",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "trigger": [
                    "typing.Text",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "env_vars": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "GoogleCloud.get_current_user_email": {
            "name": "get_current_user_email",
            "location": 307,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.get_project_number": {
            "name": "get_project_number",
            "location": 311,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.get_cloud_build_service_account": {
            "name": "get_cloud_build_service_account",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloud.get_last_built_tag_for_service": {
            "name": "get_last_built_tag_for_service",
            "location": 319,
            "return": [
                "typing.Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ],
                "service_name": [
                    "str"
                ]
            }
        },
        "GoogleCloud.cache_in_cloud_build": {
            "name": "cache_in_cloud_build",
            "location": 342,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "dict[str, typing.Any]",
                "Dict[str, Any]",
                "list[str]",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "callback": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "typing.Sequence[dict[str, str]]"
                ]
            }
        },
        "GoogleCloud.format_gcr_image": {
            "name": "format_gcr_image",
            "location": 365,
            "return": [
                "str",
                "int",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "bytes"
                ],
                "base_image": [
                    "str",
                    "bytes"
                ],
                "tag": [
                    "typing.Text",
                    "str",
                    "MutableSequence[str]"
                ]
            }
        },
        "GoogleCloud._format_full_service_account": {
            "name": "_format_full_service_account",
            "location": 373,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str"
                ]
            }
        },
        "GoogleCloud._format_service_account_key": {
            "name": "_format_service_account_key",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service_account": [
                    "str",
                    "int"
                ],
                "key_folder": [
                    "str",
                    "int"
                ]
            }
        },
        "GoogleCloud.enable_apis.log_and_call_api_command": {
            "name": "log_and_call_api_command",
            "location": 164,
            "return": [
                "\"Pipeline\"",
                "Union",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "acc": [
                    "bool",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "command": [
                    "List[str]",
                    "str",
                    "MutableMapping[str, Any]",
                    "Mapping[str, Any]",
                    "Tuple[str]",
                    "logging.LogRecord",
                    "int"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/git.py": {
        "Git.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.fetch": {
            "name": "fetch",
            "location": 13,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]"
                ],
                "prune": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ],
                "unshallow": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Git.get_remote_branches": {
            "name": "get_remote_branches",
            "location": 24,
            "return": [
                "list[]",
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.folder_changed": {
            "name": "folder_changed",
            "location": 33,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "bool"
                ],
                "current_branch": [
                    "typing.IO",
                    "typing.Iterable[cmk.utils.type_defs.SectionName]",
                    "IO[str]",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "List[str]",
                    "Union[List, Dict]",
                    "dict"
                ],
                "since_commit": [
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "Git.get_commit_timestamp": {
            "name": "get_commit_timestamp",
            "location": 47,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "commit_sha": [
                    "str",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/helm.py": {
        "Helm.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "helm_folder": [
                    "str"
                ],
                "base_values_file": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Helm.template": {
            "name": "template",
            "location": 21,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "value_files": [
                    "list[]",
                    "List[str]",
                    "str",
                    "List[List[str]]",
                    "bool",
                    "Sequence[int]"
                ],
                "template_files": [
                    "list[]",
                    "List[str]",
                    "str",
                    "List[List[str]]",
                    "bool",
                    "Sequence[int]"
                ],
                "string_vars": [
                    "list[]",
                    "List[str]",
                    "str",
                    "List[List[str]]",
                    "bool",
                    "Sequence[int]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/kubectl.py": {
        "Kubectl.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kubectl.deploy": {
            "name": "deploy",
            "location": 14,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "manifest_location": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Type",
                    "typing.Type",
                    "IO[str]",
                    "typing.IO"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Kubectl.create_cluster_role_binding": {
            "name": "create_cluster_role_binding",
            "location": 24,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[Union[Any, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "role": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "user": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Kubectl.get_namespaces": {
            "name": "get_namespaces",
            "location": 33,
            "return": [
                "list[]",
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "list[]",
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "Kubectl.create_namespace": {
            "name": "create_namespace",
            "location": 45,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "list",
                "set"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "label": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "Kubectl.delete_namespace": {
            "name": "delete_namespace",
            "location": 57,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "Kubectl.create_secret_from_file": {
            "name": "create_secret_from_file",
            "location": 65,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "secret_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "namespace": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "secret_type": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "is_env_file": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Kubectl.delete_secret": {
            "name": "delete_secret",
            "location": 79,
            "return": [
                "str",
                "Iterable[str]",
                "Callable[[None], None]",
                "int",
                "Optional[Union[Any, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "namespace": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Kubectl.is_deployment_ready": {
            "name": "is_deployment_ready",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "deployment": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "namespace": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/slack.py": {
        "Slack.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slack.send_message": {
            "name": "send_message",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "webhook": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "title": [],
                "fields": [],
                "color": []
            }
        }
    },
    "kubails-master/kubails/external_services/terraform.py": {
        "Terraform.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "dict[, ]",
                    "Callable[[Any, Any], Any]",
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "list"
                ],
                "root_folder": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Terraform.init": {
            "name": "init",
            "location": 21,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.deploy": {
            "name": "deploy",
            "location": 30,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.destroy": {
            "name": "destroy",
            "location": 37,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.destroy_cluster": {
            "name": "destroy_cluster",
            "location": 50,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.cluster_deployed": {
            "name": "cluster_deployed",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_cluster_name": {
            "name": "get_cluster_name",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_public_ip": {
            "name": "get_public_ip",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_name_servers": {
            "name": "get_name_servers",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_kms_key_name": {
            "name": "get_kms_key_name",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_kms_key_ring_name": {
            "name": "get_kms_key_ring_name",
            "location": 72,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_state": {
            "name": "get_state",
            "location": 75,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terraform.get_output": {
            "name": "get_output",
            "location": 79,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "Terraform.run_command": {
            "name": "run_command",
            "location": 93,
            "return": [
                "bool",
                "Awaitable",
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "subcommand": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "arguments": [
                    "list[]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "with_vars": [
                    "bool",
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "Union[str]",
                    "MutableMapping",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Terraform._run_terraform_command": {
            "name": "_run_terraform_command",
            "location": 99,
            "return": [
                "str",
                "dict[int, list[str]]",
                "list[]",
                "int",
                "list[str]",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Optional[str]",
                    "str",
                    "Sequence[Tuple[str, str]]",
                    "None",
                    "Tuple[int, int]",
                    "typing.Sequence[tuple[typing.Union[str,str]]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "call_function": [
                    "Optional[str]",
                    "Sequence[Tuple[str, str]]",
                    "Tuple[int, int]"
                ],
                "env_vars": [
                    "Optional[str]",
                    "None",
                    "Sequence[Tuple[str, str]]",
                    "str",
                    "Tuple[int, int]",
                    "typing.Sequence[tuple[typing.Union[str,str]]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Terraform._convert_config_to_var_options": {
            "name": "_convert_config_to_var_options",
            "location": 137,
            "return": [
                "dict[str, ]",
                "Set[str]",
                "Dict[str, str]",
                "List[Match]",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, bool]",
                    "dict",
                    "Union[str, dict]",
                    "Dict[str, bool]",
                    "Mapping"
                ]
            }
        },
        "Terraform._stringify_value": {
            "name": "_stringify_value",
            "location": 156,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "Union[dict, List[Any]]",
                    "str",
                    "list[typing.Any]",
                    "bytes",
                    "dict",
                    "Union[Dict, List, str]",
                    "T"
                ],
                "top_level": [
                    "bool",
                    "str"
                ]
            }
        },
        "Terraform._stringify_dict": {
            "name": "_stringify_dict",
            "location": 196,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "dict_to_convert": [
                    "str",
                    "int"
                ]
            }
        },
        "Terraform._stringify_list": {
            "name": "_stringify_list",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "list_to_convert": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type",
                    "Mapping[Any, Any]",
                    "typing.Mapping",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "List[str]",
                    "None",
                    "Dict[str, Tuple[int, int]]",
                    "list[str]",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/test_dependency_checker.py": {
        "MockClass.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClass.mock_method": {
            "name": "mock_method",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClass.mock_method_with_private_calls": {
            "name": "mock_method_with_private_calls",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClass.mock_method_with_nested_private_calls": {
            "name": "mock_method_with_nested_private_calls",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClass._mock_private_method": {
            "name": "_mock_private_method",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClass._mock_private_method_with_private_method": {
            "name": "_mock_private_method_with_private_method",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraform.test_can_get_method_dependencies": {
            "name": "test_can_get_method_dependencies",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "whitelist": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "expected_result": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/test_docker_compose.py": {
        "TestDockerCompose.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDockerCompose.test_can_fix_conflicting_ports": {
            "name": "test_can_fix_conflicting_ports",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "services_config": [],
                "new_service_config": [
                    "Callable[[list], None]",
                    "typing.Callable[list[], None]"
                ],
                "fixed_service_config": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        }
    },
    "kubails-master/kubails/external_services/test_terraform.py": {
        "TestTerraform.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraform.test_can_stringify_value": {
            "name": "test_can_stringify_value",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input_value": [
                    "str"
                ],
                "expected_string": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestTerraform.test_can_not_stringify_value": {
            "name": "test_can_not_stringify_value",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubails-master/kubails/external_services/__init__.py": {},
    "kubails-master/kubails/resources/__init__.py": {},
    "kubails-master/kubails/resources/builder/setup.py": {},
    "kubails-master/kubails/resources/templates/config_generators.py": {
        "ConfigGenerator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "config_store": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "extra_config": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "has_database_volume": [
                    "bool",
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "has_deps_volume": [
                    "bool",
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "is_service": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "Optional[List]",
                    "Optional[str]"
                ]
            }
        },
        "ConfigGenerator.generate_kubails_config": {
            "name": "generate_kubails_config",
            "location": 33,
            "return": [
                "dict[, ]",
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGenerator.generate_compose_config": {
            "name": "generate_compose_config",
            "location": 36,
            "return": [
                "dict[, ]",
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGenerator.has_compose_database_volume": {
            "name": "has_compose_database_volume",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGenerator.has_compose_deps_volume": {
            "name": "has_compose_deps_volume",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGenerator.is_external_service": {
            "name": "is_external_service",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseBackupGenerator.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "config_store": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "extra_config": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ]
            }
        },
        "DatabaseBackupGenerator.generate_kubails_config": {
            "name": "generate_kubails_config",
            "location": 68,
            "return": [
                "dict[typing.Union[str,list[str],dict[str, list[str]]], dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Text]],typing.Text,None,list[typing.Text]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseBackupGenerator.generate_compose_config": {
            "name": "generate_compose_config",
            "location": 104,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressConfigGenerator.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "config_store": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "extra_config": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ]
            }
        },
        "ExpressConfigGenerator.generate_kubails_config": {
            "name": "generate_kubails_config",
            "location": 120,
            "return": [
                "dict[typing.Union[str,set[str],typing.Pattern,tuple[str],list[str]], dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Text]],None,bool,dict[typing.Text, typing.Text],list[typing.Text]]]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressConfigGenerator.generate_compose_config": {
            "name": "generate_compose_config",
            "location": 168,
            "return": [
                "str",
                "dict[typing.Union[str,dict[str, str]], dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],list[str]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskConfigGenerator.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "config_store": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "extra_config": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ]
            }
        },
        "FlaskConfigGenerator.generate_kubails_config": {
            "name": "generate_kubails_config",
            "location": 228,
            "return": [
                "dict[typing.Union[dict[str, typing.Union[str,None]],str,dict[str, dict[str, str]],dict[str, dict[str, typing.Any]]], dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]",
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskConfigGenerator.generate_compose_config": {
            "name": "generate_compose_config",
            "location": 244,
            "return": [
                "dict[typing.Union[str,list[str]], dict[typing.Text, typing.Union[str,dict[typing.Text, typing.Text],list[typing.Text]]]]",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactConfigGenerator.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "config_store": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ],
                "extra_config": [
                    "str",
                    "kubails.services.config_store.ConfigStore"
                ]
            }
        },
        "ReactConfigGenerator.generate_kubails_config": {
            "name": "generate_kubails_config",
            "location": 275,
            "return": [
                "dict[typing.Union[dict[str, typing.Union[str,None]],str,dict[str, dict[str, str]],dict[str, dict[str, typing.Any]]], dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Text]],list[typing.Text]]]]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactConfigGenerator.generate_compose_config": {
            "name": "generate_compose_config",
            "location": 297,
            "return": [
                "dict[str, dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[str,dict[typing.Text, typing.Text]]],str,list[typing.Text]]]]",
                "bool",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubails-master/kubails/resources/templates/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/gunicorn.conf.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/config.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/main.py": {
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        },
        "server_error": {
            "name": "server_error",
            "location": 43,
            "return": [
                "tuple[typing.Union[int,typing.Final,dict[str, str]]]",
                "bytes",
                "dict",
                "str",
                "Sequence"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "int",
                    "float",
                    "str",
                    "logging.Logger",
                    "None",
                    "Union[str, int]",
                    "Optional[\"GraphLogger\"]"
                ]
            }
        }
    },
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/tasks.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/test_dummy.py": {
        "TestDummy.test_dummy": {
            "name": "test_dummy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/worker.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/controllers/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/controllers/api/api_controller.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/controllers/api/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/controllers/api/v1/v1_controller.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/controllers/api/v1/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/models/__init__.py": {},
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/utils/LoggingUtils.py": {
        "log_execution_time": {
            "name": "log_execution_time",
            "location": 9,
            "return": [
                "bytes",
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "IO",
                "bool"
            ],
            "arguments": {
                "log_message": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "log_execution_time.decorator": {
            "name": "decorator",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function_being_decorated": [
                    "Callable",
                    "bool",
                    "Optional['Node']",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "log_execution_time.decorator.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/utils/NestableBlueprint.py": {
        "NestableBlueprint.register_blueprint": {
            "name": "register_blueprint",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "NestableBlueprint.before_first_blueprint_request": {
            "name": "before_first_blueprint_request",
            "location": 33,
            "return": [
                "Set[str]",
                "Optional[List[str]]",
                "str",
                "Union[int, float]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestableBlueprint.reset_first_request_lock": {
            "name": "reset_first_request_lock",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestableBlueprint.register_blueprint.deferred": {
            "name": "deferred",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bool"
                ]
            }
        },
        "NestableBlueprint.before_first_blueprint_request.decorator": {
            "name": "decorator",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function_being_decorated": [
                    "Callable",
                    "bool",
                    "Optional['Node']",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "NestableBlueprint.before_first_blueprint_request.decorator.wrapper": {
            "name": "wrapper",
            "location": 44,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/resources/templates/backend-flask/{{cookiecutter.name}}/src/utils/__init__.py": {},
    "kubails-master/kubails/services/cluster.py": {
        "Cluster.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.authenticate": {
            "name": "authenticate",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.deploy": {
            "name": "deploy",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.destroy": {
            "name": "destroy",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.destroy_ingress": {
            "name": "destroy_ingress",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.update_manifests_from_terraform": {
            "name": "update_manifests_from_terraform",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.generate_manifests": {
            "name": "generate_manifests",
            "location": 81,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str",
                    "int"
                ],
                "tag": [
                    "typing.Text",
                    "str",
                    "Tuple[Dict[str, Any], Any]"
                ],
                "namespace": [
                    "typing.Text",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Cluster.deploy_manifests": {
            "name": "deploy_manifests",
            "location": 125,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "namespace": [
                    "typing.Text",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "Cluster.deploy_secrets": {
            "name": "deploy_secrets",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "namespace": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Cluster.create_secret": {
            "name": "create_secret",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ],
                "service": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "secret_name": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Cluster.is_new_namespace": {
            "name": "is_new_namespace",
            "location": 201,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "Cluster._deploy_storage_classes": {
            "name": "_deploy_storage_classes",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster._deploy_ingress_controller": {
            "name": "_deploy_ingress_controller",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster._deploy_cert_manager": {
            "name": "_deploy_cert_manager",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster._deploy_certificate_reflector": {
            "name": "_deploy_certificate_reflector",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster._cleanup_manifests": {
            "name": "_cleanup_manifests",
            "location": 270,
            "return": [
                "bool",
                "dict[, ]",
                "Optional[Union[str, Any]]",
                "list[list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.is_new_namespace.callback": {
            "name": "callback",
            "location": 202,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/services/config_store.py": {
        "ConfigStore": {
            "name": "ConfigStore",
            "location": 317,
            "return": [
                "_ConfigStore",
                "Sequence",
                "Dict[str, str]"
            ],
            "arguments": {
                "reset_instance": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "filter_dict": {
            "name": "filter_dict",
            "location": 324,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "keys": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_ConfigStore.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ],
                "config_file_name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "_ConfigStore.get_config": {
            "name": "get_config",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStore.get_flattened_config": {
            "name": "get_flattened_config",
            "location": 46,
            "return": [
                "dict[, list[]]",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStore.update_config": {
            "name": "update_config",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_ConfigStore.get_value": {
            "name": "get_value",
            "location": 79,
            "return": [
                "None",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key_path": [
                    "str"
                ]
            }
        },
        "_ConfigStore.set_value": {
            "name": "set_value",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_path": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_ConfigStore.get_project_path": {
            "name": "get_project_path",
            "location": 118,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sub_path": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_ConfigStore.get_service_folder": {
            "name": "get_service_folder",
            "location": 121,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ]
            }
        },
        "_ConfigStore.get_changed_services": {
            "name": "get_changed_services",
            "location": 124,
            "return": [
                "Optional[Any]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_branch": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "_ConfigStore.use_changed_services": {
            "name": "use_changed_services",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_branch": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_ConfigStore.is_changed_service": {
            "name": "is_changed_service",
            "location": 139,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "current_branch": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_ConfigStore._search_for_file_dir": {
            "name": "_search_for_file_dir",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "_ConfigStore._open_config": {
            "name": "_open_config",
            "location": 165,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStore._write_config": {
            "name": "_write_config",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStore._parse_config": {
            "name": "_parse_config",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "_ConfigStore._flatten_config_recursive": {
            "name": "_flatten_config_recursive",
            "location": 239,
            "return": [
                "dict[tuple[str], typing.Union[tuple[typing.Union[str,int]],tuple[typing.Optional[str]]]]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Type[MutableMapping]",
                    "typing.Type"
                ],
                "parent_key": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "_ConfigStore._parse_services_with_code": {
            "name": "_parse_services_with_code",
            "location": 255,
            "return": [
                "dict",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "_ConfigStore._parse_services_with_secrets": {
            "name": "_parse_services_with_secrets",
            "location": 261,
            "return": [
                "dict[, ]",
                "dict",
                "None",
                "List[dict]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Mapping[Any, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "_ConfigStore._get_service_names_with_changes": {
            "name": "_get_service_names_with_changes",
            "location": 267,
            "return": [
                "list[]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_branch": [
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "_ConfigStore.get_changed_services.callback": {
            "name": "callback",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/services/infra.py": {
        "Infra.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.setup": {
            "name": "setup",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.cleanup": {
            "name": "cleanup",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.authenticate": {
            "name": "authenticate",
            "location": 89,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "list[]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, list[str]]",
                "dict[, ]",
                "str",
                "dict[str, typing.Union[int,str]]",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.unauthenticate": {
            "name": "unauthenticate",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.deploy": {
            "name": "deploy",
            "location": 106,
            "return": [
                "bool",
                "int",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.deploy_builder": {
            "name": "deploy_builder",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.destroy": {
            "name": "destroy",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infra.terraform_command": {
            "name": "terraform_command",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "arguments": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "with_vars": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "Infra.get_name_servers": {
            "name": "get_name_servers",
            "location": 124,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubails-master/kubails/services/kube_git_syncer.py": {
        "_get_unused_namespaces": {
            "name": "_get_unused_namespaces",
            "location": 49,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "remote_branches": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "existing_namespaces": [
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "KubeGitSyncer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubeGitSyncer.cleanup_namespaces": {
            "name": "cleanup_namespaces",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubeGitSyncer.cleanup_namespaces.cleanup_namespace": {
            "name": "cleanup_namespace",
            "location": 28,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "List['Node']"
                ]
            }
        }
    },
    "kubails-master/kubails/services/manifest_manager.py": {
        "ManifestManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manifests_folder": [
                    "int",
                    "typing.Text"
                ],
                "static_folder": [
                    "typing.Text",
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ],
                "generated_folder": [
                    "typing.Text",
                    "bool",
                    "int"
                ]
            }
        },
        "ManifestManager.load_static_manifest": {
            "name": "load_static_manifest",
            "location": 16,
            "return": [
                "dict",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "manifest_location": [
                    "str",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "ManifestManager.load_manifest": {
            "name": "load_manifest",
            "location": 19,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "manifest_location": [
                    "str",
                    "int"
                ]
            }
        },
        "ManifestManager.write_static_manifest": {
            "name": "write_static_manifest",
            "location": 27,
            "return": [
                "float",
                "str",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "str",
                    "list[T]",
                    "List[T]",
                    "T"
                ],
                "manifest_location": [
                    "str",
                    "list[T]",
                    "List[T]",
                    "T"
                ]
            }
        },
        "ManifestManager.write_manifest": {
            "name": "write_manifest",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "int",
                    "typing.Mapping",
                    "str",
                    "Mapping",
                    "None",
                    "Optional[int]",
                    "typing.DefaultDict",
                    "defaultdict",
                    "bool"
                ],
                "manifest_location": [
                    "str"
                ]
            }
        },
        "ManifestManager.static_manifest_location": {
            "name": "static_manifest_location",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "manifest_location": [
                    "str"
                ]
            }
        },
        "ManifestManager.generated_manifest_location": {
            "name": "generated_manifest_location",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "manifest_location": [
                    "str"
                ]
            }
        },
        "IgnoreAliasesDumper.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "kubails-master/kubails/services/notify.py": {
        "Notify.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.deploy_slack_failure_notifier": {
            "name": "deploy_slack_failure_notifier",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slack_webhook": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "repo_name": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "Sequence[str]",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Notify.deploy_github_notifier": {
            "name": "deploy_github_notifier",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "repo_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Notify.deploy_bitbucket_notifier": {
            "name": "deploy_bitbucket_notifier",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "repo_name": [
                    "str",
                    "None"
                ]
            }
        },
        "Notify.send_slack_success_message": {
            "name": "send_slack_success_message",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "webhook": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "namespace": [
                    "typing.Text",
                    "str",
                    "List[Dict]"
                ],
                "commit": [
                    "typing.Text",
                    "str",
                    "int",
                    "logging.LogRecord"
                ]
            }
        },
        "Notify._deploy_notifier": {
            "name": "_deploy_notifier",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notifier_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "notifier_entrypoint": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "env_vars": [
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "repo_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "kubails-master/kubails/services/service.py": {
        "Service.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.start": {
            "name": "start",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "BaseException"
                ]
            }
        },
        "Service.destroy": {
            "name": "destroy",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.lint": {
            "name": "lint",
            "location": 69,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "Service.test": {
            "name": "test",
            "location": 72,
            "return": [
                "str",
                "Optional[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "tag": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "Service.ci": {
            "name": "ci",
            "location": 75,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "Service.make": {
            "name": "make",
            "location": 78,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Service.build": {
            "name": "build",
            "location": 82,
            "return": [
                "List[str]",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "Dict[str, List[Any]]",
                    "None",
                    "Optional[Union[int, str]]",
                    "dict[str, list[typing.Any]]"
                ],
                "branch_tag": [
                    "str",
                    "None",
                    "list",
                    "int",
                    "List[str]",
                    "list[]",
                    "list[str]"
                ],
                "commit_tag": [
                    "str",
                    "None",
                    "list",
                    "int",
                    "List[str]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "Service.push": {
            "name": "push",
            "location": 124,
            "return": [
                "int",
                "str",
                "Callable",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "branch_tag": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "list[str]"
                ],
                "commit_tag": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Service.generate": {
            "name": "generate",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "title": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ],
                "subdomain": [
                    "str",
                    "bool"
                ],
                "extra_config": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Service._run_services_make_command": {
            "name": "_run_services_make_command",
            "location": 174,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping"
                ],
                "services": [
                    "list[]",
                    "str",
                    "List[str]"
                ],
                "tag": [
                    "typing.Text",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "Service._apply_to_services": {
            "name": "_apply_to_services",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]"
                ],
                "services": [
                    "list[]",
                    "bool",
                    "Type['Model']",
                    "Dict[str, str]"
                ]
            }
        },
        "Service._get_service_path": {
            "name": "_get_service_path",
            "location": 209,
            "return": [
                "str",
                "Optional[List]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Service._get_base_images": {
            "name": "_get_base_images",
            "location": 213,
            "return": [
                "str",
                "float",
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "None",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Optional[dict]"
                ]
            }
        },
        "Service._get_fixed_tag": {
            "name": "_get_fixed_tag",
            "location": 229,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "Exception",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Service._generate_tagged_images": {
            "name": "_generate_tagged_images",
            "location": 232,
            "return": [
                "int",
                "str",
                "Optional[List[str]]",
                "tuple",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "base_image": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Container",
                    "typing.Container",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "branch_tag": [
                    "str",
                    "typing.Text"
                ],
                "commit_tag": [
                    "str",
                    "typing.Text"
                ],
                "fixed_tag": [
                    "str",
                    "None"
                ]
            }
        },
        "Service._template_service": {
            "name": "_template_service",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_type": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Service._add_service_to_kubails_config": {
            "name": "_add_service_to_kubails_config",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_generator": [
                    "str"
                ],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "NamedTuple",
                    "typing.NamedTuple",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "subdomain": [
                    "str"
                ]
            }
        },
        "Service._add_service_to_compose_config": {
            "name": "_add_service_to_compose_config",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_generator": [
                    "str",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Service._update_wildcard_certificate": {
            "name": "_update_wildcard_certificate",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.build.build_function": {
            "name": "build_function",
            "location": 85,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "service": [
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Service.push.push_function": {
            "name": "push_function",
            "location": 127,
            "return": [
                "bool",
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "List[str]",
                "str"
            ],
            "arguments": {
                "service": [
                    "dict",
                    "Type",
                    "OrderedDict",
                    "Union[int, slice]"
                ]
            }
        },
        "Service._run_services_make_command.function": {
            "name": "function",
            "location": 177,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "service": [
                    "Optional[str]",
                    "Callable[..., None]",
                    "float"
                ]
            }
        }
    },
    "kubails-master/kubails/services/templater.py": {
        "Templater.template_primary": {
            "name": "template_primary",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Templater.template_service": {
            "name": "template_service",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "service_type": [
                    "str",
                    "bool"
                ],
                "title": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "output_dir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kubails-master/kubails/services/test_config_store.py": {
        "TestConfigStore.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigStore.test_flatten_config": {
            "name": "test_flatten_config",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ],
                "expected_flattened_config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "kubails-master/kubails/services/test_kube_git_syncer.py": {
        "TestKubeGitSyncer.test_can_get_unused_namespaces": {
            "name": "test_can_get_unused_namespaces",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_branches": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "bool"
                ],
                "existing_namespaces": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "bool"
                ],
                "expected": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "kubails-master/kubails/services/__init__.py": {},
    "kubails-master/kubails/utils/command_helpers.py": {
        "log_command_args_factory": {
            "name": "log_command_args_factory",
            "location": 5,
            "return": [
                "int",
                "str",
                "Optional[bytearray]"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "message": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "log_command_args_factory.decorator": {
            "name": "decorator",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "log_command_args_factory.decorator.wrapper": {
            "name": "wrapper",
            "location": 9,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/utils/helpers_test.py": {
        "CustomTestCase.assert_result_ok": {
            "name": "assert_result_ok",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[]",
                    "list",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "CustomTestCase.assert_result_bad": {
            "name": "assert_result_bad",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[]",
                    "list",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "kubails-master/kubails/utils/logger.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 12,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "kubails-master/kubails/utils/service_helpers.py": {
        "get_command_output": {
            "name": "get_command_output",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ],
                "shell": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "stderr_redirect": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "call_command": {
            "name": "call_command",
            "location": 77,
            "return": [
                "bool",
                "str",
                "Callable",
                "bytes",
                "Iterator[int]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "shell": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "log_command": {
            "name": "log_command",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "Awaitable[bool]"
                ]
            }
        },
        "escape_value": {
            "name": "escape_value",
            "location": 99,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "float",
                "str",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "sanitize_name": {
            "name": "sanitize_name",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "branch_name": [
                    "str",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_codebase_folder": {
            "name": "get_codebase_folder",
            "location": 122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_codebase_subfolder": {
            "name": "get_codebase_subfolder",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "get_resources_subfolder": {
            "name": "get_resources_subfolder",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "_format_command": {
            "name": "_format_command",
            "location": 135,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "shell": [
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "kubails-master/kubails/utils/test_service_helpers.py": {
        "TestServiceHelpers.test_can_sanitize_name": {
            "name": "test_can_sanitize_name",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "expected": [
                    "list",
                    "list[]",
                    "int",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "kubails-master/kubails/utils/__init__.py": {}
}
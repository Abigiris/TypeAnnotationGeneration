{
    "kuyruk-master/setup.py": {
        "read": {
            "name": "read",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "kuyruk-master/sitecustomize.py": {},
    "kuyruk-master/test_config_docker.py": {},
    "kuyruk-master/test_config_github_actions.py": {},
    "kuyruk-master/docs/conf.py": {},
    "kuyruk-master/docs/_themes/flask_theme_support.py": {},
    "kuyruk-master/example/send_task.py": {},
    "kuyruk-master/example/tasks.py": {
        "echo": {
            "name": "echo",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/config.py": {
        "Config.from_object": {
            "name": "from_object",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "IO[str]",
                    "typing.IO",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Config.from_dict": {
            "name": "from_dict",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Config.from_pymodule": {
            "name": "from_pymodule",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.from_pyfile": {
            "name": "from_pyfile",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_env_vars": {
            "name": "from_env_vars",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._setattr": {
            "name": "_setattr",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/exceptions.py": {
        "RemoteException.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "builtins.type"
                ],
                "value": [
                    "Exception"
                ],
                "traceback": [
                    "types.TracebackType"
                ]
            }
        },
        "RemoteException.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kuyruk-master/kuyruk/heartbeat.py": {
        "Heartbeat.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "on_error": [
                    "Callable[([Exception], None)]"
                ]
            }
        },
        "Heartbeat.start": {
            "name": "start",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.stop": {
            "name": "stop",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat._run": {
            "name": "_run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kuyruk-master/kuyruk/importer.py": {
        "import_module": {
            "name": "import_module",
            "location": 13,
            "return": [
                "module"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "import_object": {
            "name": "import_object",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "import_object_str": {
            "name": "import_object_str",
            "location": 35,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main_module_name": {
            "name": "main_module_name",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "kuyruk-master/kuyruk/kuyruk.py": {
        "Kuyruk.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "dict",
                    "dict[, ]",
                    "kuyruk.config.Config",
                    "cbc_casper_simulator.simulator.config.Config",
                    "homeassistancore.Config"
                ]
            }
        },
        "Kuyruk.task": {
            "name": "task",
            "location": 37,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "typing.Text",
                    "bool",
                    "Awaitable[Any]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "Kuyruk.channel": {
            "name": "channel",
            "location": 56,
            "return": [
                "typing.Iterator[amqp.Channel]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kuyruk.connection": {
            "name": "connection",
            "location": 65,
            "return": [
                "typing.Iterator[amqp.Connection]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kuyruk.send_tasks_to_queue": {
            "name": "send_tasks_to_queue",
            "location": 89,
            "return": [
                "None",
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "subtasks": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Kuyruk.task.wrapper": {
            "name": "wrapper",
            "location": 50,
            "return": [
                "Task",
                "bool",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/result.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Result.process_message": {
            "name": "process_message",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Union[BinaryIO, str]",
                    "typing.BinaryIO",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Result.wait": {
            "name": "wait",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/signals.py": {},
    "kuyruk-master/kuyruk/task.py": {
        "time_limit": {
            "name": "time_limit",
            "location": 214,
            "return": [
                "typing.Generator[]",
                "dict",
                "None",
                "Iterable[Hashable]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "float",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "bool",
                    "str",
                    "Callable[[], bool]",
                    "typing.Callable[[], bool]"
                ],
                "kuyruk": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[List[str]]",
                    "list[list[str]]",
                    "int"
                ],
                "queue": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[List[str]]",
                    "list[list[str]]",
                    "int"
                ],
                "retry": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[List[str]]",
                    "str"
                ],
                "max_run_time": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.subtask": {
            "name": "subtask",
            "location": 66,
            "return": [
                "SubTask",
                "dict",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "tuple[]"
                ],
                "kwargs": [
                    "dict[, ]"
                ],
                "host": [
                    "None",
                    "tuple",
                    "tuple[]",
                    "bool",
                    "datetime.datetime",
                    "dict[, ]",
                    "Union",
                    "dict"
                ]
            }
        },
        "Task.send_to_queue": {
            "name": "send_to_queue",
            "location": 69,
            "return": [
                "None",
                "int",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "tuple[]"
                ],
                "kwargs": [
                    "dict[, ]"
                ],
                "host": [
                    "bool",
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "Callable"
                ],
                "wait_result": [
                    "int",
                    "None",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "set[str]"
                ],
                "message_ttl": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Task._queue_for_host": {
            "name": "_queue_for_host",
            "location": 132,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool"
                ]
            }
        },
        "Task._get_description": {
            "name": "_get_description",
            "location": 139,
            "return": [
                "dict[typing.Text, str]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "Task._send_signal": {
            "name": "_send_signal",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Task.apply": {
            "name": "apply",
            "location": 156,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.name": {
            "name": "name",
            "location": 197,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task._module_name": {
            "name": "_module_name",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "time_limit.signal_handler": {
            "name": "signal_handler",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Task.apply.send_signal": {
            "name": "send_signal",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "Tuple[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "args": []
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._consume_messages": {
            "name": "_consume_messages",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._main_loop": {
            "name": "_main_loop",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "Worker._consumer_tag": {
            "name": "_consumer_tag",
            "location": 151,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "int",
                    "float",
                    "List[int]",
                    "list[int]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Worker._declare_queues": {
            "name": "_declare_queues",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ch": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Worker._pause_or_resume": {
            "name": "_pause_or_resume",
            "location": 159,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Worker._consume_queues": {
            "name": "_consume_queues",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ch": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Worker._cancel_queues": {
            "name": "_cancel_queues",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ch": [
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "Worker._process_message": {
            "name": "_process_message",
            "location": 189,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "Exception",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Worker._process_description": {
            "name": "_process_description",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "description": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Worker._import_task": {
            "name": "_import_task",
            "location": 218,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]",
                "Optional[str]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "reminders.task.Task"
                ],
                "function": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "reminders.task.Task"
                ]
            }
        },
        "Worker._process_task": {
            "name": "_process_task",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "description": [
                    "argparse.Namespace",
                    "Task",
                    "prefeccore.task.Task"
                ],
                "task": [
                    "tuple[]",
                    "tuple",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "typing.Callable[typing.Any, bool]",
                    "Callable[[Any], bool]",
                    "dict[, ]",
                    "dict",
                    "prefeccore.task.Task"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Worker._run_task": {
            "name": "_run_task",
            "location": 283,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "task": [
                    "dict[, ]",
                    "dict",
                    "Task",
                    "tasks.Task",
                    "argparse.Namespace"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Worker._on_heartbeat_error": {
            "name": "_on_heartbeat_error",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Optional[str]",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "Worker._apply_task": {
            "name": "_apply_task",
            "location": 304,
            "return": [
                "Dict[str, Any]",
                "Iterable[T]"
            ],
            "arguments": {
                "task": [
                    "argparse.Namespace",
                    "Task",
                    "Awaitable",
                    "prefeccore.task.Task",
                    "Exception"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Worker._send_reply": {
            "name": "_send_reply",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reply_to": [
                    "bytes",
                    "str",
                    "int"
                ],
                "channel": [
                    "bytes",
                    "str",
                    "int"
                ],
                "result": [
                    "int",
                    "str",
                    "bytes",
                    "starfish.core.util.logging.Log",
                    "bool"
                ],
                "exc_info": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Worker._exc_info_dict": {
            "name": "_exc_info_dict",
            "location": 343,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict",
                "List[Dict[str, Any]]",
                "type"
            ],
            "arguments": {
                "exc_info": [
                    "str"
                ]
            }
        },
        "Worker._watch_load": {
            "name": "_watch_load",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.uptime": {
            "name": "uptime",
            "location": 357,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._shutdown_timer": {
            "name": "_shutdown_timer",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.shutdown": {
            "name": "shutdown",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._handle_sigint": {
            "name": "_handle_sigint",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Worker._handle_sigterm": {
            "name": "_handle_sigterm",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Worker._handle_sighup": {
            "name": "_handle_sighup",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Worker._handle_sigusr1": {
            "name": "_handle_sigusr1",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Worker._handle_sigusr2": {
            "name": "_handle_sigusr2",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Worker.drop_task": {
            "name": "drop_task",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__.add_host": {
            "name": "add_host",
            "location": 40,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "kuyruk-master/kuyruk/__init__.py": {},
    "kuyruk-master/kuyruk/__main__.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_worker": {
            "name": "run_worker",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "str",
                    "Optional[\"Frame\"]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "kuyruk-master/tests/tasks.py": {
        "echo": {
            "name": "echo",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 29,
            "return": [
                "float",
                "int",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "object_result": {
            "name": "object_result",
            "location": 34,
            "return": [
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "echo_another": {
            "name": "echo_another",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "flood": {
            "name": "flood",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "raise_exception": {
            "name": "raise_exception",
            "location": 56,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {}
        },
        "discard": {
            "name": "discard",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "retry_task": {
            "name": "retry_task",
            "location": 66,
            "return": [
                "float",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "loop_forever": {
            "name": "loop_forever",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "just_sleep": {
            "name": "just_sleep",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seconds": [
                    "str",
                    "int"
                ]
            }
        },
        "eager_task": {
            "name": "eager_task",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "rejecting_task": {
            "name": "rejecting_task",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sleeping_task": {
            "name": "sleeping_task",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seconds": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "task_with_signal_handlers": {
            "name": "task_with_signal_handlers",
            "location": 108,
            "return": [
                "int",
                "str",
                "Generator",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "function0": {
            "name": "function0",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Iterable[bytes]",
                    "None",
                    "typing.Iterable[bytes]"
                ],
                "task": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Iterable[bytes]",
                    "None",
                    "typing.Iterable[bytes]"
                ],
                "args": [],
                "kwargs": [],
                "description": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Iterable[bytes]",
                    "None",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "function2": {
            "name": "function2",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "task": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]",
                    "list",
                    "list[]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "function5": {
            "name": "function5",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "task": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "must_be_called": {
            "name": "must_be_called",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "kuyruk-master/tests/__init__.py": {},
    "kuyruk-master/tests/integration/conftest.py": {
        "wait_for_rabbitmq": {
            "name": "wait_for_rabbitmq",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "kuyruk-master/tests/integration/forever.py": {},
    "kuyruk-master/tests/integration/test_loader.py": {
        "run_python": {
            "name": "run_python",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": [],
                "cwd": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 64,
            "return": [
                "str",
                "bool",
                "BaseException",
                "Mapping",
                "Callable[[KT], VT]"
            ],
            "arguments": {}
        },
        "LoaderTestCase.test_load_single_file": {
            "name": "test_load_single_file",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoaderTestCase.test_load_directory": {
            "name": "test_load_directory",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoaderTestCase.test_load_package": {
            "name": "test_load_package",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoaderTestCase.test_script_in_package": {
            "name": "test_script_in_package",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoaderTestCase._test_function_name": {
            "name": "_test_function_name",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "cwd": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "IO[str]",
                    "typing.IO",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "kuyruk-master/tests/integration/test_worker.py": {
        "WorkerTestCase.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_simple_task": {
            "name": "test_simple_task",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_import_cache": {
            "name": "test_import_cache",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_another_queue": {
            "name": "test_another_queue",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_exception": {
            "name": "test_exception",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_declare_error": {
            "name": "test_declare_error",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_retry": {
            "name": "test_retry",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_reject": {
            "name": "test_reject",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_before_after": {
            "name": "test_before_after",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "presend_mock": []
            }
        },
        "WorkerTestCase.test_task_max_run_time": {
            "name": "test_task_max_run_time",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_worker_sigquit": {
            "name": "test_worker_sigquit",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_result_wait": {
            "name": "test_result_wait",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_result_serialization_error": {
            "name": "test_result_serialization_error",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_result_wait_timeout": {
            "name": "test_result_wait_timeout",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_result_wait_exception": {
            "name": "test_result_wait_exception",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_result_wait_discard": {
            "name": "test_result_wait_discard",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_worker_max_run_time": {
            "name": "test_worker_max_run_time",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_heartbeat_error": {
            "name": "test_heartbeat_error",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_import_app_error": {
            "name": "test_import_app_error",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_invalid_json": {
            "name": "test_invalid_json",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_invalid_task_path": {
            "name": "test_invalid_task_path",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_sigint": {
            "name": "test_sigint",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_sigusr1": {
            "name": "test_sigusr1",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_batch": {
            "name": "test_batch",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kuyruk-master/tests/integration/util.py": {
        "new_instance": {
            "name": "new_instance",
            "location": 21,
            "return": [
                "Kuyruk",
                "Mapping[str, int]",
                "Dict[str, str]",
                "Optional[str]",
                "Config",
                "Sequence",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "delete_queue": {
            "name": "delete_queue",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "len_queue": {
            "name": "len_queue",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "queue": [
                    "typing.Callable[None, bool]",
                    "bool",
                    "Callable[[None], bool]",
                    "dict[, ]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "is_empty": {
            "name": "is_empty",
            "location": 42,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "drop_connections": {
            "name": "drop_connections",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "timeout": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_drop_connections": {
            "name": "_drop_connections",
            "location": 58,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "run_worker": {
            "name": "run_worker",
            "location": 80,
            "return": [
                "",
                "typing.Generator[What]"
            ],
            "arguments": {
                "app": [
                    "typing.Text",
                    "List[str]",
                    "bool",
                    "Callable"
                ],
                "terminate": [
                    "bool",
                    "str"
                ]
            }
        },
        "not_running": {
            "name": "not_running",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_running": {
            "name": "is_running",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_pids": {
            "name": "get_pids",
            "location": 138,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        },
        "get_pid": {
            "name": "get_pid",
            "location": 150,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "float"
                ]
            }
        },
        "wait_until": {
            "name": "wait_until",
            "location": 156,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "callable",
                    "list[]",
                    "T",
                    "list"
                ],
                "timeout": [
                    "callable",
                    "None",
                    "T",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "wait_while": {
            "name": "wait_while",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "T",
                    "int",
                    "Callable",
                    "typing.Iterable[T]",
                    "Iterable[T]"
                ],
                "timeout": [
                    "T",
                    "None",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "do_until": {
            "name": "do_until",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "f_do": [
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "float",
                    "None",
                    "complex"
                ],
                "f_cond": [
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "float",
                    "None",
                    "complex"
                ],
                "timeout": [
                    "T",
                    "None",
                    "int",
                    "Optional[str]",
                    "float",
                    "str",
                    "complex"
                ]
            }
        },
        "do_while": {
            "name": "do_while",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "f_do": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "f_condition": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "drop_connections.drop": {
            "name": "drop",
            "location": 49,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "do_while.should_do": {
            "name": "should_do",
            "location": 169,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "kuyruk-master/tests/integration/__init__.py": {},
    "kuyruk-master/tests/integration/loader/onefile.py": {
        "print_message": {
            "name": "print_message",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "kuyruk-master/tests/integration/loader/appdirectory/main.py": {},
    "kuyruk-master/tests/integration/loader/appdirectory/tasks.py": {
        "print_message": {
            "name": "print_message",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "kuyruk-master/tests/integration/loader/appdirectory/__init__.py": {},
    "kuyruk-master/tests/integration/loader/apppackage/main.py": {},
    "kuyruk-master/tests/integration/loader/apppackage/tasks.py": {
        "print_message": {
            "name": "print_message",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "kuyruk-master/tests/integration/loader/apppackage/__init__.py": {},
    "kuyruk-master/tests/integration/loader/apppackage/scripts/send_message.py": {},
    "kuyruk-master/tests/integration/loader/apppackage/scripts/__init__.py": {},
    "kuyruk-master/tests/unit/config.py": {},
    "kuyruk-master/tests/unit/config2.py": {},
    "kuyruk-master/tests/unit/test_config.py": {
        "ConfigTestCase.test_from_pymodule": {
            "name": "test_from_pymodule",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_from_pyfile": {
            "name": "test_from_pyfile",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_from_object": {
            "name": "test_from_object",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_from_config": {
            "name": "test_from_config",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_from_env_vars": {
            "name": "test_from_env_vars",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kuyruk-master/tests/unit/test_various.py": {
        "KuyrukTestCase.test_task_decorator": {
            "name": "test_task_decorator",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KuyrukTestCase.test_eager": {
            "name": "test_eager",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_func": []
            }
        },
        "KuyrukTestCase.test_apply": {
            "name": "test_apply",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_func": []
            }
        },
        "KuyrukTestCase.test_task_name": {
            "name": "test_task_name",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KuyrukTestCase.test_task_queue_name": {
            "name": "test_task_queue_name",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KuyrukTestCase.test_task_queue_name.f": {
            "name": "f",
            "location": 41,
            "return": [
                "None",
                "Callable[[], Iterable[Any]]",
                "Iterable[Hashable]",
                "logging.Logger",
                "Tuple[int]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "kuyruk-master/tests/unit/test_worker.py": {
        "Args.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_default_queue": {
            "name": "test_default_queue",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerTestCase.test_queue_names": {
            "name": "test_queue_names",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kuyruk-master/tests/unit/__init__.py": {}
}
{
    "kw_python_weekend-master/click_cli.py": {},
    "kw_python_weekend-master/hug_cli.py": {},
    "kw_python_weekend-master/run_fastapi.py": {},
    "kw_python_weekend-master/lb/__init__.py": {},
    "kw_python_weekend-master/lb/cli/__init__.py": {
        "click_routes": {
            "name": "click_routes",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "bool",
                    "str"
                ],
                "dst": [
                    "bool",
                    "str"
                ],
                "when": [
                    "int",
                    "datetime.timedelta",
                    "None",
                    "frozenset",
                    "str",
                    "Optional[int]",
                    "FrozenSet[int]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[str]"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/data_classes/response_journey.py": {},
    "kw_python_weekend-master/lb/journey_finder_fastapi/api.py": {
        "read_root": {
            "name": "read_root",
            "location": 12,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "Callable",
                "List[dict]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "get_routes_from_site": {
            "name": "get_routes_from_site",
            "location": 17,
            "return": [
                "str",
                "Dict[str,Any]",
                "bytes",
                "int"
            ],
            "arguments": {
                "src": [
                    "str",
                    "bool"
                ],
                "dst": [
                    "str",
                    "bool"
                ],
                "when": [
                    "int",
                    "str",
                    "None",
                    "datetime.timedelta",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "provider": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/journey_finder_fastapi/__init__.py": {},
    "kw_python_weekend-master/lb/journey_finder_flask/api.py": {
        "search": {
            "name": "search",
            "location": 17,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "get_routes_from_site": {
            "name": "get_routes_from_site",
            "location": 22,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {}
        }
    },
    "kw_python_weekend-master/lb/journey_finder_flask/entrypoint.py": {
        "create_app": {
            "name": "create_app",
            "location": 4,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "kw_python_weekend-master/lb/journey_finder_flask/__init__.py": {},
    "kw_python_weekend-master/lb/journey_finder_hug/api.py": {
        "show_ui": {
            "name": "show_ui",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_routes_from_site": {
            "name": "get_routes_from_site",
            "location": 21,
            "return": [
                "str",
                "Dict[str,Any]",
                "bytes",
                "int"
            ],
            "arguments": {
                "src": [
                    "str",
                    "bool"
                ],
                "dst": [
                    "str",
                    "bool"
                ],
                "when": [
                    "int",
                    "str",
                    "None",
                    "datetime.timedelta",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "provider": [
                    "str"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/journey_finder_hug/entrypoint.py": {},
    "kw_python_weekend-master/lb/journey_finder_hug/template_engine.py": {
        "get_template": {
            "name": "get_template",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/journey_finder_hug/__init__.py": {},
    "kw_python_weekend-master/lb/journey_finder_hug/cli/__init__.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kw_python_weekend-master/lb/modules/alsa.py": {
        "Alsa.get_destinations": {
            "name": "get_destinations",
            "location": 15,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alsa._prase_data": {
            "name": "_prase_data",
            "location": 23,
            "return": [
                "List[lb.data_classes.response_journey.ResponseJourney]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Dict",
                    "List[Dict[str,Any]]",
                    "MutableMapping[str,Any]",
                    "str"
                ]
            }
        },
        "Alsa._get_routes": {
            "name": "_get_routes",
            "location": 36,
            "return": [
                "Union[str, IO]",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Dict",
                    "str"
                ],
                "dst": [
                    "Dict",
                    "str"
                ],
                "when": [
                    "str",
                    "dict"
                ]
            }
        },
        "Alsa.get_routes": {
            "name": "get_routes",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "destination": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "departure": [
                    "str",
                    "List",
                    "None"
                ],
                "arrival": [
                    "str",
                    "None",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/modules/arriva.py": {
        "Arriva.get_routes": {
            "name": "get_routes",
            "location": 17,
            "return": [
                "List[lb.data_classes.response_journey.ResponseJourney]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Text",
                    "str",
                    "int",
                    "bytes",
                    "Union[str,int]"
                ],
                "destination": [
                    "Text",
                    "str",
                    "int",
                    "bytes",
                    "Union[str,int]"
                ],
                "departure": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "arrival": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/modules/fetch.py": {
        "fetch_provider": {
            "name": "fetch_provider",
            "location": 8,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "provider_name": [
                    "str"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/modules/provider_base.py": {
        "Provider.get_routes": {
            "name": "get_routes",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "destination": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "departure": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "arrival": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/modules/regiojet.py": {
        "put_into_redis": {
            "name": "put_into_redis",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict",
                    "Union[Callable[[Dict],Hashable],str]",
                    "Callable[dict,Hashable]"
                ],
                "value": [
                    "str",
                    "Dict",
                    "Union[Callable[[Dict],Hashable],str]",
                    "Callable[dict,Hashable]"
                ]
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 29,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "AnyStr"
                ],
                "time": [
                    "str",
                    "AnyStr",
                    "int"
                ]
            }
        },
        "Regiojet.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regiojet._getting_cookie": {
            "name": "_getting_cookie",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regiojet.get_destination": {
            "name": "get_destination",
            "location": 47,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regiojet.fetch_destination": {
            "name": "fetch_destination",
            "location": 58,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regiojet.find_city_id": {
            "name": "find_city_id",
            "location": 71,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "city_name": [
                    "str"
                ]
            }
        },
        "Regiojet._find_city_id": {
            "name": "_find_city_id",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "Dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "city_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Regiojet.get_route": {
            "name": "get_route",
            "location": 84,
            "return": [
                "str",
                "Set[str]",
                "Dict[str,dict[str,Any]]",
                "List[str]",
                "bool",
                "Dict[str,str]",
                "MutableMapping[str,int]",
                "List[Optional[str]]",
                "Dict[str,dict]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,str]",
                    "datetime.date",
                    "Union[str,Dict[str,Any]]"
                ],
                "destination": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,str]",
                    "datetime.date",
                    "Union[str,Dict[str,Any]]"
                ],
                "departure": [
                    "str",
                    "int",
                    "datetime.date",
                    "Dict[str, str]",
                    "Union[str, Dict[str, Any]]"
                ],
                "arrival": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,str]",
                    "datetime.date",
                    "Union[str,Dict[str,Any]]"
                ]
            }
        },
        "Regiojet.parse_single_item": {
            "name": "parse_single_item",
            "location": 107,
            "return": [
                "ResponseJourney",
                "List[str]",
                "int",
                "Dict"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "base_date": [
                    "str",
                    "List[dict]",
                    "int",
                    "T"
                ]
            }
        },
        "Regiojet.parse_routes": {
            "name": "parse_routes",
            "location": 126,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Regiojet.get_routes": {
            "name": "get_routes",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "destination": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "departure": [
                    "str",
                    "None",
                    "datetime.date",
                    "allennlp.modules.TextFieldEmbedder"
                ],
                "arrival": [
                    "str",
                    "None",
                    "datetime.date",
                    "allennlp.modules.TextFieldEmbedder"
                ]
            }
        }
    },
    "kw_python_weekend-master/lb/modules/__init__.py": {},
    "kw_python_weekend-master/lb/templates/__init__.py": {}
}
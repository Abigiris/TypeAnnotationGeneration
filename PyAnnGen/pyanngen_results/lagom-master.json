{
    "lagom-master/lagom/container.py": {
        "_update_nothing": {
            "name": "_update_nothing",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "_c": [
                    "lagom.interfaces.WriteableContainer"
                ],
                "_a": [
                    "list"
                ],
                "_k": [
                    "dict"
                ]
            }
        },
        "Container.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[Container]"
                ],
                "log_undefined_deps": [
                    "Union[(bool, logging.Logger)]"
                ]
            }
        },
        "Container.define": {
            "name": "define",
            "location": 142,
            "return": [
                "lagom.interfaces.SpecialDepDefinition"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ],
                "resolver": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Container.defined_types": {
            "name": "defined_types",
            "location": 167,
            "return": [
                "bool",
                "mypy.types.Type",
                "Tuple[mypy.types.Type, mypy.types.Type]",
                "Optional[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.reflection_cache_overview": {
            "name": "reflection_cache_overview",
            "location": 177,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "Optional[str]",
                "bytes",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.temporary_singletons": {
            "name": "temporary_singletons",
            "location": 180,
            "return": [
                "emporaryInjectionContext"
            ],
            "arguments": {
                "self": [],
                "singletons": [
                    "List[type]"
                ]
            }
        },
        "Container.resolve": {
            "name": "resolve",
            "location": 204,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ],
                "suppress_error": [
                    "str",
                    "bool"
                ],
                "skip_definitions": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Container.partial": {
            "name": "partial",
            "location": 246,
            "return": [
                "Callable[(..., X)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., X)]"
                ],
                "shared": [
                    "List[type]"
                ],
                "container_updater": [
                    "Optional[Callable[([lagom.interfaces.WriteableContainer, list, dict], None)]]"
                ]
            }
        },
        "Container.magic_partial": {
            "name": "magic_partial",
            "location": 293,
            "return": [
                "Callable[(..., X)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., X)]"
                ],
                "shared": [
                    "List[type]"
                ],
                "keys_to_skip": [
                    "List[str]"
                ],
                "skip_pos_up_to": [
                    "int"
                ],
                "container_updater": [
                    "Optional[Callable[([lagom.interfaces.WriteableContainer, list, dict], None)]]"
                ]
            }
        },
        "Container.clone": {
            "name": "clone",
            "location": 340,
            "return": [
                "Container"
            ],
            "arguments": {
                "self": [
                    "_TContainer"
                ]
            }
        },
        "Container.get_definition": {
            "name": "get_definition",
            "location": 346,
            "return": [
                "Optional[lagom.interfaces.SpecialDepDefinition[X]]"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ]
            }
        },
        "Container.__getitem__": {
            "name": "__getitem__",
            "location": 359,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ]
            }
        },
        "Container.__setitem__": {
            "name": "__setitem__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ],
                "resolver": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Container._reflection_build_with_err_handling": {
            "name": "_reflection_build_with_err_handling",
            "location": 365,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ],
                "suppress_error": [
                    "bool"
                ]
            }
        },
        "Container._reflection_build": {
            "name": "_reflection_build",
            "location": 379,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ]
            }
        },
        "Container._infer_dependencies": {
            "name": "_infer_dependencies",
            "location": 391,
            "return": [
                "dict[, ]",
                "List[str]",
                "str",
                "Set[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "lagom.util.reflection.FunctionSpec"
                ],
                "suppress_error": [
                    "bool",
                    "str",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "keys_to_skip": [
                    "List[str]"
                ],
                "skip_pos_up_to": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "types_to_skip": [
                    "Set[type]"
                ]
            }
        },
        "Container._get_spec_without_self": {
            "name": "_get_spec_without_self",
            "location": 412,
            "return": [
                "lagom.util.reflection.FunctionSpec"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., X)]"
                ]
            }
        },
        "ExplicitContainer.resolve": {
            "name": "resolve",
            "location": 420,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ],
                "suppress_error": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "skip_definitions": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "ExplicitContainer.define": {
            "name": "define",
            "location": 430,
            "return": [
                "int",
                "Callable",
                "typing.Pattern",
                "str",
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "typing.Type",
                "list[]",
                "dict[, ]",
                "dict[str, typing.Any]",
                "Alias"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "int",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "resolver": [
                    "int",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "ExplicitContainer.clone": {
            "name": "clone",
            "location": 444,
            "return": [
                "ExplicitContainer"
            ],
            "arguments": {
                "self": [
                    "_TExplicitContainer"
                ]
            }
        },
        "EmptyDefinitionSet.get_definition": {
            "name": "get_definition",
            "location": 457,
            "return": [
                "Optional[lagom.interfaces.SpecialDepDefinition[X]]"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ]
            }
        },
        "EmptyDefinitionSet.defined_types": {
            "name": "defined_types",
            "location": 466,
            "return": [
                "Set[str]",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TemporaryInjectionContext.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Container"
                ],
                "update_function": [
                    "Optional[Callable[([Container], Container)]]"
                ]
            }
        },
        "_TemporaryInjectionContext.__enter__": {
            "name": "__enter__",
            "location": 487,
            "return": [
                "Container"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TemporaryInjectionContext.__exit__": {
            "name": "__exit__",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "typing.Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ]
            }
        },
        "Container.partial._update_args": {
            "name": "_update_args",
            "location": 278,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "supplied_args": [],
                "supplied_kwargs": []
            }
        },
        "Container.magic_partial._update_args": {
            "name": "_update_args",
            "location": 324,
            "return": [
                "tuple[dict[, ]]",
                "mypy.types.Type",
                "bool",
                "int",
                "str",
                "types.Resolver"
            ],
            "arguments": {
                "supplied_args": [
                    "int",
                    "bool"
                ],
                "supplied_kwargs": [
                    "list",
                    "Dict[str, Any]",
                    "List[Tuple]",
                    "dict"
                ]
            }
        }
    },
    "lagom-master/lagom/context_based.py": {
        "ContextContainer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "typing.Type",
                    "bytes",
                    "None",
                    "type",
                    "Optional[str]",
                    "Union[str, None]"
                ],
                "context_types": [
                    "Collection[type]"
                ],
                "context_singletons": [
                    "Collection[type]"
                ],
                "log_undefined_deps": [
                    "Union[(bool, logging.Logger)]"
                ]
            }
        },
        "ContextContainer.__enter__": {
            "name": "__enter__",
            "location": 59,
            "return": [
                "ContextContainer"
            ],
            "arguments": {
                "self": [
                    "_TContextContainer"
                ]
            }
        },
        "ContextContainer.__exit__": {
            "name": "__exit__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "ContextContainer._context_type_def": {
            "name": "_context_type_def",
            "location": 69,
            "return": [
                "lagom.definitions.ConstructionWithContainer"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "type"
                ]
            }
        },
        "ContextContainer._singleton_type_def": {
            "name": "_singleton_type_def",
            "location": 84,
            "return": [
                "lagom.definitions.SingletonWrapper[nothing]"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "type"
                ]
            }
        },
        "ContextContainer._context_resolver": {
            "name": "_context_resolver",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "lagom.interfaces.ReadableContainer"
                ],
                "type_def": [
                    "lagom.interfaces.SpecialDepDefinition"
                ]
            }
        }
    },
    "lagom-master/lagom/debug.py": {
        "get_commit_hash": {
            "name": "get_commit_hash",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_build_info": {
            "name": "get_build_info",
            "location": 14,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        }
    },
    "lagom-master/lagom/decorators.py": {
        "bind_to_container": {
            "name": "bind_to_container",
            "location": 25,
            "return": [
                "Callable[([Callable[(..., R)]], Callable[(..., R)])]"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ],
                "shared": [
                    "List[type]"
                ]
            }
        },
        "magic_bind_to_container": {
            "name": "magic_bind_to_container",
            "location": 36,
            "return": [
                "Callable[([Callable[(..., R)]], Callable[(..., R)])]"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ],
                "shared": [
                    "List[type]"
                ]
            }
        },
        "dependency_definition": {
            "name": "dependency_definition",
            "location": 59,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ],
                "singleton": [
                    "bool"
                ]
            }
        },
        "context_dependency_definition": {
            "name": "context_dependency_definition",
            "location": 86,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "_extract_definition_func_and_type": {
            "name": "_extract_definition_func_and_type",
            "location": 122,
            "return": [
                "Tuple[(lagom.interfaces.SpecialDepDefinition, Type[T])]"
            ],
            "arguments": {
                "func": []
            }
        },
        "_generator_type": {
            "name": "_generator_type",
            "location": 146,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "return_type": [
                    "bool",
                    "dict[str, typing.Type]",
                    "Dict[str, type]",
                    "mypy.types.CallableType",
                    "mypy.types.FunctionLike"
                ]
            }
        },
        "bind_to_container._decorator": {
            "name": "_decorator",
            "location": 28,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "magic_bind_to_container._decorator": {
            "name": "_decorator",
            "location": 51,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "dependency_definition._decorator": {
            "name": "_decorator",
            "location": 74,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "context_dependency_definition._decorator": {
            "name": "_decorator",
            "location": 110,
            "return": [
                "mypy.types.Type",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "types.Resolver",
                "str"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Type",
                    "wemake_python_styleguide.types.AnyFunctionDef"
                ]
            }
        }
    },
    "lagom-master/lagom/definitions.py": {
        "construction": {
            "name": "construction",
            "location": 62,
            "return": [
                "Union[(ConstructionWithContainer, ConstructionWithoutContainer)]"
            ],
            "arguments": {
                "resolver": [
                    "Callable"
                ]
            }
        },
        "yielding_construction": {
            "name": "yielding_construction",
            "location": 79,
            "return": [
                "Union[(YieldWithContainer, YieldWithoutContainer)]"
            ],
            "arguments": {
                "resolver": [
                    "Callable"
                ]
            }
        },
        "normalise": {
            "name": "normalise",
            "location": 182,
            "return": [
                "lagom.interfaces.SpecialDepDefinition"
            ],
            "arguments": {
                "resolver": [
                    "int",
                    "Callable",
                    "str"
                ],
                "skip_alias_definitions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConstructionWithoutContainer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "Callable[([], X)]"
                ]
            }
        },
        "ConstructionWithoutContainer.get_instance": {
            "name": "get_instance",
            "location": 24,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "ConstructionWithContainer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "Callable[([lagom.interfaces.ReadableContainer], X)]"
                ]
            }
        },
        "ConstructionWithContainer.get_instance": {
            "name": "get_instance",
            "location": 35,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "YieldWithoutContainer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "Callable[([], Iterator[X])]"
                ]
            }
        },
        "YieldWithoutContainer.get_instance": {
            "name": "get_instance",
            "location": 46,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "YieldWithContainer.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor": [
                    "Callable[([lagom.interfaces.ReadableContainer], Iterator[X])]"
                ]
            }
        },
        "YieldWithContainer.get_instance": {
            "name": "get_instance",
            "location": 57,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "Alias.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias_type": [
                    "str",
                    "int",
                    "bool"
                ],
                "skip_definitions": [
                    "str",
                    "bool"
                ]
            }
        },
        "Alias.get_instance": {
            "name": "get_instance",
            "location": 108,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "SingletonWrapper.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "def_to_wrap": [
                    "lagom.interfaces.SpecialDepDefinition"
                ]
            }
        },
        "SingletonWrapper.get_instance": {
            "name": "get_instance",
            "location": 126,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        },
        "SingletonWrapper._has_instance": {
            "name": "_has_instance",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonWrapper._load_instance": {
            "name": "_load_instance",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Singleton.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "singleton_type": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "PlainInstance.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "PlainInstance.get_instance": {
            "name": "get_instance",
            "location": 161,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "UnresolvableTypeDefinition.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_or_exception": [
                    "Union[(Exception, str)]"
                ]
            }
        },
        "UnresolvableTypeDefinition.get_instance": {
            "name": "get_instance",
            "location": 175,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        }
    },
    "lagom-master/lagom/environment.py": {
        "Env.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Env._env_names_from_pydantic_errors": {
            "name": "_env_names_from_pydantic_errors",
            "location": 85,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "missing_field_errors": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Env._prefix": {
            "name": "_prefix",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/lagom/exceptions.py": {
        "_dep_type_as_string": {
            "name": "_dep_type_as_string",
            "location": 160,
            "return": [
                "str",
                "Type",
                "bool",
                "dict"
            ],
            "arguments": {
                "dep_type": [
                    "type"
                ]
            }
        },
        "ClassesCannotBeDecorated.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnableToInvokeBoundFunction.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ],
                "unresolvable_deps": [
                    "bytes",
                    "bool",
                    "Callable"
                ]
            }
        },
        "UnresolvableType.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "type"
                ]
            }
        },
        "TypeResolutionBlocked.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "RecursiveDefinitionError.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "type"
                ]
            }
        },
        "DependencyNotDefined.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "type"
                ]
            }
        },
        "MissingEnvVariable.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_names": [
                    "List[str]"
                ]
            }
        },
        "InvalidEnvironmentVariables.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_names": [
                    "List[str]"
                ],
                "details": [
                    "str"
                ]
            }
        }
    },
    "lagom-master/lagom/interfaces.py": {
        "ReadableContainer.resolve": {
            "name": "resolve",
            "location": 35,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ],
                "suppress_error": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "skip_definitions": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "ReadableContainer.partial": {
            "name": "partial",
            "location": 42,
            "return": [
                "Callable[(..., X)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., X)]"
                ],
                "shared": [
                    "List[type]"
                ],
                "container_updater": [
                    "Optional[Callable[([WriteableContainer, list, dict], None)]]"
                ]
            }
        },
        "ReadableContainer.magic_partial": {
            "name": "magic_partial",
            "location": 51,
            "return": [
                "Callable[(..., X)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[(..., X)]"
                ],
                "shared": [
                    "List[type]"
                ],
                "keys_to_skip": [
                    "List[str]"
                ],
                "skip_pos_up_to": [
                    "int"
                ],
                "container_updater": [
                    "Optional[Callable[([WriteableContainer, list, dict], None)]]"
                ]
            }
        },
        "ReadableContainer.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ]
            }
        },
        "ReadableContainer.defined_types": {
            "name": "defined_types",
            "location": 68,
            "return": [
                "typing.Set[typing.Type]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteableContainer.__setitem__": {
            "name": "__setitem__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ],
                "resolver": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WriteableContainer.define": {
            "name": "define",
            "location": 92,
            "return": [
                "SpecialDepDefinition"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Type[X]"
                ],
                "resolver": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ExtendableContainer.clone": {
            "name": "clone",
            "location": 112,
            "return": [
                "WriteableContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialDepDefinition.get_instance": {
            "name": "get_instance",
            "location": 126,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "ReadableContainer"
                ]
            }
        },
        "DefinitionsSource.get_definition": {
            "name": "get_definition",
            "location": 142,
            "return": [
                "Optional[SpecialDepDefinition[X]]"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[X]"
                ]
            }
        },
        "DefinitionsSource.defined_types": {
            "name": "defined_types",
            "location": 152,
            "return": [
                "typing.Set[typing.Type]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerDebugInfo.defined_types": {
            "name": "defined_types",
            "location": 168,
            "return": [
                "typing.Set[typing.Type]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerDebugInfo.reflection_cache_overview": {
            "name": "reflection_cache_overview",
            "location": 177,
            "return": [
                "typing.Dict[builtins.str, builtins.str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/lagom/markers.py": {
        "Injectable.__bool__": {
            "name": "__bool__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injectable.__copy__": {
            "name": "__copy__",
            "location": 20,
            "return": [
                "Injectable"
            ],
            "arguments": {
                "self": [
                    "_TInjectable"
                ]
            }
        },
        "Injectable.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 28,
            "return": [
                "Injectable"
            ],
            "arguments": {
                "self": [
                    "_TInjectable"
                ],
                "memodict": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Injectable.__getattr__": {
            "name": "__getattr__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "lagom-master/lagom/updaters.py": {
        "update_container_singletons": {
            "name": "update_container_singletons",
            "location": 7,
            "return": [
                "lagom.interfaces.WriteableContainer"
            ],
            "arguments": {
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "singletons": [
                    "List[type]"
                ]
            }
        },
        "_define_singleton_in_new_container": {
            "name": "_define_singleton_in_new_container",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "new_container": [
                    "lagom.interfaces.WriteableContainer"
                ],
                "container": [
                    "lagom.interfaces.ReadableContainer"
                ],
                "dep": [
                    "type"
                ]
            }
        }
    },
    "lagom-master/lagom/version.py": {},
    "lagom-master/lagom/wrapping.py": {
        "apply_argument_updater": {
            "name": "apply_argument_updater",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "argument_updater": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "spec": [
                    "lagom.util.reflection.FunctionSpec"
                ],
                "catch_errors": [
                    "bool",
                    "Union[bool, Iterable[str]]"
                ]
            }
        },
        "_wrap_func_in_error_handling": {
            "name": "_wrap_func_in_error_handling",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "lagom.util.reflection.FunctionSpec"
                ]
            }
        },
        "_wrap_func_in_error_handling._error_handling_func": {
            "name": "_error_handling_func",
            "location": 43,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "apply_argument_updater._bound_func": {
            "name": "_bound_func",
            "location": 26,
            "return": [
                "int",
                "float",
                "Type[BaseException]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "lagom-master/lagom/__init__.py": {},
    "lagom-master/lagom/experimental/definitions.py": {
        "PlainFunction.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callable_func": [
                    "X"
                ]
            }
        },
        "PlainFunction.get_instance": {
            "name": "get_instance",
            "location": 18,
            "return": [
                "X"
            ],
            "arguments": {
                "self": [],
                "_container": [
                    "lagom.interfaces.ReadableContainer"
                ]
            }
        }
    },
    "lagom-master/lagom/experimental/__init__.py": {},
    "lagom-master/lagom/experimental/integrations/click.py": {
        "ClickIO.echo": {
            "name": "echo",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Exception",
                    "None",
                    "float"
                ],
                "file": [
                    "str",
                    "Exception",
                    "None",
                    "float"
                ],
                "nl": [
                    "bool",
                    "str",
                    "Exception",
                    "float"
                ],
                "err": [
                    "bool",
                    "str",
                    "Exception",
                    "float"
                ],
                "color": [
                    "str",
                    "Exception",
                    "None",
                    "float"
                ]
            }
        },
        "ClickIO.__getattr__": {
            "name": "__getattr__",
            "location": 30,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "ClickIntegration.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "execution_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "ClickIntegration.command": {
            "name": "command",
            "location": 53,
            "return": [
                "Callable[([Callable], DecoratedCommand)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ],
                "cls": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ClickIntegration.option": {
            "name": "option",
            "location": 75,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "ClickIntegration.argument": {
            "name": "argument",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ClickIntegration.__getattr__": {
            "name": "__getattr__",
            "location": 94,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "ClickIntegration.command._decorator": {
            "name": "_decorator",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "lagom-master/lagom/experimental/integrations/django.py": {
        "_update_container_for_request": {
            "name": "_update_container_for_request",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.interfaces.WriteableContainer"
                ],
                "call_args": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "str",
                    "model.Model",
                    "Dict[str, bytes]"
                ],
                "call_kwargs": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "_Managers.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[M]"
                ]
            }
        },
        "_Managers.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Mapping",
                    "docker.models.containers.Container",
                    "None",
                    "Mapping",
                    "dict[, ]",
                    "Union[None, str]",
                    "dict"
                ]
            }
        },
        "DjangoModel.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type[M]"
                ]
            }
        },
        "DjangoModel.objects": {
            "name": "objects",
            "location": 100,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoModel.new": {
            "name": "new",
            "location": 107,
            "return": [
                "M"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoIntegration.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "models": [
                    "Optional[List[type]]"
                ],
                "request_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "DjangoIntegration.bind_view": {
            "name": "bind_view",
            "location": 145,
            "return": [
                "Union[(Callable, _T0)]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "_T0"
                ]
            }
        },
        "DjangoIntegration.magic_bind_view": {
            "name": "magic_bind_view",
            "location": 163,
            "return": [
                "Union[(Callable, _T0)]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "_T0"
                ]
            }
        },
        "DjangoIntegration._bind_view_methods_to_container": {
            "name": "_bind_view_methods_to_container",
            "location": 181,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "_T0"
                ],
                "magic": [
                    "bool",
                    "str"
                ]
            }
        },
        "DjangoIntegration._load_settings": {
            "name": "_load_settings",
            "location": 205,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "lagom-master/lagom/experimental/integrations/flask.py": {
        "FlaskBlueprintIntegration.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "str",
                    "bool"
                ],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "request_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "FlaskBlueprintIntegration.route": {
            "name": "route",
            "location": 39,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "FlaskBlueprintIntegration.magic_route": {
            "name": "magic_route",
            "location": 58,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "FlaskBlueprintIntegration.route._decorator": {
            "name": "_decorator",
            "location": 45,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "FlaskBlueprintIntegration.magic_route._decorator": {
            "name": "_decorator",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "lagom-master/lagom/experimental/integrations/__init__.py": {},
    "lagom-master/lagom/integrations/fast_api.py": {
        "FastApiIntegration.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "request_singletons": [
                    "Optional[List[type]]"
                ],
                "request_context_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "FastApiIntegration.depends": {
            "name": "depends",
            "location": 38,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "dep_type": [
                    "Type[T]"
                ]
            }
        },
        "FastApiIntegration.override_for_test": {
            "name": "override_for_test",
            "location": 74,
            "return": [
                "typing.Iterator[interfaces.WriteableContainer]",
                "typing.Generator[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastApiIntegration._build_container": {
            "name": "_build_container",
            "location": 97,
            "return": [
                "lagom.context_based.ContextContainer"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "FastApiIntegration.depends._container_from_request": {
            "name": "_container_from_request",
            "location": 45,
            "return": [
                "typing.Iterator[interfaces.ReadableContainer]",
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "fastapi.Request",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "FastApiIntegration.depends._resolver": {
            "name": "_resolver",
            "location": 66,
            "return": [
                "str",
                "Callable[[str], T]",
                "dict"
            ],
            "arguments": {
                "container": [
                    "Type",
                    "Depends"
                ]
            }
        }
    },
    "lagom-master/lagom/integrations/flask.py": {
        "FlaskIntegration.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional[float]",
                    "None",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "request_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "FlaskIntegration.route": {
            "name": "route",
            "location": 50,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "FlaskIntegration.magic_route": {
            "name": "magic_route",
            "location": 69,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "FlaskIntegration.route._decorator": {
            "name": "_decorator",
            "location": 56,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "FlaskIntegration.magic_route._decorator": {
            "name": "_decorator",
            "location": 74,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Optional[TextIO]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "lagom-master/lagom/integrations/starlette.py": {
        "StarletteIntegration.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "lagom.interfaces.ExtendableContainer"
                ],
                "request_singletons": [
                    "Optional[List[type]]"
                ]
            }
        },
        "StarletteIntegration.route": {
            "name": "route",
            "location": 46,
            "return": [
                "str",
                "Route"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "endpoint": [
                    "Callable"
                ]
            }
        },
        "StarletteIntegration.magic_route": {
            "name": "magic_route",
            "location": 75,
            "return": [
                "str",
                "Route"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "endpoint": [
                    "Callable"
                ]
            }
        },
        "StarletteIntegration.ws_route": {
            "name": "ws_route",
            "location": 104,
            "return": [
                "WebSocketRoute",
                "str",
                "Callable",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "endpoint": [
                    "Callable"
                ]
            }
        },
        "StarletteIntegration.ws_magic_route": {
            "name": "ws_magic_route",
            "location": 123,
            "return": [
                "WebSocketRoute",
                "str",
                "Callable",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "endpoint": [
                    "Callable"
                ]
            }
        },
        "StarletteIntegration.wrapped_endpoint_factory": {
            "name": "wrapped_endpoint_factory",
            "location": 142,
            "return": [
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Callable"
                ],
                "partial_provider": [
                    "Callable"
                ]
            }
        },
        "StarletteIntegration.create_http_endpoint_proxy": {
            "name": "create_http_endpoint_proxy",
            "location": 165,
            "return": [
                "type"
            ],
            "arguments": {
                "endpoint_cls": [
                    "type"
                ],
                "partial_provider": [
                    "Callable"
                ],
                "request_singletons": [
                    "List[type]"
                ]
            }
        },
        "StarletteIntegration.create_websocket_endpoint_proxy": {
            "name": "create_websocket_endpoint_proxy",
            "location": 195,
            "return": [
                "type"
            ],
            "arguments": {
                "endpoint_cls": [
                    "type"
                ],
                "partial_provider": [
                    "Callable"
                ],
                "request_singletons": [
                    "List[type]"
                ]
            }
        },
        "StarletteIntegration.create_http_endpoint_proxy.HTTPEndpointProxy.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "receive": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "send": [
                    "list",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StarletteIntegration.create_http_endpoint_proxy.HTTPEndpointProxy.__getattribute__": {
            "name": "__getattribute__",
            "location": 183,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StarletteIntegration.create_websocket_endpoint_proxy.WebSocketEndpointProxy.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "receive": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "send": [
                    "list",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StarletteIntegration.create_websocket_endpoint_proxy.WebSocketEndpointProxy.__getattribute__": {
            "name": "__getattribute__",
            "location": 213,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "lagom-master/lagom/integrations/__init__.py": {},
    "lagom-master/lagom/util/functional.py": {
        "arity": {
            "name": "arity",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "FunctionCollection.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCollection.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCollection.__contains__": {
            "name": "__contains__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "FunctionCollection.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "Iterator[F]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCollection.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCollection.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "set[T]"
                ]
            }
        }
    },
    "lagom-master/lagom/util/logging.py": {
        "NullLogger.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullLogger.debug": {
            "name": "debug",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "NullLogger.info": {
            "name": "info",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "dict[, ]",
                    "list",
                    "dict"
                ]
            }
        },
        "NullLogger.warning": {
            "name": "warning",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NullLogger.error": {
            "name": "error",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "List[object]",
                    "list[object]"
                ]
            }
        },
        "NullLogger.exception": {
            "name": "exception",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "List[Dict[str, int]]",
                    "None",
                    "Optional[str]",
                    "list[dict[str, int]]"
                ]
            }
        },
        "NullLogger.critical": {
            "name": "critical",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "lagom-master/lagom/util/reflection.py": {
        "reflect": {
            "name": "reflect",
            "location": 85,
            "return": [
                "FunctionSpec"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "_get_default_args": {
            "name": "_get_default_args",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "func": [
                    "bool"
                ]
            }
        },
        "remove_optional_type": {
            "name": "remove_optional_type",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "dep_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "FunctionSpec.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "annotations": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None"
                ],
                "defaults": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None"
                ],
                "return_type": [
                    "str",
                    "Optional[type]",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FunctionSpec.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionSpec.without_argument": {
            "name": "without_argument",
            "location": 48,
            "return": [
                "FunctionSpec"
            ],
            "arguments": {
                "self": [
                    "_TFunctionSpec"
                ],
                "arg_to_remove": [
                    "str"
                ]
            }
        },
        "CachingReflector.overview_of_cache": {
            "name": "overview_of_cache",
            "location": 67,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachingReflector.get_function_spec": {
            "name": "get_function_spec",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "FunctionSpec.__repr__._arg_type_string": {
            "name": "_arg_type_string",
            "location": 39,
            "return": [
                "typing.Text",
                "bool",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "arg": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "lagom-master/lagom/util/__init__.py": {},
    "lagom-master/tests/conftest.py": {
        "container": {
            "name": "container",
            "location": 7,
            "return": [
                "Container"
            ],
            "arguments": {}
        },
        "explicit_container": {
            "name": "explicit_container",
            "location": 12,
            "return": [
                "ExplicitContainer"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/examples.py": {
        "SomeClassManager.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [
                "SomeClass"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClassManager.__exit__": {
            "name": "__exit__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "lagom-master/tests/test_abstracts_and_replacements.py": {
        "container_with_abc": {
            "name": "container_with_abc",
            "location": 43,
            "return": [],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "Sized"
                ]
            }
        },
        "test_registered_concrete_class_is_loaded": {
            "name": "test_registered_concrete_class_is_loaded",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_abc": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_registered_concrete_class_is_used_for_other_objects": {
            "name": "test_registered_concrete_class_is_used_for_other_objects",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_abc": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_alias_can_be_defined": {
            "name": "test_alias_can_be_defined",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_abc": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_trying_to_build_an_abc_raises_an_error": {
            "name": "test_trying_to_build_an_abc_raises_an_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "MySimpleAbc.bloop": {
            "name": "bloop",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySimpleDep.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stuff": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MySimpleDep.bloop": {
            "name": "bloop",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyMoreComplicatedDep.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "MySimpleAbc"
                ]
            }
        }
    },
    "lagom-master/tests/test_async_definitions_can_be_used.py": {},
    "lagom-master/tests/test_complex_type.py": {
        "container_with_list": {
            "name": "container_with_list",
            "location": 23,
            "return": [
                "dict",
                "str",
                "list[typing.Type]",
                "bool"
            ],
            "arguments": {
                "container": [
                    "str",
                    "bool",
                    "List[Type]",
                    "list[typing.Type]"
                ]
            }
        },
        "test_works_for_list_types": {
            "name": "test_works_for_list_types",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_list": [
                    "float"
                ]
            }
        },
        "test_works_for_inferred_list_types": {
            "name": "test_works_for_inferred_list_types",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_list": []
            }
        },
        "MySimpleDep.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stuff": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MyMoreComplicatedDep.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "List[MySimpleDep]"
                ]
            }
        }
    },
    "lagom-master/tests/test_container_clone_layering.py": {
        "test_container_invocation_level_controls_the_dep_loaded_for_reflected_constructions": {
            "name": "test_container_invocation_level_controls_the_dep_loaded_for_reflected_constructions",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_container_invocation_level_is_passed_to_lambdas": {
            "name": "test_container_invocation_level_is_passed_to_lambdas",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Dep.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str"
                ]
            }
        },
        "OtherDep.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Dep"
                ]
            }
        },
        "OtherDepNeedingALambda.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "lagom-master/tests/test_container_cloning.py": {
        "test_container_can_be_cloned_and_maintains_separate_deps": {
            "name": "test_container_can_be_cloned_and_maintains_separate_deps",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_a_cloned_container_can_have_deps_overwritten": {
            "name": "test_a_cloned_container_can_have_deps_overwritten",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_a_clone_shares_the_parents_singleton_instances": {
            "name": "test_a_clone_shares_the_parents_singleton_instances",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_overwriting_a_singleton_creates_a_new_one": {
            "name": "test_overwriting_a_singleton_creates_a_new_one",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_container_dependency_listing.py": {
        "test_container_can_list_the_types_explicitly_defined": {
            "name": "test_container_can_list_the_types_explicitly_defined",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_container_can_list_the_types_explicitly_defined_in_a_cloned_container": {
            "name": "test_container_can_list_the_types_explicitly_defined_in_a_cloned_container",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_the_container_can_inject_its_own_overview": {
            "name": "test_the_container_can_inject_its_own_overview",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_container_updaters.py": {
        "test_a_new_container_can_be_made_with_singletons": {
            "name": "test_a_new_container_can_be_made_with_singletons",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_new_container_with_singletons_leaves_the_original_unaffected": {
            "name": "test_a_new_container_with_singletons_leaves_the_original_unaffected",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_new_container_can_be_made_with_many_types_as_singletons": {
            "name": "test_a_new_container_can_be_made_with_many_types_as_singletons",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/test_context_based_executions.py": {
        "_load_a_some_dep_then_clean": {
            "name": "_load_a_some_dep_then_clean",
            "location": 42,
            "return": [
                "typing.Generator[SomeDep, None, None]",
                "typing.Generator[SomeDep]"
            ],
            "arguments": {}
        },
        "_load_a_some_wrapper_dep_then_clean": {
            "name": "_load_a_some_wrapper_dep_then_clean",
            "location": 50,
            "return": [
                "typing.Iterator[SomeWrapperDep]",
                "typing.Generator[SomeWrapperDep]"
            ],
            "arguments": {
                "c": [
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_clean_up_of_loaded_contexts_happens_on_container_exit": {
            "name": "test_clean_up_of_loaded_contexts_happens_on_container_exit",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_context_instances_are_not_singletons": {
            "name": "test_context_instances_are_not_singletons",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_instances_can_be_made_singletons": {
            "name": "test_context_instances_can_be_made_singletons",
            "location": 73,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_clean_up_of_loaded_contexts_happens_recursively_on_container_exit": {
            "name": "test_clean_up_of_loaded_contexts_happens_recursively_on_container_exit",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_it_fails_if_the_dependencies_arent_defined_correctly": {
            "name": "test_it_fails_if_the_dependencies_arent_defined_correctly",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_works_with_actual_context_managers": {
            "name": "test_it_works_with_actual_context_managers",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_container_can_be_reused": {
            "name": "test_the_container_can_be_reused",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_container_can_be_nested_though_this_has_no_meaning": {
            "name": "test_the_container_can_be_nested_though_this_has_no_meaning",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SomeWrapperDep.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "SomeDep"
                ]
            }
        },
        "Thing.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str"
                ]
            }
        },
        "test_it_works_with_actual_context_managers.ThingManager.__enter__": {
            "name": "__enter__",
            "location": 112,
            "return": [
                "Thing",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_it_works_with_actual_context_managers.ThingManager.__exit__": {
            "name": "__exit__",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "lagom-master/tests/test_decorators.py": {
        "_do_something": {
            "name": "_do_something",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_do_something_magic": {
            "name": "_do_something_magic",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_doc_strings_are_preserved": {
            "name": "test_doc_strings_are_preserved",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_classes_can_not_be_decorated": {
            "name": "test_classes_can_not_be_decorated",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_classes_can_not_be_magic_decorated": {
            "name": "test_classes_can_not_be_magic_decorated",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/test_dep_definition_functions.py": {
        "test_functions_that_are_typed_can_be_used_by_a_container": {
            "name": "test_functions_that_are_typed_can_be_used_by_a_container",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_the_functions_return_new_instances_each_time": {
            "name": "test_the_functions_return_new_instances_each_time",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_definition_functions_can_yield_instead_of_returning": {
            "name": "test_definition_functions_can_yield_instead_of_returning",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_when_yielding_finally_can_be_used": {
            "name": "test_when_yielding_finally_can_be_used",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "int"
                ]
            }
        },
        "test_functions_can_be_made_into_singletons": {
            "name": "test_functions_can_be_made_into_singletons",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_definition_functions_get_an_instance_of_the_container": {
            "name": "test_definition_functions_get_an_instance_of_the_container",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_yielding_definition_functions_get_an_instance_of_the_container": {
            "name": "test_yielding_definition_functions_get_an_instance_of_the_container",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_singleton_definition_functions_get_an_instance_of_the_container": {
            "name": "test_singleton_definition_functions_get_an_instance_of_the_container",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_functions_that_are_not_typed_raise_an_error": {
            "name": "test_functions_that_are_not_typed_raise_an_error",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_context_managers_can_be_defined_from_a_generator": {
            "name": "test_context_managers_can_be_defined_from_a_generator",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_defining_a_context_manager_does_not_define_the_managed_type_itself": {
            "name": "test_defining_a_context_manager_does_not_define_the_managed_type_itself",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "int"
                ]
            }
        },
        "test_functions_that_are_typed_can_be_used_by_a_container.my_constructor": {
            "name": "my_constructor",
            "location": 26,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_the_functions_return_new_instances_each_time.my_constructor": {
            "name": "my_constructor",
            "location": 34,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_definition_functions_can_yield_instead_of_returning.my_constructor": {
            "name": "my_constructor",
            "location": 44,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_when_yielding_finally_can_be_used.my_constructor": {
            "name": "my_constructor",
            "location": 56,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_functions_can_be_made_into_singletons.my_constructor": {
            "name": "my_constructor",
            "location": 69,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_definition_functions_get_an_instance_of_the_container.my_constructor": {
            "name": "my_constructor",
            "location": 81,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_yielding_definition_functions_get_an_instance_of_the_container.my_constructor": {
            "name": "my_constructor",
            "location": 93,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_singleton_definition_functions_get_an_instance_of_the_container.my_constructor": {
            "name": "my_constructor",
            "location": 105,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_context_managers_can_be_defined_from_a_generator.my_constructor": {
            "name": "my_constructor",
            "location": 121,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_defining_a_context_manager_does_not_define_the_managed_type_itself.my_constructor": {
            "name": "my_constructor",
            "location": 135,
            "return": [
                "typing.Iterator[MyComplexDep]",
                "MyComplexDep"
            ],
            "arguments": {}
        },
        "test_functions_that_are_not_typed_raise_an_error.my_constructor": {
            "name": "my_constructor",
            "location": 115,
            "return": [
                "MyComplexDep"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/test_env_wrapper.py": {
        "test_env_can_be_loaded": {
            "name": "test_env_can_be_loaded",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_defined_env_variables_are_loaded_automatically": {
            "name": "test_defined_env_variables_are_loaded_automatically",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_envs_can_have_a_prefix": {
            "name": "test_envs_can_have_a_prefix",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_errors_are_nice_if_the_env_variable_isnt_set": {
            "name": "test_errors_are_nice_if_the_env_variable_isnt_set",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_all_missing_variable_names_are_listed": {
            "name": "test_all_missing_variable_names_are_listed",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "str"
                ]
            }
        },
        "test_wrong_types_are_handled": {
            "name": "test_wrong_types_are_handled",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "container": [
                    "str"
                ]
            }
        }
    },
    "lagom-master/tests/test_error_handling.py": {
        "test_simple_objects_cannot_be_resolved": {
            "name": "test_simple_objects_cannot_be_resolved",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "int"
                ],
                "dep": [
                    "int",
                    "lagom.Container"
                ]
            }
        },
        "test_generic_io_cant_be_resolved": {
            "name": "test_generic_io_cant_be_resolved",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "int"
                ],
                "dep": [
                    "int",
                    "lagom.Container"
                ]
            }
        },
        "test_raises_error_with_the_dep_that_couldnt_be_built": {
            "name": "test_raises_error_with_the_dep_that_couldnt_be_built",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "int"
                ]
            }
        },
        "test_raises_error_with_the_dep_that_couldnt_be_built_at_the_top_level": {
            "name": "test_raises_error_with_the_dep_that_couldnt_be_built_at_the_top_level",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "int"
                ]
            }
        },
        "test_composite_type_failures_still_throw_sensible_errors": {
            "name": "test_composite_type_failures_still_throw_sensible_errors",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_types_can_be_explicitly_made_unresolvable": {
            "name": "test_types_can_be_explicitly_made_unresolvable",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_types_can_be_explicitly_made_unresolvable_with_a_custom_exception": {
            "name": "test_types_can_be_explicitly_made_unresolvable_with_a_custom_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_circular_imports_raise_a_clear_error": {
            "name": "test_circular_imports_raise_a_clear_error",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "container": [
                    "str"
                ]
            }
        },
        "MyMissingDep.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_stuff": [
                    "str"
                ]
            }
        },
        "UnfulfilledDeps.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_stuff": [
                    "MyMissingDep"
                ]
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "B"
                ]
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "A"
                ]
            }
        }
    },
    "lagom-master/tests/test_explicit_container.py": {
        "test_dependencies_must_be_explicitly_defined": {
            "name": "test_dependencies_must_be_explicitly_defined",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_the_error_suppression_flag_is_honoured": {
            "name": "test_the_error_suppression_flag_is_honoured",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_an_can_build_with_basic_lambdas": {
            "name": "test_an_can_build_with_basic_lambdas",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_aliases_arent_valid_as_they_require_reflection": {
            "name": "test_aliases_arent_valid_as_they_require_reflection",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_singletons_with_aliases_arent_valid_as_they_require_reflection": {
            "name": "test_singletons_with_aliases_arent_valid_as_they_require_reflection",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_the_inner_dependencies_dont_have_to_be_defined_in_the_container": {
            "name": "test_the_inner_dependencies_dont_have_to_be_defined_in_the_container",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_optional_deps_can_be_injected_if_they_can_be_built": {
            "name": "test_optional_deps_can_be_injected_if_they_can_be_built",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_the_clone_of_an_explicit_container_is_also_an_explicit_container": {
            "name": "test_the_clone_of_an_explicit_container_is_also_an_explicit_container",
            "location": 83,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "explicit_container": [
                    "lagom.container.Container"
                ]
            }
        },
        "SomethingBiggerToBuild.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "SomethingToBuild"
                ]
            }
        }
    },
    "lagom-master/tests/test_explicit_partial_functions.py": {
        "example_function": {
            "name": "example_function",
            "location": 17,
            "return": [
                "tuple",
                "int",
                "Union[List[str], List[Any]]",
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "str"
                ]
            }
        },
        "test_functions_decorated_get_the_correct_argument": {
            "name": "test_functions_decorated_get_the_correct_argument",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_injected_arguments_can_over_overridden": {
            "name": "test_injected_arguments_can_over_overridden",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MyDep.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Text",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "lagom-master/tests/test_function_collections.py": {
        "_func_a": {
            "name": "_func_a",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "_func_b": {
            "name": "_func_b",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "test_a_function_collection_can_be_used_by_a_container": {
            "name": "test_a_function_collection_can_be_used_by_a_container",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_injectable_marker.py": {
        "test_injectable_is_falsy": {
            "name": "test_injectable_is_falsy",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trying_to_reference_a_property_on_injectable_raises_an_error": {
            "name": "test_trying_to_reference_a_property_on_injectable_raises_an_error",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trying_to_call_things_on_injectable_raises_an_error": {
            "name": "test_trying_to_call_things_on_injectable_raises_an_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cloning_injectable_is_the_same_injectable": {
            "name": "test_cloning_injectable_is_the_same_injectable",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/test_lambda_loaders.py": {
        "test_lambda_arity_zero_works": {
            "name": "test_lambda_arity_zero_works",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_lambda_arity_one_is_passed_the_container": {
            "name": "test_lambda_arity_one_is_passed_the_container",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "IO[str]"
                ]
            }
        },
        "test_lambda_arity_two_results_in_an_error": {
            "name": "test_lambda_arity_two_results_in_an_error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "ComplexDep.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "some_dep": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        }
    },
    "lagom-master/tests/test_magic_partial_async_functions.py": {
        "test_partial_application_async_functions_pass_iscoroutinefunction": {
            "name": "test_partial_application_async_functions_pass_iscoroutinefunction",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_partial_application_async_functions_with_shared_pass_iscoroutinefunction": {
            "name": "test_partial_application_async_functions_with_shared_pass_iscoroutinefunction",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_magic_partial_classes.py": {
        "test_partial_application_can_be_applied_to_class": {
            "name": "test_partial_application_can_be_applied_to_class",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_class_can_be_bound_multiple_times": {
            "name": "test_one_class_can_be_bound_multiple_times",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_named": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_named",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Foo.greet": {
            "name": "greet",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "not_injected": [
                    "str"
                ],
                "foo": [
                    "Foo"
                ]
            }
        },
        "Bar.greet": {
            "name": "greet",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/test_magic_partial_functions.py": {
        "example_function": {
            "name": "example_function",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "MyDep"
                ]
            }
        },
        "example_function_with_to_injectables": {
            "name": "example_function_with_to_injectables",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "one": [
                    "MyDep"
                ],
                "two": [
                    "MyDep"
                ]
            }
        },
        "example_generator": {
            "name": "example_generator",
            "location": 36,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "MyDep"
                ]
            }
        },
        "another_example_function": {
            "name": "another_example_function",
            "location": 42,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "str"
                ]
            }
        },
        "failing_to_construct_function": {
            "name": "failing_to_construct_function",
            "location": 50,
            "return": [
                "typing.Text",
                "List[Exception]",
                "Optional[float]",
                "Union['Contributor', 'Coverage']"
            ],
            "arguments": {
                "try_to_resolve": [
                    "str",
                    "bool",
                    "Callable[[], bool]",
                    "typing.Callable[[], bool]"
                ]
            }
        },
        "test_partial_application_can_be_applied_to_functions_with_named_args": {
            "name": "test_partial_application_can_be_applied_to_functions_with_named_args",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_returns_something_that_is_considered_a_function": {
            "name": "test_partial_application_returns_something_that_is_considered_a_function",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_can_be_applied_to_functions_with_positional_args_first": {
            "name": "test_partial_application_can_be_applied_to_functions_with_positional_args_first",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_named": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_named",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_injected_arguments_can_be_skipped": {
            "name": "test_injected_arguments_can_be_skipped",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_decorator_can_be_used_to_bind_as_well": {
            "name": "test_a_decorator_can_be_used_to_bind_as_well",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_decorator_can_be_used_to_bind_and_with_positional_arguments": {
            "name": "test_a_decorator_can_be_used_to_bind_and_with_positional_arguments",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_container_values_can_be_overridden": {
            "name": "test_container_values_can_be_overridden",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_call_arguments_results_in_sensible_error_messages": {
            "name": "test_missing_call_arguments_results_in_sensible_error_messages",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_arguments_are_handled_well": {
            "name": "test_incorrect_arguments_are_handled_well",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if_a_typed_argument_cant_be_constructed_a_helpful_exception_is_returned": {
            "name": "test_if_a_typed_argument_cant_be_constructed_a_helpful_exception_is_returned",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_can_be_applied_to_generators": {
            "name": "test_partial_application_can_be_applied_to_generators",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deps_are_loaded_at_call_time_not_definition_time": {
            "name": "test_deps_are_loaded_at_call_time_not_definition_time",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_and_docs_are_kept": {
            "name": "test_name_and_docs_are_kept",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partials_can_be_provided_with_an_update_method": {
            "name": "test_partials_can_be_provided_with_an_update_method",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "MyDep.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Text",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "CantBeAutoConstructed.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "something": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "test_deps_are_loaded_at_call_time_not_definition_time.some_random_unused_function": {
            "name": "some_random_unused_function",
            "location": 132,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "str"
                ]
            }
        },
        "test_partials_can_be_provided_with_an_update_method._my_func": {
            "name": "_my_func",
            "location": 144,
            "return": [
                "tuple[]",
                "float",
                "bytes",
                "bytearray",
                "str",
                "T",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_partials_can_be_provided_with_an_update_method._dep_two_is_dep_one": {
            "name": "_dep_two_is_dep_one",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "T",
                    "Optional[float]",
                    "float"
                ],
                "a": [
                    "int",
                    "T",
                    "Optional[float]",
                    "float"
                ],
                "k": [
                    "float",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "lagom-master/tests/test_magic_partial_functions_scoped_singletons.py": {
        "test_by_default_all_resources_are_reconstructed": {
            "name": "test_by_default_all_resources_are_reconstructed",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_invocation_level_singletons_can_be_defined": {
            "name": "test_invocation_level_singletons_can_be_defined",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_invocation_level_singletons_dont_affect_the_base_container": {
            "name": "test_invocation_level_singletons_dont_affect_the_base_container",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_invocation_level_singletons_are_not_shared_across_calls": {
            "name": "test_invocation_level_singletons_are_not_shared_across_calls",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_that_shared_types_are_lazy_loaded": {
            "name": "test_that_shared_types_are_lazy_loaded",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_partial_application_returns_something_that_is_considered_a_function": {
            "name": "test_partial_application_returns_something_that_is_considered_a_function",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_invocation_level_singletons_respect_container_singletons": {
            "name": "test_invocation_level_singletons_respect_container_singletons",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "SomeCache.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeCache.value": {
            "name": "value",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDepOne.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "SomeCache"
                ]
            }
        },
        "MyDepTwo.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "SomeCache"
                ]
            }
        },
        "test_by_default_all_resources_are_reconstructed.example_function": {
            "name": "example_function",
            "location": 35,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "dep_one": [
                    "Dict[str, Any]"
                ],
                "dep_two": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_invocation_level_singletons_can_be_defined.example_function_with_invocation_level_sharing": {
            "name": "example_function_with_invocation_level_sharing",
            "location": 44,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "dep_one": [],
                "dep_two": []
            }
        },
        "test_invocation_level_singletons_dont_affect_the_base_container.example_function_with_invocation_level_sharing": {
            "name": "example_function_with_invocation_level_sharing",
            "location": 57,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cache_one": [],
                "cache_two": []
            }
        },
        "test_invocation_level_singletons_are_not_shared_across_calls.example_function_with_invocation_level_sharing": {
            "name": "example_function_with_invocation_level_sharing",
            "location": 71,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "dep_one": [],
                "dep_two": []
            }
        },
        "test_that_shared_types_are_lazy_loaded.example_function_that_defines_but_doesnt_use_sharing": {
            "name": "example_function_that_defines_but_doesnt_use_sharing",
            "location": 86,
            "return": [
                "typing.Text",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_partial_application_returns_something_that_is_considered_a_function.example_function_with_shared": {
            "name": "example_function_with_shared",
            "location": 97,
            "return": [
                "typing.Text",
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {}
        },
        "test_invocation_level_singletons_respect_container_singletons.example_function_with_invocation_level_sharing": {
            "name": "example_function_with_invocation_level_sharing",
            "location": 108,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "dep_one": [
                    "Dict[str, Any]"
                ],
                "dep_two": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lagom-master/tests/test_objects.py": {
        "container_with_simple_dep": {
            "name": "container_with_simple_dep",
            "location": 35,
            "return": [],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "Sized"
                ]
            }
        },
        "test_works_for_registered_types": {
            "name": "test_works_for_registered_types",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_simple_dep": [
                    "lagom.Container"
                ]
            }
        },
        "test_works_if_every_item_in_the_constructor_can_be_figured_out": {
            "name": "test_works_if_every_item_in_the_constructor_can_be_figured_out",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_simple_dep": [
                    "lagom.Container"
                ]
            }
        },
        "test_dependencies_are_built_each_request": {
            "name": "test_dependencies_are_built_each_request",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "container_with_simple_dep": [
                    "lagom.Container"
                ],
                "dep": [
                    "lagom.Container"
                ]
            }
        },
        "test_forward_refs_are_fine": {
            "name": "test_forward_refs_are_fine",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_explicitly_typing_self_doesnt_cause_problems": {
            "name": "test_explicitly_typing_self_doesnt_cause_problems",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "MySimpleDep.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stuff": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MyMoreComplicatedDep.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "MySimpleDep"
                ]
            }
        },
        "DepAsAForwardRef.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "SomethingDefinedLater"
                ]
            }
        },
        "TypedSelf.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/test_objects_with_referential_loops.py": {
        "test_definition_loops_return_a_sensible_error": {
            "name": "test_definition_loops_return_a_sensible_error",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "B"
                ]
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "A"
                ]
            }
        }
    },
    "lagom-master/tests/test_optionals_are_well_handled.py": {
        "test_missing_optional_dependencies_cause_no_errors": {
            "name": "test_missing_optional_dependencies_cause_no_errors",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_defaults_for_optional_types_are_honoured": {
            "name": "test_defaults_for_optional_types_are_honoured",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_optional_dependencies_are_understood_and_injected": {
            "name": "test_optional_dependencies_are_understood_and_injected",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_we_can_ask_for_optional_things_that_cant_be_constructed": {
            "name": "test_we_can_ask_for_optional_things_that_cant_be_constructed",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "MyComplexDep.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "something": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "MyDepWithAnOptional.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Optional[MySimpleDep]"
                ]
            }
        },
        "MyDepWithAnOptionalThatCantBeBuilt.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "Optional[MyComplexDep]"
                ]
            }
        }
    },
    "lagom-master/tests/test_overwritting.py": {
        "test_deps_can_be_overridden_by_a_child_class": {
            "name": "test_deps_can_be_overridden_by_a_child_class",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_deps_can_be_overridden_by_anything": {
            "name": "test_deps_can_be_overridden_by_anything",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_explicit_definitions_can_only_be_made_once": {
            "name": "test_explicit_definitions_can_only_be_made_once",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_partial_async_functions.py": {
        "test_partial_application_async_functions_pass_iscoroutinefunction": {
            "name": "test_partial_application_async_functions_pass_iscoroutinefunction",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_partial_application_async_functions_with_shared_pass_iscoroutinefunction": {
            "name": "test_partial_application_async_functions_with_shared_pass_iscoroutinefunction",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_partial_classes.py": {
        "test_partial_application_can_be_applied_to_class": {
            "name": "test_partial_application_can_be_applied_to_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_named": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_named",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_can_be_applied_to_instance_method": {
            "name": "test_partial_application_can_be_applied_to_instance_method",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Foo.greet": {
            "name": "greet",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "not_injected": [
                    "str"
                ],
                "foo": [
                    "Foo"
                ]
            }
        },
        "Bar.greet": {
            "name": "greet",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodBasedBar.greet": {
            "name": "greet",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "foo": [
                    "Foo"
                ]
            }
        }
    },
    "lagom-master/tests/test_partial_functions.py": {
        "example_function": {
            "name": "example_function",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "MyDep"
                ]
            }
        },
        "example_function_with_to_injectables": {
            "name": "example_function_with_to_injectables",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "one": [
                    "MyDep"
                ],
                "two": [
                    "MyDep"
                ]
            }
        },
        "example_generator": {
            "name": "example_generator",
            "location": 38,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "MyDep"
                ]
            }
        },
        "another_example_function": {
            "name": "another_example_function",
            "location": 46,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "str"
                ]
            }
        },
        "failing_to_construct_function": {
            "name": "failing_to_construct_function",
            "location": 54,
            "return": [
                "typing.Text",
                "List[Exception]",
                "Optional[float]",
                "Union['Contributor', 'Coverage']"
            ],
            "arguments": {
                "try_to_resolve": [
                    "str",
                    "Callable[[], bool]",
                    "bool"
                ]
            }
        },
        "test_partial_application_can_be_applied_to_functions_with_named_args": {
            "name": "test_partial_application_can_be_applied_to_functions_with_named_args",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_returns_something_that_is_considered_a_function": {
            "name": "test_partial_application_returns_something_that_is_considered_a_function",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_can_be_applied_to_functions_with_positional_args_first": {
            "name": "test_partial_application_can_be_applied_to_functions_with_positional_args_first",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_positional",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passed_in_arguments_are_used_over_container_generated_ones_when_named": {
            "name": "test_passed_in_arguments_are_used_over_container_generated_ones_when_named",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_injected_arguments_can_be_skipped": {
            "name": "test_injected_arguments_can_be_skipped",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_decorator_can_be_used_to_bind_as_well": {
            "name": "test_a_decorator_can_be_used_to_bind_as_well",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_decorator_can_be_used_to_bind_and_with_positional_arguments": {
            "name": "test_a_decorator_can_be_used_to_bind_and_with_positional_arguments",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_container_values_can_be_overridden": {
            "name": "test_container_values_can_be_overridden",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_call_arguments_results_in_sensible_error_messages": {
            "name": "test_missing_call_arguments_results_in_sensible_error_messages",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_arguments_are_handled_well": {
            "name": "test_incorrect_arguments_are_handled_well",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if_a_typed_argument_cant_be_constructed_a_helpful_exception_is_returned": {
            "name": "test_if_a_typed_argument_cant_be_constructed_a_helpful_exception_is_returned",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_application_can_be_applied_to_generators": {
            "name": "test_partial_application_can_be_applied_to_generators",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deps_are_loaded_at_call_time_not_definition_time": {
            "name": "test_deps_are_loaded_at_call_time_not_definition_time",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_and_docs_are_kept": {
            "name": "test_name_and_docs_are_kept",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partials_can_be_provided_with_an_update_method": {
            "name": "test_partials_can_be_provided_with_an_update_method",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "MyDep.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Text",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "CantBeAutoConstructed.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "something": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "test_deps_are_loaded_at_call_time_not_definition_time.some_random_unused_function": {
            "name": "some_random_unused_function",
            "location": 137,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "resolved": [
                    "str"
                ]
            }
        },
        "test_partials_can_be_provided_with_an_update_method._my_func": {
            "name": "_my_func",
            "location": 149,
            "return": [
                "tuple[]",
                "float",
                "bytes",
                "bytearray",
                "str",
                "T",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_partials_can_be_provided_with_an_update_method._dep_two_is_dep_one": {
            "name": "_dep_two_is_dep_one",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "T",
                    "Optional[float]",
                    "float"
                ],
                "a": [
                    "int",
                    "T",
                    "Optional[float]",
                    "float"
                ],
                "k": [
                    "float",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "lagom-master/tests/test_rich_typing.py": {
        "test_newtype_works_well_with_the_container": {
            "name": "test_newtype_works_well_with_the_container",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_lists_of_newtype_work_well_with_the_container": {
            "name": "test_lists_of_newtype_work_well_with_the_container",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_protocols_work_well_with_the_container": {
            "name": "test_protocols_work_well_with_the_container",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "str",
                    "lagom.Container"
                ]
            }
        },
        "ApiClientOfSomeKind.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "MyServiceUrl"
                ]
            }
        },
        "LoadBalancePerhaps.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "List[MyServiceUrl]"
                ]
            }
        },
        "BakerProtocol.bake": {
            "name": "bake",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bakery.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baker": [
                    "BakerProtocol"
                ]
            }
        },
        "CrumpetBaker.bake": {
            "name": "bake",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/test_shorter_syntax.py": {
        "test_deps_can_be_referenced_by_square_brackets": {
            "name": "test_deps_can_be_referenced_by_square_brackets",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_construction_type_can_be_omitted": {
            "name": "test_construction_type_can_be_omitted",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_singleton_type_can_be_omitted": {
            "name": "test_singleton_type_can_be_omitted",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "str",
                    "lagom.Container",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_alias_can_be_omitted": {
            "name": "test_alias_can_be_omitted",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "MySimpleDep.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stuff": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MyMoreComplicatedDep.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "MySimpleDep"
                ]
            }
        }
    },
    "lagom-master/tests/test_singleton.py": {
        "container_with_deps": {
            "name": "container_with_deps",
            "location": 22,
            "return": [],
            "arguments": {
                "container": [
                    "lagom.Container",
                    "str"
                ]
            }
        },
        "test_singleton_is_only_resolved_once": {
            "name": "test_singleton_is_only_resolved_once",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_deps": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_singleton_can_have_construction_logic": {
            "name": "test_singleton_can_have_construction_logic",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_deps": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_singleton_can_compose_other_dependencies": {
            "name": "test_singleton_can_compose_other_dependencies",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "container_with_deps": [
                    "lagom.container.Container"
                ]
            }
        },
        "MyMoreComplicatedDep.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "some_number": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MyCompositeDep.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "MyBasicDep"
                ],
                "b": [
                    "MyMoreComplicatedDep"
                ]
            }
        }
    },
    "lagom-master/tests/test_temporary_singletons.py": {
        "test_temporary_singletons_work": {
            "name": "test_temporary_singletons_work",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_temporary_singletons_dont_effect_the_base_container": {
            "name": "test_temporary_singletons_dont_effect_the_base_container",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_temporary_singletons_context_is_reusable_but_doesnt_share_state": {
            "name": "test_temporary_singletons_context_is_reusable_but_doesnt_share_state",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        }
    },
    "lagom-master/tests/test_undefinied_dep_logging.py": {
        "test_it_writes_a_warning_every_time_reflection_is_used": {
            "name": "test_it_writes_a_warning_every_time_reflection_is_used",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_by_default_it_doesnt_log": {
            "name": "test_by_default_it_doesnt_log",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        }
    },
    "lagom-master/tests/__init__.py": {},
    "lagom-master/tests/benchmarking/core_domain.py": {
        "SomeOtherThingAsAsingleton.work": {
            "name": "work",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeService.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SomeOtherThingAsAsingleton"
                ]
            }
        },
        "SomeService.do_it": {
            "name": "do_it",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AThingIMightNeed.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "SomeService"
                ]
            }
        },
        "AThingIMightNeed.do_it": {
            "name": "do_it",
            "location": 20,
            "return": [
                "str",
                "List[List[str]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/benchmarking/test_basic_benchmarks.py": {
        "test_magic": {
            "name": "test_magic",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        },
        "test_plain": {
            "name": "test_plain",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        },
        "test_optimised": {
            "name": "test_optimised",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        },
        "test_magic.do_work": {
            "name": "do_work",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": []
            }
        },
        "test_magic.do_pretend_work": {
            "name": "do_pretend_work",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_plain.do_work": {
            "name": "do_work",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": []
            }
        },
        "test_plain.do_pretend_work": {
            "name": "do_pretend_work",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_optimised.do_work": {
            "name": "do_work",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thing": [
                    "Callable",
                    "Union[int, float]",
                    "str",
                    "Iterator",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_optimised.do_pretend_work": {
            "name": "do_pretend_work",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/benchmarking/__init__.py": {},
    "lagom-master/tests/bug_fixes/resources_for_189.py": {
        "a_bound_function": {
            "name": "a_bound_function",
            "location": 12,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "Sequence[int]"
            ],
            "arguments": {
                "dep": [
                    "bool",
                    "Tuple[int]",
                    "list",
                    "List[bytes]",
                    "str"
                ]
            }
        }
    },
    "lagom-master/tests/bug_fixes/test_159_alias_to_self_recursion_error.py": {
        "test_it_now_works": {
            "name": "test_it_now_works",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/bug_fixes/test_189_lagom_functions_should_be_mockable.py": {
        "test_a_bound_function_can_be_mocked": {
            "name": "test_a_bound_function_can_be_mocked",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/bug_fixes/test_alias_to_constructor_skipped.py": {
        "test_an_alias_doesnt_skip_a_defined_constructor": {
            "name": "test_an_alias_doesnt_skip_a_defined_constructor",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Something.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Text",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "lagom-master/tests/experimental/test_function_injection.py": {
        "add_stuff": {
            "name": "add_stuff",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_ways_of_constructing_functions_can_be_provided": {
            "name": "test_ways_of_constructing_functions_can_be_provided",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "ClassNeedingAFunction.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adder": [
                    "Callable[([int, int], int)]"
                ]
            }
        },
        "ClassNeedingAFunction.trigger": {
            "name": "trigger",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "lagom-master/tests/experimental/__init__.py": {},
    "lagom-master/tests/experimental/integrations/conftest.py": {
        "django_integration": {
            "name": "django_integration",
            "location": 23,
            "return": [
                "bool",
                "DjangoIntegration"
            ],
            "arguments": {}
        },
        "FakeDjangoModel.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/experimental/integrations/test_click_integration.py": {
        "hello": {
            "name": "hello",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "io": [
                    "str"
                ]
            }
        },
        "test_click_io_objected_is_injected_and_proxies_click_as_expected": {
            "name": "test_click_io_objected_is_injected_and_proxies_click_as_expected",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_reference_to_the_plain_function_is_exposed_for_testing": {
            "name": "test_a_reference_to_the_plain_function_is_exposed_for_testing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/experimental/integrations/test_django_integration.py": {
        "test_django_models_can_be_created": {
            "name": "test_django_models_can_be_created",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "django_integration": [
                    "lagom.experimental.integrations.django.DjangoIntegration"
                ]
            }
        },
        "test_django_models_can_be_managed": {
            "name": "test_django_models_can_be_managed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "django_integration": [
                    "lagom.experimental.integrations.django.DjangoIntegration"
                ]
            }
        },
        "test_django_models_can_be_managed_via_a_custom_manager": {
            "name": "test_django_models_can_be_managed_via_a_custom_manager",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "django_integration": [
                    "lagom.experimental.integrations.django.DjangoIntegration"
                ]
            }
        },
        "test_trying_to_load_a_non_existent_manager_throws_a_sensible_error": {
            "name": "test_trying_to_load_a_non_existent_manager_throws_a_sensible_error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "django_integration": [
                    "lagom.experimental.integrations.django.DjangoIntegration"
                ]
            }
        }
    },
    "lagom-master/tests/experimental/integrations/__init__.py": {},
    "lagom-master/tests/integrations/test_fastapi.py": {
        "test_request_singletons_are_the_same_within_a_request_context": {
            "name": "test_request_singletons_are_the_same_within_a_request_context",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_singletons_are_different_for_new_requests": {
            "name": "test_request_singletons_are_different_for_new_requests",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deps_can_be_overridden_during_test": {
            "name": "test_deps_can_be_overridden_during_test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fixture_fake_deps": {
            "name": "fixture_fake_deps",
            "location": 34,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_overriding_with_fixtures_works": {
            "name": "test_overriding_with_fixtures_works",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "fixture_fake_deps": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_deps_can_be_overridden_during_test_multiple_times": {
            "name": "test_deps_can_be_overridden_during_test_multiple_times",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deps_can_use_contexts_for_cleanup_tasks": {
            "name": "test_deps_can_use_contexts_for_cleanup_tasks",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "lagom-master/tests/integrations/test_fastapi_integration.py": {},
    "lagom-master/tests/integrations/test_flask.py": {
        "test_flask_container_provides_a_route_decorator": {
            "name": "test_flask_container_provides_a_route_decorator",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "test_the_route_decorator_can_have_request_level_singletons": {
            "name": "test_the_route_decorator_can_have_request_level_singletons",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.container.Container"
                ]
            }
        },
        "ComplexDep.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_flask_container_provides_a_route_decorator._some_handler": {
            "name": "_some_handler",
            "location": 19,
            "return": [],
            "arguments": {
                "dep": []
            }
        },
        "test_the_route_decorator_can_have_request_level_singletons._some_handler": {
            "name": "_some_handler",
            "location": 36,
            "return": [
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "dep_one": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dep_two": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "lagom-master/tests/integrations/test_starlette.py": {
        "some_handler": {
            "name": "some_handler",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "dep": [
                    "MyDep"
                ]
            }
        },
        "two_dep_handler": {
            "name": "two_dep_handler",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "dep_one": [
                    "MyDep"
                ],
                "dep_two": [
                    "MyDep"
                ]
            }
        },
        "test_a_special_starlette_container_can_be_used_and_provides_routes": {
            "name": "test_a_special_starlette_container_can_be_used_and_provides_routes",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_the_starlette_container_can_define_request_level_singletons": {
            "name": "test_the_starlette_container_can_define_request_level_singletons",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_starlette_container_can_handle_websocket_funcs": {
            "name": "test_starlette_container_can_handle_websocket_funcs",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "test_starlette_container_can_handle_websocket_endpoints": {
            "name": "test_starlette_container_can_handle_websocket_endpoints",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "container": [
                    "lagom.Container"
                ]
            }
        },
        "ComplexDep.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "something": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "lagom-master/tests/integrations/__init__.py": {},
    "lagom-master/tests/integrations/fastapi_app/__init__.py": {
        "_load_then_clean": {
            "name": "_load_then_clean",
            "location": 46,
            "return": [
                "typing.Iterator[ContextLoaded]",
                "typing.Generator[ContextLoaded]"
            ],
            "arguments": {}
        },
        "Inner.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "None",
                    "bool",
                    "IO",
                    "typing.IO",
                    "Optional[int]"
                ]
            }
        },
        "Outer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Inner"
                ]
            }
        },
        "ContextLoaded.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lagom-master/tests/util/test_functional.py": {
        "_func_a": {
            "name": "_func_a",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_func_b": {
            "name": "_func_b",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_we_can_get_arity_from_functions": {
            "name": "test_we_can_get_arity_from_functions",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_func": [
                    "int",
                    "str",
                    "List[Tuple[int, int, float]]",
                    "list[tuple[typing.Union[int,int,float]]]"
                ],
                "expected_arity": [
                    "int",
                    "str",
                    "List[Tuple[int, int, float]]",
                    "list[tuple[typing.Union[int,int,float]]]"
                ]
            }
        },
        "test_function_collections_are_the_same_if_they_have_the_same_functions": {
            "name": "test_function_collections_are_the_same_if_they_have_the_same_functions",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function_collections_have_equality_to_a_list_of_those_functions": {
            "name": "test_function_collections_have_equality_to_a_list_of_those_functions",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function_collections_are_iterable": {
            "name": "test_function_collections_are_iterable",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
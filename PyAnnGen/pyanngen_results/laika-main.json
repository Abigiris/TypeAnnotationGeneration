{
    "laika-main/features/environment.py": {
        "before_scenario": {
            "name": "before_scenario",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "scenario": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "laika-main/features/steps/fixture_repository.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "int"
                ],
                "shell": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "laika-main/features/steps/run_command.py": {
        "resolve_known_dir": {
            "name": "resolve_known_dir",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "step_impl": {
            "name": "step_impl",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Dict[int,dict]",
                    "Dict",
                    "str"
                ],
                "expected_status_code": [
                    "bool",
                    "Dict[int, dict]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "laika-main/laika/cli.py": {
        "_build_parser": {
            "name": "_build_parser",
            "location": 11,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "default_no_color": [
                    "str",
                    "None",
                    "List[str]",
                    "float",
                    "Optional[List[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "laika-main/laika/core.py": {
        "build_command_line": {
            "name": "build_command_line",
            "location": 178,
            "return": [
                "list"
            ],
            "arguments": {
                "args": []
            }
        },
        "load_build": {
            "name": "load_build",
            "location": 182,
            "return": [
                "Build"
            ],
            "arguments": {
                "build_id": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "deploy_root": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "build_shell_command": {
            "name": "build_shell_command",
            "location": 187,
            "return": [
                "list"
            ],
            "arguments": {
                "command": [
                    "dict",
                    "list",
                    "str"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "run_command_on_build": {
            "name": "run_command_on_build",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "Optional[pathlib.Path]"
                ],
                "build": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "reporter": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "run_build": {
            "name": "run_build",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "str",
                    "Optional[List[str]]"
                ],
                "config": [
                    "str",
                    "Optional[List[str]]"
                ],
                "reporter": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_build": {
            "name": "get_build",
            "location": 220,
            "return": [
                "Build"
            ],
            "arguments": {
                "build_path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PosixPath"
                ]
            }
        },
        "list_builds": {
            "name": "list_builds",
            "location": 229,
            "return": [
                "Builds"
            ],
            "arguments": {
                "deploy_path": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "allow_invalid": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "post_deploy": {
            "name": "post_deploy",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [],
                "config": [
                    "Optional[List[str]]"
                ],
                "reporter": []
            }
        },
        "deploy_prepared_build": {
            "name": "deploy_prepared_build",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "Optional[str]",
                    "str"
                ],
                "config": [
                    "configparser.ConfigParser",
                    "Optional[dict]",
                    "Dict[str, str]",
                    "Optional[List[str]]"
                ],
                "reporter": [
                    "dict"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Config._get_dir": {
            "name": "_get_dir",
            "location": 32,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "dir_spec": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Config.git_dir": {
            "name": "git_dir",
            "location": 36,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.deploy_root": {
            "name": "deploy_root",
            "location": 40,
            "return": [
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.build_command": {
            "name": "build_command",
            "location": 44,
            "return": [
                "str",
                "list",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.post_deploy_command": {
            "name": "post_deploy_command",
            "location": 48,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.purge_what": {
            "name": "purge_what",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.shell": {
            "name": "shell",
            "location": 56,
            "return": [
                "bool",
                "Mapping[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.read": {
            "name": "read",
            "location": 60,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfig]"
                ],
                "filename": [
                    "str",
                    "List[dict]"
                ]
            }
        },
        "TerminateApplication.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BuildMeta.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool"
                ],
                "git_ref": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "git_hash": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BuildMeta.from_dict": {
            "name": "from_dict",
            "location": 103,
            "return": [
                "BuildMeta"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBuildMeta]"
                ],
                "d": [
                    "Any",
                    "dict"
                ]
            }
        },
        "BuildMeta.to_dict": {
            "name": "to_dict",
            "location": 117,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_id": [
                    "str",
                    "pathlib.Path"
                ],
                "path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "meta": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Build.is_older_than": {
            "name": "is_older_than",
            "location": 134,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "bool",
                    "int",
                    "List[int]",
                    "Callable",
                    "Awaitable[T]"
                ]
            }
        },
        "Build.is_metadata_missing": {
            "name": "is_metadata_missing",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builds.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builds": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pathlib.Path",
                    "List[str]"
                ],
                "current_id": [
                    "Dict[Any, List[str]]",
                    "Dict[int, Any]",
                    "set",
                    "Set[str]"
                ]
            }
        },
        "Builds.__iter__": {
            "name": "__iter__",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builds.__bool__": {
            "name": "__bool__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builds.is_selected": {
            "name": "is_selected",
            "location": 155,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "build": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "BuildMetaFile.read": {
            "name": "read",
            "location": 163,
            "return": [
                "BuildMeta"
            ],
            "arguments": {
                "cls": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PurePath",
                    "str"
                ],
                "build_dir": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PurePath",
                    "str"
                ]
            }
        },
        "BuildMetaFile.write": {
            "name": "write",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PurePath",
                    "str"
                ],
                "build_dir": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PurePath",
                    "str"
                ],
                "meta": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "list_builds.resolve_current_build": {
            "name": "resolve_current_build",
            "location": 234,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "build": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "list_builds._accept_build": {
            "name": "_accept_build",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "build": []
            }
        }
    },
    "laika-main/laika/output.py": {
        "null_formatter": {
            "name": "null_formatter",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "color": []
            }
        },
        "null_formatter.format_message": {
            "name": "format_message",
            "location": 7,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "Reporter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "Reporter.success": {
            "name": "success",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Reporter.info": {
            "name": "info",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Reporter.error": {
            "name": "error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "laika-main/laika/purge.py": {
        "purge_deployments": {
            "name": "purge_deployments",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PurgeSpecification.filter": {
            "name": "filter",
            "location": 13,
            "return": [
                "List[core.Build]",
                "None"
            ],
            "arguments": {
                "self": [],
                "builds": [
                    "Dict"
                ]
            }
        },
        "PurgeSpecification.describe": {
            "name": "describe",
            "location": 17,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurgeSpecification._build_meta_sort_key": {
            "name": "_build_meta_sort_key",
            "location": 21,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "build": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Dict"
                ]
            }
        },
        "PurgeSpecification.sort_latest_first": {
            "name": "sort_latest_first",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]"
                ],
                "builds": [
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "PurgeSpecification.keep_latest": {
            "name": "keep_latest",
            "location": 32,
            "return": [
                "KeepLatestN"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "num_latest": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "PurgeSpecification.discard_older_than": {
            "name": "discard_older_than",
            "location": 36,
            "return": [
                "DiscardOlderThan"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "oldest_allowed_datetime": [
                    "bool",
                    "datetime.datetime",
                    "Dict[str,Any]",
                    "str",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "KeepLatestN.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_latest": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "KeepLatestN.filter": {
            "name": "filter",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "builds": [
                    "Dict"
                ]
            }
        },
        "KeepLatestN.describe": {
            "name": "describe",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscardOlderThan.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oldest_allowed_datetime": [
                    "bool",
                    "List[int]",
                    "datetime.datetime",
                    "None",
                    "int",
                    "Optional[datetime.date]",
                    "datetime.date"
                ]
            }
        },
        "DiscardOlderThan.filter": {
            "name": "filter",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "builds": [
                    "str",
                    "Build"
                ]
            }
        },
        "DiscardOlderThan.describe": {
            "name": "describe",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "laika-main/laika/term_color.py": {
        "render": {
            "name": "render",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "fg": [
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "int",
                    "Tuple",
                    "List[Dict[str,Any]]",
                    "Any",
                    "Optional[Outcome]",
                    "List[dict[str,Any]]"
                ],
                "bg": [
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "int",
                    "Tuple",
                    "List[Dict[str,Any]]",
                    "Any",
                    "Optional[Outcome]",
                    "List[dict[str,Any]]"
                ],
                "bold": [
                    "bool",
                    "None",
                    "Optional[Outcome]",
                    "Optional[bool]",
                    "Union[int,None]"
                ]
            }
        },
        "formatted_span": {
            "name": "formatted_span",
            "location": 36,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "fg": [
                    "bool",
                    "None",
                    "float",
                    "List[Tuple[int,str]]",
                    "str",
                    "List[tuple[Union[int,str]]]",
                    "int"
                ],
                "bg": [
                    "bool",
                    "None",
                    "float",
                    "List[Tuple[int,str]]",
                    "str",
                    "List[tuple[Union[int,str]]]",
                    "int"
                ],
                "bold": [
                    "bool",
                    "None",
                    "float",
                    "List[Tuple[int,str]]",
                    "str",
                    "List[tuple[Union[int,str]]]",
                    "int"
                ]
            }
        },
        "Color.of": {
            "name": "of",
            "location": 15,
            "return": [
                "cls",
                "str",
                "Optional[str]",
                "int",
                "Optional[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "color_or_name": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "formatted_span.renderer": {
            "name": "renderer",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "slice",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "laika-main/laika/__init__.py": {
        "_get_version": {
            "name": "_get_version",
            "location": 1,
            "return": [
                "Text",
                "str",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "package_name": [
                    "str"
                ]
            }
        }
    },
    "laika-main/laika/backend/__init__.py": {},
    "laika-main/laika/backend/git/tree.py": {
        "checkout_tree_for_build": {
            "name": "checkout_tree_for_build",
            "location": 11,
            "return": [
                "laika.core.Build"
            ],
            "arguments": {
                "deploy_root": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fetch_first": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "List[str]",
                    "pathlib.Path",
                    "Path"
                ],
                "git_ref": [
                    "Dict[str,Any]",
                    "str",
                    "pathlib.Path",
                    "Callable[Any,None]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "git_dir": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "reporter": [
                    "Sequence[str]",
                    "Union[pathlib.Path, str]",
                    "Optional[Callable[[None], None]]"
                ]
            }
        }
    },
    "laika-main/laika/backend/git/__init__.py": {},
    "laika-main/laika/commands/build.py": {
        "cmd_build": {
            "name": "cmd_build",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "Dict[str,str]",
                    "OrderedDict",
                    "Dict",
                    "tbump.config.Config"
                ],
                "reporter": [
                    "Dict[str, str]",
                    "tbump.config.Config",
                    "OrderedDict",
                    "dict"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "laika-main/laika/commands/deploy.py": {
        "cmd_deploy": {
            "name": "cmd_deploy",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "Dict[str,str]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "reporter": [
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "laika-main/laika/commands/list.py": {
        "cmd_list": {
            "name": "cmd_list",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "Dict[str,Any]",
                    "str",
                    "Config"
                ],
                "reporter": [
                    "Dict[str,Any]",
                    "Dict",
                    "_pytesconfig.Config",
                    "bool",
                    "Dict[str,str]",
                    "Config"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "dict"
                ]
            }
        },
        "cmd_list.format_flags": {
            "name": "format_flags",
            "location": 5,
            "return": [
                "Text",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,bool]",
                "str"
            ],
            "arguments": {
                "build": [
                    "config.Config",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "laika-main/laika/commands/purge.py": {
        "cmd_purge": {
            "name": "cmd_purge",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "Dict[str,Any]",
                    "sphinx.config.Config",
                    "static_frame.core.store.StoreConfigMapInitializer"
                ],
                "reporter": [
                    "Callable",
                    "flask.config.Config",
                    "dict"
                ]
            }
        },
        "_find_what_to_purge": {
            "name": "_find_what_to_purge",
            "location": 28,
            "return": [
                "Optional[Union[(laika.purge.DiscardOlderThan, laika.purge.KeepLatestN)]]"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "None",
                    "core.Config",
                    "Type",
                    "_pytesconfig.Config",
                    "Type[BaseConfig]"
                ]
            }
        },
        "parse_deployments_specification": {
            "name": "parse_deployments_specification",
            "location": 43,
            "return": [
                "Union[(laika.purge.DiscardOlderThan, laika.purge.KeepLatestN)]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "OrderedDict"
                ]
            }
        },
        "relative_time": {
            "name": "relative_time",
            "location": 53,
            "return": [
                "str",
                "float",
                "None",
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "non_negative_int": {
            "name": "non_negative_int",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bool"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "argparse._SubParsersAction",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "laika-main/laika/commands/select.py": {
        "cmd_select": {
            "name": "cmd_select",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "model.Config",
                    "sphinx.config.Config",
                    "Config",
                    "config.Config"
                ],
                "reporter": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool",
                    "flask.config.Config"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "laika-main/laika/commands/__init__.py": {
        "find_available_command_modules": {
            "name": "find_available_command_modules",
            "location": 5,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {}
        }
    },
    "laika-main/laika/git/__init__.py": {
        "git_rev_parse_short": {
            "name": "git_rev_parse_short",
            "location": 11,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "ref": [
                    "Optional[int]",
                    "int",
                    "Tuple",
                    "None",
                    "bytes",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "bool"
                ],
                "gitdir": [
                    "Optional[int]",
                    "None",
                    "Tuple",
                    "int",
                    "bytes",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "bool"
                ]
            }
        },
        "git_rev_parse": {
            "name": "git_rev_parse",
            "location": 15,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "ref": [
                    "type"
                ],
                "short": [
                    "Type",
                    "bool"
                ],
                "gitdir": [
                    "str",
                    "None"
                ]
            }
        },
        "normalize_refname": {
            "name": "normalize_refname",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "refname": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        }
    },
    "laika-main/testing_helpers/dirs.py": {
        "DirectoryContext.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryContext.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [
                "DirectoryContext"
            ],
            "arguments": {
                "self": [
                    "_TDirectoryContext@@DirectoryContext@@"
                ]
            }
        },
        "DirectoryContext.__exit__": {
            "name": "__exit__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryContext.path": {
            "name": "path",
            "location": 17,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryContext.run": {
            "name": "run",
            "location": 20,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bool",
                    "str",
                    "BaseException",
                    "List[str]",
                    "pathlib.Path",
                    "None",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "laika-main/testing_helpers/git.py": {
        "GitRepo.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GitRepo.create": {
            "name": "create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.run": {
            "name": "run",
            "location": 16,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "laika-main/testing_helpers/__init__.py": {},
    "laika-main/testing_helpers/fixtures/git.py": {
        "root_dir": {
            "name": "root_dir",
            "location": 15,
            "return": [
                "typing.Generator[DirectoryContext]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "default_git_repo": {
            "name": "default_git_repo",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Union[str,IO[bytes]]",
                    "IO"
                ]
            }
        },
        "update_config_file": {
            "name": "update_config_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str"
                ],
                "action": [
                    "str",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "set_build_command": {
            "name": "set_build_command",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "command": [
                    "str",
                    "bool",
                    "List",
                    "Callable[Any,bool]",
                    "Callable[[Any],bool]",
                    "Iterable[str]"
                ]
            }
        },
        "set_post_deploy_command": {
            "name": "set_post_deploy_command",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict"
                ],
                "command": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "set_shell": {
            "name": "set_shell",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "str",
                    "bool",
                    "TextIO",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ],
                "shell": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "None",
                    "Sequence"
                ]
            }
        },
        "set_build_command.update": {
            "name": "update",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "set_post_deploy_command.update": {
            "name": "update",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "set_shell.update": {
            "name": "update",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "laika-main/testing_helpers/fixtures/__init__.py": {},
    "laika-main/tests/test_basic.py": {
        "git_repo": {
            "name": "git_repo",
            "location": 8,
            "return": [
                "typing.Generator[GitRepo]"
            ],
            "arguments": {}
        },
        "test_one": {
            "name": "test_one",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "git_repo": [
                    "testing_helpers.giGitRepo"
                ]
            }
        }
    }
}
{
    "landshark-master/setup.py": {},
    "landshark-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {
                "root": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "manifest_in": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "versionfile_source": [
                    "str",
                    "Union[int, str]",
                    "bool"
                ],
                "ipy": [
                    "str",
                    "int",
                    "Callable",
                    "List[Union[\"PipeChain\", str]]",
                    "float"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [
                "str",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "versions": [
                    "str"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [
                "Dict[(str, type)]"
            ],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [
                "str",
                "Optional[str]",
                "kedro.io.core.Version"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/configs/nn_classification.py": {
        "model": {
            "name": "model",
            "location": 26,
            "return": [
                "Callable",
                "str",
                "trezor.utils.Writer",
                "int"
            ],
            "arguments": {
                "mode": [
                    "float",
                    "str",
                    "raiden.utils.PaymentAmount"
                ],
                "X_con": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_con_mask": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat_mask": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "Y": [
                    "str",
                    "bool",
                    "int"
                ],
                "image_indices": [
                    "bool",
                    "tensorflow.Tensor",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ],
                "coordinates": [
                    "bool",
                    "tensorflow.Tensor",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ]
            }
        }
    },
    "landshark-master/configs/nn_regression.py": {
        "model": {
            "name": "model",
            "location": 26,
            "return": [
                "Callable",
                "str",
                "trezor.utils.Writer",
                "int"
            ],
            "arguments": {
                "mode": [
                    "float",
                    "str",
                    "raiden.utils.PaymentAmount"
                ],
                "X_con": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_con_mask": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat_mask": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "Y": [
                    "int",
                    "float",
                    "str",
                    "List[List[float]]",
                    "list[list[float]]"
                ],
                "image_indices": [
                    "bool",
                    "tensorflow.Tensor",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ],
                "coordinates": [
                    "bool",
                    "tensorflow.Tensor",
                    "list[str]",
                    "None",
                    "Optional[List[str]]",
                    "int"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ]
            }
        }
    },
    "landshark-master/configs/sklearn_classification.py": {
        "SKModel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "SKModel.train": {
            "name": "train",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X_con": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "indices": [
                    "np.ndarray"
                ],
                "coords": [
                    "np.ndarray"
                ],
                "Y": [
                    "np.ndarray"
                ]
            }
        },
        "SKModel.test": {
            "name": "test",
            "location": 75,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "Y": [
                    "Mapping[str, Any]",
                    "bool"
                ],
                "predictions": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "SKModel.predict": {
            "name": "predict",
            "location": 82,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "X_con": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "indices": [
                    "np.ndarray"
                ],
                "coords": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/configs/sklearn_regression.py": {
        "SKModel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "SKModel.train": {
            "name": "train",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X_con": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "X_cat": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "indices": [
                    "np.ndarray"
                ],
                "coords": [
                    "np.ndarray"
                ],
                "Y": [
                    "np.ndarray"
                ]
            }
        },
        "SKModel.test": {
            "name": "test",
            "location": 74,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "Y": [],
                "predictions": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SKModel.predict": {
            "name": "predict",
            "location": 83,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "X_con": [
                    "Dict[(str, Any)]"
                ],
                "X_cat": [
                    "Dict[(str, Any)]"
                ],
                "indices": [
                    "np.ndarray"
                ],
                "coords": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/integration/conftest.py": {
        "data_loc": {
            "name": "data_loc",
            "location": 29,
            "return": [
                "tuple[str]",
                "dict",
                "list",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "landshark-master/integration/test_pipeline.py": {
        "whichfeatures": {
            "name": "whichfeatures",
            "location": 59,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "_pytesfixtures.FixtureRequest",
                    "Callable"
                ]
            }
        },
        "whichproblem": {
            "name": "whichproblem",
            "location": 64,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "_pytesfixtures.FixtureRequest",
                    "Callable"
                ]
            }
        },
        "number_of_cpus": {
            "name": "number_of_cpus",
            "location": 69,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "_pytesfixtures.FixtureRequest"
                ]
            }
        },
        "half_width": {
            "name": "half_width",
            "location": 74,
            "return": [
                "float",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "_pytesfixtures.FixtureRequest",
                    "Callable"
                ]
            }
        },
        "whichalgo": {
            "name": "whichalgo",
            "location": 79,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "_pytesfixtures.FixtureRequest",
                    "Callable"
                ]
            }
        },
        "import_tifs": {
            "name": "import_tifs",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "cat_dir": [
                    "str"
                ],
                "con_dir": [
                    "str"
                ],
                "feature_string": [
                    "str",
                    "bool"
                ],
                "ncpus": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "import_targets": {
            "name": "import_targets",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "target_dir": [
                    "str"
                ],
                "target_name": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "target_flags": [
                    "str"
                ],
                "ncpus": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "extract_training_data": {
            "name": "extract_training_data",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "target_file": [
                    "str",
                    "int",
                    "typing.Callable[float, None]",
                    "Callable[[float], None]",
                    "Callable[[int, int], None]"
                ],
                "target_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ncpus": [
                    "str",
                    "int",
                    "typing.Callable[float, None]",
                    "Callable[[float], None]",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "extract_query_data": {
            "name": "extract_query_data",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "feature_file": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "TextIO",
                    "typing.TextIO"
                ],
                "ncpus": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "float",
                    "Set[str]",
                    "set[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "model_dir": [
                    "bool",
                    "str"
                ],
                "model_filename": [
                    "bool",
                    "str",
                    "int"
                ],
                "trainingdata_folder": [
                    "bool",
                    "float",
                    "Set[str]",
                    "set[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "training_args": [
                    "bool",
                    "float",
                    "Set[str]",
                    "set[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model_filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "trained_model_dir": [
                    "str",
                    "bool",
                    "float",
                    "Union[str, bool]"
                ],
                "querydata_folder": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target_name": [
                    "str"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "tuple[typing.Union[str,int]]",
                    "str",
                    "int",
                    "Tuple[str, int]"
                ]
            }
        },
        "test_full_pipeline": {
            "name": "test_full_pipeline",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[int, str]"
                ],
                "data_loc": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "whichfeatures": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "whichproblem": [
                    "str",
                    "int"
                ],
                "whichalgo": [
                    "int",
                    "str",
                    "Union[int, str]",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "number_of_cpus": [
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "half_width": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "landshark-master/landshark/basetypes.py": {
        "Reader.__enter__": {
            "name": "__enter__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.__exit__": {
            "name": "__exit__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex_type": [
                    "type"
                ],
                "ex_val": [
                    "Exception"
                ],
                "ex_tb": [
                    "types.TracebackType"
                ]
            }
        },
        "Reader.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Worker.__call__": {
            "name": "__call__",
            "location": 73,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool",
                    "list[T]",
                    "numpy.ndarray",
                    "T",
                    "List[mypy.types.Type.VarId]"
                ]
            }
        },
        "IdReader.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "T"
                ]
            }
        },
        "IdWorker.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T"
                ]
            }
        },
        "ArraySource.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.shape": {
            "name": "shape",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.dtype": {
            "name": "dtype",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.native": {
            "name": "native",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.missing": {
            "name": "missing",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.columns": {
            "name": "columns",
            "location": 156,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.__call__": {
            "name": "__call__",
            "location": 169,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "FixedSlice"
                ]
            }
        },
        "ArraySource.__enter__": {
            "name": "__enter__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySource.__exit__": {
            "name": "__exit__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex_type": [
                    "type"
                ],
                "ex_val": [
                    "Exception"
                ],
                "ex_tb": [
                    "types.TracebackType"
                ]
            }
        },
        "ArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 204,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        },
        "ArraySource.__len__": {
            "name": "__len__",
            "location": 208,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/category.py": {
        "_unique_values": {
            "name": "_unique_values",
            "location": 45,
            "return": [
                "Tuple[(List[np.ndarray], List[int])]"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "get_maps": {
            "name": "get_maps",
            "location": 78,
            "return": [
                "CategoryInfo"
            ],
            "arguments": {
                "src": [
                    "landshark.basetypes.CategoricalArraySource"
                ],
                "batchrows": [
                    "int"
                ]
            }
        },
        "_CategoryAccumulator.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing_value": [
                    "List[Tuple[int, float]]",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "str"
                ]
            }
        },
        "_CategoryAccumulator.update": {
            "name": "update",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "np.ndarray"
                ],
                "counts": [
                    "np.ndarray"
                ]
            }
        },
        "CategoryMapper.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mappings": [
                    "List[np.ndarray]"
                ],
                "missing_value": [
                    "Optional[int]"
                ]
            }
        },
        "CategoryMapper.__call__": {
            "name": "__call__",
            "location": 154,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/landshark/config.py": {
        "flatten_patch": {
            "name": "flatten_patch",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "tensorflow.Tensor"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "value_impute": {
            "name": "value_impute",
            "location": 43,
            "return": [
                "numpy.ndarray",
                "Union[str, int, float]",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "mask": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "newval": [
                    "str",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "continuous_input": {
            "name": "continuous_input",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "categorical_embedded_input": {
            "name": "categorical_embedded_input",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "dict[tuple[typing.Union[str,str]], int]",
                "str",
                "list[int]"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ],
                "ncat_dict": [
                    "Dict[(str, int)]"
                ],
                "embed_dict": [
                    "Dict[(str, int)]"
                ]
            }
        }
    },
    "landshark-master/landshark/dataprocess.py": {
        "_direct_read": {
            "name": "_direct_read",
            "location": 65,
            "return": [
                "int",
                "list[list[typing.Any]]",
                "Callable",
                "list[float]",
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "array": [
                    "str",
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "patch_reads": [
                    "List[patch.PatchRowRW]"
                ],
                "mask_reads": [
                    "List[patch.PatchMaskRowRW]"
                ],
                "npatches": [
                    "int"
                ],
                "patchwidth": [
                    "int"
                ]
            }
        },
        "_cached_read": {
            "name": "_cached_read",
            "location": 93,
            "return": [
                "int",
                "list[list[typing.Any]]",
                "Callable",
                "list[float]",
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "row_dict": [
                    "Dict[(int, np.ndarray)]"
                ],
                "array": [
                    "typing.Sequence[T]",
                    "numpy.ndarray",
                    "int",
                    "Sequence[T]",
                    "list[int]",
                    "List[int]"
                ],
                "patch_reads": [
                    "List[patch.PatchRowRW]"
                ],
                "mask_reads": [
                    "List[patch.PatchMaskRowRW]"
                ],
                "npatches": [
                    "int"
                ],
                "patchwidth": [
                    "int"
                ]
            }
        },
        "_as_range": {
            "name": "_as_range",
            "location": 122,
            "return": [
                "landshark.basetypes.FixedSlice"
            ],
            "arguments": {
                "iterable": [
                    "Iterator[int]"
                ]
            }
        },
        "_slices_from_patches": {
            "name": "_slices_from_patches",
            "location": 130,
            "return": [
                "List[landshark.basetypes.FixedSlice]"
            ],
            "arguments": {
                "patch_reads": [
                    "List[patch.PatchRowRW]"
                ]
            }
        },
        "_get_rows": {
            "name": "_get_rows",
            "location": 143,
            "return": [
                "Dict[(int, np.ndarray)]"
            ],
            "arguments": {
                "slices": [
                    "List[landshark.basetypes.FixedSlice]"
                ],
                "array": [
                    "int",
                    "str",
                    "float",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "numpy.ndarray"
                ]
            }
        },
        "_process_training": {
            "name": "_process_training",
            "location": 155,
            "return": [
                "landshark.serialise.DataArrays"
            ],
            "arguments": {
                "coords": [
                    "np.ndarray"
                ],
                "targets": [
                    "np.ndarray"
                ],
                "feature_source": [
                    "landshark.hread.H5Features"
                ],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "_process_query": {
            "name": "_process_query",
            "location": 184,
            "return": [
                "landshark.serialise.DataArrays"
            ],
            "arguments": {
                "indices": [
                    "np.ndarray"
                ],
                "feature_source": [
                    "landshark.hread.H5Features"
                ],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "write_trainingdata": {
            "name": "write_trainingdata",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "ProcessTrainingArgs"
                ]
            }
        },
        "write_querydata": {
            "name": "write_querydata",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "ProcessQueryArgs"
                ]
            }
        },
        "_slices_from_patches._get": {
            "name": "_get",
            "location": 135,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ],
                "c": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_TrainingDataProcessor.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_path": [
                    "str"
                ],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "_TrainingDataProcessor.__call__": {
            "name": "__call__",
            "location": 231,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Tuple[(np.ndarray, np.ndarray)]"
                ]
            }
        },
        "_QueryDataProcessor.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_path": [
                    "str"
                ],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "_QueryDataProcessor.__call__": {
            "name": "__call__",
            "location": 253,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/landshark/errors.py": {
        "catch_and_exit": {
            "name": "catch_and_exit",
            "location": 32,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "catch_and_exit.wrapped": {
            "name": "wrapped",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZeroDeviation.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sd": [
                    "np.ndarray"
                ],
                "cols": [
                    "List[str]"
                ]
            }
        },
        "ConCatNMismatch.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "N_con": [
                    "int"
                ],
                "N_cat": [
                    "int"
                ]
            }
        },
        "PredictionShape.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "shape": [
                    "Tuple[int]"
                ]
            }
        }
    },
    "landshark-master/landshark/featurewrite.py": {
        "write_feature_metadata": {
            "name": "write_feature_metadata",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "landshark.metadata.FeatureSet"
                ],
                "hfile": [
                    "list['cirq.Qid']",
                    "landshark.metadata.FeatureSet",
                    "list[]",
                    "int",
                    "tables.File",
                    "List['cirq.Qid']",
                    "list"
                ]
            }
        },
        "read_feature_metadata": {
            "name": "read_feature_metadata",
            "location": 51,
            "return": [
                "landshark.metadata.FeatureSet"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_target_metadata": {
            "name": "write_target_metadata",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "Union[(landshark.metadata.CategoricalTarget, landshark.metadata.ContinuousTarget)]"
                ],
                "hfile": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "read_target_metadata": {
            "name": "read_target_metadata",
            "location": 74,
            "return": [
                "Union[(landshark.metadata.CategoricalTarget, landshark.metadata.ContinuousTarget)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_write_continuous_metadata": {
            "name": "_write_continuous_metadata",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "landshark.metadata.ContinuousFeatureSet"
                ],
                "hfile": [
                    "str",
                    "tables.File"
                ]
            }
        },
        "_read_continuous_metadata": {
            "name": "_read_continuous_metadata",
            "location": 102,
            "return": [
                "landshark.metadata.ContinuousFeatureSet"
            ],
            "arguments": {
                "hfile": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "tables.File",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "_write_continuous_target_metadata": {
            "name": "_write_continuous_target_metadata",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "landshark.metadata.ContinuousTarget"
                ],
                "hfile": [
                    "bool",
                    "str",
                    "tables.File",
                    "landshark.metadata.ContinuousTarget",
                    "landshark.metadata.CategoricalTarget"
                ]
            }
        },
        "_read_continuous_target_metadata": {
            "name": "_read_continuous_target_metadata",
            "location": 128,
            "return": [
                "landshark.metadata.ContinuousTarget"
            ],
            "arguments": {
                "hfile": [
                    "tables.File"
                ]
            }
        },
        "_write_categorical_metadata": {
            "name": "_write_categorical_metadata",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "landshark.metadata.CategoricalFeatureSet"
                ],
                "hfile": [
                    "dict[str, typing.Any]",
                    "tables.File",
                    "bytes",
                    "typing.Sequence[int]",
                    "Dict[str, Any]",
                    "str",
                    "Sequence[int]",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "None",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "_read_categorical_metadata": {
            "name": "_read_categorical_metadata",
            "location": 156,
            "return": [
                "landshark.metadata.CategoricalFeatureSet"
            ],
            "arguments": {
                "hfile": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_write_categorical_target_metadata": {
            "name": "_write_categorical_target_metadata",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "landshark.metadata.CategoricalTarget"
                ],
                "hfile": [
                    "str",
                    "tables.File",
                    "landshark.metadata.CategoricalTarget",
                    "landshark.metadata.ContinuousTarget",
                    "logging.LogRecord"
                ]
            }
        },
        "_read_categorical_target_metadata": {
            "name": "_read_categorical_target_metadata",
            "location": 180,
            "return": [
                "landshark.metadata.CategoricalTarget"
            ],
            "arguments": {
                "hfile": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "write_imagespec": {
            "name": "write_imagespec",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": [
                    "landshark.image.ImageSpec"
                ],
                "hfile": [
                    "bool",
                    "bytes",
                    "landshark.image.ImageSpec",
                    "tables.File"
                ]
            }
        },
        "read_imagespec": {
            "name": "read_imagespec",
            "location": 199,
            "return": [
                "landshark.image.ImageSpec"
            ],
            "arguments": {
                "hfile": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "write_continuous": {
            "name": "write_continuous",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "landshark.basetypes.ContinuousArraySource"
                ],
                "hfile": [
                    "int",
                    "Optional[int]",
                    "None",
                    "list[]",
                    "tables.File",
                    "list",
                    "numpy.array",
                    "Optional[bool]"
                ],
                "n_workers": [
                    "int"
                ],
                "batchrows": [
                    "Optional[int]"
                ],
                "stats": [
                    "Optional[Tuple[(np.ndarray, np.ndarray)]]"
                ]
            }
        },
        "write_categorical": {
            "name": "write_categorical",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "landshark.basetypes.CategoricalArraySource"
                ],
                "hfile": [
                    "int",
                    "Optional[int]",
                    "None",
                    "list[]",
                    "tables.File",
                    "list",
                    "numpy.array",
                    "Optional[bool]"
                ],
                "n_workers": [
                    "int"
                ],
                "batchrows": [
                    "Optional[int]"
                ],
                "maps": [
                    "Optional[np.ndarray]"
                ]
            }
        },
        "_write_source": {
            "name": "_write_source",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "landshark.basetypes.ArraySource"
                ],
                "hfile": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "atom": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "name": [
                    "str"
                ],
                "transform": [
                    "landshark.basetypes.Worker"
                ],
                "n_workers": [
                    "int"
                ],
                "batchrows": [
                    "Optional[int]"
                ]
            }
        },
        "_write": {
            "name": "_write",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "landshark.basetypes.ArraySource"
                ],
                "array": [
                    "int",
                    "bool",
                    "float"
                ],
                "batchrows": [
                    "int"
                ],
                "n_workers": [
                    "int"
                ],
                "transform": [
                    "landshark.basetypes.Worker"
                ]
            }
        },
        "write_coordinates": {
            "name": "write_coordinates",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "array_src": [
                    "landshark.basetypes.CoordinateArraySource"
                ],
                "h5file": [],
                "batchsize": [
                    "int"
                ]
            }
        },
        "_make_int_vlarray": {
            "name": "_make_int_vlarray",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "None",
                    "tables.File",
                    "typing.Pattern",
                    "Optional[str]",
                    "Optional[Pattern[str]]"
                ],
                "name": [
                    "str"
                ],
                "attribute": [
                    "np.ndarray"
                ]
            }
        },
        "_make_float_vlarray": {
            "name": "_make_float_vlarray",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "None",
                    "tables.File",
                    "typing.Pattern",
                    "Optional[str]",
                    "Optional[Pattern[str]]"
                ],
                "name": [
                    "str"
                ],
                "attribute": [
                    "np.ndarray"
                ]
            }
        },
        "_make_str_vlarray": {
            "name": "_make_str_vlarray",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "None",
                    "tables.File",
                    "typing.IO",
                    "Optional[str]",
                    "IO[Any]"
                ],
                "name": [
                    "str"
                ],
                "attribute": [
                    "List[str]"
                ]
            }
        }
    },
    "landshark-master/landshark/fileio.py": {
        "tifnames": {
            "name": "tifnames",
            "location": 22,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "directories": [
                    "List[str]"
                ]
            }
        }
    },
    "landshark-master/landshark/hread.py": {
        "H5ArraySource.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "H5ArraySource.__enter__": {
            "name": "__enter__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5ArraySource.__exit__": {
            "name": "__exit__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex_type": [
                    "type"
                ],
                "ex_val": [
                    "Exception"
                ],
                "ex_tb": [
                    "types.TracebackType"
                ]
            }
        },
        "H5ArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 65,
            "return": [
                "Union[(np.ndarray, Tuple[(np.ndarray, np.ndarray)])]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "H5Features.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "str"
                ]
            }
        },
        "H5Features.__len__": {
            "name": "__len__",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5Features.__del__": {
            "name": "__del__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/image.py": {
        "pixel_coordinates": {
            "name": "pixel_coordinates",
            "location": 138,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "affine": [
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "image_to_world": {
            "name": "image_to_world",
            "location": 182,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "indices": [
                    "np.ndarray"
                ],
                "pixel_coordinate_array": [
                    "np.ndarray"
                ]
            }
        },
        "world_to_image": {
            "name": "world_to_image",
            "location": 219,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "points": [
                    "np.ndarray"
                ],
                "pixel_coordinate_array": [
                    "np.ndarray"
                ]
            }
        },
        "strip_image_spec": {
            "name": "strip_image_spec",
            "location": 268,
            "return": [
                "ImageSpec"
            ],
            "arguments": {
                "strip": [
                    "int"
                ],
                "nstrips": [
                    "int"
                ],
                "image_spec": [
                    "ImageSpec"
                ]
            }
        },
        "indices_strip": {
            "name": "indices_strip",
            "location": 306,
            "return": [
                "Tuple[(Iterable[np.ndarray], int)]"
            ],
            "arguments": {
                "image_spec": [
                    "ImageSpec"
                ],
                "strip": [
                    "int"
                ],
                "nstrips": [
                    "int"
                ],
                "batchsize": [
                    "int"
                ]
            }
        },
        "_strip_slices": {
            "name": "_strip_slices",
            "location": 344,
            "return": [
                "List[landshark.basetypes.FixedSlice]"
            ],
            "arguments": {
                "total_size": [
                    "int"
                ],
                "nstrips": [
                    "int"
                ]
            }
        },
        "_array_pair_it": {
            "name": "_array_pair_it",
            "location": 357,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "Iterable"
                ]
            }
        },
        "_indices_query": {
            "name": "_indices_query",
            "location": 363,
            "return": [
                "Iterable[np.ndarray]"
            ],
            "arguments": {
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ],
                "batchsize": [
                    "int"
                ],
                "column_slice": [
                    "Optional[landshark.basetypes.FixedSlice]"
                ],
                "row_slice": [
                    "Optional[landshark.basetypes.FixedSlice]"
                ]
            }
        },
        "BoundingBox.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_pixel_coords": [
                    "np.ndarray"
                ],
                "y_pixel_coords": [
                    "np.ndarray"
                ]
            }
        },
        "BoundingBox.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.contains": {
            "name": "contains",
            "location": 67,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "coords": [
                    "np.ndarray"
                ]
            }
        },
        "ImageSpec.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coordinates": [
                    "np.ndarray"
                ],
                "y_coordinates": [
                    "np.ndarray"
                ],
                "crs": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "ImageSpec.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/iteration.py": {
        "batch": {
            "name": "batch",
            "location": 27,
            "return": [
                "Iterator[List[T]]"
            ],
            "arguments": {
                "it": [
                    "Iterator[T]"
                ],
                "batchsize": [
                    "int"
                ]
            }
        },
        "batch_slices": {
            "name": "batch_slices",
            "location": 36,
            "return": [
                "Iterator[landshark.basetypes.FixedSlice]"
            ],
            "arguments": {
                "batchsize": [
                    "int"
                ],
                "total_size": [
                    "int"
                ]
            }
        },
        "with_slices": {
            "name": "with_slices",
            "location": 47,
            "return": [
                "Iterator[Tuple[(landshark.basetypes.FixedSlice, np.ndarray)]]"
            ],
            "arguments": {
                "it": [
                    "Iterator[np.ndarray]"
                ]
            }
        }
    },
    "landshark-master/landshark/kfold.py": {
        "_batch_randn": {
            "name": "_batch_randn",
            "location": 24,
            "return": [
                "Iterator[np.ndarray]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "KFolds.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int"
                ],
                "K": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "KFolds.iterator": {
            "name": "iterator",
            "location": 62,
            "return": [
                "Iterator[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/metadata.py": {
        "PickleObj.load": {
            "name": "load",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "ImportError",
                    "Match[str]",
                    "typing.Match",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "directory": [
                    "str"
                ]
            }
        },
        "PickleObj.save": {
            "name": "save",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "ContinuousFeatureSet.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[str]"
                ],
                "missing": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "Optional[str]",
                    "None"
                ],
                "stats": [
                    "Optional[Tuple[(np.ndarray, np.ndarray)]]"
                ]
            }
        },
        "ContinuousFeatureSet.columns": {
            "name": "columns",
            "location": 88,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousFeatureSet.missing_value": {
            "name": "missing_value",
            "location": 92,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuousFeatureSet.__len__": {
            "name": "__len__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalFeatureSet.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "List[str]"
                ],
                "missing": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "nvalues": [
                    "np.ndarray"
                ],
                "mappings": [
                    "List[np.ndarray]"
                ],
                "counts": [
                    "np.ndarray"
                ]
            }
        },
        "CategoricalFeatureSet.columns": {
            "name": "columns",
            "location": 113,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalFeatureSet.missing_value": {
            "name": "missing_value",
            "location": 117,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalFeatureSet.__len__": {
            "name": "__len__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureSet.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "continuous": [
                    "Optional[ContinuousFeatureSet]"
                ],
                "categorical": [
                    "Optional[CategoricalFeatureSet]"
                ],
                "image": [
                    "landshark.image.ImageSpec"
                ],
                "N": [
                    "int"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "FeatureSet.__len__": {
            "name": "__len__",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTarget.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int"
                ],
                "labels": [
                    "np.ndarray"
                ],
                "nvalues": [
                    "np.ndarray"
                ],
                "mappings": [
                    "List[np.ndarray]"
                ],
                "counts": [
                    "List[np.ndarray]"
                ]
            }
        },
        "ContinuousTarget.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int"
                ],
                "labels": [
                    "np.ndarray"
                ],
                "means": [
                    "np.ndarray"
                ],
                "sds": [
                    "np.ndarray"
                ]
            }
        },
        "Training.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "Union[(CategoricalTarget, ContinuousTarget)]"
                ],
                "features": [
                    "FeatureSet"
                ],
                "nfolds": [
                    "int"
                ],
                "testfold": [
                    "int"
                ],
                "fold_counts": [
                    "Dict[(int, int)]"
                ]
            }
        }
    },
    "landshark-master/landshark/model.py": {
        "train_data": {
            "name": "train_data",
            "location": 50,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "records": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ],
                "shuffle_buffer": [
                    "int"
                ],
                "take": [
                    "Optional[int]"
                ],
                "random_seed": [
                    "Optional[int]"
                ]
            }
        },
        "test_data": {
            "name": "test_data",
            "location": 72,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "records": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "predict_data": {
            "name": "predict_data",
            "location": 85,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "records": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "train_test": {
            "name": "train_test",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "records_train": [
                    "List[str]"
                ],
                "records_test": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "directory": [
                    "str"
                ],
                "cf": [
                    "int",
                    "str",
                    "landshark.metadata.Training"
                ],
                "params": [
                    "TrainingConfig"
                ],
                "iterations": [
                    "Optional[int]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 143,
            "return": [
                "generator"
            ],
            "arguments": {
                "checkpoint_dir": [
                    "str"
                ],
                "cf": [
                    "str",
                    "int"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "records": [
                    "List[str]"
                ],
                "params": [
                    "QueryConfig"
                ]
            }
        },
        "_model_wrapper": {
            "name": "_model_wrapper",
            "location": 176,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "features": [
                    "Dict[(str, Any)]"
                ],
                "labels": [
                    "str",
                    "float",
                    "dict[str, float]",
                    "numpy.ndarray",
                    "dict[int, dict[int, typing.Any]]",
                    "Dict[str, float]",
                    "dict[, ]",
                    "Dict[int, Dict[int, Any]]",
                    "dict"
                ],
                "mode": [
                    "str",
                    "float",
                    "dict[str, float]",
                    "numpy.ndarray",
                    "dict[int, dict[int, typing.Any]]",
                    "Dict[str, float]",
                    "dict[, ]",
                    "Dict[int, Dict[int, Any]]",
                    "dict"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "_log_scores": {
            "name": "_log_scores",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "train_data.f": {
            "name": "f",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_data.f": {
            "name": "f",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "predict_data.f": {
            "name": "f",
            "location": 90,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "landshark-master/landshark/multiproc.py": {
        "task_list": {
            "name": "task_list",
            "location": 73,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "task_list": [
                    "list"
                ],
                "reader": [
                    "landshark.basetypes.Reader"
                ],
                "worker": [
                    "landshark.basetypes.Worker"
                ],
                "n_workers": [
                    "int"
                ]
            }
        },
        "_task_list_0": {
            "name": "_task_list_0",
            "location": 84,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "task_list": [
                    "list"
                ],
                "reader": [
                    "landshark.basetypes.Reader"
                ],
                "worker": [
                    "landshark.basetypes.Worker"
                ]
            }
        },
        "_task_list_multi": {
            "name": "_task_list_multi",
            "location": 98,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "task_list": [
                    "list"
                ],
                "reader": [
                    "landshark.basetypes.Reader"
                ],
                "worker": [
                    "landshark.basetypes.Worker"
                ],
                "n_workers": [
                    "int"
                ]
            }
        },
        "_Task.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasrc": [
                    "landshark.basetypes.Reader"
                ],
                "f": [
                    "landshark.basetypes.Worker"
                ],
                "in_queue": [
                    "multiprocessing.queues.Queue"
                ],
                "out_queue": [
                    "multiprocessing.queues.Queue"
                ],
                "shutdown": [
                    "int",
                    "str",
                    "bool"
                ],
                "blocktime": [
                    "float"
                ]
            }
        },
        "_Task.run": {
            "name": "run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/normalise.py": {
        "get_stats": {
            "name": "get_stats",
            "location": 98,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "src": [
                    "landshark.basetypes.ContinuousArraySource"
                ],
                "batchrows": [
                    "int"
                ]
            }
        },
        "StatCounter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "int"
                ]
            }
        },
        "StatCounter.update": {
            "name": "update",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "typing.Callable[int, bool]",
                    "Callable[[int], bool]",
                    "int",
                    "list[list[int]]",
                    "numpy.ndarray",
                    "List[List[int]]"
                ]
            }
        },
        "StatCounter.mean": {
            "name": "mean",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.sd": {
            "name": "sd",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatCounter.count": {
            "name": "count",
            "location": 75,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normaliser.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "np.ndarray"
                ],
                "sd": [
                    "np.ndarray"
                ],
                "missing": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Normaliser.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/landshark/patch.py": {
        "patches": {
            "name": "patches",
            "location": 39,
            "return": [
                "Tuple[(List[PatchRowRW], List[PatchMaskRowRW])]"
            ],
            "arguments": {
                "x_coords": [
                    "np.ndarray"
                ],
                "y_coords": [
                    "np.ndarray"
                ],
                "halfwidth": [
                    "int"
                ],
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ]
            }
        },
        "_patch_reads": {
            "name": "_patch_reads",
            "location": 111,
            "return": [
                "List[PatchRowRW]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "y_reads": [
                    "np.ndarray"
                ],
                "xmins": [
                    "np.ndarray"
                ],
                "xmaxs": [
                    "np.ndarray"
                ],
                "ymins": [
                    "np.ndarray"
                ],
                "patch_indices": [
                    "np.ndarray"
                ],
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ]
            }
        },
        "_mask_patches": {
            "name": "_mask_patches",
            "location": 140,
            "return": [
                "List[PatchMaskRowRW]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "y_reads": [
                    "np.ndarray"
                ],
                "xmins": [
                    "np.ndarray"
                ],
                "xmaxs": [
                    "np.ndarray"
                ],
                "ymins": [
                    "np.ndarray"
                ],
                "patch_indices": [
                    "np.ndarray"
                ],
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/saver.py": {
        "overwrite_model_dir": {
            "name": "overwrite_model_dir",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "model_dir": [
                    "str"
                ],
                "checkpoint_dir": [
                    "str"
                ]
            }
        },
        "BestScoreSaver.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "BestScoreSaver._init_dir": {
            "name": "_init_dir",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_path": [
                    "str"
                ]
            }
        },
        "BestScoreSaver._to_64bit": {
            "name": "_to_64bit",
            "location": 63,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "BestScoreSaver._should_overwrite": {
            "name": "_should_overwrite",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "score": [
                    "np.ndarray"
                ],
                "score_path": [
                    "str"
                ]
            }
        },
        "BestScoreSaver._write_score": {
            "name": "_write_score",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "Dict[(str, np.ndarray)]"
                ],
                "score_path": [
                    "str"
                ],
                "global_step": [
                    "int"
                ]
            }
        },
        "BestScoreSaver.save": {
            "name": "save",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "dict"
                ]
            }
        }
    },
    "landshark-master/landshark/serialise.py": {
        "serialise": {
            "name": "serialise",
            "location": 53,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "x": [
                    "DataArrays"
                ]
            }
        },
        "deserialise": {
            "name": "deserialise",
            "location": 72,
            "return": [
                "bool",
                "dict[typing.Text, ]",
                "Optional[Union[str, Any]]",
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "row": [
                    "str"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "ignore_y": [
                    "bool"
                ]
            }
        },
        "_unpack": {
            "name": "_unpack",
            "location": 121,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "typing.Mapping",
                    "float",
                    "Mapping[str, float]",
                    "None",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]"
                ],
                "columns": [
                    "Dict[(str, Union[(landshark.metadata.CategoricalFeature, landshark.metadata.ContinuousFeature)])]"
                ],
                "npatch_side": [
                    "int"
                ]
            }
        },
        "_ndarray_feature": {
            "name": "_ndarray_feature",
            "location": 140,
            "return": [
                "int",
                "list[]",
                "Callable",
                "list[str]",
                "str",
                "typing.Deque"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "_make_features": {
            "name": "_make_features",
            "location": 148,
            "return": [
                "dict"
            ],
            "arguments": {
                "x_con": [
                    "int",
                    "float",
                    "set",
                    "set[]"
                ],
                "x_cat": [
                    "int",
                    "float",
                    "set",
                    "set[]"
                ],
                "y": [
                    "np.ndarray"
                ],
                "idx": [
                    "np.ndarray"
                ],
                "coords": [
                    "np.ndarray"
                ]
            }
        }
    },
    "landshark-master/landshark/shpread.py": {
        "_extract_type": {
            "name": "_extract_type",
            "location": 32,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "python_type": [
                    "type"
                ],
                "field_length": [
                    "int"
                ]
            }
        },
        "_get_recinfo": {
            "name": "_get_recinfo",
            "location": 46,
            "return": [
                "Tuple[(List[str], list)]"
            ],
            "arguments": {
                "shp": [
                    "Tuple[str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "_get_indices": {
            "name": "_get_indices",
            "location": 55,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "labels": [
                    "List[str]"
                ],
                "all_labels": [
                    "List[str]"
                ]
            }
        },
        "_get_dtype": {
            "name": "_get_dtype",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "labels": [
                    "List[str]"
                ],
                "all_labels": [
                    "List[str]"
                ],
                "all_dtypes": [
                    "list"
                ]
            }
        },
        "_AbstractShpArraySource.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "_AbstractShpArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 91,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "CoordinateShpArraySource.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "CoordinateShpArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 119,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/skmodel.py": {
        "_make_mask": {
            "name": "_make_mask",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "x": [
                    "Dict[(str, np.ndarray)]"
                ],
                "xm": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "_concat_dict": {
            "name": "_concat_dict",
            "location": 46,
            "return": [
                "Dict[(str, Union[(np.ndarray, Dict[(str, np.ndarray)])])]"
            ],
            "arguments": {
                "xlist": [
                    "List[Dict[(str, Union[(np.ndarray, Dict[(str, np.ndarray)])])]]"
                ]
            }
        },
        "_extract": {
            "name": "_extract",
            "location": 56,
            "return": [
                "Tuple[(dict, np.ndarray)]"
            ],
            "arguments": {
                "xt": [
                    "Dict[(str, Any)]"
                ],
                "yt": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "sess": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "_get_data": {
            "name": "_get_data",
            "location": 83,
            "return": [
                "Tuple[(Dict[(str, np.ndarray)], np.ndarray, Dict[(str, np.ndarray)], np.ndarray)]"
            ],
            "arguments": {
                "records_train": [
                    "List[str]"
                ],
                "records_test": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "npoints": [
                    "Optional[int]"
                ],
                "batch_size": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "_query_it": {
            "name": "_query_it",
            "location": 104,
            "return": [
                "Iterator[Dict[(str, np.ndarray)]]"
            ],
            "arguments": {
                "records_query": [
                    "List[str]"
                ],
                "batch_size": [
                    "int"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ]
            }
        },
        "_split": {
            "name": "_split",
            "location": 125,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "x": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "train_test": {
            "name": "train_test",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "config_module": [
                    "str"
                ],
                "records_train": [
                    "List[str]"
                ],
                "records_test": [
                    "List[str]"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "model_dir": [
                    "str"
                ],
                "maxpoints": [
                    "Optional[int]"
                ],
                "batchsize": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 172,
            "return": [
                "Iterator[Dict[(str, np.ndarray)]]"
            ],
            "arguments": {
                "modeldir": [
                    "str"
                ],
                "metadata": [
                    "landshark.metadata.Training"
                ],
                "query_records": [
                    "List[str]"
                ],
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/tfread.py": {
        "_load_config": {
            "name": "_load_config",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "config_file": [
                    "str"
                ]
            }
        },
        "setup_training": {
            "name": "setup_training",
            "location": 46,
            "return": [
                "Tuple[(List[str], List[str], landshark.metadata.Training, str, str)]"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "directory": [
                    "str"
                ]
            }
        },
        "setup_query": {
            "name": "setup_query",
            "location": 73,
            "return": [
                "Tuple[(landshark.metadata.Training, landshark.metadata.FeatureSet, List[str], int, int, str)]"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "querydir": [
                    "str"
                ],
                "checkpoint": [
                    "str"
                ]
            }
        },
        "get_strips": {
            "name": "get_strips",
            "location": 93,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "records": [
                    "List[str]"
                ]
            }
        },
        "get_strips.f": {
            "name": "f",
            "location": 94,
            "return": [
                "tuple[int]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "k": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/tfwrite.py": {
        "query": {
            "name": "query",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Iterator[List[bytes]]"
                ],
                "n_total": [
                    "int"
                ],
                "output_directory": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "training": {
            "name": "training",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Iterator[List[bytes]]"
                ],
                "n_total": [
                    "int"
                ],
                "output_directory": [
                    "str"
                ],
                "testfold": [
                    "int"
                ],
                "folds": [
                    "Iterator[np.ndarray]"
                ]
            }
        },
        "_get_mb": {
            "name": "_get_mb",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_split_on_mask": {
            "name": "_split_on_mask",
            "location": 104,
            "return": [
                "Tuple[(List[bytes], List[bytes])]"
            ],
            "arguments": {
                "data": [
                    "List[bytes]"
                ],
                "folds": [
                    "np.ndarray"
                ],
                "testfold": [
                    "int"
                ]
            }
        },
        "_MultiFileWriter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_directory": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "_MultiFileWriter._nextfile": {
            "name": "_nextfile",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MultiFileWriter.add": {
            "name": "add",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[bytes]"
                ]
            }
        },
        "_MultiFileWriter.close": {
            "name": "close",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/tifread.py": {
        "shared_image_spec": {
            "name": "shared_image_spec",
            "location": 47,
            "return": [
                "landshark.image.ImageSpec"
            ],
            "arguments": {
                "path_list": [
                    "List[str]"
                ],
                "ignore_crs": [
                    "bool"
                ]
            }
        },
        "_match": {
            "name": "_match",
            "location": 152,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]",
                "int",
                "str",
                "tuple[]",
                "tuple[str]",
                "dict[str, typing.Union[int,str]]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "f": [
                    "Callable[([Any], Any)]"
                ],
                "images": [
                    "list"
                ],
                "name": [
                    "str"
                ],
                "anyof": [
                    "bool"
                ]
            }
        },
        "_match_transforms": {
            "name": "_match_transforms",
            "location": 170,
            "return": [
                "types.FrameType",
                "str",
                "list"
            ],
            "arguments": {
                "transforms": [
                    "list"
                ],
                "images": [
                    "list"
                ]
            }
        },
        "_fatal_mismatch": {
            "name": "_fatal_mismatch",
            "location": 180,
            "return": [
                "mypy_extensions.NoReturn",
                "None"
            ],
            "arguments": {
                "property_list": [
                    "list"
                ],
                "images": [
                    "list"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_names": {
            "name": "_names",
            "location": 195,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "band_list": [
                    "List[Band]"
                ]
            }
        },
        "_has_missing": {
            "name": "_has_missing",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "bands": [
                    "List[Band]"
                ]
            }
        },
        "_bands": {
            "name": "_bands",
            "location": 215,
            "return": [
                "List[Band]"
            ],
            "arguments": {
                "images": [
                    "list"
                ]
            }
        },
        "_block_rows": {
            "name": "_block_rows",
            "location": 225,
            "return": [
                "int"
            ],
            "arguments": {
                "bands": [
                    "List[Band]"
                ]
            }
        },
        "_ImageStackSource.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ],
                "path_list": [
                    "List[str]"
                ]
            }
        },
        "_ImageStackSource.__enter__": {
            "name": "__enter__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImageStackSource.__exit__": {
            "name": "__exit__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex_type": [
                    "type"
                ],
                "ex_val": [
                    "Exception"
                ],
                "ex_tb": [
                    "types.TracebackType"
                ]
            }
        },
        "_ImageStackSource._arrayslice": {
            "name": "_arrayslice",
            "location": 115,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "start_row": [
                    "int"
                ],
                "end_row": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/tifwrite.py": {
        "_make_writer": {
            "name": "_make_writer",
            "location": 66,
            "return": [
                "BatchWriter"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "label": [
                    "str"
                ],
                "dtype": [
                    "int",
                    "List[numpy.ndarray]",
                    "str",
                    "list[numpy.ndarray]",
                    "float",
                    "tuple",
                    "tuple[]"
                ],
                "image_spec": [
                    "landshark.image.ImageSpec"
                ]
            }
        },
        "write_geotiffs": {
            "name": "write_geotiffs",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "y_dash": [
                    "Iterator[Dict[(str, np.ndarray)]]"
                ],
                "directory": [
                    "str"
                ],
                "imspec": [
                    "landshark.image.ImageSpec"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "BatchWriter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rs_file": [
                    "str",
                    "float",
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "List[int]",
                    "list[int]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "dtype": [
                    "float",
                    "numpy.dtype",
                    "int",
                    "list[list[int]]",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "List[List[int]]",
                    "tuple[int]",
                    "Tuple[float, float]",
                    "Tuple[int]"
                ]
            }
        },
        "BatchWriter.write": {
            "name": "write",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "np.ndarray"
                ]
            }
        },
        "BatchWriter.close": {
            "name": "close",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "landshark-master/landshark/util.py": {
        "to_masked": {
            "name": "to_masked",
            "location": 27,
            "return": [
                "int",
                "numpy.ndarray",
                "float",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "str",
                "Dict[str, numpy.ndarray]",
                "dict"
            ],
            "arguments": {
                "array": [
                    "np.ndarray"
                ],
                "missing_value": [
                    "int",
                    "numpy.array",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "mb_to_points": {
            "name": "mb_to_points",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "batchMB": [
                    "float"
                ],
                "ndim_con": [
                    "int"
                ],
                "ndim_cat": [
                    "int"
                ],
                "ndim_coord": [
                    "int"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        },
        "mb_to_rows": {
            "name": "mb_to_rows",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "batchMB": [
                    "float"
                ],
                "row_width": [
                    "int"
                ],
                "ndim_con": [
                    "int"
                ],
                "ndim_cat": [
                    "int"
                ],
                "halfwidth": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 20,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 37,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 59,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 70,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 133,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 162,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 217,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 356,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 445,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 477,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "landshark-master/landshark/__init__.py": {},
    "landshark-master/landshark/scripts/cli.py": {
        "cli": {
            "name": "cli",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "gpu": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "verbosity": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "batch_mb": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "data": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "config": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "epochs": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "batchsize": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "test_batchsize": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "iterations": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "checkpoint": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ]
            }
        },
        "train_entrypoint": {
            "name": "train_entrypoint",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "config": [
                    "str"
                ],
                "epochs": [
                    "int"
                ],
                "batchsize": [
                    "int"
                ],
                "test_batchsize": [
                    "int"
                ],
                "iterations": [
                    "Optional[int]"
                ],
                "gpu": [
                    "bool"
                ],
                "checkpoint_dir": [
                    "Optional[str]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "config": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "checkpoint": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "data": [
                    "str",
                    "int",
                    "click.Context"
                ]
            }
        },
        "predict_entrypoint": {
            "name": "predict_entrypoint",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "checkpoint": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "batchMB": [
                    "float"
                ],
                "gpu": [
                    "bool"
                ]
            }
        }
    },
    "landshark-master/landshark/scripts/extractors.py": {
        "cli": {
            "name": "cli",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "verbosity": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "batch_mb": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "nworkers": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ]
            }
        },
        "traintest": {
            "name": "traintest",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "targets": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "split": [
                    "Tuple[int]",
                    "str",
                    "tuple[int]",
                    "Optional[str]",
                    "None"
                ],
                "random_seed": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "features": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "halfwidth": [
                    "str",
                    "int",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ]
            }
        },
        "traintest_entrypoint": {
            "name": "traintest_entrypoint",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "targets": [
                    "str"
                ],
                "testfold": [
                    "int"
                ],
                "folds": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "halfwidth": [
                    "int"
                ],
                "nworkers": [
                    "int"
                ],
                "features": [
                    "str"
                ],
                "batchMB": [
                    "float"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "click.Context",
                    "Tuple[int, int]"
                ],
                "strip": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "click.Context",
                    "Tuple[int, int]"
                ],
                "name": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "click.Context",
                    "Tuple[int, int]"
                ],
                "features": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "click.Context",
                    "Tuple[int, int]"
                ],
                "halfwidth": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "click.Context",
                    "Tuple[int, int]"
                ]
            }
        },
        "query_entrypoint": {
            "name": "query_entrypoint",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {
                "features": [
                    "str"
                ],
                "batchMB": [
                    "float"
                ],
                "nworkers": [
                    "int"
                ],
                "halfwidth": [
                    "int"
                ],
                "strip": [
                    "Tuple[(int, int)]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "landshark-master/landshark/scripts/importers.py": {
        "cli": {
            "name": "cli",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "verbosity": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "nworkers": [
                    "int",
                    "Exception",
                    "str",
                    "bool",
                    "click.Context"
                ],
                "batch_mb": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ]
            }
        },
        "tifs": {
            "name": "tifs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "categorical": [
                    "str",
                    "bytes",
                    "denite.util.UserContext",
                    "int",
                    "bool",
                    "Callable"
                ],
                "continuous": [
                    "str",
                    "bytes",
                    "denite.util.UserContext",
                    "int",
                    "bool",
                    "Callable"
                ],
                "normalise": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "name": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "ignore_crs": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "tifs_entrypoint": {
            "name": "tifs_entrypoint",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "nworkers": [
                    "int"
                ],
                "batchMB": [
                    "float"
                ],
                "categorical": [
                    "List[str]"
                ],
                "continuous": [
                    "List[str]"
                ],
                "normalise": [
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "ignore_crs": [
                    "bool"
                ]
            }
        },
        "targets": {
            "name": "targets",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "click.core.Context"
                ],
                "shapefile": [
                    "str",
                    "int",
                    "bool"
                ],
                "record": [
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "every": [
                    "str",
                    "int",
                    "bool"
                ],
                "dtype": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "normalise": [
                    "str",
                    "int",
                    "bool"
                ],
                "random_seed": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "targets_entrypoint": {
            "name": "targets_entrypoint",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "batchMB": [
                    "float"
                ],
                "shapefile": [
                    "str"
                ],
                "records": [
                    "List[str]"
                ],
                "name": [
                    "str"
                ],
                "every": [
                    "int"
                ],
                "categorical": [
                    "bool"
                ],
                "normalise": [
                    "bool"
                ],
                "random_seed": [
                    "int"
                ]
            }
        }
    },
    "landshark-master/landshark/scripts/logger.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "str"
                ]
            }
        },
        "ElapsedFormatter.format": {
            "name": "format",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "landshark-master/landshark/scripts/skcli.py": {
        "cli": {
            "name": "cli",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "verbosity": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "batch_mb": [
                    "float",
                    "bool",
                    "click.Context",
                    "int"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[int]"
                ],
                "data": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[int]"
                ],
                "config": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[int]"
                ],
                "maxpoints": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[int]"
                ],
                "random_seed": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[int]"
                ]
            }
        },
        "train_entrypoint": {
            "name": "train_entrypoint",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "config": [
                    "str"
                ],
                "maxpoints": [
                    "Optional[int]"
                ],
                "random_seed": [
                    "int"
                ],
                "batchMB": [
                    "float"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "config": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "checkpoint": [
                    "str",
                    "int",
                    "click.Context"
                ],
                "data": [
                    "str",
                    "int",
                    "click.Context"
                ]
            }
        },
        "predict_entrypoint": {
            "name": "predict_entrypoint",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "checkpoint": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "batchMB": [
                    "float"
                ]
            }
        }
    },
    "landshark-master/landshark/scripts/__init__.py": {},
    "landshark-master/tests/conftest.py": {
        "random_image_transform": {
            "name": "random_image_transform",
            "location": 29,
            "return": [
                "TestImageData",
                "Dict[str, List[int]]",
                "Callable",
                "Dict[str, str]",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "landshark-master/tests/test_basetypes.py": {
        "test_fixedslice": {
            "name": "test_fixedslice",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_featurevalues": {
            "name": "test_featurevalues",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_array_source": {
            "name": "test_array_source",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NpyCatArraySource.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "bytes",
                    "dict",
                    "Union[str, bytes]"
                ],
                "missing": [
                    "int",
                    "typing.Iterable[typing.Iterable[]]",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "columns": [
                    "int",
                    "typing.Iterable[typing.Iterable[]]",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "NpyCatArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 45,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float"
                ],
                "stop": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "landshark-master/tests/test_category.py": {
        "test_unique_values": {
            "name": "test_unique_values",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_category_accumulator": {
            "name": "test_category_accumulator",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_categories": {
            "name": "test_get_categories",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[numpy.dtype]",
                    "str",
                    "typing.Iterable[numpy.dtype]",
                    "bool"
                ]
            }
        },
        "test_categorical_transform": {
            "name": "test_categorical_transform",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NPCatArraySource.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "bytes",
                    "dict",
                    "Union[str, bytes]"
                ],
                "missing": [
                    "int",
                    "typing.Iterable[typing.Iterable[]]",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "columns": [
                    "int",
                    "typing.Iterable[typing.Iterable[]]",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "NPCatArraySource._arrayslice": {
            "name": "_arrayslice",
            "location": 63,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float"
                ],
                "stop": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "landshark-master/tests/test_fileio.py": {
        "test_tifnames": {
            "name": "test_tifnames",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dirs": [
                    "List[str]",
                    "list[str]"
                ],
                "tifs": [
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "landshark-master/tests/test_image.py": {
        "test_bounding_box": {
            "name": "test_bounding_box",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bounding_box_contains": {
            "name": "test_bounding_box_contains",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_spec": {
            "name": "test_image_spec",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "Iterable[numpy.dtype]"
                ]
            }
        },
        "test_pixel_coordinates": {
            "name": "test_pixel_coordinates",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "random_image_transform": [
                    "str",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_image_to_world": {
            "name": "test_image_to_world",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "random_image_transform": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "test_world_to_image_edges": {
            "name": "test_world_to_image_edges",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "random_image_transform": [
                    "str",
                    "bytes",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "test_world_to_image_centers": {
            "name": "test_world_to_image_centers",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "random_image_transform": [
                    "str",
                    "bytes",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "test_strip_image_spec": {
            "name": "test_strip_image_spec",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nstrips": [
                    "int",
                    "typing.Sequence[int]",
                    "bool",
                    "Sequence[int]"
                ],
                "rows": [
                    "int",
                    "str",
                    "float",
                    "Union[str, float]"
                ],
                "cols": [
                    "int",
                    "str",
                    "float",
                    "Union[str, float]"
                ]
            }
        },
        "test_indices_strip": {
            "name": "test_indices_strip",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nstrips": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "rows": [
                    "int",
                    "str"
                ],
                "cols": [
                    "int",
                    "str"
                ]
            }
        },
        "test_strip_slices": {
            "name": "test_strip_slices",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "total_size": [
                    "int",
                    "str"
                ],
                "nstrips": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_array_pair_it": {
            "name": "test_array_pair_it",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_indices_query": {
            "name": "test_indices_query",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "landshark-master/tests/test_iteration.py": {
        "test_batch": {
            "name": "test_batch",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "N": [
                    "int"
                ],
                "B": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "List[float]",
                    "list[float]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "test_batch_slices": {
            "name": "test_batch_slices",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "N": [
                    "int",
                    "Deque",
                    "typing.Deque"
                ],
                "B": [
                    "int",
                    "Deque",
                    "typing.Deque"
                ]
            }
        },
        "test_with_slices": {
            "name": "test_with_slices",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "N": [
                    "int",
                    "list[int]",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "landshark-master/tests/test_kfold.py": {
        "test_kfolds": {
            "name": "test_kfolds",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "N": [
                    "list",
                    "int",
                    "list[]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "K": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "B": [
                    "int",
                    "typing.Iterable[typing.Callable[, ]]",
                    "T",
                    "Iterable[Callable]",
                    "List[str]",
                    "List[Tuple[float, float]]"
                ]
            }
        }
    },
    "landshark-master/tests/test_patch.py": {
        "test_patch_00": {
            "name": "test_patch_00",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_00_mask": {
            "name": "test_patch_00_mask",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_44": {
            "name": "test_patch_44",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_44_mask": {
            "name": "test_patch_44_mask",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_02": {
            "name": "test_patch_02",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_02_mask": {
            "name": "test_patch_02_mask",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_20": {
            "name": "test_patch_20",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_20_mask": {
            "name": "test_patch_20_mask",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "landshark-master/tests/__init__.py": {},
    "landshark-master/tests/old/test_featurewrite.py": {},
    "landshark-master/tests/old/test_feed.py": {},
    "landshark-master/tests/old/test_hread.py": {},
    "landshark-master/tests/old/test_normalise.py": {},
    "landshark-master/tests/old/test_shpread.py": {},
    "landshark-master/tests/old/test_targetwrite.py": {},
    "landshark-master/tests/old/test_tifread.py": {}
}
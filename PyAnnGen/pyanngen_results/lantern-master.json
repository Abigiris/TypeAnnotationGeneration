{
    "lantern-master/conftest.py": {},
    "lantern-master/setup.py": {},
    "lantern-master/docs/conf.py": {},
    "lantern-master/examples/atbash.py": {},
    "lantern-master/examples/simplesubstitution.py": {},
    "lantern-master/examples/vigenere.py": {},
    "lantern-master/examples/shift/byte_shift.py": {
        "shift_bytes": {
            "name": "shift_bytes",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "byte": [
                    "int"
                ]
            }
        }
    },
    "lantern-master/examples/shift/image_shift.py": {
        "shift_encrypt": {
            "name": "shift_encrypt",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "byte": [
                    "int"
                ]
            }
        },
        "shift_decrypt": {
            "name": "shift_decrypt",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "byte": [
                    "int"
                ]
            }
        },
        "header_matcher": {
            "name": "header_matcher",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "Iterable"
                ]
            }
        }
    },
    "lantern-master/examples/shift/letter_shift.py": {},
    "lantern-master/lantern/score.py": {
        "score": {
            "name": "score",
            "location": 9,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "set"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "Callable",
                    "Type[Any]",
                    "tuple"
                ]
            }
        }
    },
    "lantern-master/lantern/util.py": {
        "remove": {
            "name": "remove",
            "location": 6,
            "return": [
                "str",
                "Iterable[int]",
                "Dict[str, str]",
                "Iterator[Any]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]"
                ],
                "exclude": [
                    "str",
                    "TextIO",
                    "bytes",
                    "int"
                ]
            }
        },
        "split_columns": {
            "name": "split_columns",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "text": [
                    "int",
                    "Set[str]",
                    "bool"
                ],
                "n_columns": [
                    "int",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "combine_columns": {
            "name": "combine_columns",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "columns": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "iterate_ngrams": {
            "name": "iterate_ngrams",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "text": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "text": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "lantern-master/lantern/__init__.py": {},
    "lantern-master/lantern/analysis/frequency.py": {
        "frequency_analyze": {
            "name": "frequency_analyze",
            "location": 11,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "frequency_to_probability": {
            "name": "frequency_to_probability",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "frequency_map": [
                    "T"
                ],
                "decorator": [
                    "typing.Callable",
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "List[int]"
                ]
            }
        },
        "index_of_coincidence": {
            "name": "index_of_coincidence",
            "location": 52,
            "return": [
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_calculate_index_of_coincidence": {
            "name": "_calculate_index_of_coincidence",
            "location": 79,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "frequency_map": [
                    "str",
                    "float"
                ],
                "length": [
                    "int",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "chi_squared": {
            "name": "chi_squared",
            "location": 99,
            "return": [
                "int",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "source_frequency": [
                    "bool",
                    "OrderedDict"
                ],
                "target_frequency": [
                    "dict",
                    "int"
                ]
            }
        },
        "_calculate_chi_squared": {
            "name": "_calculate_chi_squared",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "source_freq": [
                    "bool",
                    "str",
                    "IO"
                ],
                "target_prob": [
                    "str",
                    "Iterable",
                    "bool",
                    "Optional[str]"
                ],
                "source_len": [
                    "str",
                    "Iterable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_load_ngram": {
            "name": "_load_ngram",
            "location": 134,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "lantern-master/lantern/analysis/search.py": {
        "hill_climb": {
            "name": "hill_climb",
            "location": 6,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "nsteps": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ],
                "start_node": [
                    "int",
                    "bool",
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "get_next_node": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lantern-master/lantern/analysis/__init__.py": {},
    "lantern-master/lantern/analysis/english_ngrams/bigrams.py": {},
    "lantern-master/lantern/analysis/english_ngrams/quadgrams.py": {},
    "lantern-master/lantern/analysis/english_ngrams/trigrams.py": {},
    "lantern-master/lantern/analysis/english_ngrams/unigrams.py": {},
    "lantern-master/lantern/analysis/english_ngrams/__init__.py": {},
    "lantern-master/lantern/fitness/chisquared.py": {
        "ChiSquared": {
            "name": "ChiSquared",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "target_frequency": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChiSquared.inner": {
            "name": "inner",
            "location": 27,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "lantern-master/lantern/fitness/corpus.py": {
        "Corpus.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Corpus.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "lantern-master/lantern/fitness/ngram.py": {
        "NgramScorer": {
            "name": "NgramScorer",
            "location": 11,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "frequency_map": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NgramScorer.inner": {
            "name": "inner",
            "location": 28,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "lantern-master/lantern/fitness/patternmatch.py": {
        "PatternMatch": {
            "name": "PatternMatch",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "lantern-master/lantern/fitness/__init__.py": {},
    "lantern-master/lantern/modules/atbash.py": {
        "decrypt": {
            "name": "decrypt",
            "location": 12,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "ciphertext": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 28,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "plaintext": [
                    "str"
                ]
            }
        }
    },
    "lantern-master/lantern/modules/shift.py": {
        "make_shift_function": {
            "name": "make_shift_function",
            "location": 17,
            "return": [
                "Callable[([int, Any], Any)]"
            ],
            "arguments": {
                "alphabet": [
                    "Iterable"
                ],
                "operator": [
                    "Callable[([int, int], int)]"
                ]
            }
        },
        "crack": {
            "name": "crack",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "ciphertext": [
                    "Iterable"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 98,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "ciphertext": [
                    "Iterable"
                ],
                "shift_function": [
                    "Callable[([int, object], object)]"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 119,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "key": [
                    "int"
                ],
                "plaintext": [
                    "Iterable"
                ],
                "shift_function": [
                    "Callable[([int, object], object)]"
                ]
            }
        },
        "make_shift_function.shift_case_sensitive": {
            "name": "shift_case_sensitive",
            "location": 39,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "shift": [
                    "int",
                    "List[str]",
                    "bool",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "symbol": [
                    "int",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Callable[[dict], None]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lantern-master/lantern/modules/simplesubstitution.py": {
        "crack": {
            "name": "crack",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "ciphertext": [
                    "bool",
                    "int",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "ciphertext": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "plaintext": [
                    "str"
                ]
            }
        },
        "crack.next_node_inner_climb": {
            "name": "next_node_inner_climb",
            "location": 45,
            "return": [
                "tuple[Decryption]",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Sequence[T]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "crack.next_node_outer_climb": {
            "name": "next_node_outer_climb",
            "location": 54,
            "return": [
                "tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        }
    },
    "lantern-master/lantern/modules/vigenere.py": {
        "crack": {
            "name": "crack",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "ciphertext": [
                    "int",
                    "MutableMapping[str, Any]",
                    "str",
                    "List[float]"
                ]
            }
        },
        "key_periods": {
            "name": "key_periods",
            "location": 64,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "ciphertext": [
                    "int",
                    "List[str]",
                    "Union[int, str]",
                    "Counter[str]",
                    "list",
                    "Sequence",
                    "bytes"
                ],
                "max_key_period": [
                    "int",
                    "List[str]",
                    "list",
                    "Sequence",
                    "Collection"
                ]
            }
        },
        "_build_key": {
            "name": "_build_key",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "int",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "ciphertext": [
                    "str",
                    "Union[float, int]",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        }
    },
    "lantern-master/lantern/modules/__init__.py": {},
    "lantern-master/lantern/structures/decryption.py": {
        "Decryption.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ],
                "key": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "T",
                    "Optional[str]",
                    "str"
                ],
                "score": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "Decryption.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "lantern-master/lantern/structures/dynamicdict.py": {
        "DynamicDict.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "builders": [
                    "dict",
                    "Optional[List[int]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DynamicDict.__getattr__": {
            "name": "__getattr__",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "lantern-master/lantern/structures/__init__.py": {},
    "lantern-master/tests/test_score.py": {
        "test_score_with_single_function": {
            "name": "test_score_with_single_function",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_score_is_averaged_positive": {
            "name": "test_score_is_averaged_positive",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_score_is_averaged_negative": {
            "name": "test_score_is_averaged_negative",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_score_is_averaged_positive_and_negative": {
            "name": "test_score_is_averaged_positive_and_negative",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_score_invalid": {
            "name": "test_score_invalid",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/test_util.py": {
        "test_remove_with_punctuation": {
            "name": "test_remove_with_punctuation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_with_whitespace": {
            "name": "test_remove_with_whitespace",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_with_list_and_set": {
            "name": "test_remove_with_list_and_set",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_columns_length_1": {
            "name": "test_columns_length_1",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_columns_lower_length": {
            "name": "test_columns_lower_length",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_columns_same_length": {
            "name": "test_columns_same_length",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_columns_invalid_values": {
            "name": "test_split_columns_invalid_values",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate_ngrams": {
            "name": "test_iterate_ngrams",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate_ngrams_empty": {
            "name": "test_iterate_ngrams_empty",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate_ngrams_non_positive": {
            "name": "test_iterate_ngrams_non_positive",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_even_length": {
            "name": "test_group_even_length",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_odd_length": {
            "name": "test_group_odd_length",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_invalid": {
            "name": "test_group_invalid",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/util.py": {
        "get_top_decryptions": {
            "name": "get_top_decryptions",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "decryptions": [
                    "int",
                    "list",
                    "Sequence",
                    "List[T]"
                ],
                "n": [
                    "int",
                    "List[T]",
                    "Sequence",
                    "list"
                ]
            }
        }
    },
    "lantern-master/tests/analysis/test_frequency.py": {
        "test_frequency_analyze": {
            "name": "test_frequency_analyze",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequency_analyze_bigram": {
            "name": "test_frequency_analyze_bigram",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequency_analyze_empty_string": {
            "name": "test_frequency_analyze_empty_string",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequency_to_probability": {
            "name": "test_frequency_to_probability",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequency_to_probability_empty": {
            "name": "test_frequency_to_probability_empty",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_of_coincidence": {
            "name": "test_index_of_coincidence",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_of_coincidence_multiple_texts": {
            "name": "test_index_of_coincidence_multiple_texts",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_of_coincidence_none": {
            "name": "test_index_of_coincidence_none",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_of_coincidence_empty": {
            "name": "test_index_of_coincidence_empty",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chi_squared": {
            "name": "test_chi_squared",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chi_squared_similar": {
            "name": "test_chi_squared_similar",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chi_squared_different_symbols": {
            "name": "test_chi_squared_different_symbols",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_languagefrequency_attribute_access": {
            "name": "test_languagefrequency_attribute_access",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/analysis/test_search.py": {
        "test_hill_climb": {
            "name": "test_hill_climb",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hill_climb.get_next_node": {
            "name": "get_next_node",
            "location": 10,
            "return": [
                "tuple[typing.Optional[int]]",
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "node": [
                    "Sequence[T]",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "lantern-master/tests/fitness/test_chisquared.py": {
        "test_chisquared": {
            "name": "test_chisquared",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/fitness/test_corpus.py": {
        "_test_corpus_constructor": {
            "name": "_test_corpus_constructor",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "words": [
                    "bool"
                ]
            }
        },
        "test_corpus_constructor_with_set": {
            "name": "test_corpus_constructor_with_set",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_corpus_constructor_with_list": {
            "name": "test_corpus_constructor_with_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_corpus_all_english_one_word": {
            "name": "test_corpus_all_english_one_word",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_corpus_one_non_english": {
            "name": "test_corpus_one_non_english",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_corpus_multiple_non_english": {
            "name": "test_corpus_multiple_non_english",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/fitness/test_ngram.py": {
        "test_ngram_score": {
            "name": "test_ngram_score",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/fitness/test_patternmatch.py": {
        "test_patternmatch_with_word_found": {
            "name": "test_patternmatch_with_word_found",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patternmatch_with_word_notfound": {
            "name": "test_patternmatch_with_word_notfound",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patternmatch_with_regex_found": {
            "name": "test_patternmatch_with_regex_found",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patternmatch_with_regex_not_found": {
            "name": "test_patternmatch_with_regex_not_found",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/modules/test_atbash.py": {
        "test_decrypt": {
            "name": "test_decrypt",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt": {
            "name": "test_encrypt",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/modules/test_shift.py": {
        "_test_shift": {
            "name": "_test_shift",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "plaintext": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_quick_brown_fox_unigrams": {
            "name": "test_quick_brown_fox_unigrams",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_bigrams": {
            "name": "test_quick_brown_fox_bigrams",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_trigrams": {
            "name": "test_quick_brown_fox_trigrams",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_quadgrams": {
            "name": "test_quick_brown_fox_quadgrams",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_multiple_functions": {
            "name": "test_quick_brown_fox_multiple_functions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_upper": {
            "name": "test_quick_brown_fox_upper",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_patristocrats": {
            "name": "test_quick_brown_fox_patristocrats",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_no_whitespace": {
            "name": "test_quick_brown_fox_no_whitespace",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quick_brown_fox_no_whitespace_upper": {
            "name": "test_quick_brown_fox_no_whitespace_upper",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_buzz_buzz_buzz_quadgrams": {
            "name": "test_buzz_buzz_buzz_quadgrams",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_narrow_key_range": {
            "name": "test_narrow_key_range",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_key_range": {
            "name": "test_invalid_key_range",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt": {
            "name": "test_decrypt",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_large_key_wrapped": {
            "name": "test_decrypt_large_key_wrapped",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shifted_punctuation": {
            "name": "test_shifted_punctuation",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_shifted_punctuation": {
            "name": "test_decrypt_shifted_punctuation",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_shifted_overflow": {
            "name": "test_decrypt_shifted_overflow",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_byte_shifting": {
            "name": "test_decrypt_byte_shifting",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_list": {
            "name": "test_decrypt_list",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crack_list": {
            "name": "test_crack_list",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_symbol_decryption": {
            "name": "test_multi_symbol_decryption",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt": {
            "name": "test_encrypt",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_byte_shifting.shift_bytes": {
            "name": "shift_bytes",
            "location": 152,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "shift": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]"
                ],
                "symbol": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "test_multi_symbol_decryption.shift_function": {
            "name": "shift_function",
            "location": 181,
            "return": [
                "bool",
                "int",
                "Set[int]"
            ],
            "arguments": {
                "shift": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Tuple[str, str]"
                ],
                "symbol": [
                    "str"
                ]
            }
        }
    },
    "lantern-master/tests/modules/test_simplesubstitution.py": {
        "_test_simplesubstitution": {
            "name": "_test_simplesubstitution",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "plaintext": [
                    "Callable[[Any], bool]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Optional[int]",
                    "Mapping",
                    "str"
                ]
            }
        },
        "test_substution_invalid_ntrials_and_nswaps": {
            "name": "test_substution_invalid_ntrials_and_nswaps",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt": {
            "name": "test_decrypt",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt": {
            "name": "test_encrypt",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_key_as_list": {
            "name": "test_decrypt_key_as_list",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/modules/test_vigenere.py": {
        "_test_vigenere": {
            "name": "_test_vigenere",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "plaintext": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "first": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_text_with_punctuation_and_mixed_case": {
            "name": "test_text_with_punctuation_and_mixed_case",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_20_character_key_length_2": {
            "name": "test_20_character_key_length_2",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_key_period": {
            "name": "test_invalid_key_period",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt": {
            "name": "test_decrypt",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_with_punctuation": {
            "name": "test_decrypt_with_punctuation",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_lower_case": {
            "name": "test_decrypt_lower_case",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrypt_mixed_case": {
            "name": "test_decrypt_mixed_case",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/structures/test_decryption.py": {
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args": {
            "name": "test_args",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lt": {
            "name": "test_lt",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lantern-master/tests/structures/test_dynamicdict.py": {
        "test_dynamicdict": {
            "name": "test_dynamicdict",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dynamicdict_operations": {
            "name": "test_dynamicdict_operations",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dynamicdict_invalid_access": {
            "name": "test_dynamicdict_invalid_access",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
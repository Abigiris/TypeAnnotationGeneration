{
    "latte-master/lattec/ast.py": {
        "_blck_convert": {
            "name": "_blck_convert",
            "location": 147,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "l": [
                    "Tuple",
                    "List[Type]",
                    "Type",
                    "Callable"
                ]
            }
        },
        "newvar_from_var": {
            "name": "newvar_from_var",
            "location": 217,
            "return": [
                "NewVariable"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "Match[bytes]",
                    "Match"
                ]
            }
        },
        "decl_from_var_type": {
            "name": "decl_from_var_type",
            "location": 221,
            "return": [
                "Declaration"
            ],
            "arguments": {
                "v": [
                    "Type"
                ],
                "t": [
                    "Type"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "Dict[str,Any]"
                ],
                "prefix": [
                    "str",
                    "Text"
                ]
            }
        },
        "Position.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedType.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "latte-master/lattec/colors.py": {
        "black": {
            "name": "black",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "red": {
            "name": "red",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "green": {
            "name": "green",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "blue": {
            "name": "blue",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "purple": {
            "name": "purple",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "cyan": {
            "name": "cyan",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "white": {
            "name": "white",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "latte-master/lattec/compiler.py": {
        "compile": {
            "name": "compile",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/config.py": {},
    "latte-master/lattec/errors.py": {
        "clear_errors": {
            "name": "clear_errors",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "errors": {
            "name": "errors",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "add_error": {
            "name": "add_error",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "List[str]",
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "print_errors": {
            "name": "print_errors",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "latte-master/lattec/prelude.py": {},
    "latte-master/lattec/quads.py": {
        "from_ast_type": {
            "name": "from_ast_type",
            "location": 191,
            "return": [
                "Union[(FunctionPtr, I1, I32, String, Void)]"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bool"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 210,
            "return": [
                "GlobalVar"
            ],
            "arguments": {
                "t": [
                    "Dict",
                    "str"
                ]
            }
        },
        "gather": {
            "name": "gather",
            "location": 225,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "new_var": {
            "name": "new_var",
            "location": 231,
            "return": [
                "Var"
            ],
            "arguments": {
                "t": [
                    "str",
                    "int"
                ]
            }
        },
        "new_str_const": {
            "name": "new_str_const",
            "location": 238,
            "return": [
                "GlobalVar"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "get_string_consts": {
            "name": "get_string_consts",
            "location": 251,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "new_label": {
            "name": "new_label",
            "location": 257,
            "return": [
                "Label"
            ],
            "arguments": {}
        },
        "add_quad": {
            "name": "add_quad",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "T"
                ]
            }
        },
        "add_defer": {
            "name": "add_defer",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "Callable[,None]",
                    "str",
                    "List",
                    "Tuple"
                ]
            }
        },
        "open_defer_scope": {
            "name": "open_defer_scope",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "close_defer_scope": {
            "name": "close_defer_scope",
            "location": 276,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "I1.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "I8.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "I32.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ptr.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionPtr.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalVar.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SConstant.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "latte-master/lattec/traverse.py": {
        "traverse": {
            "name": "traverse",
            "location": 6,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Dict[str,Any]",
                    "Hashable",
                    "int"
                ],
                "pre_order": [
                    "List",
                    "bool",
                    "Dict[str,Any]"
                ],
                "post_order": [
                    "List",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "traverse.traverse_impl": {
            "name": "traverse_impl",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "latte-master/lattec/__init__.py": {},
    "latte-master/lattec/analyzer/constexprs.py": {
        "expr_post": {
            "name": "expr_post",
            "location": 5,
            "return": [
                "Union[(ast.BConstant, ast.IConstant, ast.SConstant, _T0)]"
            ],
            "arguments": {
                "node": [
                    "_T0@@"
                ]
            }
        },
        "stmt_post": {
            "name": "stmt_post",
            "location": 41,
            "return": [
                "dict[, ]",
                "ast_@_While",
                "ast_@_If"
            ],
            "arguments": {
                "node": [
                    "Dict"
                ]
            }
        },
        "fold_constexprs_post": {
            "name": "fold_constexprs_post",
            "location": 59,
            "return": [
                "ast_@_Expression",
                "ast_@_Statement"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "latte-master/lattec/analyzer/engine.py": {
        "type_analysis": {
            "name": "type_analysis",
            "location": 5,
            "return": [
                "str",
                "Dict[str, int]",
                "Optional[str]"
            ],
            "arguments": {
                "tree": [
                    "str"
                ]
            }
        },
        "static_analysis": {
            "name": "static_analysis",
            "location": 22,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "tree": [
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        }
    },
    "latte-master/lattec/analyzer/returns.py": {
        "check_returns_pre": {
            "name": "check_returns_pre",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "bool",
                    "Dict[str,bool]"
                ]
            }
        },
        "check_returns_post": {
            "name": "check_returns_post",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "latte-master/lattec/analyzer/scopes.py": {
        "infer_scopes_pre": {
            "name": "infer_scopes_pre",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "infer_scopes_post": {
            "name": "infer_scopes_post",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Dict"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/analyzer/typecheck.py": {
        "expr_post": {
            "name": "expr_post",
            "location": 10,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "expr": [
                    "_T0@@"
                ]
            }
        },
        "stmt_post": {
            "name": "stmt_post",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "stmt": [
                    "str",
                    "bool",
                    "BaseException"
                ]
            }
        },
        "tld_pre": {
            "name": "tld_pre",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "tld": [
                    "List",
                    "config.Config"
                ]
            }
        },
        "tld_post": {
            "name": "tld_post",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "tld": [
                    "Optional[Type]",
                    "Type",
                    "Dict",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "infer_types_pre": {
            "name": "infer_types_pre",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "infer_types_post": {
            "name": "infer_types_post",
            "location": 255,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "dict",
                "int",
                "Dict[str, str]",
                "Dict[int, Dict[int, int]]"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "latte-master/lattec/analyzer/__init__.py": {},
    "latte-master/lattec/llvm_backend/backend.py": {
        "generate_function": {
            "name": "generate_function",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "IO"
                ]
            }
        },
        "generate_llvm": {
            "name": "generate_llvm",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "funcs": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "latte-master/lattec/llvm_backend/resources.py": {},
    "latte-master/lattec/llvm_backend/__init__.py": {},
    "latte-master/lattec/parser/expressions.py": {
        "var_from_op": {
            "name": "var_from_op",
            "location": 35,
            "return": [
                "ast.Variable"
            ],
            "arguments": {
                "op": []
            }
        },
        "parens_expression": {
            "name": "parens_expression",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "single_expression": {
            "name": "single_expression",
            "location": 65,
            "return": [
                "Generator",
                "Sequence[cirq.Qid]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "expression": {
            "name": "expression",
            "location": 84,
            "return": [
                "Generator",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "expression.apply_op": {
            "name": "apply_op",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/parser/general.py": {
        "addpos": {
            "name": "addpos",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "lexeme": {
            "name": "lexeme",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "symbol": {
            "name": "symbol",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str"
                ]
            }
        },
        "rword": {
            "name": "rword",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "parens": {
            "name": "parens",
            "location": 59,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "p": [
                    "List",
                    "List[str]"
                ]
            }
        },
        "identifier_impl": {
            "name": "identifier_impl",
            "location": 67,
            "return": [
                "Generator",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "addpos.addpos_impl": {
            "name": "addpos_impl",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "rword.rword_impl": {
            "name": "rword_impl",
            "location": 53,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/parser/statements.py": {
        "brace_block": {
            "name": "brace_block",
            "location": 10,
            "return": [
                "Generator",
                "List[str]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "_constant": {
            "name": "_constant",
            "location": 21,
            "return": [
                "Union[(ast.BConstant, ast.IConstant, ast.Nothing, ast.SConstant)]"
            ],
            "arguments": {
                "v": [
                    "List[str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "t": [
                    "float",
                    "int",
                    "Optional[str]",
                    "str",
                    "Union[int,float]",
                    "None"
                ]
            }
        },
        "declaration": {
            "name": "declaration",
            "location": 40,
            "return": [
                "Generator",
                "mypy.types.Type",
                "str",
                "Dict[str,int]",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "ret": {
            "name": "ret",
            "location": 95,
            "return": [
                "Generator",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {}
        },
        "if_stmt": {
            "name": "if_stmt",
            "location": 104,
            "return": [
                "Generator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "while_stmt": {
            "name": "while_stmt",
            "location": 125,
            "return": [
                "Generator",
                "Iterable[str]",
                "str",
                "Dict[str,Any]",
                "web3.types.Wei"
            ],
            "arguments": {}
        },
        "statement": {
            "name": "statement",
            "location": 147,
            "return": [
                "Generator",
                "float",
                "int"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/parser/toplevel.py": {
        "function": {
            "name": "function",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "program": {
            "name": "program",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "program_parser": {
            "name": "program_parser",
            "location": 32,
            "return": [
                "Union[int, float, complex]"
            ],
            "arguments": {
                "prog": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "latte-master/lattec/parser/types.py": {},
    "latte-master/lattec/parser/__init__.py": {},
    "latte-master/lattec/quadruplets/engine.py": {
        "quadruplet_generation": {
            "name": "quadruplet_generation",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "latte-master/lattec/quadruplets/generator.py": {
        "gen_quads_post": {
            "name": "gen_quads_post",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        },
        "gen_quads_post.impl_e": {
            "name": "impl_e",
            "location": 35,
            "return": [
                "bool",
                "int",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "gen_quads_post.impl_s": {
            "name": "impl_s",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gen_quads_post.impl_t": {
            "name": "impl_t",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "gen_quads_post.impl_p": {
            "name": "impl_p",
            "location": 270,
            "return": [
                "List",
                "List[str]",
                "Optional[str]",
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/quadruplets/memassignment.py": {
        "mem_var": {
            "name": "mem_var",
            "location": 7,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "v": [
                    "bool",
                    "str",
                    "Callable",
                    "List[PydanticModelField]"
                ]
            }
        },
        "just_val": {
            "name": "just_val",
            "location": 16,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "quads.Val",
                    "bool"
                ]
            }
        },
        "eliminate_fn": {
            "name": "eliminate_fn",
            "location": 22,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "f": [
                    "Dict",
                    "quads.Function",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "assignment_elimination_mem": {
            "name": "assignment_elimination_mem",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "mem_var.impl_mv": {
            "name": "impl_mv",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "just_val.impl_jv": {
            "name": "impl_jv",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "eliminate_fn.A": {
            "name": "A",
            "location": 26,
            "return": [
                "bool",
                "Iterable['cirq.Qid']",
                "int"
            ],
            "arguments": {
                "v": [
                    "quads.Val",
                    "List[List[Any]]",
                    "int",
                    "List[str]",
                    "Tuple[List[Any], List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "eliminate_fn.sub_vars": {
            "name": "sub_vars",
            "location": 32,
            "return": [
                "Q_@_Call",
                "bool",
                "Q_@_CondBranch",
                "Q_@_Return",
                "str",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "q": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "latte-master/lattec/quadruplets/pruning.py": {
        "divide": {
            "name": "divide",
            "location": 13,
            "return": [
                "Tuple[(bool, list)]"
            ],
            "arguments": {
                "l": [
                    "List[T]",
                    "List[quads.Quad]",
                    "List[str]",
                    "Dict",
                    "List",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "prune": {
            "name": "prune",
            "location": 53,
            "return": [
                "bytes",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "str",
                "Exception",
                "float",
                "int",
                "Union[int, float]"
            ],
            "arguments": {
                "f": [
                    "Dict",
                    "Dict[str,str]",
                    "MutableMapping",
                    "quads.Function",
                    "T",
                    "Dict[str,Any]"
                ]
            }
        },
        "pruning": {
            "name": "pruning",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "latte-master/lattec/quadruplets/scopes.py": {
        "infer_scopes_pre": {
            "name": "infer_scopes_pre",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Dict"
                ]
            }
        },
        "infer_scopes_post": {
            "name": "infer_scopes_post",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "Dict"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "latte-master/lattec/quadruplets/__init__.py": {}
}
{
    "leancrawler-master/setup.py": {},
    "leancrawler-master/leancrawler/crawler.py": {
        "strip_name": {
            "name": "strip_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "crawl": {
            "name": "crawl",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LeanDecl.from_dict": {
            "name": "from_dict",
            "location": 62,
            "return": [
                "LeanDecl"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[_TLeanDecl]"
                ],
                "d": [
                    "str",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "LeanDecl.user_kind": {
            "name": "user_kind",
            "location": 98,
            "return": [
                "Text",
                "str",
                "ruamel.yaml.comments.CommentedMap",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanDecl.type_uses": {
            "name": "type_uses",
            "location": 111,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanDecl.value_uses": {
            "name": "value_uses",
            "location": 116,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanDecl.uses": {
            "name": "uses",
            "location": 121,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanDecl.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanLib.__getitem__": {
            "name": "__getitem__",
            "location": 135,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "LeanLib.__setitem__": {
            "name": "__setitem__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "LeanLib.__delitem__": {
            "name": "__delitem__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "LeanLib.__contains__": {
            "name": "__contains__",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LeanLib.__iter__": {
            "name": "__iter__",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeanLib.get": {
            "name": "get",
            "location": 150,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "LeanLib.from_yaml": {
            "name": "from_yaml",
            "location": 155,
            "return": [
                "LeanLib"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLeanLib]"
                ],
                "name": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "LeanLib.load_dump": {
            "name": "load_dump",
            "location": 189,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "LeanLib.dump": {
            "name": "dump",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "LeanLib.prune_foundations": {
            "name": "prune_foundations",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Tuple[str,str]",
                    "List[str]",
                    "Tuple[Union[str,str]]",
                    "Callable[[pathlib.Path],None]",
                    "Tuple[pathlib.Path,pathlib.Path,pathlib.Path]",
                    "Callable[pathlib.Path,None]",
                    "Tuple[Union[pathlib.Path,pathlib.Path,pathlib.Path]]"
                ],
                "prefixes": [
                    "str",
                    "None",
                    "int",
                    "Dict[int,Tuple[int,int]]",
                    "Dict[int,tuple[Union[int,int]]]",
                    "bool",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "LeanDeclGraph.from_lib": {
            "name": "from_lib",
            "location": 254,
            "return": [
                "LeanDeclGraph"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLeanDeclGraph]"
                ],
                "lean": [
                    "str",
                    "Dict[Hashable,Any]"
                ],
                "types_only": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "LeanDeclGraph.layout": {
            "name": "layout",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "List",
                    "Exception",
                    "Dict",
                    "bytes",
                    "Callable",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "LeanDeclGraph.component_of": {
            "name": "component_of",
            "location": 289,
            "return": [
                "str",
                "dict",
                "List[int]",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Set",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "LeanDeclGraph.write": {
            "name": "write",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "LeanLib.from_yaml.rself": {
            "name": "rself",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "set",
                    "List[int]",
                    "List[T]"
                ]
            }
        }
    },
    "leancrawler-master/leancrawler/__init__.py": {},
    "leancrawler-master/tests/test_dummy.py": {}
}
{
    "learn-islam-django-master/manage.py": {},
    "learn-islam-django-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str",
                    "int"
                ],
                "merged_file_paths": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[str]",
                    "bytes",
                    "Sequence[str]"
                ],
                "append_linesep": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "learn-islam-django-master/config/celery_app.py": {},
    "learn-islam-django-master/config/urls.py": {},
    "learn-islam-django-master/config/wsgi.py": {},
    "learn-islam-django-master/config/__init__.py": {},
    "learn-islam-django-master/config/settings/base.py": {},
    "learn-islam-django-master/config/settings/local.py": {},
    "learn-islam-django-master/config/settings/production.py": {},
    "learn-islam-django-master/config/settings/test.py": {},
    "learn-islam-django-master/config/settings/__init__.py": {},
    "learn-islam-django-master/docs/conf.py": {},
    "learn-islam-django-master/docs/__init__.py": {},
    "learn-islam-django-master/learn_islam/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "learn-islam-django-master/learn_islam/__init__.py": {},
    "learn-islam-django-master/learn_islam/chapters/admin.py": {},
    "learn-islam-django-master/learn_islam/chapters/apps.py": {},
    "learn-islam-django-master/learn_islam/chapters/models.py": {
        "Chapter.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterTranslation.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/chapters/schema.py": {},
    "learn-islam-django-master/learn_islam/chapters/types.py": {},
    "learn-islam-django-master/learn_islam/chapters/__init__.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0002_auto_20190126_1738.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0003_remove_chapter_level.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0004_auto_20190203_1302.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0005_remove_chaptertranslation_description.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/0006_auto_20190519_1749.py": {},
    "learn-islam-django-master/learn_islam/chapters/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/contrib/__init__.py": {},
    "learn-islam-django-master/learn_islam/contrib/sites/__init__.py": {},
    "learn-islam-django-master/learn_islam/contrib/sites/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "learn-islam-django-master/learn_islam/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/contrib/sites/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/core/apps.py": {},
    "learn-islam-django-master/learn_islam/core/models.py": {
        "LocaleField.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/core/__init__.py": {},
    "learn-islam-django-master/learn_islam/courses/admin.py": {},
    "learn-islam-django-master/learn_islam/courses/apps.py": {},
    "learn-islam-django-master/learn_islam/courses/inputs.py": {},
    "learn-islam-django-master/learn_islam/courses/models.py": {
        "Course.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.quiz_difficulties": {
            "name": "quiz_difficulties",
            "location": 32,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseTranslation.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/courses/schema.py": {},
    "learn-islam-django-master/learn_islam/courses/types.py": {},
    "learn-islam-django-master/learn_islam/courses/__init__.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/0002_auto_20190126_1306.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/0003_auto_20190126_1735.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/0004_auto_20190203_1302.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/0005_auto_20190519_1749.py": {},
    "learn-islam-django-master/learn_islam/courses/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/courses/tests/test_model.py": {
        "CourseModelTests.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseModelTests.test_quiz_difficulties_with_no_quiz": {
            "name": "test_quiz_difficulties_with_no_quiz",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseModelTests.test_quiz_difficulties_with_one_quiz": {
            "name": "test_quiz_difficulties_with_one_quiz",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseModelTests.test_quiz_difficulties_with_two_quiz": {
            "name": "test_quiz_difficulties_with_two_quiz",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseModelTests.test_quiz_difficulties_with_two_quiz_two_difficulties": {
            "name": "test_quiz_difficulties_with_two_quiz_two_difficulties",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseModelTests.test_quiz_difficulties_with_three_quiz_two_difficulties": {
            "name": "test_quiz_difficulties_with_three_quiz_two_difficulties",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/courses/tests/test_mutations.py": {},
    "learn-islam-django-master/learn_islam/courses/tests/__init__.py": {},
    "learn-islam-django-master/learn_islam/graphql/schema.py": {},
    "learn-islam-django-master/learn_islam/graphql/__init__.py": {},
    "learn-islam-django-master/learn_islam/graphql/core/decorators.py": {
        "permission_required": {
            "name": "permission_required",
            "location": 7,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "permissions": [
                    "str",
                    "List[str]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "permission_required.decorator": {
            "name": "decorator",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "permission_required.decorator.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "learn-islam-django-master/learn_islam/graphql/core/mutations.py": {
        "BaseMutation.__init_subclass_with_meta__": {
            "name": "__init_subclass_with_meta__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "None",
                    "bool",
                    "Mapping[int,str]",
                    "Mapping",
                    "requests.models.Response"
                ]
            }
        },
        "BaseMutation._update_mutation_arguments_and_fields": {
            "name": "_update_mutation_arguments_and_fields",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "arguments": [
                    "Dict",
                    "bool",
                    "Dict[str,str]",
                    "Mapping",
                    "Mapping[str,str]",
                    "int"
                ],
                "fields": [
                    "Dict"
                ]
            }
        },
        "BaseMutation.add_error": {
            "name": "add_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "errors": [
                    "List[str]",
                    "int",
                    "Mapping[str,Any]",
                    "str",
                    "Type",
                    "Union[str,blurr.core.type.Type]",
                    "pydantic.fields.ModelField"
                ],
                "field": [
                    "str",
                    "int",
                    "Mapping",
                    "Mapping[str,Any]",
                    "bool",
                    "django.db.models.query.QuerySet",
                    "Union[str,blurr.core.type.Type]"
                ],
                "message": [
                    "int",
                    "str",
                    "Mapping",
                    "Type",
                    "Mapping[str,Any]",
                    "List[str]",
                    "Union[str,blurr.core.type.Type]",
                    "pydantic.fields.ModelField"
                ]
            }
        },
        "BaseMutation.get_node_or_error": {
            "name": "get_node_or_error",
            "location": 61,
            "return": [
                "Union[Sequence,SweepFixedValues]",
                "int",
                "Tuple",
                "Dict[str,Any]",
                "Dict",
                "List",
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "info": [
                    "str",
                    "int",
                    "jgikbase.idmapping.core.object_id.NamespaceID"
                ],
                "global_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "errors": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "field": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "only_type": [
                    "str",
                    "None",
                    "int",
                    "jgikbase.idmapping.core.object_id.NamespaceID"
                ]
            }
        },
        "BaseMutation.get_nodes_or_error": {
            "name": "get_nodes_or_error",
            "location": 75,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "ids": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "mypy.types.CallableType",
                    "None",
                    "Optional[int]",
                    "Optional[utils.TypingInfo]"
                ],
                "errors": [
                    "str",
                    "bool",
                    "int"
                ],
                "field": [
                    "str",
                    "bool",
                    "int"
                ],
                "only_type": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "mypy.types.CallableType",
                    "int",
                    "Optional[int]",
                    "Optional[utils.TypingInfo]"
                ]
            }
        },
        "BaseMutation.clean_instance": {
            "name": "clean_instance",
            "location": 84,
            "return": [
                "str",
                "bool",
                "None",
                "List[cmk.utils.type_defs.HostName]",
                "int",
                "List[app.models.Subject]",
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type"
                ],
                "instance": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "errors": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseMutation.construct_instance": {
            "name": "construct_instance",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str",
                "models.Question",
                "Dict",
                "None",
                "Hashable",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int"
                ],
                "instance": [
                    "int",
                    "Dict",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "Hashable",
                    "None",
                    "bytes",
                    "str",
                    "Optional[Dict]",
                    "fklearn.types.LearnerFnType",
                    "fklearn.types.EvalFnType"
                ],
                "cleaned_data": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ModelMutation.__init_subclass_with_meta__": {
            "name": "__init_subclass_with_meta__",
            "location": 138,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "types.ModuleType",
                    "str"
                ],
                "arguments": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "str",
                    "List[str]",
                    "Optional[Union[str,Callable,bool]]",
                    "Callable",
                    "FrozenSet[str]",
                    "frozenset",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "model": [
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[bytes]",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Type[BaseModel]",
                    "Type"
                ],
                "exclude": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "return_field_name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Dict[str,Any]",
                    "Any",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Tuple[Union[list[Any],int]]",
                    "Tuple[List[Any],int]"
                ],
                "_meta": [
                    "Dict",
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "deeplearning.ml4pl.models.epoch.Type"
                ]
            }
        },
        "ModelMutation.clean_input": {
            "name": "clean_input",
            "location": 163,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "Optional[str]",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ],
                "info": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "Optional[List[int]]",
                    "List[int]",
                    "None"
                ],
                "instance": [
                    "bool",
                    "str",
                    "List[str]",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "None",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "Optional[List[str]]"
                ],
                "input": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "galaxy.api.types.Authentication"
                ],
                "errors": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "ModelMutation._save_m2m": {
            "name": "_save_m2m",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "info": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "instance": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[tuple[Union[Any,dict]]]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "List[Tuple[Any,Dict]]",
                    "django.db.models.Model"
                ],
                "cleaned_data": [
                    "Dict",
                    "str",
                    "Dict[Hashable,dict[Hashable,Any]]",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "Dict[Hashable,Dict[Hashable,Any]]"
                ]
            }
        },
        "ModelMutation.user_is_allowed": {
            "name": "user_is_allowed",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "core.models.Recipe",
                    "asgard.models.user.User",
                    "tracim.models.User"
                ],
                "user": [
                    "str",
                    "core.models.Recipe",
                    "asgard.models.user.User",
                    "tracim.models.User"
                ],
                "input": [
                    "str",
                    "core.models.Recipe",
                    "asgard.models.user.User",
                    "tracim.models.User"
                ]
            }
        },
        "ModelMutation.success_response": {
            "name": "success_response",
            "location": 243,
            "return": [
                "ModelMutation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModelMutation]"
                ],
                "instance": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping",
                    "tildes.models.scraper.ScraperResult",
                    "Mapping[str,Any]",
                    "asgard.models.spec.container.ContainerVolumeSpec"
                ]
            }
        },
        "ModelMutation.save": {
            "name": "save",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Tuple",
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "info": [
                    "List[str]",
                    "Tuple",
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "instance": [
                    "str",
                    "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]",
                    "List[str]",
                    "Callable",
                    "Type[django.db.models.base.Model]",
                    "int"
                ],
                "cleaned_input": [
                    "List[str]",
                    "Tuple",
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "ModelMutation.mutate": {
            "name": "mutate",
            "location": 252,
            "return": [
                "ModelMutation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModelMutation]"
                ],
                "root": [
                    "Dict",
                    "graphene.ResolveInfo"
                ],
                "info": [
                    "Dict",
                    "bytes",
                    "graphql.GraphQLSchema",
                    "None",
                    "Optional[bytes]",
                    "T"
                ]
            }
        },
        "ModelDeleteMutation.clean_instance": {
            "name": "clean_instance",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int"
                ],
                "info": [
                    "bool",
                    "int"
                ],
                "instance": [
                    "bool",
                    "int"
                ],
                "errors": [
                    "bool",
                    "int"
                ]
            }
        },
        "ModelDeleteMutation.mutate": {
            "name": "mutate",
            "location": 303,
            "return": [
                "ModelDeleteMutation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModelDeleteMutation]"
                ],
                "root": [
                    "Dict",
                    "graphene.ResolveInfo"
                ],
                "info": [
                    "Dict",
                    "bytes",
                    "T",
                    "None",
                    "Optional[bytes]",
                    "prefecutilities.graphql.GraphQLResult"
                ]
            }
        },
        "ModelMutation.clean_input.is_list_of_ids": {
            "name": "is_list_of_ids",
            "location": 176,
            "return": [
                "bool",
                "Dict[str,Any]",
                "str",
                "Type[BaseException]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "ModelMutation.clean_input.is_id_field": {
            "name": "is_id_field",
            "location": 181,
            "return": [
                "bool",
                "str",
                "Dict[str,Any]",
                "Dict",
                "List"
            ],
            "arguments": {
                "field": [
                    "List[mypy.types.Type]",
                    "cincoconfig.fields.InstanceMethodField"
                ]
            }
        },
        "ModelMutation.clean_input.is_upload_field": {
            "name": "is_upload_field",
            "location": 187,
            "return": [
                "bool",
                "str",
                "types.GraphQLType",
                "Dict[str,type]",
                "Type[Any]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "dict",
                    "Union[str, 'Type']",
                    "mypy.types.Instance"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/graphql/core/types.py": {
        "Decimal.parse_literal": {
            "name": "parse_literal",
            "location": 13,
            "return": [
                "Optional[decimal.Decimal]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Decimal.parse_value": {
            "name": "parse_value",
            "location": 20,
            "return": [
                "Optional[decimal.Decimal]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str,int,float]",
                    "int",
                    "float"
                ]
            }
        },
        "Upload.serialize": {
            "name": "serialize",
            "location": 32,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "Upload.parse_literal": {
            "name": "parse_literal",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Iterable[str]",
                "Dict[str,Any]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "bool"
                ]
            }
        },
        "Upload.parse_value": {
            "name": "parse_value",
            "location": 40,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Tuple[Union[Any,Any]]",
                "None",
                "Callable",
                "Dict",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "Dict",
                    "bool",
                    "None",
                    "Iterable[Any]"
                ]
            }
        },
        "Image.resolve_url": {
            "name": "resolve_url",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "File.resolve_url": {
            "name": "resolve_url",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/graphql/core/utils.py": {
        "get_model_name": {
            "name": "get_model_name",
            "location": 8,
            "return": [
                "str",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "model": [
                    "Exception",
                    "str",
                    "Dict",
                    "Mapping[str,T]",
                    "Mapping"
                ]
            }
        },
        "get_output_fields": {
            "name": "get_output_fields",
            "location": 14,
            "return": [
                "Dict[(_T1, Any)]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Optional[Union[int,float]]",
                    "int",
                    "float",
                    "None"
                ],
                "return_field_name": [
                    "str",
                    "Type",
                    "None",
                    "Optional[str]",
                    "Type[T]"
                ]
            }
        },
        "clean_seo_fields": {
            "name": "clean_seo_fields",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "snake_to_camel_case": {
            "name": "snake_to_camel_case",
            "location": 29,
            "return": [
                "str",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_nodes": {
            "name": "get_nodes",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "ids": [
                    "List[str]",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "graphene_type": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Scope]"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/graphql/core/__init__.py": {},
    "learn-islam-django-master/learn_islam/quizzes/admin.py": {},
    "learn-islam-django-master/learn_islam/quizzes/apps.py": {},
    "learn-islam-django-master/learn_islam/quizzes/forms.py": {},
    "learn-islam-django-master/learn_islam/quizzes/models.py": {
        "Quiz.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/quizzes/schema.py": {},
    "learn-islam-django-master/learn_islam/quizzes/types.py": {},
    "learn-islam-django-master/learn_islam/quizzes/widgets.py": {},
    "learn-islam-django-master/learn_islam/quizzes/__init__.py": {},
    "learn-islam-django-master/learn_islam/quizzes/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/quizzes/migrations/0002_auto_20190519_1044.py": {},
    "learn-islam-django-master/learn_islam/quizzes/migrations/0003_auto_20190519_1743.py": {},
    "learn-islam-django-master/learn_islam/quizzes/migrations/0004_quiz_pub_date.py": {},
    "learn-islam-django-master/learn_islam/quizzes/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/quizzes/tests/test_quizzes_models.py": {
        "test_quizzes_models_creation": {
            "name": "test_quizzes_models_creation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "learn-islam-django-master/learn_islam/quizzes/tests/__init__.py": {},
    "learn-islam-django-master/learn_islam/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CeleryAppConfig.ready": {
            "name": "ready",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/taskapp/__init__.py": {},
    "learn-islam-django-master/learn_islam/topics/admin.py": {},
    "learn-islam-django-master/learn_islam/topics/apps.py": {},
    "learn-islam-django-master/learn_islam/topics/models.py": {
        "Topic.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicTranslation.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/topics/schema.py": {},
    "learn-islam-django-master/learn_islam/topics/types.py": {},
    "learn-islam-django-master/learn_islam/topics/__init__.py": {},
    "learn-islam-django-master/learn_islam/topics/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/topics/migrations/0002_auto_20190203_1302.py": {},
    "learn-islam-django-master/learn_islam/topics/migrations/0003_auto_20190519_1749.py": {},
    "learn-islam-django-master/learn_islam/topics/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/tracks/admin.py": {},
    "learn-islam-django-master/learn_islam/tracks/apps.py": {},
    "learn-islam-django-master/learn_islam/tracks/models.py": {
        "Track.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackTranslation.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/tracks/schema.py": {},
    "learn-islam-django-master/learn_islam/tracks/types.py": {},
    "learn-islam-django-master/learn_islam/tracks/__init__.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/0002_auto_20190126_1306.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/0003_auto_20190203_1302.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/0004_auto_20190519_1749.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/0005_auto_20190525_1442.py": {},
    "learn-islam-django-master/learn_islam/tracks/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/admin.py": {},
    "learn-islam-django-master/learn_islam/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/mutations.py": {
        "CreateUser.mutate": {
            "name": "mutate",
            "location": 24,
            "return": [
                "CreateUser"
            ],
            "arguments": {
                "self": [
                    "_TCreateUser@@CreateUser@@"
                ],
                "info": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "float",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "first_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "last_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/types.py": {},
    "learn-islam-django-master/learn_islam/users/urls.py": {},
    "learn-islam-django-master/learn_islam/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 33,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/__init__.py": {},
    "learn-islam-django-master/learn_islam/users/migrations/0001_initial.py": {},
    "learn-islam-django-master/learn_islam/users/migrations/__init__.py": {},
    "learn-islam-django-master/learn_islam/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "learn-islam-django-master/learn_islam/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "learn-islam-django-master/learn_islam/users/tests/__init__.py": {}
}
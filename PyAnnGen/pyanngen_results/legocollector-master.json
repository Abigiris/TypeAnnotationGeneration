{
    "legocollector-master/setup.py": {},
    "legocollector-master/legocollector/manage.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "legocollector-master/legocollector/common/__init__.py": {},
    "legocollector-master/legocollector/common/util/url_helper.py": {
        "build_url": {
            "name": "build_url",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "bool",
                    "str",
                    "Union[float, str]",
                    "float"
                ],
                "get_param_dic": [
                    "bool",
                    "str",
                    "Union[float, str]",
                    "float"
                ]
            }
        }
    },
    "legocollector-master/legocollector/common/util/__init__.py": {},
    "legocollector-master/legocollector/inventory/admin.py": {
        "PartAdmin.related_parts": {
            "name": "related_parts",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "PartAdmin.related_part_count": {
            "name": "related_part_count",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "models.Movie"
                ]
            }
        },
        "PartAdmin.available_colors": {
            "name": "available_colors",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[dict[, ]]",
                    "Optional[List[Dict]]",
                    "None",
                    "str",
                    "Iterable[T]",
                    "Union[str, List]",
                    "list[]",
                    "Set[str]",
                    "set[str]",
                    "list"
                ]
            }
        },
        "UserPartAdmin.used_colors": {
            "name": "used_colors",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "UserPartAdmin.unused_colors": {
            "name": "unused_colors",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[dict[, ]]",
                    "Optional[List[Dict]]",
                    "None",
                    "str",
                    "Iterable[T]",
                    "Union[str, List]",
                    "list[]",
                    "Set[str]",
                    "set[str]",
                    "list"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/apps.py": {},
    "legocollector-master/legocollector/inventory/fields.py": {
        "PartColorChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 8,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/filters.py": {
        "UserPartFilter.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "None",
                    "dict",
                    "Mapping",
                    "dict[, ]",
                    "Optional[str]",
                    "typing.Mapping",
                    "List[Tuple[str, str]]",
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "queryset": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/forms.py": {
        "UserPartUpdateForm.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartUpdateForm.clean": {
            "name": "clean",
            "location": 21,
            "return": [
                "dict[str, float]",
                "str",
                "dict[str, str]",
                "Optional[float]",
                "dict[, ]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryCreateForm.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryCreateForm.clean": {
            "name": "clean",
            "location": 44,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any,str]]",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryUpdateForm.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryUpdateForm.clean": {
            "name": "clean",
            "location": 67,
            "return": [
                "dict[str, float]",
                "str",
                "dict[str, str]",
                "Optional[float]",
                "dict[, ]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.initial_color": {
            "name": "initial_color",
            "location": 107,
            "return": [
                "None",
                "bool",
                "db.models.taxon.FillDataLevel",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.submitted_color": {
            "name": "submitted_color",
            "location": 111,
            "return": [
                "None",
                "bool",
                "db.models.taxon.FillDataLevel",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.color_changed": {
            "name": "color_changed",
            "location": 115,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.initial_qty": {
            "name": "initial_qty",
            "location": 119,
            "return": [
                "None",
                "bool",
                "db.models.taxon.FillDataLevel",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.submitted_qty": {
            "name": "submitted_qty",
            "location": 123,
            "return": [
                "None",
                "bool",
                "db.models.taxon.FillDataLevel",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.qty_changed": {
            "name": "qty_changed",
            "location": 127,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.marked_for_deletion": {
            "name": "marked_for_deletion",
            "location": 131,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.initial_values_cleared": {
            "name": "initial_values_cleared",
            "location": 135,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "models.Trip",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.is_valid": {
            "name": "is_valid",
            "location": 138,
            "return": [
                "bool",
                "float",
                "list[]",
                "list[int]",
                "list[str]",
                "frozenset",
                "dict[str, None]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.get_form_actions": {
            "name": "get_form_actions",
            "location": 146,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryForm.save": {
            "name": "save",
            "location": 170,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "str",
                    "IO",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "BaseInventoryFormset.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseInventoryFormset.clean": {
            "name": "clean",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/models.py": {
        "PartCategory.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartCategory.height": {
            "name": "height",
            "location": 21,
            "return": [
                "float",
                "Optional[str]",
                "None",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.rgb_ints": {
            "name": "rgb_ints",
            "location": 44,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.complimentary_color": {
            "name": "complimentary_color",
            "location": 48,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.solor_is_light": {
            "name": "solor_is_light",
            "location": 56,
            "return": [
                "bool",
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "red": [
                    "int",
                    "str",
                    "dict",
                    "List[str]"
                ],
                "green": [
                    "int",
                    "str",
                    "dict",
                    "List[str]"
                ],
                "blue": [
                    "int",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Color.color_step": {
            "name": "color_step",
            "location": 61,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "red": [
                    "int",
                    "float",
                    "Union[str, Dict[str, Any]]"
                ],
                "green": [
                    "int",
                    "float",
                    "Union[str, Dict[str, Any]]"
                ],
                "blue": [
                    "int",
                    "float",
                    "Union[str, Dict[str, Any]]"
                ],
                "repetitions": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Color.save": {
            "name": "save",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.save": {
            "name": "save",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.dimension_set_count": {
            "name": "dimension_set_count",
            "location": 117,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.studs_set_count": {
            "name": "studs_set_count",
            "location": 121,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.available_colors": {
            "name": "available_colors",
            "location": 126,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.available_colors_count": {
            "name": "available_colors_count",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.available_colors_str": {
            "name": "available_colors_str",
            "location": 134,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.set_inventories": {
            "name": "set_inventories",
            "location": 138,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.set_count": {
            "name": "set_count",
            "location": 142,
            "return": [
                "int",
                "Set[str]",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.get_related_parts": {
            "name": "get_related_parts",
            "location": 145,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.related_part_count": {
            "name": "related_part_count",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartRelationship.__str__": {
            "name": "__str__",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.inventory_count": {
            "name": "inventory_count",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.used_colors": {
            "name": "used_colors",
            "location": 240,
            "return": [
                "str",
                "bool",
                "dep_check.models.Rules"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.used_colors_str": {
            "name": "used_colors_str",
            "location": 244,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.unused_colors": {
            "name": "unused_colors",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.__str__": {
            "name": "__str__",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPart.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 254,
            "return": [
                "bool",
                "int",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inventory.__str__": {
            "name": "__str__",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inventory.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 269,
            "return": [
                "bool",
                "int",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetPart.__str__": {
            "name": "__str__",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tables.py": {
        "PartImageColumn.render": {
            "name": "render",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "DecimalColumn.render": {
            "name": "render",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/urls.py": {},
    "legocollector-master/legocollector/inventory/views.py": {
        "convert_color_id_to_rgb": {
            "name": "convert_color_id_to_rgb",
            "location": 34,
            "return": [
                "JsonResponse",
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "typing.Mapping",
                    "Mapping",
                    "http.MITMRequest"
                ]
            }
        },
        "import_userparts": {
            "name": "import_userparts",
            "location": 52,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "export_userparts": {
            "name": "export_userparts",
            "location": 87,
            "return": [
                "HttpResponse",
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ColorListView.get_queryset": {
            "name": "get_queryset",
            "location": 106,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartUpdateView.form_valid": {
            "name": "form_valid",
            "location": 123,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "UserPartUpdateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 131,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "Dict[str, str]",
                "denite.util.UserContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartDeleteView.get_cancel_url": {
            "name": "get_cancel_url",
            "location": 143,
            "return": [
                "str",
                "List[str]",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 153,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[str,str,str]]",
                "set[]",
                "typing.KeysView",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartListView.get_queryset": {
            "name": "get_queryset",
            "location": 166,
            "return": [
                "str",
                "app.domain.common.TimeWindow",
                "Callable",
                "server.models.User",
                "models.User",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredPartListUserPartCreateView.post": {
            "name": "post",
            "location": 177,
            "return": [
                "HttpResponseRedirect",
                "str",
                "zerver.models.UserProfile",
                "int",
                "bool",
                "zam_repondeur.models.Lecture",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "FilteredPartListUserPartCreateView.get_part_ids_from_post": {
            "name": "get_part_ids_from_post",
            "location": 203,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredPartListUserPartCreateView.get_queryset": {
            "name": "get_queryset",
            "location": 221,
            "return": [
                "str",
                "bytes",
                "Optional[app.models.User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryCreateView.form_valid": {
            "name": "form_valid",
            "location": 231,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "bool",
                    "db.models.Region"
                ]
            }
        },
        "InventoryCreateView.get_cancel_url": {
            "name": "get_cancel_url",
            "location": 239,
            "return": [
                "str",
                "models.Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 242,
            "return": [
                "str",
                "List[str]",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryCreateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 246,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "Dict[str, str]",
                "denite.util.UserContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryUpdateView.form_valid": {
            "name": "form_valid",
            "location": 258,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "bool",
                    "db.models.Region"
                ]
            }
        },
        "InventoryUpdateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 266,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "Dict[str, str]",
                "denite.util.UserContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InventoryDeleteView.get_cancel_url": {
            "name": "get_cancel_url",
            "location": 278,
            "return": [
                "str",
                "List[str]",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartManageColorsView.get_context_data": {
            "name": "get_context_data",
            "location": 296,
            "return": [
                "str",
                "dict[, ]",
                "int",
                "list[]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPartManageColorsView.form_valid": {
            "name": "form_valid",
            "location": 307,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bytes",
                "Sequence[Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "trezor.messages.RippleSignTx.RippleSignTx",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/widgets.py": {
        "CustomSelectWidget.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "bytes",
                    "Union[str, bytes]",
                    "typing.Iterable[str]",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ],
                "choices": [
                    "tuple[]",
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]",
                    "Optional[Union[str, Any]]",
                    "bytes"
                ]
            }
        },
        "CustomSelectWidget.create_option": {
            "name": "create_option",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "label": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "selected": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "index": [
                    "str",
                    "int",
                    "Optional[Collection[str]]",
                    "typing.Collection",
                    "None"
                ],
                "subindex": [
                    "str",
                    "None"
                ],
                "attrs": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/__init__.py": {},
    "legocollector-master/legocollector/inventory/management/__init__.py": {},
    "legocollector-master/legocollector/inventory/management/commands/guess_dimensions_from_part_names.py": {
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.guess_dimensions": {
            "name": "guess_dimensions",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.guess_dimension_from_name": {
            "name": "guess_dimension_from_name",
            "location": 40,
            "return": [
                "Optional[Tuple[(decimal.Decimal, decimal.Decimal, Optional[decimal.Decimal])]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/import_bricklink_attributes.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bokeh.models.Plot"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/import_ldraw_processed_parts.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bokeh.models.Plot"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.import_ldraw_data": {
            "name": "import_ldraw_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dic": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Dict[bytes, bytes]",
                    "dict[bytes, bytes]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/import_rebrickable_data.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bokeh.models.Plot"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._populate_colors": {
            "name": "_populate_colors",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command._populate_part_categories": {
            "name": "_populate_part_categories",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "list[bytes]",
                    "List[bytes]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Command._populate_parts": {
            "name": "_populate_parts",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "list[bytes]",
                    "List[bytes]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Command._populate_relationships": {
            "name": "_populate_relationships",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "Command._populate_set_parts": {
            "name": "_populate_set_parts",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Command._validate_config_path": {
            "name": "_validate_config_path",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "expected_file_list": [
                    "list[]",
                    "str",
                    "bool",
                    "list",
                    "Iterable[Any]",
                    "int"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/import_rebrickable_scraped_parts.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bokeh.models.Plot"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.import_scraped_data": {
            "name": "import_scraped_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dic": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Dict[bytes, bytes]",
                    "dict[bytes, bytes]"
                ]
            }
        },
        "Command.provider_from_string": {
            "name": "provider_from_string",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/scrape_rebrickable_parts.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.scrape_rebrickable_parts": {
            "name": "scrape_rebrickable_parts",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "json_file_path": [
                    "str",
                    "bool"
                ],
                "part_csv_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command._get_part_nums_from_rebrickable_csv": {
            "name": "_get_part_nums_from_rebrickable_csv",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "part_csv_path": [
                    "str"
                ]
            }
        },
        "Command._get_scrape_list": {
            "name": "_get_scrape_list",
            "location": 71,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "part_nums": [
                    "_T0"
                ],
                "count": [
                    "Optional[List[float]]",
                    "bytes"
                ]
            }
        },
        "Command._form_scrape_url": {
            "name": "_form_scrape_url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "part_nums": [
                    "str",
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "Callable[[str], str]",
                    "list",
                    "AnyStr"
                ],
                "api_key": [
                    "List[bytes]",
                    "list[bytes]",
                    "bool",
                    "list",
                    "bytes",
                    "list[]",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Set[Tuple[str, str]]",
                    "set[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "Command._load_scrape_data": {
            "name": "_load_scrape_data",
            "location": 90,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "json_file_path": [
                    "str"
                ],
                "part_csv_path": [
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Dict[str, Dict]",
                    "dict[str, dict[, ]]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "zerver.models.Realm"
                ]
            }
        },
        "Command._scrape": {
            "name": "_scrape",
            "location": 120,
            "return": [
                "dict[, ]",
                "List[int]",
                "Dict[str, int]",
                "List[dict]",
                "magic.models.Deck"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Command._save_scrape": {
            "name": "_save_scrape",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "json_file_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "data_dic": [
                    "bool",
                    "int",
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "unscraped_list": [
                    "List[str]",
                    "bool",
                    "Dict[str, List[bytes]]",
                    "logging.Logger",
                    "Optional[str]",
                    "List[Dict]",
                    "Sequence[str]"
                ]
            }
        },
        "Command._process_scrape_result": {
            "name": "_process_scrape_result",
            "location": 143,
            "return": [
                "_T1"
            ],
            "arguments": {
                "scrape_result": [
                    "str",
                    "Dict[str, Any]",
                    "list[dict[, ]]",
                    "list[]",
                    "list[str]",
                    "dict",
                    "List[Dict]",
                    "list",
                    "List[str]",
                    "Sequence[str]"
                ],
                "data_dic": [
                    "_T1"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/set_related_attributes.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.print_update_details": {
            "name": "print_update_details",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "attribute_updates": [
                    "str",
                    "Optional[dict]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Command.set_related_attribs_for_part": {
            "name": "set_related_attribs_for_part",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "part": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/show_db_details.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.show_part_details": {
            "name": "show_part_details",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Command.show_category_details": {
            "name": "show_category_details",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "legocollector-master/legocollector/inventory/management/commands/__init__.py": {},
    "legocollector-master/legocollector/inventory/migrations/0001_initial.py": {},
    "legocollector-master/legocollector/inventory/migrations/0002_userpart_qty.py": {},
    "legocollector-master/legocollector/inventory/migrations/0003_auto_20190907_2104.py": {},
    "legocollector-master/legocollector/inventory/migrations/0004_auto_20190909_1140.py": {},
    "legocollector-master/legocollector/inventory/migrations/0005_auto_20190909_1202.py": {},
    "legocollector-master/legocollector/inventory/migrations/0006_auto_20190909_1911.py": {},
    "legocollector-master/legocollector/inventory/migrations/0007_delete_userpartinventory.py": {},
    "legocollector-master/legocollector/inventory/migrations/0008_auto_20190919_0952.py": {},
    "legocollector-master/legocollector/inventory/migrations/0009_auto_20190919_1005.py": {},
    "legocollector-master/legocollector/inventory/migrations/0010_auto_20191017_2040.py": {},
    "legocollector-master/legocollector/inventory/migrations/0011_auto_20191017_2046.py": {},
    "legocollector-master/legocollector/inventory/migrations/0012_auto_20191017_2107.py": {},
    "legocollector-master/legocollector/inventory/migrations/0013_remove_part_child_relationship.py": {},
    "legocollector-master/legocollector/inventory/migrations/0014_auto_20191019_1826.py": {},
    "legocollector-master/legocollector/inventory/migrations/0015_auto_20191020_0844.py": {},
    "legocollector-master/legocollector/inventory/migrations/0016_auto_20191021_1843.py": {},
    "legocollector-master/legocollector/inventory/migrations/0017_auto_20191021_2001.py": {},
    "legocollector-master/legocollector/inventory/migrations/0018_auto_20191022_1928.py": {},
    "legocollector-master/legocollector/inventory/migrations/0019_color_rgb_complimentary.py": {},
    "legocollector-master/legocollector/inventory/migrations/0020_remove_color_rgb_complimentary.py": {},
    "legocollector-master/legocollector/inventory/migrations/0021_auto_20191027_0947.py": {},
    "legocollector-master/legocollector/inventory/migrations/0022_auto_20191027_1502.py": {},
    "legocollector-master/legocollector/inventory/migrations/0023_auto_20191027_1734.py": {},
    "legocollector-master/legocollector/inventory/migrations/0024_auto_20191027_1755.py": {},
    "legocollector-master/legocollector/inventory/migrations/0025_auto_20191028_1039.py": {},
    "legocollector-master/legocollector/inventory/migrations/0026_auto_20191029_2135.py": {},
    "legocollector-master/legocollector/inventory/migrations/0027_auto_20191029_2137.py": {},
    "legocollector-master/legocollector/inventory/migrations/0028_part_image_url.py": {},
    "legocollector-master/legocollector/inventory/migrations/0029_part_stud_count.py": {},
    "legocollector-master/legocollector/inventory/migrations/0030_auto_20191129_1704.py": {},
    "legocollector-master/legocollector/inventory/migrations/0031_auto_20191129_1718.py": {},
    "legocollector-master/legocollector/inventory/migrations/__init__.py": {},
    "legocollector-master/legocollector/inventory/tests/__init__.py": {},
    "legocollector-master/legocollector/inventory/tests/forms/test_inventory_form.py": {
        "TestFormProcessing.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.run_form": {
            "name": "run_form",
            "location": 34,
            "return": [
                "inventory.forms.InventoryForm"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.run_form_is_valid_test": {
            "name": "run_form_is_valid_test",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_value": []
            }
        },
        "TestFormProcessing.test_cleaned_data_populated": {
            "name": "test_cleaned_data_populated",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_empty_form": {
            "name": "test_empty_form",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_remove_form_always_valid": {
            "name": "test_remove_form_always_valid",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_values_removed_for_deletion": {
            "name": "test_form_values_removed_for_deletion",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_newly_populated_form": {
            "name": "test_form_newly_populated_form",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_unchanged": {
            "name": "test_form_unchanged",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_new_form_incomplete": {
            "name": "test_form_new_form_incomplete",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_incomplete_after_edit": {
            "name": "test_form_incomplete_after_edit",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_incomplete_color_removed_qty_0": {
            "name": "test_form_incomplete_color_removed_qty_0",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_form_incomplete_qty_removed": {
            "name": "test_form_incomplete_qty_removed",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.run_form_action_test": {
            "name": "run_form_action_test",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_new_form_blank_no_action": {
            "name": "test_new_form_blank_no_action",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_new_form_new_inventory_create": {
            "name": "test_new_form_new_inventory_create",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_invalid_forms_no_actions": {
            "name": "test_invalid_forms_no_actions",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_removed_initial_data_delete": {
            "name": "test_removed_initial_data_delete",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_removed_no_initial_data_no_action": {
            "name": "test_removed_no_initial_data_no_action",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_cleared_data_delete": {
            "name": "test_cleared_data_delete",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_clear_qty_only_no_action": {
            "name": "test_clear_qty_only_no_action",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_clear_color_only_no_action": {
            "name": "test_clear_color_only_no_action",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_replace_old_color": {
            "name": "test_replace_old_color",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_populated_form_no_changes_no_action": {
            "name": "test_populated_form_no_changes_no_action",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormProcessing.test_populated_form_change_qty_update": {
            "name": "test_populated_form_change_qty_update",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/forms/__init__.py": {},
    "legocollector-master/legocollector/inventory/tests/management/test_set_related_attributes.py": {
        "TestRelatedAttributes.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedAttributes.test_no_dims_no_studs_present": {
            "name": "test_no_dims_no_studs_present",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedAttributes.test_copy_attributes": {
            "name": "test_copy_attributes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedAttributes.test_clashing_values": {
            "name": "test_clashing_values",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/management/__init__.py": {},
    "legocollector-master/legocollector/inventory/tests/models/test_color.py": {
        "TestColorCreation.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColorCreation.test_colorcreation": {
            "name": "test_colorcreation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/models/test_part.py": {
        "TestGetRelatedParts.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_parts_all_args_false": {
            "name": "test_related_parts_all_args_false",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_parts_no_parents": {
            "name": "test_related_parts_no_parents",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_1_parent": {
            "name": "test_related_1_parent",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_transitive_parent": {
            "name": "test_related_transitive_parent",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_transitive_parent_circular": {
            "name": "test_related_transitive_parent_circular",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_parts_no_children": {
            "name": "test_related_parts_no_children",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_1_child": {
            "name": "test_related_1_child",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_transitive_children": {
            "name": "test_related_transitive_children",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_transitive_children_circular": {
            "name": "test_related_transitive_children_circular",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_related_1_child_1_parent": {
            "name": "test_related_1_child_1_parent",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRelatedParts.test_all_related_parts_transitive": {
            "name": "test_all_related_parts_transitive",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAvailableColors.setUp": {
            "name": "setUp",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAvailableColors.test_available_colors": {
            "name": "test_available_colors",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDimensions.setUp": {
            "name": "setUp",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDimensions.test_dimension_no_attribs": {
            "name": "test_dimension_no_attribs",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDimensions.test_dimension_single_attribs": {
            "name": "test_dimension_single_attribs",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDimensions.test_dimension_2_attribs": {
            "name": "test_dimension_2_attribs",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDimensions.test_dimension_all_attribs": {
            "name": "test_dimension_all_attribs",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.setUp": {
            "name": "setUp",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.test_studs_no_attribs": {
            "name": "test_studs_no_attribs",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.test_studs_single_attribs": {
            "name": "test_studs_single_attribs",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.test_studs_2_attribs": {
            "name": "test_studs_2_attribs",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.test_studs_all_attribs": {
            "name": "test_studs_all_attribs",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStuds.test_swap_width_and_length": {
            "name": "test_swap_width_and_length",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.setUp": {
            "name": "setUp",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.test_no_height": {
            "name": "test_no_height",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.test_has_height": {
            "name": "test_has_height",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.test_create_height_overwritten": {
            "name": "test_create_height_overwritten",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.test_create_height_not_overwritten": {
            "name": "test_create_height_not_overwritten",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticHeight.test_update_category_height_overwritten": {
            "name": "test_update_category_height_overwritten",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetInventories.setUp": {
            "name": "setUp",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetInventories.test_no_set": {
            "name": "test_no_set",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetInventories.test_single_set_inventory": {
            "name": "test_single_set_inventory",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetInventories.test_multiple_set_inventories": {
            "name": "test_multiple_set_inventories",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetInventories.test_multiple_times_same_set_inventory": {
            "name": "test_multiple_times_same_set_inventory",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/models/test_part_category.py": {
        "TestPartCategoryHeight.test_no_height_for_category": {
            "name": "test_no_height_for_category",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestPartCategoryHeight.test_height_for_category": {
            "name": "test_height_for_category",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/models/test_user_part.py": {
        "TestInventoryColors.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryColors.test_colors_single_user": {
            "name": "test_colors_single_user",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryColors.test_colors_multi_user": {
            "name": "test_colors_multi_user",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryColors.test_available_colors_to_select": {
            "name": "test_available_colors_to_select",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.test_no_colors_0_qty": {
            "name": "test_no_colors_0_qty",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.test_colors_with_0_qty": {
            "name": "test_colors_with_0_qty",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.test_color_with_qty": {
            "name": "test_color_with_qty",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.test_multiple_colors_mixed_qty": {
            "name": "test_multiple_colors_mixed_qty",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInventoryQty.test_multiple_userpart_same_color": {
            "name": "test_multiple_userpart_same_color",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "legocollector-master/legocollector/inventory/tests/models/__init__.py": {},
    "legocollector-master/legocollector/legocollector/settings.py": {},
    "legocollector-master/legocollector/legocollector/urls.py": {},
    "legocollector-master/legocollector/legocollector/wsgi.py": {},
    "legocollector-master/legocollector/legocollector/__init__.py": {},
    "legocollector-master/legocollector/tests/test_success.py": {
        "test_success": {
            "name": "test_success",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "legocollector-master/legocollector/tests/__init__.py": {},
    "legocollector-master/legocollector/tests/utils/test_ldraw_studcount_parser.py": {
        "test_invalid_parts_line": {
            "name": "test_invalid_parts_line",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identify_line_type": {
            "name": "test_identify_line_type",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line_type": [
                    "int",
                    "str",
                    "Exception",
                    "bool",
                    "typing.Type",
                    "Type"
                ],
                "line": [
                    "int",
                    "str",
                    "Exception",
                    "bool",
                    "typing.Type",
                    "Type"
                ]
            }
        },
        "test_identify_unknown_line_type": {
            "name": "test_identify_unknown_line_type",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_part_file_from_part_line": {
            "name": "test_get_part_file_from_part_line",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_is_top_stud_file": {
            "name": "test_file_is_top_stud_file",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_unknown_file": {
            "name": "test_unknown_file",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_find_subdir_file": {
            "name": "test_find_subdir_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_dir_finds_top_stud_primitives": {
            "name": "test_build_dir_finds_top_stud_primitives",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_get_sub_files_from_file": {
            "name": "test_get_sub_files_from_file",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_top_top_studs_for_unknown_file": {
            "name": "test_get_top_top_studs_for_unknown_file",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_top_top_studs_for_stud_files": {
            "name": "test_get_top_top_studs_for_stud_files",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "test_get_top_studs": {
            "name": "test_get_top_studs",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "top_studs": [
                    "str"
                ],
                "part_num": [
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_processed_files_dic_specified": {
            "name": "test_processed_files_dic_specified",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_visited_count": {
            "name": "test_file_visited_count",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calc_top_studs_for_part_list": {
            "name": "test_calc_top_studs_for_part_list",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unofficial_missing_parts_included": {
            "name": "test_unofficial_missing_parts_included",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_can_handle_duplicate_unofficial_files": {
            "name": "test_can_handle_duplicate_unofficial_files",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unofficial_missing_part_top_studs": {
            "name": "test_unofficial_missing_part_top_studs",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "top_studs": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ],
                "part_num": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_unofficial_file_with_missing_subparts": {
            "name": "test_unofficial_file_with_missing_subparts",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_part_list_to_process": {
            "name": "test_generate_part_list_to_process",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_is_underside_stud_file": {
            "name": "test_file_is_underside_stud_file",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_get_bottom_studs": {
            "name": "test_get_bottom_studs",
            "location": 327,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "top_studs": [
                    "str"
                ],
                "part_num": [
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_file_is_stud_ring_file": {
            "name": "test_file_is_stud_ring_file",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_get_stud_ring_count": {
            "name": "test_get_stud_ring_count",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "top_studs": [
                    "str"
                ],
                "part_num": [
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "legocollector-master/legocollector/tests/utils/__init__.py": {},
    "legocollector-master/legocollector/utils/ldraw_studcount_parser.py": {
        "line_type_from_line": {
            "name": "line_type_from_line",
            "location": 106,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "get_file_from_part_line": {
            "name": "get_file_from_part_line",
            "location": 125,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "get_ldraw_file_type": {
            "name": "get_ldraw_file_type",
            "location": 129,
            "return": [
                "Optional[Dict[str, Any]]",
                "int",
                "Mapping[str, str]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_stud_count_for_file_type": {
            "name": "get_stud_count_for_file_type",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "file_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "print_sub_files": {
            "name": "print_sub_files",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "file_dic": [
                    "str",
                    "list[str]",
                    "path.Path",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "calc_top_studs_for_part_file": {
            "name": "calc_top_studs_for_part_file",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "file_dic": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "processed_files_dic": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[\"Source\"]",
                    "list[S]"
                ],
                "file_visited_count": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "rec_level": [
                    "int",
                    "str",
                    "MutableMapping[domain.Identifier, datetime.date]",
                    "Optional[path.Path]"
                ]
            }
        },
        "calc_top_studs_for_part_list": {
            "name": "calc_top_studs_for_part_list",
            "location": 220,
            "return": [
                "Dict[(Any, Dict[(str, List[str])])]"
            ],
            "arguments": {
                "part_list": [
                    "list[str]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "Sequence[str]",
                    "List[str]",
                    "Dict[str, Tuple[str, str]]",
                    "int",
                    "bool"
                ],
                "file_dic": [
                    "str",
                    "bool",
                    "IO",
                    "typing.IO",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "generate_part_list_to_process": {
            "name": "generate_part_list_to_process",
            "location": 246,
            "return": [
                "dict_values[pathlib.Path]"
            ],
            "arguments": {
                "dir_list": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "create_json_for_parts": {
            "name": "create_json_for_parts",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "json_out_file_path": [
                    "str"
                ]
            }
        },
        "FileListDic.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListDic._parse_dir": {
            "name": "_parse_dir",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_dir": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "FileListDic._keytransform": {
            "name": "_keytransform",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FileListDic.__setitem__": {
            "name": "__setitem__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "AnyStr",
                    "typing.AnyStr"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FileListDic.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable",
                    "Hashable",
                    "T"
                ]
            }
        },
        "FileListDic.__iter__": {
            "name": "__iter__",
            "location": 74,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListDic.__len__": {
            "name": "__len__",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListDic.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListDic.__delitem__": {
            "name": "__delitem__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable",
                    "Hashable",
                    "T"
                ]
            }
        },
        "FileListDic.__contains__": {
            "name": "__contains__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "LdrawFile.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "LdrawFile._parse": {
            "name": "_parse",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "legocollector-master/legocollector/utils/project_logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_path": [
                    "str"
                ]
            }
        },
        "test_logging": {
            "name": "test_logging",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "legocollector-master/legocollector/utils/__init__.py": {}
}
{
    "lesbar.club-master/server/main.py": {},
    "lesbar.club-master/server/nltk_install.py": {},
    "lesbar.club-master/server/lesbar/formulas.py": {
        "gsmog": {
            "name": "gsmog",
            "location": 9,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "wiener_sachtext_formel": {
            "name": "wiener_sachtext_formel",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "flesh_reading_ease": {
            "name": "flesh_reading_ease",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "gunning_fog_index": {
            "name": "gunning_fog_index",
            "location": 82,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "lix": {
            "name": "lix",
            "location": 98,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "dale_chall": {
            "name": "dale_chall",
            "location": 121,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "lesbar.club-master/server/lesbar/text.py": {
        "Text.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int"
                ],
                "lang": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "Text.num_characters": {
            "name": "num_characters",
            "location": 22,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.num_sentences": {
            "name": "num_sentences",
            "location": 26,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.words": {
            "name": "words",
            "location": 30,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.num_words": {
            "name": "num_words",
            "location": 37,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.syllables": {
            "name": "syllables",
            "location": 41,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.num_syllables": {
            "name": "num_syllables",
            "location": 49,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.letters": {
            "name": "letters",
            "location": 53,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.num_letters": {
            "name": "num_letters",
            "location": 62,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.detected_lang": {
            "name": "detected_lang",
            "location": 66,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.language_match": {
            "name": "language_match",
            "location": 70,
            "return": [
                "bool",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.to_dict": {
            "name": "to_dict",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Type",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "lang": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Sentence.tokenize": {
            "name": "tokenize",
            "location": 96,
            "return": [
                "List[Sentence]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "content": [
                    "str"
                ],
                "lang": [
                    "Text",
                    "str",
                    "Callable",
                    "Dict"
                ]
            }
        },
        "Sentence.syllables": {
            "name": "syllables",
            "location": 109,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.to_dict": {
            "name": "to_dict",
            "location": 115,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Type",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "lang": [
                    "Text",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Word.tokenize": {
            "name": "tokenize",
            "location": 136,
            "return": [
                "List[Word]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "content": [
                    "str",
                    "int",
                    "T"
                ],
                "lang": [
                    "Text",
                    "List",
                    "bytes",
                    "List[str]",
                    "List[List[Any]]",
                    "str"
                ]
            }
        },
        "Word.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Syllable.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int"
                ]
            }
        },
        "Syllable.tokenize": {
            "name": "tokenize",
            "location": 174,
            "return": [
                "List[Syllable]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "content": [
                    "str",
                    "Dict",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content"
                ],
                "lang": [
                    "str",
                    "Text"
                ]
            }
        },
        "Syllable.to_dict": {
            "name": "to_dict",
            "location": 182,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Letter.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int"
                ]
            }
        },
        "Letter.tokenize": {
            "name": "tokenize",
            "location": 191,
            "return": [
                "List[Letter]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "content": [
                    "str",
                    "Dict",
                    "tracim.models.data.User",
                    "tracim.models.data.Content",
                    "kata.data.io.network.GithubApi"
                ]
            }
        }
    },
    "lesbar.club-master/server/lesbar/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 24,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        },
        "create_app.languages": {
            "name": "languages",
            "location": 30,
            "return": [
                "str",
                "List[str]",
                "Union[List[str], str]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "create_app.lesbar": {
            "name": "lesbar",
            "location": 34,
            "return": [
                "Tuple[int]",
                "DefaultDict[int,List[Any]]",
                "Dict[str,int]",
                "OrderedDict"
            ],
            "arguments": {}
        }
    },
    "lesbar.club-master/server/lesbar/rules/default.py": {},
    "lesbar.club-master/server/lesbar/rules/__init__.py": {
        "filler": {
            "name": "filler",
            "location": 5,
            "return": [],
            "arguments": {
                "word": [
                    "str",
                    "BaseException",
                    "List[str]"
                ],
                "fillers": [
                    "str",
                    "BaseException",
                    "List[str]"
                ]
            }
        },
        "long_word": {
            "name": "long_word",
            "location": 10,
            "return": [],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "bool"
                ],
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "long_sentence": {
            "name": "long_sentence",
            "location": 15,
            "return": [],
            "arguments": {
                "sentence": [
                    "int",
                    "str",
                    "bool"
                ],
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tag": {
            "name": "tag",
            "location": 20,
            "return": [],
            "arguments": {
                "sentence": [
                    "str",
                    "Union[int, str]"
                ],
                "tagger": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "passive": {
            "name": "passive",
            "location": 27,
            "return": [],
            "arguments": {
                "sentence": [
                    "int",
                    "Callable",
                    "str"
                ],
                "passive_indicators": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "abbreviations": {
            "name": "abbreviations",
            "location": 44,
            "return": [],
            "arguments": {
                "word": [
                    "str"
                ],
                "regex": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "apply_rules": {
            "name": "apply_rules",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "lesbar.club-master/server/lesbar/rules/de_DE/ClassifierBasedGermanTagger.py": {
        "ClassifierBasedGermanTagger.feature_detector": {
            "name": "feature_detector",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        }
    },
    "lesbar.club-master/server/lesbar/rules/de_DE/fillers.py": {},
    "lesbar.club-master/server/lesbar/rules/de_DE/passive_indicators.py": {},
    "lesbar.club-master/server/lesbar/rules/de_DE/tagger.py": {
        "RenameUnpickler.find_class": {
            "name": "find_class",
            "location": 7,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lesbar.club-master/server/lesbar/rules/de_DE/tagger_traning.py": {},
    "lesbar.club-master/server/lesbar/rules/de_DE/__init__.py": {}
}
{
    "lib_regexp-master/build_docs.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "lib_regexp-master/conftest.py": {
        "pytest_cmdline_preparse": {
            "name": "pytest_cmdline_preparse",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "lib_regexp-master/project_conf.py": {},
    "lib_regexp-master/project_update.py": {
        "format_commandline_help_file": {
            "name": "format_commandline_help_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_commandline_help_file": {
            "name": "create_commandline_help_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_init_config_file": {
            "name": "create_init_config_file",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_in_own_project_folder": {
            "name": "is_in_own_project_folder",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_path_template_dir_local": {
            "name": "get_path_template_dir_local",
            "location": 100,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "is_ok_to_copy": {
            "name": "is_ok_to_copy",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_source_file": [
                    "pathlib.Path"
                ]
            }
        },
        "get_paths_to_copy": {
            "name": "get_paths_to_copy",
            "location": 125,
            "return": [
                "list"
            ],
            "arguments": {
                "path_source_dir": [
                    "pathlib.Path",
                    "list",
                    "List[str]",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "copy_project_files": {
            "name": "copy_project_files",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_template_files": {
            "name": "copy_template_files",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "replace_marker": {
            "name": "replace_marker",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "marker": [
                    "str"
                ],
                "src_filename": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[pathlib.Path,str]"
                ],
                "replace_marker_with_src_file": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable[...,str]",
                    "Optional[int]"
                ]
            }
        },
        "create_travis_file": {
            "name": "create_travis_file",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 266,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "main_commandline": {
            "name": "main_commandline",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "click_context": [
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_registered_shell_command": {
            "name": "get_registered_shell_command",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_regexp-master/setup.py": {
        "is_travis_deploy": {
            "name": "is_travis_deploy",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_tagged_commit": {
            "name": "is_tagged_commit",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "strip_links_from_required": {
            "name": "strip_links_from_required",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "l_required": [
                    "List[str]",
                    "List",
                    "int"
                ]
            }
        },
        "get_requirements_from_file": {
            "name": "get_requirements_from_file",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "requirements_filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str,os.PathLike]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "get_line_data": {
            "name": "get_line_data",
            "location": 73,
            "return": [
                "str",
                "Optional[Set[str]]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "lib_regexp-master/lib_regexp/lib_regexp.py": {
        "reg_grep": {
            "name": "reg_grep",
            "location": 141,
            "return": [
                "list"
            ],
            "arguments": {
                "pattern": [],
                "text": [],
                "pattern_is_regexp": [
                    "bool"
                ],
                "flags": []
            }
        },
        "reg_is_str_in_text": {
            "name": "reg_is_str_in_text",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [],
                "text": [],
                "flags": [],
                "pattern_is_regexp": [
                    "bool"
                ]
            }
        },
        "t_e_s_t_regexp": {
            "name": "t_e_s_t_regexp",
            "location": 195,
            "return": [
                "Tuple[(str, list)]"
            ],
            "arguments": {
                "s_input": []
            }
        },
        "ClassRegexExecute.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_regexp": [
                    "typing.Text"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "ClassRegexExecute.set_s_regexp": {
            "name": "set_s_regexp",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_regexp": []
            }
        },
        "ClassRegexExecute.search": {
            "name": "search",
            "location": 98,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "s_string": []
            }
        },
        "ClassRegexExecute.match": {
            "name": "match",
            "location": 105,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "s_string": []
            }
        },
        "ClassRegexExecute.findall": {
            "name": "findall",
            "location": 112,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "s_string": []
            }
        },
        "ClassRegexExecute.sub": {
            "name": "sub",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "replace_with": [],
                "s_input": [],
                "count": [
                    "int"
                ]
            }
        }
    },
    "lib_regexp-master/lib_regexp/__doc__.py": {},
    "lib_regexp-master/lib_regexp/__init__.py": {},
    "lib_regexp-master/lib_regexp/__init__conf__.py": {
        "print_info": {
            "name": "print_info",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "libman-master/conanfile.py": {
        "ConanFile.build": {
            "name": "build",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libman-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "libman-master/extras/libman-py/setup.py": {},
    "libman-master/extras/libman-py/libman/data.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Field.key": {
            "name": "key",
            "location": 37,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.value": {
            "name": "value",
            "location": 42,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldSequence.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Iterable[Field]"
                ]
            }
        },
        "FieldSequence.fields": {
            "name": "fields",
            "location": 66,
            "return": [
                "typing.Generator[]",
                "List[str]",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldSequence.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Iterator[Field]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldSequence.for_key": {
            "name": "for_key",
            "location": 74,
            "return": [
                "Iterable[Field]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "FieldSequence.get_at_most_one": {
            "name": "get_at_most_one",
            "location": 81,
            "return": [
                "Optional[Field]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "exc": [
                    "Type[RuntimeError]"
                ]
            }
        },
        "FieldSequence.get_exactly_one": {
            "name": "get_exactly_one",
            "location": 100,
            "return": [
                "Field"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "exc": [
                    "Type[RuntimeError]"
                ]
            }
        },
        "IndexEntry.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "IndexEntry.name": {
            "name": "name",
            "location": 126,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.path": {
            "name": "path",
            "location": 131,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.__hash__": {
            "name": "__hash__",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexEntry.__repr__": {
            "name": "__repr__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__iter__": {
            "name": "__iter__",
            "location": 151,
            "return": [
                "Generator[(IndexEntry, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__len__": {
            "name": "__len__",
            "location": 155,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__getitem__": {
            "name": "__getitem__",
            "location": 158,
            "return": [
                "IndexEntry"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Index.get": {
            "name": "get",
            "location": 161,
            "return": [
                "Optional[IndexEntry]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Index.__contains__": {
            "name": "__contains__",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Index.from_fields": {
            "name": "from_fields",
            "location": 169,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIndex]"
                ],
                "fields": [
                    "FieldSequence"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "Package.from_fields": {
            "name": "from_fields",
            "location": 211,
            "return": [
                "Package"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPackage]"
                ],
                "fields": [
                    "FieldSequence"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "Library.from_fields": {
            "name": "from_fields",
            "location": 250,
            "return": [
                "Library"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLibrary]"
                ],
                "fields": [
                    "FieldSequence"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "Library.from_fields.split_req": {
            "name": "split_req",
            "location": 275,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "libman-master/extras/libman-py/libman/data_test.py": {
        "make_fieldseq": {
            "name": "make_fieldseq",
            "location": 15,
            "return": [
                "mod.FieldSequence"
            ],
            "arguments": {}
        },
        "test_index": {
            "name": "test_index",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_packages": {
            "name": "test_packages",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_libraries": {
            "name": "test_libraries",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IndexTestCase.create_index": {
            "name": "create_index",
            "location": 28,
            "return": [
                "mod.Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageTestCase.create_package": {
            "name": "create_package",
            "location": 89,
            "return": [
                "mod.Package"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryTestCase.create_library": {
            "name": "create_library",
            "location": 148,
            "return": [
                "mod.Library"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libman-master/extras/libman-py/libman/main.py": {
        "_query_index": {
            "name": "_query_index",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_query_index_parser": {
            "name": "_add_query_index_parser",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_query_package": {
            "name": "_query_package",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_query_package_parser": {
            "name": "_add_query_package_parser",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_query_library": {
            "name": "_query_library",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_add_library_package_parser": {
            "name": "_add_library_package_parser",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_add_query_parser": {
            "name": "_add_query_parser",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_argument_parser": {
            "name": "create_argument_parser",
            "location": 189,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 204,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        },
        "_start": {
            "name": "_start",
            "location": 216,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "libman-master/extras/libman-py/libman/parse.py": {
        "parse_line": {
            "name": "parse_line",
            "location": 13,
            "return": [
                "Optional[data.Field]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "iter_fields_from_lines": {
            "name": "iter_fields_from_lines",
            "location": 36,
            "return": [
                "Iterable[data.Field]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "iter_string_fields": {
            "name": "iter_string_fields",
            "location": 47,
            "return": [
                "Iterable[data.Field]"
            ],
            "arguments": {
                "doc": [
                    "str"
                ]
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 54,
            "return": [
                "data.FieldSequence"
            ],
            "arguments": {
                "doc": [
                    "str"
                ]
            }
        },
        "_fake_file_ctx_man": {
            "name": "_fake_file_ctx_man",
            "location": 66,
            "return": [
                "typing.Generator[typing.IO, None, None]",
                "typing.Generator[typing.IO]"
            ],
            "arguments": {
                "item": [
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "open_as_file": {
            "name": "open_as_file",
            "location": 70,
            "return": [
                "ContextManager[IO]"
            ],
            "arguments": {
                "what": [
                    "Union[(str, os.PathLike, IO)]"
                ]
            }
        },
        "iter_file_fields": {
            "name": "iter_file_fields",
            "location": 91,
            "return": [
                "Iterable[data.Field]"
            ],
            "arguments": {
                "doc": [
                    "Union[(str, os.PathLike, IO)]"
                ]
            }
        },
        "parse_file": {
            "name": "parse_file",
            "location": 99,
            "return": [
                "data.FieldSequence"
            ],
            "arguments": {
                "doc": [
                    "Union[(str, os.PathLike, IO)]"
                ]
            }
        },
        "parse_index_string": {
            "name": "parse_index_string",
            "location": 106,
            "return": [
                "data.Index"
            ],
            "arguments": {
                "doc": [
                    "str"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "parse_index_file": {
            "name": "parse_index_file",
            "location": 113,
            "return": [
                "data.Index"
            ],
            "arguments": {
                "fpath": [
                    "pathlib.Path"
                ]
            }
        },
        "parse_package_string": {
            "name": "parse_package_string",
            "location": 120,
            "return": [
                "data.Package"
            ],
            "arguments": {
                "doc": [
                    "str"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "parse_package_file": {
            "name": "parse_package_file",
            "location": 127,
            "return": [
                "data.Package"
            ],
            "arguments": {
                "fpath": [
                    "pathlib.Path"
                ]
            }
        },
        "parse_library_string": {
            "name": "parse_library_string",
            "location": 134,
            "return": [
                "data.Library"
            ],
            "arguments": {
                "doc": [
                    "str"
                ],
                "filepath": [
                    "pathlib.Path"
                ]
            }
        },
        "parse_library_file": {
            "name": "parse_library_file",
            "location": 141,
            "return": [
                "data.Library"
            ],
            "arguments": {
                "fpath": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "libman-master/extras/libman-py/libman/parse_test.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_line": {
            "name": "test_simple_line",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extra_whitespace": {
            "name": "test_extra_whitespace",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_value": {
            "name": "test_empty_value",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_value_at_eof": {
            "name": "test_empty_value_at_eof",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_value_at_nl": {
            "name": "test_empty_value_at_nl",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_comments": {
            "name": "test_ignore_comments",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_line": {
            "name": "test_bad_line",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_with_colon": {
            "name": "test_key_with_colon",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_trailing_comment": {
            "name": "test_no_trailing_comment",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_with_whitespace": {
            "name": "test_key_with_whitespace",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_index": {
            "name": "test_parse_index",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_index_duplicate": {
            "name": "test_parse_index_duplicate",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "libman-master/extras/libman-py/libman/util.py": {},
    "libman-master/extras/libman-py/libman/__init__.py": {},
    "libman-master/extras/libman-py/libman/__main__.py": {}
}
{
    "library_monitor-master/install.py": {
        "initialize_database": {
            "name": "initialize_database",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "library_monitor-master/run.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "library_monitor-master/__init__.py": {},
    "library_monitor-master/library_monitor/config.default.py": {},
    "library_monitor-master/library_monitor/mess.py": {
        "set_logger": {
            "name": "set_logger",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_path": [
                    "str"
                ],
                "console_level": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "file_level": [
                    "str",
                    "List[str]",
                    "Callable[[], str]"
                ]
            }
        }
    },
    "library_monitor-master/library_monitor/models.py": {
        "Location.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chat.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "library_monitor-master/library_monitor/monitor.py": {
        "LibraryMonitor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_token": []
            }
        },
        "LibraryMonitor.update_book_states": {
            "name": "update_book_states",
            "location": 23,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "target_book": []
            }
        },
        "LibraryMonitor.send_message": {
            "name": "send_message",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryMonitor.report_status": {
            "name": "report_status",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryMonitor.run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryMonitor.stop": {
            "name": "stop",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "library_monitor-master/library_monitor/queued_bot.py": {
        "create_queued_bot": {
            "name": "create_queued_bot",
            "location": 54,
            "return": [
                "QueuedBot"
            ],
            "arguments": {
                "bot_token": [
                    "str"
                ]
            }
        },
        "QueuedBot.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_queue": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "QueuedBot.stop": {
            "name": "stop",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedBot.__del__": {
            "name": "__del__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedBot.send_message": {
            "name": "send_message",
            "location": 47,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "library_monitor-master/library_monitor/sql_handler.py": {
        "load_session": {
            "name": "load_session",
            "location": 42,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "dict[, ]",
                    "faustypes.models.ModelOptions",
                    "dict",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "list[C]",
                    "Type[T]",
                    "List[asgard.clients.chronos.models.job.ChronosEnvSpec]"
                ]
            }
        },
        "SQLManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLManager.create_session": {
            "name": "create_session",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "load_session.wrapper": {
            "name": "wrapper",
            "location": 49,
            "return": [
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {}
        },
        "SQLHandler.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_manager": [
                    "int",
                    "None"
                ]
            }
        },
        "SQLHandler.get_chats": {
            "name": "get_chats",
            "location": 65,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "my_session": [
                    "bytes",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[requests.Session]",
                    "apistar.backends.sqlalchemy_backend.Session"
                ]
            }
        },
        "SQLHandler.count_notice": {
            "name": "count_notice",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "my_session": [
                    "sqlalchemy.orm.session.Session",
                    "models.Book",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "fal.orm.Anime",
                    "fal.orm.Team",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "target_book": [
                    "str",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "models.Book",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "fal.orm.Anime",
                    "fal.orm.Team",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "SQLHandler.reset_notice_counter": {
            "name": "reset_notice_counter",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "my_session": [
                    "sqlalchemy.orm.session.Session",
                    "models.Book",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "fal.orm.Anime",
                    "fal.orm.Team",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "target_book": [
                    "str",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "models.Book",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "fal.orm.Anime",
                    "fal.orm.Team",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "SQLHandler.add_book": {
            "name": "add_book",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "my_session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ],
                "book_id": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ],
                "book_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "chat_id": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ],
                "location": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "library_monitor-master/library_monitor/__init__.py": {}
}
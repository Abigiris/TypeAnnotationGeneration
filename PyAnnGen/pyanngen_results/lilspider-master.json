{
    "lilspider-master/baidu/run.py": {},
    "lilspider-master/baidu/baidu/items.py": {},
    "lilspider-master/baidu/baidu/middlewares.py": {
        "BaiduSpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "BaiduSpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "BaiduSpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "BaiduSpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "BaiduSpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "BaiduSpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        },
        "BaiduDownloaderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "BaiduDownloaderMiddleware.process_request": {
            "name": "process_request",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "spider": []
            }
        },
        "BaiduDownloaderMiddleware.process_response": {
            "name": "process_response",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "spider": []
            }
        },
        "BaiduDownloaderMiddleware.process_exception": {
            "name": "process_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [],
                "spider": []
            }
        },
        "BaiduDownloaderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "lilspider-master/baidu/baidu/pipelines.py": {
        "BaiduPipeline.process_item": {
            "name": "process_item",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "spider": []
            }
        },
        "Blog39NetPipeline.process_item": {
            "name": "process_item",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "spider": []
            }
        }
    },
    "lilspider-master/baidu/baidu/settings.py": {},
    "lilspider-master/baidu/baidu/__init__.py": {},
    "lilspider-master/baidu/baidu/spiders/blog39net_spider.py": {},
    "lilspider-master/baidu/baidu/spiders/search_spider.py": {
        "SearchSpider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchSpider.start_requests": {
            "name": "start_requests",
            "location": 18,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchSpider.parseSearch": {
            "name": "parseSearch",
            "location": 26,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "typing.Iterator",
                    "flask.Response",
                    "Iterator",
                    "Response",
                    "faaspact_verifier.definitions.Response"
                ]
            }
        },
        "SearchSpider.getItems": {
            "name": "getItems",
            "location": 33,
            "return": [
                "List[baidu.items.BaiduItem]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "collector_utilities.type.Response",
                    "scrapy.http.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "SearchSpider.getPages": {
            "name": "getPages",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.Response",
                    "collector_utilities.type.Response",
                    "requests.Response"
                ]
            }
        }
    },
    "lilspider-master/baidu/baidu/spiders/__init__.py": {},
    "lilspider-master/lilspider/agents.py": {},
    "lilspider-master/lilspider/__init__.py": {},
    "lilspider-master/lilspider/checker/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str"
                ],
                "example": [
                    "str"
                ]
            }
        },
        "Base.throw": {
            "name": "throw",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Base.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.yes": {
            "name": "yes",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.no": {
            "name": "no",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Included.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Excluded.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regex.run": {
            "name": "run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MIncluded.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "list"
                ],
                "example": [
                    "str"
                ]
            }
        },
        "MIncluded.run": {
            "name": "run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MExcluded.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "list"
                ],
                "example": [
                    "str"
                ]
            }
        },
        "MExcluded.run": {
            "name": "run",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/checker/dictionary.py": {
        "DictionaryChecker.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ]
            }
        },
        "DictionaryChecker.read_dict_file": {
            "name": "read_dict_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictfile": [
                    "str"
                ]
            }
        },
        "DictionaryChecker.throw": {
            "name": "throw",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "DictionaryChecker.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictionaryChecker.yes": {
            "name": "yes",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictionaryChecker.no": {
            "name": "no",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/checker/zh.py": {
        "LinkChecker.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkTextChecker.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitleTextChecker.run": {
            "name": "run",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityIncludedChecker.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityExcludedChecker.run": {
            "name": "run",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/checker/__init__.py": {},
    "lilspider-master/lilspider/cleaner/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ],
                "pattern": [
                    "int",
                    "float",
                    "bool"
                ],
                "replacement": [
                    "str"
                ]
            }
        },
        "Base.run": {
            "name": "run",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.run": {
            "name": "run",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceOnce.run": {
            "name": "run",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/cleaner/html.py": {
        "HtmlCleaner.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "HtmlCleaner.input": {
            "name": "input",
            "location": 22,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "HtmlCleaner.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlCleaner.style": {
            "name": "style",
            "location": 29,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "enable": [
                    "bool"
                ]
            }
        },
        "HtmlCleaner.links": {
            "name": "links",
            "location": 33,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "enable": [
                    "bool"
                ]
            }
        },
        "HtmlCleaner.page_structure": {
            "name": "page_structure",
            "location": 37,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "enable": [
                    "bool"
                ]
            }
        },
        "HtmlCleaner.allow_tags": {
            "name": "allow_tags",
            "location": 41,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "HtmlCleaner.kill_tags": {
            "name": "kill_tags",
            "location": 45,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "HtmlCleaner.remove_tags": {
            "name": "remove_tags",
            "location": 49,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "HtmlCleaner.safe_attrs": {
            "name": "safe_attrs",
            "location": 53,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        },
        "HtmlCleaner.safe_attrs_only": {
            "name": "safe_attrs_only",
            "location": 57,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "enable": [
                    "bool"
                ]
            }
        },
        "HtmlCleaner.clean": {
            "name": "clean",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [
                    "T"
                ]
            }
        }
    },
    "lilspider-master/lilspider/cleaner/text.py": {
        "TextCleaner.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ],
                "patterns": [
                    "list"
                ]
            }
        },
        "TextCleaner.add_pattern": {
            "name": "add_pattern",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str"
                ]
            }
        },
        "TextCleaner.run": {
            "name": "run",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlInnertextCleaner.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ],
                "patterns": [
                    "list"
                ]
            }
        },
        "HtmlInnertextCleaner.add_pattern": {
            "name": "add_pattern",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str"
                ],
                "max_length": [
                    "int"
                ],
                "min_length": [
                    "int"
                ]
            }
        },
        "HtmlInnertextCleaner.run": {
            "name": "run",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/cleaner/__init__.py": {},
    "lilspider-master/lilspider/exceptions/__init__.py": {},
    "lilspider-master/lilspider/middlewares/disallow_domain.py": {
        "DisallowDomainMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DisallowDomainMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 18,
            "return": [
                "DisallowDomainMiddleware"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDisallowDomainMiddleware]"
                ],
                "crawler": [
                    "dict[str, bool]",
                    "Dict[str, bool]",
                    "typing.Callable[..., None]",
                    "Dict[str, Any]",
                    "Callable[..., None]"
                ]
            }
        },
        "DisallowDomainMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 23,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "result": [
                    "list[]",
                    "int",
                    "dict[str, typing.Any]",
                    "list",
                    "Dict[str, Any]"
                ],
                "spider": [
                    "bool",
                    "ValuesView",
                    "typing.ValuesView"
                ]
            }
        },
        "DisallowDomainMiddleware.should_follow": {
            "name": "should_follow",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "spider": [
                    "bool",
                    "aiohttp.web.Request"
                ]
            }
        },
        "DisallowDomainMiddleware.get_host_regex": {
            "name": "get_host_regex",
            "location": 47,
            "return": [
                "Optional[Pattern[str]]"
            ],
            "arguments": {
                "self": [],
                "spider": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "Type",
                    "float",
                    "Type[T]",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DisallowDomainMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "lilspider-master/lilspider/middlewares/mongodb_dupefilter.py": {
        "MongoDBDupeFilterMiddleware.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MongoDBDupeFilterMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 20,
            "return": [
                "MongoDBDupeFilterMiddleware"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMongoDBDupeFilterMiddleware]"
                ],
                "crawler": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "MongoDBDupeFilterMiddleware.process_request": {
            "name": "process_request",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "scrapy.http.Request"
                ],
                "spider": [
                    "str",
                    "scrapy.spiders.Spider",
                    "scrapy.http.Request"
                ]
            }
        }
    },
    "lilspider-master/lilspider/middlewares/proxy.py": {
        "ProxyMiddleware.process_request": {
            "name": "process_request",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "set[str]",
                    "scrapy.http.Request",
                    "Set[str]"
                ],
                "spider": [
                    "dict[str, bytes]",
                    "Dict[str, bytes]",
                    "bool",
                    "list[bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lilspider-master/lilspider/middlewares/user_agent.py": {
        "UserAgentMiddleware.process_request": {
            "name": "process_request",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "scrapy.http.Request"
                ],
                "spider": [
                    "dict[, ]",
                    "scrapy.spiders.Spider",
                    "dict"
                ]
            }
        }
    },
    "lilspider-master/lilspider/middlewares/__init__.py": {},
    "lilspider-master/lilspider/pipelines/__init__.py": {
        "ItemDebugPipeline.process_item": {
            "name": "process_item",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "scrapy.Item",
                    "dict[str, dict[str, str]]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "spider": [
                    "scrapy.Spider",
                    "typing.Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "None"
                ]
            }
        },
        "ImagePipeline.process_item": {
            "name": "process_item",
            "location": 21,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "scrapy.Item",
                    "int",
                    "list",
                    "Optional[str]",
                    "bool"
                ],
                "spider": [
                    "list[str]",
                    "scrapy.Spider",
                    "typing.Callable[, ]",
                    "list[]",
                    "List[str]",
                    "scrapy.spiders.Spider",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "lilspider-master/lilspider/processors/base.py": {
        "PurifierProcessor.add_purifier": {
            "name": "add_purifier",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "purifier": [
                    "object"
                ]
            }
        },
        "PurifierProcessor.run": {
            "name": "run",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "PurifierProcessor.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/lilspider/processors/zh.py": {
        "ArticleTitle.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleTitle.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/lilspider/processors/__init__.py": {},
    "lilspider-master/lilspider/purifier/base.py": {
        "TextSpaceProcessor.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/lilspider/purifier/html.py": {
        "HtmlRawPurifier.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlRawPurifier.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "HtmlSafePurifier.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lilspider-master/lilspider/purifier/zh.py": {},
    "lilspider-master/lilspider/purifier/__init__.py": {},
    "lilspider-master/lilspider/spiders/crawl_spider.py": {
        "CrawlSpider._extract_item": {
            "name": "_extract_item",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "resp": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Mapping[int, str]",
                    "typing.Mapping"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        },
        "CrawlSpider.extract_css": {
            "name": "extract_css",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        },
        "CrawlSpider.extract_xpath": {
            "name": "extract_xpath",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        }
    },
    "lilspider-master/lilspider/spiders/simple_spider.py": {
        "SimpleSpider._extract_item": {
            "name": "_extract_item",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "resp": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "Mapping[int, str]",
                    "typing.Mapping"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        },
        "SimpleSpider.extract_css": {
            "name": "extract_css",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        },
        "SimpleSpider.extract_xpath": {
            "name": "extract_xpath",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "rule": [
                    "str"
                ],
                "first": [
                    "bool"
                ],
                "join": [
                    "bool"
                ],
                "trim": [
                    "bool"
                ]
            }
        }
    },
    "lilspider-master/lilspider/spiders/__init__.py": {},
    "lilspider-master/lilspider/utils/html.py": {
        "get_cleaner": {
            "name": "get_cleaner",
            "location": 7,
            "return": [
                "lilspider.cleaner.html.HtmlCleaner"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ]
            }
        },
        "get_soup": {
            "name": "get_soup",
            "location": 10,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ]
            }
        },
        "pretty": {
            "name": "pretty",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ],
                "newline_tags": [
                    "list[]",
                    "List[str]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "bool"
                ],
                "ltrim": [
                    "bool"
                ],
                "itrim": [
                    "bool"
                ]
            }
        },
        "remove_empty_elements": {
            "name": "remove_empty_elements",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ],
                "keep_image": [
                    "bool"
                ]
            }
        },
        "remove_tags": {
            "name": "remove_tags",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ]
            }
        },
        "html2text": {
            "name": "html2text",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ]
            }
        },
        "inner_trim": {
            "name": "inner_trim",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "shtml": [
                    "str"
                ],
                "tags": [
                    "list"
                ]
            }
        }
    },
    "lilspider-master/lilspider/utils/string.py": {},
    "lilspider-master/lilspider/utils/url.py": {
        "url_encode": {
            "name": "url_encode",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "param": [
                    "str"
                ]
            }
        },
        "url_decode": {
            "name": "url_decode",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "param": [
                    "str"
                ]
            }
        },
        "abs_url": {
            "name": "abs_url",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "relative_url": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/lilspider/utils/zh.py": {
        "extract_tags": {
            "name": "extract_tags",
            "location": 5,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "topK": [
                    "int"
                ]
            }
        },
        "textrank": {
            "name": "textrank",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "topK": [
                    "int"
                ]
            }
        }
    },
    "lilspider-master/lilspider/utils/__init__.py": {},
    "lilspider-master/net39/net39/itemloaders.py": {},
    "lilspider-master/net39/net39/items.py": {},
    "lilspider-master/net39/net39/middlewares.py": {
        "Net39SpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "Net39SpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "Net39SpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "Net39SpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "Net39SpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "Net39SpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        },
        "Net39DownloaderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "Net39DownloaderMiddleware.process_request": {
            "name": "process_request",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "spider": []
            }
        },
        "Net39DownloaderMiddleware.process_response": {
            "name": "process_response",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "spider": []
            }
        },
        "Net39DownloaderMiddleware.process_exception": {
            "name": "process_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [],
                "spider": []
            }
        },
        "Net39DownloaderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "lilspider-master/net39/net39/pipelines.py": {
        "ArticlePipeline.process_item": {
            "name": "process_item",
            "location": 11,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "lxml.html.HtmlElement",
                    "dict[str, typing.Any]",
                    "scrapy.Item",
                    "str",
                    "None",
                    "dict",
                    "set[]",
                    "Optional[Dict[str, Any]]",
                    "set"
                ],
                "spider": [
                    "bytes",
                    "scrapy.Spider",
                    "int",
                    "str"
                ]
            }
        },
        "ArticlePipeline._title": {
            "name": "_title",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list",
                    "Iterable[T]",
                    "raiden.utils.Any",
                    "Union[int, slice]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArticlePipeline._content": {
            "name": "_content",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[T]",
                    "raiden.utils.Any",
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "lilspider-master/net39/net39/processors.py": {
        "Net39ArticleTitle.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/net39/net39/purifier.py": {
        "Net39SpecialPurifier.__call__": {
            "name": "__call__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "Net39HtmlPurifier.first": {
            "name": "first",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "Net39HtmlPurifier.second": {
            "name": "second",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "Net39HtmlPurifier.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "lilspider-master/net39/net39/settings.py": {},
    "lilspider-master/net39/net39/__init__.py": {},
    "lilspider-master/net39/net39/spiders/article.py": {
        "ArticleSpider.parse_article": {
            "name": "parse_article",
            "location": 38,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "django.http.HttpResponse",
                    "phial.wrappers.Response",
                    "scrapy.http.Response",
                    "flask.Response",
                    "scrapy.http.TextResponse",
                    "django.http.HttpResponse.Redirect"
                ]
            }
        }
    },
    "lilspider-master/net39/net39/spiders/blog.py": {
        "BlogSpider.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlogSpider.start_requests": {
            "name": "start_requests",
            "location": 19,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlogSpider.parseArticle": {
            "name": "parseArticle",
            "location": 28,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "django.http.HttpResponse",
                    "phial.wrappers.Response",
                    "scrapy.http.Response",
                    "flask.Response",
                    "scrapy.http.TextResponse",
                    "django.http.HttpResponse.Redirect"
                ]
            }
        }
    },
    "lilspider-master/net39/net39/spiders/__init__.py": {},
    "lilspider-master/sogou/sogou/items.py": {},
    "lilspider-master/sogou/sogou/middlewares.py": {
        "SogouSpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "SogouSpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "SogouSpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "SogouSpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "SogouSpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "SogouSpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        },
        "SogouDownloaderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "crawler": []
            }
        },
        "SogouDownloaderMiddleware.process_request": {
            "name": "process_request",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "spider": []
            }
        },
        "SogouDownloaderMiddleware.process_response": {
            "name": "process_response",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "spider": []
            }
        },
        "SogouDownloaderMiddleware.process_exception": {
            "name": "process_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [],
                "spider": []
            }
        },
        "SogouDownloaderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "lilspider-master/sogou/sogou/pipelines.py": {
        "SogouPipeline.process_item": {
            "name": "process_item",
            "location": 10,
            "return": [
                "list[str]",
                "Dict[str, Dict[str, int]]",
                "typing.Callable[, ]",
                "Union[Sequence, 'SweepFixedValues']",
                "list[]",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "T",
                    "list[]",
                    "Callable",
                    "list"
                ],
                "spider": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "T",
                    "list[]",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "lilspider-master/sogou/sogou/settings.py": {},
    "lilspider-master/sogou/sogou/__init__.py": {},
    "lilspider-master/sogou/sogou/spiders/__init__.py": {},
    "lilspider-master/tests/test_checker.py": {
        "test_included": {
            "name": "test_included",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_excluded": {
            "name": "test_excluded",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_city_included_checker": {
            "name": "test_city_included_checker",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_city_excluded_checker": {
            "name": "test_city_excluded_checker",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        }
    },
    "lilspider-master/tests/test_cleaner.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_replace_once": {
            "name": "test_replace_once",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        }
    },
    "lilspider-master/tests/test_utils.py": {
        "test_abs_url": {
            "name": "test_abs_url",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_url_encode": {
            "name": "test_url_encode",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str"
                ]
            }
        },
        "test_url_decode": {
            "name": "test_url_decode",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str"
                ]
            }
        },
        "test_remove_empty_tags": {
            "name": "test_remove_empty_tags",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_remove_tags": {
            "name": "test_remove_tags",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_inner_trim": {
            "name": "test_inner_trim",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "lilspider-master/tests/__init__.py": {}
}
{
    "linkedinfo-ml-master/service.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "local": [
                    "str",
                    "bool"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "local": [
                    "bool"
                ],
                "run": [
                    "bool"
                ],
                "deploy": [
                    "bool"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_container": {
            "name": "run_container",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_local": {
            "name": "build_local",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_gcloud": {
            "name": "build_gcloud",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_gcloud": {
            "name": "deploy_gcloud",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "linkedinfo-ml-master/ml/config.py": {},
    "linkedinfo-ml-master/ml/dataapp.py": {
        "lazy_load": {
            "name": "lazy_load",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "page_description": {
            "name": "page_description",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "update_pca_plot": {
            "name": "update_pca_plot",
            "location": 172,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "dot_size": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/exp.py": {
        "params": {
            "name": "params",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "log_step": {
            "name": "log_step",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "step": [
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "_log": [
                    "str",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_run": [
                    "str",
                    "float",
                    "bool",
                    "Exception"
                ],
                "_log": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "col_text": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "ds_param": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "test_size": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "aug_param": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "bert_param": [
                    "bool",
                    "int",
                    "str",
                    "Type"
                ],
                "train_param": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "run.best_f1_score": {
            "name": "best_f1_score",
            "location": 125,
            "return": [
                "tuple[int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "true_labels": [
                    "float",
                    "str",
                    "bytes"
                ],
                "predictions": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "run.Model.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "run.Model.forward": {
            "name": "forward",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/filesutil.py": {
        "save_model_url": {
            "name": "save_model_url",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "model_file": [
                    "str"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "local_models_to_json": {
            "name": "local_models_to_json",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_model_bin": {
            "name": "upload_model_bin",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "dict",
                    "int"
                ],
                "model_file": [
                    "str"
                ]
            }
        },
        "upload_models": {
            "name": "upload_models",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_upload": {
            "name": "fake_upload",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "linkedinfo-ml-master/ml/lanpred.py": {
        "model_search": {
            "name": "model_search",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "model_persist": {
            "name": "model_persist",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Text"
                ],
                "datahome": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/offlinepred.py": {
        "predict_tags": {
            "name": "predict_tags",
            "location": 12,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "infos": [
                    "List[dict]"
                ]
            }
        },
        "predict_tags_feedinfos": {
            "name": "predict_tags_feedinfos",
            "location": 32,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "linkedinfo-ml-master/ml/persistor.py": {
        "model_search": {
            "name": "model_search",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "model_persist": {
            "name": "model_persist",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Text"
                ],
                "datahome": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "model_persist_v4": {
            "name": "model_persist_v4",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "datahome": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "model_persist_v5": {
            "name": "model_persist_v5",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "datahome": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "model_persist_v6": {
            "name": "model_persist_v6",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "model_persist_v7": {
            "name": "model_persist_v7",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Persistor.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistor.load": {
            "name": "load",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Persistor.preprocess": {
            "name": "preprocess",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistor.fit": {
            "name": "fit",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float"
                ]
            }
        },
        "Persistor.persist": {
            "name": "persist",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "Persistor.preprocess.word_substitution": {
            "name": "word_substitution",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "aug_src": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/plots.py": {
        "tags_per_article": {
            "name": "tags_per_article",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "ds": [
                    "int",
                    "Optional[T]",
                    "Sequence[T]",
                    "Dict[int, str]",
                    "bytes",
                    "list",
                    "List[str]",
                    "Tuple[int]"
                ]
            }
        },
        "lan_fig": {
            "name": "lan_fig",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [
                    "str",
                    "dict",
                    "memoryview"
                ]
            }
        },
        "tags_rank_fig": {
            "name": "tags_rank_fig",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "ds": [
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[str]"
                ],
                "top": [
                    "int"
                ]
            }
        },
        "creators_rank_fig": {
            "name": "creators_rank_fig",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ds": [],
                "top": [
                    "int"
                ]
            }
        },
        "domain_rank_fig": {
            "name": "domain_rank_fig",
            "location": 85,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "ds": [
                    "int",
                    "dict"
                ],
                "top": [
                    "int"
                ]
            }
        },
        "pca_titles_3d_fig": {
            "name": "pca_titles_3d_fig",
            "location": 105,
            "return": [
                "float",
                "int",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float"
                ],
                "sub_sample_size": [
                    "float"
                ],
                "dot_size": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes",
                    "Callable[[], bool]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/trainval.py": {
        "train": {
            "name": "train",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "Set[int]"
                ],
                "train_loader": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "trezor.utils.Writer"
                ],
                "optimizer": [
                    "Union['Contributor', 'Coverage']",
                    "pandas.DataFrame",
                    "Optional[float]"
                ],
                "scheduler": [
                    "Union['Contributor', 'Coverage']",
                    "pandas.DataFrame",
                    "Optional[float]"
                ]
            }
        },
        "val": {
            "name": "val",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "test_loader": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "add_bert_vocab": {
            "name": "add_bert_vocab",
            "location": 86,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "ds": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "col_text": [
                    "str",
                    "bool",
                    "float"
                ],
                "tfidf_param": [
                    "dict"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "fine_tune_bert": {
            "name": "fine_tune_bert",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "model_param": [
                    "dict"
                ],
                "train_features": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "train_labels": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "test_features": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "test_labels": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "col_text": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "exp_name": [
                    "dict",
                    "bool",
                    "IO",
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "model": [
                    "numpy.ndarray",
                    "Union[str, int]",
                    "list",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "fine_tune_bert.save_model_tuned": {
            "name": "save_model_tuned",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "List[str]",
                    "str",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "tokenizer": [
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ],
                "output_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/webapp.py": {
        "info2text": {
            "name": "info2text",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "info": [
                    "dict"
                ]
            }
        },
        "predict_keywords": {
            "name": "predict_keywords",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "info": [
                    "dict"
                ],
                "num_keywords": [
                    "int"
                ]
            }
        },
        "predict_language": {
            "name": "predict_language",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "info": [
                    "dict"
                ]
            }
        },
        "supported_url": {
            "name": "supported_url",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "url_in": [
                    "str"
                ]
            }
        },
        "check_valid_request": {
            "name": "check_valid_request",
            "location": 216,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "info": [
                    "dict"
                ],
                "by_url": [
                    "bool"
                ],
                "only_model": [
                    "bool"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/__init__.py": {},
    "linkedinfo-ml-master/ml/dataset/extractor.py": {
        "caching_untagged_infos": {
            "name": "caching_untagged_infos",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "data_home": [
                    "typing.Text",
                    "str",
                    "int",
                    "Iterable[bytes]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "fetch_untagged_infos": {
            "name": "fetch_untagged_infos",
            "location": 59,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "data_home": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "fulltext": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "List[List[Any]]"
                ],
                "force_download": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "Union[Mapping, str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "fetch_infos": {
            "name": "fetch_infos",
            "location": 91,
            "return": [
                "None",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "data_home": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "from_batch_cache": [
                    "str"
                ],
                "fulltext": [
                    "bool",
                    "str"
                ],
                "save_cache": [
                    "bool"
                ],
                "force_download": [
                    "bool",
                    "bytes",
                    "str",
                    "FrozenSet[str]"
                ],
                "force_extract": [
                    "bool",
                    "bytes",
                    "str",
                    "FrozenSet[str]"
                ],
                "random_state": [
                    "int",
                    "bool",
                    "str"
                ],
                "remove": [
                    "tuple[]",
                    "bool",
                    "str"
                ],
                "download_if_missing": [
                    "bool",
                    "str"
                ],
                "total_size": [
                    "None",
                    "int",
                    "str",
                    "Callable[[float], None]"
                ],
                "allow_infos_cache": [
                    "bool"
                ]
            }
        },
        "fetch_infos_dep": {
            "name": "fetch_infos_dep",
            "location": 201,
            "return": [
                "None",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "data_home": [
                    "str",
                    "typing.Text"
                ],
                "subset": [
                    "typing.Text",
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "List[int]",
                    "str"
                ],
                "fulltext": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "List[int]",
                    "str"
                ],
                "random_state": [
                    "int",
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "List[int]",
                    "str"
                ],
                "remove": [
                    "tuple[]",
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "List[int]",
                    "str"
                ],
                "download_if_missing": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "List[int]",
                    "str"
                ],
                "total_size": [
                    "None",
                    "bytes",
                    "str",
                    "bool",
                    "Tuple[str, bool]"
                ],
                "allow_infos_cache": [
                    "bool"
                ],
                "allow_full_cache": [
                    "bool"
                ]
            }
        },
        "_retrieve_untagged_infos": {
            "name": "_retrieve_untagged_infos",
            "location": 294,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "target_dir": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ],
                "cache_path": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "_retrieve_infos": {
            "name": "_retrieve_infos",
            "location": 308,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "target_dir": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "cache_path": [
                    "str"
                ],
                "fragment_size": [
                    "int"
                ],
                "total_size": [
                    "int",
                    "Optional[int]",
                    "Optional[Any]",
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "extract_info_towardsdatascience": {
            "name": "extract_info_towardsdatascience",
            "location": 379,
            "return": [
                "dict"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "extract_bs4": {
            "name": "extract_bs4",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "extract_html2text": {
            "name": "extract_html2text",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "extract_text_from_html": {
            "name": "extract_text_from_html",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "method": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "extract_text_from_html_newspaper": {
            "name": "extract_text_from_html_newspaper",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "extract_title_from_html": {
            "name": "extract_title_from_html",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "retrieve_infoqcn_article": {
            "name": "retrieve_infoqcn_article",
            "location": 454,
            "return": [
                "dict"
            ],
            "arguments": {
                "referer_url": [
                    "str"
                ]
            }
        },
        "retrieve_infoqcn_info": {
            "name": "retrieve_infoqcn_info",
            "location": 478,
            "return": [
                "dict"
            ],
            "arguments": {
                "referer_url": [
                    "str"
                ]
            }
        },
        "retrieve_infoqcn_fulltext": {
            "name": "retrieve_infoqcn_fulltext",
            "location": 494,
            "return": [
                "str"
            ],
            "arguments": {
                "referer_url": [
                    "str"
                ]
            }
        },
        "_retrieve_info_fulltext_v2": {
            "name": "_retrieve_info_fulltext_v2",
            "location": 517,
            "return": [
                "str",
                "float",
                "datetime.date",
                "bool",
                "int"
            ],
            "arguments": {
                "info": [
                    "logging.Logger",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "target_dir": [
                    "str",
                    "typing.Text"
                ],
                "cache_path": [
                    "typing.Text",
                    "str",
                    "Dict[str, int]",
                    "Optional[str]"
                ],
                "fallback_threshold": [
                    "int",
                    "str",
                    "dict"
                ],
                "force_download": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "force_extract": [
                    "bool",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "_retrieve_info_fulltext": {
            "name": "_retrieve_info_fulltext",
            "location": 605,
            "return": [
                "int",
                "Optional[Type]"
            ],
            "arguments": {
                "info": [
                    "logging.Logger",
                    "str",
                    "Optional[str]"
                ],
                "target_dir": [
                    "str",
                    "typing.Text"
                ],
                "cache_path": [
                    "str",
                    "typing.Text"
                ],
                "fallback_threshold": [
                    "int",
                    "str",
                    "dict"
                ],
                "force_download": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "force_extract": [
                    "bool",
                    "Set[str]",
                    "tuple"
                ]
            }
        },
        "get_html_from_url": {
            "name": "get_html_from_url",
            "location": 691,
            "return": [
                "str"
            ],
            "arguments": {
                "infourl": [
                    "str"
                ],
                "force_download": [
                    "bool"
                ],
                "cache_path": [
                    "str",
                    "typing.Text"
                ],
                "save_cache": [
                    "bool"
                ]
            }
        },
        "extract_info_from_url_deprecated": {
            "name": "extract_info_from_url_deprecated",
            "location": 734,
            "return": [
                "dict"
            ],
            "arguments": {
                "infourl": [
                    "str"
                ]
            }
        },
        "extract_info_from_url": {
            "name": "extract_info_from_url",
            "location": 760,
            "return": [
                "dict"
            ],
            "arguments": {
                "infourl": [
                    "str"
                ],
                "description_from": [
                    "str"
                ],
                "n_sentences": [
                    "int"
                ]
            }
        },
        "extract_info_towardsdatascience.tag_visible": {
            "name": "tag_visible",
            "location": 382,
            "return": [
                "bool"
            ],
            "arguments": {
                "element": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/dataset/linkedinfo.py": {
        "plot_tag_dist": {
            "name": "plot_tag_dist",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "targets": [],
                "target_names": [
                    "None"
                ]
            }
        },
        "clean_text": {
            "name": "clean_text",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "remove_code_sec": {
            "name": "remove_code_sec",
            "location": 255,
            "return": [
                "_T0"
            ],
            "arguments": {
                "text": [
                    "_T0"
                ]
            }
        },
        "filter_tags": {
            "name": "filter_tags",
            "location": 259,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "df_data": [],
                "tags_list": [],
                "threshold": [
                    "int"
                ]
            }
        },
        "augmented_ds": {
            "name": "augmented_ds",
            "location": 293,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "col": [
                    "str"
                ],
                "level": [
                    "int"
                ],
                "test_ratio": [
                    "float"
                ]
            }
        },
        "augmented_samples": {
            "name": "augmented_samples",
            "location": 343,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "features": [],
                "labels": [],
                "col": [
                    "str"
                ],
                "level": [
                    "int"
                ],
                "oversample_weight": [
                    "int"
                ],
                "crop_ratio": [
                    "float"
                ],
                "aug_method": [
                    "Callable"
                ]
            }
        },
        "tag_terms": {
            "name": "tag_terms",
            "location": 385,
            "return": [
                "list"
            ],
            "arguments": {
                "ds": []
            }
        },
        "ds_info_tags": {
            "name": "ds_info_tags",
            "location": 402,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "from_batch_cache": [
                    "str"
                ],
                "tag_type": [
                    "str"
                ],
                "content_length_threshold": [
                    "int"
                ],
                "lan": [
                    "str"
                ],
                "filter_tags_threshold": [
                    "int"
                ],
                "concate_title": [
                    "bool"
                ],
                "partial_len": [
                    "bool"
                ],
                "use_longer_fulltext_description": [
                    "bool"
                ],
                "remove_code": [
                    "bool"
                ]
            }
        },
        "load_dataapp_set": {
            "name": "load_dataapp_set",
            "location": 534,
            "return": [],
            "arguments": {
                "filename": [
                    "typing.Text"
                ]
            }
        },
        "ds_dataapp": {
            "name": "ds_dataapp",
            "location": 542,
            "return": [
                "DataappSet"
            ],
            "arguments": {
                "tag_type": [
                    "str"
                ]
            }
        },
        "tags": {
            "name": "tags",
            "location": 573,
            "return": [
                "list"
            ],
            "arguments": {
                "tag_type": [
                    "str"
                ]
            }
        },
        "get_tags_map": {
            "name": "get_tags_map",
            "location": 585,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get_tags_list": {
            "name": "get_tags_list",
            "location": 600,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "df_tags": {
            "name": "df_tags",
            "location": 616,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "tag_type": [
                    "str"
                ],
                "content_length_threshold": [
                    "int"
                ],
                "lan": [
                    "str"
                ],
                "partial_len": [
                    "bool"
                ],
                "remove_code": [
                    "bool"
                ]
            }
        },
        "df_lan": {
            "name": "df_lan",
            "location": 693,
            "return": [],
            "arguments": {}
        },
        "LinkedInfoTag.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [],
                "targets": [],
                "data_transforms": [
                    "tuple"
                ]
            }
        },
        "LinkedInfoTag.__len__": {
            "name": "__len__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedInfoTag.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedInfoTag.num_labels": {
            "name": "num_labels",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__post_init__": {
            "name": "__post_init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_train_test": {
            "name": "get_train_test",
            "location": 103,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "test_size": [
                    "float"
                ]
            }
        },
        "Dataset.dump": {
            "name": "dump",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ]
            }
        },
        "Dataset.dump_fasttext": {
            "name": "dump_fasttext",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [],
                "only_title": [
                    "bool"
                ],
                "preprocess": [
                    "None"
                ],
                "split_test": [
                    "bool"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "DataappSet.__post_init__": {
            "name": "__post_init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataappSet.save": {
            "name": "save",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text"
                ]
            }
        },
        "augmented_ds.text_random_crop": {
            "name": "text_random_crop",
            "location": 319,
            "return": [],
            "arguments": {
                "rec": []
            }
        }
    },
    "linkedinfo-ml-master/ml/dataset/stack.py": {
        "ds_stack": {
            "name": "ds_stack",
            "location": 27,
            "return": [
                "DatasetStack"
            ],
            "arguments": {
                "stackfiles": [
                    "List[str]"
                ],
                "text_cols": [
                    "List[str]"
                ],
                "name_text_col": [
                    "str"
                ],
                "n_tag": [
                    "int"
                ],
                "concat_title": [
                    "bool"
                ],
                "body_extractor": [
                    "Callable"
                ]
            }
        },
        "get_query_str": {
            "name": "get_query_str",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "offset": [
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[int, int, int]",
                    "int",
                    "pandas.Series",
                    "Mapping[str, Any]",
                    "str"
                ],
                "per_page": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[int, int, int]",
                    "pandas.Series",
                    "Mapping[str, Any]",
                    "str"
                ],
                "least_score": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[int, int, int]",
                    "pandas.Series",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "get_stackoverflow_questions": {
            "name": "get_stackoverflow_questions",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int",
                    "List[int]",
                    "List[Tuple[int, Any]]",
                    "Tuple[Any, Any]"
                ],
                "start": [
                    "int",
                    "str"
                ],
                "per_page": [
                    "int",
                    "pandas.DataFrame",
                    "Dict[str, Any]",
                    "Union[str, Iterable[str]]",
                    "list",
                    "str"
                ],
                "least_score": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "filepath": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_num_questions": {
            "name": "get_num_questions",
            "location": 105,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "least_score": [
                    "str",
                    "int",
                    "List[Tuple[Any, str]]",
                    "bool"
                ]
            }
        },
        "ds_stack.not_nan": {
            "name": "not_nan",
            "location": 46,
            "return": [
                "list[]",
                "List[str]",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "bs4.elemenTag",
                    "Optional[str]"
                ]
            }
        },
        "ds_stack.extract_stack_body_simple": {
            "name": "extract_stack_body_simple",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "rec": [
                    "Optional[str]",
                    "str",
                    "IO[Any]",
                    "Callable"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/dataset/__init__.py": {},
    "linkedinfo-ml-master/ml/models/base.py": {
        "singleton": {
            "name": "singleton",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "singleton._singleton": {
            "name": "_singleton",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BasePredictModel.predict": {
            "name": "predict",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePredictModel._load_model": {
            "name": "_load_model",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "str"
                ]
            }
        },
        "PredictModel.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "str"
                ]
            }
        },
        "PredictModel.predict": {
            "name": "predict",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "PredictModel._load_model": {
            "name": "_load_model",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "modelfile": [
                    "str"
                ]
            }
        },
        "FastTextModel.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "str"
                ]
            }
        },
        "FastTextModel.predict": {
            "name": "predict",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "FastTextModel._load_model": {
            "name": "_load_model",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "modelfile": [
                    "str"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/models/files.py": {
        "download_model_bin": {
            "name": "download_model_bin",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "model_file": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "download_models": {
            "name": "download_models",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "model_file": {
            "name": "model_file",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "model_type": [
                    "str"
                ]
            }
        },
        "init_model_files": {
            "name": "init_model_files",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/models/keyword.py": {
        "KeywordPredictor.predict": {
            "name": "predict",
            "location": 10,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "List[str]",
                    "List[Tuple[Any, Any, Any]]"
                ],
                "num_keywords": [
                    "List[str]",
                    "List[Tuple[Any, Any, Any]]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/models/language.py": {
        "LanModel.predict": {
            "name": "predict",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LanPredictor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "bool"
                ]
            }
        },
        "LanPredictor.init": {
            "name": "init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanPredictor.predict": {
            "name": "predict",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/models/predictor.py": {
        "get_tag_predictor": {
            "name": "get_tag_predictor",
            "location": 14,
            "return": [
                "TagPredictor",
                "dict",
                "str"
            ],
            "arguments": {
                "init": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "test_model": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_lan_predictor": {
            "name": "get_lan_predictor",
            "location": 18,
            "return": [
                "ml.models.language.LanPredictor"
            ],
            "arguments": {
                "init": [
                    "bool",
                    "str",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "Callable"
                ]
            }
        },
        "get_keyword_predictor": {
            "name": "get_keyword_predictor",
            "location": 22,
            "return": [
                "KeywordPredictor",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "linkedinfo-ml-master/ml/models/tag.py": {
        "append_map_tags": {
            "name": "append_map_tags",
            "location": 184,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "predictor": [
                    "str",
                    "Dict[int, str]",
                    "frozenset[str]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "tags": [
                    "List[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TagsTestModel.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagsTestModel.predict": {
            "name": "predict",
            "location": 33,
            "return": [
                "list[list[typing.Text]]",
                "Set[str]",
                "str",
                "bool",
                "MutableMapping[str, int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "FastTestModel.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTestModel.predict": {
            "name": "predict",
            "location": 43,
            "return": [
                "list[typing.Text]",
                "Set[str]",
                "str",
                "bool",
                "MutableMapping[str, int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TagsTextModel.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "mlb_fiile": [
                    "str"
                ]
            }
        },
        "TagsTextModel.predict": {
            "name": "predict",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "TagsTextModelV2.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TagsTextModelV2.predict": {
            "name": "predict",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TagsTextModelV3.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TagsTextModelV3.predict": {
            "name": "predict",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TagsFasttextModel.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "modelfile": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TagsFasttextModel.predict": {
            "name": "predict",
            "location": 152,
            "return": [
                "list[]",
                "List[str]",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "Dict[str, bool]",
                    "Union[str, List[str]]",
                    "dict",
                    "int"
                ],
                "k": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "threshold": [
                    "float",
                    "int",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ],
                "at_least_one": [
                    "bool",
                    "list",
                    "str"
                ],
                "top_n": [
                    "None",
                    "bool",
                    "Optional[List[int]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "TagsFasttextModel._preprocess": {
            "name": "_preprocess",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TagPredictor.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "Callable",
                    "str"
                ],
                "test_model": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "TagPredictor.init": {
            "name": "init",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagPredictor.predict": {
            "name": "predict",
            "location": 279,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "entity_tags": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TagPredictor._append_ft_tags": {
            "name": "_append_ft_tags",
            "location": 295,
            "return": [
                "list[]",
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "List[str]"
                ],
                "tags_ft": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TagPredictor._append_map_tags": {
            "name": "_append_map_tags",
            "location": 298,
            "return": [
                "list[]",
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "text": [
                    "Optional[str]",
                    "pandas.DataFrame",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "bytes"
                ],
                "min_label_len": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "linkedinfo-ml-master/ml/models/__init__.py": {},
    "linkedinfo-ml-master/tests/test_dataset.py": {
        "Tester.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.test_dataset_dump": {
            "name": "test_dataset_dump",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "linkedinfo-ml-master/tests/test_persistor.py": {
        "Tester.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.test_save_model_url": {
            "name": "test_save_model_url",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "linkedinfo-ml-master/tests/test_predictor.py": {
        "Tester.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.test_fast_text": {
            "name": "test_fast_text",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
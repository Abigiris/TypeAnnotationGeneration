{
    "links-master/ci/test_links.py": {
        "github_slugify": {
            "name": "github_slugify",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "assert_sorted": {
            "name": "assert_sorted",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "assert_attr_sorted": {
            "name": "assert_attr_sorted",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable"
                ],
                "attr": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "casefold": [
                    "bool"
                ],
                "alnum_first": [
                    "bool"
                ]
            }
        },
        "renderer": {
            "name": "renderer",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "external_links": {
            "name": "external_links",
            "location": 243,
            "return": [
                "bool",
                "List[str]",
                "List[float]"
            ],
            "arguments": {
                "renderer": [
                    "Dict[str, Any]",
                    "dict",
                    "Generator",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "internal_links": {
            "name": "internal_links",
            "location": 251,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]",
                "List[List[int]]"
            ],
            "arguments": {
                "renderer": [
                    "bool",
                    "str",
                    "int",
                    "Dict[int, int]",
                    "T"
                ]
            }
        },
        "headers": {
            "name": "headers",
            "location": 256,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "renderer": [
                    "str",
                    "apistar.types.UMIMessage",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "link_lists": {
            "name": "link_lists",
            "location": 261,
            "return": [
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "renderer": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "extract_url_to_test_for_link": {
            "name": "extract_url_to_test_for_link",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "link": [
                    "Link"
                ]
            }
        },
        "choose_fetch_method_for_link": {
            "name": "choose_fetch_method_for_link",
            "location": 334,
            "return": [
                "List[str]",
                "asyncio.AbstractEventLoop",
                "Optional[asyncio.AbstractEventLoop]"
            ],
            "arguments": {
                "link": [
                    "Link"
                ],
                "client": [
                    "httpx.AsyncClient",
                    "int"
                ]
            }
        },
        "get_retrying": {
            "name": "get_retrying",
            "location": 354,
            "return": [
                "Callable"
            ],
            "arguments": {
                "client": [
                    "int",
                    "httpx.AsyncClient",
                    "Iterable[int]",
                    "bool"
                ],
                "codes": [
                    "Iterable[int]"
                ],
                "max_retries": [
                    "int"
                ],
                "random_sleep": [
                    "int",
                    "httpx.AsyncClient",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "get_retrying_on_throttling": {
            "name": "get_retrying_on_throttling",
            "location": 380,
            "return": [
                "Callable"
            ],
            "arguments": {
                "client": [
                    "httpx.AsyncClient",
                    "int",
                    "bool"
                ],
                "max_retries": [
                    "int"
                ],
                "random_sleep": [
                    "httpx.AsyncClient",
                    "int",
                    "bool"
                ]
            }
        },
        "test_internal_links_are_all_valid": {
            "name": "test_internal_links_are_all_valid",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "internal_links": [
                    "bool",
                    "int"
                ],
                "headers": [
                    "bool"
                ]
            }
        },
        "test_all_headers_are_linked_to": {
            "name": "test_all_headers_are_linked_to",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "internal_links": [
                    "str",
                    "List[str]"
                ],
                "headers": []
            }
        },
        "test_second_level_headers_are_sorted": {
            "name": "test_second_level_headers_are_sorted",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_third_level_headers_are_sorted": {
            "name": "test_third_level_headers_are_sorted",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "test_links_are_sorted_in_lists": {
            "name": "test_links_are_sorted_in_lists",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "link_lists": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FetchResult.is_ok": {
            "name": "is_ok",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchResult.error_description": {
            "name": "error_description",
            "location": 88,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredRenderer.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredRenderer.headers": {
            "name": "headers",
            "location": 112,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredRenderer.links": {
            "name": "links",
            "location": 116,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredRenderer.link_lists": {
            "name": "link_lists",
            "location": 120,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuredRenderer.header": {
            "name": "header",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "level": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "StructuredRenderer.link": {
            "name": "link",
            "location": 131,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "dict",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "dict",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "StructuredRenderer.list": {
            "name": "list",
            "location": 136,
            "return": [
                "str",
                "object",
                "list",
                "List[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "ordered": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "StructuredRenderer.image": {
            "name": "image",
            "location": 169,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "StructuredRenderer._register_link": {
            "name": "_register_link",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "title": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    }
}
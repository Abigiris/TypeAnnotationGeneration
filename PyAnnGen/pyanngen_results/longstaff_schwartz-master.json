{
    "longstaff_schwartz-master/setup.py": {},
    "longstaff_schwartz-master/docs/conf.py": {},
    "longstaff_schwartz-master/longstaff_schwartz/algorithm.py": {
        "longstaff_schwartz_iter": {
            "name": "longstaff_schwartz_iter",
            "location": 5,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "Union[int, float]"
                ],
                "t": [
                    "int",
                    "numpy.ndarray"
                ],
                "df": [
                    "int",
                    "numpy.ndarray"
                ],
                "fit": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "exercise_payoff": [
                    "int",
                    "dict[, ]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "numpy.ndarray",
                    "dict",
                    "numpy.array"
                ],
                "itm_select": [
                    "None",
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "longstaff_schwartz": {
            "name": "longstaff_schwartz",
            "location": 33,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "t": [
                    "numpy.ndarray",
                    "int"
                ],
                "df": [
                    "int",
                    "numpy.ndarray"
                ],
                "fit": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "exercise_payoff": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "itm_select": [
                    "numpy.ndarray",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "ls_american_option_quadratic_iter": {
            "name": "ls_american_option_quadratic_iter",
            "location": 40,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "int",
                    "Union[int, float]"
                ],
                "t": [
                    "dict[str, typing.Any]",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "r": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "strike": [
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[]",
                    "set",
                    "float",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "longstaff_schwartz_american_option_quadratic": {
            "name": "longstaff_schwartz_american_option_quadratic",
            "location": 66,
            "return": [
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "X": [
                    "int",
                    "bool"
                ],
                "t": [
                    "str",
                    "int",
                    "Optional[Iterable[int]]",
                    "Optional[str]"
                ],
                "r": [
                    "int",
                    "Optional[Iterable[int]]",
                    "Optional[str]"
                ],
                "strike": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "longstaff_schwartz-master/longstaff_schwartz/binomial.py": {
        "create_binomial_model": {
            "name": "create_binomial_model",
            "location": 62,
            "return": [
                "BinomialModel"
            ],
            "arguments": {
                "sigma": [
                    "numpy.ndarray",
                    "bool"
                ],
                "r": [
                    "numpy.ndarray",
                    "float",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "S0": [
                    "numpy.ndarray",
                    "float",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "T": [
                    "float",
                    "numpy.ndarray"
                ],
                "n": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "call_payoff": {
            "name": "call_payoff",
            "location": 67,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "strike": [
                    "numpy.array",
                    "set",
                    "bool"
                ]
            }
        },
        "put_payoff": {
            "name": "put_payoff",
            "location": 71,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "strike": [
                    "str",
                    "Callable",
                    "Iterator[T]"
                ]
            }
        },
        "european_call_price": {
            "name": "european_call_price",
            "location": 75,
            "return": [
                "bool",
                "tuple",
                "float"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "List[Exception]"
                ],
                "strike": [
                    "str",
                    "List[Exception]"
                ]
            }
        },
        "american_call_price": {
            "name": "american_call_price",
            "location": 79,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "List[Exception]"
                ],
                "strike": [
                    "str",
                    "List[Exception]"
                ]
            }
        },
        "european_put_price": {
            "name": "european_put_price",
            "location": 83,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ],
                "strike": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "american_put_price": {
            "name": "american_put_price",
            "location": 87,
            "return": [
                "str",
                "Callable[[None, None], bool]",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ],
                "strike": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "american_put_exercise_barrier": {
            "name": "american_put_exercise_barrier",
            "location": 91,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ],
                "strike": [
                    "str",
                    "int",
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "american_put_exercise_barrier_fitted": {
            "name": "american_put_exercise_barrier_fitted",
            "location": 102,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "mdl": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ],
                "strike": [
                    "bool",
                    "str",
                    "List[numpy.ndarray]"
                ],
                "degree": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BinomialModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ],
                "r": [
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Union[float, int]"
                ],
                "S0": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ],
                "T": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ],
                "n": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "BinomialModel.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialModel.dt": {
            "name": "dt",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialModel.q": {
            "name": "q",
            "location": 28,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialModel.terminal": {
            "name": "terminal",
            "location": 31,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinomialModel.evaluate": {
            "name": "evaluate",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "payoff": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BinomialModel.evaluate_american_exercisable_iter": {
            "name": "evaluate_american_exercisable_iter",
            "location": 43,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "payoff": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BinomialModel.evaluate_american_exercisable": {
            "name": "evaluate_american_exercisable",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "payoff": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "longstaff_schwartz-master/longstaff_schwartz/cli.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "longstaff_schwartz-master/longstaff_schwartz/regression_basis.py": {
        "RegressionBasis.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basis_functions": [
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]",
                    "list[numpy.ndarray]",
                    "List[numpy.ndarray]",
                    "numpy.array"
                ]
            }
        },
        "RegressionBasis.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionBasis.apply": {
            "name": "apply",
            "location": 14,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "RegressionBasis.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "Union[gluonts.model.common.Tensor, numpy.array]"
                ]
            }
        },
        "RegressionBasis.fit": {
            "name": "fit",
            "location": 23,
            "return": [
                "FittedFunction"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Iterable[float]",
                    "int",
                    "numpy.ndarray",
                    "float",
                    "T",
                    "Iterable[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "FittedFunction.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basis": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "beta": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "domain": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FittedFunction.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "FittedFunction.linspace": {
            "name": "linspace",
            "location": 37,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "domain": [
                    "str",
                    "None",
                    "int",
                    "list",
                    "Dict[str, Any]",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PolynomialRegressionFunction.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exponent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PolynomialRegressionFunction.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolynomialRegressionFunction.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "typing.Text",
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "numpy.ndarray",
                    "collections.abc.Awaitable[T]",
                    "Callable",
                    "typing.Container",
                    "Awaitable[T]",
                    "Container"
                ]
            }
        },
        "PolynomialRegressionBasis.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degree": [
                    "float",
                    "bool",
                    "Optional[float]",
                    "list[float]",
                    "List[float]"
                ]
            }
        }
    },
    "longstaff_schwartz-master/longstaff_schwartz/stochastic_process.py": {
        "BrownianMotion.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "float"
                ],
                "sigma": [
                    "float"
                ]
            }
        },
        "BrownianMotion.simulate": {
            "name": "simulate",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "numpy.ndarray",
                    "numpy.array",
                    "int"
                ],
                "n": [
                    "int"
                ],
                "rnd": [
                    "int",
                    "str"
                ]
            }
        },
        "BrownianMotion.distribution": {
            "name": "distribution",
            "location": 24,
            "return": [
                "int",
                "numpy.ndarray",
                "List[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "GeometricBrownianMotion.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "float"
                ],
                "sigma": [
                    "float"
                ]
            }
        },
        "GeometricBrownianMotion.simulate": {
            "name": "simulate",
            "location": 34,
            "return": [
                "Tuple[numpy.ndarray]",
                "str",
                "Tuple[Any, Any, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "numpy.ndarray",
                    "numpy.array",
                    "int"
                ],
                "n": [
                    "int"
                ],
                "rnd": [
                    "int",
                    "numpy.random.RandomState"
                ]
            }
        },
        "GeometricBrownianMotion.distribution": {
            "name": "distribution",
            "location": 45,
            "return": [
                "numpy.ndarray",
                "Dict[str, int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        }
    },
    "longstaff_schwartz-master/longstaff_schwartz/__init__.py": {},
    "longstaff_schwartz-master/tests/test_binomial.py": {
        "TestBinomial.test_european_call_price_decrease_with_strike": {
            "name": "test_european_call_price_decrease_with_strike",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_thayer_watkins_example": {
            "name": "test_thayer_watkins_example",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_cox_ross_rubinstein_example": {
            "name": "test_cox_ross_rubinstein_example",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_put_call_parity": {
            "name": "test_put_call_parity",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_american_european_call_equality": {
            "name": "test_american_european_call_equality",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_american_european_put_difference": {
            "name": "test_american_european_put_difference",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_ucsd_example": {
            "name": "test_ucsd_example",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_deep_itm_american_out": {
            "name": "test_deep_itm_american_out",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_american_exercise_barrier": {
            "name": "test_american_exercise_barrier",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinomial.test_american_exercise_barrier_fitted": {
            "name": "test_american_exercise_barrier_fitted",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "longstaff_schwartz-master/tests/test_demo.py": {
        "TestDemo.test_readme_demo": {
            "name": "test_readme_demo",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDemo.test_readme_demo.put_payoff": {
            "name": "put_payoff",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "spot": [
                    "int",
                    "Dict[str, bool]",
                    "bool",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "TestDemo.test_readme_demo.constant_rate_df": {
            "name": "constant_rate_df",
            "location": 30,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "t_from": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "t_to": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestDemo.test_readme_demo.fit_quadratic": {
            "name": "fit_quadratic",
            "location": 34,
            "return": [
                "numpy.ndarray",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "TestDemo.test_readme_demo.itm": {
            "name": "itm",
            "location": 39,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "payoff": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "spot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "longstaff_schwartz-master/tests/test_longstaff_schwartz.py": {
        "american_put_payoff": {
            "name": "american_put_payoff",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "spot": [
                    "int",
                    "dict",
                    "Tuple[int, int, int, int]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "constant_rate_df": {
            "name": "constant_rate_df",
            "location": 48,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "t_from": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "t_to": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "fit_quadratic": {
            "name": "fit_quadratic",
            "location": 52,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "itm": {
            "name": "itm",
            "location": 56,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "payoff": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "spot": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestLongstaff_schwartz.test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongstaff_schwartz.test_longstaff_schwartz_paper_example": {
            "name": "test_longstaff_schwartz_paper_example",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongstaff_schwartz.test_longstaff_schwartz_paper_example_intermediate_values": {
            "name": "test_longstaff_schwartz_paper_example_intermediate_values",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongstaff_schwartz.test_longstaff_schwartz_paper_example_for_general_algorithm": {
            "name": "test_longstaff_schwartz_paper_example_for_general_algorithm",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLongstaff_schwartz.test_general_against_specific_algorithm": {
            "name": "test_general_against_specific_algorithm",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "longstaff_schwartz-master/tests/test_regression_basis.py": {
        "TestRegressionBasis.test_polynomial_components": {
            "name": "test_polynomial_components",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegressionBasis.test_np_polynomial_api_compatibility": {
            "name": "test_np_polynomial_api_compatibility",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "longstaff_schwartz-master/tests/test_stochastic_process.py": {
        "TestRegressionBasis.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegressionBasis.test_brownian_motion_distribution": {
            "name": "test_brownian_motion_distribution",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegressionBasis.test_geometric_brownian_motion_distribution": {
            "name": "test_geometric_brownian_motion_distribution",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "longstaff_schwartz-master/tests/__init__.py": {}
}
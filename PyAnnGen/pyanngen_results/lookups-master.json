{
    "lookups-master/setup.py": {},
    "lookups-master/lookups/delegated_lookup.py": {
        "DelegatedLookup.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "lookups.lookup.LookupProvider"
                ]
            }
        },
        "DelegatedLookup.lookup_updated": {
            "name": "lookup_updated",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedLookup.delegate": {
            "name": "delegate",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedLookup.lookup": {
            "name": "lookup",
            "location": 64,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "DelegatedLookup.lookup_result": {
            "name": "lookup_result",
            "location": 67,
            "return": [
                "lookups.lookup.Result"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "DelegatedResult.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "DelegatedLookup"
                ],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "DelegatedResult.lookup_updated": {
            "name": "lookup_updated",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Callable[([lookups.lookup.Result], None)]"
                ]
            }
        },
        "DelegatedResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Callable[([lookups.lookup.Result], None)]"
                ]
            }
        },
        "DelegatedResult._proxy_listener": {
            "name": "_proxy_listener",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "lookups.lookup.Result"
                ]
            }
        },
        "DelegatedResult.all_classes": {
            "name": "all_classes",
            "location": 131,
            "return": [
                "AbstractSet[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedResult.all_instances": {
            "name": "all_instances",
            "location": 134,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatedResult.all_items": {
            "name": "all_items",
            "location": 137,
            "return": [
                "Sequence[lookups.lookup.Item]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/entry_point.py": {
        "EntryPointLookup.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ]
            }
        }
    },
    "lookups-master/lookups/generic_lookup.py": {
        "GenericLookup.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Content"
                ]
            }
        },
        "GenericLookup._storage_for_lookup": {
            "name": "_storage_for_lookup",
            "location": 61,
            "return": [
                "typing.Iterator[Storage]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericLookup._storage_for_modification": {
            "name": "_storage_for_modification",
            "location": 73,
            "return": [
                "typing.Iterator[Transaction]"
            ],
            "arguments": {
                "self": [],
                "ensure": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "notify_in": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "GenericLookup._initialise": {
            "name": "_initialise",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericLookup._before_lookup": {
            "name": "_before_lookup",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "GenericLookup._add_pair": {
            "name": "_add_pair",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ],
                "notify_in": [
                    "concurrent.futures._base.Executor"
                ]
            }
        },
        "GenericLookup._remove_pair": {
            "name": "_remove_pair",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ],
                "notify_in": [
                    "concurrent.futures._base.Executor"
                ]
            }
        },
        "GenericLookup._set_pairs": {
            "name": "_set_pairs",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Collection[Pair]"
                ],
                "notify_in": [
                    "concurrent.futures._base.Executor"
                ]
            }
        },
        "GenericLookup._notify_in": {
            "name": "_notify_in",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notify_in": [
                    "Optional[concurrent.futures._base.Executor]"
                ],
                "listeners": [
                    "Iterable[lookups.lookup.Result]"
                ]
            }
        },
        "GenericLookup.lookup": {
            "name": "lookup",
            "location": 140,
            "return": [
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "GenericLookup.lookup_result": {
            "name": "lookup_result",
            "location": 144,
            "return": [
                "lookups.lookup.Result"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "GenericLookup.lookup_item": {
            "name": "lookup_item",
            "location": 156,
            "return": [
                "Optional[lookups.lookup.Item]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "GenericLookup.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericLookup.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "GenericLookup"
                ],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "GLResult.clear_cache": {
            "name": "clear_cache",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Callable[([lookups.lookup.Result], None)]"
                ]
            }
        },
        "GLResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Callable[([lookups.lookup.Result], None)]"
                ]
            }
        },
        "GLResult.all_classes": {
            "name": "all_classes",
            "location": 204,
            "return": [
                "AbstractSet[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.all_instances": {
            "name": "all_instances",
            "location": 218,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.all_items": {
            "name": "all_items",
            "location": 232,
            "return": [
                "Sequence[lookups.lookup.Item]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult._all_items_without_before_lookup": {
            "name": "_all_items_without_before_lookup",
            "location": 236,
            "return": [
                "Sequence[lookups.lookup.Item]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.__str__": {
            "name": "__str__",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GLResult.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notify_in": [
                    "concurrent.futures._base.Executor"
                ]
            }
        },
        "Content._attach": {
            "name": "_attach",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "GenericLookup"
                ]
            }
        },
        "Content._add_pair": {
            "name": "_add_pair",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ]
            }
        },
        "Content._remove_pair": {
            "name": "_remove_pair",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ]
            }
        },
        "Content._set_pairs": {
            "name": "_set_pairs",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Collection[Pair]"
                ]
            }
        },
        "Content.__contains__": {
            "name": "__contains__",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "object"
                ]
            }
        },
        "Storage.begin_transaction": {
            "name": "begin_transaction",
            "location": 340,
            "return": [
                "Transaction"
            ],
            "arguments": {
                "self": [],
                "ensure": [
                    "int"
                ]
            }
        },
        "Storage.end_transaction": {
            "name": "end_transaction",
            "location": 355,
            "return": [
                "Iterable[GLResult]"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "Transaction"
                ]
            }
        },
        "Storage.lookup": {
            "name": "lookup",
            "location": 365,
            "return": [
                "Iterable[Pair]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "Storage.register_result": {
            "name": "register_result",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "GLResult"
                ]
            }
        },
        "Storage.find_result": {
            "name": "find_result",
            "location": 384,
            "return": [
                "Optional[GLResult]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]"
                ]
            }
        },
        "Transaction.add": {
            "name": "add",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ]
            }
        },
        "Transaction.remove": {
            "name": "remove",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Pair"
                ]
            }
        },
        "Transaction.set_all": {
            "name": "set_all",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Collection[Pair]"
                ]
            }
        },
        "Transaction.new_content": {
            "name": "new_content",
            "location": 421,
            "return": [
                "Tuple[(Collection[Pair], Set[Pair])]"
            ],
            "arguments": {
                "self": [],
                "prev": [
                    "Collection[Pair]"
                ]
            }
        }
    },
    "lookups-master/lookups/instance_content.py": {
        "InstanceContent.add": {
            "name": "add",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "convertor": [
                    "Convertor"
                ]
            }
        },
        "InstanceContent.remove": {
            "name": "remove",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "convertor": [
                    "Convertor"
                ]
            }
        },
        "InstanceContent.set": {
            "name": "set",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "Collection[object]"
                ],
                "convertor": [
                    "Convertor"
                ]
            }
        },
        "InstanceContent.__contains__": {
            "name": "__contains__",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "object"
                ]
            }
        },
        "Convertor.convert": {
            "name": "convert",
            "location": 103,
            "return": [
                "builtins.object",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "Convertor.type": {
            "name": "type",
            "location": 117,
            "return": [
                "builtins.type"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "Convertor.id": {
            "name": "id",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "Convertor.display_name": {
            "name": "display_name",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "ConvertingItem.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ],
                "convertor": [
                    "Convertor"
                ]
            }
        },
        "ConvertingItem._get_converted": {
            "name": "_get_converted",
            "location": 170,
            "return": [
                "None",
                "Optional[str]",
                "Union[None, List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertingItem.get_display_name": {
            "name": "get_display_name",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertingItem.get_id": {
            "name": "get_id",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertingItem.get_instance": {
            "name": "get_instance",
            "location": 182,
            "return": [
                "str",
                "int",
                "List[int]",
                "dict[str, typing.Any]",
                "Tuple[float, float]",
                "list[int]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertingItem.get_type": {
            "name": "get_type",
            "location": 192,
            "return": [
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertingItem.__eq__": {
            "name": "__eq__",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "ConvertingItem.__hash__": {
            "name": "__hash__",
            "location": 206,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/lookup.py": {
        "Lookup.get_default": {
            "name": "get_default",
            "location": 36,
            "return": [
                "str",
                "dict[, ]",
                "bool",
                "list[typing.Optional[typing.Any]]",
                "Mapping",
                "LookupProvider",
                "Callable[..., None]",
                "DelegatedLookup",
                "int",
                "ProxyLookup"
            ],
            "arguments": {
                "cls": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Type[T]",
                    "None",
                    "Optional[bytes]",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "Lookup.lookup": {
            "name": "lookup",
            "location": 89,
            "return": [
                "typing.Optional[builtins.object]",
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Lookup.__call__": {
            "name": "__call__",
            "location": 102,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.TextIO",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "Lookup.lookup_result": {
            "name": "lookup_result",
            "location": 106,
            "return": [
                "Result",
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "str",
                    "Type[object]",
                    "bool",
                    "int"
                ]
            }
        },
        "Lookup.lookup_item": {
            "name": "lookup_item",
            "location": 118,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Iterable[P]",
                    "Iterable[eth.abc.BlockHeaderAPI]",
                    "List[dict]"
                ]
            }
        },
        "Lookup.lookup_all": {
            "name": "lookup_all",
            "location": 131,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str",
                    "typing.Type",
                    "complex",
                    "type",
                    "Type",
                    "T"
                ]
            }
        },
        "Item.get_display_name": {
            "name": "get_display_name",
            "location": 156,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.get_id": {
            "name": "get_id",
            "location": 168,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.get_instance": {
            "name": "get_instance",
            "location": 182,
            "return": [
                "typing.Optional[builtins.object]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.get_type": {
            "name": "get_type",
            "location": 191,
            "return": [
                "typing.Type[builtins.object]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__str__": {
            "name": "__str__",
            "location": 199,
            "return": [
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Result.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Result.all_classes": {
            "name": "all_classes",
            "location": 238,
            "return": [
                "typing.AbstractSet[typing.Type[builtins.object]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.all_instances": {
            "name": "all_instances",
            "location": 250,
            "return": [
                "typing.Sequence[builtins.object]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.all_items": {
            "name": "all_items",
            "location": 259,
            "return": [
                "typing.Sequence[Item]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupProvider.get_lookup": {
            "name": "get_lookup",
            "location": 277,
            "return": [
                "Lookup",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/lookups.py": {
        "singleton": {
            "name": "singleton",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "member": [
                    "str",
                    "float"
                ],
                "id_": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "fixed": {
            "name": "fixed",
            "location": 25,
            "return": [
                "EmptyLookup",
                "int",
                "SimpleLookup",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "NoResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "NoResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NoResult.all_classes": {
            "name": "all_classes",
            "location": 44,
            "return": [
                "frozenset",
                "str",
                "Callable[..., T]",
                "Type",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoResult.all_instances": {
            "name": "all_instances",
            "location": 47,
            "return": [
                "tuple[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoResult.all_items": {
            "name": "all_items",
            "location": 50,
            "return": [
                "tuple[]",
                "str",
                "int",
                "Tuple[bytes]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLookup.lookup": {
            "name": "lookup",
            "location": 58,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "EmptyLookup.lookup_result": {
            "name": "lookup_result",
            "location": 61,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "str",
                    "Type[object]",
                    "bool",
                    "int"
                ]
            }
        },
        "LookupItem.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "id_": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LookupItem.get_display_name": {
            "name": "get_display_name",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupItem.get_id": {
            "name": "get_id",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupItem.get_instance": {
            "name": "get_instance",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupItem.get_type": {
            "name": "get_type",
            "location": 86,
            "return": [
                "typing.Type",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupItem.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "LookupItem.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/proxy_lookup.py": {
        "ProxyLookup.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyLookup.add_lookup": {
            "name": "add_lookup",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "dict",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "ProxyLookup.remove_lookup": {
            "name": "remove_lookup",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "ProxyLookup.lookup": {
            "name": "lookup",
            "location": 57,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "ProxyLookup.lookup_item": {
            "name": "lookup_item",
            "location": 65,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "ProxyLookup.lookup_result": {
            "name": "lookup_result",
            "location": 73,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "T"
                ]
            }
        },
        "PLResult.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "str",
                    "dict",
                    "bool",
                    "Type",
                    "tuple"
                ],
                "cls": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PLResult._lookup_added": {
            "name": "_lookup_added",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "str",
                    "bool"
                ]
            }
        },
        "PLResult._lookup_removed": {
            "name": "_lookup_removed",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "bool"
                ]
            }
        },
        "PLResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "float",
                    "int"
                ]
            }
        },
        "PLResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PLResult._proxy_listener": {
            "name": "_proxy_listener",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "PLResult.all_classes": {
            "name": "all_classes",
            "location": 147,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Set[str]",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLResult.all_instances": {
            "name": "all_instances",
            "location": 153,
            "return": [
                "bool",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLResult.all_items": {
            "name": "all_items",
            "location": 159,
            "return": [
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/set_storage.py": {
        "SetStorage.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetStorage.begin_transaction": {
            "name": "begin_transaction",
            "location": 27,
            "return": [
                "str",
                "SetTransaction"
            ],
            "arguments": {
                "self": [],
                "ensure": [
                    "bool",
                    "str"
                ]
            }
        },
        "SetStorage.end_transaction": {
            "name": "end_transaction",
            "location": 30,
            "return": [
                "set[]",
                "int",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "dict",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "SetStorage.lookup": {
            "name": "lookup",
            "location": 43,
            "return": [
                "typing.Iterable[generic_lookup.Pair]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "str",
                    "Type[object]",
                    "tuple[]",
                    "type",
                    "tuple"
                ]
            }
        },
        "SetStorage.register_result": {
            "name": "register_result",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "type",
                    "dict[str, typing.Any]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SetStorage.find_result": {
            "name": "find_result",
            "location": 51,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SetStorage.__contains__": {
            "name": "__contains__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "SetTransaction.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ensure": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "current_content": [
                    "dict[typing.Union[str,str,str,str,str,str,str], ]",
                    "str",
                    "dict",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Mapping[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "SetTransaction.new_content": {
            "name": "new_content",
            "location": 64,
            "return": [
                "tuple[]",
                "List[str]",
                "str",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "prev": [
                    "Collection[generic_lookup.Pair]",
                    "str",
                    "typing.Collection",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional",
                    "typing.Optional[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "SetTransaction.add": {
            "name": "add",
            "location": 67,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "SetTransaction.remove": {
            "name": "remove",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "typing.Iterable[typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SetTransaction.set_all": {
            "name": "set_all",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, \"Outcome\"]",
                    "dict[str, O]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "lookups-master/lookups/simple.py": {
        "SimpleLookup.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleLookup.lookup": {
            "name": "lookup",
            "location": 34,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[object]",
                    "int",
                    "str",
                    "T",
                    "float"
                ]
            }
        },
        "SimpleLookup.lookup_result": {
            "name": "lookup_result",
            "location": 41,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "list",
                    "Union[str, IO[str]]",
                    "List[int]",
                    "memoryview",
                    "str",
                    "bool",
                    "List[Callable]"
                ]
            }
        },
        "SimpleResult.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "simple_lookup": [
                    "int",
                    "bool"
                ],
                "cls": [
                    "int",
                    "bool"
                ]
            }
        },
        "SimpleResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "SimpleResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SimpleResult.all_classes": {
            "name": "all_classes",
            "location": 63,
            "return": [
                "List[str]",
                "Final",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleResult.all_instances": {
            "name": "all_instances",
            "location": 68,
            "return": [
                "Iterator[Collection[T]]",
                "Sequence[object]",
                "Set[int]",
                "List[Tuple[str, int]]",
                "Iterable[int]",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleResult.all_items": {
            "name": "all_items",
            "location": 74,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Iterable[str]",
                "bool",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/singleton.py": {
        "SingletonLookup.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "id_": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "SingletonLookup.lookup": {
            "name": "lookup",
            "location": 34,
            "return": [
                "cls",
                "Optional[str]",
                "None",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "SingletonLookup.lookup_result": {
            "name": "lookup_result",
            "location": 40,
            "return": [
                "SingletonResult",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "bool",
                    "type",
                    "complex",
                    "bytes",
                    "Type"
                ]
            }
        },
        "SingletonLookup.lookup_item": {
            "name": "lookup_item",
            "location": 47,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "SingletonLookup.lookup_all": {
            "name": "lookup_all",
            "location": 53,
            "return": [
                "tuple[cls]",
                "int",
                "tuple[]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SingletonLookup.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "typing.Text",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonResult.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "typing.Mapping",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "SingletonResult.add_lookup_listener": {
            "name": "add_lookup_listener",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SingletonResult.remove_lookup_listener": {
            "name": "remove_lookup_listener",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SingletonResult.all_classes": {
            "name": "all_classes",
            "location": 74,
            "return": [
                "set[]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonResult.all_instances": {
            "name": "all_instances",
            "location": 77,
            "return": [
                "tuple[]",
                "bool",
                "List[str]",
                "str",
                "Sequence[object]",
                "Optional[str]",
                "Optional[int]",
                "float",
                "Union[None, str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonResult.all_items": {
            "name": "all_items",
            "location": 84,
            "return": [
                "tuple[]",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Iterable[str]",
                "bool",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/lookups/weak_observable.py": {
        "WeakCallable.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "Callable"
                ],
                "callback": [
                    "Optional[Callable]"
                ]
            }
        },
        "WeakCallable.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeakCallable.ref": {
            "name": "ref",
            "location": 34,
            "return": [
                "Iterable[str]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeakCallable.__eq__": {
            "name": "__eq__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WeakCallable.__ne__": {
            "name": "__ne__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WeakCallable.__hash__": {
            "name": "__hash__",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeakObservable.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeakObservable.on": {
            "name": "on",
            "location": 65,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "WeakObservable.on._on_wrapper": {
            "name": "_on_wrapper",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "lookups-master/lookups/__about__.py": {},
    "lookups-master/lookups/__init__.py": {},
    "lookups-master/tests/test_delegated_lookup.py": {
        "setup_lookups": {
            "name": "setup_lookups",
            "location": 41,
            "return": [
                "List[str]",
                "bytes",
                "BinaryIO",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "list",
                    "List[\"Issue\"]",
                    "int"
                ],
                "all_instances": [
                    "str",
                    "Match",
                    "Union[str]",
                    "int"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 63,
            "return": [
                "int",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "expected": [
                    "type",
                    "Optional[Callable]",
                    "Mapping[str, Any]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "item": [
                    "dict",
                    "bool",
                    "Tuple[str, str]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "check_result": {
            "name": "check_result",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "List[str]",
                    "str"
                ],
                "result": [
                    "list",
                    "tuple",
                    "List[str]",
                    "Sequence[Dict]"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_result_already_exist": {
            "name": "test_lookup_result_already_exist",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_listener": {
            "name": "check_listener",
            "location": 329,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Callable[..., None]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "content1": [
                    "set"
                ],
                "lookup1": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "content2": [
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "lookup2": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "provider": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "delegated_lookup": [
                    "bool",
                    "List[dict]",
                    "List[str]",
                    "str"
                ],
                "result": [
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "test_listener": {
            "name": "test_listener",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bound_method_listener": {
            "name": "test_bound_method_listener",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_listeners": {
            "name": "test_multiple_listeners",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_results": {
            "name": "test_multiple_results",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modify_lookup_from_listener": {
            "name": "test_modify_lookup_from_listener",
            "location": 674,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_del_result_clear_listener": {
            "name": "test_del_result_clear_listener",
            "location": 690,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Provider.get_lookup": {
            "name": "get_lookup",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.lookup": {
            "name": "lookup",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "check_listener.check_add_remove": {
            "name": "check_add_remove",
            "location": 337,
            "return": [],
            "arguments": {
                "members1": [],
                "members2": [],
                "expected": []
            }
        },
        "check_listener.check_presence": {
            "name": "check_presence",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "present": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "not_present": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_listener.call_me_back": {
            "name": "call_me_back",
            "location": 431,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_listeners.call_me_back1": {
            "name": "call_me_back1",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "type",
                    "Tuple[Type]",
                    "Dict[str, Any]",
                    "Type",
                    "Optional[Any]"
                ]
            }
        },
        "test_multiple_listeners.call_me_back2": {
            "name": "call_me_back2",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "List[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_multiple_listeners.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 501,
            "return": [],
            "arguments": {
                "member": [],
                "added": [],
                "cls": [],
                "result_cls": []
            }
        },
        "test_multiple_listeners.check_add_remove": {
            "name": "check_add_remove",
            "location": 515,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "test_multiple_listeners.check_not_called": {
            "name": "check_not_called",
            "location": 536,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "test_multiple_results.call_me_back": {
            "name": "call_me_back",
            "location": 582,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_results.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "member": [
                    "int",
                    "bool",
                    "List[List]",
                    "Dict[str, Any]"
                ],
                "added": [
                    "bool",
                    "dict",
                    "str",
                    "list"
                ],
                "cls": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]"
                ],
                "result_cls": [
                    "Optional[int]",
                    "Callable",
                    "bool",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "test_multiple_results.check_add_remove": {
            "name": "check_add_remove",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_multiple_results.check_not_called": {
            "name": "check_not_called",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_modify_lookup_from_listener.call_me_back": {
            "name": "call_me_back",
            "location": 682,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_del_result_clear_listener.call_me_back": {
            "name": "call_me_back",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "Callable",
                    "Dict[str, Any]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "check_listener.check_add_remove.check_add": {
            "name": "check_add",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "content": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "check_listener.check_add_remove.check_remove": {
            "name": "check_remove",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_bound_method_listener.ToCall.call_me_back": {
            "name": "call_me_back",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "lookups-master/tests/test_empty_lookup.py": {
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "all_instances": [
                    "str"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_listeners": {
            "name": "test_listeners",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_listeners.call_me_back": {
            "name": "call_me_back",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "lookups-master/tests/test_entry_point.py": {
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected_classes": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "all_instances": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected_classes": [
                    "dict[str, int]",
                    "Dict[str, int]",
                    "int",
                    "set[T]",
                    "Set[VT]",
                    "bool"
                ],
                "item": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "dict",
                    "float",
                    "Type[\"SerializationDialect\"]",
                    "dict[, ]",
                    "List[Dict]",
                    "typing.Type",
                    "Mapping",
                    "list[dict[, ]]",
                    "typing.Mapping"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_non_existant_group": {
            "name": "test_non_existant_group",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "expected_classes": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "int",
                    "typing.Sequence[typing.Sequence[str]]",
                    "set",
                    "set[]"
                ],
                "expected_classes": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search": [
                    "str"
                ],
                "expected_classes": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "str",
                    "typing.Hashable",
                    "bool",
                    "typing.Callable[, ]",
                    "Hashable",
                    "Callable"
                ],
                "expected_classes": [
                    "str",
                    "bytes",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "test_listeners": {
            "name": "test_listeners",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search": [
                    "bool",
                    "str"
                ],
                "expected_classes": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_listeners.call_me_back": {
            "name": "call_me_back",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "lookups-master/tests/test_fixed_lookup.py": {
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "bytes",
                    "int",
                    "str",
                    "list",
                    "list[]",
                    "List[int]",
                    "list[int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "all_instances": [
                    "int",
                    "str",
                    "Union[str]",
                    "typing.IO",
                    "IO"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 78,
            "return": [
                "None",
                "Union[tuple, list]",
                "int"
            ],
            "arguments": {
                "expected": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "item": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "str",
                    "None",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "members": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Union[str, float]",
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "search": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "members": [
                    "str",
                    "bool",
                    "int"
                ],
                "search": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "members": [
                    "str"
                ],
                "search": [
                    "str"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Union[str, bytes]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "members": [
                    "str",
                    "int"
                ],
                "search": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "Union[str, Sequence[str]]"
                ]
            }
        },
        "test_listeners": {
            "name": "test_listeners",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "members": [
                    "str",
                    "bool",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "int"
                ],
                "search": [
                    "str",
                    "bool",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "int"
                ],
                "expected": [
                    "str",
                    "bool",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "int"
                ]
            }
        },
        "test_listeners.call_me_back": {
            "name": "call_me_back",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "lookups-master/tests/test_generic_lookup.py": {
        "setup_lookup": {
            "name": "setup_lookup",
            "location": 79,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "members": [
                    "str",
                    "Tuple[str, str]",
                    "Set[str]"
                ],
                "convertor": [
                    "str",
                    "Tuple[str, str]",
                    "Set[str]"
                ]
            }
        },
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "list",
                    "List[\"Issue\"]",
                    "int"
                ],
                "all_instances": [
                    "str",
                    "Match",
                    "Union[str]",
                    "int"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 96,
            "return": [
                "int",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "expected": [
                    "list",
                    "IO[str]",
                    "str",
                    "Optional[Any]"
                ],
                "item": [
                    "dict",
                    "bool",
                    "Tuple[str, str]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cannot_reuse_content": {
            "name": "test_cannot_reuse_content",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_before_attach": {
            "name": "test_add_before_attach",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_after_attach": {
            "name": "test_add_after_attach",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_before_attach": {
            "name": "test_set_before_attach",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_after_attach": {
            "name": "test_set_after_attach",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove_before_attach": {
            "name": "test_remove_before_attach",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove_after_attach": {
            "name": "test_remove_after_attach",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "bytes"
                ],
                "search": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str"
                ],
                "search": [
                    "bool",
                    "list",
                    "Optional[str]",
                    "str"
                ],
                "expected": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "List[str]",
                    "Union[str, bytes]"
                ],
                "search": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "dict"
                ],
                "search": [
                    "str",
                    "dict"
                ],
                "expected": [
                    "Dict[str, Tuple[Any, Any]]",
                    "dict"
                ]
            }
        },
        "test_lookup_result_already_exist": {
            "name": "test_lookup_result_already_exist",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_listener": {
            "name": "test_listener",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "Dict[str, object]",
                    "bool",
                    "int"
                ],
                "search": [
                    "str",
                    "Dict[str, object]",
                    "bool",
                    "int"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "test_bound_method_listener": {
            "name": "test_bound_method_listener",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str"
                ],
                "search": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_multiple_listeners": {
            "name": "test_multiple_listeners",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_results": {
            "name": "test_multiple_results",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modify_lookup_from_listener": {
            "name": "test_modify_lookup_from_listener",
            "location": 694,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_del_result_clear_listener": {
            "name": "test_del_result_clear_listener",
            "location": 707,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_listener_with_executor": {
            "name": "test_listener_with_executor",
            "location": 734,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "bool",
                    "str",
                    "List[Tuple[str, Any]]",
                    "List[str]",
                    "int"
                ],
                "search": [
                    "bool",
                    "str",
                    "List[Tuple[str, Any]]",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "float",
                    "List[str]"
                ],
                "request": [
                    "bool",
                    "str",
                    "List[Tuple[str, Any]]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_multiple_results_with_executor": {
            "name": "test_multiple_results_with_executor",
            "location": 834,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "make_convertor_maps": {
            "name": "make_convertor_maps",
            "location": 995,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "members": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_convertor_none_key": {
            "name": "test_convertor_none_key",
            "location": 1016,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convertor_add": {
            "name": "test_convertor_add",
            "location": 1021,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convertor_set": {
            "name": "test_convertor_set",
            "location": 1046,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convertor_remove": {
            "name": "test_convertor_remove",
            "location": 1070,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instance_convertor_lookup": {
            "name": "test_instance_convertor_lookup",
            "location": 1100,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "List[int]",
                    "Optional[str]"
                ],
                "search": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Union[str, float]",
                    "Optional[str]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Union[str, float]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_instance_convertor_lookup_item": {
            "name": "test_instance_convertor_lookup_item",
            "location": 1120,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "List[int]"
                ],
                "search": [
                    "str",
                    "list"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_instance_convertor_lookup_all": {
            "name": "test_instance_convertor_lookup_all",
            "location": 1149,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "List[int]"
                ],
                "search": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_instance_convertor_lookup_result": {
            "name": "test_instance_convertor_lookup_result",
            "location": 1180,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "List[int]"
                ],
                "search": [
                    "str",
                    "dict",
                    "int",
                    "Optional[str]",
                    "MutableMapping"
                ],
                "expected": [
                    "List[str]"
                ]
            }
        },
        "test_subclass_api": {
            "name": "test_subclass_api",
            "location": 1289,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 1309,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_before_attach.check_in_storage": {
            "name": "check_in_storage",
            "location": 144,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_add_after_attach.check_in_storage": {
            "name": "check_in_storage",
            "location": 166,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_set_before_attach.check_in_storage": {
            "name": "check_in_storage",
            "location": 191,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_set_after_attach.check_in_storage": {
            "name": "check_in_storage",
            "location": 212,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_remove_after_attach.check_in_storage": {
            "name": "check_in_storage",
            "location": 255,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_listener.call_me_back": {
            "name": "call_me_back",
            "location": 351,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_listeners.call_me_back1": {
            "name": "call_me_back1",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "dict",
                    "str",
                    "Tuple[Type]",
                    "Type"
                ]
            }
        },
        "test_multiple_listeners.call_me_back2": {
            "name": "call_me_back2",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "List[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_multiple_listeners.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 537,
            "return": [],
            "arguments": {
                "member": [],
                "added": [],
                "cls": [],
                "result_cls": []
            }
        },
        "test_multiple_listeners.check_not_called": {
            "name": "check_not_called",
            "location": 551,
            "return": [],
            "arguments": {}
        },
        "test_multiple_results.call_me_back": {
            "name": "call_me_back",
            "location": 610,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_results.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 622,
            "return": [],
            "arguments": {
                "member": [],
                "added": [],
                "cls": [],
                "result_cls": []
            }
        },
        "test_multiple_results.check_not_called": {
            "name": "check_not_called",
            "location": 633,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modify_lookup_from_listener.call_me_back": {
            "name": "call_me_back",
            "location": 699,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_del_result_clear_listener.call_me_back": {
            "name": "call_me_back",
            "location": 711,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_listener_with_executor.call_me_back": {
            "name": "call_me_back",
            "location": 747,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_results_with_executor.call_me_back": {
            "name": "call_me_back",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "dict"
                ]
            }
        },
        "test_multiple_results_with_executor.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 867,
            "return": [
                ""
            ],
            "arguments": {
                "member": [
                    "int",
                    "bool",
                    "List[List]",
                    "Dict[str, Any]"
                ],
                "added": [
                    "bool",
                    "dict",
                    "str",
                    "list"
                ],
                "cls": [
                    "Type",
                    "str",
                    "Sequence[Any]",
                    "List[str]",
                    "Optional[Callable[[Type, Dict], Any]]"
                ],
                "result_cls": [
                    "Optional[int]",
                    "Callable",
                    "bool",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "MyConvertor.__init__": {
            "name": "__init__",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MyConvertor.reset": {
            "name": "reset",
            "location": 952,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyConvertor.convert": {
            "name": "convert",
            "location": 957,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "MyConvertor.type": {
            "name": "type",
            "location": 962,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "MyConvertor.id": {
            "name": "id",
            "location": 967,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "MyConvertor.display_name": {
            "name": "display_name",
            "location": 970,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Container[str]",
                    "bool",
                    "Union[List, Dict]"
                ]
            }
        },
        "KeyObject.__repr__": {
            "name": "__repr__",
            "location": 976,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrapObject.__init__": {
            "name": "__init__",
            "location": 982,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "o": [
                    "float",
                    "int"
                ]
            }
        },
        "WrapObject.__hash__": {
            "name": "__hash__",
            "location": 985,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrapObject.__eq__": {
            "name": "__eq__",
            "location": 988,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "WrapObject.__repr__": {
            "name": "__repr__",
            "location": 991,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_convertor_add.check_in_storage": {
            "name": "check_in_storage",
            "location": 1035,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_convertor_set.check_in_storage": {
            "name": "check_in_storage",
            "location": 1059,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_convertor_remove.check_in_storage": {
            "name": "check_in_storage",
            "location": 1088,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "float",
                    "str"
                ]
            }
        },
        "test_instance_convertor_lookup_item.clear_cache": {
            "name": "clear_cache",
            "location": 1121,
            "return": [],
            "arguments": {}
        },
        "test_instance_convertor_lookup_all.clear_cache": {
            "name": "clear_cache",
            "location": 1150,
            "return": [],
            "arguments": {}
        },
        "test_instance_convertor_lookup_result.clear_cache": {
            "name": "clear_cache",
            "location": 1181,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instance_convertor_lookup_result.swap_object_cls": {
            "name": "swap_object_cls",
            "location": 1187,
            "return": [
                "bool",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union[int, float]",
                    "Type[\"SerializationDialect\"]"
                ]
            }
        },
        "MyLookup.__init__": {
            "name": "__init__",
            "location": 1277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyLookup._initialise": {
            "name": "_initialise",
            "location": 1282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyLookup._before_lookup": {
            "name": "_before_lookup",
            "location": 1285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "test_bound_method_listener.ToCall.call_me_back": {
            "name": "call_me_back",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Dict[str, Any]",
                    "tuple",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ]
            }
        }
    },
    "lookups-master/tests/test_imports.py": {
        "list_packages_in_folder": {
            "name": "list_packages_in_folder",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "root_package_folder": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[Dict]",
                    "None",
                    "dict[, ]",
                    "Optional[bytes]"
                ],
                "ignores": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "relative_path": {
            "name": "relative_path",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "base_filepath": [
                    "str"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ]
            }
        },
        "list_packages_in_folder.convert_folder_to_package": {
            "name": "convert_folder_to_package",
            "location": 24,
            "return": [
                "str",
                "int",
                "bytes",
                "float",
                "list"
            ],
            "arguments": {
                "foldername": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "lookups-master/tests/test_lookup_default.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 42,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_default_lookup": {
            "name": "test_default_lookup",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str"
                ]
            }
        },
        "test_default_lookup_lookup_provider": {
            "name": "test_default_lookup_lookup_provider",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str"
                ]
            }
        },
        "test_default_lookup_provider": {
            "name": "test_default_lookup_provider",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str"
                ]
            }
        },
        "test_default_no_lookup": {
            "name": "test_default_no_lookup",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_default_empty_entry_point_group": {
            "name": "test_default_empty_entry_point_group",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str"
                ]
            }
        },
        "DefaultLookup.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaulLookupProvider.get_lookup": {
            "name": "get_lookup",
            "location": 27,
            "return": [
                "SingletonLookup",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultLookupLookupProvider.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultLookupLookupProvider.get_lookup": {
            "name": "get_lookup",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/tests/test_proxy_lookup.py": {
        "setup_lookups": {
            "name": "setup_lookups",
            "location": 21,
            "return": [
                "List[str]",
                "bytes",
                "BinaryIO",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "list",
                    "List[\"Issue\"]",
                    "int"
                ],
                "all_instances": [
                    "str",
                    "Match",
                    "Union[str]",
                    "int"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 41,
            "return": [
                "int",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "expected": [
                    "type",
                    "Optional[Callable]",
                    "Mapping[str, Any]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "item": [
                    "dict",
                    "bool",
                    "Tuple[str, str]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "check_result": {
            "name": "check_result",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "List[str]",
                    "str"
                ],
                "result": [
                    "list",
                    "tuple",
                    "List[str]",
                    "Sequence[Dict]"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_result_already_exist": {
            "name": "test_lookup_result_already_exist",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_listener": {
            "name": "check_listener",
            "location": 318,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Callable[..., None]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "content1": [
                    "set",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "lookup1": [
                    "bool",
                    "Optional[str]"
                ],
                "content2": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Dict]",
                    "List[str]"
                ],
                "lookup2": [
                    "str",
                    "Optional[Callable[..., Any]]",
                    "bool"
                ],
                "proxy_lookup": [
                    "str",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "List[Tuple[int, int]]",
                    "float"
                ],
                "result": [
                    "str",
                    "list",
                    "Union[str, List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_listener": {
            "name": "test_listener",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bound_method_listener": {
            "name": "test_bound_method_listener",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_listeners": {
            "name": "test_multiple_listeners",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_results": {
            "name": "test_multiple_results",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modify_lookup_from_listener": {
            "name": "test_modify_lookup_from_listener",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_del_result_clear_listener": {
            "name": "test_del_result_clear_listener",
            "location": 720,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_listener.check_add_remove": {
            "name": "check_add_remove",
            "location": 326,
            "return": [],
            "arguments": {
                "members1": [],
                "members2": [],
                "expected": []
            }
        },
        "check_listener.check_presence": {
            "name": "check_presence",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "present": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "not_present": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_listener.call_me_back": {
            "name": "call_me_back",
            "location": 457,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_listeners.call_me_back1": {
            "name": "call_me_back1",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "type",
                    "Tuple[Type]",
                    "Dict[str, Any]",
                    "Type",
                    "Optional[Any]"
                ]
            }
        },
        "test_multiple_listeners.call_me_back2": {
            "name": "call_me_back2",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "List[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_multiple_listeners.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 527,
            "return": [],
            "arguments": {
                "member": [],
                "added": [],
                "cls": [],
                "result_cls": []
            }
        },
        "test_multiple_listeners.check_add_remove": {
            "name": "check_add_remove",
            "location": 541,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "test_multiple_listeners.check_not_called": {
            "name": "check_not_called",
            "location": 562,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "test_multiple_results.call_me_back": {
            "name": "call_me_back",
            "location": 610,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_multiple_results.check_for_a_class": {
            "name": "check_for_a_class",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "member": [
                    "int",
                    "bool",
                    "List[List]",
                    "Dict[str, Any]"
                ],
                "added": [
                    "bool",
                    "dict",
                    "str",
                    "list"
                ],
                "cls": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]"
                ],
                "result_cls": [
                    "Optional[int]",
                    "Callable",
                    "bool",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "test_multiple_results.check_add_remove": {
            "name": "check_add_remove",
            "location": 633,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_multiple_results.check_not_called": {
            "name": "check_not_called",
            "location": 660,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_modify_lookup_from_listener.call_me_back": {
            "name": "call_me_back",
            "location": 712,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_del_result_clear_listener.call_me_back": {
            "name": "call_me_back",
            "location": 729,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "Callable",
                    "Dict[str, Any]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "check_listener.check_add_remove.check_add": {
            "name": "check_add",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "content": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "check_listener.check_add_remove.check_remove": {
            "name": "check_remove",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "members": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_bound_method_listener.ToCall.call_me_back": {
            "name": "call_me_back",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "lookups-master/tests/test_singleton_lookup.py": {
        "check_all_instances": {
            "name": "check_all_instances",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "all_instances": [
                    "Type",
                    "str",
                    "typing.Type",
                    "bool",
                    "Tuple[float, float, float]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "check_item": {
            "name": "check_item",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "dict",
                    "dict[, ]",
                    "Callable[[], T]",
                    "typing.Callable[[], T]"
                ],
                "id_": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "item": [
                    "str",
                    "Optional[str]",
                    "None",
                    "typing.Generator[]",
                    "Generator",
                    "Optional[T]"
                ]
            }
        },
        "test_instantiation": {
            "name": "test_instantiation",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "id_": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "search": [
                    "str",
                    "Pattern[str]",
                    "int",
                    "typing.Pattern",
                    "List[List[float]]",
                    "list[list[float]]"
                ]
            }
        },
        "test_lookup_item": {
            "name": "test_lookup_item",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "id_": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "search": [
                    "str",
                    "int",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "test_lookup_all": {
            "name": "test_lookup_all",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "Iterable[str]",
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ],
                "id_": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "search": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_lookup_result": {
            "name": "test_lookup_result",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None",
                    "Union[str, Iterable[str]]"
                ],
                "id_": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "search": [
                    "AbstractSet[str]",
                    "str",
                    "typing.AbstractSet",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "test_listeners": {
            "name": "test_listeners",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id_": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "search": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_listeners.call_me_back": {
            "name": "call_me_back",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "lookups-master/tests/tools.py": {
        "TestParentObject.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOtherObject.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lookups-master/tests/__init__.py": {}
}
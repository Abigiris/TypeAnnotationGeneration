{
    "lucyfer-master/lucyfer/settings.py": {
        "reload_lucyfer_settings": {
            "name": "reload_lucyfer_settings",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LucyferSettings.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_settings": [
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "int",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "defaults": [
                    "Dict[str, Optional[str]]",
                    "None",
                    "str",
                    "Callable[[str], None]",
                    "dict[str, typing.Union[str,None]]",
                    "typing.Callable[str, None]",
                    "Optional[str]"
                ]
            }
        },
        "LucyferSettings.user_settings": {
            "name": "user_settings",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LucyferSettings.__getattr__": {
            "name": "__getattr__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "bool",
                    "collections.abc.Awaitable[typing.Any]",
                    "\"SignedBlindedBalanceProof\"",
                    "\"NameComplex\"",
                    "Awaitable[Any]"
                ]
            }
        },
        "LucyferSettings.reload": {
            "name": "reload",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/lucyfer/utils.py": {},
    "lucyfer-master/lucyfer/__init__.py": {},
    "lucyfer-master/lucyfer/backend/base.py": {
        "LuceneSearchFilter.get_base_search_terms": {
            "name": "get_base_search_terms",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LuceneSearchFilter.get_searchset_class": {
            "name": "get_searchset_class",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "request": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[dict]",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/backend/django.py": {
        "DjangoLuceneSearchFilterMixin.filter_queryset": {
            "name": "filter_queryset",
            "location": 8,
            "return": [
                "int",
                "float",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": [
                    "int"
                ],
                "view": [
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DjangoLuceneSearchFilterMixin.lucene_filter_queyset": {
            "name": "lucene_filter_queyset",
            "location": 30,
            "return": [
                "None",
                "Callable",
                "Pattern",
                "bool"
            ],
            "arguments": {
                "self": [],
                "searchset_class": [
                    "None",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[T]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]"
                ],
                "search_terms": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "queryset": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "DjangoLuceneSearchFilterMixin.custom_filter_queryset": {
            "name": "custom_filter_queryset",
            "location": 38,
            "return": [
                "bool",
                "bytes",
                "str",
                "int",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ],
                "queryset": [
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DjangoLuceneSearchFilterMixin._use_distinct": {
            "name": "_use_distinct",
            "location": 41,
            "return": [
                "str",
                "int",
                "bool",
                "None",
                "Sequence[str]",
                "typing.Type",
                "List[str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "searchset_class": [
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "bool",
                    "dict"
                ],
                "queryset": [
                    "bool",
                    "None",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "list[cmk.gui.plugins.visuals.utils.Filter]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Optional[str]",
                    "int",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ],
                "filtered_queryset": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "bool",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/backend/elastic.py": {
        "ElasticLuceneSearchFilterMixin.get_schema_fields": {
            "name": "get_schema_fields",
            "location": 4,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "tuple[]",
                    "int",
                    "tuple",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElasticLuceneSearchFilterMixin.filter_search": {
            "name": "filter_search",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "search": [
                    "int"
                ],
                "view": [
                    "bytes"
                ]
            }
        },
        "ElasticLuceneSearchFilterMixin.lucene_filter_search": {
            "name": "lucene_filter_search",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "searchset_class": [
                    "None",
                    "bool",
                    "Hashable",
                    "Optional[int]",
                    "str"
                ],
                "search_terms": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "search": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "ElasticLuceneSearchFilterMixin.custom_filter_search": {
            "name": "custom_filter_search",
            "location": 33,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "bool"
                ],
                "search": [
                    "str",
                    "Sequence[str]",
                    "cmk.utils.type_defs.TagGroups",
                    "Optional[List]"
                ],
                "view": [
                    "str",
                    "int",
                    "bool"
                ],
                "search_terms": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "cmk.utils.type_defs.TagGroups",
                    "list[]",
                    "Optional[List]",
                    "None"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/backend/__init__.py": {},
    "lucyfer-master/lucyfer/parser/base.py": {
        "BaseLuceneParserMixin.parse": {
            "name": "parse",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.ContextType"
                ],
                "raw_expression": [
                    "str"
                ]
            }
        },
        "BaseLuceneParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "tree": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BaseLuceneParserMixin.get_saved_search": {
            "name": "get_saved_search",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[str]",
                    "list[str]"
                ],
                "tree": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BaseLuceneParserMixin._get_tree_from_raw_expression": {
            "name": "_get_tree_from_raw_expression",
            "location": 43,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "raw_expression": [
                    "str",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/parser/django.py": {
        "LuceneToDjangoParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "Q",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "alerta.database.base.Query",
                    "Dict[Tuple[int, int], str]",
                    "id3c.db.session.DatabaseSession"
                ],
                "tree": [
                    "int",
                    "magic.models.Card"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/parser/elastic.py": {
        "LuceneToElasticParserMixin._parse_tree": {
            "name": "_parse_tree",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[int]",
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "alerta.database.base.Query",
                    "Type"
                ],
                "tree": [
                    "int"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/parser/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/base.py": {
        "BaseSearchSetMetaClass.__new__": {
            "name": "__new__",
            "location": 27,
            "return": [
                "str",
                "dict[, ]",
                "int",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "name": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[..., Awaitable[None]]",
                    "typing.Callable[..., collections.abc.Awaitable[None]]"
                ],
                "bases": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "attrs": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BaseSearchSetMetaClass.process_required_field": {
            "name": "process_required_field",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "searchset": [
                    "int",
                    "Union[int, slice]",
                    "dict[, ]",
                    "dict",
                    "raiden.utils.Any"
                ],
                "bases": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[int, int]]"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_meta": {
            "name": "get_meta",
            "location": 54,
            "return": [
                "Type[BaseMetaClass]"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "meta": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_storage": {
            "name": "get_storage",
            "location": 65,
            "return": [
                "lucyfer.searchset.storage.SearchSetStorage"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "searchset": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "meta": [
                    "int",
                    "dict[, ]",
                    "str",
                    "Optional[Dict]",
                    "None",
                    "raiden.utils.BlockNumber",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "attrs": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str",
                    "Optional[List[str]]",
                    "None"
                ],
                "bases": [
                    "str",
                    "bool",
                    "int",
                    "django.db.models.Model",
                    "Optional[str]"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_field_name_to_field": {
            "name": "get_field_name_to_field",
            "location": 112,
            "return": [
                "Dict[(str, lucyfer.searchset.fields.base.BaseSearchField)]"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "base_field_class": [
                    "Type[lucyfer.searchset.fields.base.BaseSearchField]"
                ],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaseSearchSetMetaClass.validate_field_name_to_field": {
            "name": "validate_field_name_to_field",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "field_name_to_field": [
                    "Dict[(str, lucyfer.searchset.fields.base.BaseSearchField)]"
                ],
                "searchset_name": [
                    "str"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_fields_to_exclude_from_mapping": {
            "name": "get_fields_to_exclude_from_mapping",
            "location": 135,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "searchset_fields_to_exclude_from_mapping": [
                    "List[str]"
                ],
                "field_name_to_field": [
                    "Dict[(str, lucyfer.searchset.fields.base.BaseSearchField)]"
                ]
            }
        },
        "BaseSearchSetMetaClass.get_fields_to_exclude_from_suggestions": {
            "name": "get_fields_to_exclude_from_suggestions",
            "location": 144,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "mcs": [
                    "Type[BaseSearchSetMetaClass]"
                ],
                "searchset_fields_to_exclude_from_suggestions": [
                    "List[str]"
                ],
                "field_name_to_field": [
                    "Dict[(str, lucyfer.searchset.fields.base.BaseSearchField)]"
                ]
            }
        },
        "BaseSearchSet.storage": {
            "name": "storage",
            "location": 169,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "BaseSearchSet.get_fields_values": {
            "name": "get_fields_values",
            "location": 173,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "Tuple[Dict, int]",
                    "str",
                    "Optional[Callable]"
                ],
                "qs": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "field_name": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "cache_key": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "max_return_suggestions_count": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "allow_empty_values": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "sort_values": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 213,
            "return": [
                "Dict[(str, lucyfer.searchset.utils.FieldType)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BaseSearchSet.get_query_for_field": {
            "name": "get_query_for_field",
            "location": 220,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "condition": [
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/django.py": {
        "DjangoSearchSet.filter": {
            "name": "filter",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "queryset": [
                    "str",
                    "Optional[str]",
                    "Type[T]"
                ],
                "search_terms": [
                    "str",
                    "bool"
                ],
                "raise_exception": [
                    "bool",
                    "int",
                    "List[Dict[str, str]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DjangoSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 50,
            "return": [
                "Dict[(str, lucyfer.searchset.utils.FieldType)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "typing.Type",
                    "Iterable",
                    "typing.Iterable[]",
                    "Optional[Iterable]",
                    "None"
                ]
            }
        },
        "DjangoSearchSet.get_fields_sources": {
            "name": "get_fields_sources",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "IO[bytes]",
                    "typing.IO",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/elastic.py": {
        "ElasticSearchSet.get_es_client": {
            "name": "get_es_client",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Iterable",
                    "List[Dict]"
                ]
            }
        },
        "ElasticSearchSet.filter": {
            "name": "filter",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "search": [
                    "Callable[[], T]"
                ],
                "search_terms": [
                    "str",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "raise_exception": [
                    "bool",
                    "list",
                    "Optional[Iterable[str]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElasticSearchSet._format_mapping_values": {
            "name": "_format_mapping_values",
            "location": 47,
            "return": [
                "Dict[(str, lucyfer.searchset.utils.FieldType)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "qcodes.utils.metadata.Metadatable",
                    "Dict[str, Dict[str, str]]"
                ],
                "mapping": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "qcodes.utils.metadata.Metadatable",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 62,
            "return": [
                "Dict[(str, lucyfer.searchset.utils.FieldType)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/storage.py": {
        "SearchSetStorage.mapping": {
            "name": "mapping",
            "location": 28,
            "return": [
                "dict[, ]",
                "str",
                "List[str]",
                "Set[str]",
                "Iterable[str]",
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchSetStorage.raw_mapping": {
            "name": "raw_mapping",
            "location": 40,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchSetStorage.field_source_to_field": {
            "name": "field_source_to_field",
            "location": 50,
            "return": [
                "str",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/utils.py": {},
    "lucyfer-master/lucyfer/searchset/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/fields/base.py": {
        "negate_query_if_necessary": {
            "name": "negate_query_if_necessary",
            "location": 88,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "str",
                    "dict",
                    "Iterable[T]",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "BaseSearchField.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "Optional[List[str]]"
                ],
                "exclude_sources_from_mapping": [
                    "bool"
                ],
                "show_suggestions": [
                    "bool"
                ],
                "get_available_values_method": [
                    "Optional[Callable[(..., list)]]"
                ],
                "available_values_method_kwargs": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "use_field_class_for_sources": [
                    "bool"
                ],
                "use_cache_for_suggestions": [
                    "bool"
                ]
            }
        },
        "BaseSearchField._contribute_to_class": {
            "name": "_contribute_to_class",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseSearchField.cast_value": {
            "name": "cast_value",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BaseSearchField.get_lookup": {
            "name": "get_lookup",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "BaseSearchField.get_sources": {
            "name": "get_sources",
            "location": 64,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        },
        "BaseSearchField.get_query": {
            "name": "get_query",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "BaseSearchField.match_all": {
            "name": "match_all",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseSearchField.get_available_values_method": {
            "name": "get_available_values_method",
            "location": 84,
            "return": [
                "Optional[Callable[(..., list)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "negate_query_if_necessary.wrapper": {
            "name": "wrapper",
            "location": 92,
            "return": [
                "bool",
                "base.ConfigOptions",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/django.py": {
        "DjangoSearchFieldWithoutWildcard.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 15,
            "return": [
                "int",
                "Q",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List['PydanticModelField']",
                "BaseException",
                "Dict[str, Union[str, Any]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type[T]",
                    "typing.Type",
                    "Dict[str, Dict[int, ue.base.UEBase]]",
                    "dict[str, dict[int, ue.base.UEBase]]"
                ]
            }
        },
        "DjangoSearchFieldWithoutWildcard.get_query": {
            "name": "get_query",
            "location": 26,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "str",
                "Optional[Dict]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "dict[, ]",
                    "dict",
                    "list[dict[, ]]",
                    "List[dict]",
                    "dict[str, typing.Any]",
                    "raiden.utils.Any",
                    "Dict[str, Any]"
                ]
            }
        },
        "DjangoWildcardMixin.process_wildcard": {
            "name": "process_wildcard",
            "location": 36,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoSearchField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 50,
            "return": [
                "None",
                "int",
                "bool",
                "Q",
                "float",
                "deeplearning.ml4pl.models.log_database.Database",
                "Optional['User']",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "DjangoIntegerField.cast_value": {
            "name": "cast_value",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoFloatField.cast_value": {
            "name": "cast_value",
            "location": 97,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DjangoBooleanField.cast_value": {
            "name": "cast_value",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/elastic.py": {
        "ElasticSearchField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 27,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ElasticSearchField._get_query_for_term": {
            "name": "_get_query_for_term",
            "location": 39,
            "return": [
                "int",
                "Q",
                "bool",
                "None",
                "list",
                "str",
                "wtforms.fields.core.Field",
                "dict",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]"
                ]
            }
        },
        "ElasticSearchField._get_query_for_range": {
            "name": "_get_query_for_range",
            "location": 51,
            "return": [
                "Range",
                "None",
                "dict",
                "list",
                "str",
                "Iterable[Tuple[str, str]]",
                "Set[str]",
                "django.db.models.query.QuerySet",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ElasticSearchField._get_query_for_regex": {
            "name": "_get_query_for_regex",
            "location": 60,
            "return": [
                "int",
                "Q",
                "bool",
                "None",
                "list",
                "str",
                "wtforms.fields.core.Field",
                "dict",
                "NamedTuple"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "lookup": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ElasticSearchField._get_wildcard_or_lookup": {
            "name": "_get_wildcard_or_lookup",
            "location": 70,
            "return": [
                "Tuple[(Any, Union[(str, _T1)])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "lookup": [
                    "_T1"
                ]
            }
        },
        "ElasticSearchField.get_query": {
            "name": "get_query",
            "location": 76,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Dict[str, bool]",
                    "dict[str, bool]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ElasticSearchFieldWithoutWildCard._get_wildcard_or_lookup": {
            "name": "_get_wildcard_or_lookup",
            "location": 81,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "lookup": [
                    "_T1"
                ]
            }
        },
        "ElasticIntegerField.cast_value": {
            "name": "cast_value",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "ElasticFloatField.cast_value": {
            "name": "cast_value",
            "location": 94,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ElasticBooleanField.create_query_for_sources": {
            "name": "create_query_for_sources",
            "location": 112,
            "return": [
                "None",
                "str",
                "lightbus.transports.base.RpcMessage",
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "Type[T]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[int, ue.base.UEBase]]",
                    "dict[str, dict[int, ue.base.UEBase]]"
                ]
            }
        },
        "ElasticBooleanField.cast_value": {
            "name": "cast_value",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "ElasticQueryStringField.get_query": {
            "name": "get_query",
            "location": 141,
            "return": [
                "Q",
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "float",
                    "bool",
                    "typing.Iterable[dict[, ]]",
                    "Iterable[dict]",
                    "raiden.utils.Any"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/__init__.py": {},
    "lucyfer-master/lucyfer/searchset/fields/mapping/base.py": {
        "MappingMixin.get_values": {
            "name": "get_values",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "model_name": [
                    "str"
                ],
                "escape_quotes_in_suggestions": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "cache_key": [
                    "str"
                ],
                "max_return_suggestions_count": [
                    "int"
                ],
                "allow_empty_values": [
                    "bool"
                ],
                "sort_values": [
                    "bool"
                ]
            }
        },
        "MappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "raiden.utils.Callable"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "MappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "typing.Mapping",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "MappingMixin._get_values": {
            "name": "_get_values",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "prefix": [
                    "str"
                ],
                "escape_quotes_in_suggestions": [
                    "bool"
                ],
                "allow_empty_values": [
                    "bool"
                ]
            }
        },
        "MappingMixin._is_prefix_may_be_cached": {
            "name": "_is_prefix_may_be_cached",
            "location": 87,
            "return": [
                "bool",
                "dict",
                "str",
                "preacher.core.value.RelativeDatetime",
                "Iterable[int]",
                "Optional[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Callable[[str], str]",
                    "AbstractSet[str]",
                    "bool",
                    "Type"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/django.py": {
        "DjangoMappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 9,
            "return": [
                "list[]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "type",
                    "str",
                    "typing.Type"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "DjangoMappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/elastic.py": {
        "ElasticMappingMixin.prepare_qs_for_suggestions": {
            "name": "prepare_qs_for_suggestions",
            "location": 10,
            "return": [
                "str",
                "float",
                "bytes",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "int"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "ElasticMappingMixin.get_suggestions_from_prepared_qs": {
            "name": "get_suggestions_from_prepared_qs",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Exception",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/utils.py": {
        "escape_quotes": {
            "name": "escape_quotes",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        },
        "ignore_empty_values": {
            "name": "ignore_empty_values",
            "location": 14,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        },
        "custom_sorted": {
            "name": "custom_sorted",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        }
    },
    "lucyfer-master/lucyfer/searchset/fields/mapping/__init__.py": {},
    "lucyfer-master/setup/setup.py": {
        "LucyferSetup.setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup.lib": {
            "name": "lib",
            "location": 13,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup.version": {
            "name": "version",
            "location": 17,
            "return": [
                "str",
                "Callable[[], bool]",
                "int",
                "Optional[int]",
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup._get_kwargs": {
            "name": "_get_kwargs",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LucyferSetup._get_package_dir": {
            "name": "_get_package_dir",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LucyferSetup._get_requirements": {
            "name": "_get_requirements",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "lucyfer-master/setup/__init__.py": {},
    "lucyfer-master/tests/base.py": {
        "TestParsing._check_rule": {
            "name": "_check_rule",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "list",
                    "list[]"
                ],
                "expected_query": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TestParsing._check_rules": {
            "name": "_check_rules",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "expected_query": [
                    "int",
                    "Protocol",
                    "typing.Protocol",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "lucyfer-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "lucyfer-master/tests/settings.py": {},
    "lucyfer-master/tests/test_django.py": {
        "UnicornSearchSet.raw_mapping": {
            "name": "raw_mapping",
            "location": 19,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLuceneToDjangoParsing.assertQueriesEqual": {
            "name": "assertQueriesEqual",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q1": [
                    "float",
                    "str",
                    "int",
                    "zam_repondeur.models.phase.Phase"
                ],
                "q2": [
                    "float",
                    "str",
                    "int",
                    "zam_repondeur.models.phase.Phase"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_bool_values": {
            "name": "test_bool_values",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_integer_values": {
            "name": "test_integer_values",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_float_values": {
            "name": "test_float_values",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_string_wo_quotes": {
            "name": "test_string_wo_quotes",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ],
                "raw_expressions": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_string_w_double_quotes": {
            "name": "test_string_w_double_quotes",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ],
                "raw_expressions": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_string_w_single_quotes": {
            "name": "test_string_w_single_quotes",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ],
                "raw_expressions": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_rules_with_or_expression": {
            "name": "test_rules_with_or_expression",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_rules_with_and_expression": {
            "name": "test_rules_with_and_expression",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_several_dashes_rules": {
            "name": "test_several_dashes_rules",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_rule_with_source": {
            "name": "test_rule_with_source",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_negate_values": {
            "name": "test_negate_values",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_undefined_values": {
            "name": "test_undefined_values",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_autogenerated_fields_query": {
            "name": "test_autogenerated_fields_query",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_regex_query": {
            "name": "test_regex_query",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/tests/test_elastic.py": {
        "MyElasticSearchSet.get_es_client": {
            "name": "get_es_client",
            "location": 23,
            "return": [
                "Type[tests.utils.EsClient]"
            ],
            "arguments": {}
        },
        "TestLuceneToDjangoParsing.assertQueriesEqual": {
            "name": "assertQueriesEqual",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q1": [
                    "str",
                    "Union[int, float, complex]",
                    "OrderedDict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Callable[[str], T]"
                ],
                "q2": [
                    "str",
                    "Union[int, float, complex]",
                    "OrderedDict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Callable[[str], T]"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_text_values": {
            "name": "test_text_values",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_values_with_source": {
            "name": "test_values_with_source",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_negate_values": {
            "name": "test_negate_values",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_boolean_values": {
            "name": "test_boolean_values",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_null_boolean_values": {
            "name": "test_null_boolean_values",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        },
        "TestLuceneToDjangoParsing.test_regexp_query": {
            "name": "test_regexp_query",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_query": [
                    "str"
                ],
                "raw_expressions": [
                    "str"
                ]
            }
        }
    },
    "lucyfer-master/tests/test_metaclass.py": {
        "TestSearchSetMetaClass.test_metaclass_field": {
            "name": "test_metaclass_field",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_additional_meta_fields": {
            "name": "test_additional_meta_fields",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_default_fields_classa": {
            "name": "test_default_fields_classa",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchSetMetaClass.test_searchsets_mixins": {
            "name": "test_searchsets_mixins",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lucyfer-master/tests/test_storage.py": {
        "UnicornSearchSet.raw_mapping": {
            "name": "raw_mapping",
            "location": 18,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_field_name_to_field": {
            "name": "test_field_name_to_field",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_mapping": {
            "name": "test_fields_to_exclude_from_mapping",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_suggestions": {
            "name": "test_fields_to_exclude_from_suggestions",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_searchset_field": {
            "name": "test_searchset_field",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_raw_mapping": {
            "name": "test_raw_mapping",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_field_source_to_field": {
            "name": "test_field_source_to_field",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_get_fields_sources": {
            "name": "test_get_fields_sources",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_show_suggestion_for_raw_mapping_field": {
            "name": "test_show_suggestion_for_raw_mapping_field",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_not_excluding_any_fields": {
            "name": "test_not_excluding_any_fields",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_exclude_fields_in_searchset_class": {
            "name": "test_exclude_fields_in_searchset_class",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_exclude_sources_in_field": {
            "name": "test_exclude_sources_in_field",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_fields_values": {
            "name": "test_get_fields_values",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_show_suggestions": {
            "name": "test_show_suggestions",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_available_values": {
            "name": "test_get_available_values",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_escape_quotes": {
            "name": "test_escape_quotes",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchHelpers.test_get_available_values.expected_available_values": {
            "name": "expected_available_values",
            "location": 273,
            "return": [
                "list[typing.Text]",
                "dict",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "TestStorage.test_fields_to_exclude_from_mapping.SearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 46,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_fields_to_exclude_from_suggestions.SearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 68,
            "return": [
                "dict[, ]",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "TestStorage.test_raw_mapping.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_field_source_to_field.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_get_fields_sources.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_show_suggestion_for_raw_mapping_field.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TestStorage.test_not_excluding_any_fields.NotExcludingFieldsSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 171,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "TestStorage.test_exclude_fields_in_searchset_class.ExcludeFieldsInClassSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 185,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "TestStorage.test_exclude_sources_in_field.ExcludeSourcesInFieldsSearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 200,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "TestSearchHelpers.test_get_fields_values.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 217,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_show_suggestions.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 238,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_show_suggestions.SearchSet._get_raw_mapping": {
            "name": "_get_raw_mapping",
            "location": 260,
            "return": [
                "str",
                "type",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "TestSearchHelpers.test_get_available_values.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 281,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSearchHelpers.test_escape_quotes.MySearchSet.get_raw_mapping": {
            "name": "get_raw_mapping",
            "location": 312,
            "return": [
                "dict[, ]",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        }
    },
    "lucyfer-master/tests/utils.py": {
        "compare_dicts": {
            "name": "compare_dicts",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "d1": [
                    "Tuple[int, int, int]",
                    "int",
                    "str"
                ],
                "d2": [
                    "int",
                    "dict"
                ]
            }
        },
        "dict_merge": {
            "name": "dict_merge",
            "location": 44,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "dct": [
                    "dict",
                    "Dict[str, float]",
                    "str"
                ],
                "merge_dct": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DjangoModel.distinct": {
            "name": "distinct",
            "location": 82,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Indicies.get_mapping": {
            "name": "get_mapping",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ElasticModel._get_index": {
            "name": "_get_index",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "EmptyDjangoModel.objects.filter": {
            "name": "filter",
            "location": 68,
            "return": [
                "Type[EmptyDjangoModel.objects]"
            ],
            "arguments": {
                "cls": [
                    "Type[EmptyDjangoModel.objects]"
                ]
            }
        },
        "EmptyDjangoModel.objects.values_list": {
            "name": "values_list",
            "location": 72,
            "return": [
                "Type[EmptyDjangoModel.objects]"
            ],
            "arguments": {
                "cls": [
                    "Type[EmptyDjangoModel.objects]"
                ]
            }
        },
        "EmptyDjangoModel.objects.distinct": {
            "name": "distinct",
            "location": 76,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [
                    "Type[EmptyDjangoModel.objects]"
                ]
            }
        }
    },
    "lucyfer-master/tests/__init__.py": {}
}
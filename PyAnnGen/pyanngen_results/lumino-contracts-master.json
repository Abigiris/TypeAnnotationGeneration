{
    "lumino-contracts-master/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 18,
            "return": [
                "bool",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_single_requirement": {
            "name": "_get_single_requirement",
            "location": 24,
            "return": [
                "list[typing.Text]",
                "bool",
                "int",
                "Optional[dict]",
                "list",
                "Optional[T]",
                "Sequence[Any]"
            ],
            "arguments": {
                "requirements": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "package": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BuildPyCommand.run": {
            "name": "run",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyContracts.initialize_options": {
            "name": "initialize_options",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyContracts.finalize_options": {
            "name": "finalize_options",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyContracts.run": {
            "name": "run",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileContracts.initialize_options": {
            "name": "initialize_options",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileContracts.finalize_options": {
            "name": "finalize_options",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileContracts.run": {
            "name": "run",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lumino-contracts-master/lumino_contracts/__init__.py": {},
    "lumino-contracts-master/lumino_contracts/deploy/__init__.py": {},
    "lumino-contracts-master/lumino_contracts/deploy/__main__.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "validate_address": {
            "name": "validate_address",
            "location": 20,
            "return": [
                "None",
                "bool",
                "Optional[int]",
                "str",
                "dict"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Parameter",
                    "tuple[str]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "str",
                    "click.Parameter",
                    "tuple[str]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "collections.abc.Awaitable[]",
                    "Awaitable",
                    "click.Context"
                ]
            }
        },
        "error_removed_option": {
            "name": "error_removed_option",
            "location": 29,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "common_options": {
            "name": "common_options",
            "location": 44,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "lumino": {
            "name": "lumino",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "private_key": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "rpc_provider": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "wait": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "gas_price": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "gas_limit": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "save_info": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "contracts_version": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "max_token_networks": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "token": {
            "name": "token",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "contracts_version": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_supply": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_name": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_decimals": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_symbol": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "contracts_version": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "token_address": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "token_network_registry_address": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ],
                "registry_address": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "click.Context",
                    "Optional[str]"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "private_key": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "rpc_provider": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "wait": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "gas_price": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "gas_limit": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "token_address": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "save_info": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "contracts_version": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ],
                "user_deposit_whole_limit": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "click.Context",
                    "bool"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "rpc_provider": [
                    "bool",
                    "click.Context"
                ],
                "contracts_version": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "error_removed_option.f": {
            "name": "f",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "str"
                ],
                "param": [
                    "click.Parameter",
                    "bool",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "Optional[T]",
                    "Optional[str]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "common_options.wrapper": {
            "name": "wrapper",
            "location": 62,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/constants.py": {},
    "lumino-contracts-master/raiden_contracts/contract_manager.py": {
        "contract_version_string": {
            "name": "contract_version_string",
            "location": 122,
            "return": [
                "str",
                "Union[str, Tuple[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "version": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[Any]",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "contracts_data_path": {
            "name": "contracts_data_path",
            "location": 129,
            "return": [
                "str",
                "List[bytes]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "version": [
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "contracts_precompiled_path": {
            "name": "contracts_precompiled_path",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "contracts_gas_path": {
            "name": "contracts_gas_path",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "contracts_deployed_path": {
            "name": "contracts_deployed_path",
            "location": 148,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "version": [
                    "str",
                    "bytes"
                ],
                "services": [
                    "str"
                ]
            }
        },
        "merge_deployment_data": {
            "name": "merge_deployment_data",
            "location": 158,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "dict1": [
                    "Dict[str, Any]",
                    "raiden.utils.TokenAmount",
                    "int",
                    "raiden.utils.TokenAddress",
                    "utils.projector.ProjectorAllDataProvider"
                ],
                "dict2": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "version_provides_services": {
            "name": "version_provides_services",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "version": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "get_contracts_deployment_info": {
            "name": "get_contracts_deployment_info",
            "location": 193,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "dict",
                    "int"
                ],
                "version": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "dict"
                ],
                "module": [
                    "str",
                    "int"
                ]
            }
        },
        "_load_json_from_path": {
            "name": "_load_json_from_path",
            "location": 244,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, str]"
                ]
            }
        },
        "ContractManager.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "bytes",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "ContractManager.get_contract": {
            "name": "get_contract",
            "location": 79,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "list"
                ]
            }
        },
        "ContractManager.get_contract_abi": {
            "name": "get_contract_abi",
            "location": 89,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ContractManager.get_event_abi": {
            "name": "get_event_abi",
            "location": 94,
            "return": [
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[str]"
                ],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "Union[Sequence[str], Sequence[int]]"
                ]
            }
        },
        "ContractManager.get_constructor_argument_types": {
            "name": "get_constructor_argument_types",
            "location": 103,
            "return": [
                "List[int]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ContractManager.version_string": {
            "name": "version_string",
            "location": 109,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractManager.get_runtime_hexcode": {
            "name": "get_runtime_hexcode",
            "location": 113,
            "return": [
                "str",
                "Optional[Any]",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "get_contracts_deployment_info.module_chosen": {
            "name": "module_chosen",
            "location": 205,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "to_be_added": [
                    "set",
                    "Tuple[int, int]",
                    "list",
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/contract_source_manager.py": {
        "contracts_source_path": {
            "name": "contracts_source_path",
            "location": 147,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "contracts_source_path_of_deployment_module": {
            "name": "contracts_source_path_of_deployment_module",
            "location": 151,
            "return": [
                "str",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "module": [
                    "List[str]",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "contracts_source_path_with_stem": {
            "name": "contracts_source_path_with_stem",
            "location": 160,
            "return": [
                "pathlib.Path",
                "IO[str]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "stem": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "_fix_contract_key_names": {
            "name": "_fix_contract_key_names",
            "location": 170,
            "return": [
                "list",
                "set"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "str",
                    "Type"
                ]
            }
        },
        "ContractSourceManager.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "ContractSourceManager._compile_all_contracts": {
            "name": "_compile_all_contracts",
            "location": 34,
            "return": [
                "bool",
                "Set[str]",
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractSourceManager.compile_contracts": {
            "name": "compile_contracts",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "ContractSourceManager.verify_precompiled_checksums": {
            "name": "verify_precompiled_checksums",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "precompiled_path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "path.Path"
                ]
            }
        },
        "ContractSourceManager.checksum_contracts": {
            "name": "checksum_contracts",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractSourceManager._compile_all_contracts.relativise": {
            "name": "relativise",
            "location": 44,
            "return": [
                "str",
                "pathlib.Path",
                "TextIO"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib2.Path"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.10.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.10.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.10.1/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.10.1/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.11.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.11.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.11.1/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.11.1/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.12.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.12.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.13.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.13.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.8.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.8.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.8.0_unlimited/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.8.0_unlimited/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.9.0/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_0.9.0/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_unlimited/source/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/data_unlimited/source/test/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/deploy/contract_deployer.py": {
        "_deployed_data_from_receipt": {
            "name": "_deployed_data_from_receipt",
            "location": 356,
            "return": [
                "dict[typing.Text, typing.Union[str,list[],dict[, ],float,None]]"
            ],
            "arguments": {
                "receipt": [
                    "list[]",
                    "str"
                ],
                "constructor_arguments": [
                    "list[]",
                    "dict[, ]",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "ContractDeployer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "typing.Sequence[str]",
                    "typing.Type",
                    "None"
                ],
                "private_key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "gas_limit": [
                    "str",
                    "None",
                    "int"
                ],
                "gas_price": [
                    "int"
                ],
                "wait": [
                    "int"
                ],
                "contracts_version": [
                    "None",
                    "str"
                ]
            }
        },
        "ContractDeployer.deploy": {
            "name": "deploy",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "ContractDeployer.transact": {
            "name": "transact",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "contract_method": [
                    "str",
                    "int",
                    "typing.Type",
                    "float",
                    "typing.BinaryIO"
                ]
            }
        },
        "ContractDeployer.send_deployment_transaction": {
            "name": "send_deployment_transaction",
            "location": 103,
            "return": [
                "str",
                "float",
                "list[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "tuple[]",
                    "str",
                    "list[str]",
                    "None",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]"
                ],
                "args": []
            }
        },
        "ContractDeployer.contract_version_string": {
            "name": "contract_version_string",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.deploy_token_contract": {
            "name": "deploy_token_contract",
            "location": 120,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "token_supply": [
                    "int",
                    "str",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "None",
                    "typing.Type"
                ],
                "token_decimals": [
                    "int",
                    "str",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "None",
                    "typing.Type"
                ],
                "token_name": [
                    "int",
                    "str",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "None",
                    "typing.Type"
                ],
                "token_symbol": [
                    "int",
                    "str",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "None",
                    "typing.Type"
                ],
                "token_type": [
                    "typing.Text"
                ]
            }
        },
        "ContractDeployer.deploy_raiden_contracts": {
            "name": "deploy_raiden_contracts",
            "location": 137,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "max_num_of_token_networks": [
                    "list[]",
                    "list[tuple[typing.Union[str,int]]]",
                    "int"
                ]
            }
        },
        "ContractDeployer._deploy_and_remember": {
            "name": "_deploy_and_remember",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "int"
                ],
                "arguments": [
                    "str",
                    "int"
                ],
                "deployed_contracts": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ContractDeployer.register_token_network": {
            "name": "register_token_network",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "token_registry_abi": [],
                "token_registry_address": [],
                "token_address": [],
                "channel_participant_deposit_limit": [],
                "token_network_deposit_limit": []
            }
        },
        "ContractDeployer._register_token_network_without_limits": {
            "name": "_register_token_network_without_limits",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "token_registry_abi": [
                    "int",
                    "list[float]"
                ],
                "token_registry_address": [
                    "int",
                    "list[float]"
                ],
                "token_address": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "channel_participant_deposit_limit": [
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "list[int]",
                    "dict[, ]"
                ],
                "token_network_deposit_limit": [
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "list[int]",
                    "dict[, ]"
                ]
            }
        },
        "ContractDeployer._register_token_network_with_limits": {
            "name": "_register_token_network_with_limits",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "token_registry_abi": [
                    "int",
                    "list[float]"
                ],
                "token_registry_address": [
                    "int",
                    "list[float]"
                ],
                "token_address": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "bytes"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "bytes"
                ]
            }
        },
        "ContractDeployer.deploy_service_contracts": {
            "name": "deploy_service_contracts",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "token_address": [
                    "str",
                    "int"
                ],
                "user_deposit_whole_balance_limit": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/deploy/contract_verifier.py": {
        "_verify_user_deposit_deployment": {
            "name": "_verify_user_deposit_deployment",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit": [
                    "bool"
                ],
                "constructor_arguments": [],
                "token_address": [
                    "str"
                ],
                "user_deposit_whole_balance_limit": [
                    "str",
                    "int",
                    "None"
                ],
                "one_to_n_address": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "bool"
                ],
                "monitoring_service_address": [
                    "str",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "_verify_monitoring_service_deployment": {
            "name": "_verify_monitoring_service_deployment",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "monitoring_service": [
                    "typing.Callable[, ]"
                ],
                "constructor_arguments": [],
                "token_address": [],
                "service_registry_address": [],
                "user_deposit_address": [
                    "int",
                    "str"
                ]
            }
        },
        "_verify_one_to_n_deployment": {
            "name": "_verify_one_to_n_deployment",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "one_to_n": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "constructor_arguments": [],
                "user_deposit_address": [
                    "str",
                    "None",
                    "list[str]",
                    "bool",
                    "dict[str, str]"
                ],
                "chain_id": [
                    "int",
                    "list[str]",
                    "set[str]"
                ]
            }
        },
        "_verify_service_registry_deployment": {
            "name": "_verify_service_registry_deployment",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "service_registry": [
                    "str"
                ],
                "constructor_arguments": [],
                "token_address": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ContractVerifier.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "bool",
                    "None"
                ],
                "contracts_version": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ContractVerifier.verify_deployed_contracts_in_filesystem": {
            "name": "verify_deployed_contracts_in_filesystem",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractVerifier.verify_deployed_service_contracts_in_filesystem": {
            "name": "verify_deployed_service_contracts_in_filesystem",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "int",
                    "list[]"
                ],
                "user_deposit_whole_balance_limit": [
                    "int",
                    "list[]"
                ]
            }
        },
        "ContractVerifier.store_and_verify_deployment_info_raiden": {
            "name": "store_and_verify_deployment_info_raiden",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_contracts_info": [
                    "bool",
                    "typing.Mapping",
                    "typing.Type",
                    "None",
                    "str"
                ]
            }
        },
        "ContractVerifier.store_and_verify_deployment_info_services": {
            "name": "store_and_verify_deployment_info_services",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_contracts_info": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None"
                ],
                "token_address": [
                    "typing.Callable[, ]"
                ],
                "user_deposit_whole_balance_limit": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ContractVerifier._store_deployment_info": {
            "name": "_store_deployment_info",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "str"
                ],
                "deployment_info": [
                    "list[dict[str, typing.Any]]",
                    "tuple[str]",
                    "list[str]"
                ]
            }
        },
        "ContractVerifier.verify_deployment_data": {
            "name": "verify_deployment_data",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "deployment_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ContractVerifier._verify_deployed_contract": {
            "name": "_verify_deployed_contract",
            "location": 152,
            "return": [
                "tuple[typing.Union[dict[str, typing.Literal],list[],dict[, ],typing.Pattern,str]]"
            ],
            "arguments": {
                "self": [],
                "deployment_data": [
                    "str",
                    "list[str]"
                ],
                "contract_name": []
            }
        },
        "ContractVerifier.verify_service_contracts_deployment_data": {
            "name": "verify_service_contracts_deployment_data",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "bool",
                    "str",
                    "list[bool]"
                ],
                "user_deposit_whole_balance_limit": [],
                "deployed_contracts_info": [
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/deploy/etherscan_verify.py": {
        "etherscan_verify": {
            "name": "etherscan_verify",
            "location": 63,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "chain_id": [
                    "int",
                    "str",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "apikey": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "guid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "join_sources": {
            "name": "join_sources",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "source_module": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "contract_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_constructor_args": {
            "name": "get_constructor_args",
            "location": 119,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "deployment_info": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "contract_name": [
                    "int",
                    "str"
                ],
                "contract_manager": [
                    "raiden_contracts.contract_manager.ContractManager",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "post_data_for_etherscan_verification": {
            "name": "post_data_for_etherscan_verification",
            "location": 133,
            "return": [
                "dict[typing.Text, typing.Union[str,None,float,int]]",
                "str",
                "Dict[str, Any]",
                "Callable",
                "pathlib.Path"
            ],
            "arguments": {
                "apikey": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "deployment_info": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "source": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "contract_name": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "constructor_args": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "etherscan_verify_contract": {
            "name": "etherscan_verify_contract",
            "location": 162,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "chain_id": [
                    "str"
                ],
                "apikey": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "source_module": [
                    "str",
                    "int",
                    "path.Path"
                ],
                "contract_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "guid_status": {
            "name": "guid_status",
            "location": 229,
            "return": [
                "dict[typing.Any, str]",
                "Callable",
                "str",
                "Dict[str, Any]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "etherscan_api": [
                    "str",
                    "bytes"
                ],
                "guid": [
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/deploy/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/deploy/__main__.py": {
        "setup_ctx": {
            "name": "setup_ctx",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "discord.excommands.Context"
                ],
                "private_key": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "rpc_provider": [
                    "str",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ],
                "wait": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "gas_price": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "gas_limit": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "contracts_version": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Union[bytes, str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {}
        },
        "check_version_dependent_parameters": {
            "name": "check_version_dependent_parameters",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "contracts_version": [
                    "bool",
                    "str"
                ],
                "max_token_networks": [
                    "Sequence[Mapping[str, Any]]",
                    "typing.Sequence[typing.Mapping]",
                    "Sequence[Sequence[Any]]",
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "str",
                    "Sequence[Any]",
                    "list[]",
                    "list",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "raiden": {
            "name": "raiden",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "save_info": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[pathlib.Path,pathlib.Path]]]",
                    "List[Tuple[pathlib.Path, pathlib.Path]]",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "contracts_version": [
                    "None",
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "str",
                    "float",
                    "Union[str, int, kornia.constants.Resample]",
                    "dict[, ]",
                    "dict"
                ],
                "max_token_networks": [
                    "bool",
                    "click.Context",
                    "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_address": [
                    "int",
                    "None",
                    "float",
                    "raiden.utils.BlockTimeout",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "pathlib.Path",
                    "bool"
                ],
                "save_info": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[pathlib.Path,pathlib.Path]]]",
                    "List[Tuple[pathlib.Path, pathlib.Path]]",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "contracts_version": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "user_deposit_whole_limit": [
                    "int",
                    "None",
                    "float",
                    "raiden.utils.BlockTimeout",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "token": {
            "name": "token",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "contracts_version": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_supply": [
                    "bool",
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "int"
                ],
                "token_name": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bytes",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName"
                ],
                "token_decimals": [
                    "bool",
                    "List[str]",
                    "Sequence[int]",
                    "str",
                    "int"
                ],
                "token_symbol": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bytes",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "Optional[int]",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "discord.excommands.Context",
                    "List[Dict[str, Any]]"
                ],
                "private_key": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "contracts_version": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "click.Context"
                ],
                "token_address": [
                    "bool",
                    "eth_evm.HexAddress",
                    "click.Context",
                    "int"
                ],
                "token_network_registry_address": [
                    "bool",
                    "eth_evm.HexAddress",
                    "click.Context"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Context",
                    "bool"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Context",
                    "bool"
                ],
                "registry_address": [
                    "Optional[eth_evm.HexAddress]",
                    "bool",
                    "None",
                    "str",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "list[list[str]]",
                    "bool",
                    "List[List[str]]"
                ],
                "rpc_provider": [
                    "str",
                    "int",
                    "float"
                ],
                "contracts_version": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "set[str]",
                    "Optional[Set[str]]",
                    "tuple[]",
                    "tuple",
                    "Optional[int]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/conftest.py": {},
    "lumino-contracts-master/raiden_contracts/tests/deprecation_switch_testnet.py": {
        "deprecation_test": {
            "name": "deprecation_test",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "private_key": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "rpc_provider": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "wait": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "click.Context"
                ]
            }
        },
        "deprecation_test_setup": {
            "name": "deprecation_test_setup",
            "location": 84,
            "return": [
                "tuple[]",
                "str",
                "List[str]",
                "bytes",
                "List[Dict[str, str]]",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "deployer": [
                    "raiden.utils.TokenAmount",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "token_amount": [
                    "int",
                    "Callable",
                    "raiden.utils.ChannelMap"
                ],
                "channel_participant_deposit_limit": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "token_network_deposit_limit": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "open_and_deposit": {
            "name": "open_and_deposit",
            "location": 154,
            "return": [
                "dict[str, list[float]]",
                "int",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "A": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "B": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "token_network": [
                    "bool",
                    "None",
                    "raiden_contracts.deploy.contract_deployer.ContractDeployer",
                    "Union[int, None]"
                ],
                "deployer": [
                    "bool",
                    "raiden_contracts.deploy.contract_deployer.ContractDeployer"
                ],
                "channel_identifier": [
                    "None",
                    "Union[str, int, None]",
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "cmk.utils.type_defs.UserId",
                    "raiden.utils.ChannelID"
                ],
                "txn_success_status": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_close.py": {
        "test_close_nonexistent_channel": {
            "name": "test_close_nonexistent_channel",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "dict[str, typing.Any]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_settled_channel_fail": {
            "name": "test_close_settled_channel_fail",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_wrong_signature": {
            "name": "test_close_wrong_signature",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_close_call_twice_fail": {
            "name": "test_close_call_twice_fail",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_wrong_sender": {
            "name": "test_close_wrong_sender",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_nonce_zero": {
            "name": "test_close_nonce_zero",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "bool",
                    "Exception",
                    "str",
                    "typing.Collection",
                    "BaseException"
                ]
            }
        },
        "test_close_first_argument_is_for_partner_transfer": {
            "name": "test_close_first_argument_is_for_partner_transfer",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_close_first_participant_can_close": {
            "name": "test_close_first_participant_can_close",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "get_block": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_close_second_participant_can_close": {
            "name": "test_close_second_participant_can_close",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_channel_state": {
            "name": "test_close_channel_state",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]",
                    "typing.TextIO"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "get_block": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "create_balance_proof": [
                    "typing.Sequence[]",
                    "int",
                    "float",
                    "None"
                ],
                "txn_cost": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_close_channel_event_no_offchain_transfers": {
            "name": "test_close_channel_event_no_offchain_transfers",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "bool",
                    "Exception",
                    "typing.Collection",
                    "BaseException"
                ]
            }
        },
        "test_close_replay_reopened_channel": {
            "name": "test_close_replay_reopened_channel",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "test_close_channel_event": {
            "name": "test_close_channel_event",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "float",
                    "typing.Sequence[T]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_cooperative_settle.py": {
        "test_cooperative_settle_channel_call": {
            "name": "test_cooperative_settle_channel_call",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_signatures": {
            "name": "test_cooperative_settle_channel_signatures",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_0": {
            "name": "test_cooperative_settle_channel_0",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ],
                "cooperative_settle_state_tests": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_00": {
            "name": "test_cooperative_settle_channel_00",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ],
                "cooperative_settle_state_tests": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_state": {
            "name": "test_cooperative_settle_channel_state",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ],
                "cooperative_settle_state_tests": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_state_withdraw": {
            "name": "test_cooperative_settle_channel_state_withdraw",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "int",
                    "None"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "cooperative_settle_state_tests": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_cooperative_settle_channel_bigger_withdraw": {
            "name": "test_cooperative_settle_channel_bigger_withdraw",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_settle_channel_wrong_balances": {
            "name": "test_cooperative_settle_channel_wrong_balances",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Iterable[]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cooperative_close_replay_reopened_channel": {
            "name": "test_cooperative_close_replay_reopened_channel",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_cooperative_settle_channel_event": {
            "name": "test_cooperative_settle_channel_event",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_cooperative_settle_signatures": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]"
                ],
                "event_handler": [
                    "Exception",
                    "str",
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_deposit.py": {
        "test_deposit_channel_call": {
            "name": "test_deposit_channel_call",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "str",
                    "int"
                ],
                "custom_token": [
                    "str",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_notapproved": {
            "name": "test_deposit_notapproved",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "custom_token": [
                    "str",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "web3": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "test_null_or_negative_deposit_fail": {
            "name": "test_null_or_negative_deposit_fail",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "assign_tokens": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Container",
                    "dict[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_delegate_works": {
            "name": "test_deposit_delegate_works",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_wrong_channel": {
            "name": "test_deposit_wrong_channel",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "assign_tokens": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_channel_deposit_overflow": {
            "name": "test_channel_deposit_overflow",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_channel_state": {
            "name": "test_deposit_channel_state",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_wrong_state_fail": {
            "name": "test_deposit_wrong_state_fail",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "assign_tokens": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_deposit_channel_event": {
            "name": "test_deposit_channel_event",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "Exception",
                    "int",
                    "BaseException",
                    "str",
                    "typing.Collection"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "event_handler": [
                    "Exception",
                    "int",
                    "BaseException",
                    "str",
                    "typing.Collection"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_open.py": {
        "test_open_channel_call": {
            "name": "test_open_channel_call",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_max_1_channel": {
            "name": "test_max_1_channel",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_participants_hash": {
            "name": "test_participants_hash",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_participants_hash_equal": {
            "name": "test_participants_hash_equal",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_counter": {
            "name": "test_counter",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_state_channel_identifier_invalid": {
            "name": "test_state_channel_identifier_invalid",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_open_channel_state": {
            "name": "test_open_channel_state",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_reopen_channel": {
            "name": "test_reopen_channel",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "list[str]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_open_channel_event": {
            "name": "test_open_channel_event",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "token_network": [],
                "event_handler": [
                    "typing.Collection",
                    "bool",
                    "list[list[int]]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_settle.py": {
        "test_settle_no_bp_success": {
            "name": "test_settle_no_bp_success",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[str]",
                    "str",
                    "bool"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "str"
                ],
                "create_channel_and_deposit": [
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_settle_channel_state": {
            "name": "test_settle_channel_state",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "settle_state_tests": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_settle_single_direct_transfer_for_closing_party": {
            "name": "test_settle_single_direct_transfer_for_closing_party",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[str]",
                    "str",
                    "tuple[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_settle_single_direct_transfer_for_counterparty": {
            "name": "test_settle_single_direct_transfer_for_counterparty",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[str]",
                    "str",
                    "tuple[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_settlement_with_unauthorized_token_transfer": {
            "name": "test_settlement_with_unauthorized_token_transfer",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ],
                "token_network": [
                    "bool"
                ],
                "assign_tokens": [
                    "typing.Callable[, ]",
                    "float",
                    "str",
                    "None"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "None",
                    "int",
                    "Warning"
                ]
            }
        },
        "test_settle_wrong_state_fail": {
            "name": "test_settle_wrong_state_fail",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "get_block": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_settle_wrong_balance_hash": {
            "name": "test_settle_wrong_balance_hash",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "test_settle_channel_event": {
            "name": "test_settle_channel_event",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "tuple[]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "event_handler": [
                    "Exception",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_settle_unlock_state.py": {
        "test_settlement_outcome": {
            "name": "test_settlement_outcome",
            "location": 25,
            "return": [],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "settle_state_tests": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_channel_settle_old_balance_proof_values": {
            "name": "test_channel_settle_old_balance_proof_values",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "tuple[]",
                    "dict[, ]"
                ],
                "assign_tokens": [
                    "typing.Callable[, ]",
                    "list[int]",
                    "str",
                    "int"
                ],
                "channel_test_values": [],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Type"
                ],
                "test_settlement_outcome": [
                    "typing.Callable[, ]",
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "tested_range": [
                    "str"
                ]
            }
        },
        "test_channel_settle_invalid_balance_proof_values": {
            "name": "test_channel_settle_invalid_balance_proof_values",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "str"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "int",
                    "str"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "settle_state_tests": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "channel_test_values": [
                    "tuple[]",
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "test_settlement_outcome.f": {
            "name": "f",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "participants": [],
                "channel_values": [],
                "expected_final_balance_A0": [],
                "expected_final_balance_B0": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_unlock.py": {
        "test_merkle_root_0_items": {
            "name": "test_merkle_root_0_items",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_test_utils": [
                    "float",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_merkle_root_1_item_unlockable": {
            "name": "test_merkle_root_1_item_unlockable",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [],
                "secret_registry_contract": []
            }
        },
        "test_merkle_tree_length_fail": {
            "name": "test_merkle_tree_length_fail",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "dict[str, str]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [
                    "int"
                ],
                "secret_registry_contract": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_merkle_root_odd_even_components": {
            "name": "test_merkle_root_odd_even_components",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "typing.NamedTuple"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_merkle_tree_components_order": {
            "name": "test_merkle_tree_components_order",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Mapping",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [
                    "int"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]",
                    "int",
                    "bytes",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "test_lock_data_from_merkle_tree": {
            "name": "test_lock_data_from_merkle_tree",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[list[], None]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "token_network_test_utils": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "secret_registry_contract": [
                    "int"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_unlock_wrong_locksroot": {
            "name": "test_unlock_wrong_locksroot",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "float"
                ],
                "token_network": [
                    "int"
                ],
                "create_settled_channel": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_channel_unlock_bigger_locked_amount": {
            "name": "test_channel_unlock_bigger_locked_amount",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "set[]",
                    "dict[str, typing.Any]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "list[str]",
                    "None"
                ],
                "secret_registry_contract": [
                    "str",
                    "list[str]"
                ],
                "create_settled_channel": [
                    "int",
                    "bytes"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "typing.Sequence[int]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_channel_unlock_smaller_locked_amount": {
            "name": "test_channel_unlock_smaller_locked_amount",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "set[]",
                    "dict[str, typing.Any]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "list[str]",
                    "None"
                ],
                "secret_registry_contract": [
                    "str",
                    "list[str]"
                ],
                "create_settled_channel": [
                    "int",
                    "bytes"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "typing.Sequence[int]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_channel_unlock_bigger_unlocked_amount": {
            "name": "test_channel_unlock_bigger_unlocked_amount",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "set[]",
                    "dict[str, typing.Any]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "list[str]",
                    "None"
                ],
                "secret_registry_contract": [
                    "str",
                    "list[str]"
                ],
                "create_settled_channel": [
                    "int",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "typing.Sequence[int]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_channel_unlock_no_locked_amount_fail": {
            "name": "test_channel_unlock_no_locked_amount_fail",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_settled_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_channel_unlock": {
            "name": "test_channel_unlock",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_channel_settle_and_unlock": {
            "name": "test_channel_settle_and_unlock",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_channel_unlock_registered_expired_lock_refunds": {
            "name": "test_channel_unlock_registered_expired_lock_refunds",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "secret_registry_contract": [
                    "str",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "int"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_channel_unlock_unregistered_locks": {
            "name": "test_channel_unlock_unregistered_locks",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_channel_unlock_before_settlement_fails": {
            "name": "test_channel_unlock_before_settlement_fails",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_unlock_fails_with_partial_merkle_proof": {
            "name": "test_unlock_fails_with_partial_merkle_proof",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_unlock_tampered_merkle_proof_fails": {
            "name": "test_unlock_tampered_merkle_proof_fails",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_channel_unlock_both_participants": {
            "name": "test_channel_unlock_both_participants",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "secret_registry_contract": [
                    "str",
                    "list[]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "int"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int",
                    "tuple[str]"
                ]
            }
        },
        "test_unlock_twice_fails": {
            "name": "test_unlock_twice_fails",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_channel_unlock_with_a_large_expiration": {
            "name": "test_channel_unlock_with_a_large_expiration",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]",
                    "typing.TextIO"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "list[str]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_reverse_participants_unlock": {
            "name": "test_reverse_participants_unlock",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_unlock_different_channel_same_participants_fail": {
            "name": "test_unlock_different_channel_same_participants_fail",
            "location": 1200,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_settled_channel": [
                    "typing.Callable[, ]"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_unlock_channel_event": {
            "name": "test_unlock_channel_event",
            "location": 1250,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "token_network": [
                    "float"
                ],
                "secret_registry_contract": [
                    "str"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "list[str]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "close_and_update_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ],
                "reveal_secrets": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "event_handler": [
                    "str",
                    "int",
                    "list[list[int]]",
                    "typing.Collection",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_lock_data_from_merkle_tree.claimable": {
            "name": "claimable",
            "location": 225,
            "return": [
                "int"
            ],
            "arguments": {
                "index": []
            }
        },
        "test_lock_data_from_merkle_tree.get_lockhash": {
            "name": "get_lockhash",
            "location": 229,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_update_transfer.py": {
        "test_update_call": {
            "name": "test_update_call",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_update_nonexistent_fail": {
            "name": "test_update_nonexistent_fail",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_balance_proof": [
                    "typing.Sequence[]",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_update_notclosed_fail": {
            "name": "test_update_notclosed_fail",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_update_wrong_nonce_fail": {
            "name": "test_update_wrong_nonce_fail",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "list[int]",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "update_state_tests": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_update_wrong_signatures": {
            "name": "test_update_wrong_signatures",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_update_channel_state": {
            "name": "test_update_channel_state",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]",
                    "typing.TextIO"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "float",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ],
                "update_state_tests": [
                    "typing.Callable[, ]",
                    "bool",
                    "float"
                ],
                "txn_cost": [
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_update_channel_fail_no_offchain_transfers": {
            "name": "test_update_channel_fail_no_offchain_transfers",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "float",
                    "str",
                    "None",
                    "bool"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_update_not_allowed_after_settlement_period": {
            "name": "test_update_not_allowed_after_settlement_period",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Any]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "web3": [
                    "str",
                    "tuple[]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "test_update_not_allowed_for_the_closing_address": {
            "name": "test_update_not_allowed_for_the_closing_address",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_update_invalid_balance_proof_arguments": {
            "name": "test_update_invalid_balance_proof_arguments",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Type",
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "test_update_signature_on_invalid_arguments": {
            "name": "test_update_signature_on_invalid_arguments",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "token_network_test_utils": [
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_update_replay_reopened_channel": {
            "name": "test_update_replay_reopened_channel",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "tuple[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "str"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_update_channel_event": {
            "name": "test_update_channel_event",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_channel_withdraw.py": {
        "test_withdraw_call": {
            "name": "test_withdraw_call",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_withdraw_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_wrong_state": {
            "name": "test_withdraw_wrong_state",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "tuple[]",
                    "bool"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.AbstractSet"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_bigger": {
            "name": "test_withdraw_bigger",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "create_channel_and_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_wrong_signers": {
            "name": "test_withdraw_wrong_signers",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Iterable[]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_withdraw_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_wrong_signature_content": {
            "name": "test_withdraw_wrong_signature_content",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "typing.Iterable[]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_withdraw_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_channel_state": {
            "name": "test_withdraw_channel_state",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "tuple[typing.Union[str,int]]",
                    "None",
                    "bool",
                    "str"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "withdraw_state_tests": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "test_withdraw_replay_reopened_channel": {
            "name": "test_withdraw_replay_reopened_channel",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "create_withdraw_signatures": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_withdraw_event": {
            "name": "test_withdraw_event",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "Exception",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_contracts_compilation.py": {
        "check_precompiled_content": {
            "name": "check_precompiled_content",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "typing.Type"
                ],
                "contract_names": [
                    "str"
                ],
                "fields": [
                    "str"
                ]
            }
        },
        "test_nonexistent_precompiled_path": {
            "name": "test_nonexistent_precompiled_path",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verification_without_checksum": {
            "name": "test_verification_without_checksum",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verification_overall_checksum": {
            "name": "test_verification_overall_checksum",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verification_contracts_checksums": {
            "name": "test_verification_contracts_checksums",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_current_development_version": {
            "name": "test_current_development_version",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_red_eyes_version": {
            "name": "test_red_eyes_version",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pre_limits_version": {
            "name": "test_pre_limits_version",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "contract_manager_meta": {
            "name": "contract_manager_meta",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "contracts_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "contract_source_manager_meta": {
            "name": "contract_source_manager_meta",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "contracts_path": [
                    "dict[str, pathlib.Path]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_contract_manager_without_contracts": {
            "name": "test_contract_manager_without_contracts",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_manager_compile": {
            "name": "test_contract_manager_compile",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_manager_json": {
            "name": "test_contract_manager_json",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_contract_manager_constructor_does_not_invent_version": {
            "name": "test_contract_manager_constructor_does_not_invent_version",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_manager_constructor_keeps_existing_versions": {
            "name": "test_contract_manager_constructor_keeps_existing_versions",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "None"
                ]
            }
        },
        "test_contract_manager_precompiled_load_error": {
            "name": "test_contract_manager_precompiled_load_error",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_source_manager_constructor_with_wrong_type": {
            "name": "test_contract_source_manager_constructor_with_wrong_type",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_version_string_with_none": {
            "name": "test_contract_version_string_with_none",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_contract_limits.py": {
        "test_register_three_but_not_four": {
            "name": "test_register_three_but_not_four",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "get_token_network_registry": [],
                "secret_registry_contract": [],
                "custom_token_factory": [
                    "int"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "web3.contracContract"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "test_channel_participant_deposit_limit_value": {
            "name": "test_channel_participant_deposit_limit_value",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "test_network_deposit_limit_value": {
            "name": "test_network_deposit_limit_value",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "web3.contracContract"
                ]
            }
        },
        "test_participant_deposit_limit": {
            "name": "test_participant_deposit_limit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "create_channel": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "assign_tokens": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "test_network_deposit_limit": {
            "name": "test_network_deposit_limit",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "create_account": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "web3.contracContract",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "token_network": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "create_channel": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "assign_tokens": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "test_network_deposit_limit.remaining": {
            "name": "remaining",
            "location": 135,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "test_network_deposit_limit.send_remaining": {
            "name": "send_remaining",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "str"
                ],
                "participant1": [
                    "eth_evm.HexAddress",
                    "int"
                ],
                "participant2": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_deploy_data.py": {
        "test_deploy_data_dir_exists": {
            "name": "test_deploy_data_dir_exists",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_deploy_data_dir_is_not_nested": {
            "name": "test_deploy_data_dir_is_not_nested",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_deploy_data_file_exists": {
            "name": "test_deploy_data_file_exists",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "chain_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "services": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "reasonable_deployment_of_a_contract": {
            "name": "reasonable_deployment_of_a_contract",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deployed": [
                    "str",
                    "raiden_contracts.contract_manager.DeployedContract",
                    "float",
                    "tuple[]",
                    "bytes",
                    "tuple"
                ]
            }
        },
        "test_deploy_data_has_fields_raiden": {
            "name": "test_deploy_data_has_fields_raiden",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "raiden.utils.Address"
                ],
                "chain_id": [
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_deploy_data_has_fields_services": {
            "name": "test_deploy_data_has_fields_services",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "raiden.utils.Address"
                ],
                "chain_id": [
                    "str",
                    "int"
                ]
            }
        },
        "test_deploy_data_all": {
            "name": "test_deploy_data_all",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "chain_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_deploy_data_unknown_module": {
            "name": "test_deploy_data_unknown_module",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_deploy_data_not_deployed": {
            "name": "test_deploy_data_not_deployed",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_deploy_data_for_redeyes_succeed": {
            "name": "test_deploy_data_for_redeyes_succeed",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "test_service_deploy_data_for_redeyes_fail": {
            "name": "test_service_deploy_data_for_redeyes_fail",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "test_version_provides_services": {
            "name": "test_version_provides_services",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_verify_nonexistent_deployment": {
            "name": "test_verify_nonexistent_deployment",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_deposit_whole_balance_limit": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_verify_existent_deployment": {
            "name": "test_verify_existent_deployment",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_verify_existent_deployment_with_wrong_code": {
            "name": "test_verify_existent_deployment_with_wrong_code",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_deploy_script.py": {
        "deployer": {
            "name": "deployer",
            "location": 50,
            "return": [],
            "arguments": {
                "web3": [
                    "str"
                ]
            }
        },
        "deployer_0_4_0": {
            "name": "deployer_0_4_0",
            "location": 62,
            "return": [],
            "arguments": {
                "web3": [
                    "str"
                ]
            }
        },
        "deployed_raiden_info": {
            "name": "deployed_raiden_info",
            "location": 75,
            "return": [],
            "arguments": {
                "deployer": []
            }
        },
        "deployed_raiden_info_0_4_0": {
            "name": "deployed_raiden_info_0_4_0",
            "location": 81,
            "return": [],
            "arguments": {
                "deployer_0_4_0": []
            }
        },
        "token_address": {
            "name": "token_address",
            "location": 89,
            "return": [],
            "arguments": {
                "deployer": []
            }
        },
        "deployed_service_info": {
            "name": "deployed_service_info",
            "location": 106,
            "return": [],
            "arguments": {
                "deployer": [],
                "token_address": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_contract_version_with_max_token_networks": {
            "name": "test_contract_version_with_max_token_networks",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "None"
                ],
                "expectation": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "test_deploy_script_raiden": {
            "name": "test_deploy_script_raiden",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "deployer": [],
                "deployed_raiden_info": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "test_deploy_script_token": {
            "name": "test_deploy_script_token",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": []
            }
        },
        "test_deploy_script_register": {
            "name": "test_deploy_script_register",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes"
                ],
                "channel_participant_deposit_limit": [
                    "float"
                ],
                "token_network_deposit_limit": [
                    "float"
                ],
                "deployed_raiden_info": [
                    "str"
                ],
                "token_address": [
                    "float"
                ]
            }
        },
        "test_deploy_script_register_without_limit": {
            "name": "test_deploy_script_register_without_limit",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "token_address": [
                    "float"
                ],
                "deployer_0_4_0": [],
                "deployed_raiden_info_0_4_0": [
                    "list[list[int]]"
                ]
            }
        },
        "test_deploy_script_register_missing_limits": {
            "name": "test_deploy_script_register_missing_limits",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_deposit_limit": [],
                "channel_participant_deposit_limit": [],
                "deployed_raiden_info": [
                    "str",
                    "bytes"
                ],
                "token_address": [],
                "deployer": [
                    "typing.Callable[L, None]",
                    "float"
                ]
            }
        },
        "test_deploy_script_register_unexpected_limits": {
            "name": "test_deploy_script_register_unexpected_limits",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "int"
                ],
                "token_network_deposit_limit": [],
                "channel_participant_deposit_limit": [],
                "token_address": [],
                "deployed_raiden_info": []
            }
        },
        "test_deploy_script_service": {
            "name": "test_deploy_script_service",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "deployed_service_info": [
                    "str"
                ],
                "token_address": [
                    "str"
                ]
            }
        },
        "test_validate_address_on_none": {
            "name": "test_validate_address_on_none",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_address_empty_string": {
            "name": "test_validate_address_empty_string",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_address_not_an_address": {
            "name": "test_validate_address_not_an_address",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_address_happy_path": {
            "name": "test_validate_address_happy_path",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fs_reload_deployer": {
            "name": "fs_reload_deployer",
            "location": 608,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_store_and_verify_raiden": {
            "name": "test_store_and_verify_raiden",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "fs_reload_deployer": [
                    "str",
                    "None"
                ],
                "deployed_raiden_info": [
                    "bytes"
                ],
                "deployer": []
            }
        },
        "test_store_and_verify_services": {
            "name": "test_store_and_verify_services",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "fs_reload_deployer": [
                    "str",
                    "bool",
                    "None"
                ],
                "deployer": [],
                "deployed_service_info": [
                    "bool",
                    "tuple[]"
                ],
                "token_address": [
                    "int"
                ]
            }
        },
        "test_red_eyes_deployer": {
            "name": "test_red_eyes_deployer",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": []
            }
        },
        "test_error_removed_option_raises": {
            "name": "test_error_removed_option_raises",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contracts_version_expects_deposit_limits": {
            "name": "test_contracts_version_expects_deposit_limits",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_token_arguments": {
            "name": "deploy_token_arguments",
            "location": 680,
            "return": [
                "list[typing.Union[typing.Text,typing.Iterator,dict[str, str],bool]]"
            ],
            "arguments": {
                "privkey": [
                    "str",
                    "typing.Iterator",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "test_deploy_token_invalid_privkey": {
            "name": "test_deploy_token_invalid_privkey",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deploy_token_no_balance": {
            "name": "test_deploy_token_no_balance",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_private_key": [
                    "str",
                    "list[allennlp.data.tokenizers.token.Token]",
                    "list[str]"
                ]
            }
        },
        "test_deploy_token_with_balance": {
            "name": "test_deploy_token_with_balance",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "str",
                    "list[str]",
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "deploy_raiden_arguments": {
            "name": "deploy_raiden_arguments",
            "location": 748,
            "return": [
                "list[typing.Union[typing.Text,list[],bool,None]]"
            ],
            "arguments": {
                "privkey": [
                    "str",
                    "list[]",
                    "bool"
                ],
                "save_info": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, list[int]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "contracts_version": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "test_deploy_raiden": {
            "name": "test_deploy_raiden",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "mock_verify": [],
                "get_accounts": [],
                "get_private_key": [
                    "int",
                    "list[list[typing.Any]]"
                ],
                "contracts_version": []
            }
        },
        "test_register_script": {
            "name": "test_register_script",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict[, ]",
                    "set[str]"
                ]
            }
        },
        "test_register_script_without_token_network": {
            "name": "test_register_script_without_token_network",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "get_private_key": [
                    "dict[, ]",
                    "int",
                    "list[]"
                ]
            }
        },
        "test_deploy_raiden_save_info_false": {
            "name": "test_deploy_raiden_save_info_false",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "mock_verify": [],
                "get_accounts": [
                    "str"
                ],
                "get_private_key": [
                    "int",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "list[list[typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "deploy_services_arguments": {
            "name": "deploy_services_arguments",
            "location": 884,
            "return": [
                "list[typing.Union[typing.Text,bool,dict[str, typing.Any],dict[, ],list[list[typing.Any]],float]]"
            ],
            "arguments": {
                "privkey": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[list[typing.Any]]",
                    "float"
                ],
                "save_info": [
                    "bool",
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "test_deploy_services": {
            "name": "test_deploy_services",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "mock_verify": [],
                "get_accounts": [],
                "get_private_key": [
                    "int",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "test_deploy_services_save_info_false": {
            "name": "test_deploy_services_save_info_false",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deploy": [],
                "mock_verify": [],
                "get_accounts": [
                    "str"
                ],
                "get_private_key": [
                    "int",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "list[list[typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "test_verify_script": {
            "name": "test_verify_script",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_verify": []
            }
        },
        "test_verify_monitoring_service_deployment_with_wrong_first_constructor_arg": {
            "name": "test_verify_monitoring_service_deployment_with_wrong_first_constructor_arg",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_monitoring_service_deployment_with_wrong_onchain_token_address": {
            "name": "test_verify_monitoring_service_deployment_with_wrong_onchain_token_address",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deploy_script_service.test_missing_deployment": {
            "name": "test_missing_deployment",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_name": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_deprecation_switch.py": {
        "test_deprecation_executor": {
            "name": "test_deprecation_executor",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "contracts_manager": [
                    "tuple[]",
                    "float",
                    "raiden_contracts.contract_manager.ContractManager",
                    "tuple",
                    "raiden.utils.BlockIdentifier"
                ],
                "deploy_contract": [
                    "float",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "secret_registry_contract": [
                    "float",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "custom_token": [
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.ChannelID"
                ],
                "channel_participant_deposit_limit": [
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.ChannelID"
                ],
                "token_network_deposit_limit": [
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.ChannelID"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "str",
                    "Iterable[Tuple[str, dict]]",
                    "None",
                    "Optional[str]",
                    "web3.contracContract",
                    "bool"
                ]
            }
        },
        "test_set_deprecation_switch": {
            "name": "test_set_deprecation_switch",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ],
                "token_network": [
                    "web3.contracContract"
                ]
            }
        },
        "test_deprecation_switch": {
            "name": "test_deprecation_switch",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "create_channel": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.contracContract"
                ]
            }
        },
        "test_deprecation_switch_settle": {
            "name": "test_deprecation_switch_settle",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "web3.Web3",
                    "typing.Mapping",
                    "int",
                    "Callable",
                    "Mapping[str, int]",
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "web3.contracContract"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "reveal_secrets": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.contracContract"
                ],
                "close_and_update_channel": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Warning",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_endpointregistry.py": {
        "test_version": {
            "name": "test_version",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint_registry_contract": [
                    "web3.contracContract"
                ]
            }
        },
        "test_endpointregistry_calls": {
            "name": "test_endpointregistry_calls",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint_registry_contract": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_events": {
            "name": "test_events",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint_registry_contract": [
                    "cmk.utils.type_defs.EventRule",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_etherscan_verify.py": {
        "test_get_constructor_args_no_args": {
            "name": "test_get_constructor_args_no_args",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "abi_with_constructor_input_types": {
            "name": "abi_with_constructor_input_types",
            "location": 40,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, str]]]]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "types": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Callable[[None], None]",
                    "Type",
                    "ForwardRef",
                    "type"
                ]
            }
        },
        "test_get_constructor_args_one_arg": {
            "name": "test_get_constructor_args_one_arg",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_constructor_args_two_args": {
            "name": "test_get_constructor_args_two_args",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_data_for_etherscan_verification": {
            "name": "test_post_data_for_etherscan_verification",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_join_contracts": {
            "name": "test_run_join_contracts",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_guid_status": {
            "name": "test_guid_status",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etherscan_verify_with_guid": {
            "name": "test_etherscan_verify_with_guid",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etherscan_verify_already_verified": {
            "name": "test_etherscan_verify_already_verified",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etherscan_verify_unknown_error": {
            "name": "test_etherscan_verify_unknown_error",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etherscan_verify_unable_to_verify": {
            "name": "test_etherscan_verify_unable_to_verify",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etherscan_verify_success": {
            "name": "test_etherscan_verify_success",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "first_fail_second_succeed": {
            "name": "first_fail_second_succeed",
            "location": 265,
            "return": [
                "typing.Text",
                "int",
                "bool"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_etherscan_verify_success_after_a_loop": {
            "name": "test_etherscan_verify_success_after_a_loop",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_monitoring_service.py": {
        "ms_address": {
            "name": "ms_address",
            "location": 15,
            "return": [
                "set[]",
                "int",
                "str"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "None",
                    "str",
                    "list[str]"
                ],
                "custom_token": [],
                "service_registry": []
            }
        },
        "monitor_data": {
            "name": "monitor_data",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Union[tuple[typing.Union[int,str,float,bytes]],int,str,None,list[str],bytes,tuple[typing.Union[str,str]],set[]]]"
            ],
            "arguments": {
                "get_accounts": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "deposit_to_udc": [
                    "bytes",
                    "float",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ],
                "create_balance_proof": [],
                "create_balance_proof_update_signature": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "create_reward_proof": [
                    "int",
                    "str",
                    "None"
                ],
                "token_network": [
                    "int",
                    "str",
                    "None"
                ],
                "ms_address": [
                    "list[float]",
                    "int"
                ],
                "monitoring_service_external": [
                    "list[float]",
                    "int"
                ]
            }
        },
        "test_claimReward_with_settle_call": {
            "name": "test_claimReward_with_settle_call",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "dict[str, typing.Any]"
                ],
                "monitoring_service_external": [],
                "user_deposit_contract": [
                    "bool",
                    "float"
                ],
                "event_handler": [
                    "int",
                    "list[list[int]]",
                    "typing.Collection"
                ],
                "monitor_data": [],
                "ms_address": [],
                "web3": [
                    "tuple[]"
                ],
                "with_settle": [
                    "bool",
                    "dict[, ]",
                    "list[list[int]]"
                ]
            }
        },
        "test_monitor": {
            "name": "test_monitor",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "monitoring_service_external": [],
                "monitor_data": [],
                "ms_address": [],
                "event_handler": [
                    "list[list[int]]"
                ],
                "web3": [
                    "int",
                    "list[str]",
                    "str",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "test_updateReward": {
            "name": "test_updateReward",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "monitoring_service_internals": [],
                "ms_address": [
                    "list[str]",
                    "str"
                ],
                "token_network": [
                    "list[str]",
                    "str"
                ],
                "create_reward_proof": [
                    "list[str]",
                    "str"
                ],
                "monitor_data": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_firstAllowedBlock": {
            "name": "test_firstAllowedBlock",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "monitoring_service_external": []
            }
        },
        "test_updateReward.update_with_nonce": {
            "name": "update_with_nonce",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "nonce": []
            }
        },
        "test_firstAllowedBlock.call": {
            "name": "call",
            "location": 265,
            "return": [],
            "arguments": {
                "addresses": [],
                "closed_at_block": [
                    "int"
                ],
                "settle_timeout": [
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_one_to_n.py": {
        "test_claim": {
            "name": "test_claim",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "one_to_n_contract": [
                    "cmk.utils.type_defs.EventRule"
                ],
                "deposit_to_udc": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ],
                "get_private_key": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "event_handler": [
                    "int",
                    "Exception"
                ]
            }
        },
        "test_claim_with_insufficient_deposit": {
            "name": "test_claim_with_insufficient_deposit",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "one_to_n_contract": [
                    "cmk.utils.type_defs.EventRule"
                ],
                "deposit_to_udc": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.AddressHex"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ],
                "get_private_key": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ],
                "web3": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "event_handler": [
                    "int",
                    "Exception"
                ]
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "one_to_n_contract": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_print_gas.py": {
        "test_gas_json_has_enough_fields": {
            "name": "test_gas_json_has_enough_fields",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "print_gas_token_network_registry": {
            "name": "print_gas_token_network_registry",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[raiden.utils.Address]",
                    "float",
                    "typing.Callable[, ]"
                ],
                "deploy_tester_contract_txhash": [
                    "list[raiden.utils.Address]",
                    "float",
                    "typing.Callable[, ]"
                ],
                "secret_registry_contract": [
                    "list[raiden.utils.Address]",
                    "float",
                    "typing.Callable[, ]"
                ],
                "print_gas": [
                    "typing.Callable[, ]",
                    "list[typing.Callable[, ]]",
                    "bool"
                ]
            }
        },
        "print_gas_token_network_deployment": {
            "name": "print_gas_token_network_deployment",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "int",
                    "dict[int, dict[, ]]"
                ],
                "print_gas": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ],
                "custom_token": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "secret_registry_contract": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "deploy_tester_contract_txhash": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "print_gas_token_network_create": {
            "name": "print_gas_token_network_create",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "print_gas": [
                    "typing.Callable[, ]",
                    "int",
                    "bytes"
                ],
                "custom_token": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_token_network_registry": [
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "str"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "str"
                ],
                "token_network_registry_constructor_args": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "print_gas_secret_registry": {
            "name": "print_gas_secret_registry",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ],
                "print_gas": [
                    "typing.Callable[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "print_gas_channel_cycle": {
            "name": "print_gas_channel_cycle",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Mapping",
                    "None",
                    "bytes"
                ],
                "token_network": [],
                "create_channel": [
                    "typing.Callable[, ]",
                    "int",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ],
                "channel_deposit": [
                    "typing.Callable[, ]"
                ],
                "withdraw_channel": [
                    "typing.Callable[, ]",
                    "float",
                    "int"
                ],
                "secret_registry_contract": [],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "int",
                    "list[str]",
                    "str"
                ],
                "print_gas": [
                    "typing.Callable[, ]",
                    "list[list[int]]",
                    "str"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]"
                ],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "print_gas_endpointregistry": {
            "name": "print_gas_endpointregistry",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint_registry_contract": [
                    "str",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "print_gas": [
                    "int",
                    "set[str]",
                    "None"
                ]
            }
        },
        "print_gas_monitoring_service": {
            "name": "print_gas_monitoring_service",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "int",
                    "list[int]"
                ],
                "monitoring_service_external": [],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool",
                    "None"
                ],
                "create_channel": [
                    "typing.Callable[, ]",
                    "float",
                    "int"
                ],
                "create_balance_proof": [],
                "create_balance_proof_update_signature": [
                    "typing.Callable[, ]",
                    "int",
                    "set[str]"
                ],
                "create_reward_proof": [
                    "int",
                    "list[int]"
                ],
                "service_registry": [
                    "int"
                ],
                "custom_token": [],
                "deposit_to_udc": [
                    "typing.Callable[, ]",
                    "float",
                    "typing.Iterable[str]",
                    "bytes",
                    "str"
                ],
                "print_gas": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "print_gas_one_to_n": {
            "name": "print_gas_one_to_n",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "one_to_n_contract": [
                    "typing.Iterable[typing.Callable[, ]]",
                    "int",
                    "None",
                    "bytes"
                ],
                "deposit_to_udc": [
                    "bool",
                    "str"
                ],
                "get_accounts": [
                    "list[str]",
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_private_key": [
                    "typing.Iterable[typing.Callable[, ]]",
                    "int",
                    "None",
                    "bytes"
                ],
                "web3": [
                    "int",
                    "str"
                ],
                "print_gas": [
                    "int",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "print_gas_user_deposit": {
            "name": "print_gas_user_deposit",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "str"
                ],
                "custom_token": [
                    "bool"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ],
                "web3": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "print_gas": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_print_gas": {
            "name": "test_print_gas",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_priv_key.py": {
        "test_permission_safety_different_uid": {
            "name": "test_permission_safety_different_uid",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_permission_safety_group_writable": {
            "name": "test_permission_safety_group_writable",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_permission_safety_executable": {
            "name": "test_permission_safety_executable",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_private_key_empty_path": {
            "name": "test_get_private_key_empty_path",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_private_key_nonexistent": {
            "name": "test_get_private_key_nonexistent",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_private_key_writable_keyfile": {
            "name": "test_get_private_key_writable_keyfile",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_private_key_writable_password_file": {
            "name": "test_get_private_key_writable_password_file",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_secret_registry.py": {
        "test_version": {
            "name": "test_version",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "test_register_secret_call": {
            "name": "test_register_secret_call",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "dict[, ]",
                    "web3.contracContract",
                    "typing.Mapping",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "test_register_secret_return_value": {
            "name": "test_register_secret_return_value",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ]
            }
        },
        "test_register_secret": {
            "name": "test_register_secret",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[str]",
                    "web3.contracContract",
                    "Sequence[str]"
                ],
                "get_accounts": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "type",
                    "typing.Type"
                ],
                "get_block": [
                    "Callable",
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_register_secret_batch": {
            "name": "test_register_secret_batch",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "get_accounts": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "type",
                    "typing.Type"
                ],
                "get_block": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "web3.contracContract",
                    "web3.Web3"
                ]
            }
        },
        "test_register_secret_batch_return_value": {
            "name": "test_register_secret_batch_return_value",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_events": {
            "name": "test_events",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [],
                "event_handler": [
                    "dict[str, str]",
                    "raiden.blockchain.events.Event",
                    "list[str]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "test_register_secret_batch_events": {
            "name": "test_register_secret_batch_events",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "secret_registry_contract": [
                    "cmk.utils.type_defs.EventRule"
                ],
                "event_handler": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_service_registry.py": {
        "test_deposit": {
            "name": "test_deposit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "service_registry": [
                    "web3.contracContract"
                ],
                "custom_token": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_setURL": {
            "name": "test_setURL",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "service_registry": [
                    "str",
                    "web3.contracContract",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "service_registry": [
                    "web3.contracContract"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_token.py": {
        "test_token_mint": {
            "name": "test_token_mint",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "custom_token": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]",
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_approve_transfer": {
            "name": "test_approve_transfer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ]
            }
        },
        "test_token_transfer_funds": {
            "name": "test_token_transfer_funds",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]",
                    "web3.contracContract"
                ]
            }
        },
        "test_custom_token": {
            "name": "test_custom_token",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "web3": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "contracts_manager": [
                    "bool",
                    "raiden_contracts.contract_manager.ContractManager"
                ]
            }
        },
        "test_human_standard_token": {
            "name": "test_human_standard_token",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "human_standard_token": [
                    "bool",
                    "typing.Callable[, ]",
                    "web3.Web3",
                    "web3.contracContract",
                    "Callable"
                ],
                "web3": [
                    "bool",
                    "typing.Callable[, ]",
                    "web3.Web3",
                    "web3.contracContract",
                    "Callable"
                ],
                "contracts_manager": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_token_network.py": {
        "test_version": {
            "name": "test_version",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": []
            }
        },
        "test_constructor_call": {
            "name": "test_constructor_call",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "get_token_network": [
                    "str"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ],
                "secret_registry_contract": [
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "str"
                ],
                "token_network_deposit_limit": [
                    "str"
                ]
            }
        },
        "test_token_network_variables": {
            "name": "test_token_network_variables",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [
                    "int",
                    "typing.Callable[, ]",
                    "list[list[int]]"
                ],
                "token_network_test_utils": [
                    "int",
                    "str"
                ]
            }
        },
        "test_constructor_not_registered": {
            "name": "test_constructor_not_registered",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "secret_registry_contract": [],
                "token_network_registry_contract": [
                    "list[int]",
                    "int"
                ],
                "token_network_external": [
                    "int",
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_token_network_registry.py": {
        "test_version": {
            "name": "test_version",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_registry_contract": []
            }
        },
        "test_constructor_call": {
            "name": "test_constructor_call",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "get_token_network_registry": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "secret_registry_contract": [],
                "get_accounts": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_constructor_call_state": {
            "name": "test_constructor_call_state",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "get_token_network_registry": [],
                "secret_registry_contract": []
            }
        },
        "test_create_erc20_token_network_call": {
            "name": "test_create_erc20_token_network_call",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_registry_contract": [
                    "int"
                ],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_create_erc20_token_network": {
            "name": "test_create_erc20_token_network",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "register_token_network": [],
                "token_network_registry_contract": [
                    "str"
                ],
                "custom_token": [],
                "channel_participant_deposit_limit": [],
                "token_network_deposit_limit": []
            }
        },
        "test_create_erc20_token_network_twice_fails": {
            "name": "test_create_erc20_token_network_twice_fails",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_registry_contract": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "token_network_deposit_limit": [
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_events": {
            "name": "test_events",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "register_token_network": [
                    "typing.Callable[, ]"
                ],
                "token_network_registry_contract": [
                    "list[list[int]]",
                    "int",
                    "typing.Collection",
                    "str",
                    "typing.Callable[, ]"
                ],
                "custom_token": [
                    "typing.Callable[, ]"
                ],
                "event_handler": [
                    "list[list[int]]",
                    "int",
                    "typing.Collection",
                    "str",
                    "typing.Callable[, ]"
                ],
                "channel_participant_deposit_limit": [
                    "typing.Callable[, ]"
                ],
                "token_network_deposit_limit": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_transaction.py": {
        "test_check_successful_tx_with_status_zero": {
            "name": "test_check_successful_tx_with_status_zero",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_successful_tx_with_nonexistent_status": {
            "name": "test_check_successful_tx_with_nonexistent_status",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_successful_tx_with_gas_completely_used": {
            "name": "test_check_successful_tx_with_gas_completely_used",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_successful_tx_successful_case": {
            "name": "test_check_successful_tx_successful_case",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/test_user_deposit_contract.py": {
        "test_deposit": {
            "name": "test_deposit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "web3.contracContract"
                ],
                "custom_token": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "typing.Callable[int, tuple[]]",
                    "Callable[[int], Tuple]",
                    "Callable"
                ]
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "uninitialized_user_deposit_contract": [
                    "list[typing.Callable[, ]]",
                    "web3.contracContract",
                    "List[Callable]"
                ],
                "udc_transfer_contract": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "get_accounts": [
                    "typing.Callable[int, tuple[]]",
                    "Callable[[int], Tuple]",
                    "Callable"
                ],
                "event_handler": [
                    "int"
                ],
                "custom_token": [
                    "web3.contracContract"
                ]
            }
        },
        "test_deposit_after_transfer": {
            "name": "test_deposit_after_transfer",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "uninitialized_user_deposit_contract": [
                    "list[typing.Callable[, ]]",
                    "web3.contracContract",
                    "List[Callable]"
                ],
                "udc_transfer_contract": [
                    "int",
                    "web3.contracContract",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "custom_token": [
                    "web3.contracContract"
                ],
                "get_accounts": [
                    "typing.Callable[int, tuple[]]",
                    "Callable[[int], Tuple]",
                    "None",
                    "Callable",
                    "raiden.constants.RoutingMode",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_withdraw": {
            "name": "test_withdraw",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "int",
                    "web3.contracContract",
                    "float",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "deposit_to_udc": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "web3": [
                    "str",
                    "web3.Web3"
                ],
                "event_handler": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/tests/fixtures/channel.py": {
        "create_channel": {
            "name": "create_channel",
            "location": 25,
            "return": [],
            "arguments": {
                "token_network": [
                    "dict[, ]",
                    "int"
                ],
                "web3": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "assign_tokens": {
            "name": "assign_tokens",
            "location": 52,
            "return": [],
            "arguments": {
                "token_network": [
                    "bool",
                    "list[str]",
                    "str"
                ],
                "custom_token": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "channel_deposit": {
            "name": "channel_deposit",
            "location": 83,
            "return": [],
            "arguments": {
                "token_network": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "assign_tokens": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "create_channel_and_deposit": {
            "name": "create_channel_and_deposit",
            "location": 100,
            "return": [],
            "arguments": {
                "create_channel": [
                    "int",
                    "float",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "channel_deposit": [
                    "int",
                    "float",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "withdraw_channel": {
            "name": "withdraw_channel",
            "location": 116,
            "return": [],
            "arguments": {
                "token_network": [
                    "list[str]",
                    "int",
                    "str"
                ],
                "create_withdraw_signatures": [
                    "list[str]",
                    "int",
                    "str"
                ]
            }
        },
        "close_and_update_channel": {
            "name": "close_and_update_channel",
            "location": 139,
            "return": [],
            "arguments": {
                "token_network": [
                    "int",
                    "list[str]",
                    "str",
                    "typing.Sequence[typing.Sequence[int]]"
                ],
                "create_balance_proof": [
                    "int",
                    "list[str]",
                    "str",
                    "typing.Sequence[typing.Sequence[int]]"
                ],
                "create_balance_proof_update_signature": [
                    "int",
                    "list[str]",
                    "str",
                    "typing.Sequence[typing.Sequence[int]]"
                ]
            }
        },
        "create_settled_channel": {
            "name": "create_settled_channel",
            "location": 188,
            "return": [],
            "arguments": {
                "web3": [
                    "typing.Sequence[int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]",
                    "int"
                ],
                "token_network": [
                    "typing.Sequence[int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]",
                    "int"
                ],
                "create_channel_and_deposit": [
                    "typing.Sequence[int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]",
                    "int"
                ],
                "close_and_update_channel": [
                    "typing.Sequence[int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "reveal_secrets": {
            "name": "reveal_secrets",
            "location": 251,
            "return": [],
            "arguments": {
                "web3": [
                    "bytes",
                    "list[bytes]",
                    "dict[, ]",
                    "list[]",
                    "str"
                ],
                "secret_registry_contract": [
                    "bytes",
                    "list[bytes]",
                    "dict[, ]",
                    "list[]",
                    "str"
                ]
            }
        },
        "common_settle_state_tests": {
            "name": "common_settle_state_tests",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_token": [],
                "token_network": [],
                "channel_identifier": [
                    "typing.Callable[, ]"
                ],
                "A": [],
                "balance_A": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "B": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ],
                "balance_B": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[]",
                    "str",
                    "None"
                ],
                "pre_account_balance_A": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "pre_account_balance_B": [
                    "bool",
                    "list[str]"
                ],
                "pre_balance_contract": [
                    "typing.Any",
                    "None",
                    "int"
                ]
            }
        },
        "update_state_tests": {
            "name": "update_state_tests",
            "location": 327,
            "return": [],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ],
                "get_block": [
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "cooperative_settle_state_tests": {
            "name": "cooperative_settle_state_tests",
            "location": 370,
            "return": [],
            "arguments": {
                "token_network": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, str]"
                ],
                "custom_token": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "settle_state_tests": {
            "name": "settle_state_tests",
            "location": 404,
            "return": [],
            "arguments": {
                "token_network": [
                    "bool",
                    "list[str]"
                ],
                "custom_token": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "unlock_state_tests": {
            "name": "unlock_state_tests",
            "location": 472,
            "return": [],
            "arguments": {
                "custom_token": [
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "withdraw_state_tests": {
            "name": "withdraw_state_tests",
            "location": 496,
            "return": [],
            "arguments": {
                "custom_token": [
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "token_network": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "create_balance_proof": {
            "name": "create_balance_proof",
            "location": 570,
            "return": [],
            "arguments": {
                "token_network": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "get_private_key": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "create_balance_proof_update_signature": {
            "name": "create_balance_proof_update_signature",
            "location": 606,
            "return": [],
            "arguments": {
                "token_network": [
                    "typing.Callable[[], int]",
                    "str",
                    "int"
                ],
                "get_private_key": [
                    "typing.Callable[[], int]",
                    "str",
                    "int"
                ]
            }
        },
        "create_cooperative_settle_signatures": {
            "name": "create_cooperative_settle_signatures",
            "location": 637,
            "return": [],
            "arguments": {
                "token_network": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "get_private_key": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "create_withdraw_signatures": {
            "name": "create_withdraw_signatures",
            "location": 670,
            "return": [],
            "arguments": {
                "token_network": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "get_private_key": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "call_settle": {
            "name": "call_settle",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network": [],
                "channel_identifier": [],
                "A": [],
                "vals_A": [
                    "float",
                    "list[C]"
                ],
                "B": [],
                "vals_B": [
                    "float",
                    "list[C]"
                ]
            }
        },
        "create_channel.get": {
            "name": "get",
            "location": 26,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "A": [],
                "B": [],
                "settle_timeout": []
            }
        },
        "assign_tokens.get": {
            "name": "get",
            "location": 53,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participant": [],
                "deposit": []
            }
        },
        "channel_deposit.get": {
            "name": "get",
            "location": 84,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "participant": [],
                "deposit": [],
                "partner": [],
                "tx_from": []
            }
        },
        "create_channel_and_deposit.get": {
            "name": "get",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participant1": [],
                "participant2": [],
                "deposit1": [],
                "deposit2": [],
                "settle_timeout": []
            }
        },
        "withdraw_channel.get": {
            "name": "get",
            "location": 117,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "participant": [],
                "withdraw_amount": [],
                "partner": [],
                "delegate": []
            }
        },
        "close_and_update_channel.get": {
            "name": "get",
            "location": 142,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "participant1": [],
                "participant1_values": [],
                "participant2": [],
                "participant2_values": []
            }
        },
        "create_settled_channel.get": {
            "name": "get",
            "location": 191,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participant1": [],
                "locked_amount1": [],
                "locksroot1": [],
                "participant2": [],
                "locked_amount2": [],
                "locksroot2": [],
                "settle_timeout": []
            }
        },
        "reveal_secrets.get": {
            "name": "get",
            "location": 252,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "tx_from": [],
                "transfers": []
            }
        },
        "update_state_tests.get": {
            "name": "get",
            "location": 328,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "A": [],
                "balance_proof_A": [],
                "B": [],
                "balance_proof_B": [],
                "settle_timeout": [],
                "txn_hash1": []
            }
        },
        "cooperative_settle_state_tests.get": {
            "name": "get",
            "location": 371,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "A": [],
                "balance_A": [],
                "B": [],
                "balance_B": [],
                "pre_account_balance_A": [],
                "pre_account_balance_B": [],
                "pre_balance_contract": []
            }
        },
        "settle_state_tests.get": {
            "name": "get",
            "location": 405,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "A": [],
                "values_A": [],
                "B": [],
                "values_B": [],
                "pre_account_balance_A": [],
                "pre_account_balance_B": [],
                "pre_balance_contract": []
            }
        },
        "unlock_state_tests.get": {
            "name": "get",
            "location": 473,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "A": [],
                "locked_A": [],
                "locksroot_A": [],
                "B": [],
                "locked_B": [],
                "pre_account_balance_A": [],
                "pre_account_balance_B": [],
                "pre_balance_contract": []
            }
        },
        "withdraw_state_tests.get": {
            "name": "get",
            "location": 497,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "participant": [],
                "deposit_participant": [],
                "total_withdrawn_participant": [],
                "pre_withdrawn_participant": [],
                "pre_balance_participant": [],
                "partner": [],
                "deposit_partner": [],
                "total_withdrawn_partner": [],
                "pre_balance_partner": [],
                "pre_balance_contract": [],
                "delegate": []
            }
        },
        "create_balance_proof.get": {
            "name": "get",
            "location": 571,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "channel_identifier": [],
                "participant": [],
                "transferred_amount": [],
                "locked_amount": [],
                "nonce": [],
                "locksroot": [],
                "additional_hash": [],
                "v": [],
                "signer": [],
                "other_token_network": []
            }
        },
        "create_balance_proof_update_signature.get": {
            "name": "get",
            "location": 607,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participant": [],
                "channel_identifier": [],
                "balance_hash": [],
                "nonce": [],
                "additional_hash": [],
                "closing_signature": [],
                "v": [],
                "other_token_network": []
            }
        },
        "create_cooperative_settle_signatures.get": {
            "name": "get",
            "location": 638,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participants_to_sign": [],
                "channel_identifier": [],
                "participant1_address": [],
                "participant1_balance": [],
                "participant2_address": [],
                "participant2_balance": [],
                "v": [],
                "other_token_network": []
            }
        },
        "create_withdraw_signatures.get": {
            "name": "get",
            "location": 671,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participants_to_sign": [],
                "channel_identifier": [],
                "participant_who_withdraws": [],
                "amount_to_withdraw": [],
                "token_network_address": [],
                "v": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/channel_test_values.py": {},
    "lumino-contracts-master/raiden_contracts/tests/fixtures/contracts.py": {
        "deploy_tester_contract": {
            "name": "deploy_tester_contract",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "contracts_manager": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "deploy_contract_txhash": {
            "name": "deploy_contract_txhash",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract_txhash": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "deploy_tester_contract_txhash": {
            "name": "deploy_tester_contract_txhash",
            "location": 60,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "contracts_manager": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract_txhash": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "utils_contract": {
            "name": "utils_contract",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "deploy_tester_contract.f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {
                "contract_name": [],
                "args": [
                    "None"
                ]
            }
        },
        "deploy_contract_txhash.fn": {
            "name": "fn",
            "location": 31,
            "return": [],
            "arguments": {
                "web3": [],
                "deployer_address": [],
                "abi": [],
                "bytecode": [],
                "args": []
            }
        },
        "deploy_contract.fn": {
            "name": "fn",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "deployer_address": [
                    "Callable",
                    "int"
                ],
                "abi": [
                    "str"
                ],
                "bytecode": [
                    "str"
                ],
                "args": []
            }
        },
        "deploy_tester_contract_txhash.f": {
            "name": "f",
            "location": 64,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "args": [
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/endpoint_registry.py": {
        "endpoint_registry_contract": {
            "name": "endpoint_registry_contract",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/monitoring_service.py": {
        "monitoring_service_external": {
            "name": "monitoring_service_external",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address"
                ],
                "service_registry": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address"
                ],
                "uninitialized_user_deposit_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address"
                ]
            }
        },
        "monitoring_service_internals": {
            "name": "monitoring_service_internals",
            "location": 23,
            "return": [
                "bytearray",
                "float",
                "List[int]"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "web3.contracContract",
                    "Callable"
                ],
                "service_registry": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "web3.contracContract",
                    "Callable"
                ],
                "uninitialized_user_deposit_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "web3.contracContract",
                    "Callable"
                ],
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "web3.contracContract",
                    "Callable"
                ]
            }
        },
        "create_reward_proof": {
            "name": "create_reward_proof",
            "location": 37,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "token_network": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "get_private_key": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "create_reward_proof.get": {
            "name": "get",
            "location": 38,
            "return": [
                "tuple[int]",
                "int",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "signer": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "channel_identifier": [
                    "raiden.utils.TokenAddress",
                    "int",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash"
                ],
                "reward_amount": [
                    "raiden.utils.TokenAddress",
                    "int",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash"
                ],
                "token_network_address": [
                    "raiden.utils.TokenAddress",
                    "int",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash"
                ],
                "nonce": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash"
                ],
                "v": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/one_to_n.py": {
        "one_to_n_contract": {
            "name": "one_to_n_contract",
            "location": 9,
            "return": [
                "Optional[int]",
                "bytes"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ],
                "uninitialized_user_deposit_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ],
                "web3": [
                    "int",
                    "str",
                    "bytearray",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/secret_registry.py": {
        "secret_registry_contract": {
            "name": "secret_registry_contract",
            "location": 10,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/service_registry_fixtures.py": {
        "service_registry": {
            "name": "service_registry",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "bytes",
                    "Callable",
                    "bool",
                    "web3.contracContract",
                    "int"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "bytes",
                    "Callable",
                    "bool",
                    "web3.contracContract",
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/test_contracts.py": {
        "token_network_test_storage": {
            "name": "token_network_test_storage",
            "location": 11,
            "return": [
                "dict"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ]
            }
        },
        "token_network_test_signatures": {
            "name": "token_network_test_signatures",
            "location": 30,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ]
            }
        },
        "token_network_test_utils": {
            "name": "token_network_test_utils",
            "location": 49,
            "return": [
                "Callable",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "secret_registry_contract": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/token.py": {
        "token_args": {
            "name": "token_args",
            "location": 12,
            "return": [
                "tuple[typing.Union[int,typing.Text]]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "custom_token_factory": {
            "name": "custom_token_factory",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "bool",
                    "list",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "token_args": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "bool",
                    "list",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "custom_token": {
            "name": "custom_token",
            "location": 27,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "custom_token_factory": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[str]",
                    "web3.contracContract",
                    "Iterable[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "human_standard_token": {
            "name": "human_standard_token",
            "location": 33,
            "return": [
                "int",
                "Sequence[str]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "deploy_token_contract": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "list",
                    "str",
                    "list[]"
                ],
                "token_args": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "list",
                    "str",
                    "list[]"
                ]
            }
        },
        "deploy_token_contract": {
            "name": "deploy_token_contract",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "str",
                    "typing.Iterator",
                    "bool",
                    "Iterator[Tuple[str, Any, Any]]",
                    "dict[str, str]",
                    "web3.contracContract",
                    "T",
                    "Dict[str, str]"
                ]
            }
        },
        "standard_token_contract": {
            "name": "standard_token_contract",
            "location": 53,
            "return": [
                "str",
                "typing.Callable[, ]",
                "int",
                "list",
                "typing.Iterable[str]"
            ],
            "arguments": {
                "custom_token": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[str]",
                    "web3.contracContract",
                    "Iterable[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "custom_token_factory.f": {
            "name": "f",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "deploy_token_contract.f": {
            "name": "f",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "initial_amount": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, float]"
                ],
                "decimals": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, float]"
                ],
                "token_name": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, float]"
                ],
                "token_symbol": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/token_network_fixtures.py": {
        "get_token_network": {
            "name": "get_token_network",
            "location": 19,
            "return": [
                "str",
                "Optional[List[str]]",
                "bytes",
                "Union[str, int]"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "register_token_network": {
            "name": "register_token_network",
            "location": 29,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[str]",
                    "web3.contracContract",
                    "Iterable[str]",
                    "dict",
                    "List[str]"
                ],
                "token_network_registry_contract": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[str]",
                    "web3.contracContract",
                    "Iterable[str]",
                    "dict",
                    "List[str]"
                ],
                "contracts_manager": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[str]",
                    "web3.contracContract",
                    "Iterable[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "channel_participant_deposit_limit": {
            "name": "channel_participant_deposit_limit",
            "location": 55,
            "return": [
                "Dict[str, int]",
                "str",
                "float",
                "int",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "token_network_deposit_limit": {
            "name": "token_network_deposit_limit",
            "location": 60,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {}
        },
        "no_token_network": {
            "name": "no_token_network",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "None",
                    "tuple[]",
                    "Optional[str]",
                    "web3.Web3",
                    "integration-tests.tesrnode.Node",
                    "tuple"
                ]
            }
        },
        "token_network": {
            "name": "token_network",
            "location": 76,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "register_token_network": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.BlockHash"
                ],
                "custom_token": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.BlockHash"
                ],
                "channel_participant_deposit_limit": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.BlockHash"
                ],
                "token_network_deposit_limit": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.BlockHash"
                ],
                "web3": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "token_network_7_decimals": {
            "name": "token_network_7_decimals",
            "location": 92,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "register_token_network": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[]",
                    "list",
                    "None",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Balance",
                    "Optional[str]"
                ],
                "custom_token_7_decimals": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[]",
                    "list",
                    "None",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Balance",
                    "Optional[str]"
                ]
            }
        },
        "token_network_no_decimals": {
            "name": "token_network_no_decimals",
            "location": 98,
            "return": [
                "float",
                "Iterable[int]",
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "register_token_network": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "list[]",
                    "raiden.utils.Balance",
                    "raiden.utils.TokenAmount",
                    "None",
                    "Callable",
                    "list",
                    "raiden.utils.NetworkTimeout",
                    "Optional[list]"
                ],
                "custom_token_no_decimals": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "list[]",
                    "raiden.utils.Balance",
                    "raiden.utils.TokenAmount",
                    "None",
                    "Callable",
                    "list",
                    "raiden.utils.NetworkTimeout",
                    "Optional[list]"
                ]
            }
        },
        "token_network_contract": {
            "name": "token_network_contract",
            "location": 104,
            "return": [
                "Sequence[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "str",
                    "web3.contracContract",
                    "Callable"
                ],
                "secret_registry_contract": [
                    "str",
                    "int",
                    "bytes"
                ],
                "standard_token_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "str",
                    "web3.contracContract",
                    "Callable"
                ]
            }
        },
        "token_network_external": {
            "name": "token_network_external",
            "location": 115,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "web3": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ],
                "get_token_network": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ],
                "custom_token": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ],
                "secret_registry_contract": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ],
                "channel_participant_deposit_limit": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ],
                "token_network_deposit_limit": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden_contracts.contract_manager.ContractManager",
                    "raiden.utils.ChannelID"
                ]
            }
        },
        "get_token_network.get": {
            "name": "get",
            "location": 22,
            "return": [],
            "arguments": {
                "arguments": []
            }
        },
        "register_token_network.get": {
            "name": "get",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "token_address": [
                    "Sequence[int]",
                    "raiden.utils.TokenAmount",
                    "int",
                    "raiden.utils.Nonce",
                    "raiden.utils.LockedAmount"
                ],
                "channel_participant_deposit_limit": [
                    "Sequence[int]",
                    "raiden.utils.TokenAmount",
                    "int",
                    "raiden.utils.Nonce",
                    "raiden.utils.LockedAmount"
                ],
                "token_network_deposit_limit": [
                    "Sequence[int]",
                    "raiden.utils.TokenAmount",
                    "int",
                    "raiden.utils.Nonce",
                    "raiden.utils.LockedAmount"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/token_network_registry.py": {
        "get_token_network_registry": {
            "name": "get_token_network_registry",
            "location": 19,
            "return": [
                "str",
                "Optional[List[str]]",
                "bytes",
                "Union[str, int]"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "token_network_registry_constructor_args": {
            "name": "token_network_registry_constructor_args",
            "location": 27,
            "return": [
                "list[int]",
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Literal"
                ],
                "secret_registry_contract": [
                    "int",
                    "Literal"
                ]
            }
        },
        "token_network_registry_contract": {
            "name": "token_network_registry_contract",
            "location": 38,
            "return": [
                "Sequence[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "token_network_registry_constructor_args": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "token_network_registry_address": {
            "name": "token_network_registry_address",
            "location": 48,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "token_network_registry_contract": [
                    "dict[str, int]",
                    "web3.contracContract",
                    "str",
                    "Dict[str, int]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "add_and_register_token": {
            "name": "add_and_register_token",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Exception]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "token_network_registry_contract": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "deploy_token_contract": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "contracts_manager": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "channel_participant_deposit_limit": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ],
                "token_network_deposit_limit": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable",
                    "raiden_contracts.contract_manager.ContractManager"
                ]
            }
        },
        "get_token_network_registry.get": {
            "name": "get",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "arguments": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "add_and_register_token.f": {
            "name": "f",
            "location": 64,
            "return": [
                "dict",
                "str",
                "List[dict]",
                "Sequence[str]"
            ],
            "arguments": {
                "initial_amount": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "decimals": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "token_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "token_symbol": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/user_deposit.py": {
        "user_deposit_whole_balance_limit": {
            "name": "user_deposit_whole_balance_limit",
            "location": 12,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "uninitialized_user_deposit_contract": {
            "name": "uninitialized_user_deposit_contract",
            "location": 17,
            "return": [
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ],
                "custom_token": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ],
                "user_deposit_whole_balance_limit": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ]
            }
        },
        "user_deposit_contract": {
            "name": "user_deposit_contract",
            "location": 26,
            "return": [
                "int",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "uninitialized_user_deposit_contract": [
                    "int",
                    "str",
                    "web3.contracContract"
                ],
                "monitoring_service_external": [
                    "int",
                    "str",
                    "web3.contracContract"
                ],
                "one_to_n_contract": [
                    "int",
                    "str",
                    "web3.contracContract"
                ]
            }
        },
        "udc_transfer_contract": {
            "name": "udc_transfer_contract",
            "location": 38,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "dict[str, list[str]]",
                    "str",
                    "web3.contracContract",
                    "Dict[str, List[str]]"
                ],
                "uninitialized_user_deposit_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "dict[str, list[str]]",
                    "str",
                    "web3.contracContract",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "deposit_to_udc": {
            "name": "deposit_to_udc",
            "location": 45,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "bool",
                    "web3.contracContract",
                    "typing.Callable[[], typing.Any]",
                    "list[str]",
                    "Callable[[], Any]",
                    "List[str]"
                ],
                "custom_token": [
                    "bool",
                    "web3.contracContract",
                    "typing.Callable[[], typing.Any]",
                    "list[str]",
                    "Callable[[], Any]",
                    "List[str]"
                ]
            }
        },
        "deposit_to_udc.deposit": {
            "name": "deposit",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [
                    "int",
                    "eth_evm.HexAddress",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "amount": [
                    "int",
                    "eth_evm.HexAddress",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/tests/fixtures/base/address.py": {
        "send_funds": {
            "name": "send_funds",
            "location": 9,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "ethereum_tester": [
                    "int",
                    "Mapping",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None"
                ],
                "custom_token": [
                    "int",
                    "Mapping",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None"
                ]
            }
        },
        "send_funds.f": {
            "name": "f",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "target": [
                    "str",
                    "float",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/base/contract_manager.py": {
        "contract_source_manager": {
            "name": "contract_source_manager",
            "location": 11,
            "return": [
                "ContractSourceManager",
                "str",
                "List[str]",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "contracts_manager": {
            "name": "contracts_manager",
            "location": 16,
            "return": [
                "typing.Generator",
                "typing.Generator[]"
            ],
            "arguments": {
                "contract_source_manager": [
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/base/utils.py": {
        "create_account": {
            "name": "create_account",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int",
                    "eth_tester.EthereumTester",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "raiden.utils.Address"
                ],
                "ethereum_tester": [
                    "str",
                    "int",
                    "eth_tester.EthereumTester",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "raiden.utils.Address"
                ]
            }
        },
        "get_accounts": {
            "name": "get_accounts",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "create_account": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_private_key": {
            "name": "get_private_key",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ethereum_tester": [
                    "bool",
                    "eth_tester.EthereumTester",
                    "str",
                    "typing.Mapping",
                    "Mapping[str, Any]"
                ]
            }
        },
        "event_handler": {
            "name": "event_handler",
            "location": 64,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "web3": [
                    "float"
                ]
            }
        },
        "txn_cost": {
            "name": "txn_cost",
            "location": 79,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "txn_gas": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "txn_gas": {
            "name": "txn_gas",
            "location": 87,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "gas_measurement_results": {
            "name": "gas_measurement_results",
            "location": 96,
            "return": [
                "dict[, ]",
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "sys_args_contain": {
            "name": "sys_args_contain",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "searched": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "print_gas": {
            "name": "print_gas",
            "location": 110,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "txn_gas": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "gas_measurement_results": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_block": {
            "name": "get_block",
            "location": 131,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "BaseException",
                    "typing.Iterable[\"Issue\"]",
                    "str",
                    "Iterable[\"Issue\"]",
                    "bool"
                ]
            }
        },
        "create_account.get": {
            "name": "get",
            "location": 18,
            "return": [],
            "arguments": {
                "privkey": [
                    "None"
                ]
            }
        },
        "get_accounts.get": {
            "name": "get",
            "location": 42,
            "return": [],
            "arguments": {
                "number": [],
                "privkeys": []
            }
        },
        "get_private_key.get": {
            "name": "get",
            "location": 51,
            "return": [],
            "arguments": {
                "account_address": []
            }
        },
        "event_handler.get": {
            "name": "get",
            "location": 65,
            "return": [],
            "arguments": {
                "contract": [],
                "address": [],
                "abi": []
            }
        },
        "txn_cost.get": {
            "name": "get",
            "location": 80,
            "return": [],
            "arguments": {
                "txn_hash": []
            }
        },
        "txn_gas.get": {
            "name": "get",
            "location": 88,
            "return": [],
            "arguments": {
                "txn_hash": []
            }
        },
        "print_gas.get": {
            "name": "get",
            "location": 111,
            "return": [],
            "arguments": {
                "txn_hash": [],
                "message": [],
                "additional_gas": []
            }
        },
        "get_block.get": {
            "name": "get",
            "location": 132,
            "return": [
                "int",
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "txn_hash": [
                    "int",
                    "bool",
                    "eth_utils.ChecksumAddress",
                    "Optional[int]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/base/web3_fixtures.py": {
        "ethereum_tester": {
            "name": "ethereum_tester",
            "location": 20,
            "return": [
                "EthereumTester",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "patch_genesis_gas_limit": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "patch_genesis_gas_limit": {
            "name": "patch_genesis_gas_limit",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "web3": {
            "name": "web3",
            "location": 39,
            "return": [
                "",
                "typing.Generator[Web3]"
            ],
            "arguments": {
                "ethereum_tester": [
                    "str",
                    "web3.contracContract",
                    "Callable",
                    "trezor.utils.Writer"
                ]
            }
        },
        "auto_revert_chain": {
            "name": "auto_revert_chain",
            "location": 63,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "web3": [
                    "Awaitable[None]",
                    "str",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "_call_and_transact": {
            "name": "_call_and_transact",
            "location": 77,
            "return": [
                "Sequence['cirq.Qid']",
                "int"
            ],
            "arguments": {
                "contract_function": [
                    "web3.contracContractFunction",
                    "Optional[Dict]",
                    "Callable[[T, T], T]",
                    "T",
                    "int"
                ],
                "transaction_params": [
                    "None",
                    "web3.contracContractFunction",
                    "dict[, ]",
                    "int",
                    "Optional[Dict]",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "call_and_transact": {
            "name": "call_and_transact",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/fixtures/base/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/tests/property/strategies.py": {
        "direct_transfer": {
            "name": "direct_transfer",
            "location": 77,
            "return": [
                "Transfer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "registry_address": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "token": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "channel": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "recipient": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "locksroot": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "Transfer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message_identifier": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "payment_identifier": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "nonce": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "registry_address": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[\"CustomerReference\"]"
                ],
                "token": [
                    "str",
                    "int"
                ],
                "channel": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "transferred_amount": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "locked_amount": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "recipient": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "locksroot": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Transfer.sign": {
            "name": "sign",
            "location": 40,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "int",
                    "bytes",
                    "Counter[str]",
                    "typing.Counter"
                ],
                "node_address": [
                    "str",
                    "bytes",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "Transfer.to_bytes": {
            "name": "to_bytes",
            "location": 55,
            "return": [
                "list[]",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer.balance_hash": {
            "name": "balance_hash",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/property/test_tokennetwork.py": {
        "transaction_must_fail": {
            "name": "transaction_must_fail",
            "location": 42,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "error_message": [
                    "str",
                    "None"
                ]
            }
        },
        "TokenNetworkStateMachine.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenNetworkStateMachine.steps": {
            "name": "steps",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenNetworkStateMachine.execute_step": {
            "name": "execute_step",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str"
                ]
            }
        },
        "TokenNetworkStateMachine.is_participant": {
            "name": "is_participant",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "TokenNetworkStateMachine.contract_deposit": {
            "name": "contract_deposit",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deposit_amount": [
                    "int"
                ],
                "sender_pkey": [],
                "partner_pkey": []
            }
        },
        "TokenNetworkStateMachine.contract_close": {
            "name": "contract_close",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transfer": [],
                "closer_pkey": [],
                "partner_pkey": []
            }
        },
        "TokenNetworkStateMachine.contract_update_transfer": {
            "name": "contract_update_transfer",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transfer": [],
                "sender_pkey": [],
                "partner_pkey": []
            }
        },
        "TokenNetworkStateMachine.open_channel": {
            "name": "open_channel",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_files.py": {
        "test_load_json_from_corrupt_file": {
            "name": "test_load_json_from_corrupt_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_recover_from_signature.py": {
        "signature_test_contract": {
            "name": "signature_test_contract",
            "location": 15,
            "return": [
                "dict",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "deploy_tester_contract": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_verify": {
            "name": "test_verify",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "web3.contracContract"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "web3.contracContract"
                ],
                "signature_test_contract": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "web3.contracContract",
                    "raiden.utils.TokenAddress",
                    "bool"
                ]
            }
        },
        "test_verify_fail": {
            "name": "test_verify_fail",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signature_test_contract": [
                    "str",
                    "web3.contracContract",
                    "None",
                    "int",
                    "web3.Web3",
                    "Optional[str]",
                    "bool"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "str",
                    "int",
                    "torch.utils.data.Dataset"
                ]
            }
        },
        "test_ecrecover_output": {
            "name": "test_ecrecover_output",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "web3.contracContract"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "web3.contracContract"
                ],
                "signature_test_contract": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]",
                    "dict",
                    "dict[, ]"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_channel": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "web3.contracContract"
                ]
            }
        },
        "test_ecrecover_output_zero": {
            "name": "test_ecrecover_output_zero",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signature_test_contract": [
                    "int",
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "str"
                ]
            }
        },
        "test_ecrecover_output_fail": {
            "name": "test_ecrecover_output_fail",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signature_test_contract": [
                    "int",
                    "web3.contracContract",
                    "typing.Callable[, ]",
                    "web3.Web3",
                    "Callable"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_settle_timeout_invariant.py": {
        "test_settle_timeout_inrange": {
            "name": "test_settle_timeout_inrange",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token_network": [],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[int], Tuple]"
                ],
                "web3": [
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_unit_internals.py": {
        "test_min_uses_usigned": {
            "name": "test_min_uses_usigned",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_test_utils": [
                    "int",
                    "web3.contracContract",
                    "tuple[typing.Union[int,int]]",
                    "list[]",
                    "Tuple[int, int]",
                    "list",
                    "bool"
                ]
            }
        },
        "test_max_uses_usigned": {
            "name": "test_max_uses_usigned",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_test_utils": [
                    "int",
                    "web3.contracContract",
                    "list[set[int]]",
                    "float",
                    "List[Set[int]]",
                    "None",
                    "Optional[Union[int, float]]",
                    "bool"
                ]
            }
        },
        "test_min": {
            "name": "test_min",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_test_utils": [
                    "int",
                    "web3.contracContract",
                    "float",
                    "Union[int, float]",
                    "bool"
                ]
            }
        },
        "test_max": {
            "name": "test_max",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_test_utils": [
                    "list[set[int]]",
                    "str",
                    "web3.contracContract",
                    "bool",
                    "List[Set[int]]",
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_unit_signatures.py": {
        "test_recover_address_from_withdraw_message": {
            "name": "test_recover_address_from_withdraw_message",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token_network_test_signatures": [
                    "bool",
                    "str",
                    "int"
                ],
                "create_withdraw_signatures": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_channel_and_deposit": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_recover_address_from_balance_proof": {
            "name": "test_recover_address_from_balance_proof",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token_network_test_signatures": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_balance_proof": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_recover_address_from_balance_proof_update": {
            "name": "test_recover_address_from_balance_proof_update",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token_network_test_signatures": [
                    "int",
                    "bool"
                ],
                "create_balance_proof": [
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.ChannelID",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "create_balance_proof_update_signature": [
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.TokenAddress"
                ],
                "get_accounts": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "test_recover_address_from_cooperative_settle_signature": {
            "name": "test_recover_address_from_cooperative_settle_signature",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token_network_test_signatures": [
                    "float",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[int]",
                    "metrics_backend.utils.Address",
                    "List[int]"
                ],
                "create_cooperative_settle_signatures": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/test_web3_interaction.py": {
        "test_logfilter_with_nonexistent_event": {
            "name": "test_logfilter_with_nonexistent_event",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "web3.Web3"
                ]
            }
        },
        "test_call_and_transact_does_not_mine": {
            "name": "test_call_and_transact_does_not_mine",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "web3.Web3",
                    "Iterable[Any]"
                ],
                "custom_token": [
                    "web3.contracContract"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/unit/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/tests/utils/address.py": {
        "get_random_privkey": {
            "name": "get_random_privkey",
            "location": 7,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_random_address": {
            "name": "get_random_address",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "dict",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/utils/channel.py": {
        "get_participant_available_balance": {
            "name": "get_participant_available_balance",
            "location": 61,
            "return": [],
            "arguments": {
                "participant1": [
                    "list[str]",
                    "int",
                    "str"
                ],
                "participant2": [
                    "list[str]",
                    "int",
                    "str"
                ]
            }
        },
        "are_balance_proofs_valid": {
            "name": "are_balance_proofs_valid",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "participant1": [
                    "str"
                ],
                "participant2": [
                    "str"
                ]
            }
        },
        "were_balance_proofs_valid": {
            "name": "were_balance_proofs_valid",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "participant1": [
                    "str",
                    "float"
                ],
                "participant2": [
                    "str",
                    "float"
                ]
            }
        },
        "is_balance_proof_old": {
            "name": "is_balance_proof_old",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "participant1": [
                    "typing.Any",
                    "int",
                    "float"
                ],
                "participant2": [
                    "typing.Any",
                    "int",
                    "float"
                ]
            }
        },
        "get_settlement_amounts": {
            "name": "get_settlement_amounts",
            "location": 128,
            "return": [
                "SettlementValues"
            ],
            "arguments": {
                "participant1": [
                    "int",
                    "str"
                ],
                "participant2": [
                    "int",
                    "str"
                ]
            }
        },
        "get_expected_after_settlement_unlock_amounts": {
            "name": "get_expected_after_settlement_unlock_amounts",
            "location": 180,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "participant1": [
                    "str",
                    "None",
                    "list[list[int]]",
                    "list[str]"
                ],
                "participant2": [
                    "str",
                    "None",
                    "list[list[int]]",
                    "list[str]"
                ]
            }
        },
        "failsafe_add": {
            "name": "failsafe_add",
            "location": 205,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int",
                    "None"
                ],
                "b": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "failsafe_sub": {
            "name": "failsafe_sub",
            "location": 221,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "list[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "typing.Sequence[T]"
                ]
            }
        },
        "get_onchain_settlement_amounts": {
            "name": "get_onchain_settlement_amounts",
            "location": 234,
            "return": [
                "SettlementValues"
            ],
            "arguments": {
                "participant1": [
                    "str",
                    "int",
                    "float"
                ],
                "participant2": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_total_available_deposit": {
            "name": "get_total_available_deposit",
            "location": 295,
            "return": [],
            "arguments": {
                "participant1": [
                    "str",
                    "bool"
                ],
                "participant2": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_unlocked_amount": {
            "name": "get_unlocked_amount",
            "location": 305,
            "return": [
                "int"
            ],
            "arguments": {
                "secret_registry": [
                    "bool"
                ],
                "merkle_tree_leaves": []
            }
        },
        "get_participants_hash": {
            "name": "get_participants_hash",
            "location": 320,
            "return": [],
            "arguments": {
                "A": [
                    "int",
                    "str",
                    "None"
                ],
                "B": [
                    "int",
                    "float",
                    "list[int]",
                    "str"
                ]
            }
        },
        "LockedAmounts.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "claimable_locked": [
                    "int"
                ],
                "unclaimable_locked": [
                    "int"
                ]
            }
        },
        "LockedAmounts.locked": {
            "name": "locked",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelValues.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deposit": [
                    "int"
                ],
                "withdrawn": [
                    "int"
                ],
                "nonce": [
                    "int"
                ],
                "transferred": [
                    "int"
                ],
                "locked_amounts": [
                    "LockedAmounts"
                ],
                "locksroot": [],
                "additional_hash": []
            }
        },
        "ChannelValues.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/utils/constants.py": {},
    "lumino-contracts-master/raiden_contracts/tests/utils/contracts.py": {
        "get_web3": {
            "name": "get_web3",
            "location": 9,
            "return": [
                "Web3",
                "str",
                "bool"
            ],
            "arguments": {
                "eth_tester": [
                    "str",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.PrivateKey",
                    "bytes"
                ],
                "deployer_key": [
                    "str",
                    "Mapping[str, str]",
                    "bytes"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "None",
                    "Optional[str]"
                ],
                "contracts_manager": [
                    "str",
                    "Callable[[], Any]",
                    "int"
                ],
                "contract_name": [
                    "str",
                    "int",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "deployer_key": [
                    "bytes",
                    "bool",
                    "str",
                    "Union[bytes, str, None]",
                    "Union[bytes, str]"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "deploy_custom_token": {
            "name": "deploy_custom_token",
            "location": 40,
            "return": [
                "Sequence[str]",
                "int",
                "dict",
                "Callable",
                "web3.contracContract"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "cmk.gui.utils.html.HTML"
                ],
                "deployer_key": [
                    "str",
                    "cmk.gui.utils.html.HTML"
                ]
            }
        },
        "get_token_network": {
            "name": "get_token_network",
            "location": 46,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "web3": [
                    "bytearray",
                    "str",
                    "int"
                ],
                "address": [
                    "bytearray",
                    "str",
                    "int"
                ],
                "contracts_manager": [
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/utils/mock.py": {
        "fake_hex": {
            "name": "fake_hex",
            "location": 5,
            "return": [
                "typing.Text",
                "List[str]",
                "list",
                "Dict[int, int]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "Tuple[int]"
                ],
                "fill": [
                    "typing.Text",
                    "int",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "fake_bytes": {
            "name": "fake_bytes",
            "location": 9,
            "return": [
                "int",
                "bool",
                "bytes",
                "Dict[str, Any]",
                "Union[bytes, bytearray]",
                "dict"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "fill": [
                    "typing.Text",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "make_address": {
            "name": "make_address",
            "location": 13,
            "return": [
                "bytes",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "lumino-contracts-master/raiden_contracts/tests/utils/__init__.py": {},
    "lumino-contracts-master/raiden_contracts/utils/events.py": {
        "check_secret_revealed": {
            "name": "check_secret_revealed",
            "location": 6,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "secrethash": [
                    "bytes",
                    "List[bytes]",
                    "list[bytes]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "secret": [
                    "bytes",
                    "List[bytes]",
                    "list[bytes]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "check_secrets_revealed": {
            "name": "check_secrets_revealed",
            "location": 14,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "secrethashes": [
                    "bytes",
                    "List[bytes]",
                    "list[bytes]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "secrets": [
                    "bytes",
                    "List[bytes]",
                    "list[bytes]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "check_token_network_created": {
            "name": "check_token_network_created",
            "location": 22,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "token_address": [
                    "int",
                    "eth_evm.HexAddress",
                    "typing.Mapping",
                    "Mapping"
                ],
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress",
                    "typing.Mapping",
                    "Mapping"
                ]
            }
        },
        "check_address_registered": {
            "name": "check_address_registered",
            "location": 32,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "eth_address": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "endpoint": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_channel_opened": {
            "name": "check_channel_opened",
            "location": 40,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "float",
                    "str",
                    "eth_evm.HexAddress",
                    "bool"
                ],
                "participant1": [
                    "int",
                    "float",
                    "str",
                    "eth_evm.HexAddress",
                    "bool"
                ],
                "participant2": [
                    "int",
                    "float",
                    "str",
                    "eth_evm.HexAddress",
                    "bool"
                ],
                "settle_timeout": [
                    "int",
                    "float",
                    "str",
                    "eth_evm.HexAddress",
                    "bool"
                ]
            }
        },
        "check_new_deposit": {
            "name": "check_new_deposit",
            "location": 56,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "bool",
                    "Callable"
                ],
                "participant": [
                    "int",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "bool",
                    "Callable"
                ],
                "deposit": [
                    "int",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "bool",
                    "Callable"
                ]
            }
        },
        "check_withdraw": {
            "name": "check_withdraw",
            "location": 67,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "str",
                    "float",
                    "eth_evm.HexAddress",
                    "bool"
                ],
                "participant": [
                    "int",
                    "str",
                    "float",
                    "eth_evm.HexAddress",
                    "bool"
                ],
                "withdrawn_amount": [
                    "int",
                    "str",
                    "float",
                    "eth_evm.HexAddress",
                    "bool"
                ]
            }
        },
        "check_channel_closed": {
            "name": "check_channel_closed",
            "location": 78,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "channel_identifier": [
                    "float",
                    "bool",
                    "str"
                ],
                "closing_participant": [
                    "float",
                    "bool",
                    "str"
                ],
                "nonce": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "check_channel_unlocked": {
            "name": "check_channel_unlocked",
            "location": 89,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "receiver": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "sender": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "locksroot": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "unlocked_amount": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "returned_tokens": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.BinaryIO",
                    "None",
                    "bool",
                    "BinaryIO",
                    "Optional[int]"
                ]
            }
        },
        "check_transfer_updated": {
            "name": "check_transfer_updated",
            "location": 108,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "channel_identifier": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "closing_participant": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "nonce": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "check_channel_settled": {
            "name": "check_channel_settled",
            "location": 119,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "None"
                ],
                "participant1_amount": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "None"
                ],
                "participant2_amount": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "None"
                ]
            }
        },
        "check_secret_revealed.get": {
            "name": "get",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_secrets_revealed.get": {
            "name": "get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_token_network_created.get": {
            "name": "get",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_address_registered.get": {
            "name": "get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_channel_opened.get": {
            "name": "get",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_new_deposit.get": {
            "name": "get",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_withdraw.get": {
            "name": "get",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_channel_closed.get": {
            "name": "get",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_channel_unlocked.get": {
            "name": "get",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_transfer_updated.get": {
            "name": "get",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "check_channel_settled.get": {
            "name": "get",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/join-contracts.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "contract": [
                    "TextIO",
                    "typing.TextIO",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "output": [
                    "TextIO",
                    "List[str]",
                    "str"
                ],
                "import_map": [
                    "str",
                    "bytes",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "ContractJoiner.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "import_map": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "ContractJoiner.join": {
            "name": "join",
            "location": 31,
            "return": [
                "list[]",
                "str",
                "list[str]",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "contract_file": [
                    "list[str]",
                    "IO",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "ContractJoiner._on_pragma_line": {
            "name": "_on_pragma_line",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "out": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "ContractJoiner._on_import_line": {
            "name": "_on_import_line",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripped_line": [
                    "str"
                ],
                "out": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/logs.py": {
        "sandwitch_print": {
            "name": "sandwitch_print",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "int",
                    "float",
                    "bool"
                ],
                "address": [
                    "int",
                    "float",
                    "bool"
                ],
                "abi": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LogHandler.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_hash": [
                    "str",
                    "int"
                ],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "callback": [
                    "str",
                    "bool",
                    "None"
                ],
                "count": [
                    "int",
                    "str"
                ]
            }
        },
        "LogHandler.check": {
            "name": "check",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LogHandler._handle_waited_log": {
            "name": "_handle_waited_log",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "raiden_libs.events.Event",
                    "apscheduler.events.JobExecutionEvent"
                ]
            }
        },
        "LogHandler.handle_log": {
            "name": "handle_log",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "relay.events.Event",
                    "events.events_base.EventType",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LogHandler.wait": {
            "name": "wait",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LogHandler.assert_event": {
            "name": "assert_event",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_hash": [
                    "str",
                    "utils.types.JSON"
                ],
                "event_name": [
                    "str",
                    "utils.types.JSON"
                ],
                "args": [],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "LogFilter.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "abi": [
                    "list[]",
                    "str",
                    "list",
                    "tuple[int]",
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Sequence[Sequence[float]]"
                ],
                "address": [
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "None",
                    "Callable",
                    "dict[str, str]",
                    "raiden.utils.Callable",
                    "typing.Callable[, ]",
                    "Optional[float]",
                    "float"
                ],
                "event_name": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "from_block": [
                    "int",
                    "Optional[bool]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "raiden.utils.Callable",
                    "Optional[float]"
                ],
                "to_block": [
                    "typing.Text",
                    "Optional[bool]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "raiden.utils.Callable",
                    "Optional[float]"
                ],
                "filters": [
                    "cmk.gui.plugins.visuals.utils.VisualInfo",
                    "bool",
                    "None",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "callback": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "Callable[..., None]",
                    "list[str]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "LogFilter.init": {
            "name": "init",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post_callback": [
                    "Optional[Callable[[], None]]",
                    "None",
                    "str",
                    "typing.Callable[[], None]",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LogFilter.get_logs": {
            "name": "get_logs",
            "location": 181,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogFilter.set_log_data": {
            "name": "set_log_data",
            "location": 188,
            "return": [
                "Dict[str, Any]",
                "mode.utils.Counter[faustypes.TP]",
                "dict",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "Union[int, str]"
                ]
            }
        },
        "LogFilter.uninstall": {
            "name": "uninstall",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.assert_event.assert_args": {
            "name": "assert_args",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, List[Callable]]",
                    "List[Dict]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/merkle.py": {
        "_hash_pair": {
            "name": "_hash_pair",
            "location": 11,
            "return": [
                "bytes",
                "Callable",
                "int",
                "str",
                "typing.IO",
                "IO",
                "None"
            ],
            "arguments": {
                "first": [
                    "bytes",
                    "str",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "Optional[int]",
                    "int"
                ],
                "second": [
                    "bytes",
                    "str",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "compute_merkle_tree": {
            "name": "compute_merkle_tree",
            "location": 27,
            "return": [
                "MerkleTree",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "items": [
                    "bytes",
                    "str",
                    "int",
                    "Iterable[bytes]",
                    "Callable[[T], bool]",
                    "dict",
                    "\"Job\""
                ]
            }
        },
        "get_merkle_root": {
            "name": "get_merkle_root",
            "location": 53,
            "return": [],
            "arguments": {
                "merkle_tree": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/mint_tokens.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "rpc_url": [
                    "str",
                    "bool",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "private_key": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[str]",
                    "Union[str, None]"
                ],
                "token_address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "amount": [
                    "Union[str, List[str]]",
                    "str",
                    "Dict[str, List[str]]",
                    "list[str]",
                    "Optional[int]",
                    "Tuple[Literal, Literal]",
                    "dict[str, list[str]]",
                    "Optional[Callable]",
                    "int",
                    "dict",
                    "None",
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/pending_transfers.py": {
        "get_pending_transfers_tree": {
            "name": "get_pending_transfers_tree",
            "location": 28,
            "return": [
                "PendingTransfersTree",
                "float",
                "int",
                "List[str]",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "unlockable_amounts": [
                    "Optional[int]",
                    "None",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "expired_amounts": [
                    "Optional[int]",
                    "None",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "min_expiration_delta": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "max_expiration_delta": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "unlockable_amount": [
                    "int",
                    "None",
                    "raiden.utils.TokenAmount"
                ],
                "expired_amount": [
                    "int",
                    "None",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "get_pending_transfers": {
            "name": "get_pending_transfers",
            "location": 85,
            "return": [
                "tuple[list[list[str]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "unlockable_amounts": [
                    "str",
                    "List[str]",
                    "Callable[[str, str], float]"
                ],
                "expired_amounts": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "min_expiration_delta": [
                    "int",
                    "float",
                    "List[float]",
                    "str",
                    "list[float]",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "max_expiration_delta": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_packed_transfers": {
            "name": "get_packed_transfers",
            "location": 109,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "pending_transfers": [
                    "bytes",
                    "str",
                    "Optional[Any]",
                    "int"
                ],
                "types": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "get_locked_amount": {
            "name": "get_locked_amount",
            "location": 114,
            "return": [
                "int",
                "str",
                "List[int]",
                "raiden.utils.Tuple[int, int]"
            ],
            "arguments": {
                "pending_transfers": [
                    "int",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "random_secret": {
            "name": "random_secret",
            "location": 118,
            "return": [
                "tuple[typing.Union[str,int,dict[str, list[str]]]]",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "get_random_values_for_sum": {
            "name": "get_random_values_for_sum",
            "location": 124,
            "return": [
                "list[int]",
                "str",
                "list"
            ],
            "arguments": {
                "values_sum": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "Union[List, qutebrowser.utils.usertypes.Unset]",
                    "cmk.utils.type_defs.Seconds"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/private_key.py": {
        "check_permission_safety": {
            "name": "check_permission_safety",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "get_private_key": {
            "name": "get_private_key",
            "location": 29,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "bytes",
                "Optional[int]",
                "Optional[pathlib.Path]",
                "int"
            ],
            "arguments": {
                "key_path": [
                    "str"
                ],
                "password_path": [
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "bool"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/proofs.py": {
        "hash_balance_data": {
            "name": "hash_balance_data",
            "location": 10,
            "return": [
                "Type[Any]",
                "type"
            ],
            "arguments": {
                "transferred_amount": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "locked_amount": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "locksroot": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "eth_sign_hash_message": {
            "name": "eth_sign_hash_message",
            "location": 18,
            "return": [
                "int",
                "Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "encoded_message": [
                    "bytes",
                    "str",
                    "int",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "hash_balance_proof": {
            "name": "hash_balance_proof",
            "location": 27,
            "return": [
                "str",
                "int",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "token_network_address": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "balance_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "nonce": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "additional_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ]
            }
        },
        "hash_balance_proof_update_message": {
            "name": "hash_balance_proof_update_message",
            "location": 46,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "token_network_address": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "balance_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "nonce": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "additional_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "closing_signature": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ]
            }
        },
        "hash_cooperative_settle_message": {
            "name": "hash_cooperative_settle_message",
            "location": 67,
            "return": [
                "Hashable",
                "Tuple[float, float]",
                "bytes",
                "float",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant1_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant1_balance": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant2_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant2_balance": [
                    "int",
                    "eth_evm.HexAddress"
                ]
            }
        },
        "hash_withdraw_message": {
            "name": "hash_withdraw_message",
            "location": 88,
            "return": [
                "Hashable",
                "Tuple[float, float]",
                "bytes",
                "float",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "amount_to_withdraw": [
                    "int",
                    "eth_evm.HexAddress"
                ]
            }
        },
        "hash_reward_proof": {
            "name": "hash_reward_proof",
            "location": 105,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "channel_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "reward_amount": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "chain_id": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "nonce": [
                    "int",
                    "eth_evm.HexAddress"
                ]
            }
        },
        "sign_balance_proof": {
            "name": "sign_balance_proof",
            "location": 121,
            "return": [
                "Dict[str, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "privatekey": [
                    "int",
                    "str"
                ],
                "token_network_address": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "balance_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "nonce": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "additional_hash": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress"
                ],
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "sign_balance_proof_update_message": {
            "name": "sign_balance_proof_update_message",
            "location": 143,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "privatekey": [
                    "str",
                    "int"
                ],
                "token_network_address": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "chain_identifier": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "channel_identifier": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "balance_hash": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "nonce": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "additional_hash": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "closing_signature": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "eth_evm.HexAddress",
                    "Callable",
                    "web3.Web3"
                ],
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "sign_cooperative_settle_message": {
            "name": "sign_cooperative_settle_message",
            "location": 167,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "privatekey": [
                    "str",
                    "int",
                    "float"
                ],
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant1_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant1_balance": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant2_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant2_balance": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "v": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "sign_withdraw_message": {
            "name": "sign_withdraw_message",
            "location": 191,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "privatekey": [
                    "str",
                    "int"
                ],
                "token_network_address": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "chain_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "channel_identifier": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "participant": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "amount_to_withdraw": [
                    "int",
                    "eth_evm.HexAddress"
                ],
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "sign_reward_proof": {
            "name": "sign_reward_proof",
            "location": 211,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "privatekey": [
                    "int",
                    "str",
                    "float"
                ],
                "channel_identifier": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "list[str]",
                    "List[str]"
                ],
                "reward_amount": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "list[str]",
                    "List[str]"
                ],
                "token_network_address": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "list[str]",
                    "List[str]"
                ],
                "chain_id": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "list[str]",
                    "List[str]"
                ],
                "nonce": [
                    "int",
                    "bytes",
                    "eth_evm.HexAddress",
                    "list[str]",
                    "List[str]"
                ],
                "v": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "sign_one_to_n_iou": {
            "name": "sign_one_to_n_iou",
            "location": 231,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "privatekey": [
                    "int",
                    "str"
                ],
                "sender": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "receiver": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "amount": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "expiration_block": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "one_to_n_address": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "chain_id": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "eth_evm.HexAddress"
                ],
                "v": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/signature.py": {
        "sign": {
            "name": "sign",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "privkey": [
                    "int",
                    "str"
                ],
                "msg": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[Union[float, int]]",
                    "float",
                    "Union[float, int]",
                    "None",
                    "IO[bytes]",
                    "typing.IO"
                ],
                "v": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "private_key_to_address": {
            "name": "private_key_to_address",
            "location": 25,
            "return": [
                "dict",
                "bool",
                "str",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "private_key": [
                    "bytes",
                    "str",
                    "eth_keys.datatypes.PrivateKey"
                ]
            }
        },
        "public_key_to_address": {
            "name": "public_key_to_address",
            "location": 35,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/transaction.py": {
        "check_successful_tx": {
            "name": "check_successful_tx",
            "location": 7,
            "return": [
                "tuple[typing.Union[str,list[None],list[int],tuple[typing.Union[typing.Literal,typing.Literal]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "Optional[float]",
                    "float",
                    "int",
                    "str",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "txid": [
                    "Optional[float]",
                    "float",
                    "int",
                    "str",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "timeout": [
                    "int",
                    "bool"
                ]
            }
        },
        "wait_for_transaction_receipt": {
            "name": "wait_for_transaction_receipt",
            "location": 29,
            "return": [
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "bool",
                "int",
                "bytes",
                "set",
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "bool"
                ],
                "txid": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/versions.py": {
        "contracts_version_expects_deposit_limits": {
            "name": "contracts_version_expects_deposit_limits",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "contracts_version": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "contract_version_with_max_token_networks": {
            "name": "contract_version_with_max_token_networks",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        }
    },
    "lumino-contracts-master/raiden_contracts/utils/__init__.py": {}
}
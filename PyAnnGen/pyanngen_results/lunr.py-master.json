{
    "lunr.py-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "find_version": {
            "name": "find_version",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "lunr.py-master/docs/conf.py": {},
    "lunr.py-master/lunr/builder.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "typing.Collection",
                    "list[str]",
                    "None"
                ],
                "boost": [
                    "int"
                ],
                "extractor": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__hash__": {
            "name": "__hash__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.ref": {
            "name": "ref",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "float",
                    "list[]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Builder.field": {
            "name": "field",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "boost": [
                    "int"
                ],
                "extractor": [
                    "None",
                    "str"
                ]
            }
        },
        "Builder.b": {
            "name": "b",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "float",
                    "int"
                ]
            }
        },
        "Builder.k1": {
            "name": "k1",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.add": {
            "name": "add",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "list[str]"
                ],
                "attributes": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Builder.build": {
            "name": "build",
            "location": 178,
            "return": [
                "lunr.index.Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._create_token_set": {
            "name": "_create_token_set",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._calculate_average_field_lengths": {
            "name": "_calculate_average_field_lengths",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._create_field_vectors": {
            "name": "_create_field_vectors",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.use": {
            "name": "use",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "list[str]",
                    "None",
                    "typing.Sequence[str]",
                    "tuple[]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "lunr.py-master/lunr/exceptions.py": {},
    "lunr.py-master/lunr/field_ref.py": {
        "FieldRef.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_ref": [
                    "str",
                    "bool"
                ],
                "field_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "string_value": [
                    "str",
                    "None",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "FieldRef.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldRef.from_string": {
            "name": "from_string",
            "location": 17,
            "return": [
                "FieldRef"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFieldRef]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "FieldRef.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "Dict[str,Any]",
                "Type",
                "List",
                "Tuple[Union[Any,Any,Any,Any]]",
                "Dict[str,None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/lunr/idf.py": {
        "idf": {
            "name": "idf",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "posting": [
                    "List[str]",
                    "List",
                    "Tuple",
                    "Dict[str,Any]",
                    "int"
                ],
                "document_count": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "lunr.py-master/lunr/index.py": {
        "Index.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inverted_index": [
                    "int",
                    "float",
                    "list[str]",
                    "str",
                    "typing.Mapping",
                    "None",
                    "typing.Sequence[str]"
                ],
                "field_vectors": [
                    "int",
                    "float",
                    "list[str]",
                    "str",
                    "typing.Mapping",
                    "None",
                    "typing.Sequence[str]"
                ],
                "token_set": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "int",
                    "typing.Container",
                    "dict[cmk.utils.type_defs.HostName, list[cmk.utils.type_defs.HostName]]",
                    "list[typing.Union[str,F]]"
                ],
                "fields": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "list[]",
                    "list[str]",
                    "list[int]"
                ],
                "pipeline": [
                    "int",
                    "float",
                    "list[str]",
                    "str",
                    "typing.Mapping",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Index.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float"
                ]
            }
        },
        "Index.search": {
            "name": "search",
            "location": 42,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "query_string": [
                    "str"
                ]
            }
        },
        "Index.create_query": {
            "name": "create_query",
            "location": 62,
            "return": [
                "lunr.query.Query"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "bool",
                    "typing.Any",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Index.query": {
            "name": "query",
            "location": 83,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "typing.Mapping"
                ],
                "callback": [
                    "None",
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "typing.Match"
                ]
            }
        },
        "Index.serialize": {
            "name": "serialize",
            "location": 315,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.load": {
            "name": "load",
            "location": 336,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIndex]"
                ],
                "serialized_index": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "lunr.py-master/lunr/match_data.py": {
        "MatchData.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "bool",
                    "None",
                    "Callable[...,T]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "field": [
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "str",
                    "Optional[int]",
                    "bool",
                    "int",
                    "Callable[[Type,str],bool]",
                    "Callable[Type,str,bool]"
                ],
                "metadata": [
                    "int",
                    "None",
                    "Dict[str,List[str]]",
                    "str",
                    "Dict[int,int]",
                    "Optional[AbstractSet[str]]",
                    "List[float]",
                    "Dict[str,list[str]]",
                    "AbstractSet"
                ]
            }
        },
        "MatchData.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchData.combine": {
            "name": "combine",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "MatchData.add": {
            "name": "add",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [],
                "field": [
                    "str"
                ],
                "metadata": []
            }
        },
        "MatchData.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "lunr.py-master/lunr/pipeline.py": {
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.register_function": {
            "name": "register_function",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Exception"
                ],
                "fn": [
                    "str",
                    "List"
                ],
                "label": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "Pipeline.load": {
            "name": "load",
            "location": 42,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPipeline]"
                ],
                "serialised": [
                    "str",
                    "bool",
                    "Type[object]"
                ]
            }
        },
        "Pipeline.add": {
            "name": "add",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.warn_if_function_not_registered": {
            "name": "warn_if_function_not_registered",
            "location": 69,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "Type"
                ]
            }
        },
        "Pipeline.after": {
            "name": "after",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "existing_fn": [
                    "int",
                    "List[int]",
                    "float",
                    "List",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "new_fn": [
                    "Dict",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Pipeline.before": {
            "name": "before",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "existing_fn": [
                    "int",
                    "List[int]",
                    "float",
                    "List",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "new_fn": [
                    "Dict",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Pipeline.remove": {
            "name": "remove",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pipeline.skip": {
            "name": "skip",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "field_names": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Pipeline.run": {
            "name": "run",
            "location": 117,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "Optional[str]"
                ],
                "field_name": [
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Pipeline.run_string": {
            "name": "run_string",
            "location": 146,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "metadata": [
                    "str",
                    "None"
                ]
            }
        },
        "Pipeline.reset": {
            "name": "reset",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.serialize": {
            "name": "serialize",
            "location": 160,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/lunr/query.py": {
        "Query.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_fields": [
                    "AbstractSet[str]",
                    "AbstractSet",
                    "str",
                    "Container[str]",
                    "Dict[str,Any]",
                    "Container"
                ]
            }
        },
        "Query.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.clause": {
            "name": "clause",
            "location": 40,
            "return": [
                "Query"
            ],
            "arguments": {
                "self": [
                    "_TQuery@@Query@@"
                ]
            }
        },
        "Query.term": {
            "name": "term",
            "location": 73,
            "return": [
                "Query"
            ],
            "arguments": {
                "self": [
                    "_TQuery@@Query@@"
                ],
                "term": [
                    "List",
                    "List[world.PerceivedNoise]",
                    "Union[bool,List[bool]]",
                    "List[float]",
                    "List[bool]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "Query.is_negated": {
            "name": "is_negated",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clause.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "None",
                    "List[str]"
                ],
                "fields": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "Set",
                    "Optional[str]"
                ],
                "edit_distance": [
                    "int",
                    "bool",
                    "Sequence[Sequence[float]]",
                    "List[str]"
                ],
                "use_pipeline": [
                    "bool"
                ],
                "boost": [
                    "int",
                    "bool",
                    "Sequence[Sequence[float]]",
                    "List[str]"
                ],
                "wildcard": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "List[str]"
                ],
                "presence": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "List[str]"
                ]
            }
        },
        "Clause.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/lunr/query_lexer.py": {
        "QueryLexer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "tuple"
                ]
            }
        },
        "QueryLexer.width": {
            "name": "width",
            "location": 22,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.ignore": {
            "name": "ignore",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.backup": {
            "name": "backup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.accept_digit_run": {
            "name": "accept_digit_run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.slice_string": {
            "name": "slice_string",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.next": {
            "name": "next",
            "location": 60,
            "return": [
                "Optional[bytes]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.emit": {
            "name": "emit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "List[T]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "QueryLexer.escape_character": {
            "name": "escape_character",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_field": {
            "name": "lex_field",
            "location": 83,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_term": {
            "name": "lex_term",
            "location": 89,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_edit_distance": {
            "name": "lex_edit_distance",
            "location": 98,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_boost": {
            "name": "lex_boost",
            "location": 104,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_EOS": {
            "name": "lex_EOS",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryLexer.lex_text": {
            "name": "lex_text",
            "location": 114,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/lunr/query_parser.py": {
        "QueryParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "bool",
                    "float",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "query": [
                    "int",
                    "Sequence[int]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.peek_lexeme": {
            "name": "peek_lexeme",
            "location": 24,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.consume_lexeme": {
            "name": "consume_lexeme",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.next_clause": {
            "name": "next_clause",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse_clause": {
            "name": "parse_clause",
            "location": 40,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]"
                ],
                "parser": []
            }
        },
        "QueryParser.parse_field": {
            "name": "parse_field",
            "location": 62,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "QueryParser.parse_term": {
            "name": "parse_term",
            "location": 84,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "QueryParser.parse_presence": {
            "name": "parse_presence",
            "location": 94,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "QueryParser.parse_edit_distance": {
            "name": "parse_edit_distance",
            "location": 125,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "QueryParser.parse_boost": {
            "name": "parse_boost",
            "location": 138,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "QueryParser._peek_next_lexeme": {
            "name": "_peek_next_lexeme",
            "location": 151,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]"
                ],
                "parser": []
            }
        }
    },
    "lunr.py-master/lunr/stemmer.py": {
        "stemmer": {
            "name": "stemmer",
            "location": 435,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "i": [
                    "None",
                    "bool",
                    "str",
                    "list[bytes]"
                ],
                "tokens": [
                    "None",
                    "bool",
                    "str",
                    "list[bytes]"
                ]
            }
        },
        "PorterStemmer.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.cons": {
            "name": "cons",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "PorterStemmer.m": {
            "name": "m",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.vowelinstem": {
            "name": "vowelinstem",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.doublec": {
            "name": "doublec",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int"
                ]
            }
        },
        "PorterStemmer.cvc": {
            "name": "cvc",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "PorterStemmer.ends": {
            "name": "ends",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "PorterStemmer.setto": {
            "name": "setto",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "PorterStemmer.r": {
            "name": "r",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "PorterStemmer.step1ab": {
            "name": "step1ab",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.step1c": {
            "name": "step1c",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.step2": {
            "name": "step2",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.step3": {
            "name": "step3",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.step4": {
            "name": "step4",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.step5": {
            "name": "step5",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterStemmer.stem": {
            "name": "stem",
            "location": 398,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "metadata": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "lunr.py-master/lunr/stop_word_filter.py": {
        "generate_stop_word_filter": {
            "name": "generate_stop_word_filter",
            "location": 126,
            "return": [
                "Callable"
            ],
            "arguments": {
                "stop_words": [
                    "bool",
                    "str"
                ],
                "language": [
                    "float",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ]
            }
        },
        "generate_stop_word_filter.stop_word_filter": {
            "name": "stop_word_filter",
            "location": 134,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]"
                ],
                "i": [
                    "None",
                    "bool",
                    "Iterable[Tuple[str,str]]",
                    "Callable[,int]",
                    "str"
                ],
                "tokens": [
                    "None",
                    "bool",
                    "Iterable[Tuple[str,str]]",
                    "Callable[,int]",
                    "str"
                ]
            }
        }
    },
    "lunr.py-master/lunr/token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "metadata": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.update": {
            "name": "update",
            "location": 12,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [
                    "_TToken@@Token@@"
                ],
                "fn": [
                    "List[object]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "List[str]",
                    "Union[List,Dict]",
                    "List",
                    "Sequence[Tuple[str,Any]]",
                    "Dict",
                    "Sequence[tuple[Union[str,Any]]]"
                ]
            }
        },
        "Token.clone": {
            "name": "clone",
            "location": 19,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [
                    "_TToken@@Token@@"
                ],
                "fn": [
                    "Sequence[cirq.Qid]",
                    "None"
                ]
            }
        }
    },
    "lunr.py-master/lunr/tokenizer.py": {
        "default_separator": {
            "name": "default_separator",
            "location": 9,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "Tokenizer": {
            "name": "Tokenizer",
            "location": 13,
            "return": [
                "List[lunr.token.Token]"
            ],
            "arguments": {
                "obj": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "Set[str]",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "metadata": [
                    "str",
                    "None",
                    "bytes",
                    "hackathon.utils.utils.DataMessage"
                ],
                "separator": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        }
    },
    "lunr.py-master/lunr/token_set.py": {
        "TokenSet.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSet.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSet.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSet.from_string": {
            "name": "from_string",
            "location": 55,
            "return": [
                "TokenSet"
            ],
            "arguments": {
                "self": [
                    "Type[_TTokenSet]"
                ],
                "string": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TokenSet.from_fuzzy_string": {
            "name": "from_fuzzy_string",
            "location": 82,
            "return": [
                "TokenSet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTokenSet]"
                ],
                "string": [
                    "str",
                    "bool",
                    "MutableSequence[str]",
                    "MutableSequence"
                ],
                "edit_distance": [
                    "str",
                    "bool",
                    "MutableSequence[str]",
                    "MutableSequence"
                ]
            }
        },
        "TokenSet.from_list": {
            "name": "from_list",
            "location": 203,
            "return": [
                "int",
                "Optional[bytes]",
                "Optional[Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable",
                    "float",
                    "Dict",
                    "Union[str,int]",
                    "int"
                ],
                "list_of_words": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable",
                    "float",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "TokenSet.from_clause": {
            "name": "from_clause",
            "location": 214,
            "return": [
                "TokenSet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTokenSet]"
                ],
                "clause": [
                    "bool",
                    "str"
                ]
            }
        },
        "TokenSet.to_list": {
            "name": "to_list",
            "location": 220,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSet.intersect": {
            "name": "intersect",
            "location": 239,
            "return": [
                "TokenSet"
            ],
            "arguments": {
                "self": [
                    "_TTokenSet@@TokenSet@@"
                ],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "lunr.py-master/lunr/token_set_builder.py": {
        "TokenSetBuilder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSetBuilder.insert": {
            "name": "insert",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "List['cirq.Qid']",
                    "List[int]",
                    "float"
                ]
            }
        },
        "TokenSetBuilder.finish": {
            "name": "finish",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSetBuilder.minimize": {
            "name": "minimize",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "down_to": [
                    "int",
                    "bytes",
                    "str",
                    "List"
                ]
            }
        }
    },
    "lunr.py-master/lunr/trimmer.py": {
        "trimmer": {
            "name": "trimmer",
            "location": 8,
            "return": [
                "Dict",
                "str",
                "int",
                "bool",
                "MutableMapping[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "i": [
                    "bool",
                    "str",
                    "None",
                    "List[bytes]"
                ],
                "tokens": [
                    "bool",
                    "str",
                    "None",
                    "List[bytes]"
                ]
            }
        },
        "trimmer.trim": {
            "name": "trim",
            "location": 9,
            "return": [
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "metadata": [
                    "None",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "lunr.py-master/lunr/utils.py": {
        "as_string": {
            "name": "as_string",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Optional[float]",
                    "List[str]",
                    "float",
                    "None"
                ]
            }
        },
        "CompleteSet.union": {
            "name": "union",
            "location": 6,
            "return": [
                "CompleteSet"
            ],
            "arguments": {
                "self": [
                    "_TCompleteSet@@CompleteSet@@"
                ],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "CompleteSet.intersection": {
            "name": "intersection",
            "location": 9,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "CompleteSet.__contains__": {
            "name": "__contains__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "lunr.py-master/lunr/vector.py": {
        "Vector.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Tuple[float,float]",
                    "str",
                    "None",
                    "bool",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.position_for_index": {
            "name": "position_for_index",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "Optional[Collection[int]]",
                    "str",
                    "Collection",
                    "None"
                ]
            }
        },
        "Vector.insert": {
            "name": "insert",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "insert_index": [
                    "int",
                    "Callable",
                    "str"
                ],
                "val": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Vector.upsert": {
            "name": "upsert",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "insert_index": [
                    "List",
                    "bool",
                    "float"
                ],
                "val": [
                    "Dict[str,Any]",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "fn": [
                    "int",
                    "None",
                    "List",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "Vector.to_list": {
            "name": "to_list",
            "location": 103,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.serialize": {
            "name": "serialize",
            "location": 110,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.magnitude": {
            "name": "magnitude",
            "location": 116,
            "return": [
                "int",
                "Final",
                "str",
                "Callable",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.dot": {
            "name": "dot",
            "location": 127,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Vector.similarity": {
            "name": "similarity",
            "location": 150,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Vector.insert.prevent_duplicates": {
            "name": "prevent_duplicates",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "lunr.py-master/lunr/__init__.py": {},
    "lunr.py-master/lunr/__main__.py": {
        "lunr": {
            "name": "lunr",
            "location": 8,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "ref": [
                    "None",
                    "Optional[TreeNode]",
                    "int",
                    "Dict",
                    "Dict[int,int]",
                    "Optional[dict]",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "fields": [
                    "List[Type]",
                    "bool",
                    "int",
                    "List[Type[Exception]]"
                ],
                "documents": [
                    "List[Type]",
                    "bool",
                    "int",
                    "List[Type[Exception]]"
                ],
                "languages": [
                    "None",
                    "Type[Model]",
                    "int",
                    "Type",
                    "str",
                    "bool"
                ],
                "builder": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "get_default_builder": {
            "name": "get_default_builder",
            "location": 45,
            "return": [
                "Builder",
                "bool",
                "str",
                "Optional[Union[Any,str]]",
                "Tuple[int,str,int]",
                "Set[str]",
                "Mapping[str,T]"
            ],
            "arguments": {
                "languages": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "lunr.py-master/lunr/languages/stemmer.py": {
        "get_language_stemmer": {
            "name": "get_language_stemmer",
            "location": 1,
            "return": [
                "SnowballStemmer",
                "str",
                "bool"
            ],
            "arguments": {
                "language": [
                    "str",
                    "bool"
                ]
            }
        },
        "nltk_stemmer": {
            "name": "nltk_stemmer",
            "location": 13,
            "return": [
                "Dict",
                "str",
                "int",
                "bool",
                "MutableMapping[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "stemmer": [
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "None",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ],
                "token": [
                    "bytes",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "i": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Mapping",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ],
                "tokens": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Mapping",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ]
            }
        },
        "nltk_stemmer.wrapped_stem": {
            "name": "wrapped_stem",
            "location": 24,
            "return": [
                "int",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]"
                ],
                "metadata": [
                    "None",
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        }
    },
    "lunr.py-master/lunr/languages/trimmer.py": {
        "generate_trimmer": {
            "name": "generate_trimmer",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "word_characters": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "generate_trimmer.trimmer": {
            "name": "trimmer",
            "location": 12,
            "return": [
                "Dict",
                "str",
                "int",
                "bool",
                "MutableMapping[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "dict"
                ],
                "i": [
                    "None",
                    "bool",
                    "str",
                    "List[bytes]"
                ],
                "tokens": [
                    "None",
                    "bool",
                    "str",
                    "List[bytes]"
                ]
            }
        },
        "generate_trimmer.trimmer.trim": {
            "name": "trim",
            "location": 13,
            "return": [
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "metadata": [
                    "None",
                    "AnyStr",
                    "Union[bytes,bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "lunr.py-master/lunr/languages/__init__.py": {
        "_get_stopwords_and_word_characters": {
            "name": "_get_stopwords_and_word_characters",
            "location": 41,
            "return": [
                "Tuple[(Any, set)]"
            ],
            "arguments": {
                "language": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_nltk_builder": {
            "name": "get_nltk_builder",
            "location": 50,
            "return": [
                "lunr.builder.Builder"
            ],
            "arguments": {
                "languages": [
                    "Dict[str,bool]",
                    "Dict",
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "register_languages": {
            "name": "register_languages",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lunr.py-master/tests/benchmarks.py": {
        "get_mkdocs_index": {
            "name": "get_mkdocs_index",
            "location": 11,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Dict[int, int]"
            ],
            "arguments": {}
        },
        "TestSearchBenchmarks.index": {
            "name": "index",
            "location": 18,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchBenchmarks.test_search": {
            "name": "test_search",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float",
                    "Callable",
                    "int"
                ],
                "benchmark": [
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "TestPipelineBenchmarks.many_tokens": {
            "name": "many_tokens",
            "location": 31,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineBenchmarks.few_tokens": {
            "name": "few_tokens",
            "location": 41,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "many_tokens": [
                    "Callable",
                    "str",
                    "Iterable[str]",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "TestPipelineBenchmarks.token_to_token": {
            "name": "token_to_token",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Iterable[tuple[Union[str,str]]]"
            ],
            "arguments": {
                "token": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List"
                ],
                "i": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List"
                ],
                "tokens": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List"
                ]
            }
        },
        "TestPipelineBenchmarks.token_to_token_array": {
            "name": "token_to_token_array",
            "location": 49,
            "return": [
                "List[_T0]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int"
                ],
                "i": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List"
                ],
                "tokens": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List"
                ]
            }
        },
        "TestPipelineBenchmarks.test_few_token_to_token": {
            "name": "test_few_token_to_token",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "few_tokens": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "benchmark": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        },
        "TestPipelineBenchmarks.test_many_token_to_token": {
            "name": "test_many_token_to_token",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "many_tokens": [
                    "bool",
                    "str",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "benchmark": [
                    "bool",
                    "str",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        },
        "TestPipelineBenchmarks.test_few_token_to_token_array": {
            "name": "test_few_token_to_token_array",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "few_tokens": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "benchmark": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        },
        "TestPipelineBenchmarks.test_many_token_to_token_array": {
            "name": "test_many_token_to_token_array",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "many_tokens": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "benchmark": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "lunr.py-master/tests/conftest.py": {
        "documents": {
            "name": "documents",
            "location": 7,
            "return": [
                "List[dict[Text,Union[Text,int]]]",
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 33,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "documents": [
                    "Set[str]",
                    "str",
                    "int",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        }
    },
    "lunr.py-master/tests/test_builder.py": {
        "_assert_deep_keys": {
            "name": "_assert_deep_keys",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_": [
                    "str",
                    "float",
                    "bool"
                ],
                "keys": [
                    "str"
                ]
            }
        },
        "TestBuilderBuild.setup_method": {
            "name": "setup_method",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestBuilderBuild.test_adds_tokens_to_inverted_index": {
            "name": "test_adds_tokens_to_inverted_index",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderBuild.test_builds_vector_space_of_the_document_fields": {
            "name": "test_builds_vector_space_of_the_document_fields",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderBuild.test_skips_fields_not_defined_for_indexing": {
            "name": "test_skips_fields_not_defined_for_indexing",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderBuild.test_builds_a_token_set_for_the_corpus": {
            "name": "test_builds_a_token_set_for_the_corpus",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderBuild.test_calculates_document_count": {
            "name": "test_calculates_document_count",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderBuild.test_index_is_returned": {
            "name": "test_index_is_returned",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderAdd.test_builder_casts_docrefs_to_strings": {
            "name": "test_builder_casts_docrefs_to_strings",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderAdd.test_builder_metadata_whitelist_includes_metadata_in_index": {
            "name": "test_builder_metadata_whitelist_includes_metadata_in_index",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderAdd.test_builder_field_raises_if_contains_slash": {
            "name": "test_builder_field_raises_if_contains_slash",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderAdd.test_builder_extracts_nested_properties_from_document": {
            "name": "test_builder_extracts_nested_properties_from_document",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderAdd.test_builder_field_term_frequency_and_length": {
            "name": "test_builder_field_term_frequency_and_length",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderUse.setup_method": {
            "name": "setup_method",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestBuilderUse.test_calls_plugin_function": {
            "name": "test_calls_plugin_function",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderUse.test_plugin_is_called_with_builder_as_first_argument": {
            "name": "test_plugin_is_called_with_builder_as_first_argument",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderUse.test_forwards_arguments_to_the_plugin": {
            "name": "test_forwards_arguments_to_the_plugin",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderK1.test_k1_default_value": {
            "name": "test_k1_default_value",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderK1.test_k1_can_be_set": {
            "name": "test_k1_can_be_set",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderB.test_b_default_value": {
            "name": "test_b_default_value",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderB.test_b_within_range": {
            "name": "test_b_within_range",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderB.test_b_less_than_zero": {
            "name": "test_b_less_than_zero",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderB.test_b_higher_than_one": {
            "name": "test_b_higher_than_one",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilerRef.test_default_reference": {
            "name": "test_default_reference",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilerRef.test_defining_a_reference_field": {
            "name": "test_defining_a_reference_field",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderField.test_define_fields_to_index": {
            "name": "test_define_fields_to_index",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuilderUse.test_calls_plugin_function.plugin": {
            "name": "plugin",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestBuilderUse.test_plugin_is_called_with_builder_as_first_argument.plugin": {
            "name": "plugin",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": []
            }
        },
        "TestBuilderUse.test_forwards_arguments_to_the_plugin.plugin": {
            "name": "plugin",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        }
    },
    "lunr.py-master/tests/test_complete_set.py": {
        "TestCompleteSet.test_always_contains_other_element": {
            "name": "test_always_contains_other_element",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteSet.test_intersection_returns_other": {
            "name": "test_intersection_returns_other",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteSet.test_union_returns_self": {
            "name": "test_union_returns_self",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_field_ref.py": {
        "TestFieldRef.test_str_combines_document_ref_and_field_name": {
            "name": "test_str_combines_document_ref_and_field_name",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldRef.test_from_string_splits_string_into_parts": {
            "name": "test_from_string_splits_string_into_parts",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldRef.test_from_string_docref_contains_join_character": {
            "name": "test_from_string_docref_contains_join_character",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldRef.test_from_string_does_not_contain_join_character": {
            "name": "test_from_string_does_not_contain_join_character",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_index.py": {
        "TestIndex.test_create_query_default_fields": {
            "name": "test_create_query_default_fields",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestIndex.test_create_query_subset_of_fields": {
            "name": "test_create_query_subset_of_fields",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestIndex.test_create_query_non_contained_fields": {
            "name": "test_create_query_non_contained_fields",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Callable",
                    "int"
                ]
            }
        },
        "TestIndex.test_query_no_arguments_warns_and_returns_no_results": {
            "name": "test_query_no_arguments_warns_and_returns_no_results",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "pypi2nix.logger.Logger"
                ],
                "index": []
            }
        },
        "TestIndex.test_query_callback_argument_is_query_with_fields": {
            "name": "test_query_callback_argument_is_query_with_fields",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "TestIndex.test_query_callback_can_configure_query": {
            "name": "test_query_callback_can_configure_query",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestIndexSerialization.test_serialization": {
            "name": "test_serialization",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestIndexSerialization.test_json_deserialization": {
            "name": "test_json_deserialization",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestIndexSerialization.test_load_warns_on_js_version_mismatch": {
            "name": "test_load_warns_on_js_version_mismatch",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestIndex.test_query_callback_argument_is_query_with_fields.callback": {
            "name": "callback",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "TestIndex.test_query_callback_can_configure_query.callback": {
            "name": "callback",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "lunr.py-master/tests/test_language_support.py": {
        "TestLanguageSupport.setup_class": {
            "name": "setup_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestLanguageSupport.test_lunr_function_raises_if_unsupported_language": {
            "name": "test_lunr_function_raises_if_unsupported_language",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_lunr_function_raises_if_any_unsupported_language_is_passed": {
            "name": "test_lunr_function_raises_if_any_unsupported_language_is_passed",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_register_languages_in_pipeline_class": {
            "name": "test_register_languages_in_pipeline_class",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_lunr_function_registers_nltk_stemmers_in_pipeline": {
            "name": "test_lunr_function_registers_nltk_stemmers_in_pipeline",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_lunr_registers_lun_stemmers_in_pipeline_if_language_is_en": {
            "name": "test_lunr_registers_lun_stemmers_in_pipeline_if_language_is_en",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_search_stems_search_terms": {
            "name": "test_search_stems_search_terms",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageSupport.test_search_stems_search_terms_for_both_languages": {
            "name": "test_search_stems_search_terms_for_both_languages",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_match_data.py": {
        "TestMatchData.setup_method": {
            "name": "setup_method",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestMatchData.test_repr": {
            "name": "test_repr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_create_empty_match_data": {
            "name": "test_create_empty_match_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_create_missing_field": {
            "name": "test_create_missing_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_create_missing_metadata": {
            "name": "test_create_missing_metadata",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_combine_terms": {
            "name": "test_combine_terms",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_combine_metadata": {
            "name": "test_combine_metadata",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_combine_does_not_mutate_source_data": {
            "name": "test_combine_does_not_mutate_source_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_add_metadata_for_missing_term": {
            "name": "test_add_metadata_for_missing_term",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_add_metadata_for_missing_field": {
            "name": "test_add_metadata_for_missing_field",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_add_metadata_for_existing_term_field_and_metadata_key": {
            "name": "test_add_metadata_for_existing_term_field_and_metadata_key",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_add_metadata_for_existing_term_and_field_and_missing_metadata_key": {
            "name": "test_add_metadata_for_existing_term_and_field_and_missing_metadata_key",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_pipeline.py": {
        "noop": {
            "name": "noop",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fn": {
            "name": "fn",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseTestPipeline.setup_mock_pipline": {
            "name": "setup_mock_pipline",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "TestAdd.test_add_function_to_pipeline": {
            "name": "test_add_function_to_pipeline",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_multiple_functions_to_pipeline": {
            "name": "test_add_multiple_functions_to_pipeline",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_warns_if_function_not_registered": {
            "name": "test_add_warns_if_function_not_registered",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestRemove.test_remove_function_exists_in_pipeline": {
            "name": "test_remove_function_exists_in_pipeline",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemove.test_remove_function_does_not_exist_in_pipeline": {
            "name": "test_remove_function_does_not_exist_in_pipeline",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBefore.test_before_other_function_exists": {
            "name": "test_before_other_function_exists",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBefore.test_before_other_functions_does_not_exist": {
            "name": "test_before_other_functions_does_not_exist",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAfter.test_after_other_function_exists": {
            "name": "test_after_other_function_exists",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAfter.test_after_other_function_does_not_exist": {
            "name": "test_after_other_function_does_not_exist",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_calling_each_function_for_each_token": {
            "name": "test_run_calling_each_function_for_each_token",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_passes_token_to_pipeline_function": {
            "name": "test_run_passes_token_to_pipeline_function",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_passes_index_to_pipeline_function": {
            "name": "test_run_passes_index_to_pipeline_function",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_passes_entire_token_list_to_pipeline_function": {
            "name": "test_run_passes_entire_token_list_to_pipeline_function",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_passes_output_of_one_function_as_input_to_the_next": {
            "name": "test_run_passes_output_of_one_function_as_input_to_the_next",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_returns_the_results_of_the_last_function": {
            "name": "test_run_returns_the_results_of_the_last_function",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_filters_out_none_and_empty_string_values": {
            "name": "test_run_filters_out_none_and_empty_string_values",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_expanding_tokens_passed_to_output": {
            "name": "test_expanding_tokens_passed_to_output",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_expanding_tokens_not_passed_to_same_function": {
            "name": "test_expanding_tokens_not_passed_to_same_function",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_expanding_tokens_passed_to_the_next_pipeline_function": {
            "name": "test_expanding_tokens_passed_to_the_next_pipeline_function",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_skip_pipeline_function": {
            "name": "test_skip_pipeline_function",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_serialize_returns_array_of_registered_function_labels": {
            "name": "test_serialize_returns_array_of_registered_function_labels",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterFunction.setup_method": {
            "name": "setup_method",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestRegisterFunction.test_register_function_adds_a_label_property_to_the_function": {
            "name": "test_register_function_adds_a_label_property_to_the_function",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterFunction.test_register_function_adds_defaults_to_name_of_the_function": {
            "name": "test_register_function_adds_defaults_to_name_of_the_function",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterFunction.test_register_function_adds_function_to_list_of_registered_functions": {
            "name": "test_register_function_adds_function_to_list_of_registered_functions",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterFunction.test_register_function_warns_when_adding_function_with_same_label": {
            "name": "test_register_function_warns_when_adding_function_with_same_label",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.test_load_with_registered_functions": {
            "name": "test_load_with_registered_functions",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.test_load_with_unregistered_functions": {
            "name": "test_load_with_unregistered_functions",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReset.test_reset_empties_the_stack": {
            "name": "test_reset_empties_the_stack",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_run_calling_each_function_for_each_token.fn1": {
            "name": "fn1",
            "location": 91,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_run_calling_each_function_for_each_token.fn2": {
            "name": "fn2",
            "location": 95,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_run_passes_token_to_pipeline_function.fn": {
            "name": "fn",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "TestRun.test_run_passes_index_to_pipeline_function.fn": {
            "name": "fn",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "index": []
            }
        },
        "TestRun.test_run_passes_entire_token_list_to_pipeline_function.fn": {
            "name": "fn",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "tokens": []
            }
        },
        "TestRun.test_run_passes_output_of_one_function_as_input_to_the_next.fn1": {
            "name": "fn1",
            "location": 127,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_run_passes_output_of_one_function_as_input_to_the_next.fn2": {
            "name": "fn2",
            "location": 130,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_run_returns_the_results_of_the_last_function.fn": {
            "name": "fn",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_run_filters_out_none_and_empty_string_values.fn1": {
            "name": "fn1",
            "location": 147,
            "return": [],
            "arguments": {
                "t": [],
                "i": [],
                "_": []
            }
        },
        "TestRun.test_run_filters_out_none_and_empty_string_values.fn2": {
            "name": "fn2",
            "location": 153,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "TestRun.test_expanding_tokens_not_passed_to_same_function.fn": {
            "name": "fn",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "list",
                    "List[T]"
                ]
            }
        },
        "TestRun.test_expanding_tokens_passed_to_the_next_pipeline_function.fn1": {
            "name": "fn1",
            "location": 185,
            "return": [
                "str",
                "Type[object]",
                "int",
                "Union[int, float]"
            ],
            "arguments": {
                "t": [
                    "Tuple[int, int]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestRun.test_expanding_tokens_passed_to_the_next_pipeline_function.fn2": {
            "name": "fn2",
            "location": 188,
            "return": [],
            "arguments": {
                "t": [
                    "T",
                    "int"
                ]
            }
        },
        "TestRun.test_skip_pipeline_function.upper": {
            "name": "upper",
            "location": 198,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "t": [
                    "float"
                ]
            }
        },
        "TestRun.test_skip_pipeline_function.lower": {
            "name": "lower",
            "location": 201,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "t": [
                    "float"
                ]
            }
        },
        "TestRegisterFunction.setup_method.fn": {
            "name": "fn",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lunr.py-master/tests/test_plugins.py": {
        "test_get_default_builder": {
            "name": "test_get_default_builder",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_drop_pipeline_function": {
            "name": "test_drop_pipeline_function",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_token_metadata": {
            "name": "test_add_token_metadata",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_token_metadata.token_length": {
            "name": "token_length",
            "location": 49,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "bool"
                ],
                "i": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "tokens": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Set[str]"
                ]
            }
        }
    },
    "lunr.py-master/tests/test_query.py": {
        "BaseQuerySuite.setup_method": {
            "name": "setup_method",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestQueryTerm.test_single_string_term_adds_single_clause": {
            "name": "test_single_string_term_adds_single_clause",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryTerm.test_single_token_term_adds_single_clause": {
            "name": "test_single_token_term_adds_single_clause",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryTerm.test_multiple_string_terms_adds_multiple_clauses": {
            "name": "test_multiple_string_terms_adds_multiple_clauses",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryTerm.test_multiple_token_terms_adds_multiple_clauses": {
            "name": "test_multiple_token_terms_adds_multiple_clauses",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryTerm.test_multiple_string_terms_with_options": {
            "name": "test_multiple_string_terms_with_options",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryClause.test_clause_defaults": {
            "name": "test_clause_defaults",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryClause.test_clause_specified": {
            "name": "test_clause_specified",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryClause.test_clause_wildcard": {
            "name": "test_clause_wildcard",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wildcard": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected_term": [
                    "str",
                    "int",
                    "List[str]",
                    "bytearray",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "TestQueryClause.test_clause_wildcard_existing": {
            "name": "test_clause_wildcard_existing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryIsNegated.test_all_prohibited": {
            "name": "test_all_prohibited",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryIsNegated.test_some_prohibited": {
            "name": "test_some_prohibited",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryIsNegated.test_nome_prohibited": {
            "name": "test_nome_prohibited",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_query_lexer.py": {
        "_lex": {
            "name": "_lex",
            "location": 4,
            "return": [
                "lunr.query_lexer.QueryLexer"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "TestQueryLexer.test_single_term_produces_one_lexeme": {
            "name": "test_single_term_produces_one_lexeme",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_escape_character": {
            "name": "test_term_escape_character",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_multiple_terms": {
            "name": "test_multiple_terms",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_separator_length_greater_than_one": {
            "name": "test_separator_length_greater_than_one",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_hyphen_is_considered_a_separator": {
            "name": "test_hyphen_is_considered_a_separator",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_with_field": {
            "name": "test_term_with_field",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_with_field_with_escape_character": {
            "name": "test_term_with_field_with_escape_character",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_with_edit_distance": {
            "name": "test_term_with_edit_distance",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_with_boost": {
            "name": "test_term_with_boost",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_term_with_field_boost_and_edit_distance": {
            "name": "test_term_with_field_boost_and_edit_distance",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_single_term_with_hyphen_produces_two_lexemes": {
            "name": "test_single_term_with_hyphen_produces_two_lexemes",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_single_term_with_presence_produces_two_lexemes": {
            "name": "test_single_term_with_presence_produces_two_lexemes",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_multiple_terms_with_presence_produces_four_lexemes": {
            "name": "test_multiple_terms_with_presence_produces_four_lexemes",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryLexer.test_multiple_terms_with_presence_and_fuzz": {
            "name": "test_multiple_terms_with_presence_and_fuzz",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_query_parser.py": {
        "parse": {
            "name": "parse",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "q": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestQueryParser.test_parse_empty_string": {
            "name": "test_parse_empty_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_parse_single_term": {
            "name": "test_parse_single_term",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_parse_single_term_uppercase": {
            "name": "test_parse_single_term_uppercase",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_parse_single_term_with_wildcard": {
            "name": "test_parse_single_term_with_wildcard",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_multiple_terms": {
            "name": "test_multiple_terms",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_with_presence_required_adds_required_clause": {
            "name": "test_term_with_presence_required_adds_required_clause",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_with_presence_required_adds_prohibited_clause": {
            "name": "test_term_with_presence_required_adds_prohibited_clause",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_scoped_by_field_with_presence_required": {
            "name": "test_term_scoped_by_field_with_presence_required",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_scoped_by_field_with_presence_prohibited": {
            "name": "test_term_scoped_by_field_with_presence_prohibited",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_multiple_terms_with_presence_creates_two_clauses": {
            "name": "test_multiple_terms_with_presence_creates_two_clauses",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_unknown_field": {
            "name": "test_unknown_field",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_field_without_a_term": {
            "name": "test_field_without_a_term",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_field_twice": {
            "name": "test_field_twice",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_with_field": {
            "name": "test_term_with_field",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_uppercase_field_with_uppercase_term": {
            "name": "test_uppercase_field_with_uppercase_term",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_multiple_terms_scoped_to_different_fields": {
            "name": "test_multiple_terms_scoped_to_different_fields",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_single_term_with_edit_distance": {
            "name": "test_single_term_with_edit_distance",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_multiple_terms_with_edit_distance": {
            "name": "test_multiple_terms_with_edit_distance",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_single_term_scoped_to_field_with_edit_distance": {
            "name": "test_single_term_scoped_to_field_with_edit_distance",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_non_numeric_edit_distance": {
            "name": "test_non_numeric_edit_distance",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_edit_distance_without_a_term": {
            "name": "test_edit_distance_without_a_term",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_single_term_with_boost": {
            "name": "test_single_term_with_boost",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_non_numeric_boost": {
            "name": "test_non_numeric_boost",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_boost_without_a_term": {
            "name": "test_boost_without_a_term",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_multiple_terms_with_boost": {
            "name": "test_multiple_terms_with_boost",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_scoped_by_field_with_boost": {
            "name": "test_term_scoped_by_field_with_boost",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_term_with_boost_and_edit_distance": {
            "name": "test_term_with_boost_and_edit_distance",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_edit_distance_followed_by_presence": {
            "name": "test_edit_distance_followed_by_presence",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryParser.test_boost_followed_by_presence": {
            "name": "test_boost_followed_by_presence",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_search.py": {
        "TestSingleTermSearch.test_one_match": {
            "name": "test_one_match",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_no_match": {
            "name": "test_no_match",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_multiple_matches_sorts_by_relevance": {
            "name": "test_multiple_matches_sorts_by_relevance",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_pipeline_processing_enabled": {
            "name": "test_pipeline_processing_enabled",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_pipeline_processing_disabled": {
            "name": "test_pipeline_processing_disabled",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_multiple_terms_all_terms_match": {
            "name": "test_multiple_terms_all_terms_match",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_one_term_matches": {
            "name": "test_one_term_matches",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_duplicate_query_terms": {
            "name": "test_duplicate_query_terms",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_documents_with_all_terms_score_higher": {
            "name": "test_documents_with_all_terms_score_higher",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_no_terms_match": {
            "name": "test_no_terms_match",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_corpus_terms_are_stemmed": {
            "name": "test_corpus_terms_are_stemmed",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_field_scoped_terms": {
            "name": "test_field_scoped_terms",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSingleTermSearch.test_field_scoped_no_matching_terms": {
            "name": "test_field_scoped_no_matching_terms",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardTrailing.test_matching_no_matches": {
            "name": "test_matching_no_matches",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardTrailing.test_matching_one_match": {
            "name": "test_matching_one_match",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardTrailing.test_matching_multiple_terms_match": {
            "name": "test_matching_multiple_terms_match",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardLeading.test_matching_no_matches": {
            "name": "test_matching_no_matches",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardLeading.test_matching_multiple_terms_match": {
            "name": "test_matching_multiple_terms_match",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardContained.test_matching_no_matches": {
            "name": "test_matching_no_matches",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchWildcardContained.test_matching_multiple_terms_match": {
            "name": "test_matching_multiple_terms_match",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestEditDistance.test_edit_distance_no_results": {
            "name": "test_edit_distance_no_results",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestEditDistance.test_edit_distance_two_results": {
            "name": "test_edit_distance_two_results",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchByField.test_search_by_field_unknown_field": {
            "name": "test_search_by_field_unknown_field",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchByField.test_search_by_field_no_results": {
            "name": "test_search_by_field_no_results",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestSearchByField.test_search_by_field_results": {
            "name": "test_search_by_field_results",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestTermBoosts.test_term_boosts_no_results": {
            "name": "test_term_boosts_no_results",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestTermBoosts.test_term_boosts_results": {
            "name": "test_term_boosts_results",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestTypeaheadStyleSearch.test_typeahead_no_results": {
            "name": "test_typeahead_no_results",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestTypeaheadStyleSearch.test_typeahead_results": {
            "name": "test_typeahead_results",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TestTermPresence.test_prohibited_match_excludes_prohibited_result": {
            "name": "test_prohibited_match_excludes_prohibited_result",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "TestTermPresence.test_only_prohibited_match_yields_no_results": {
            "name": "test_only_prohibited_match_yields_no_results",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestTermPresence.test_negated_query_no_match": {
            "name": "test_negated_query_no_match",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestTermPresence.test_negated_query_some_match": {
            "name": "test_negated_query_some_match",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestTermPresence.test_field_match": {
            "name": "test_field_match",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "TestTermPresence.test_required_match": {
            "name": "test_required_match",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "TestTermPresence.test_two_required_matches_yields_no_results": {
            "name": "test_two_required_matches_yields_no_results",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestTermPresence.test_required_term_not_matching_yields_no_results": {
            "name": "test_required_term_not_matching_yields_no_results",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestTermPresence.test_required_term_on_field_matches": {
            "name": "test_required_term_on_field_matches",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestTermPresence.test_required_terms_on_field_and_non_field_match": {
            "name": "test_required_terms_on_field_and_non_field_match",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "typing.Callable[, ]",
                    "list[list[typing.Any]]",
                    "list[]",
                    "int"
                ]
            }
        },
        "TestTermPresence.test_required_terms_on_different_fields_match": {
            "name": "test_required_terms_on_different_fields_match",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestTermPresence.test_combined_required_optional_and_prohibited_match": {
            "name": "test_combined_required_optional_and_prohibited_match",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestBuildTimeFieldBoost.test_no_query_boosts_build_boost_ranks_higher": {
            "name": "test_no_query_boosts_build_boost_ranks_higher",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "float",
                    "dict[str, typing.Any]"
                ],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "bool"
                ]
            }
        },
        "TestBuildTimeDocumentBoost.test_no_query_boosts_document_boost_ranks_higher": {
            "name": "test_no_query_boosts_document_boost_ranks_higher",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [],
                "query_or_search": [
                    "list[list[typing.Any]]",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "lunr.py-master/tests/test_serialization.py": {
        "TestSerialization.setup_method": {
            "name": "setup_method",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestSerialization.test_serialization": {
            "name": "test_serialization",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_stemmer.py": {
        "TestStemmer.test_reduces_words_to_their_stem": {
            "name": "test_reduces_words_to_their_stem",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStemmer.test_is_a_registered_pipeline_function": {
            "name": "test_is_a_registered_pipeline_function",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_stop_word_filter.py": {
        "TestStopWordFilter.test_filters_stop_words": {
            "name": "test_filters_stop_words",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStopWordFilter.test_ignores_non_stop_words": {
            "name": "test_ignores_non_stop_words",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStopWordFilter.test_is_a_registered_pipeline_function": {
            "name": "test_is_a_registered_pipeline_function",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateStopWordFilter.test_creates_correct_stop_words_filter": {
            "name": "test_creates_correct_stop_words_filter",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateStopWordFilter.test_registers_new_stop_words_filter": {
            "name": "test_registers_new_stop_words_filter",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateStopWordFilter.test_passing_a_language_adds_to_registered_label": {
            "name": "test_passing_a_language_adds_to_registered_label",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_token.py": {
        "test_str_repr": {
            "name": "test_str_repr",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMetadata.test_can_attach_arbitrary_metadata": {
            "name": "test_can_attach_arbitrary_metadata",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetadata.test_can_update_token_value": {
            "name": "test_can_update_token_value",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetadata.test_metadata_is_yielded_when_updating": {
            "name": "test_metadata_is_yielded_when_updating",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClone.setup_method": {
            "name": "setup_method",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Iterable[str]"
                ]
            }
        },
        "TestClone.test_clones_value": {
            "name": "test_clones_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClone.test_clones_metadata": {
            "name": "test_clones_metadata",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClone.test_clone_and_modify": {
            "name": "test_clone_and_modify",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_tokenizer.py": {
        "TestTokenizer.test_splitting_into_tokens": {
            "name": "test_splitting_into_tokens",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_run_downcases_tokens": {
            "name": "test_run_downcases_tokens",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_array_of_strings": {
            "name": "test_array_of_strings",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_none_is_converted_to_empty_string": {
            "name": "test_none_is_converted_to_empty_string",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_multiple_whitespace_is_stripped": {
            "name": "test_multiple_whitespace_is_stripped",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_handling_null_like_arguments": {
            "name": "test_handling_null_like_arguments",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_converting_a_number_to_tokens": {
            "name": "test_converting_a_number_to_tokens",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_converting_a_boolean_to_tokens": {
            "name": "test_converting_a_boolean_to_tokens",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_converting_an_object_to_tokens": {
            "name": "test_converting_an_object_to_tokens",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_splits_strings_with_hyphens": {
            "name": "test_splits_strings_with_hyphens",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_splits_strings_with_hyphens_and_spaces": {
            "name": "test_splits_strings_with_hyphens_and_spaces",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_tracking_the_token_index": {
            "name": "test_tracking_the_token_index",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_tracking_the_token_position": {
            "name": "test_tracking_the_token_position",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_providing_additional_metadata": {
            "name": "test_providing_additional_metadata",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_providing_separator": {
            "name": "test_providing_separator",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "str",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestTokenizer.test_tracking_token_position_with_left_hand_whitespace": {
            "name": "test_tracking_token_position_with_left_hand_whitespace",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_tracking_token_position_with_right_hand_whitespace": {
            "name": "test_tracking_token_position_with_right_hand_whitespace",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizer.test_converting_an_object_to_tokens.Subject.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "Text",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_token_set.py": {
        "TestTokenSetStr.test_str_includes_node_finality": {
            "name": "test_str_includes_node_finality",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetStr.test_str_includes_all_edges": {
            "name": "test_str_includes_all_edges",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetStr.test_str_includes_edge_id": {
            "name": "test_str_includes_edge_id",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetFromString.test_from_string_without_wildcard": {
            "name": "test_from_string_without_wildcard",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetFromString.test_from_string_with_trailing_wildcard": {
            "name": "test_from_string_with_trailing_wildcard",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetFromList.test_from_list_with_unsorted_list": {
            "name": "test_from_list_with_unsorted_list",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetFromList.test_from_list_with_sorted_list": {
            "name": "test_from_list_with_sorted_list",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetFromList.test_from_list_is_minimal": {
            "name": "test_from_list_is_minimal",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetToList.test_to_list_includes_all_words": {
            "name": "test_to_list_includes_all_words",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetToList.test_to_list_includes_single_words": {
            "name": "test_to_list_includes_single_words",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_no_intersection": {
            "name": "test_no_intersection",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_simple_intersection": {
            "name": "test_simple_intersection",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_trailing_wildcard_intersection": {
            "name": "test_trailing_wildcard_intersection",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_trailing_wildcard_no_intersection": {
            "name": "test_trailing_wildcard_no_intersection",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_wildcard_intersection": {
            "name": "test_leading_wildcard_intersection",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_wildcard_no_intersection": {
            "name": "test_leading_wildcard_no_intersection",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_contained_wildcard_intersection": {
            "name": "test_contained_wildcard_intersection",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_contained_wildcard_no_intersection": {
            "name": "test_contained_wildcard_no_intersection",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_wildcard_zero_or_more_characters": {
            "name": "test_wildcard_zero_or_more_characters",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_with_fuzzy_string_substitution": {
            "name": "test_with_fuzzy_string_substitution",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_with_fuzzy_string_deletion": {
            "name": "test_with_fuzzy_string_deletion",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_with_fuzzy_string_insertion": {
            "name": "test_with_fuzzy_string_insertion",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_with_fuzzy_string_transpose": {
            "name": "test_with_fuzzy_string_transpose",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_fuzzy_string_insertion": {
            "name": "test_fuzzy_string_insertion",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_fuzzy_string_substitution": {
            "name": "test_fuzzy_string_substitution",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_fuzzy_string_deletion": {
            "name": "test_fuzzy_string_deletion",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_fuzzy_string_transpose": {
            "name": "test_fuzzy_string_transpose",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_wildcard_backtracking_intersection": {
            "name": "test_leading_wildcard_backtracking_intersection",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_wildcard_backtracking_no_intersection": {
            "name": "test_leading_wildcard_backtracking_no_intersection",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_contained_wildcard_backtracking_intersection": {
            "name": "test_contained_wildcard_backtracking_intersection",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_contained_wildcard_backtracking_no_intersection": {
            "name": "test_contained_wildcard_backtracking_no_intersection",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_catastrophic_backtracking_with_leading_characters": {
            "name": "test_catastrophic_backtracking_with_leading_characters",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_trailing_wildcard_backtracking_intersection": {
            "name": "test_leading_trailing_wildcard_backtracking_intersection",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenSetIntersect.test_leading_atrailing_wildcard_backtracking_intersection": {
            "name": "test_leading_atrailing_wildcard_backtracking_intersection",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_trimmer.py": {
        "TestTrimmer.test_latin_characters": {
            "name": "test_latin_characters",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrimmer.test_punctuation": {
            "name": "test_punctuation",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestTrimmer.test_is_a_registered_pipeline_function": {
            "name": "test_is_a_registered_pipeline_function",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/test_vector.py": {
        "_vector_from_args": {
            "name": "_vector_from_args",
            "location": 9,
            "return": [
                "lunr.vector.Vector"
            ],
            "arguments": {}
        },
        "test_vector_repr": {
            "name": "test_vector_repr",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_magnitude_calculates_magnitude": {
            "name": "test_magnitude_calculates_magnitude",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dot_calculates_dot_product_of_two_vectors": {
            "name": "test_dot_calculates_dot_product_of_two_vectors",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestVectorPositionForIndex.test_position_for_index_at_the_beggining": {
            "name": "test_position_for_index_at_the_beggining",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_at_the_end": {
            "name": "test_position_for_index_at_the_end",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_consecutive": {
            "name": "test_position_for_index_consecutive",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_non_consecutive_gap_after": {
            "name": "test_position_for_index_non_consecutive_gap_after",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_non_consecutive_gap_before": {
            "name": "test_position_for_index_non_consecutive_gap_before",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_non_consecutive_gap_before_and_after": {
            "name": "test_position_for_index_non_consecutive_gap_before_and_after",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_duplicate_at_the_beggining": {
            "name": "test_position_for_index_duplicate_at_the_beggining",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_duplicate_at_the_end": {
            "name": "test_position_for_index_duplicate_at_the_end",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorPositionForIndex.test_position_for_index_duplicate_consecutive": {
            "name": "test_position_for_index_duplicate_consecutive",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimilarity.test_similarity_calculates_the_similarity_between_two_vectors": {
            "name": "test_similarity_calculates_the_similarity_between_two_vectors",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimilarity.test_empty_vector": {
            "name": "test_empty_vector",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimilarity.test_non_overlapping_vector": {
            "name": "test_non_overlapping_vector",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorInsert.test_insert_invalidates_magnitude_cache": {
            "name": "test_insert_invalidates_magnitude_cache",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorInsert.test_insert_keeps_items_in_index_specified_order": {
            "name": "test_insert_keeps_items_in_index_specified_order",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorInsert.test_insert_fails_when_duplicate_entry": {
            "name": "test_insert_fails_when_duplicate_entry",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorUpsert.test_upsert_invalidates_magnitude_cache": {
            "name": "test_upsert_invalidates_magnitude_cache",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorUpsert.test_upsert_keeps_items_in_index_specified_order": {
            "name": "test_upsert_keeps_items_in_index_specified_order",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorUpsert.test_upsert_calls_fn_for_value_on_duplicate": {
            "name": "test_upsert_calls_fn_for_value_on_duplicate",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorUpsert.test_upsert_defaults_to_passed_value_on_duplicate": {
            "name": "test_upsert_defaults_to_passed_value_on_duplicate",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lunr.py-master/tests/utils.py": {
        "assert_field_vectors_equal": {
            "name": "assert_field_vectors_equal",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "Optional[Union[int,float]]",
                    "Union[int,float]"
                ],
                "b": [
                    "str",
                    "int",
                    "Optional[Union[int,float]]",
                    "Union[int,float]"
                ],
                "tol": [
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "assert_vectors_equal": {
            "name": "assert_vectors_equal",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "Iterable"
                ],
                "b": [
                    "str",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "Iterable"
                ],
                "tol": [
                    "bool",
                    "float"
                ]
            }
        },
        "assert_results_match": {
            "name": "assert_results_match",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "List[Union[int,float]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "js_results": [
                    "List[Union[int,float]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "tol": [
                    "float",
                    "int",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "read_json_fixture": {
            "name": "read_json_fixture",
            "location": 31,
            "return": [
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_node_script": {
            "name": "run_node_script",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "lunr.py-master/tests/__init__.py": {},
    "lunr.py-master/tests/acceptance_tests/test_language_support.py": {
        "test_languages_query_results_match_javascript_results": {
            "name": "test_languages_query_results_match_javascript_results",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_js_serialized_lang_index_can_be_loaded_and_produces_same_results": {
            "name": "test_js_serialized_lang_index_can_be_loaded_and_produces_same_results",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialized_lang_index_can_be_loaded_in_js_and_produces_same_results": {
            "name": "test_serialized_lang_index_can_be_loaded_in_js_and_produces_same_results",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialized_multilang_index_can_be_loaded_in_js_and_results_equal": {
            "name": "test_serialized_multilang_index_can_be_loaded_in_js_and_results_equal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lunr.py-master/tests/acceptance_tests/test_mkdocs.py": {
        "test_mkdocs_produces_same_results": {
            "name": "test_mkdocs_produces_same_results",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_js_serialized_index_can_be_loaded_and_produces_same_results": {
            "name": "test_js_serialized_index_can_be_loaded_and_produces_same_results",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialized_index_can_be_loaded_in_js_and_produces_same_results": {
            "name": "test_serialized_index_can_be_loaded_in_js_and_produces_same_results",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
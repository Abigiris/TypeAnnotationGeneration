{
    "lz-master/setup.py": {},
    "lz-master/docs/conf.py": {},
    "lz-master/lz/arithmetical.py": {
        "ceil_division": {
            "name": "ceil_division",
            "location": 10,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dividend": [
                    "int",
                    "Callable",
                    "str"
                ],
                "divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "lz-master/lz/filtration.py": {
        "sifter": {
            "name": "sifter",
            "location": 15,
            "return": [
                "functools.partial[Iterator]"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "int",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "scavenger": {
            "name": "scavenger",
            "location": 35,
            "return": [
                "functools.partial[itertools.filterfalse]"
            ],
            "arguments": {
                "predicate": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "separator": {
            "name": "separator",
            "location": 55,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {
                "predicate": [
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Iterator[T]",
                    "List[str]",
                    "Generator"
                ]
            }
        },
        "grabber": {
            "name": "grabber",
            "location": 78,
            "return": [
                "functools.partial[itertools.takewhile]"
            ],
            "arguments": {
                "predicate": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "int",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "kicker": {
            "name": "kicker",
            "location": 100,
            "return": [
                "functools.partial[itertools.dropwhile]"
            ],
            "arguments": {
                "predicate": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "int",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "lz-master/lz/functional.py": {
        "identity": {
            "name": "identity",
            "location": 27,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "argument": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 37,
            "return": [
                "Union[(Composition, Callable)]"
            ],
            "arguments": {
                "last_function": [
                    "Callable",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 376,
            "return": [
                "types.FutureMessage",
                "set"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "hints.Domain",
                    "Tuple[int,int]"
                ]
            }
        },
        "_compose": {
            "name": "_compose",
            "location": 111,
            "return": [
                "str",
                "float",
                "mypy.types.TupleType",
                "Type"
            ],
            "arguments": {}
        },
        "combine": {
            "name": "combine",
            "location": 176,
            "return": [
                "Combination"
            ],
            "arguments": {}
        },
        "curry": {
            "name": "curry",
            "location": 261,
            "return": [
                "Curry"
            ],
            "arguments": {
                "function": [
                    "List",
                    "Dict[str,Any]",
                    "str",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 277,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "Iterable[D]",
                    "Callable[[str],bool]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[hints.Domain]"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 291,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "Dict[str,Any]",
                    "hints.Domain",
                    "Iterable[hints.Domain]"
                ],
                "args": [],
                "kwargs": [
                    "MappingProxyType"
                ]
            }
        },
        "to_constant": {
            "name": "to_constant",
            "location": 300,
            "return": [
                "Constant"
            ],
            "arguments": {
                "object_": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "flip": {
            "name": "flip",
            "location": 330,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "Iterable[D]",
                    "Callable[[str],bool]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[hints.Domain]"
                ]
            }
        },
        "call_flipped": {
            "name": "call_flipped",
            "location": 341,
            "return": [
                "int"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "Dict[str,Any]",
                    "hints.Domain",
                    "Iterable[hints.Domain]",
                    "Callable"
                ]
            }
        },
        "cleave": {
            "name": "cleave",
            "location": 350,
            "return": [
                "Cleavage"
            ],
            "arguments": {}
        },
        "flatmap": {
            "name": "flatmap",
            "location": 380,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "function": [
                    "Iterable[D]",
                    "Iterable[hints.Domain]",
                    "Callable[D,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "Composition.__new__": {
            "name": "__new__",
            "location": 54,
            "return": [
                "Union[(Composition, Callable)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "List[T]",
                    "List[int]"
                ]
            }
        },
        "Composition.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.functions": {
            "name": "functions",
            "location": 81,
            "return": [
                "mypy.types.RawExpressionType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.function": {
            "name": "function",
            "location": 85,
            "return": [
                "mypy.types.RawExpressionType",
                "bytes",
                "None",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.__call__": {
            "name": "__call__",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.__get__": {
            "name": "__get__",
            "location": 97,
            "return": [
                "types.MethodType"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "str",
                    "Callable",
                    "List[int]",
                    "List[str]"
                ],
                "owner": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ]
            }
        },
        "_compose.function_to_unique_name": {
            "name": "function_to_unique_name",
            "location": 125,
            "return": [
                "Text",
                "str",
                "Sequence[Union[str,Any]]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "types.FunctionType",
                    "Callable[[], object]",
                    "hints.Map"
                ]
            }
        },
        "_compose.to_next_call_node": {
            "name": "to_next_call_node",
            "location": 137,
            "return": [
                "bool",
                "Optional[str]",
                "mypy.types.Instance",
                "Set[str]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_compose.to_name_node": {
            "name": "to_name_node",
            "location": 140,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "mypy.types.Type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Combination.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Combination.__call__": {
            "name": "__call__",
            "location": 191,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "Callable",
                    "int",
                    "starlette.types.Receive",
                    "float",
                    "starlette.types.Send"
                ]
            }
        },
        "ApplierBase.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable"
                ]
            }
        },
        "ApplierBase.func": {
            "name": "func",
            "location": 216,
            "return": [
                "list",
                "Union",
                "SupportsFloat"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplierBase.args": {
            "name": "args",
            "location": 220,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplierBase.keywords": {
            "name": "keywords",
            "location": 224,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Curry.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[...,hints.Range]",
                    "hints.Domain"
                ],
                "signature": [
                    "str",
                    "List[str]",
                    "Dict[int,int]",
                    "Optional[List[str]]",
                    "Callable",
                    "None"
                ]
            }
        },
        "Curry.__call__": {
            "name": "__call__",
            "location": 240,
            "return": [
                "Type[object]",
                "int",
                "Optional[List[float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Constant.__call__": {
            "name": "__call__",
            "location": 319,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cleavage.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cleavage.__call__": {
            "name": "__call__",
            "location": 368,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composition.__init__.flatten": {
            "name": "flatten",
            "location": 64,
            "return": [
                "Iterable[Callable[...,Any]]",
                "Generator"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "lz-master/lz/hints.py": {
        "Sortable.__lt__": {
            "name": "__lt__",
            "location": 20,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Collection.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 33,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "subclass": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "lz-master/lz/iterating.py": {
        "capacity": {
            "name": "capacity",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 246,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Sequence[hints.Domain]",
                    "float"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 49,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 62,
            "return": [
                "Iterable[hints.Domain]",
                "str",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[hints.Domain]",
                    "str",
                    "int"
                ]
            }
        },
        "cut": {
            "name": "cut",
            "location": 76,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[hints.Domain]",
                    "str",
                    "slice",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "cutter": {
            "name": "cutter",
            "location": 91,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "slice_": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_slice_to_description": {
            "name": "_slice_to_description",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "slice_": [
                    "Collection[T]",
                    "List[int]",
                    "Collection",
                    "str"
                ]
            }
        },
        "chopper": {
            "name": "chopper",
            "location": 134,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "chop": {
            "name": "chop",
            "location": 150,
            "return": [
                "Iterable[Sequence[hints.Domain]]",
                "Generator"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Iterable[hints.Domain]",
                    "str",
                    "Iterable",
                    "Tuple[int,int]"
                ]
            }
        },
        "slide": {
            "name": "slide",
            "location": 181,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "None",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "slider": {
            "name": "slider",
            "location": 198,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "header": {
            "name": "header",
            "location": 218,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "size": [
                    "int",
                    "List",
                    "bytes",
                    "str"
                ]
            }
        },
        "trail": {
            "name": "trail",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Iterable[hints.Domain]",
                    "str",
                    "Iterable",
                    "Tuple[int,int]"
                ]
            }
        },
        "trailer": {
            "name": "trailer",
            "location": 260,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "mapper": {
            "name": "mapper",
            "location": 276,
            "return": [
                "functools.partial[Iterator]"
            ],
            "arguments": {
                "map_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "flatmapper": {
            "name": "flatmapper",
            "location": 287,
            "return": [
                "functools.partial[Generator[(nothing, Any, None)]]"
            ],
            "arguments": {
                "map_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "group_by": {
            "name": "group_by",
            "location": 303,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Iterable[hints.Domain]",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 316,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "key": [
                    "Type[MutableMapping]",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "expand": {
            "name": "expand",
            "location": 338,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 348,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "interleave": {
            "name": "interleave",
            "location": 358,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "slide.shift": {
            "name": "shift",
            "location": 190,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "previous": [
                    "hints.Domain",
                    "Tuple[hints.Domain]",
                    "str"
                ],
                "element": [
                    "hints.Domain",
                    "Tuple[hints.Domain]",
                    "str"
                ]
            }
        }
    },
    "lz-master/lz/left.py": {
        "accumulator": {
            "name": "accumulator",
            "location": 14,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "function": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]",
                    "tests.hints.Function"
                ],
                "initial": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]",
                    "tests.hints.Function"
                ]
            }
        },
        "accumulate": {
            "name": "accumulate",
            "location": 31,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable[...,hints.Range]",
                    "Callable[[str],bool]"
                ],
                "function": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable[...,hints.Range]",
                    "Callable[[str],bool]"
                ],
                "initial": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable[...,hints.Range]",
                    "Callable[[str],bool]"
                ]
            }
        },
        "attacher": {
            "name": "attacher",
            "location": 41,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {
                "object_": [
                    "Iterable[hints.Domain]",
                    "hints.Domain"
                ]
            }
        },
        "attach": {
            "name": "attach",
            "location": 54,
            "return": [
                "Iterable[hints.Domain]",
                "Generator"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[hints.Domain]",
                    "hints.Domain"
                ],
                "object_": [
                    "Iterable[hints.Domain]",
                    "hints.Domain"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ],
                "object_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "folder": {
            "name": "folder",
            "location": 80,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "function": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]",
                    "tests.hints.Function"
                ],
                "initial": [
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "Iterable[hints.Domain]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]",
                    "tests.hints.Function"
                ]
            }
        },
        "fold": {
            "name": "fold",
            "location": 95,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable"
                ],
                "function": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable"
                ],
                "initial": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Callable"
                ]
            }
        },
        "applier": {
            "name": "applier",
            "location": 108,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "hints.Domain"
                ]
            }
        }
    },
    "lz-master/lz/logical.py": {
        "conjoin": {
            "name": "conjoin",
            "location": 10,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {}
        },
        "disjoin": {
            "name": "disjoin",
            "location": 23,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {}
        },
        "exclusive_disjoin": {
            "name": "exclusive_disjoin",
            "location": 38,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {}
        },
        "negate": {
            "name": "negate",
            "location": 56,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {
                "predicate": [
                    "int",
                    "List",
                    "str"
                ]
            }
        }
    },
    "lz-master/lz/replication.py": {
        "replicate": {
            "name": "replicate",
            "location": 13,
            "return": [
                "Iterable[hints.Domain]",
                "None"
            ],
            "arguments": {
                "object_": [
                    "Callable",
                    "hints.Domain",
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 67,
            "return": [
                "typing.Iterable[typing.Tuple[hints.Domain, ...]]"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "Tuple[hints.Domain]",
                    "str",
                    "List[Tuple[int,float,float]]",
                    "List[tuple[Union[int,float,float]]]"
                ]
            }
        },
        "_replicate_iterable": {
            "name": "_replicate_iterable",
            "location": 41,
            "return": [
                "Iterable[Iterable[hints.Domain]]",
                "Generator"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "replicator": {
            "name": "replicator",
            "location": 74,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_replicate_iterable.replica": {
            "name": "replica",
            "location": 50,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "queue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "lz-master/lz/reversal.py": {
        "reverse": {
            "name": "reverse",
            "location": 36,
            "return": [
                "hints.Range",
                "None"
            ],
            "arguments": {
                "object_": [
                    "Callable",
                    "hints.Domain",
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 92,
            "return": [
                "bytes",
                "str",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "object_": [
                    "bytes",
                    "str",
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "_.read_batch": {
            "name": "read_batch",
            "location": 165,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "position": [
                    "int",
                    "float"
                ]
            }
        },
        "_.lines_splitter": {
            "name": "lines_splitter",
            "location": 137,
            "return": [
                "str",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int",
                "Type"
            ],
            "arguments": {
                "byte_sequence": [
                    "bytes",
                    "str",
                    "memoryview",
                    "bool",
                    "BinaryIO",
                    "Union[bytes, bytearray]"
                ]
            }
        }
    },
    "lz-master/lz/right.py": {
        "accumulator": {
            "name": "accumulator",
            "location": 25,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {
                "function": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]"
                ],
                "initial": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "attacher": {
            "name": "attacher",
            "location": 45,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {
                "object_": [
                    "Iterable[hints.Domain]",
                    "hints.Domain"
                ]
            }
        },
        "attach": {
            "name": "attach",
            "location": 58,
            "return": [
                "Iterable[hints.Domain]",
                "Generator"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ],
                "object_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 176,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "signature": [
                    "bytes",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "bool",
                    "float",
                    "dict",
                    "Optional[Union[str, Any]]"
                ],
                "args": []
            }
        },
        "folder": {
            "name": "folder",
            "location": 84,
            "return": [
                "Union[(lz.functional.Composition, Callable)]"
            ],
            "arguments": {
                "function": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]"
                ],
                "initial": [
                    "Iterable[hints.Domain]",
                    "Callable[hints.Range,hints.Domain,hints.Range]",
                    "hints.Range",
                    "Callable[[hints.Range,hints.Domain],hints.Range]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "_bind_positionals": {
            "name": "_bind_positionals",
            "location": 119,
            "return": [
                "paradigm.signatures.Base",
                "None"
            ],
            "arguments": {
                "signature": [
                    "Set[str]",
                    "paradigm.models.Base"
                ],
                "args": []
            }
        },
        "applier": {
            "name": "applier",
            "location": 188,
            "return": [
                "Applier"
            ],
            "arguments": {
                "function": [
                    "Callable[...,hints.Range]",
                    "hints.Domain"
                ]
            }
        },
        "Applier.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[...,hints.Range]",
                    "hints.Domain"
                ]
            }
        },
        "Applier.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "bool",
                "int",
                "Mapping[str, str]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lz-master/lz/sorting.py": {
        "search_implementation": {
            "name": "search_implementation",
            "location": 22,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "register_implementation": {
            "name": "register_implementation",
            "location": 34,
            "return": [
                "Union[(functools.partial, _T1)]"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "bytes",
                    "Dict",
                    "bytearray"
                ],
                "implementation": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "sorter": {
            "name": "sorter",
            "location": 74,
            "return": [
                "functools.partial[nothing]"
            ],
            "arguments": {}
        }
    },
    "lz-master/lz/textual.py": {
        "read_batch_from_end": {
            "name": "read_batch_from_end",
            "location": 5,
            "return": [
                "str",
                "bytearray",
                "bool",
                "int",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "byte_stream": [
                    "int",
                    "bytes",
                    "Optional[Callable]",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "lz-master/lz/transposition.py": {
        "transpose": {
            "name": "transpose",
            "location": 26,
            "return": [
                "hints.Range",
                "None"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 66,
            "return": [
                "Iterable[hints.FiniteIterable[hints.Domain]]",
                "Tuple"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_.coordinate": {
            "name": "coordinate",
            "location": 51,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "Generator",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "str"
            ],
            "arguments": {
                "queue": [
                    "deque",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "lz-master/lz/typology.py": {
        "instance_of": {
            "name": "instance_of",
            "location": 8,
            "return": [
                "functools.partial"
            ],
            "arguments": {}
        },
        "subclass_of": {
            "name": "subclass_of",
            "location": 31,
            "return": [
                "functools.partial"
            ],
            "arguments": {}
        },
        "is_instance_of": {
            "name": "is_instance_of",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "Tuple[type]",
                    "str",
                    "Tuple[Type]",
                    "List[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "types": [
                    "Tuple[type]",
                    "str",
                    "Tuple[Type]",
                    "List[str]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "is_subclass_of": {
            "name": "is_subclass_of",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type",
                    "Tuple[type]",
                    "Tuple[Type]"
                ],
                "types": [
                    "str",
                    "Type",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "lz-master/lz/__init__.py": {},
    "lz-master/tests/configs.py": {},
    "lz-master/tests/conftest.py": {
        "patch_replication": {
            "name": "patch_replication",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_replication.replicate_byte_buffer": {
            "name": "replicate_byte_buffer",
            "location": 33,
            "return": [
                "typing.Iterable[io.BytesIO]"
            ],
            "arguments": {
                "object_": [
                    "io.BytesIO",
                    "int",
                    "IO[bytes]",
                    "TextIO",
                    "BinaryIO"
                ]
            }
        },
        "patch_replication.replicate_byte_stream": {
            "name": "replicate_byte_stream",
            "location": 41,
            "return": [
                "typing.Iterable[io.BufferedReader]"
            ],
            "arguments": {
                "object_": [
                    "io.BufferedReader",
                    "int",
                    "Union[List[str], Tuple[str, ...]]",
                    "bytes"
                ]
            }
        },
        "patch_replication.replicate_text_stream": {
            "name": "replicate_text_stream",
            "location": 49,
            "return": [
                "typing.Iterable[typing.TextIO]"
            ],
            "arguments": {
                "object_": [
                    "TextIO",
                    "int",
                    "io.StringIO",
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Union[str, IO]"
                ]
            }
        },
        "patch_replication.replicate_sized": {
            "name": "replicate_sized",
            "location": 60,
            "return": [
                "typing.Iterable[typing.Any]"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "Mapping[Tuple[str, str], Any]"
                ]
            }
        },
        "patch_replication.replicate_dictionary": {
            "name": "replicate_dictionary",
            "location": 71,
            "return": [
                "typing.Iterable[typing.Dict[typing.Hashable, typing.Any]]"
            ],
            "arguments": {
                "object_": [
                    "Dict[Hashable, Any]",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/hints.py": {},
    "lz-master/tests/utils.py": {
        "iterable_starts_with": {
            "name": "iterable_starts_with",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "float"
                ],
                "prefix": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "iterable_ends_with": {
            "name": "iterable_ends_with",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "[[]]",
                    "Set[int]",
                    "Optional[int]"
                ],
                "suffix": [
                    "Optional[bool]",
                    "Sequence[T]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "iterables_has_same_elements": {
            "name": "iterables_has_same_elements",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "left_iterable": [
                    "Iterable[Any]",
                    "int",
                    "Tuple[int, int, int, int]"
                ],
                "right_iterable": [
                    "Iterable[Any]",
                    "int",
                    "Tuple[int, int, int, int]"
                ]
            }
        },
        "is_iterable_subset_of": {
            "name": "is_iterable_subset_of",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "int",
                    "str",
                    "List[str]"
                ],
                "target": [
                    "Iterable[Any]",
                    "int",
                    "set"
                ]
            }
        },
        "are_objects_similar": {
            "name": "are_objects_similar",
            "location": 83,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "object_": [
                    "hints.Domain",
                    "Callable",
                    "Union[str, bytes]"
                ]
            }
        },
        "are_objects_equal": {
            "name": "are_objects_equal",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "are_mappings_similar": {
            "name": "are_mappings_similar",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "are_sets_similar": {
            "name": "are_sets_similar",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "set",
                    "str",
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "has_similar_types": {
            "name": "has_similar_types",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "left_object": [
                    "BaseException"
                ],
                "right_object": [
                    "BaseException"
                ]
            }
        },
        "are_iterables_similar": {
            "name": "are_iterables_similar",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "Iterable[Any]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "is_empty": {
            "name": "is_empty",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 213,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "function": [
                    "Iterable[lz.hints.Domain]",
                    "Iterable[hints.Domain]",
                    "Callable[[hints.Range, hints.Domain], hints.Range]",
                    "hints.Range",
                    "Callable"
                ]
            }
        },
        "equivalence": {
            "name": "equivalence",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "left_statement": [
                    "bool",
                    "float",
                    "List[str]",
                    "int",
                    "FrozenSet[Any]",
                    "bytes"
                ],
                "right_statement": [
                    "bool",
                    "float",
                    "List[str]",
                    "int",
                    "FrozenSet[Any]",
                    "bytes"
                ]
            }
        },
        "implication": {
            "name": "implication",
            "location": 222,
            "return": [
                "Union[(bool, _T1)]"
            ],
            "arguments": {
                "antecedent": [
                    "int",
                    "Callable",
                    "str"
                ],
                "consequent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "not_raises": {
            "name": "not_raises",
            "location": 227,
            "return": [
                "typing_extensions.ContextManager[None]"
            ],
            "arguments": {}
        },
        "round_trip_pickle": {
            "name": "round_trip_pickle",
            "location": 234,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "object_": [
                    "dict",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "is_pickleable": {
            "name": "is_pickleable",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "to_stream_contents": {
            "name": "to_stream_contents",
            "location": 247,
            "return": [
                "str",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]",
                "List[str]"
            ],
            "arguments": {
                "stream": [
                    "bytes",
                    "TextIO"
                ]
            }
        },
        "to_stream_size": {
            "name": "to_stream_size",
            "location": 253,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "stream": [
                    "Callable",
                    "int",
                    "Optional[bool]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/__init__.py": {},
    "lz-master/tests/arithmetical_tests/test_ceil_division.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "real_number": [],
                "non_zero_real_number": []
            }
        }
    },
    "lz-master/tests/arithmetical_tests/__init__.py": {},
    "lz-master/tests/filtration_tests/test_grabber.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_false_predicate": {
            "name": "test_false_predicate",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Dict"
                ],
                "false_predicate": []
            }
        },
        "test_true_predicate": {
            "name": "test_true_predicate",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Callable",
                    "Iterable[Any]",
                    "hypothesis.strategies.SearchStrategy[str]"
                ],
                "true_predicate": [
                    "List[int]",
                    "int",
                    "tests.conftesWorker",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "lz-master/tests/filtration_tests/test_kicker.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_false_predicate": {
            "name": "test_false_predicate",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "str",
                    "Iterable[Any]"
                ],
                "false_predicate": []
            }
        },
        "test_true_predicate": {
            "name": "test_true_predicate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "Dict"
                ],
                "true_predicate": [
                    "List[int]",
                    "int",
                    "tests.conftesWorker",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "lz-master/tests/filtration_tests/test_scavenger.py": {
        "test_default_predicate": {
            "name": "test_default_predicate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable"
                ]
            }
        },
        "test_custom_predicate": {
            "name": "test_custom_predicate",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "predicate": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "lz-master/tests/filtration_tests/test_separator.py": {
        "test_default_predicate": {
            "name": "test_default_predicate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_custom_predicate": {
            "name": "test_custom_predicate",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate": [
                    "lz.hints.Predicate",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "lz-master/tests/filtration_tests/test_sifter.py": {
        "test_default_predicate": {
            "name": "test_default_predicate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable"
                ]
            }
        },
        "test_custom_predicate": {
            "name": "test_custom_predicate",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "predicate": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "lz-master/tests/filtration_tests/__init__.py": {},
    "lz-master/tests/functional_tests/__init__.py": {},
    "lz-master/tests/functional_tests/cleave_tests/strategies.py": {},
    "lz-master/tests/functional_tests/cleave_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "positional_arguments": [],
                "keyword_arguments": []
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cleavage_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cleavage_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/cleave_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cleavage_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/cleave_tests/test_properties.py": {
        "test_currying": {
            "name": "test_currying",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cleavage_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/cleave_tests/__init__.py": {},
    "lz-master/tests/functional_tests/combine_tests/strategies.py": {
        "to_combination_calls": {
            "name": "to_combination_calls",
            "location": 16,
            "return": [
                "str",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "maps_sequence": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/combine_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "positional_arguments": [
                    "Callable"
                ]
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "combination_call": [
                    "str",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "raiden.utils.TransactionHash"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "combination_call": [
                    "str",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "raiden.utils.TransactionHash"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/combine_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "combination_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/combine_tests/test_properties.py": {
        "test_currying": {
            "name": "test_currying",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "combination_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/combine_tests/__init__.py": {},
    "lz-master/tests/functional_tests/compose_tests/strategies.py": {},
    "lz-master/tests/functional_tests/compose_tests/test_binding.py": {
        "test_method_definition": {
            "name": "test_method_definition",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "Dict[mypy.nodes.Expression,mypy.types.Type]",
                    "Type",
                    "Callable[...,Awaitable]"
                ],
                "class_bases": [
                    "Tuple[Union[int,int]]",
                    "bool",
                    "str",
                    "Tuple[int,int]",
                    "Dict[mypy.nodes.Expression,mypy.types.Type]",
                    "Type",
                    "Callable[...,Awaitable]"
                ],
                "method_name": [
                    "bool",
                    "utils.types.Vec3D",
                    "str",
                    "Dict",
                    "None",
                    "Any",
                    "Optional[str]",
                    "mypy.types.Type"
                ],
                "maps_chain_call": [
                    "bool",
                    "str",
                    "tests.hints.CompositionCall"
                ]
            }
        },
        "ignore_self": {
            "name": "ignore_self",
            "location": 33,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/compose_tests/test_copy.py": {
        "test_shallow": {
            "name": "test_shallow",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_chain_call": [
                    "tests.hints.CompositionCall"
                ]
            }
        },
        "test_deep": {
            "name": "test_deep",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_chain_call": [
                    "tests.hints.CompositionCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/compose_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "callable_": [
                    "bool",
                    "Dict[str,float]",
                    "str",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_chain_call": [
                    "Iterable[str]",
                    "tests.hints.CompositionCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/compose_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_chain_call": [
                    "tests.hints.CompositionCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/compose_tests/test_properties.py": {
        "test_identity": {
            "name": "test_identity",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "map_call": [
                    "Container",
                    "tests.hints.CompositionCall"
                ]
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_triplet_call": [
                    "Iterable[str]",
                    "tests.hints.CompositionCall"
                ]
            }
        },
        "test_currying": {
            "name": "test_currying",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "maps_chain_call": [
                    "Iterable[str]",
                    "tests.hints.CompositionCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/compose_tests/__init__.py": {},
    "lz-master/tests/functional_tests/curry_tests/test_factory.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "built_in_function": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "class_": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "function": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "method": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "method_descriptor": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "partial_callable": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ],
                "wrapper_descriptor": [
                    "Type",
                    "Callable",
                    "bool",
                    "types.FunctionType",
                    "types.MethodType",
                    "functools.partial"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/curry_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/curry_tests/test_properties.py": {
        "test_empty_call": {
            "name": "test_empty_call",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "tests.hints.Function",
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "test_valid_call": {
            "name": "test_valid_call",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "Callable",
                    "tests.hints.Function.Call",
                    "tests.hints.FunctionCall"
                ]
            }
        },
        "test_involution": {
            "name": "test_involution",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        },
        "test_invalid_args_call": {
            "name": "test_invalid_args_call",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call_with_invalid_args": [
                    "tests.hints.Function.Call",
                    "tests.hints.FunctionCall"
                ]
            }
        },
        "test_invalid_kwargs_call": {
            "name": "test_invalid_kwargs_call",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call_with_invalid_kwargs": [
                    "bool",
                    "tests.hints.Function.Call",
                    "tests.hints.FunctionCall"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/curry_tests/__init__.py": {},
    "lz-master/tests/functional_tests/flip_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/flip_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/flip_tests/test_properties.py": {
        "test_involution": {
            "name": "test_involution",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        },
        "test_currying": {
            "name": "test_currying",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/flip_tests/__init__.py": {},
    "lz-master/tests/functional_tests/identity_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": []
            }
        }
    },
    "lz-master/tests/functional_tests/identity_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": []
            }
        }
    },
    "lz-master/tests/functional_tests/identity_tests/test_properties.py": {
        "test_currying": {
            "name": "test_currying",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": []
            }
        }
    },
    "lz-master/tests/functional_tests/identity_tests/__init__.py": {},
    "lz-master/tests/functional_tests/pack_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/pack_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/pack_tests/test_properties.py": {
        "test_currying": {
            "name": "test_currying",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "bool",
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/pack_tests/__init__.py": {},
    "lz-master/tests/functional_tests/to_constant_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "Set",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "positional_arguments": [],
                "keyword_arguments": []
            }
        }
    },
    "lz-master/tests/functional_tests/to_constant_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "positional_arguments": [],
                "keyword_arguments": []
            }
        }
    },
    "lz-master/tests/functional_tests/to_constant_tests/test_properties.py": {
        "test_currying": {
            "name": "test_currying",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "positional_arguments": [
                    "str",
                    "Container"
                ],
                "keyword_arguments": [
                    "str",
                    "Container"
                ]
            }
        }
    },
    "lz-master/tests/functional_tests/to_constant_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/test_capacity.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Callable"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/test_expand.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/test_first.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "test_empty_iterable": {
            "name": "test_empty_iterable",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/test_flatten.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Callable"
                ]
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/test_interleave.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "nested_iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_iterable": [
                    "Iterable[Iterable[Any]]",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.Domain]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/test_last.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "object_": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_empty_iterable": {
            "name": "test_empty_iterable",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/chopper_tests/test_definition.py": {
        "test_size": {
            "name": "test_size",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "int"
                ],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "test_elements": {
            "name": "test_elements",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.Sortable]",
                    "str",
                    "Set[str]"
                ],
                "size": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/chopper_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "str",
                    "Iterable[lz.hints.Sortable]",
                    "Iterable[Hashable]",
                    "Callable[...,collections.abc.AsyncIterator]",
                    "List[str]",
                    "Callable[...,AsyncIterator[T]]"
                ],
                "size": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/chopper_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/cutter_tests/strategies.py": {},
    "lz-master/tests/iterating_tests/cutter_tests/test_definition.py": {
        "test_capacity": {
            "name": "test_capacity",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "slice_": [
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_elements": {
            "name": "test_elements",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]"
                ],
                "slice_": [
                    "float",
                    "str"
                ]
            }
        },
        "slice_to_size": {
            "name": "slice_to_size",
            "location": 37,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Dict[str,Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "slice_": [
                    "int",
                    "slice",
                    "float",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/cutter_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "slice_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/cutter_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/grouper_tests/strategies.py": {
        "grouper_key": {
            "name": "grouper_key",
            "location": 12,
            "return": [
                "int",
                "str",
                "Dict[str,int]"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "Hashable",
                    "str",
                    "bool",
                    "Iterable[Union[Any, int]]"
                ],
                "odd_order": [
                    "int",
                    "Hashable",
                    "str",
                    "bool",
                    "Iterable[Union[Any,int]]"
                ]
            }
        },
        "to_key_function": {
            "name": "to_key_function",
            "location": 17,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "odd_order": [
                    "int",
                    "str",
                    "Iterable",
                    "float",
                    "bool"
                ]
            }
        },
        "is_odd": {
            "name": "is_odd",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/grouper_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Hashable]",
                    "str",
                    "Dict",
                    "List[str]"
                ],
                "key_function": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/grouper_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Hashable]",
                    "str",
                    "Dict",
                    "List[str]"
                ],
                "key_function": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/grouper_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/header_tests/test_definition.py": {
        "test_capacity": {
            "name": "test_capacity",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[str]",
                    "Dict"
                ],
                "size": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_elements": {
            "name": "test_elements",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Callable",
                    "Dict"
                ],
                "size": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/header_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[str]",
                    "Dict"
                ],
                "size": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/header_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/mapper_tests/strategies.py": {},
    "lz-master/tests/iterating_tests/mapper_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "map_": [
                    "bool",
                    "Dict[str,float]",
                    "str",
                    "Iterable[Any]",
                    "int"
                ],
                "empty_iterable": [
                    "Callable"
                ]
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "map_": [],
                "arguments": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "map_": [],
                "arguments": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/mapper_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "map_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "arguments": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/mapper_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/slider_tests/test_definition.py": {
        "test_base_case_by_size_capacity": {
            "name": "test_base_case_by_size_capacity",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Dict[str,float]",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_base_case_by_size_elements": {
            "name": "test_base_case_by_size_elements",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Dict",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_step_by_size_total_capacity": {
            "name": "test_step_by_size_total_capacity",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.Sortable]",
                    "str",
                    "Set[str]"
                ],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "test_step_by_size_elementwise_capacity": {
            "name": "test_step_by_size_elementwise_capacity",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_step_by_size_elements": {
            "name": "test_step_by_size_elements",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "str",
                    "Iterable[lz.hints.Sortable]",
                    "Set[str]"
                ],
                "size": [
                    "List[str]",
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "test_base_case_by_iterable_capacity": {
            "name": "test_base_case_by_iterable_capacity",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_base_case_by_iterable_elements": {
            "name": "test_base_case_by_iterable_elements",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_step_left_by_iterable_total_capacity": {
            "name": "test_step_left_by_iterable_total_capacity",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_step_left_by_iterable_elementwise_capacity": {
            "name": "test_step_left_by_iterable_elementwise_capacity",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "Tuple[Union[int,...]]",
                    "Optional[Tuple[int,...]]",
                    "bool"
                ]
            }
        },
        "test_step_left_by_iterable_elements": {
            "name": "test_step_left_by_iterable_elements",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "object_": [
                    "int",
                    "str",
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "List[List[Any]]"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_step_right_by_iterable_total_capacity": {
            "name": "test_step_right_by_iterable_total_capacity",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_step_right_by_iterable_elementwise_capacity": {
            "name": "test_step_right_by_iterable_elementwise_capacity",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "Tuple[Union[int,...]]",
                    "Optional[Tuple[int,...]]",
                    "bool"
                ]
            }
        },
        "test_step_right_by_iterable_elements": {
            "name": "test_step_right_by_iterable_elements",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Union[int,slice]",
                    "int"
                ],
                "object_": [
                    "int",
                    "str",
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "List[List[Any]]"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/slider_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "str",
                    "Iterable[lz.hints.Sortable]",
                    "Iterable[Hashable]",
                    "Callable[...,collections.abc.AsyncIterator]",
                    "List[str]",
                    "Callable[...,AsyncIterator[T]]"
                ],
                "size": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/slider_tests/__init__.py": {},
    "lz-master/tests/iterating_tests/trailer_tests/test_definition.py": {
        "test_capacity": {
            "name": "test_capacity",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[str]",
                    "Dict"
                ],
                "size": [
                    "Set"
                ]
            }
        },
        "test_elements": {
            "name": "test_elements",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Callable",
                    "Dict"
                ],
                "size": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/trailer_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_iterable": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[str]",
                    "Dict"
                ],
                "size": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/iterating_tests/trailer_tests/__init__.py": {},
    "lz-master/tests/left_tests/__init__.py": {},
    "lz-master/tests/left_tests/accumulator_tests/strategies.py": {
        "to_accumulator_calls": {
            "name": "to_accumulator_calls",
            "location": 12,
            "return": [
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "Union[str, Callable]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "projector": [
                    "List",
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "to_accumulator_calls.from_domains": {
            "name": "from_domains",
            "location": 13,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "domains": [
                    "tests.hints.Strategy[tests.hints.Strategy]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/accumulator_tests/test_definition.py": {
        "test_first": {
            "name": "test_first",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_last": {
            "name": "test_last",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/accumulator_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/accumulator_tests/__init__.py": {},
    "lz-master/tests/left_tests/applier_tests/test_curry.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_invalid_args": {
            "name": "test_invalid_args",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "Set[str]",
                    "tests.hints.FunctionCall",
                    "str",
                    "bool"
                ]
            }
        },
        "test_invalid_kwargs": {
            "name": "test_invalid_kwargs",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call",
                    "hints.Domain"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/applier_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/applier_tests/test_pickle.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/applier_tests/test_properties.py": {
        "test_consecutive_application": {
            "name": "test_consecutive_application",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_composition_with_right": {
            "name": "test_composition_with_right",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/applier_tests/__init__.py": {},
    "lz-master/tests/left_tests/attacher_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "object_": [
                    "Set",
                    "Dict[str,Any]",
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/attacher_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/attacher_tests/__init__.py": {},
    "lz-master/tests/left_tests/folder_tests/strategies.py": {
        "to_folder_calls": {
            "name": "to_folder_calls",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "projector": [
                    "int",
                    "List[int]",
                    "None",
                    "Optional[List[Any]]",
                    "bool"
                ]
            }
        },
        "to_folder_calls.from_domains": {
            "name": "from_domains",
            "location": 19,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "domains": [
                    "tests.hints.Strategy[tests.hints.Strategy]",
                    "str",
                    "Union[str, type]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/folder_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_folder_call": [
                    "tests.hints.RightFolderCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_folder_call": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/folder_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "folder_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/left_tests/folder_tests/__init__.py": {},
    "lz-master/tests/logical_tests/test_conjoin.py": {
        "test_idempotency": {
            "name": "test_idempotency",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "predicate_argument": []
            }
        },
        "test_absorbing_element": {
            "name": "test_absorbing_element",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "int"
                ],
                "false_predicate": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "lz.sorting.Implementation"
                ],
                "predicate_argument": []
            }
        },
        "test_neutral_element": {
            "name": "test_neutral_element",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "lz.sorting.Implementation"
                ],
                "true_predicate": [
                    "str",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_commutativity": {
            "name": "test_commutativity",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "mid_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "lz-master/tests/logical_tests/test_disjoin.py": {
        "test_idempotency": {
            "name": "test_idempotency",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "predicate_argument": []
            }
        },
        "test_absorbing_element": {
            "name": "test_absorbing_element",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ],
                "true_predicate": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "lz.sorting.Implementation"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_neutral_element": {
            "name": "test_neutral_element",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "lz.sorting.Implementation"
                ],
                "false_predicate": [
                    "str",
                    "int"
                ],
                "predicate_argument": []
            }
        },
        "test_commutativity": {
            "name": "test_commutativity",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "mid_predicate": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "lz-master/tests/logical_tests/test_exclusive_disjoin.py": {
        "test_idempotency": {
            "name": "test_idempotency",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [],
                "predicate_argument": []
            }
        },
        "test_neutral_element": {
            "name": "test_neutral_element",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "false_predicate": [
                    "str",
                    "int"
                ],
                "predicate_argument": []
            }
        },
        "test_commutativity": {
            "name": "test_commutativity",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_associativity": {
            "name": "test_associativity",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "left_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "mid_predicate": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ],
                "right_predicate": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "predicate_argument": [
                    "Dict",
                    "Dict[str,Any]",
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "lz-master/tests/logical_tests/test_negate.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "false_predicate": [
                    "bool",
                    "Dict",
                    "Tuple[int,int,bool]",
                    "Tuple[Union[int,int,bool]]"
                ],
                "true_predicate": [
                    "bool",
                    "Dict",
                    "Tuple[Union[int,int,bool]]",
                    "Tuple[int,int,bool]",
                    "None",
                    "lz.hints.Domain",
                    "Optional[int]"
                ],
                "positional_arguments": [
                    "Callable"
                ],
                "keyword_arguments": [
                    "Callable"
                ]
            }
        },
        "test_involution": {
            "name": "test_involution",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "false_predicate": [
                    "bool",
                    "Dict",
                    "Tuple[Union[int,int,bool]]",
                    "Tuple[int,int,bool]",
                    "lz.hints.Domain"
                ],
                "true_predicate": [
                    "bool",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "int"
                ],
                "positional_arguments": [
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "keyword_arguments": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "lz-master/tests/logical_tests/__init__.py": {},
    "lz-master/tests/replication_tests/__init__.py": {},
    "lz-master/tests/replication_tests/replicator_tests/strategies.py": {},
    "lz-master/tests/replication_tests/replicator_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "bool",
                    "Dict[str,float]",
                    "str",
                    "Iterable[Any]",
                    "int"
                ],
                "iterable": [
                    "bool",
                    "Dict[str,float]",
                    "str",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "iterable": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "lz-master/tests/replication_tests/replicator_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "iterable": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "float",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "lz-master/tests/replication_tests/replicator_tests/__init__.py": {},
    "lz-master/tests/reversal_tests/strategies.py": {
        "to_sequences": {
            "name": "to_sequences",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "min_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "to_stream_with_reverse_parameters": {
            "name": "to_stream_with_reverse_parameters",
            "location": 38,
            "return": [
                "IO[str]"
            ],
            "arguments": {
                "stream": [
                    "Iterable[Any]",
                    "memoryview",
                    "int",
                    "Iterable[T]",
                    "Optional[str]",
                    "str",
                    "Iterator[Any]",
                    "None"
                ]
            }
        },
        "to_separator": {
            "name": "to_separator",
            "location": 50,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "any_string": [
                    "AnyStr",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "to_separator.to_start_stop": {
            "name": "to_start_stop",
            "location": 58,
            "return": [],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/reversal_tests/test_reverse.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_sequence": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_non_empty_left_end": {
            "name": "test_non_empty_left_end",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_sequence": [
                    "Sequence[Any]",
                    "Iterable[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "test_non_empty_right_end": {
            "name": "test_non_empty_right_end",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_sequence": [
                    "Sequence[Any]",
                    "Iterable[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "test_involution": {
            "name": "test_involution",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "sequence": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_byte_stream": {
            "name": "test_byte_stream",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "stream_with_reverse_parameters": []
            }
        },
        "test_text_stream": {
            "name": "test_text_stream",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "text_stream_with_reverse_parameters": [
                    "str",
                    "int"
                ]
            }
        },
        "remove_newline_characters_from_byte_sequence": {
            "name": "remove_newline_characters_from_byte_sequence",
            "location": 92,
            "return": [
                "str",
                "int",
                "bool",
                "bytearray",
                "Union[bytes,bytearray]",
                "bytes"
            ],
            "arguments": {
                "byte_sequence": [
                    "str",
                    "List[int]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "remove_newline_characters_from_string": {
            "name": "remove_newline_characters_from_string",
            "location": 97,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "test_unsupported_type": {
            "name": "test_unsupported_type",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "Type",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "lz-master/tests/reversal_tests/__init__.py": {},
    "lz-master/tests/right_tests/__init__.py": {},
    "lz-master/tests/right_tests/accumulator_tests/strategies.py": {
        "to_accumulator_calls": {
            "name": "to_accumulator_calls",
            "location": 12,
            "return": [
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "Union[str, Callable]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "projector": [
                    "List",
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "to_accumulator_calls.from_domains": {
            "name": "from_domains",
            "location": 13,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "domains": [
                    "tests.hints.Strategy[tests.hints.Strategy]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/accumulator_tests/test_definition.py": {
        "test_first": {
            "name": "test_first",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_last": {
            "name": "test_last",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/accumulator_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "accumulator_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/accumulator_tests/__init__.py": {},
    "lz-master/tests/right_tests/applier_tests/test_curry.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_invalid_args": {
            "name": "test_invalid_args",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "Set[str]",
                    "tests.hints.FunctionCall",
                    "str",
                    "bool"
                ]
            }
        },
        "test_invalid_kwargs": {
            "name": "test_invalid_kwargs",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "function_call": [
                    "tests.hints.FunctionCall",
                    "tests.hints.Function.Call",
                    "hints.Domain"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/applier_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/applier_tests/test_pickle.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/applier_tests/test_properties.py": {
        "test_consecutive_application": {
            "name": "test_consecutive_application",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_composition_with_left": {
            "name": "test_composition_with_left",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "partitioned_function_call": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/applier_tests/__init__.py": {},
    "lz-master/tests/right_tests/attacher_tests/test_definition.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "object_": [
                    "Set",
                    "Dict[str,Any]",
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/attacher_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[lz.hints.Domain]",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "object_": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/attacher_tests/__init__.py": {},
    "lz-master/tests/right_tests/folder_tests/strategies.py": {
        "to_folder_calls": {
            "name": "to_folder_calls",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "projector": [
                    "int",
                    "List[int]",
                    "None",
                    "Optional[List[Any]]",
                    "bool"
                ]
            }
        },
        "to_folder_calls.from_domains": {
            "name": "from_domains",
            "location": 19,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "domains": [
                    "tests.hints.Strategy[tests.hints.Strategy]",
                    "str",
                    "Union[str, type]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/folder_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_folder_call": [
                    "tests.hints.RightFolderCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_folder_call": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/folder_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "folder_call": [
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ]
            }
        }
    },
    "lz-master/tests/right_tests/folder_tests/__init__.py": {},
    "lz-master/tests/sorting_tests/strategies.py": {
        "is_algorithm_unregistered": {
            "name": "is_algorithm_unregistered",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "lz-master/tests/sorting_tests/test_register_implementation.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "unregistered_sorting_algorithm": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "sorting_implementation": [
                    "int",
                    "float"
                ]
            }
        },
        "test_currying": {
            "name": "test_currying",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "unregistered_sorting_algorithm": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "sorting_implementation": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_re_registration": {
            "name": "test_re_registration",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_sorting_algorithm": [
                    "str",
                    "lz.sorting.Implementation",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sorting_implementation": [
                    "str",
                    "lz.sorting.Implementation",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "is_algorithm_registered": {
            "name": "is_algorithm_registered",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "lz-master/tests/sorting_tests/test_search_implementation.py": {
        "test_search_registered_algorithm": {
            "name": "test_search_registered_algorithm",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_sorting_algorithm": [
                    "Callable"
                ]
            }
        },
        "test_search_unregistered_algorithm": {
            "name": "test_search_unregistered_algorithm",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "unregistered_sorting_algorithm": [
                    "str",
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        }
    },
    "lz-master/tests/sorting_tests/__init__.py": {},
    "lz-master/tests/sorting_tests/sorter_tests/strategies.py": {},
    "lz-master/tests/sorting_tests/sorter_tests/test_definition.py": {
        "test_order": {
            "name": "test_order",
            "location": 19,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "sortable_iterable": [
                    "bool",
                    "Dict",
                    "str",
                    "Tuple[tuple[Union[int,int]]]",
                    "int",
                    "None",
                    "Tuple[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "registered_sorting_algorithm": [
                    "Dict",
                    "str",
                    "bytearray",
                    "Dict[str,Any]",
                    "List[List[int]]",
                    "List[list[int]]",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "sorting_key": [
                    "Dict",
                    "str",
                    "bytearray",
                    "Dict[str,Any]",
                    "List[List[int]]",
                    "List[list[int]]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "objects_are_partially_ordered": {
            "name": "objects_are_partially_ordered",
            "location": 40,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "left_object": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "right_object": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_capacity": {
            "name": "test_capacity",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "sortable_iterable": [
                    "Iterable[lz.hints.Sortable]",
                    "Callable",
                    "List[str]",
                    "Iterable[Any]",
                    "T"
                ],
                "registered_sorting_algorithm": [
                    "Dict",
                    "str",
                    "bytearray",
                    "Dict[str,Any]",
                    "List[List[int]]",
                    "List[list[int]]",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "sorting_key": [
                    "Dict",
                    "str",
                    "bytearray",
                    "Dict[str,Any]",
                    "List[List[int]]",
                    "List[list[int]]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "test_elements": {
            "name": "test_elements",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "sortable_iterable": [
                    "Iterable[lz.hints.Sortable]",
                    "str",
                    "Iterable[Any]"
                ],
                "registered_sorting_algorithm": [
                    "str",
                    "Dict",
                    "bytearray",
                    "Dict[str,Any]",
                    "Tuple",
                    "bytes"
                ],
                "sorting_key": [
                    "str",
                    "Dict",
                    "bytearray",
                    "Dict[str,Any]",
                    "Tuple",
                    "bytes"
                ]
            }
        }
    },
    "lz-master/tests/sorting_tests/sorter_tests/__init__.py": {},
    "lz-master/tests/strategies/definitions.py": {
        "is_not_protocol": {
            "name": "is_not_protocol",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "is_method_descriptor": {
            "name": "is_method_descriptor",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "is_wrapper_descriptor": {
            "name": "is_wrapper_descriptor",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "bytes"
                ]
            }
        }
    },
    "lz-master/tests/strategies/functional.py": {
        "module_to_classes": {
            "name": "module_to_classes",
            "location": 66,
            "return": [
                "list"
            ],
            "arguments": {
                "module": [
                    "str",
                    "types.ModuleType",
                    "Any",
                    "None",
                    "django.db.models.fields.Field",
                    "Optional[Any]"
                ]
            }
        },
        "extend_suitable_maps": {
            "name": "extend_suitable_maps",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "maps_tuples": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "is_various": {
            "name": "is_various",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "int"
                ]
            }
        },
        "to_transparent_functions_calls": {
            "name": "to_transparent_functions_calls",
            "location": 195,
            "return": [
                "Container[T]",
                "int"
            ],
            "arguments": {
                "function": [
                    "tests.hints.Function",
                    "mypy.types.Type",
                    "wemake_python_styleguide.types.AnyFunctionDef"
                ]
            }
        },
        "to_transparent_functions_calls_with_invalid_args": {
            "name": "to_transparent_functions_calls_with_invalid_args",
            "location": 202,
            "return": [
                "mypy.types.Type",
                "int"
            ],
            "arguments": {
                "function": [
                    "Type",
                    "Exception",
                    "tests.hints.Function",
                    "mypy.types.Instance"
                ]
            }
        },
        "to_transparent_functions_calls_with_invalid_kwargs": {
            "name": "to_transparent_functions_calls_with_invalid_kwargs",
            "location": 209,
            "return": [
                "Container[T]",
                "int"
            ],
            "arguments": {
                "function": [
                    "tests.hints.Function",
                    "wemake_python_styleguide.types.AnyFunctionDef",
                    "mypy.types.Type"
                ]
            }
        },
        "partition_call": {
            "name": "partition_call",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "call": [
                    "Callable",
                    "tests.hints.Function.Call",
                    "Exception",
                    "List[D]",
                    "List[mypy.types.Type.VarDef]"
                ]
            }
        },
        "to_invalid_args": {
            "name": "to_invalid_args",
            "location": 252,
            "return": [
                "int",
                "bool",
                "List['Product']",
                "str"
            ],
            "arguments": {
                "function": [
                    "int",
                    "str",
                    "Type",
                    "faustypes.models.IsInstanceArgT",
                    "bool"
                ]
            }
        },
        "to_invalid_kwargs": {
            "name": "to_invalid_kwargs",
            "location": 262,
            "return": [
                "str",
                "float",
                "Optional[str]",
                "List[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Type",
                    "int",
                    "float",
                    "faustypes.models.IsInstanceArgT",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "signature_to_max_positionals_count": {
            "name": "signature_to_max_positionals_count",
            "location": 274,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "signature": [
                    "int",
                    "paradigm.models.Base",
                    "models.Base"
                ]
            }
        },
        "plain_signature_to_max_positionals_count": {
            "name": "plain_signature_to_max_positionals_count",
            "location": 280,
            "return": [
                "int",
                "str",
                "Set",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "signature": [
                    "float",
                    "models.Trip",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Optional[float]",
                    "int",
                    "models.Route"
                ]
            }
        },
        "overloaded_signature_to_max_positionals_count": {
            "name": "overloaded_signature_to_max_positionals_count",
            "location": 289,
            "return": [
                "int"
            ],
            "arguments": {
                "signature": [
                    "int",
                    "paradigm.models.Overloaded",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "signature_to_keywords_union": {
            "name": "signature_to_keywords_union",
            "location": 296,
            "return": [
                "Dict[str,paradigm.models.Parameter]",
                "None"
            ],
            "arguments": {
                "signature": [
                    "int",
                    "paradigm.models.Base",
                    "models.Base"
                ]
            }
        },
        "plain_signature_to_keywords_union": {
            "name": "plain_signature_to_keywords_union",
            "location": 303,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "signature": [
                    "float",
                    "Optional[float]",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "models.Trip",
                    "str",
                    "int",
                    "Union[int,str]"
                ]
            }
        },
        "overloaded_signature_to_keywords_union": {
            "name": "overloaded_signature_to_keywords_union",
            "location": 313,
            "return": [
                "Dict",
                "esm.models.service_type.ServiceType",
                "str"
            ],
            "arguments": {
                "signature": [
                    "str",
                    "bytes",
                    "paradigm.models.Overloaded"
                ]
            }
        },
        "extend_suitable_maps.expand": {
            "name": "expand",
            "location": 94,
            "return": [
                "str",
                "trezor.utils.Writer",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "maps_tuple": []
            }
        },
        "partition_call.partition_args": {
            "name": "partition_args",
            "location": 229,
            "return": [
                "Tuple",
                "Optional[int]",
                "float",
                "Callable",
                "Optional[Tuple[int,int]]",
                "int"
            ],
            "arguments": {
                "args_position": [
                    "int"
                ]
            }
        },
        "partition_call.partition_kwargs": {
            "name": "partition_kwargs",
            "location": 232,
            "return": [
                "Tuple[dict]",
                "Dict",
                "Dict[str,float]",
                "Tuple",
                "Dict[str,str]",
                "Mapping[starfish.types.Axes,Union[int,slice]]",
                "Dict[str,bool]"
            ],
            "arguments": {
                "first_keys": [
                    "Container[str]",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "MutableMapping[Any, Any]"
                ]
            }
        },
        "overloaded_signature_to_keywords_union.unite": {
            "name": "unite",
            "location": 318,
            "return": [
                "Dict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "left_dictionary": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "right_dictionary": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/strategies/iterating.py": {},
    "lz-master/tests/strategies/utils.py": {},
    "lz-master/tests/strategies/__init__.py": {},
    "lz-master/tests/strategies/literals/base.py": {
        "extend_json": {
            "name": "extend_json",
            "location": 77,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "children": [
                    "int",
                    "Set[str]",
                    "Callable[T,T]",
                    "str",
                    "Callable[[T],T]",
                    "T"
                ]
            }
        },
        "to_iterables": {
            "name": "to_iterables",
            "location": 94,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "min_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "to_byte_sequences_with_encoding": {
            "name": "to_byte_sequences_with_encoding",
            "location": 109,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ]
            }
        },
        "to_strings_with_encoding": {
            "name": "to_strings_with_encoding",
            "location": 119,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ]
            }
        },
        "to_strings_with_encoding.decode": {
            "name": "decode",
            "location": 121,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "byte_sequence": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/strategies/literals/empty.py": {},
    "lz-master/tests/strategies/literals/factories.py": {
        "limit_max_size": {
            "name": "limit_max_size",
            "location": 29,
            "return": [
                "Callable"
            ],
            "arguments": {
                "factory": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "to_any_streams": {
            "name": "to_any_streams",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_any_strings": {
            "name": "to_any_strings",
            "location": 54,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "encoding": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_byte_arrays": {
            "name": "to_byte_arrays",
            "location": 68,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_byte_sequences": {
            "name": "to_byte_sequences",
            "location": 79,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "to_byte_streams": {
            "name": "to_byte_streams",
            "location": 93,
            "return": [
                "bool",
                "str",
                "List[List[int]]",
                "int"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_byte_strings": {
            "name": "to_byte_strings",
            "location": 118,
            "return": [
                "bool",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_characters_bytes": {
            "name": "to_characters_bytes",
            "location": 133,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "encoding": [
                    "str",
                    "int",
                    "torch.utils.data.DataLoader",
                    "Optional[int]"
                ]
            }
        },
        "to_homogeneous_iterables": {
            "name": "to_homogeneous_iterables",
            "location": 250,
            "return": [
                "dict",
                "str",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "elements": [
                    "int",
                    "None",
                    "Optional[tests.hints.Strategy[lz.hints.Domain]]",
                    "Optional[int]"
                ]
            }
        },
        "to_homogeneous_sequences": {
            "name": "to_homogeneous_sequences",
            "location": 268,
            "return": [
                "Callable",
                "Optional[int]",
                "int",
                "raiden.utils.ChannelID",
                "str"
            ],
            "arguments": {
                "elements": [
                    "int",
                    "None",
                    "float",
                    "Optional[tests.hints.Strategy[lz.hints.Domain]]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "to_homogeneous_tuples": {
            "name": "to_homogeneous_tuples",
            "location": 285,
            "return": [
                "Callable",
                "Optional[int]",
                "int",
                "raiden.utils.ChannelID",
                "str"
            ],
            "arguments": {
                "elements": [
                    "int",
                    "None",
                    "Optional[tests.hints.Strategy[lz.hints.Domain]]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "Tuple[int,int]"
                ]
            }
        },
        "to_strings": {
            "name": "to_strings",
            "location": 297,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "to_text_streams": {
            "name": "to_text_streams",
            "location": 322,
            "return": [
                "bytes",
                "raiden.tests.fuzz.utils.Scrambling",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "encoding": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "strings_sizes_to_bytes_sizes": {
            "name": "strings_sizes_to_bytes_sizes",
            "location": 336,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "min_size": [
                    "str",
                    "int",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]"
                ],
                "max_size": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "List",
                    "Callable[[int],str]",
                    "Callable[int,str]"
                ]
            }
        },
        "to_tuples": {
            "name": "to_tuples",
            "location": 349,
            "return": [
                "str",
                "IO[str]",
                "Iterable[str]",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "elements": [
                    "Optional[tests.hints.Strategy[lz.hints.Domain]]",
                    "int",
                    "None",
                    "List[int]",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "limit_max_size.limited": {
            "name": "limited",
            "location": 32,
            "return": [
                "str",
                "float",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "to_byte_streams.append_bom": {
            "name": "append_bom",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "byte_string": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "to_characters_bytes.is_code_point_supported": {
            "name": "is_code_point_supported",
            "location": 141,
            "return": [
                "bool",
                "Dict[str,Any]",
                "str",
                "Dict[str,str]",
                "Optional[str]",
                "Dict[str,Dict[str,Any]]",
                "Mapping"
            ],
            "arguments": {
                "code_point": [
                    "int",
                    "str"
                ]
            }
        },
        "ContainersChain.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainersChain.__contains__": {
            "name": "__contains__",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "Callable",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Callable[[str],None]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "to_strings.decode": {
            "name": "decode",
            "location": 305,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "byte_sequence": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "to_strings.has_valid_size": {
            "name": "has_valid_size",
            "location": 308,
            "return": [
                "bool",
                "str",
                "Set",
                "List[str]",
                "Type",
                "List[Dict[str,str]]",
                "List"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "List[Tuple[str, Any]]"
                ]
            }
        }
    },
    "lz-master/tests/strategies/literals/__init__.py": {},
    "lz-master/tests/textual_tests/strategies.py": {
        "to_byte_stream_with_batch_parameters": {
            "name": "to_byte_stream_with_batch_parameters",
            "location": 13,
            "return": [
                "trezor.utils.Writer",
                "str",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "byte_stream": [
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "lz-master/tests/textual_tests/test_read_batch_from_end.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "stream_with_batch_parameters": [
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/textual_tests/__init__.py": {},
    "lz-master/tests/transposition_tests/strategies.py": {
        "to_transposable_iterables_elements": {
            "name": "to_transposable_iterables_elements",
            "location": 17,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "List[str]",
                    "Sequence[T]",
                    "tests.hints.Strategy[lz.hints.Domain]"
                ]
            }
        },
        "to_transposable_iterables": {
            "name": "to_transposable_iterables",
            "location": 25,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float",
                    "str",
                    "tests.hints.Strategy[lz.hints.Domain]",
                    "adbts.hints.Int"
                ]
            }
        }
    },
    "lz-master/tests/transposition_tests/test_transpose.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_iterable": [
                    "Callable"
                ]
            }
        },
        "test_step_left": {
            "name": "test_step_left",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "transposable_iterable": [
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "str",
                    "bool",
                    "Container[T]",
                    "Container"
                ],
                "transposable_iterable_element": [
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]"
                ]
            }
        },
        "test_step_right": {
            "name": "test_step_right",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "transposable_iterable": [
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "str",
                    "bool",
                    "Container[T]",
                    "Container"
                ],
                "transposable_iterable_element": [
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]"
                ]
            }
        },
        "test_involution": {
            "name": "test_involution",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "non_empty_transposable_iterable": [
                    "Iterable[Any]",
                    "Iterable[lz.hints.FiniteIterable[Any]]",
                    "Sequence[Any]",
                    "Iterable[lz.hints.Domain]"
                ]
            }
        },
        "test_unsupported_type": {
            "name": "test_unsupported_type",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "Type",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "lz-master/tests/transposition_tests/__init__.py": {},
    "lz-master/tests/typology_tests/__init__.py": {},
    "lz-master/tests/typology_tests/instance_of_tests/strategies.py": {
        "supports_instance_checks": {
            "name": "supports_instance_checks",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "Optional[T]",
                    "None",
                    "Optional[Callable[[bool],None]]",
                    "Callable[bool,None]",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[Union[list[str],str,None]]"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/instance_of_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "Callable"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "classes": [
                    "Callable[...,None]",
                    "bool",
                    "Callable"
                ],
                "class_": [
                    "bool",
                    "str",
                    "Type",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "object_": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/instance_of_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "pickleable_classes": [
                    "Dict[str,Any]",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "object_": [
                    "Callable",
                    "Type",
                    "Type[Any]",
                    "raiden.utils.TokenAmount"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/instance_of_tests/test_properties.py": {
        "test_type": {
            "name": "test_type",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "int",
                    "str",
                    "List[Type]",
                    "T",
                    "Sequence",
                    "Union[Sequence,SweepFixedValues]",
                    "Any",
                    "Optional[Union[str,Any]]",
                    "None"
                ]
            }
        },
        "test_result_type": {
            "name": "test_result_type",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "bool",
                    "Callable",
                    "str",
                    "tests.hints.Function"
                ],
                "object_": [
                    "Union[Type[Any],Tuple[Any,...]]",
                    "Type",
                    "str",
                    "bool",
                    "Tuple[Union[Any,...]]",
                    "AbstractSet[TemplatePropertyVariable]",
                    "AbstractSet"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "object_": [
                    "int"
                ]
            }
        },
        "test_commutativity": {
            "name": "test_commutativity",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "List[str]",
                    "str",
                    "bool",
                    "Hashable",
                    "Set[str]",
                    "Optional[bool]",
                    "None",
                    "T"
                ],
                "other_class": [
                    "List[str]",
                    "str",
                    "bool",
                    "Hashable",
                    "Set[str]",
                    "Optional[bool]",
                    "None",
                    "T"
                ],
                "object_": [
                    "List[str]",
                    "Tuple[str,Any]",
                    "Tuple[Union[str,Any]]"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/instance_of_tests/__init__.py": {},
    "lz-master/tests/typology_tests/subclass_of_tests/strategies.py": {
        "supports_instance_checks": {
            "name": "supports_instance_checks",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "Optional[T]",
                    "None",
                    "Optional[Callable[[bool],None]]",
                    "Callable[bool,None]",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[Union[list[str],str,None]]"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/subclass_of_tests/test_definition.py": {
        "test_base_case": {
            "name": "test_base_case",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "bool",
                    "Dict",
                    "Callable[dict,None]",
                    "Type[Exception]",
                    "Callable[[Dict],None]"
                ]
            }
        },
        "test_step": {
            "name": "test_step",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "classes": [
                    "Callable[...,None]",
                    "bool",
                    "tests.hints.FunctionCall",
                    "Callable",
                    "tests.hints.Function.Call"
                ],
                "class_": [
                    "bool",
                    "Type",
                    "str",
                    "bytes",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "other_class": [
                    "bool",
                    "str",
                    "Type",
                    "Tuple[int]"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/subclass_of_tests/test_pickle.py": {
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pickleable_classes": [
                    "str",
                    "Set[str]",
                    "int",
                    "tests.conftesWorker"
                ],
                "class_": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/subclass_of_tests/test_properties.py": {
        "test_type": {
            "name": "test_type",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "int",
                    "str",
                    "List[Type]",
                    "T",
                    "Sequence",
                    "Union[Sequence,SweepFixedValues]",
                    "Any",
                    "Optional[Union[str,Any]]",
                    "None"
                ]
            }
        },
        "test_result_type": {
            "name": "test_result_type",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "tests.conftesWorker"
                ],
                "other_class": [
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "MutableMapping",
                    "MutableMapping[str,str]",
                    "Callable"
                ]
            }
        },
        "test_commutativity": {
            "name": "test_commutativity",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "List[str]",
                    "Set[str]",
                    "Dict[str,Any]"
                ],
                "other_class": [
                    "List[str]",
                    "Set[str]",
                    "Dict[str,Any]"
                ],
                "another_class": [
                    "str"
                ]
            }
        }
    },
    "lz-master/tests/typology_tests/subclass_of_tests/__init__.py": {}
}
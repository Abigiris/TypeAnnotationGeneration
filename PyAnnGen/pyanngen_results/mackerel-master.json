{
    "mackerel-master/setup.py": {},
    "mackerel-master/mackerel/build.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "Context.url_for": {
            "name": "url_for",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ],
                "external": [
                    "bool"
                ]
            }
        },
        "Build.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "Build.execute": {
            "name": "execute",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Build.touch": {
            "name": "touch",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "Build.context": {
            "name": "context",
            "location": 74,
            "return": [
                "Context",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build.pages": {
            "name": "pages",
            "location": 78,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build._absolute_page_output_path": {
            "name": "_absolute_page_output_path",
            "location": 91,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "content.Document"
                ]
            }
        },
        "Build._absolute_other_file_output_path": {
            "name": "_absolute_other_file_output_path",
            "location": 95,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "other_file": [
                    "pathlib.Path"
                ]
            }
        },
        "Build._absolute_template_file_output_path": {
            "name": "_absolute_template_file_output_path",
            "location": 99,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "template_file": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "mackerel-master/mackerel/cli.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "init": {
            "name": "init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.core.Context",
                    "str",
                    "click.Context"
                ],
                "site_path": [
                    "str",
                    "List[int]",
                    "Callable[..., bool]",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.core.Context",
                    "bool",
                    "str",
                    "click.Context"
                ],
                "site_path": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "develop": {
            "name": "develop",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "click.core.Context",
                    "str"
                ],
                "site_path": [
                    "click.Context",
                    "click.core.Context",
                    "str"
                ],
                "host": [
                    "int",
                    "str",
                    "click.Context"
                ],
                "port": [
                    "int",
                    "str",
                    "click.Context"
                ]
            }
        },
        "develop.rebuild_site": {
            "name": "rebuild_site",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "mackerel-master/mackerel/content.py": {
        "Document.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_path": [
                    "pathlib.Path"
                ],
                "content_path": [
                    "pathlib.Path"
                ],
                "renderer": [
                    "mackerel.renderers.base.DocumentRenderer"
                ]
            }
        },
        "Document._get_metadata_value": {
            "name": "_get_metadata_value",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "metadata": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Document.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Document.excerpt": {
            "name": "excerpt",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "Optional[int]"
                ],
                "placeholder": [
                    "Optional[str]"
                ]
            }
        }
    },
    "mackerel-master/mackerel/exceptions.py": {},
    "mackerel-master/mackerel/helpers.py": {
        "make_config": {
            "name": "make_config",
            "location": 19,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "site_path": [
                    "pathlib.Path"
                ]
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 12,
            "return": [
                "str",
                "int",
                "cached_property",
                "dict[, ]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "list[float]",
                    "Optional[List[float]]",
                    "None",
                    "int",
                    "Optional[object]"
                ],
                "cls": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "None",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "mackerel-master/mackerel/navigation.py": {
        "Navigation.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "Navigation.get_menu": {
            "name": "get_menu",
            "location": 24,
            "return": [
                "Tuple[(Node, ...)]"
            ],
            "arguments": {
                "self": [],
                "menu": [
                    "str"
                ]
            }
        },
        "Navigation.get_node": {
            "name": "get_node",
            "location": 33,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "Navigation.loop": {
            "name": "loop",
            "location": 42,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]"
                ]
            }
        },
        "Navigation.nodes": {
            "name": "nodes",
            "location": 52,
            "return": [
                "tuple[]",
                "str",
                "Exception",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Navigation._build_url": {
            "name": "_build_url",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "mackerel.content.Document"
                ]
            }
        },
        "Navigation._build_external_url": {
            "name": "_build_external_url",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "mackerel.content.Document"
                ]
            }
        }
    },
    "mackerel-master/mackerel/site.py": {
        "Site.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "Site.documents": {
            "name": "documents",
            "location": 50,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mackerel-master/mackerel/__init__.py": {},
    "mackerel-master/mackerel/__version__.py": {},
    "mackerel-master/mackerel/renderers/base.py": {
        "DocumentRenderer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "DocumentRenderer.extract_metadata": {
            "name": "extract_metadata",
            "location": 12,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "DocumentRenderer.render": {
            "name": "render",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TemplateRenderer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "TemplateRenderer.render": {
            "name": "render",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "build.Context"
                ],
                "document": [
                    "content.Document"
                ]
            }
        }
    },
    "mackerel-master/mackerel/renderers/document.py": {
        "MistuneMarkdownRenderer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "MistuneMarkdownRenderer.extract_metadata": {
            "name": "extract_metadata",
            "location": 17,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "MistuneMarkdownRenderer.render": {
            "name": "render",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "MarkdownMarkdownRenderer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "MarkdownMarkdownRenderer.extract_metadata": {
            "name": "extract_metadata",
            "location": 37,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "MarkdownMarkdownRenderer.render": {
            "name": "render",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "mackerel-master/mackerel/renderers/helpers.py": {
        "strip_tags": {
            "name": "strip_tags",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "mackerel-master/mackerel/renderers/template.py": {
        "Jinja2Renderer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "mackerel.site.Site"
                ]
            }
        },
        "Jinja2Renderer.render": {
            "name": "render",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "build.Context"
                ],
                "document": [
                    "content.Document"
                ]
            }
        }
    },
    "mackerel-master/mackerel/renderers/__init__.py": {},
    "mackerel-master/tests/conftest.py": {
        "document_mocks": {
            "name": "document_mocks",
            "location": 18,
            "return": [
                "DocumentFactory",
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "pathlib.Path",
                "int"
            ],
            "arguments": {}
        },
        "site": {
            "name": "site",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "document_mocks": [
                    "int"
                ]
            }
        },
        "site_path": {
            "name": "site_path",
            "location": 68,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "DocumentMock.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "document_mocks.DocumentFactory.create": {
            "name": "create",
            "location": 20,
            "return": [
                "DocumentMock",
                "Dict[str, Sequence[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mackerel-master/tests/test_build.py": {
        "build": {
            "name": "build",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "site": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_build": {
            "name": "test_build",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "site": []
            }
        },
        "test_build_pages": {
            "name": "test_build_pages",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [],
                "site": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "test_build_absolute_page_output_path": {
            "name": "test_build_absolute_page_output_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "pathlib.Path"
                ],
                "document_mocks": []
            }
        },
        "test_build_execute_dry_run": {
            "name": "test_build_execute_dry_run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_build_execute": {
            "name": "test_build_execute",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "mock.Mock",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_touch": {
            "name": "test_touch",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "build": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "tmpdir": [
                    "pathlib.Path"
                ],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_build_context": {
            "name": "test_build_context",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "bytes"
                ]
            }
        },
        "test_context_url_for": {
            "name": "test_context_url_for",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "mackerel-master/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 12,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "template_path": {
            "name": "template_path",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "output_path": {
            "name": "output_path",
            "location": 22,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "site_path": [
                    "typing.Iterable[str]",
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_cli_base": {
            "name": "test_cli_base",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "int",
                    "click.testing.CliRunner",
                    "pathlib.Path"
                ]
            }
        },
        "test_cli_build_error": {
            "name": "test_cli_build_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "list[tuple[typing.Union[int,int,float]]]",
                    "str",
                    "List[Tuple[int, int, float]]",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_build_success": {
            "name": "test_build_success",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "pathlib.Path",
                    "list[str]",
                    "Union[str, pathlib.Path]",
                    "List[str]"
                ],
                "site_path": [
                    "pathlib.Path"
                ],
                "template_path": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "pathlib.Path",
                    "Iterable[str]",
                    "List[str]"
                ],
                "output_path": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "Union[str, pathlib.Path]",
                    "path.Path"
                ]
            }
        },
        "test_init_directory_exists": {
            "name": "test_init_directory_exists",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "site_path": [
                    "dict[str, P]",
                    "bool",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "path.Path"
                ]
            }
        },
        "test_init_directory_success": {
            "name": "test_init_directory_success",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "Callable",
                    "pypi2nix.path.Path",
                    "paradigm.catalog.Path"
                ],
                "site_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_develop": {
            "name": "test_develop",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "pathlib.Path"
                ],
                "site": [
                    "typing.IO",
                    "pathlib.Path",
                    "IO[str]"
                ]
            }
        }
    },
    "mackerel-master/tests/test_config_ini.py": {
        "test_default_config_settings": {
            "name": "test_default_config_settings",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mackerel-master/tests/test_content.py": {
        "document_path": {
            "name": "document_path",
            "location": 10,
            "return": [
                "",
                "typing.Generator[Path]"
            ],
            "arguments": {}
        },
        "content_path": {
            "name": "content_path",
            "location": 15,
            "return": [
                "",
                "typing.Generator[Path]"
            ],
            "arguments": {}
        },
        "renderer": {
            "name": "renderer",
            "location": 20,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_document_init": {
            "name": "test_document_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "document_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "content_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "renderer": [
                    "dict[str, P]",
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_document_eq": {
            "name": "test_document_eq",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "document_path": [
                    "typing.Callable[, ]",
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ],
                "content_path": [
                    "typing.Callable[, ]",
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ],
                "renderer": [
                    "typing.Callable[, ]",
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ]
            }
        },
        "test_document_missing_title": {
            "name": "test_document_missing_title",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "document_path": [
                    "dict[str, P]",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "content_path": [
                    "dict[str, P]",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "renderer": [
                    "str"
                ]
            }
        },
        "test_document_excerpt": {
            "name": "test_document_excerpt",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "document_path": [
                    "tuple[str]",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str]"
                ],
                "content_path": [
                    "tuple[str]",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str]"
                ],
                "renderer": [
                    "tuple[str]",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str]"
                ]
            }
        }
    },
    "mackerel-master/tests/test_helpers.py": {
        "test_cached_property": {
            "name": "test_cached_property",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_config": {
            "name": "test_make_config",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cached_property.TestClass.some_property": {
            "name": "some_property",
            "location": 11,
            "return": [
                "type",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mackerel-master/tests/test_navigation.py": {
        "navigation": {
            "name": "navigation",
            "location": 9,
            "return": [
                "",
                "typing.Generator[Navigation]"
            ],
            "arguments": {
                "site": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_navigation_init": {
            "name": "test_navigation_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "site": [
                    "str",
                    "int"
                ]
            }
        },
        "test_navigation_nodes": {
            "name": "test_navigation_nodes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": []
            }
        },
        "test_build_url": {
            "name": "test_build_url",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_build_url_with_directory": {
            "name": "test_build_url_with_directory",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_build_url_with_missing_config_value": {
            "name": "test_build_url_with_missing_config_value",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_build_external_url": {
            "name": "test_build_external_url",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_build_external_url_with_directory": {
            "name": "test_build_external_url_with_directory",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_build_external_url_with_missing_config_value": {
            "name": "test_build_external_url_with_missing_config_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": []
            }
        },
        "test_get_node": {
            "name": "test_get_node",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": []
            }
        },
        "test_get_menu": {
            "name": "test_get_menu",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "Callable"
                ]
            }
        },
        "test_loop": {
            "name": "test_loop",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "navigation": [
                    "str"
                ]
            }
        }
    },
    "mackerel-master/tests/test_site.py": {
        "test_site_init": {
            "name": "test_site_init",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "site_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "mackerel-master/tests/__init__.py": {},
    "mackerel-master/tests/renderers/test_base.py": {
        "test_document_renderer": {
            "name": "test_document_renderer",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_template_renderer": {
            "name": "test_template_renderer",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mackerel-master/tests/renderers/test_document.py": {
        "document": {
            "name": "document",
            "location": 9,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "document_mocks": []
            }
        },
        "TestMistuneMarkdownRenderer.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMistuneMarkdownRenderer.test_extract_metadata": {
            "name": "test_extract_metadata",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "TestMistuneMarkdownRenderer.test_render": {
            "name": "test_render",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "TestMarkdownMarkdownRenderer.test_init": {
            "name": "test_init",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestMarkdownMarkdownRenderer.test_extract_metadata": {
            "name": "test_extract_metadata",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "str",
                    "float"
                ],
                "document": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestMarkdownMarkdownRenderer.test_render": {
            "name": "test_render",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "str",
                    "float"
                ],
                "document": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "mackerel-master/tests/renderers/test_helpers.py": {
        "test_strip_tags": {
            "name": "test_strip_tags",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mackerel-master/tests/renderers/test_template.py": {
        "TestJinja2Renderer.test_init": {
            "name": "test_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": []
            }
        },
        "TestJinja2Renderer.test_render": {
            "name": "test_render",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [],
                "document_mocks": []
            }
        },
        "TestJinja2Renderer.test_render_template_not_found": {
            "name": "test_render_template_not_found",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": []
            }
        }
    },
    "mackerel-master/tests/renderers/__init__.py": {}
}
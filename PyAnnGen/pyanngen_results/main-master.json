{
    "main-master/backend/setup.py": {},
    "main-master/backend/docs/build.py": {
        "target": {
            "name": "target",
            "location": 22,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "list",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        },
        "check_sphinx_build": {
            "name": "check_sphinx_build",
            "location": 28,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Dict[str, str]]",
                "str"
            ],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 48,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type[T]",
                    "int",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "success_msg": [
                    "str",
                    "Callable",
                    "ImportError",
                    "Match[str]",
                    "Tuple[str]",
                    "Optional[str]",
                    "Dict[str, object]"
                ],
                "extra_opts": [
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "list[]",
                    "List[Tuple[bool, str]]",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "list"
                ],
                "outdir": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, Union[str, float]]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Union[str,float]]"
                ],
                "doctrees": [
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "html": {
            "name": "html",
            "location": 81,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "dirhtml": {
            "name": "dirhtml",
            "location": 87,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "singlehtml": {
            "name": "singlehtml",
            "location": 93,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "pickle": {
            "name": "pickle",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "json": {
            "name": "json",
            "location": 105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "htmlhelp": {
            "name": "htmlhelp",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "qthelp": {
            "name": "qthelp",
            "location": 128,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "devhelp": {
            "name": "devhelp",
            "location": 140,
            "return": [
                "str",
                "os.PathLike",
                "Tuple[str, str]",
                "Callable"
            ],
            "arguments": {}
        },
        "epub": {
            "name": "epub",
            "location": 151,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "rinoh": {
            "name": "rinoh",
            "location": 157,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "latex": {
            "name": "latex",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "latexpdf": {
            "name": "latexpdf",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "latexpdfja": {
            "name": "latexpdfja",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "text": {
            "name": "text",
            "location": 195,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "man": {
            "name": "man",
            "location": 201,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "texinfo": {
            "name": "texinfo",
            "location": 207,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "gettext": {
            "name": "gettext",
            "location": 228,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "changes": {
            "name": "changes",
            "location": 237,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "xml": {
            "name": "xml",
            "location": 243,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "pseudoxml": {
            "name": "pseudoxml",
            "location": 249,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "linkcheck": {
            "name": "linkcheck",
            "location": 255,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "doctest": {
            "name": "doctest",
            "location": 264,
            "return": [
                "str",
                "bool",
                "Optional[T]"
            ],
            "arguments": {}
        },
        "help": {
            "name": "help",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/docs/conf.py": {},
    "main-master/backend/syncr_backend/constants.py": {},
    "main-master/backend/syncr_backend/__init__.py": {},
    "main-master/backend/syncr_backend/bin/check_drop.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parser": {
            "name": "parser",
            "location": 23,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/check_for_updates.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/drop_init.py": {
        "parser": {
            "name": "parser",
            "location": 10,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/make_dht_configs.py": {
        "parser": {
            "name": "parser",
            "location": 16,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/make_tracker_configs.py": {
        "parser": {
            "name": "parser",
            "location": 11,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/new_version.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/node_init.py": {
        "parser": {
            "name": "parser",
            "location": 7,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/run_backend.py": {
        "parser": {
            "name": "parser",
            "location": 22,
            "return": [
                "bool",
                "int",
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "run_backend": {
            "name": "run_backend",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_debug_commands": {
            "name": "run_debug_commands",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "commands_file": [
                    "str"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop",
                    "int",
                    "list",
                    "List[str]",
                    "IO",
                    "str",
                    "Tuple[str]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "execute_function": {
            "name": "execute_function",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "function_name": [
                    "str"
                ],
                "args": [],
                "loop": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[..., None]",
                    "bool",
                    "asyncio.AbstractEventLoop",
                    "dict[str, typing.Any]",
                    "Callable[..., None]",
                    "argparse.Namespace",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/bin/run_dht_server.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/sync_drop.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/update_drop.py": {
        "parser": {
            "name": "parser",
            "location": 10,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/bin/__init__.py": {},
    "main-master/backend/syncr_backend/external_interface/dht_util.py": {
        "get_dht": {
            "name": "get_dht",
            "location": 21,
            "return": [
                "None",
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {}
        },
        "initialize_dht": {
            "name": "initialize_dht",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "bootstrap_ip_port_pair_list": [
                    "Union[Sequence[int], Sequence[dict]]",
                    "List[str]"
                ],
                "listen_port": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "list[int]",
                    "typing.Callable[str, bool]",
                    "List[int]",
                    "Callable[[str], bool]"
                ]
            }
        },
        "DropPeerDHTStorage.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropPeerDHTStorage.cull_peerlist": {
            "name": "cull_peerlist",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "type",
                    "typing.Type",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "DropPeerDHTStorage.__getitem__": {
            "name": "__getitem__",
            "location": 110,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "DropPeerDHTStorage.__setitem__": {
            "name": "__setitem__",
            "location": 121,
            "return": [
                "List[int]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "Union[int, slice]"
                ],
                "value": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/external_interface/drop_peer_store.py": {
        "DHTPeerStore.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "bootstrap_list": [
                    "List[Tuple[str, int]]",
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "float",
                    "bool",
                    "typing.Callable[[], str]",
                    "Callable[[], str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "listen_port": [
                    "bool",
                    "float",
                    "None",
                    "int",
                    "Optional[int]",
                    "set[str]",
                    "list[I]",
                    "Set[str]",
                    "Optional[List[\"CustomLineItemDraft\"]]"
                ]
            }
        },
        "TrackerPeerStore.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "ip": [
                    "int",
                    "float",
                    "str"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/external_interface/public_key_store.py": {
        "DHTKeyStore.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "bootstrap_list": [
                    "List[Tuple[str, int]]",
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "float",
                    "bool",
                    "typing.Callable[[], str]",
                    "Callable[[], str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "listen_port": [
                    "List[Tuple[str, int]]",
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "float",
                    "bool",
                    "typing.Callable[[], str]",
                    "Callable[[], str]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TrackerKeyStore.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "ip": [
                    "int",
                    "float",
                    "str"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/external_interface/store_exceptions.py": {},
    "main-master/backend/syncr_backend/external_interface/tracker_util.py": {},
    "main-master/backend/syncr_backend/external_interface/__init__.py": {},
    "main-master/backend/syncr_backend/init/drop_init.py": {},
    "main-master/backend/syncr_backend/init/node_init.py": {
        "force_initialize_node": {
            "name": "force_initialize_node",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "init_directory": [
                    "str",
                    "int",
                    "None",
                    "Exception"
                ]
            }
        },
        "delete_node_directory": {
            "name": "delete_node_directory",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "init_directory": [
                    "Optional[str]",
                    "None",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "is_node_initialized": {
            "name": "is_node_initialized",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "init_directory": [
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "str",
                    "list[list[int]]"
                ]
            }
        },
        "initialize_node": {
            "name": "initialize_node",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "init_directory": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_full_init_directory": {
            "name": "get_full_init_directory",
            "location": 85,
            "return": [
                "str",
                "None",
                "list[]"
            ],
            "arguments": {
                "init_directory": [
                    "Optional[str]",
                    "str",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "write_private_key_to_disk": {
            "name": "write_private_key_to_disk",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "init_directory": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/init/__init__.py": {},
    "main-master/backend/syncr_backend/metadata/drop_metadata.py": {
        "list_drops": {
            "name": "list_drops",
            "location": 428,
            "return": [
                "list[]",
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytes",
                "List[int]"
            ],
            "arguments": {}
        },
        "_get_save_path": {
            "name": "_get_save_path",
            "location": 440,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "gen_drop_id": {
            "name": "gen_drop_id",
            "location": 512,
            "return": [
                "bytes",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "first_owner": [
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "DropVersion.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Union[str, float]",
                    "str"
                ],
                "nonce": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Union[str, float]",
                    "str"
                ]
            }
        },
        "DropVersion.__iter__": {
            "name": "__iter__",
            "location": 43,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, typing.Union['DropVersion', builtins.int]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropVersion.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropVersion.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "DropVersion.__lt__": {
            "name": "__lt__",
            "location": 58,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "DropVersion.__le__": {
            "name": "__le__",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "DropMetadata.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "previous_versions": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "primary_owner": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "int",
                    "list",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "other_owners": [
                    "str"
                ],
                "signed_by": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "files": [
                    "str",
                    "bool",
                    "int"
                ],
                "files_hash": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "sig": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "protocol_version": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DropMetadata.log": {
            "name": "log",
            "location": 94,
            "return": [
                "list[tuple[typing.Union[typing.Any,int]]]",
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropMetadata.get_file_name_from_id": {
            "name": "get_file_name_from_id",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_hash": [
                    "bytes",
                    "str"
                ]
            }
        },
        "DropMetadata.unsubscribe": {
            "name": "unsubscribe",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropMetadata.make_filename": {
            "name": "make_filename",
            "location": 232,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "id": [
                    "bytes",
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "version": [
                    "bytes",
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/metadata/file_metadata.py": {
        "FileMetadata.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashes": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "file_id": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "None",
                    "str",
                    "list[int]",
                    "List[int]",
                    "Optional[str]",
                    "bool"
                ],
                "file_length": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "drop_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "file_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pymatgen.util.PathLike"
                ],
                "chunk_size": [
                    "int",
                    "str",
                    "bytes",
                    "BinaryIO",
                    "Optional[str]"
                ],
                "protocol_version": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FileMetadata.log": {
            "name": "log",
            "location": 49,
            "return": [
                "list[tuple[typing.Union[typing.Any,int]]]",
                "typing.Literal",
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetadata.encode": {
            "name": "encode",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMetadata.decode": {
            "name": "decode",
            "location": 125,
            "return": [
                "FileMetadata",
                "str",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FileMetadata.__eq__": {
            "name": "__eq__",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Exception",
                    "str",
                    "list[str]",
                    "denite.util.UserContext",
                    "List[str]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/metadata/__init__.py": {},
    "main-master/backend/syncr_backend/network/handle_frontend.py": {},
    "main-master/backend/syncr_backend/network/listen_requests.py": {
        "listen_requests": {
            "name": "listen_requests",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "tcp_ip": [
                    "Optional[int]",
                    "str",
                    "int",
                    "None"
                ],
                "tcp_port": [
                    "Optional[int]",
                    "str"
                ],
                "loop": [
                    "Optional[int]",
                    "str"
                ],
                "shutdown_flag": [
                    "bool",
                    "typing.Iterable[]",
                    "Iterable",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/network/send_requests.py": {},
    "main-master/backend/syncr_backend/network/__init__.py": {},
    "main-master/backend/syncr_backend/util/async_util.py": {
        "async_cache": {
            "name": "async_cache",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maxsize": [
                    "int",
                    "float",
                    "bool"
                ],
                "cache_obj": [
                    "float",
                    "bool",
                    "None"
                ],
                "cache_none": [
                    "bool",
                    "float"
                ]
            }
        },
        "async_cache.decorator": {
            "name": "decorator",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "async_cache.decorator.cache_info": {
            "name": "cache_info",
            "location": 176,
            "return": [
                "CacheInfo",
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "async_cache.decorator.cache_clear": {
            "name": "cache_clear",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "async_cache.decorator._dump_cache": {
            "name": "_dump_cache",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/util/crypto_util.py": {
        "_hash": {
            "name": "_hash",
            "location": 50,
            "return": [
                "Union[bytes, bytearray]",
                "bytearray",
                "str",
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str"
                ]
            }
        },
        "b64encode": {
            "name": "b64encode",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "b": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "b64decode": {
            "name": "b64decode",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "b": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "encode_peerlist": {
            "name": "encode_peerlist",
            "location": 99,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "peerlist": [
                    "dict[typing.Union[str,str,str,str,str], typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Callable[[T], T]",
                    "T"
                ]
            }
        },
        "decode_peerlist": {
            "name": "decode_peerlist",
            "location": 111,
            "return": [
                "None",
                "list[]",
                "Optional[int]",
                "int",
                "Optional[float]",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "rawpl": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 139,
            "return": [
                "int",
                "Iterable[Any]",
                "Dict[str, bool]"
            ],
            "arguments": {}
        },
        "random_int": {
            "name": "random_int",
            "location": 147,
            "return": [
                "int",
                "bytes",
                "asyncio.AbstractEventLoop",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "load_public_key": {
            "name": "load_public_key",
            "location": 159,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "load_private_key": {
            "name": "load_private_key",
            "location": 168,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "dump_public_key": {
            "name": "dump_public_key",
            "location": 181,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, util.JSONType]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "dump_private_key": {
            "name": "dump_private_key",
            "location": 193,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, util.JSONType]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_generate_private_key": {
            "name": "_generate_private_key",
            "location": 228,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/syncr_backend/util/drop_util.py": {
        "rotate": {
            "name": "rotate",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "List[T]"
                ]
            }
        },
        "get_drop_id_from_directory": {
            "name": "get_drop_id_from_directory",
            "location": 875,
            "return": [
                "str",
                "int",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "save_dir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/util/fileio_util.py": {
        "mark_file_complete": {
            "name": "mark_file_complete",
            "location": 168,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_complete": {
            "name": "is_complete",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Exception"
                ]
            }
        },
        "walk_with_ignore": {
            "name": "walk_with_ignore",
            "location": 207,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "ignore": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/util/log_util.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 10,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/util/network_util.py": {
        "sync_send_response": {
            "name": "sync_send_response",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "response": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "raise_network_error": {
            "name": "raise_network_error",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "errno": [
                    "int",
                    "str"
                ]
            }
        },
        "close_socket_thread": {
            "name": "close_socket_thread",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "ip": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ],
                "port": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "main-master/backend/syncr_backend/util/__init__.py": {},
    "main-master/backend/tests/test_crypto_util.py": {
        "test_encode_bad_input": {
            "name": "test_encode_bad_input",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_frozenset": {
            "name": "test_encode_frozenset",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signature": {
            "name": "test_signature",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/tests/test_drop_metadata.py": {
        "run_coro": {
            "name": "run_coro",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_drop_metadata_decode": {
            "name": "test_drop_metadata_decode",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_pub_key": [
                    "str",
                    "dict[, ]",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest",
                    "dict"
                ]
            }
        }
    },
    "main-master/backend/tests/test_file_metadata.py": {
        "test_file_metadata_decode": {
            "name": "test_file_metadata_decode",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_metadata_encode": {
            "name": "test_file_metadata_encode",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/backend/tests/test_util.py": {
        "test_walk_with_ignore": {
            "name": "test_walk_with_ignore",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_os_walk": [
                    "mock.MagicMock"
                ],
                "mock_relpath": []
            }
        }
    },
    "main-master/frontend/setup.py": {},
    "main-master/frontend/docs/build.py": {
        "target": {
            "name": "target",
            "location": 22,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "list",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        },
        "check_sphinx_build": {
            "name": "check_sphinx_build",
            "location": 28,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Dict[str, str]]",
                "str"
            ],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 48,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type[T]",
                    "int",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "success_msg": [
                    "str",
                    "Callable",
                    "ImportError",
                    "Match[str]",
                    "Tuple[str]",
                    "Optional[str]",
                    "Dict[str, object]"
                ],
                "extra_opts": [
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "list[]",
                    "List[Tuple[bool, str]]",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "list"
                ],
                "outdir": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, Union[str, float]]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Union[str,float]]"
                ],
                "doctrees": [
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "html": {
            "name": "html",
            "location": 81,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "dirhtml": {
            "name": "dirhtml",
            "location": 87,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "singlehtml": {
            "name": "singlehtml",
            "location": 93,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "pickle": {
            "name": "pickle",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "json": {
            "name": "json",
            "location": 105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "htmlhelp": {
            "name": "htmlhelp",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "qthelp": {
            "name": "qthelp",
            "location": 128,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "devhelp": {
            "name": "devhelp",
            "location": 140,
            "return": [
                "str",
                "os.PathLike",
                "Tuple[str, str]",
                "Callable"
            ],
            "arguments": {}
        },
        "epub": {
            "name": "epub",
            "location": 151,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "rinoh": {
            "name": "rinoh",
            "location": 157,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "latex": {
            "name": "latex",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "latexpdf": {
            "name": "latexpdf",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "latexpdfja": {
            "name": "latexpdfja",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "text": {
            "name": "text",
            "location": 195,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "man": {
            "name": "man",
            "location": 201,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "texinfo": {
            "name": "texinfo",
            "location": 207,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "gettext": {
            "name": "gettext",
            "location": 228,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "changes": {
            "name": "changes",
            "location": 237,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "xml": {
            "name": "xml",
            "location": 243,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "pseudoxml": {
            "name": "pseudoxml",
            "location": 249,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "linkcheck": {
            "name": "linkcheck",
            "location": 255,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "doctest": {
            "name": "doctest",
            "location": 264,
            "return": [
                "str",
                "bool",
                "Optional[T]"
            ],
            "arguments": {}
        },
        "help": {
            "name": "help",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/frontend/docs/conf.py": {},
    "main-master/frontend/syncr_frontend/communication.py": {
        "send_request": {
            "name": "send_request",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Dict[str, List[str]]",
                    "None",
                    "dict[str, list[str]]"
                ]
            }
        },
        "_tcp_send_message": {
            "name": "_tcp_send_message",
            "location": 49,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bytes",
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_unix_send_message": {
            "name": "_unix_send_message",
            "location": 75,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bytes",
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "main-master/frontend/syncr_frontend/constants.py": {},
    "main-master/frontend/syncr_frontend/frontend.py": {
        "send_message": {
            "name": "send_message",
            "location": 32,
            "return": [
                "bytes",
                "str",
                "dict",
                "list[]",
                "flask.Response"
            ],
            "arguments": {
                "message": [
                    "bool"
                ]
            }
        },
        "open_file_location": {
            "name": "open_file_location",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "get_owned_subscribed_drops": {
            "name": "get_owned_subscribed_drops",
            "location": 64,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "get_selected_drop": {
            "name": "get_selected_drop",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_pending_changes": {
            "name": "get_pending_changes",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int"
                ]
            }
        },
        "is_in_drop_list": {
            "name": "is_in_drop_list",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int"
                ],
                "drop_list": [
                    "str",
                    "Optional[\"UtilityFunction\"]"
                ]
            }
        },
        "get_drop_id": {
            "name": "get_drop_id",
            "location": 125,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "set[str]",
                    "bool",
                    "list[str]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "get_file_name": {
            "name": "get_file_name",
            "location": 146,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "set[str]",
                    "Set[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "set_curr_action": {
            "name": "set_curr_action",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "action_update": [
                    "Iterable[str]",
                    "int",
                    "typing.Iterable[str]",
                    "str",
                    "Sequence[MutableSet[int]]",
                    "typing.Sequence[typing.MutableSet]"
                ]
            }
        },
        "create_drop": {
            "name": "create_drop",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "current_path": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "subscribe_to_drop": {
            "name": "subscribe_to_drop",
            "location": 196,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "current_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "subscribe_to_drop_with_directory": {
            "name": "subscribe_to_drop_with_directory",
            "location": 213,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "drop_path": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "initialize_drop": {
            "name": "initialize_drop",
            "location": 228,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "drop_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "input_drop_to_subscribe": {
            "name": "input_drop_to_subscribe",
            "location": 261,
            "return": [
                "Callable[..., None]",
                "Sequence[str]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "drop_code": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "drop_path": [
                    "str"
                ]
            }
        },
        "share_drop": {
            "name": "share_drop",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "add_owner": {
            "name": "add_owner",
            "location": 304,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "int"
                ],
                "owner_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "remove_owner": {
            "name": "remove_owner",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "tuple[str]",
                    "int",
                    "Tuple[str]",
                    "Iterable[str]",
                    "Iterable[int]"
                ],
                "owner_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "view_owners": {
            "name": "view_owners",
            "location": 359,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "Iterable[int]",
                "Callable"
            ],
            "arguments": {
                "drop_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "message": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "whitelist": {
            "name": "whitelist",
            "location": 373,
            "return": [],
            "arguments": {
                "drop_id": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "delete_drop": {
            "name": "delete_drop",
            "location": 386,
            "return": [
                "List[str]",
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int"
                ]
            }
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 410,
            "return": [
                "str",
                "Optional[List[Any]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "drop_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "new_version": {
            "name": "new_version",
            "location": 433,
            "return": [
                "Dict[str, Any]",
                "int",
                "Mapping[str, Any]",
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int"
                ]
            }
        },
        "startup": {
            "name": "startup",
            "location": 456,
            "return": [
                "list",
                "Optional[BaseException]",
                "type"
            ],
            "arguments": {}
        },
        "show_drops": {
            "name": "show_drops",
            "location": 462,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "int",
                    "None"
                ],
                "message": [
                    "str",
                    "int",
                    "None"
                ],
                "current_path": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "show_drop": {
            "name": "show_drop",
            "location": 467,
            "return": [
                "dict[typing.Text, typing.Union[list[],None,bool,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],str,dict[typing.Text, typing.Union[str,int,list[str]]]]]",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "drop_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "message": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "list[str]"
                ],
                "current_path": [
                    "str",
                    "waterbutler.providers.github.path.GitHubPath"
                ]
            }
        },
        "FrontendHook.__init__": {
            "name": "__init__",
            "location": 579,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendHook.update_hook": {
            "name": "update_hook",
            "location": 589,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "FrontendHook.send_message": {
            "name": "send_message",
            "location": 597,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "FrontendHook.get_owned_subscribed_drops": {
            "name": "get_owned_subscribed_drops",
            "location": 600,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrontendHook.get_selected_drop": {
            "name": "get_selected_drop",
            "location": 603,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "int",
                    "str"
                ]
            }
        },
        "FrontendHook.initialize_drop": {
            "name": "initialize_drop",
            "location": 606,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_path": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "FrontendHook.input_drop_to_subscribe": {
            "name": "input_drop_to_subscribe",
            "location": 609,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_code": [
                    "str"
                ]
            }
        },
        "FrontendHook.share_drop": {
            "name": "share_drop",
            "location": 612,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FrontendHook.add_owner": {
            "name": "add_owner",
            "location": 615,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[Optional[int]]",
                    "list[typing.Optional[int]]"
                ],
                "owner_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[Optional[int]]",
                    "list[typing.Optional[int]]"
                ]
            }
        },
        "FrontendHook.remove_owner": {
            "name": "remove_owner",
            "location": 618,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "str"
                ],
                "owner_id": [
                    "str"
                ]
            }
        },
        "FrontendHook.delete_drop": {
            "name": "delete_drop",
            "location": 621,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FrontendHook.unsubscribe": {
            "name": "unsubscribe",
            "location": 624,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "drop_id": [
                    "int"
                ]
            }
        }
    },
    "main-master/frontend/syncr_frontend/__init__.py": {},
    "main-master/frontend/tests/test_frontend.py": {
        "test_empty_test": {
            "name": "test_empty_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/tracker/setup.py": {},
    "main-master/tracker/docs/build.py": {
        "target": {
            "name": "target",
            "location": 22,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "list",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        },
        "check_sphinx_build": {
            "name": "check_sphinx_build",
            "location": 28,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Dict[str, str]]",
                "str"
            ],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 48,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type[T]",
                    "int",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "success_msg": [
                    "str",
                    "Callable",
                    "ImportError",
                    "Match[str]",
                    "Tuple[str]",
                    "Optional[str]",
                    "Dict[str, object]"
                ],
                "extra_opts": [
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "list[]",
                    "List[Tuple[bool, str]]",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "list"
                ],
                "outdir": [
                    "str",
                    "None",
                    "Callable",
                    "Dict[str, Union[str, float]]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Union[str,float]]"
                ],
                "doctrees": [
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "html": {
            "name": "html",
            "location": 81,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "dirhtml": {
            "name": "dirhtml",
            "location": 87,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "singlehtml": {
            "name": "singlehtml",
            "location": 93,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "pickle": {
            "name": "pickle",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "json": {
            "name": "json",
            "location": 105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "htmlhelp": {
            "name": "htmlhelp",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "qthelp": {
            "name": "qthelp",
            "location": 128,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "devhelp": {
            "name": "devhelp",
            "location": 140,
            "return": [
                "str",
                "os.PathLike",
                "Tuple[str, str]",
                "Callable"
            ],
            "arguments": {}
        },
        "epub": {
            "name": "epub",
            "location": 151,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "rinoh": {
            "name": "rinoh",
            "location": 157,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "latex": {
            "name": "latex",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "latexpdf": {
            "name": "latexpdf",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "latexpdfja": {
            "name": "latexpdfja",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "text": {
            "name": "text",
            "location": 195,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "man": {
            "name": "man",
            "location": 201,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "texinfo": {
            "name": "texinfo",
            "location": 207,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "gettext": {
            "name": "gettext",
            "location": 228,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {}
        },
        "changes": {
            "name": "changes",
            "location": 237,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "xml": {
            "name": "xml",
            "location": 243,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "pseudoxml": {
            "name": "pseudoxml",
            "location": 249,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "linkcheck": {
            "name": "linkcheck",
            "location": 255,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "doctest": {
            "name": "doctest",
            "location": 264,
            "return": [
                "str",
                "bool",
                "Optional[T]"
            ],
            "arguments": {}
        },
        "help": {
            "name": "help",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/tracker/docs/conf.py": {},
    "main-master/tracker/syncr_tracker/constants.py": {},
    "main-master/tracker/syncr_tracker/tracker.py": {
        "handle_request": {
            "name": "handle_request",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "conn": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "request": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict",
                    "tuple[typing.Union[str,str]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ]
            }
        },
        "retrieve_drop_info": {
            "name": "retrieve_drop_info",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "conn": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Mapping",
                    "Mapping",
                    "Dict[str, Any]"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "trim_expired_tuples": {
            "name": "trim_expired_tuples",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "retrieve_public_key": {
            "name": "retrieve_public_key",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "conn": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "request": [
                    "int",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ]
            }
        },
        "request_post_node_id": {
            "name": "request_post_node_id",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "conn": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "request": []
            }
        },
        "add_node_key_pairing": {
            "name": "add_node_key_pairing",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "verify_size": {
            "name": "verify_size",
            "location": 223,
            "return": [
                "bool",
                "str",
                "List[int]",
                "dict",
                "Callable[[], str]"
            ],
            "arguments": {
                "key": [
                    "util.ArrayLike",
                    "bool",
                    "float"
                ],
                "size": [
                    "bool",
                    "float",
                    "util.ArrayLike"
                ]
            }
        },
        "request_post_drop_id": {
            "name": "request_post_drop_id",
            "location": 234,
            "return": [
                "None",
                "T",
                "OrderedDict",
                "str",
                "float"
            ],
            "arguments": {
                "conn": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "add_to_drop_availability": {
            "name": "add_to_drop_availability",
            "location": 276,
            "return": [
                "None",
                "Set[str]",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "drop_id": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "cdp.util.T_JSON_DICT"
                ],
                "data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "generate_node_key_file_name": {
            "name": "generate_node_key_file_name",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "node_id": [
                    "str"
                ]
            }
        },
        "send_server_response": {
            "name": "send_server_response",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "conn": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "result": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Union[Dict, None]",
                    "Optional[Dict[str, Any]]"
                ],
                "msg": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Union[Dict, None]",
                    "Optional[Dict[str, Any]]"
                ],
                "data": [
                    "typing.Text",
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "Union[Dict, None]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "parser": {
            "name": "parser",
            "location": 320,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/tracker/syncr_tracker/__init__.py": {},
    "main-master/tracker/tests/test_get_requests.py": {
        "test_handle_request": {
            "name": "test_handle_request",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_trim_expired_tuples": {
            "name": "test_trim_expired_tuples",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "main-master/tracker/tests/test_post_requests.py": {
        "test_handle_request": {
            "name": "test_handle_request",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_generate_node_key_file_name": {
            "name": "test_generate_node_key_file_name",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_send_server_response": {
            "name": "test_send_server_response",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    }
}
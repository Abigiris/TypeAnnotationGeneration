{
    "mangle-vpn-master/manage.py": {},
    "mangle-vpn-master/mangle/settings.py": {},
    "mangle-vpn-master/mangle/version.py": {
        "version": {
            "name": "version",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/wsgi.py": {},
    "mangle-vpn-master/mangle/__init__.py": {},
    "mangle-vpn-master/mangle/cli/command.py": {
        "BaseCommand.header": {
            "name": "header",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "BaseCommand.print": {
            "name": "print",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ]
            }
        },
        "BaseCommand.bold": {
            "name": "bold",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "MutableMapping[str,Any]",
                    "MutableMapping",
                    "Union[object,type]",
                    "Type"
                ]
            }
        },
        "BaseCommand.error": {
            "name": "error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Type"
                ]
            }
        },
        "BaseCommand.info": {
            "name": "info",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BaseCommand.ok": {
            "name": "ok",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ]
            }
        },
        "BaseCommand.warn": {
            "name": "warn",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ]
            }
        },
        "BaseCommand.newline": {
            "name": "newline",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseCommand.title": {
            "name": "title",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.exit": {
            "name": "exit",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "None"
                ]
            }
        },
        "BaseCommand._output": {
            "name": "_output",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int",
                    "bool"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/cli/__init__.py": {},
    "mangle-vpn-master/mangle/cli/management/__init__.py": {},
    "mangle-vpn-master/mangle/cli/management/commands/install.py": {
        "create_tasks_unit": {
            "name": "create_tasks_unit",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_vpn_unit": {
            "name": "create_vpn_unit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_keys": {
            "name": "create_web_keys",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_unit": {
            "name": "create_web_unit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_vhost": {
            "name": "create_web_vhost",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_create_unit_from_template": {
            "name": "_create_unit_from_template",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "data": [
                    "str",
                    "None"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/version.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/vpn.py": {
        "vpn_pre_start": {
            "name": "vpn_pre_start",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_post_start": {
            "name": "vpn_post_start",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_post_stop": {
            "name": "vpn_post_stop",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_authenticate": {
            "name": "vpn_client_authenticate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_connect": {
            "name": "vpn_client_connect",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_disconnect": {
            "name": "vpn_client_disconnect",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "render_rules": {
            "name": "render_rules",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/web.py": {
        "web_post_start": {
            "name": "web_post_start",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "web_post_stop": {
            "name": "web_post_stop",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_render_rules": {
            "name": "_render_rules",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/__init__.py": {},
    "mangle-vpn-master/mangle/common/config.py": {
        "all": {
            "name": "all",
            "location": 16,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 24,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        },
        "get_int": {
            "name": "get_int",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "int"
                ]
            }
        },
        "get_float": {
            "name": "get_float",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "float"
                ]
            }
        },
        "get_bool": {
            "name": "get_bool",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_list": {
            "name": "get_list",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]"
                ],
                "sep": [
                    "Text",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "has": {
            "name": "has",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "set_default": {
            "name": "set_default",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "value": [
                    "str",
                    "article.transfer.models.ArticleNumber"
                ]
            }
        },
        "set_list": {
            "name": "set_list",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict"
                ],
                "value": [
                    "str",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]",
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "bool"
                ],
                "sep": [
                    "Text",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Dict[str,LabwareDefinition]",
                    "List[str]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "reload": {
            "name": "reload",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "url": {
            "name": "url",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/iptables.py": {
        "get_chains": {
            "name": "get_chains",
            "location": 4,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str"
                ]
            }
        },
        "get_rules": {
            "name": "get_rules",
            "location": 19,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "chain": [
                    "str",
                    "Text"
                ]
            }
        },
        "flush": {
            "name": "flush",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "get_chain_targets": {
            "name": "get_chain_targets",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "create_chain": {
            "name": "create_chain",
            "location": 53,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Callable",
                    "int"
                ],
                "chain": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "delete_chain": {
            "name": "delete_chain",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "float"
                ],
                "chain": [
                    "str",
                    "float"
                ]
            }
        },
        "rename_chain": {
            "name": "rename_chain",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "chain": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "chain_exists": {
            "name": "chain_exists",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int",
                    "Union[str,int]"
                ],
                "chain": [
                    "str",
                    "int",
                    "Union[str,int]"
                ]
            }
        },
        "append_rule": {
            "name": "append_rule",
            "location": 86,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "append_unique_rule": {
            "name": "append_unique_rule",
            "location": 94,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "table": [
                    "Iterable[str]",
                    "List[List[str]]"
                ],
                "chain": [
                    "Iterable[str]",
                    "List[List[str]]"
                ]
            }
        },
        "insert_rule": {
            "name": "insert_rule",
            "location": 105,
            "return": [
                "list",
                "str",
                "Optional[str]",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ],
                "position": [
                    "str",
                    "int"
                ]
            }
        },
        "insert_unique_rule": {
            "name": "insert_unique_rule",
            "location": 113,
            "return": [
                "bool",
                "str",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "table": [
                    "Iterable[str]",
                    "List[List[str]]"
                ],
                "chain": [
                    "Iterable[str]",
                    "List[List[str]]"
                ],
                "position": [
                    "Iterable[str]",
                    "List[List[str]]"
                ]
            }
        },
        "delete_rule": {
            "name": "delete_rule",
            "location": 124,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "table": [
                    "Iterable[str]",
                    "str"
                ],
                "chain": [
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "clear_rule": {
            "name": "clear_rule",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "rule_exists": {
            "name": "rule_exists",
            "location": 143,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "parse_rules": {
            "name": "parse_rules",
            "location": 151,
            "return": [
                "list"
            ],
            "arguments": {
                "output": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_output": {
            "name": "run_output",
            "location": 175,
            "return": [
                "Tuple[(int, Optional[str], Optional[str])]"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/mail.py": {
        "send": {
            "name": "send",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "subject": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "body": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "send_template": {
            "name": "send_template",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "Callable",
                    "int",
                    "IO[str]",
                    "IO"
                ],
                "subject": [
                    "str",
                    "Callable",
                    "int",
                    "IO[str]",
                    "IO"
                ],
                "template": [
                    "str",
                    "Callable",
                    "int",
                    "IO[str]",
                    "IO"
                ],
                "data": [
                    "str",
                    "None",
                    "Callable",
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_configured": {
            "name": "is_configured",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/managers.py": {
        "BaseManager.qs": {
            "name": "qs",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.by_pk": {
            "name": "by_pk",
            "location": 15,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "UserManager.by_email": {
            "name": "by_email",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "UserManager.get_by_natural_key": {
            "name": "get_by_natural_key",
            "location": 31,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "PasswordTokenManager.by_user": {
            "name": "by_user",
            "location": 41,
            "return": [
                "models.User",
                "cmk.utils.type_defs.UserId",
                "app.models.GameMember",
                "app.models.course.Course",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "app.models.GameMember",
                    "app.models.course.Course",
                    "django.contrib.gis.geos.Point",
                    "models.UserAuth",
                    "article.transfer.models.ArticleNumber"
                ]
            }
        },
        "PasswordTokenManager.by_token": {
            "name": "by_token",
            "location": 48,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "List",
                    "List[str]",
                    "Union[List,qutebrowser.utils.usertypes.Unset]",
                    "Union[int,float]"
                ]
            }
        },
        "PasswordTokenManager.expired": {
            "name": "expired",
            "location": 55,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupManager.by_name": {
            "name": "by_name",
            "location": 64,
            "return": [
                "NamedTuple",
                "Dict[str, str]",
                "str",
                "type",
                "bool",
                "purplship.core.models.ShipmentDetails"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "DeviceManager.by_fingerprint": {
            "name": "by_fingerprint",
            "location": 73,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "DeviceManager.by_serial": {
            "name": "by_serial",
            "location": 80,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ClientManager.by_common_name": {
            "name": "by_common_name",
            "location": 89,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "common_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ClientManager.by_user": {
            "name": "by_user",
            "location": 96,
            "return": [
                "bool",
                "Tuple[float, float]",
                "recidiviz.utils.regions.Region",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "services.user.transfer.models.User",
                    "django.contrib.auth.models.AbstractUser",
                    "search_service.models.search_resulSearchResult"
                ]
            }
        },
        "SettingManager.by_name": {
            "name": "by_name",
            "location": 105,
            "return": [
                "NamedTuple",
                "Dict[str, str]",
                "str",
                "type",
                "bool",
                "purplship.core.models.ShipmentDetails"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/models.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.exists": {
            "name": "exists",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.has_changed": {
            "name": "has_changed",
            "location": 42,
            "return": [
                "bool",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Tuple[float,float,float]",
                "zerver.models.Realm",
                "List[str]",
                "raiden.utils.Tuple[int,int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mfa_required": {
            "name": "mfa_required",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mfa_url": {
            "name": "mfa_url",
            "location": 91,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.reset_password": {
            "name": "reset_password",
            "location": 103,
            "return": [
                "str",
                "Set[str]",
                "float",
                "Dict[str,str]",
                "Dict[int,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.save": {
            "name": "save",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.verify_mfa_code": {
            "name": "verify_mfa_code",
            "location": 125,
            "return": [
                "str",
                "IO",
                "IO[str]",
                "Iterable[int]",
                "int",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "User.reset_mfa": {
            "name": "reset_mfa",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Callable",
                    "int"
                ]
            }
        },
        "Device.common_name": {
            "name": "common_name",
            "location": 158,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.create_keypair": {
            "name": "create_keypair",
            "location": 166,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.duration": {
            "name": "duration",
            "location": 201,
            "return": [
                "float",
                "utils.Node",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.group": {
            "name": "group",
            "location": 209,
            "return": [
                "bool",
                "set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.user": {
            "name": "user",
            "location": 217,
            "return": [
                "str",
                "int",
                "app.models.GameMember",
                "app.models.course.Course",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.create_firewall_rule": {
            "name": "create_firewall_rule",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.delete_firewall_rule": {
            "name": "delete_firewall_rule",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.chain": {
            "name": "chain",
            "location": 264,
            "return": [
                "str",
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.clients": {
            "name": "clients",
            "location": 272,
            "return": [
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "jumeaux.domain.config.vo.Config",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.create_firewall_chain": {
            "name": "create_firewall_chain",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.delete_firewall_chain": {
            "name": "delete_firewall_chain",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.args": {
            "name": "args",
            "location": 317,
            "return": [
                "List[Text]",
                "str",
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable[[None],None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.create_firewall_rule": {
            "name": "create_firewall_rule",
            "location": 344,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.delete_firewall_rule": {
            "name": "delete_firewall_rule",
            "location": 351,
            "return": [
                "bool",
                "str",
                "Optional[app.models.User]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/openvpn.py": {
        "create_server_keys": {
            "name": "create_server_keys",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_running": {
            "name": "is_running",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "create_tls_auth_key": {
            "name": "create_tls_auth_key",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "server_config": {
            "name": "server_config",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "client_config": {
            "name": "client_config",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "crt": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "os": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "kill_client": {
            "name": "kill_client",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "management": {
            "name": "management",
            "location": 124,
            "return": [
                "Management"
            ],
            "arguments": {}
        },
        "Management.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Management.__enter__": {
            "name": "__enter__",
            "location": 141,
            "return": [
                "Management"
            ],
            "arguments": {
                "self": [
                    "_TManagement@@Management@@"
                ]
            }
        },
        "Management.__exit__": {
            "name": "__exit__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Management.run": {
            "name": "run",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management.quit": {
            "name": "quit",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management.connect": {
            "name": "connect",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management._recv": {
            "name": "_recv",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management._send": {
            "name": "_send",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/pki.py": {
        "certificate_authority": {
            "name": "certificate_authority",
            "location": 19,
            "return": [
                "KeyPair"
            ],
            "arguments": {}
        },
        "create_certificate_authority": {
            "name": "create_certificate_authority",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_client_keypair": {
            "name": "create_client_keypair",
            "location": 40,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "days": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_server_keypair": {
            "name": "create_server_keypair",
            "location": 48,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable[,int]",
                    "Dict[str,str]",
                    "int"
                ],
                "days": [
                    "str",
                    "Callable[,int]",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "create_keypair": {
            "name": "create_keypair",
            "location": 56,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "name": [
                    "int",
                    "Type",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Optional[ModelOrDc]",
                    "Iterable[Hashable]"
                ],
                "days": [
                    "int",
                    "Type",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Optional[ModelOrDc]",
                    "Iterable[Hashable]"
                ],
                "is_server": [
                    "int",
                    "Type",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Optional[ModelOrDc]",
                    "Iterable[Hashable]"
                ],
                "is_ca": [
                    "int",
                    "Type",
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Optional[ModelOrDc]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "create_dh_params": {
            "name": "create_dh_params",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "bytes",
                    "bool",
                    "None"
                ]
            }
        },
        "create_crl": {
            "name": "create_crl",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_certificate_extensions": {
            "name": "_get_certificate_extensions",
            "location": 139,
            "return": [
                "List[x509.Extension[nothing]]"
            ],
            "arguments": {
                "is_server": [
                    "Callable[,Any]",
                    "bool",
                    "List[List[int]]",
                    "Dict[str,list]",
                    "List[list[int]]",
                    "str",
                    "Dict"
                ],
                "is_ca": [
                    "List[float]",
                    "Dict",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "parse_certificate": {
            "name": "parse_certificate",
            "location": 198,
            "return": [
                "x509.Certificate"
            ],
            "arguments": {
                "crt": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "parse_private_key": {
            "name": "parse_private_key",
            "location": 209,
            "return": [
                "str",
                "bytes",
                "Dict[str, str]",
                "bool",
                "apps.common.coininfo.CoinInfo",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "Dict",
                    "int"
                ],
                "password": [
                    "str",
                    "None",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        },
        "encode_certificate": {
            "name": "encode_certificate",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "certificate": [
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "encode_private_key": {
            "name": "encode_private_key",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "encode_dh_params": {
            "name": "encode_dh_params",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "params": []
            }
        },
        "load_keypair": {
            "name": "load_keypair",
            "location": 302,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "crt": [
                    "str",
                    "Dict",
                    "bytes",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "nevergrad.common.Any",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Dict",
                    "bytes",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "nevergrad.common.Any",
                    "Optional[str]"
                ]
            }
        },
        "KeyPair.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "Mapping[str,Any]",
                    "int",
                    "Mapping",
                    "str"
                ],
                "key": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "T",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "KeyPair.fingerprint": {
            "name": "fingerprint",
            "location": 270,
            "return": [
                "str",
                "List[Tuple[str,str,Any,Any,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.certificate_pem": {
            "name": "certificate_pem",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.private_key_pem": {
            "name": "private_key_pem",
            "location": 287,
            "return": [
                "str",
                "Sequence[Sequence[Any]]",
                "bool",
                "int",
                "Optional[str]",
                "bytes",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.pem": {
            "name": "pem",
            "location": 294,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/signals.py": {
        "user_post_save": {
            "name": "user_post_save",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "core.models.Grouping"
                ]
            }
        },
        "device_post_delete": {
            "name": "device_post_delete",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "core.models.Grouping",
                    "zerver.models.Message"
                ]
            }
        },
        "group_post_save": {
            "name": "group_post_save",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "tuple",
                    "float",
                    "bool",
                    "Callable"
                ]
            }
        },
        "group_post_delete": {
            "name": "group_post_delete",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "dict",
                    "str",
                    "Optional[Type]",
                    "float"
                ]
            }
        },
        "client_post_delete": {
            "name": "client_post_delete",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]",
                    "zerver.models.Realm",
                    "Optional[int]"
                ]
            }
        },
        "client_post_save": {
            "name": "client_post_save",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "models.scenes.inventory_scene.InventoryScene"
                ]
            }
        },
        "firewall_rule_post_save": {
            "name": "firewall_rule_post_save",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Tuple[str,int]",
                    "str",
                    "Tuple[Union[str,int]]",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        },
        "firewall_rule_post_delete": {
            "name": "firewall_rule_post_delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "dict",
                    "str",
                    "float",
                    "Optional[Type]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/tasks.py": {
        "create_crl": {
            "name": "create_crl",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send_email": {
            "name": "send_email",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "int"
                ],
                "subject": [
                    "str",
                    "int"
                ],
                "body": [
                    "str",
                    "bytes",
                    "Dict",
                    "Callable",
                    "T"
                ],
                "sender": [
                    "str",
                    "bytes",
                    "Dict",
                    "Callable",
                    "T"
                ]
            }
        },
        "disconnect_openvpn_client": {
            "name": "disconnect_openvpn_client",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "zerver.models.Client",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/validators.py": {
        "is_cidr": {
            "name": "is_cidr",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Dict[str,Any]",
                    "Sequence[Mapping]"
                ]
            }
        },
        "is_cidr_network": {
            "name": "is_cidr_network",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "Iterator",
                    "float",
                    "Iterator[Any]",
                    "None",
                    "static_frame.core.util.IndexConstructor",
                    "Optional[float]"
                ]
            }
        },
        "is_ipv4": {
            "name": "is_ipv4",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "is_port": {
            "name": "is_port",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "Union[bool, str]",
                    "Union[str, int, float]"
                ]
            }
        },
        "is_email": {
            "name": "is_email",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Union[bytes,bytearray,str]",
                    "str",
                    "bytes",
                    "bytearray",
                    "Union[str,bytes,int]",
                    "int"
                ]
            }
        },
        "is_domain": {
            "name": "is_domain",
            "location": 65,
            "return": [
                "Optional[Match[str]]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_valid_password": {
            "name": "is_valid_password",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "int"
                ],
                "length": [
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/__init__.py": {
        "CommonConfig.ready": {
            "name": "ready",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/migrations/0001_initial.py": {},
    "mangle-vpn-master/mangle/common/migrations/0002_auto_20190321_2227.py": {},
    "mangle-vpn-master/mangle/common/migrations/0003_auto_20190328_0120.py": {},
    "mangle-vpn-master/mangle/common/migrations/0004_auto_20190331_0945.py": {},
    "mangle-vpn-master/mangle/common/migrations/0005_auto_20190331_1121.py": {},
    "mangle-vpn-master/mangle/common/migrations/__init__.py": {},
    "mangle-vpn-master/mangle/common/utils/bash.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_output": {
            "name": "run_output",
            "location": 14,
            "return": [
                "Tuple[(int, str, str)]"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/utils/fs.py": {
        "read_file": {
            "name": "read_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "offset": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Type",
                    "bool",
                    "TextIO"
                ],
                "size": [
                    "int",
                    "Sequence[str]",
                    "Tuple[int]",
                    "Generator[str,None,None]",
                    "List[Tuple[str,str]]",
                    "Tuple[int,int]",
                    "List[str]"
                ]
            }
        },
        "append_file": {
            "name": "append_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ],
                "content": [
                    "str",
                    "bytes"
                ],
                "perms": [
                    "str",
                    "None",
                    "List[Union[Any,Any]]",
                    "List"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ],
                "content": [
                    "str",
                    "bytes"
                ],
                "perms": [
                    "str",
                    "None",
                    "List[Union[Any,Any]]",
                    "List"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/net.py": {
        "ip_addresses": {
            "name": "ip_addresses",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "interface_names": {
            "name": "interface_names",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "interface_ip": {
            "name": "interface_ip",
            "location": 41,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iface": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "hostname": {
            "name": "hostname",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "nameservers": {
            "name": "nameservers",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "expand_cidr": {
            "name": "expand_cidr",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "tests.utils.Strategy[paradigm.hints.Domain]"
                ]
            }
        },
        "get_interface_stats": {
            "name": "get_interface_stats",
            "location": 93,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "iface": [
                    "str"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/strings.py": {
        "random_alphanumeric": {
            "name": "random_alphanumeric",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "remove_empty_lines": {
            "name": "remove_empty_lines",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict",
                    "List"
                ]
            }
        },
        "secs_to_hhmmss": {
            "name": "secs_to_hhmmss",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "float",
                    "Union[int, str]",
                    "T"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/__init__.py": {},
    "mangle-vpn-master/mangle/web/decorators.py": {
        "credentials_required": {
            "name": "credentials_required",
            "location": 5,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "mfa_required": {
            "name": "mfa_required",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "install_required": {
            "name": "install_required",
            "location": 37,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "credentials_required.decorator": {
            "name": "decorator",
            "location": 12,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mfa_required.decorator": {
            "name": "decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "install_required.decorator": {
            "name": "decorator",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "Union[int, List[int]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "django.http.HttpRequest",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/forms.py": {
        "InstallForm.clean_admin_email": {
            "name": "clean_admin_email",
            "location": 12,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "django.http.HttpRequest",
                "Callable",
                "salon.models.Stylist",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.clean_app_hostname": {
            "name": "clean_app_hostname",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.clean_admin_password": {
            "name": "clean_admin_password",
            "location": 32,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.save": {
            "name": "save",
            "location": 47,
            "return": [
                "models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordForm.clean_password": {
            "name": "clean_password",
            "location": 79,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "Optional[zerver.models.Realm]",
                "Callable[[str], T]",
                "str",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/middleware.py": {
        "config_middleware": {
            "name": "config_middleware",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "get_response": [
                    "Dict[str,str]",
                    "str",
                    "bool"
                ]
            }
        },
        "config_middleware.middleware": {
            "name": "middleware",
            "location": 9,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/urls.py": {},
    "mangle-vpn-master/mangle/web/views.py": {
        "show_app": {
            "name": "show_app",
            "location": 18,
            "return": [
                "salon.models.Stylist",
                "Optional[List[str]]",
                "Dict[str, Union[int, str]]",
                "str",
                "dict",
                "bool",
                "services.ticketing.models.ticket_evenTicketEvent",
                "app.models.dto.ClientInfo"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "show_install": {
            "name": "show_install",
            "location": 33,
            "return": [
                "int",
                "salon.models.Stylist",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "process_install": {
            "name": "process_install",
            "location": 47,
            "return": [
                "int",
                "bytes",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "show_google_login": {
            "name": "show_google_login",
            "location": 79,
            "return": [
                "int",
                "salon.models.Stylist",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "show_login": {
            "name": "show_login",
            "location": 88,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "process_login": {
            "name": "process_login",
            "location": 97,
            "return": [
                "bool",
                "str",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "process_oauth": {
            "name": "process_oauth",
            "location": 117,
            "return": [
                "bool",
                "str",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "process_logout": {
            "name": "process_logout",
            "location": 134,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "show_password_reset": {
            "name": "show_password_reset",
            "location": 145,
            "return": [
                "Dict[str, bool]",
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "str",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "process_password_reset": {
            "name": "process_password_reset",
            "location": 155,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "show_mfa": {
            "name": "show_mfa",
            "location": 182,
            "return": [
                "bytes",
                "Optional[str]",
                "List[str]",
                "dict",
                "Tuple[str, Optional[int]]",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "show_mfa_setup": {
            "name": "show_mfa_setup",
            "location": 194,
            "return": [
                "str",
                "salon.models.Stylist",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "int",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "process_mfa": {
            "name": "process_mfa",
            "location": 209,
            "return": [
                "bool",
                "str",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "base_context_processor": {
            "name": "base_context_processor",
            "location": 250,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "django.http.HttpRequest",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "save_form": {
            "name": "save_form",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.db.models.QuerySet",
                    "viewer.models.Archive.QuerySet",
                    "aiohttp.web.Request"
                ],
                "form": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.db.models.QuerySet",
                    "viewer.models.Archive.QuerySet",
                    "aiohttp.web.Request"
                ]
            }
        },
        "get_client_ip": {
            "name": "get_client_ip",
            "location": 278,
            "return": [
                "bytes",
                "bool",
                "str",
                "Dict[str,Tuple[str,str]]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "aiohttp.web.Request",
                    "Dict",
                    "django.http.HttpRequest",
                    "List",
                    "Union[dict,list]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/__init__.py": {},
    "mangle-vpn-master/mangle/web/api/authentication.py": {
        "CredentialAuthentication.authenticate": {
            "name": "authenticate",
            "location": 9,
            "return": [
                "Dict",
                "bool",
                "Dict[int,Any]",
                "Set",
                "Dict[str,Type]",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ApiSessionAuthentication.authenticate": {
            "name": "authenticate",
            "location": 26,
            "return": [
                "Tuple[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/pagination.py": {},
    "mangle-vpn-master/mangle/web/api/permissions.py": {
        "UserPermission.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Set[str]",
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": []
            }
        },
        "UserPermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "Dict"
                ],
                "obj": [
                    "Dict",
                    "Tuple[int]",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/serializers.py": {
        "ProfileDeviceSerializer.save": {
            "name": "save",
            "location": 21,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "List[P]",
                    "zerver.models.UserProfile",
                    "core.models.Recipe",
                    "zerver.models.UserGroup",
                    "List[zerver.models.UserProfile]",
                    "server.models.User",
                    "zerver.models.PreregistrationUser"
                ]
            }
        },
        "ProfileDeviceSerializer.validate_name": {
            "name": "validate_name",
            "location": 42,
            "return": [
                "str",
                "accounts.models.AccountPermissionType",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "ProfileDeviceSerializer.validate_os": {
            "name": "validate_os",
            "location": 50,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/urls.py": {},
    "mangle-vpn-master/mangle/web/api/views.py": {
        "ApiInfoView.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Response",
                "str",
                "Dict",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "bool",
                "cmk.utils.type_defs.HostName",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "ApiInfoView.update_available": {
            "name": "update_available",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileView.get": {
            "name": "get",
            "location": 52,
            "return": [
                "Response",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DeviceViewSet.create": {
            "name": "create",
            "location": 72,
            "return": [
                "Response",
                "asgard.models.job.ScheduledJob",
                "bool",
                "Dict[str,Any]",
                "List[Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DeviceViewSet.retrieve": {
            "name": "retrieve",
            "location": 81,
            "return": [
                "Response",
                "HttpResponse",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str,Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "Callable[...,collections.abc.Coroutine]",
                    "Dict",
                    "aiohttp.web.Request",
                    "Callable[...,Coroutine]"
                ],
                "pk": [
                    "None",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "DeviceViewSet.get_disposition": {
            "name": "get_disposition",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "Union[str,IO]",
                    "IO"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/__init__.py": {},
    "mangle-vpn-master/mangle/web/api/admin/permissions.py": {
        "AdminPermission.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "rest_framework.requesRequest"
                ],
                "view": []
            }
        },
        "AdminPermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict"
                ],
                "view": [
                    "Dict"
                ],
                "obj": [
                    "Dict"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/serializers.py": {
        "UserInviteSerializer.validate_email": {
            "name": "validate_email",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "UserInviteSerializer.validate_group_id": {
            "name": "validate_group_id",
            "location": 74,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "UserInviteSerializer.save": {
            "name": "save",
            "location": 84,
            "return": [
                "List[models.User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRuleSerializer.validate": {
            "name": "validate",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "dict",
                    "Sequence['cirq.Qid']",
                    "list",
                    "Sequence"
                ]
            }
        },
        "FirewallRuleSerializer.validate_action": {
            "name": "validate_action",
            "location": 174,
            "return": [
                "bytes",
                "str",
                "Dict",
                "int",
                "T",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "utils.CWLOutputType",
                    "bool"
                ]
            }
        },
        "FirewallRuleSerializer.validate_destination": {
            "name": "validate_destination",
            "location": 184,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str,Any]",
                "Dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict",
                    "float",
                    "int",
                    "common.Name",
                    "Union[float,int]"
                ]
            }
        },
        "FirewallRuleSerializer.validate_group_id": {
            "name": "validate_group_id",
            "location": 193,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FirewallRuleSerializer.validate_port": {
            "name": "validate_port",
            "location": 202,
            "return": [
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FirewallRuleSerializer.validate_protocol": {
            "name": "validate_protocol",
            "location": 222,
            "return": [
                "bytes",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "int"
                ]
            }
        },
        "BaseSettingSerializer.settings": {
            "name": "settings",
            "location": 310,
            "return": [
                "str",
                "int",
                "List[str]",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingSerializer.save": {
            "name": "save",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppSettingSerializer.validate_app_hostname": {
            "name": "validate_app_hostname",
            "location": 345,
            "return": [
                "str",
                "models.Profile",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[float]",
                    "List",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "AppSettingSerializer.validate_app_http_port": {
            "name": "validate_app_http_port",
            "location": 356,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Union[int, float]]",
                    "Sequence",
                    "str",
                    "bytes"
                ]
            }
        },
        "AppSettingSerializer.validate_app_https_port": {
            "name": "validate_app_https_port",
            "location": 365,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Union[int, float]]",
                    "Sequence",
                    "str",
                    "bytes"
                ]
            }
        },
        "AppSettingSerializer.save": {
            "name": "save",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthSettingSerializer.validate_oauth2_client_id": {
            "name": "validate_oauth2_client_id",
            "location": 421,
            "return": [
                "str",
                "int",
                "Mapping",
                "models.Profile",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Callable",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "AuthSettingSerializer.validate_oauth2_client_secret": {
            "name": "validate_oauth2_client_secret",
            "location": 430,
            "return": [
                "str",
                "Optional[int]",
                "Dict",
                "bool",
                "Optional[str]",
                "Set[str]",
                "Optional[bool]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict",
                    "Set[str]",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "AuthSettingSerializer.validate": {
            "name": "validate",
            "location": 439,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MailSettingSerializer.validate_smtp_host": {
            "name": "validate_smtp_host",
            "location": 457,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "T",
                    "Sequence",
                    "list",
                    "float"
                ]
            }
        },
        "MailSettingSerializer.validate_smtp_port": {
            "name": "validate_smtp_port",
            "location": 468,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "bool",
                    "Union[qutebrowser.utils.usertypes.Unset, List]"
                ]
            }
        },
        "VpnSettingSerializer.save": {
            "name": "save",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VpnSettingSerializer.validate_vpn_hostname": {
            "name": "validate_vpn_hostname",
            "location": 500,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "T",
                    "Sequence",
                    "list",
                    "float"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_interface": {
            "name": "validate_vpn_interface",
            "location": 512,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Set[str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_nameservers": {
            "name": "validate_vpn_nameservers",
            "location": 521,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_nat_interface": {
            "name": "validate_vpn_nat_interface",
            "location": 536,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Set[str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_port": {
            "name": "validate_vpn_port",
            "location": 545,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "bool",
                    "Union[qutebrowser.utils.usertypes.Unset, List]"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_protocol": {
            "name": "validate_vpn_protocol",
            "location": 556,
            "return": [
                "bytes",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "int"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_routes": {
            "name": "validate_vpn_routes",
            "location": 565,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_subnet": {
            "name": "validate_vpn_subnet",
            "location": 580,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/urls.py": {},
    "mangle-vpn-master/mangle/web/api/admin/views.py": {
        "UserAdminViewSet.create": {
            "name": "create",
            "location": 37,
            "return": [
                "Response",
                "Dict[str,Any]",
                "bool",
                "Dict",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "UserAdminViewSet.mfa": {
            "name": "mfa",
            "location": 122,
            "return": [
                "Response",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "flask.Response",
                "Dict[str,Dict[str,Any]]",
                "lunch_buddies.models.poll_responses.PollResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "None",
                    "bool",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "UserAdminViewSet.password": {
            "name": "password",
            "location": 87,
            "return": [
                "str",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "pk": [
                    "None",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "UserAdminViewSet.devices": {
            "name": "devices",
            "location": 112,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "None",
                    "bool",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "GroupAdminViewSet.all": {
            "name": "all",
            "location": 143,
            "return": [
                "Response",
                "int",
                "Optional[str]",
                "flask.Response",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "faustypes.web.Request"
                ]
            }
        },
        "GroupAdminViewSet.firewall": {
            "name": "firewall",
            "location": 152,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "GroupAdminViewSet.users": {
            "name": "users",
            "location": 163,
            "return": [
                "Response",
                "axion.utils.types.AnyCallable",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "OpenVPNViewSet.list": {
            "name": "list",
            "location": 227,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "core.models.User",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "OpenVPNViewSet.toggle": {
            "name": "toggle",
            "location": 238,
            "return": [
                "bool",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "OpenVPNViewSet.restart": {
            "name": "restart",
            "location": 254,
            "return": [
                "bool",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "BaseSettingView.get": {
            "name": "get",
            "location": 271,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "BaseSettingView.put": {
            "name": "put",
            "location": 278,
            "return": [
                "Response",
                "str",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[int,dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "MailSettingTestView.post": {
            "name": "post",
            "location": 297,
            "return": [
                "Response",
                "List[str]",
                "Dict",
                "Dict[int,dict]",
                "List[Dict[str,Any]]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "UpdateAppView.post": {
            "name": "post",
            "location": 321,
            "return": [
                "Response",
                "List[str]",
                "Dict",
                "Dict[int,dict]",
                "List[Dict[str,Any]]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "aiohttp.web.Request",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/backend.py": {
        "redirect_login": {
            "name": "redirect_login",
            "location": 6,
            "return": [
                "Optional[Dict]",
                "Optional[str]",
                "int",
                "google.oauth2.credentials.Credentials",
                "Optional",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/ldap/backend.py": {},
    "mangle-vpn-master/mangle/web/authentication/ldap/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/oauth2/backend.py": {
        "OAuth2Backend.authenticate": {
            "name": "authenticate",
            "location": 16,
            "return": [
                "None",
                "bool",
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "OAuth2Backend.get_user": {
            "name": "get_user",
            "location": 63,
            "return": [
                "str",
                "Optional[List[str]]",
                "Callable",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]",
                    "transfer.models.TicketID",
                    "transfer.models.TopicID"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/__init__.py": {
        "get_provider": {
            "name": "get_provider",
            "location": 10,
            "return": [
                "mangle.web.authentication.oauth2.providers.google.GoogleOAuth2Provider"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/base.py": {
        "OAuth2Provider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.client_id": {
            "name": "client_id",
            "location": 26,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.client_secret": {
            "name": "client_secret",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.redirect_uri": {
            "name": "redirect_uri",
            "location": 42,
            "return": [
                "str",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.process_response": {
            "name": "process_response",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "Callable",
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "OAuth2Provider.get_login_url": {
            "name": "get_login_url",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.get_session": {
            "name": "get_session",
            "location": 66,
            "return": [
                "str",
                "OAuth2Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.get_profile": {
            "name": "get_profile",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/google.py": {
        "GoogleOAuth2Provider.get_login_url": {
            "name": "get_login_url",
            "location": 17,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleOAuth2Provider.process_response": {
            "name": "process_response",
            "location": 26,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "List[str]",
                    "int",
                    "Optional[float]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/__init__.py": {}
}
{
    "mapistar-master/manage.py": {},
    "mapistar-master/migrate2.py": {},
    "mapistar-master/config/base.py": {},
    "mapistar-master/config/local.py": {},
    "mapistar-master/config/test.py": {},
    "mapistar-master/config/__init__.py": {},
    "mapistar-master/docs/conf.py": {},
    "mapistar-master/mapistar/app.py": {},
    "mapistar-master/mapistar/base_db.py": {},
    "mapistar-master/mapistar/components.py": {
        "UserComponent.resolve": {
            "name": "resolve",
            "location": 14,
            "return": [
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "Dict[str,Any]",
                    "daylighdb.models.User",
                    "models.User",
                    "contenusers.User"
                ]
            }
        }
    },
    "mapistar-master/mapistar/db.py": {},
    "mapistar-master/mapistar/exceptions.py": {},
    "mapistar-master/mapistar/patients.py": {
        "add": {
            "name": "add",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "patient": []
            }
        },
        "liste": {
            "name": "liste",
            "location": 141,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "one": {
            "name": "one",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "patient_id": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 164,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "patient_id": [],
                "user": []
            }
        },
        "update": {
            "name": "update",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "new_data": [],
                "patient_id": []
            }
        },
        "Patient.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patient._capwords": {
            "name": "_capwords",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patient.before_insert": {
            "name": "before_insert",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patient.before_update": {
            "name": "before_update",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/mapistar/permissions.py": {
        "IsAuthenticated.on_request": {
            "name": "on_request",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jwt_user": []
            }
        },
        "ActesPermissions.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acte": [],
                "user": []
            }
        },
        "ActesPermissions.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesPermissions.only_owner_can_edit": {
            "name": "only_owner_can_edit",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesPermissions.only_editable_today": {
            "name": "only_editable_today",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesPermissionsComponent.resolve": {
            "name": "resolve",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "user": []
            }
        }
    },
    "mapistar-master/mapistar/theso.py": {
        "fuzzy": {
            "name": "fuzzy",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "chaine": []
            }
        }
    },
    "mapistar-master/mapistar/users.py": {
        "login": {
            "name": "login",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [],
                "jwt": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "User.before_insert": {
            "name": "before_insert",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.create_user": {
            "name": "create_user",
            "location": 65,
            "return": [
                "User"
            ],
            "arguments": {
                "cls": [],
                "username": [],
                "password": [],
                "nom": [],
                "prenom": [],
                "statut": [],
                "actif": [
                    "bool"
                ]
            }
        }
    },
    "mapistar-master/mapistar/utils.py": {
        "check_config": {
            "name": "check_config",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "import_models": {
            "name": "import_models",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "module_liste": []
            }
        },
        "get_or_404": {
            "name": "get_or_404",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "model": [],
                "id": []
            }
        },
        "DicoMixin.dico": {
            "name": "dico",
            "location": 61,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameMixin.name": {
            "name": "name",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NameMixin.url_name": {
            "name": "url_name",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetMixin.set": {
            "name": "set",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/mapistar/__init__.py": {},
    "mapistar-master/mapistar/actes/actes.py": {
        "Acte.before_insert": {
            "name": "before_insert",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acte.before_update": {
            "name": "before_update",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/mapistar/actes/observations.py": {
        "Observation.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/mapistar/actes/ordonnances.py": {
        "Ordonnance.dico": {
            "name": "dico",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ordonnance.ordre_add_item": {
            "name": "ordre_add_item",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Ordonnance.ordre_delete_item": {
            "name": "ordre_delete_item",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Ordonnance.get_ordered_items": {
            "name": "get_ordered_items",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/mapistar/actes/ordo_items.py": {
        "Item.after_insert": {
            "name": "after_insert",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.before_delete": {
            "name": "before_delete",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.before_update": {
            "name": "before_update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Medicament.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemViews.add_item": {
            "name": "add_item",
            "location": 64,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ItemViews.delete_item": {
            "name": "delete_item",
            "location": 79,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ItemViews.update_item": {
            "name": "update_item",
            "location": 89,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ItemViews.routes": {
            "name": "routes",
            "location": 102,
            "return": [
                "Include"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ItemViews.add_item.add_item": {
            "name": "add_item",
            "location": 66,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "data": [],
                "obj": []
            }
        },
        "ItemViews.delete_item.delete_item": {
            "name": "delete_item",
            "location": 81,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "item_id": [],
                "obj": []
            }
        },
        "ItemViews.update_item.update_item": {
            "name": "update_item",
            "location": 91,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "item_id": [],
                "new_data": [],
                "obj": []
            }
        }
    },
    "mapistar-master/mapistar/actes/routes.py": {},
    "mapistar-master/mapistar/actes/schemas.py": {},
    "mapistar-master/mapistar/actes/views.py": {
        "ActesViews.add": {
            "name": "add",
            "location": 32,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.liste": {
            "name": "liste",
            "location": 43,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.one": {
            "name": "one",
            "location": 56,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.delete": {
            "name": "delete",
            "location": 66,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.update": {
            "name": "update",
            "location": 76,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.routes_supplementaires": {
            "name": "routes_supplementaires",
            "location": 87,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.do_routes": {
            "name": "do_routes",
            "location": 91,
            "return": [
                "Include"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ActesViews.add.add": {
            "name": "add",
            "location": 34,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "data": [],
                "user": []
            }
        },
        "ActesViews.liste.liste": {
            "name": "liste",
            "location": 45,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "patient_id": []
            }
        },
        "ActesViews.one.one": {
            "name": "one",
            "location": 58,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "acte_id": []
            }
        },
        "ActesViews.delete.delete": {
            "name": "delete",
            "location": 68,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "acte_id": [],
                "obj": []
            }
        },
        "ActesViews.update.update": {
            "name": "update",
            "location": 78,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "acte_id": [],
                "new_data": [],
                "obj": []
            }
        }
    },
    "mapistar-master/mapistar/actes/__init__.py": {},
    "mapistar-master/tests/conftest.py": {
        "napp": {
            "name": "napp",
            "location": 12,
            "return": [
                "abilian.app.Application",
                "App"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "cli_anonymous": {
            "name": "cli_anonymous",
            "location": 19,
            "return": [
                "bool",
                "str",
                "Iterable"
            ],
            "arguments": {
                "napp": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "cli_app_no_auth": {
            "name": "cli_app_no_auth",
            "location": 26,
            "return": [
                "tests.clienMDMClient",
                "bool",
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "napp": [
                    "float",
                    "Iterable[Sequence[str]]",
                    "Mapping",
                    "bool"
                ]
            }
        }
    },
    "mapistar-master/tests/factory.py": {
        "patientd": {
            "name": "patientd",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "patientf": {
            "name": "patientf",
            "location": 21,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "userd": {
            "name": "userd",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "userf": {
            "name": "userf",
            "location": 43,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "actef": {
            "name": "actef",
            "location": 58,
            "return": [
                "int",
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "patient": [
                    "str",
                    "None",
                    "Dict",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ],
                "owner": [
                    "Dict",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "observationf": {
            "name": "observationf",
            "location": 64,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "ordonnancef": {
            "name": "ordonnancef",
            "location": 76,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "itemf": {
            "name": "itemf",
            "location": 84,
            "return": [
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "medicamentf": {
            "name": "medicamentf",
            "location": 90,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {}
        }
    },
    "mapistar-master/tests/fixtures.py": {
        "ent": {
            "name": "ent",
            "location": 17,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "mordo": {
            "name": "mordo",
            "location": 22,
            "return": [
                "Dict[str,Sequence[str]]",
                "MagicMock"
            ],
            "arguments": {}
        },
        "mitem": {
            "name": "mitem",
            "location": 27,
            "return": [
                "MagicMock",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "ent": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "patient": {
            "name": "patient",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 38,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "ordonnance": {
            "name": "ordonnance",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "clij": {
            "name": "clij",
            "location": 63,
            "return": [
                "TestClient",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "clik": {
            "name": "clik",
            "location": 76,
            "return": [
                "TestClient",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "mapistar-master/tests/__init__.py": {},
    "mapistar-master/tests/integration/runner.py": {
        "many": {
            "name": "many",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "nombre": [],
                "factory": []
            }
        },
        "generate_db": {
            "name": "generate_db",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mapistar-master/tests/integration/test_cli.py": {
        "gen_db": {
            "name": "gen_db",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "ponydb": []
            }
        },
        "test_authentication": {
            "name": "test_authentication",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patients": {
            "name": "test_patients",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "clij": [],
                "clik": []
            }
        },
        "test_observation": {
            "name": "test_observation",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "clij": [],
                "clik": []
            }
        },
        "test_ordonnance": {
            "name": "test_ordonnance",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "clij": [],
                "clik": []
            }
        },
        "test_permissions": {
            "name": "test_permissions",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "clij": [],
                "clik": [],
                "ponydb": []
            }
        }
    },
    "mapistar-master/tests/integration/__init__.py": {},
    "mapistar-master/tests/unit/test_actes.py": {
        "TestActeModel.test_inheritance": {
            "name": "test_inheritance",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActeModel.test_before_insert": {
            "name": "test_before_insert",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActeModel.test_before_update": {
            "name": "test_before_update",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestViews.test_add": {
            "name": "test_add",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[str]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestViews.test_list_acte_pass": {
            "name": "test_list_acte_pass",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient": [
                    "List[List[int]]",
                    "List[list[int]]",
                    "Dict[type,Any]",
                    "Dict[Type,Any]"
                ],
                "user": []
            }
        },
        "TestViews.test_one_pass": {
            "name": "test_one_pass",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestViews.test_delete_pass": {
            "name": "test_delete_pass",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "antidote.providers.factory.FactoryProvider",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "TestViews.test_update_pass": {
            "name": "test_update_pass",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "antidote.providers.factory.FactoryProvider",
                    "cli_ui.tests.MessageRecorder",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        }
    },
    "mapistar-master/tests/unit/test_ordonnances.py": {
        "TestOrdonnanceModel.test_dico": {
            "name": "test_dico",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ordonnance": [
                    "Callable",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "ponydb": [
                    "Callable",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestOrdonnanceModel.test_ordre_add": {
            "name": "test_ordre_add",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "mordo": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestOrdonnanceModel.test_ordre_delete": {
            "name": "test_ordre_delete",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "mordo": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestOrdonnanceModel.test_get_ordered_items": {
            "name": "test_get_ordered_items",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "mordo": []
            }
        }
    },
    "mapistar-master/tests/unit/test_ordo_items.py": {
        "TestItemViews.test_add_item": {
            "name": "test_add_item",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mordo": [],
                "mitem": []
            }
        },
        "TestItemViews.test_delete_item": {
            "name": "test_delete_item",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mitem": []
            }
        },
        "TestItemViews.test_update_item": {
            "name": "test_update_item",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mitem": []
            }
        },
        "TestItemModel.test_inheritance": {
            "name": "test_inheritance",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemModel.test_after_insert": {
            "name": "test_after_insert",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mitem": [],
                "mordo": [],
                "mocker": []
            }
        },
        "TestItemModel.test_after_delete": {
            "name": "test_after_delete",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mitem": [],
                "mordo": []
            }
        },
        "TestItemModel.test_after_udpate": {
            "name": "test_after_udpate",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mitem": [],
                "mordo": []
            }
        },
        "TestItemModel.test_item_update_ordonnnace": {
            "name": "test_item_update_ordonnnace",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ordonnance": [],
                "ponydb": []
            }
        },
        "TestMedicamentModel.test_repr": {
            "name": "test_repr",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mitem": []
            }
        }
    },
    "mapistar-master/tests/unit/test_patients.py": {
        "TestPatientModel.test_capswords": {
            "name": "test_capswords",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestPatientModel.test_before_insert": {
            "name": "test_before_insert",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestPatientModel.test_before_update": {
            "name": "test_before_update",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int"
                ]
            }
        },
        "TestPatientModel.test_repr": {
            "name": "test_repr",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestPatientViews.test_add": {
            "name": "test_add",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPatientViews.test_cli_get_patient": {
            "name": "test_cli_get_patient",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPatientViews.test_cli_list_patient": {
            "name": "test_cli_list_patient",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int"
                ]
            }
        },
        "TestPatientViews.test_patient_update": {
            "name": "test_patient_update",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "mapistar-master/tests/unit/test_permissions.py": {
        "TestActesPermission.test_only_owner_can_edit2": {
            "name": "test_only_owner_can_edit2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermission.test_only_editable_today": {
            "name": "test_only_editable_today",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermission.test_only_editable_today_23h_utc": {
            "name": "test_only_editable_today_23h_utc",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermission.test_perm_are_called": {
            "name": "test_perm_are_called",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermissionComponent.test_ActesPermissions_called": {
            "name": "test_ActesPermissions_called",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "genre": []
            }
        },
        "TestActesPermissionComponent.test_returns_actes_with_acte_id": {
            "name": "test_returns_actes_with_acte_id",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermissionComponent.test_returns_item_with_item_id": {
            "name": "test_returns_item_with_item_id",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestActesPermissionComponent.test_resolve_exclude_acteid_and_itemid": {
            "name": "test_resolve_exclude_acteid_and_itemid",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActesPermissionComponent.test_resolve_not_acteid_or_itmeid": {
            "name": "test_resolve_not_acteid_or_itmeid",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistar-master/tests/unit/test_schemas.py": {
        "test_acte": {
            "name": "test_acte",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_actes_schemas": {
            "name": "test_actes_schemas",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observation": {
            "name": "test_observation",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordonnance": {
            "name": "test_ordonnance",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_medicament": {
            "name": "test_medicament",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mapistar-master/tests/unit/test_theso.py": {
        "test_fuzzy": {
            "name": "test_fuzzy",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "BaseException"
                ]
            }
        }
    },
    "mapistar-master/tests/unit/test_users.py": {
        "TestModel.test_create_user": {
            "name": "test_create_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestModel.test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestModel.test_check": {
            "name": "test_check",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLogin.test_bad_username": {
            "name": "test_bad_username",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLogin.test_bad_pwd": {
            "name": "test_bad_pwd",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLogin.test_login_pass": {
            "name": "test_login_pass",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLogin.test_fail_token_none": {
            "name": "test_fail_token_none",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLogin.test_fail_user_inactive": {
            "name": "test_fail_user_inactive",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "mapistar-master/tests/unit/test_utils.py": {
        "test_get_or_404_pass": {
            "name": "test_get_or_404_pass",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_or_404_not_found": {
            "name": "test_get_or_404_not_found",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_dico": {
            "name": "test_dico",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_mixin": {
            "name": "test_set_mixin",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "TestCheckConfg.test_jwt_duration": {
            "name": "test_jwt_duration",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestImportModels.test_arg_format": {
            "name": "test_arg_format",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportModels.test_insinstance_str": {
            "name": "test_insinstance_str",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestImportModels.test_insinstance_tuple": {
            "name": "test_insinstance_tuple",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "mapistar-master/tests/unit/__init__.py": {}
}
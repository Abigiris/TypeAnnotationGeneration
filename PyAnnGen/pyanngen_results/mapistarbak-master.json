{
    "mapistarbak-master/app.py": {},
    "mapistarbak-master/manage.py": {},
    "mapistarbak-master/setup.py": {},
    "mapistarbak-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 30,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 54,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "typing.Iterator",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "list",
                    "List[str]",
                    "Union[str, list]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "mapistarbak-master/config/get_env.py": {},
    "mapistarbak-master/config/urls.py": {},
    "mapistarbak-master/config/__init__.py": {},
    "mapistarbak-master/config/django/__init__.py": {},
    "mapistarbak-master/config/django/settings/base.py": {},
    "mapistarbak-master/config/django/settings/local.py": {},
    "mapistarbak-master/config/django/settings/prod.py": {},
    "mapistarbak-master/config/django/settings/testing.py": {},
    "mapistarbak-master/config/django/settings/__init__.py": {},
    "mapistarbak-master/config/settings/base.py": {},
    "mapistarbak-master/config/settings/local.py": {
        "LocalAuthentification.authenticate": {
            "name": "authenticate",
            "location": 19,
            "return": [
                "mapistar.users.authentication.AuthUser"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "dict[, ]",
                    "typing.Mapping",
                    "mwapi.Session",
                    "dict",
                    "solo.vendor.old_session.old_session.Session",
                    "sqlalchemy.orm.Session",
                    "Mapping[str, List[Any]]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "mapistarbak-master/config/settings/prod.py": {},
    "mapistarbak-master/config/settings/testing.py": {},
    "mapistarbak-master/config/settings/__init__.py": {},
    "mapistarbak-master/docs/conf.py": {},
    "mapistarbak-master/mapistar/__init__.py": {},
    "mapistarbak-master/mapistar/actes/actesviews.py": {
        "ActesViews.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "ActesViews.create": {
            "name": "create",
            "location": 28,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.liste": {
            "name": "liste",
            "location": 38,
            "return": [
                "Callable[([int], list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.update": {
            "name": "update",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.delete": {
            "name": "delete",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.get_one": {
            "name": "get_one",
            "location": 81,
            "return": [
                "Callable[([int], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.urls": {
            "name": "urls",
            "location": 90,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActesViews.create.create_acte": {
            "name": "create_acte",
            "location": 30,
            "return": [
                "Response"
            ],
            "arguments": {
                "obj": [],
                "auth": [],
                "db": []
            }
        },
        "ActesViews.liste.liste_acte": {
            "name": "liste_acte",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "patient_id": []
            }
        },
        "ActesViews.update.acte_update": {
            "name": "acte_update",
            "location": 51,
            "return": [
                "Response"
            ],
            "arguments": {
                "obj_id": [],
                "new_data": [],
                "auth": []
            }
        },
        "ActesViews.delete.acte_delete": {
            "name": "acte_delete",
            "location": 73,
            "return": [
                "Response"
            ],
            "arguments": {
                "obj_id": [],
                "auth": []
            }
        },
        "ActesViews.get_one.get_one_acte": {
            "name": "get_one_acte",
            "location": 83,
            "return": [],
            "arguments": {
                "obj_id": []
            }
        }
    },
    "mapistarbak-master/mapistar/actes/models.py": {
        "BaseActe.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActe.update": {
            "name": "update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrescriptionLibre.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistarbak-master/mapistar/actes/permissions.py": {
        "ActesWritePermission.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actesviews": [
                    "int",
                    "float",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "ActesWritePermission.has_permission": {
            "name": "has_permission",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj_id": [
                    "int"
                ],
                "auth": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "raiden.utils.PaymentAmount",
                    "None",
                    "bool",
                    "Optional[Tuple[int, int]]"
                ]
            }
        }
    },
    "mapistarbak-master/mapistar/actes/urls.py": {},
    "mapistarbak-master/mapistar/actes/views.py": {},
    "mapistarbak-master/mapistar/actes/__init__.py": {},
    "mapistarbak-master/mapistar/actes/migrations/0001_initial.py": {},
    "mapistarbak-master/mapistar/actes/migrations/0002_auto_20180228_1517.py": {},
    "mapistarbak-master/mapistar/actes/migrations/0003_prescriptionlibre.py": {},
    "mapistarbak-master/mapistar/actes/migrations/__init__.py": {},
    "mapistarbak-master/mapistar/actes/schemas/base.py": {},
    "mapistarbak-master/mapistar/actes/schemas/observation.py": {},
    "mapistarbak-master/mapistar/actes/schemas/presciptionlibre.py": {},
    "mapistarbak-master/mapistar/actes/schemas/__init__.py": {},
    "mapistarbak-master/mapistar/patients/models.py": {
        "PatientManager.create": {
            "name": "create",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Patient.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Patient.save": {
            "name": "save",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistarbak-master/mapistar/patients/schemas.py": {},
    "mapistarbak-master/mapistar/patients/urls.py": {},
    "mapistarbak-master/mapistar/patients/views.py": {
        "patients_detail": {
            "name": "patients_detail",
            "location": 14,
            "return": [
                "mapistar.patients.schemas.PatientSchema"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "http.HTTPStatus",
                    "arxiv.users.domain.Session"
                ],
                "patient_id": [
                    "int"
                ]
            }
        },
        "patients_create": {
            "name": "patients_create",
            "location": 25,
            "return": [
                "Response",
                "List[str]",
                "dict",
                "Dict[str, Any]",
                "bool",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "session": [
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "patient": [
                    "mapistar.patients.schemas.PatientCreateSchema"
                ]
            }
        },
        "patients_update": {
            "name": "patients_update",
            "location": 33,
            "return": [
                "mapistar.patients.schemas.PatientSchema"
            ],
            "arguments": {
                "session": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "patient_id": [
                    "int"
                ],
                "patient": [
                    "mapistar.patients.schemas.PatientUpdateSchema"
                ]
            }
        },
        "patients_list": {
            "name": "patients_list",
            "location": 45,
            "return": [
                "List[mapistar.patients.schemas.PatientSchema]"
            ],
            "arguments": {
                "session": [
                    "dict[str, typing.Any]",
                    "nox.sessions.Session",
                    "_pytesmain.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "mapistarbak-master/mapistar/patients/__init__.py": {},
    "mapistarbak-master/mapistar/patients/migrations/0001_initial.py": {},
    "mapistarbak-master/mapistar/patients/migrations/0002_patient_birthdate.py": {},
    "mapistarbak-master/mapistar/patients/migrations/__init__.py": {},
    "mapistarbak-master/mapistar/users/authentication.py": {
        "AuthUser.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "token": [
                    "None"
                ]
            }
        },
        "AuthUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUser.get_display_name": {
            "name": "get_display_name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUser.get_user_id": {
            "name": "get_user_id",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapistarJWTAuthentication.authenticate": {
            "name": "authenticate",
            "location": 30,
            "return": [
                "AuthUser"
            ],
            "arguments": {
                "self": [],
                "authorization": [],
                "settings": [],
                "db": []
            }
        }
    },
    "mapistarbak-master/mapistar/users/models.py": {},
    "mapistarbak-master/mapistar/users/schemas.py": {},
    "mapistarbak-master/mapistar/users/urls.py": {},
    "mapistarbak-master/mapistar/users/utils.py": {
        "get_payload": {
            "name": "get_payload",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {
                "user": [
                    "mapistar.users.models.User"
                ],
                "duration": [
                    "dict"
                ]
            }
        }
    },
    "mapistarbak-master/mapistar/users/views.py": {
        "login": {
            "name": "login",
            "location": 12,
            "return": [
                "Response",
                "Optional[bool]",
                "str",
                "bool",
                "collector_utilities.type.Response"
            ],
            "arguments": {
                "user": [
                    "dict[, ]",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "dict"
                ],
                "pwd": [
                    "dict[, ]",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "dict"
                ],
                "settings": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "mapistarbak-master/mapistar/users/__init__.py": {},
    "mapistarbak-master/mapistar/users/migrations/0001_initial.py": {},
    "mapistarbak-master/mapistar/users/migrations/__init__.py": {},
    "mapistarbak-master/mapistar/utils/schemas.py": {
        "regular_text": {
            "name": "regular_text",
            "location": 51,
            "return": [
                "type"
            ],
            "arguments": {}
        },
        "formatted_date": {
            "name": "formatted_date",
            "location": 55,
            "return": [
                "type"
            ],
            "arguments": {}
        },
        "email_schema": {
            "name": "email_schema",
            "location": 59,
            "return": [
                "type"
            ],
            "arguments": {}
        }
    },
    "mapistarbak-master/mapistar/utils/shortcuts.py": {
        "get_or_404": {
            "name": "get_or_404",
            "location": 8,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "Iterable[str]",
                "dict[, ]"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "mapistarbak-master/mapistar/utils/__init__.py": {},
    "mapistarbak-master/tests/conftest.py": {
        "ss": {
            "name": "ss",
            "location": 25,
            "return": [
                "Session",
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "get_ss": {
            "name": "get_ss",
            "location": 40,
            "return": [
                "typing.Generator[apistar.backends.django_orm.Session, None, None]",
                "typing.Generator[Session]"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "app_fix": {
            "name": "app_fix",
            "location": 45,
            "return": [
                "routemaster.app.App"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 61,
            "return": [
                "str",
                "models.Telegram_Chat",
                "dict",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "auth_user": {
            "name": "auth_user",
            "location": 67,
            "return": [
                "AuthUser",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "pyramid.config.Configurator",
                "dict"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "User",
                    "Optional[str]",
                    "asgard.models.user.User",
                    "asgard.backends.accounts.AccountsBackend",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 72,
            "return": [
                "TestClient",
                "List[object]",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "dict",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "client_anonymous": {
            "name": "client_anonymous",
            "location": 85,
            "return": [
                "flaskapp.App",
                "TestClient"
            ],
            "arguments": {
                "app_fix": [
                    "typing.Callable[, ]",
                    "Callable",
                    "app.GrpyApp"
                ]
            }
        },
        "patientd": {
            "name": "patientd",
            "location": 111,
            "return": [
                "str",
                "BinaryIO",
                "faustypes.models.ModelT"
            ],
            "arguments": {}
        },
        "patient": {
            "name": "patient",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "patient10": {
            "name": "patient10",
            "location": 129,
            "return": [
                "list[]",
                "list",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "int"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "observation": {
            "name": "observation",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "mapistarbak-master/tests/factories.py": {},
    "mapistarbak-master/tests/__init__.py": {},
    "mapistarbak-master/tests/actes/actes_factory.py": {},
    "mapistarbak-master/tests/actes/test_actesviews.py": {
        "test_init": {
            "name": "test_init",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observation_create": {
            "name": "test_observation_create",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "patient": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "abilian.core.models.subjects.User",
                    "server.models.User",
                    "raiden.utils.Address"
                ],
                "ss": [],
                "auth_user": []
            }
        },
        "test_observation_update": {
            "name": "test_observation_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "observation": [
                    "Tuple[str]",
                    "str",
                    "tuple[str]",
                    "bytes"
                ],
                "ss": [
                    "raiden.utils.Address",
                    "raiden.utils.MessageID",
                    "raiden.utils.ChannelID"
                ],
                "user": [
                    "Tuple[str]",
                    "str",
                    "tuple[str]",
                    "bytes"
                ],
                "auth_user": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_observation_update_bad_new_data": {
            "name": "test_observation_update_bad_new_data",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core.models.Recipe"
                ],
                "observation": [
                    "str",
                    "bytes",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "ss": [],
                "user": [
                    "str",
                    "bytes",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "auth_user": [
                    "bool",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core.models.Recipe"
                ]
            }
        },
        "test_observation_delete": {
            "name": "test_observation_delete",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "observation": [
                    "str",
                    "bool",
                    "tests._TestServerFactory"
                ],
                "auth_user": [
                    "str",
                    "list[str]",
                    "None",
                    "zerver.models.UserMessage",
                    "models.user.User",
                    "List[str]",
                    "Optional[projects.models.projects.Project]"
                ]
            }
        },
        "test_list_acte_pass": {
            "name": "test_list_acte_pass",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "patient": [
                    "int",
                    "core.models.Grouping"
                ],
                "observation": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_one_acte_pass": {
            "name": "test_get_one_acte_pass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "observation": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "patient": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "mapistarbak-master/tests/actes/test_models.py": {
        "TestObservation.test_string": {
            "name": "test_string",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str"
                ]
            }
        },
        "TestObservation.test_save": {
            "name": "test_save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "float",
                    "Tuple[float, float, float, float, float]",
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestObservation.test_update": {
            "name": "test_update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "float",
                    "Tuple[float, float, float, float, float]",
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestPrescriptionLibre.test_string": {
            "name": "test_string",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistarbak-master/tests/actes/test_permissions.py": {
        "test_pass": {
            "name": "test_pass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_user": [
                    "str",
                    "int"
                ],
                "observation": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_reject_not_owner": {
            "name": "test_reject_not_owner",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_user": [
                    "str",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]"
                ],
                "observation": [
                    "str"
                ]
            }
        },
        "test_only_today": {
            "name": "test_only_today",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "observation": [
                    "str",
                    "bool",
                    "list[str]",
                    "tests._TestServerFactory",
                    "List[str]"
                ],
                "auth_user": [
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "mapistarbak-master/tests/actes/test_schemas.py": {},
    "mapistarbak-master/tests/actes/__init__.py": {},
    "mapistarbak-master/tests/patients/patients_factory.py": {},
    "mapistarbak-master/tests/patients/test_models.py": {
        "TestPatient.test_string": {
            "name": "test_string",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patientd": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestPatient.test_fields_with_capwords_at_create": {
            "name": "test_fields_with_capwords_at_create",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patientd": [
                    "int",
                    "BaseException",
                    "str"
                ]
            }
        },
        "TestPatient.test_fileds_with_capwords_at_update": {
            "name": "test_fileds_with_capwords_at_update",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patientd": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "TestPatient.test_instance_update_capwords": {
            "name": "test_instance_update_capwords",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patientd": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "TestPatient.test_blank_true_for_non_required_fields": {
            "name": "test_blank_true_for_non_required_fields",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patientd": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "mapistarbak-master/tests/patients/test_schemas.py": {},
    "mapistarbak-master/tests/patients/test_views.py": {
        "test_patient_correpted_data": {
            "name": "test_patient_correpted_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "ss": []
            }
        },
        "test_patient_detail": {
            "name": "test_patient_detail",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "patient": []
            }
        },
        "test_patient_create": {
            "name": "test_patient_create",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "patientd": []
            }
        },
        "test_detail_not_found": {
            "name": "test_detail_not_found",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "ss": [],
                "patient": []
            }
        },
        "test_patient_list": {
            "name": "test_patient_list",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "patient10": []
            }
        },
        "test_patient_update": {
            "name": "test_patient_update",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "patient": [],
                "client": []
            }
        },
        "test_patient_update_raises_not_found": {
            "name": "test_patient_update_raises_not_found",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "patient": [],
                "ss": []
            }
        }
    },
    "mapistarbak-master/tests/patients/__init__.py": {},
    "mapistarbak-master/tests/users/test_authentication.py": {
        "testautheticate_pass_with_valid_jwt": {
            "name": "testautheticate_pass_with_valid_jwt",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "ss": [
                    "str",
                    "int"
                ]
            }
        },
        "test_authenticate_fails_without_valid_date_payload": {
            "name": "test_authenticate_fails_without_valid_date_payload",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "ss": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_invalid_user": {
            "name": "test_invalid_user",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "ss": [
                    "str"
                ]
            }
        },
        "test_user_is_not_active": {
            "name": "test_user_is_not_active",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str"
                ],
                "ss": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "test_payload_returned_is_empty": {
            "name": "test_payload_returned_is_empty",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "ss": [
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "monkeypatch": []
            }
        },
        "test_is_authenticated_is_True": {
            "name": "test_is_authenticated_is_True",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_user": [
                    "str"
                ]
            }
        },
        "test_get_user_id": {
            "name": "test_get_user_id",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_user": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_display_name": {
            "name": "test_get_display_name",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_user": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_payload_returned_is_empty.return_empty_dict": {
            "name": "return_empty_dict",
            "location": 56,
            "return": [
                "MagicMock",
                "bool",
                "cmk.utils.prediction.Timestamp"
            ],
            "arguments": {}
        }
    },
    "mapistarbak-master/tests/users/test_utils.py": {
        "test_get_payload_user": {
            "name": "test_get_payload_user",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_get_payload_duration_empty": {
            "name": "test_get_payload_duration_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mapistarbak-master/tests/users/test_views.py": {
        "test_login_pass": {
            "name": "test_login_pass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client_anonymous": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_login_forbiden_bad_user": {
            "name": "test_login_forbiden_bad_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client_anonymous": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_login_forbiden_inactive_user": {
            "name": "test_login_forbiden_inactive_user",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client_anonymous": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "mapistarbak-master/tests/users/users_factory.py": {},
    "mapistarbak-master/tests/users/__init__.py": {},
    "mapistarbak-master/tests/utils/test_schemas.py": {
        "TestRegularText.test_space": {
            "name": "test_space",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegularText.test_unallowed": {
            "name": "test_unallowed",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mot": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "List[int]"
                ]
            }
        },
        "TestRegularText.test_new_pattern": {
            "name": "test_new_pattern",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegularText.test_regular_text_function": {
            "name": "test_regular_text_function",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDate.test_new_pattern": {
            "name": "test_new_pattern",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_email_regex": {
            "name": "test_email_regex",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_email_unallowed": {
            "name": "test_email_unallowed",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mapistarbak-master/tests/utils/test_shortcuts.py": {
        "Testget_or_404.test_django_model": {
            "name": "test_django_model",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient": []
            }
        },
        "Testget_or_404.test_apistar_session": {
            "name": "test_apistar_session",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patient": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "ss": [
                    "dict[, ]",
                    "dict",
                    "bytes",
                    "typing.Callable[, ]",
                    "Callable",
                    "Exception",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "tartare.core.models.Job"
                ]
            }
        },
        "Testget_or_404.test_raise_not_found": {
            "name": "test_raise_not_found",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
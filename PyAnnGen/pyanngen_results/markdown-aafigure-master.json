{
    "markdown-aafigure-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "markdown-aafigure-master/scripts/exit_0_if_empty.py": {},
    "markdown-aafigure-master/src/markdown_aafigure/extension.py": {
        "_clean_block_text": {
            "name": "_clean_block_text",
            "location": 34,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "make_marker_id": {
            "name": "make_marker_id",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "_clean_doctype": {
            "name": "_clean_doctype",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "img_text": [
                    "str",
                    "Dict"
                ]
            }
        },
        "img2html": {
            "name": "img2html",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "img_data": [
                    "bytes",
                    "Dict[str,Any]",
                    "int",
                    "Optional[str]"
                ],
                "tag_type": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "_parse_block_text": {
            "name": "_parse_block_text",
            "location": 90,
            "return": [
                "Tuple[(Any, str, dict)]"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "IO[Any]",
                    "IO",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "default_options": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "draw_aafig": {
            "name": "draw_aafig",
            "location": 130,
            "return": [
                "str",
                "Tuple[type]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "block_text": [
                    "str"
                ],
                "default_options": [
                    "str",
                    "None"
                ]
            }
        },
        "draw_aafigure": {
            "name": "draw_aafigure",
            "location": 141,
            "return": [
                "bytes",
                "bool",
                "Dict[str,int]",
                "Optional[Union[str,Any]]",
                "Dict[int,dict]"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "Iterable[dict]",
                    "int",
                    "Iterable[Dict]"
                ],
                "output_fmt": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "Iterable[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "fig2img_uri": {
            "name": "fig2img_uri",
            "location": 167,
            "return": [
                "str",
                "Set[str]",
                "Tuple",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "Pattern"
                ],
                "output_fmt": [
                    "str",
                    "Text"
                ],
                "encoding": [
                    "str",
                    "Text"
                ]
            }
        },
        "fig2svg_uri": {
            "name": "fig2svg_uri",
            "location": 183,
            "return": [
                "Container[T]",
                "str"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "fig2png_uri": {
            "name": "fig2png_uri",
            "location": 187,
            "return": [
                "Container[T]",
                "str"
            ],
            "arguments": {
                "block_text": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "AafigureExtension.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AafigureExtension.reset": {
            "name": "reset",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AafigureExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "AafigurePreprocessor.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "bool",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "ext": [
                    "str",
                    "Tuple[str,bool]",
                    "Tuple[Union[str,bool]]"
                ]
            }
        },
        "AafigurePreprocessor.default_options": {
            "name": "default_options",
            "location": 242,
            "return": [
                "Dict[Text,Union[set[str],list[str],Text]]",
                "bool",
                "Optional[Any]",
                "Union[int,float,complex]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "AafigurePreprocessor._make_tag_for_block": {
            "name": "_make_tag_for_block",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "block_lines": [
                    "List[str]",
                    "Exception",
                    "Type"
                ]
            }
        },
        "AafigurePreprocessor._iter_out_lines": {
            "name": "_iter_out_lines",
            "location": 271,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "List[AnyStr]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AafigurePreprocessor.run": {
            "name": "run",
            "location": 297,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "List[str]",
                    "Counter[str]",
                    "Counter",
                    "Union[bytes,str]",
                    "bytes"
                ]
            }
        },
        "AafigurePostprocessor.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "bool",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "ext": [
                    "str",
                    "Tuple[str,bool]",
                    "Tuple[Union[str,bool]]"
                ]
            }
        },
        "AafigurePostprocessor.run": {
            "name": "run",
            "location": 316,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "markdown-aafigure-master/src/markdown_aafigure/__init__.py": {
        "_make_extension": {
            "name": "_make_extension",
            "location": 14,
            "return": [
                "markdown_aafigure.extension.AafigureExtension"
            ],
            "arguments": {}
        }
    },
    "markdown-aafigure-master/test/test_aafigure.py": {
        "test_regexp": {
            "name": "test_regexp",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_determinism_svg_legacy": {
            "name": "test_determinism_svg_legacy",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_determinism_svg": {
            "name": "test_determinism_svg",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_svg_aafigure_legacy": {
            "name": "test_basic_svg_aafigure_legacy",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_png_aafigure_legacy": {
            "name": "test_basic_png_aafigure_legacy",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_param_aafigure": {
            "name": "test_param_aafigure",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extended_aafigure": {
            "name": "test_extended_aafigure",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trailing_whitespace": {
            "name": "test_trailing_whitespace",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_html_output": {
            "name": "test_html_output",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_in_non_aafigure_block": {
            "name": "test_ignore_in_non_aafigure_block",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "markdown-aafigure-master/test/__init__.py": {}
}
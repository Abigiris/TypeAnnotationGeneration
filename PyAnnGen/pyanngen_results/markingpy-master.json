{
    "markingpy-master/setup.py": {},
    "markingpy-master/docs/source/conf.py": {},
    "markingpy-master/markingpy/cases.py": {
        "BaseTest.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.get_name": {
            "name": "get_name",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[Callable, Type]",
                    "Exception",
                    "T",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "BaseTest.create_test": {
            "name": "create_test",
            "location": 108,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseTest.run": {
            "name": "run",
            "location": 117,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]"
                ]
            }
        },
        "BaseTest.get_success": {
            "name": "get_success",
            "location": 123,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "execution.ExecutionContext",
                    "int"
                ],
                "test_output": [
                    "execution.ExecutionContext",
                    "int"
                ]
            }
        },
        "BaseTest.get_marks": {
            "name": "get_marks",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "execution.ExecutionContext",
                    "bool",
                    "str"
                ],
                "test_output": [
                    "execution.ExecutionContext",
                    "bool",
                    "str"
                ],
                "success": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseTest.format_error": {
            "name": "format_error",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "List[\"DictDataLoader\"]"
                ]
            }
        },
        "BaseTest.format_warnings": {
            "name": "format_warnings",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "warnings": [
                    "str",
                    "List[\"DictDataLoader\"]"
                ]
            }
        },
        "BaseTest.format_stdout": {
            "name": "format_stdout",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "str"
                ]
            }
        },
        "BaseTest.format_feedback": {
            "name": "format_feedback",
            "location": 151,
            "return": [
                "TestFeedback"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float"
                ],
                "test_output": [
                    "int",
                    "float",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "CallTest.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_args": [
                    "bool"
                ],
                "call_kwargs": [
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "CallTest.get_expected": {
            "name": "get_expected",
            "location": 223,
            "return": [
                "str",
                "Union[None, List[str]]",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "bool",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTest.create_test": {
            "name": "create_test",
            "location": 239,
            "return": [
                "markingpy.execution.ExecutionContext"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "bool",
                    "dict"
                ]
            }
        },
        "CallTest.get_success": {
            "name": "get_success",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "execution.ExecutionContext",
                    "trezor.utils.HashWriter",
                    "Dict[str, Any]"
                ],
                "test_output": [
                    "str",
                    "TextIO",
                    "BinaryIO"
                ]
            }
        },
        "CallTest.run": {
            "name": "run",
            "location": 265,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "TimingTest.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cases": [
                    "Optional[int]",
                    "int",
                    "ark.types.PrimalDinoCharacter",
                    "Pattern",
                    "str",
                    "dict",
                    "Optional[bool]"
                ],
                "tolerance": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "TimingTest.create_test": {
            "name": "create_test",
            "location": 334,
            "return": [
                "markingpy.execution.ExecutionContext"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TimingTest.get_target": {
            "name": "get_target",
            "location": 337,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "TimingTest.run": {
            "name": "run",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_func": [
                    "List[List[float]]",
                    "Tuple[int]",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Test.get_name": {
            "name": "get_name",
            "location": 387,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.create_test": {
            "name": "create_test",
            "location": 390,
            "return": [
                "markingpy.execution.ExecutionContext"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Type[T]",
                    "type",
                    "Optional['models.LTI1p3Provider']",
                    "Type"
                ]
            }
        },
        "Test.run": {
            "name": "run",
            "location": 395,
            "return": [
                "mypy.types.UnionType",
                "Tuple[str, str]",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]"
                ]
            }
        },
        "MethodTest.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "List[List]",
                    "float"
                ],
                "call_args": [
                    "Optional[Dict]",
                    "float",
                    "torch.utils.data.Dataset"
                ],
                "call_kwargs": [
                    "Optional[Dict]",
                    "float",
                    "torch.utils.data.Dataset"
                ],
                "inst_args": [
                    "Dict[str, Any]"
                ],
                "inst_kwargs": [
                    "int",
                    "List[List]",
                    "float"
                ]
            }
        },
        "MethodTest.get_expected": {
            "name": "get_expected",
            "location": 427,
            "return": [
                "str",
                "bool",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.run": {
            "name": "run",
            "location": 432,
            "return": [
                "Optional[Callable[[None], None]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "MethodTimingTest.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "cases": [
                    "float",
                    "str",
                    "Dict[str, str]",
                    "raiden.utils.Address",
                    "raiden.utils.MessageID",
                    "int"
                ],
                "tolerance": [
                    "float",
                    "str",
                    "Dict[str, str]",
                    "raiden.utils.Address",
                    "raiden.utils.MessageID",
                    "int"
                ],
                "inst_args": [
                    "bool"
                ],
                "inst_kwargs": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "MethodTimingTest.get_target": {
            "name": "get_target",
            "location": 466,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Set[str]",
                    "tuple"
                ]
            }
        },
        "MethodTimingTest.run": {
            "name": "run",
            "location": 471,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "InteractionTest.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ],
                "inst_call": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "InteractionTest.create_proxy_ns": {
            "name": "create_proxy_ns",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "InteractionTest.create_instance_proxy": {
            "name": "create_instance_proxy",
            "location": 519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractionTest.success_criterion": {
            "name": "success_criterion",
            "location": 528,
            "return": [
                "Union[(Callable[([Any], Any)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "descr": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "marks": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "InteractionTest.create_test": {
            "name": "create_test",
            "location": 561,
            "return": [
                "markingpy.execution.ExecutionContext"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[Callable, Type]",
                    "bool",
                    "dict"
                ]
            }
        },
        "InteractionTest.get_success": {
            "name": "get_success",
            "location": 564,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "execution.ExecutionContext",
                    "bool"
                ],
                "test_output": [
                    "int",
                    "Type[T]"
                ]
            }
        },
        "InteractionTest.run": {
            "name": "run",
            "location": 571,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable"
                ]
            }
        },
        "BaseTest.__call__.wrapped": {
            "name": "wrapped",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "InteractionTest.create_proxy_ns.getter": {
            "name": "getter",
            "location": 500,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self_": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "InteractionTest.create_proxy_ns.setter": {
            "name": "setter",
            "location": 510,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self_": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "str"
                ],
                "val": [
                    "str",
                    "dict"
                ]
            }
        },
        "InteractionTest.success_criterion.deco": {
            "name": "deco",
            "location": 551,
            "return": [
                "mypy.types.Type",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "types.Resolver",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int",
                    "Iterable"
                ]
            }
        }
    },
    "markingpy-master/markingpy/cli.py": {
        "import_markscheme": {
            "name": "import_markscheme",
            "location": 36,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 57,
            "return": [
                "str",
                "Tuple[Tuple[int, Any]]",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "handle_marking_scheme": {
            "name": "handle_marking_scheme",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "Dict[str,str]",
                    "pathlib.Path",
                    "Callable[...,Any]",
                    "None",
                    "Iterable[Any]",
                    "Optional[Callable[...,Any]]"
                ],
                "args": [],
                "root_parser": [
                    "bool",
                    "pathlib.Path",
                    "Dict[str, str]",
                    "Iterable[Any]",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "run_ms": {
            "name": "run_ms",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "list"
                ],
                "args": []
            }
        },
        "summary": {
            "name": "summary",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "str",
                    "Tuple",
                    "Callable[[dict],None]",
                    "Callable[dict,None]",
                    "Callable",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "args": []
            }
        },
        "grades": {
            "name": "grades",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "str",
                    "Tuple",
                    "Callable[[dict],None]",
                    "Callable[dict,None]",
                    "Callable",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "args": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "Tuple",
                    "List[str]",
                    "Dict",
                    "bool",
                    "str",
                    "Callable"
                ],
                "args": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TerminalCommands.create": {
            "name": "create",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_marking_scheme.display_help": {
            "name": "display_help",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "markingpy-master/markingpy/compiler.py": {
        "Chunk.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_start": [
                    "int",
                    "Sequence[str]"
                ],
                "line_end": [
                    "int",
                    "str",
                    "None",
                    "Optional[Node]",
                    "bool"
                ],
                "content": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Iterable[Any]"
                ]
            }
        },
        "Chunk.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemovedChunk.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_start": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "line_end": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "content": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RemovedChunk.is_adjacent": {
            "name": "is_adjacent",
            "location": 60,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Type",
                    "float"
                ]
            }
        },
        "RemovedChunk.add_reason": {
            "name": "add_reason",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemovedChunk.join": {
            "name": "join",
            "location": 72,
            "return": [
                "RemovedChunk"
            ],
            "arguments": {
                "self": [
                    "_TRemovedChunk@@RemovedChunk@@"
                ],
                "other": [
                    "str",
                    "BaseException",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "RemovedChunk.get_first_error": {
            "name": "get_first_error",
            "location": 87,
            "return": [
                "Reason"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compiler.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Text"
                ],
                "mode": [
                    "Text",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "Compiler.__call__": {
            "name": "__call__",
            "location": 115,
            "return": [
                "Tuple[(str, code)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List[str]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Compiler.remove_line": {
            "name": "remove_line",
            "location": 129,
            "return": [
                "Tuple[(Chunk, Chunk)]"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "lineno": [
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "slice",
                    "Exception"
                ],
                "reason": [
                    "Exception",
                    "int",
                    "Dict[str,dict[str,Any]]",
                    "slice",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "Compiler.try_compile": {
            "name": "try_compile",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "Dict",
                    "Exception"
                ]
            }
        },
        "Compiler.handle_compile_exception": {
            "name": "handle_compile_exception",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "Exception",
                    "Hashable",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "chunk": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Compiler.compile_source": {
            "name": "compile_source",
            "location": 182,
            "return": [
                "Tuple[(str, code)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes",
                    "str",
                    "List[int]",
                    "List",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "int",
                    "bool"
                ],
                "mode": [
                    "str",
                    "int",
                    "bool"
                ],
                "flags": [
                    "str",
                    "int",
                    "bool"
                ],
                "dont_inherit": [
                    "str",
                    "int",
                    "bool"
                ],
                "optimize": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Compiler.sort_chunks": {
            "name": "sort_chunks",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markingpy-master/markingpy/config.py": {
        "load_config": {
            "name": "load_config",
            "location": 35,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {}
        }
    },
    "markingpy-master/markingpy/execution.py": {
        "ExecutionContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.exception_handler": {
            "name": "exception_handler",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.do_set_up": {
            "name": "do_set_up",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.do_clean_up": {
            "name": "do_clean_up",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.add_set_up": {
            "name": "add_set_up",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]",
                    "float"
                ]
            }
        },
        "ExecutionContext.add_context": {
            "name": "add_context",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_manager": [
                    "float",
                    "int"
                ]
            }
        },
        "ExecutionContext.add_clean_up": {
            "name": "add_clean_up",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Callable[,None]",
                    "str",
                    "List",
                    "Tuple"
                ]
            }
        },
        "ExecutionContext.catch": {
            "name": "catch",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercises": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Optional[List]",
                    "List",
                    "Dict[str,Tuple[str,str]]",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "preload_modules": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestRun.exec_ns": {
            "name": "exec_ns",
            "location": 96,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRun.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "markingpy-master/markingpy/exercise.py": {
        "record_call": {
            "name": "record_call",
            "location": 54,
            "return": [
                "cases.Call"
            ],
            "arguments": {}
        },
        "exercise": {
            "name": "exercise",
            "location": 432,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Sequence[str]"
                ],
                "cls": [
                    "str",
                    "Tuple",
                    "None",
                    "float"
                ]
            }
        },
        "ExerciseBase.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseBase.get_number": {
            "name": "get_number",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_or_class": [
                    "Type",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[List[str],Optional[Any],Optional[Any]]",
                    "Tuple[Union[list[str],Any,None,Any,None]]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Callable[[Any],str]",
                    "Callable[Any,str]"
                ],
                "descr": [
                    "bool",
                    "None",
                    "Type",
                    "int",
                    "str"
                ],
                "marks": [
                    "bool",
                    "None",
                    "Type",
                    "int",
                    "str"
                ]
            }
        },
        "Exercise.lock": {
            "name": "lock",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.validate": {
            "name": "validate",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__str__": {
            "name": "__str__",
            "location": 137,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.get_name": {
            "name": "get_name",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [
                "int",
                "Optional[Dict[str, str]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.set_to_submission": {
            "name": "set_to_submission",
            "location": 157,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "submission_func": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "Exercise.total_marks": {
            "name": "total_marks",
            "location": 166,
            "return": [
                "bool",
                "List[List[int]]",
                "List",
                "List[List[float]]",
                "Sequence[Union[str,Any]]",
                "str",
                "Sequence[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.add_test": {
            "name": "add_test",
            "location": 169,
            "return": [
                "bool",
                "dict",
                "object",
                "list",
                "str",
                "List[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.test": {
            "name": "test",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "cls": [
                    "str",
                    "None",
                    "Callable[,Iterable[Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Exercise.run": {
            "name": "run",
            "location": 218,
            "return": [
                "ExerciseFeedback"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "Dict[str,Any]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "ExerciseFunctionProxy.add_test": {
            "name": "add_test",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseFunctionProxy.add_test_call": {
            "name": "add_test_call",
            "location": 250,
            "return": [
                "bool",
                "Optional[str]",
                "Iterable[\"Entity\"]",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "self": [],
                "call_params": [
                    "Dict",
                    "None"
                ],
                "call_kwparams": [
                    "Dict",
                    "None"
                ]
            }
        },
        "ExerciseFunctionProxy.timing_test": {
            "name": "timing_test",
            "location": 265,
            "return": [
                "bool",
                "dict",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
            ],
            "arguments": {
                "self": [],
                "timing_cases": [
                    "str",
                    "int"
                ],
                "tolerance": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ExerciseMethodProxy.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str,Any]",
                    "str",
                    "Sequence[Any]",
                    "Iterable[str]",
                    "Mapping",
                    "Mapping[str,Any]"
                ],
                "parent": [
                    "str",
                    "Iterable",
                    "bool",
                    "Optional[Pattern]",
                    "Pattern",
                    "None"
                ],
                "inst_call": [
                    "bool",
                    "int",
                    "Mapping",
                    "str",
                    "Optional[Mapping]",
                    "float",
                    "None",
                    "Type[AbstractIntegrationConversation]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "None",
                    "Iterable[T]",
                    "Optional[str]"
                ]
            }
        },
        "ExerciseMethodProxy.add_test": {
            "name": "add_test",
            "location": 301,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseInstance.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "List[str]",
                    "Tuple[Type]",
                    "bool",
                    "Tuple[type]",
                    "T"
                ],
                "cls": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ExerciseInstance.__getattr__": {
            "name": "__getattr__",
            "location": 333,
            "return": [
                "Optional[ExerciseMethodProxy]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "Union[int,slice]",
                    "Dict",
                    "T",
                    "raiden.utils.Any"
                ]
            }
        },
        "ClassExercise.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassExercise.method_test_call": {
            "name": "method_test_call",
            "location": 378,
            "return": [
                "\"Task\"",
                "str",
                "dict",
                "int",
                "Optional[Set[str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "raiden.utils.Any",
                    "int"
                ],
                "call_params": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "call_kwparams": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "inst_with_args": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "inst_with_kwargs": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "ClassExercise.method_timing_test": {
            "name": "method_timing_test",
            "location": 414,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "timing_cases": [
                    "float",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "tolerance": [
                    "float",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "inst_with_args": [
                    "float",
                    "None",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "inst_with_kwargs": [
                    "float",
                    "None",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "exercise.decorator": {
            "name": "decorator",
            "location": 452,
            "return": [
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exercise.test.decorator": {
            "name": "decorator",
            "location": 209,
            "return": [
                "bool",
                "Optional[str]",
                "list",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "func": []
            }
        },
        "ClassExercise.__init__.wrapper": {
            "name": "wrapper",
            "location": 372,
            "return": [
                "ExerciseInstance",
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {}
        }
    },
    "markingpy-master/markingpy/exercises.py": {
        "record_call": {
            "name": "record_call",
            "location": 72,
            "return": [
                "cases.Call"
            ],
            "arguments": {}
        },
        "ExerciseBase.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseBase.get_number": {
            "name": "get_number",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_or_class": [
                    "str",
                    "Optional[str]",
                    "Iterable",
                    "bool",
                    "None"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Union[str,int]",
                    "int"
                ],
                "descr": [
                    "Optional[List[str]]",
                    "None",
                    "Union[None,int,str]",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "marks": [
                    "Optional[List[str]]",
                    "None",
                    "Union[None,int,str]",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "submission_name": [
                    "Optional[List[Any]]",
                    "None",
                    "Optional[str]",
                    "List[Any]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Optional[Sequence[Any]]",
                    "Any"
                ]
            }
        },
        "Exercise.lock": {
            "name": "lock",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.validate": {
            "name": "validate",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.get_name": {
            "name": "get_name",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.__call__": {
            "name": "__call__",
            "location": 182,
            "return": [
                "cases.Call"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.set_to_submission": {
            "name": "set_to_submission",
            "location": 193,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "submission_func": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "Exercise.total_marks": {
            "name": "total_marks",
            "location": 206,
            "return": [
                "bool",
                "List[List[int]]",
                "List",
                "List[List[float]]",
                "Sequence[Union[str,Any]]",
                "str",
                "Sequence[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.add_test": {
            "name": "add_test",
            "location": 209,
            "return": [
                "cases.BaseTest"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.test": {
            "name": "test",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "cls": [
                    "str",
                    "None",
                    "Callable[,Iterable[Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Exercise.get_submission_function": {
            "name": "get_submission_function",
            "location": 271,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Exercise.format_feedback": {
            "name": "format_feedback",
            "location": 276,
            "return": [
                "ExerciseFeedback"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Dict[str,str]",
                    "Dict[int,dict]",
                    "List[str]",
                    "bool",
                    "Iterable[Entity]",
                    "Optional[int]"
                ]
            }
        },
        "Exercise.run": {
            "name": "run",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "int"
                ]
            }
        },
        "ExerciseFunctionProxy.add_test": {
            "name": "add_test",
            "location": 306,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseFunctionProxy.add_test_call": {
            "name": "add_test_call",
            "location": 310,
            "return": [
                "bool",
                "Optional[str]",
                "Iterable[\"Entity\"]",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "self": [],
                "call_params": [
                    "Dict",
                    "None"
                ],
                "call_kwparams": [
                    "Dict",
                    "None"
                ]
            }
        },
        "ExerciseFunctionProxy.timing_test": {
            "name": "timing_test",
            "location": 327,
            "return": [
                "bool",
                "dict",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
            ],
            "arguments": {
                "self": [],
                "timing_cases": [
                    "str",
                    "int"
                ],
                "tolerance": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ExerciseInstance.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "List[str]",
                    "Tuple[Type]",
                    "bool",
                    "Tuple[type]",
                    "T"
                ],
                "cls": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ExerciseInstance.__getattr__": {
            "name": "__getattr__",
            "location": 367,
            "return": [
                "Optional[ExerciseMethodProxy]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "Union[int,slice]",
                    "Dict",
                    "T",
                    "raiden.utils.Any"
                ]
            }
        },
        "ExerciseMethodProxy.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str,Any]",
                    "str",
                    "Sequence[Any]",
                    "Iterable[str]",
                    "Mapping",
                    "Mapping[str,Any]"
                ],
                "parent": [
                    "str",
                    "Iterable",
                    "bool",
                    "Optional[Pattern]",
                    "Pattern",
                    "None"
                ],
                "inst_call": [
                    "bool",
                    "int",
                    "Mapping",
                    "str",
                    "Optional[Mapping]",
                    "float",
                    "None",
                    "Type[AbstractIntegrationConversation]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "None",
                    "Iterable[T]",
                    "Optional[str]"
                ]
            }
        },
        "ExerciseMethodProxy.add_test": {
            "name": "add_test",
            "location": 387,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseMethodProxy.__call__": {
            "name": "__call__",
            "location": 410,
            "return": [
                "cases.Call"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassExercise.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassExercise.method_test_call": {
            "name": "method_test_call",
            "location": 446,
            "return": [
                "\"Task\"",
                "str",
                "dict",
                "int",
                "Optional[Set[str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "raiden.utils.Any",
                    "int"
                ],
                "call_params": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "call_kwparams": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "inst_with_args": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ],
                "inst_with_kwargs": [
                    "bool",
                    "None",
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "ClassExercise.method_timing_test": {
            "name": "method_timing_test",
            "location": 481,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "timing_cases": [
                    "float",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "tolerance": [
                    "float",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "inst_with_args": [
                    "float",
                    "None",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ],
                "inst_with_kwargs": [
                    "float",
                    "None",
                    "Callable",
                    "Dict[str,str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "InteractionExercise.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Type"
                ]
            }
        },
        "InteractionExercise.new_test": {
            "name": "new_test",
            "location": 525,
            "return": [
                "Optional[str]",
                "Optional[Set[str]]",
                "bool",
                "Dict[str, Union[str, Set]]",
                "dict",
                "List[\"libkol.types.ItemQuantity\"]"
            ],
            "arguments": {
                "self": [],
                "instantiation_call": [
                    "str",
                    "int"
                ]
            }
        },
        "Exercise.test.decorator": {
            "name": "decorator",
            "location": 260,
            "return": [
                "int",
                "str",
                "List[List[str]]",
                "Dict[str, Dict[str, int]]",
                "Sequence[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Iterable[bytes]"
                ]
            }
        },
        "ClassExercise.__init__.wrapper": {
            "name": "wrapper",
            "location": 440,
            "return": [
                "ExerciseInstance",
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {}
        }
    },
    "markingpy-master/markingpy/finders.py": {
        "BaseFinder.get_submissions": {
            "name": "get_submissions",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryFinder.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "DirectoryFinder.get_file_list": {
            "name": "get_file_list",
            "location": 58,
            "return": [
                "Optional[List[pathlib.Path]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryFinder.get_submissions": {
            "name": "get_submissions",
            "location": 70,
            "return": [
                "Generator[(submission.Submission, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteFinder.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "Optional[pathlib.Path]",
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "bool",
                    "None"
                ],
                "ref_field": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "bool",
                    "None"
                ],
                "source_field": [
                    "bool",
                    "str"
                ]
            }
        },
        "SQLiteFinder.get_submissions": {
            "name": "get_submissions",
            "location": 91,
            "return": [
                "Generator[(submission.Submission, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullFinder.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullFinder.get_submissions": {
            "name": "get_submissions",
            "location": 107,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markingpy-master/markingpy/grader.py": {
        "_task_worker": {
            "name": "_task_worker",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "Callable",
                    "Optional[Tuple[str,str]]",
                    "Tuple[Union[str,str]]",
                    "None"
                ],
                "code": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "Callable",
                    "Optional[Tuple[str,str]]",
                    "Tuple[Union[str,str]]",
                    "None"
                ],
                "result": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "Callable",
                    "Optional[Tuple[str,str]]",
                    "Tuple[Union[str,str]]",
                    "None"
                ]
            }
        },
        "GraderABC.submit": {
            "name": "submit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "submission": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "GraderABC.set_db": {
            "name": "set_db",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ]
            }
        },
        "SimpleGrader.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGrader.submit": {
            "name": "submit",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "int",
                    "Dict"
                ],
                "submission": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleGrader.set_db": {
            "name": "set_db",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "ProcessGrader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bytes",
                    "None",
                    "Optional[str]",
                    "Dict",
                    "bool",
                    "Optional[List[Dict]]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "ProcessGrader.submit": {
            "name": "submit",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Tuple[Dict[str,str],List[str]]",
                    "Tuple[Union[dict[str,str],list[str]]]"
                ],
                "submission": [
                    "Tuple[Dict[str, str], List[str]]"
                ]
            }
        },
        "ProcessGrader.set_db": {
            "name": "set_db",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        }
    },
    "markingpy-master/markingpy/linter.py": {
        "linter": {
            "name": "linter",
            "location": 31,
            "return": [
                "LinterReport"
            ],
            "arguments": {
                "submission": [
                    "Dict",
                    "str",
                    "Type",
                    "int",
                    "BaseException"
                ]
            }
        },
        "LinterReport.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterReport.write": {
            "name": "write",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LinterReport.read": {
            "name": "read",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterReport.set_stats": {
            "name": "set_stats",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "markingpy-master/markingpy/linters.py": {
        "linter": {
            "name": "linter",
            "location": 57,
            "return": [
                "LinterReport"
            ],
            "arguments": {
                "sub": [
                    "Dict",
                    "str",
                    "Type",
                    "int",
                    "BaseException"
                ]
            }
        },
        "LinterReport.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterReport.write": {
            "name": "write",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LinterReport.read": {
            "name": "read",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterReport.set_stats": {
            "name": "set_stats",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "markingpy-master/markingpy/magic.py": {
        "BaseDescriptor.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Sequence[Any]]"
                ],
                "cast_to": [
                    "bool",
                    "None",
                    "Sequence",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Mapping",
                    "Optional[int]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "BaseDescriptor.__set__": {
            "name": "__set__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "int"
                ],
                "val": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[int]",
                    "None",
                    "Optional[Tuple[Any,Any]]",
                    "int",
                    "Tuple[Union[Any,Any]]"
                ],
                "typ": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "SafeStrDescriptor.__set__": {
            "name": "__set__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Dict",
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Iterable[cirq.Qid]"
                ],
                "val": [
                    "str"
                ],
                "typ": [
                    "Dict",
                    "None",
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Iterable[cirq.Qid]"
                ]
            }
        },
        "SafeNoneDescriptor.__set__": {
            "name": "__set__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Dict",
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Iterable[cirq.Qid]"
                ],
                "val": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "typ": [
                    "Dict",
                    "None",
                    "List[int]",
                    "List",
                    "int",
                    "str",
                    "Iterable[cirq.Qid]"
                ]
            }
        },
        "DefaultGetterDescriptor.__set__": {
            "name": "__set__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Iterator",
                    "str",
                    "Iterator[object]",
                    "bool",
                    "int"
                ],
                "val": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "typ": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MagicMeta.__prepare__": {
            "name": "__prepare__",
            "location": 81,
            "return": [
                "ChainMap[(str, Type[Union[(ARGS, DefaultGetterDescriptor, KWARGS)]])]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "MagicMeta.__new__": {
            "name": "__new__",
            "location": 84,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcs": [
                    "Type[MagicMeta]"
                ],
                "name": [
                    "str",
                    "Dict",
                    "int"
                ],
                "bases": [
                    "str",
                    "Dict",
                    "int"
                ],
                "namespace": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "markingpy-master/markingpy/markscheme.py": {
        "get_spec_path_or_module": {
            "name": "get_spec_path_or_module",
            "location": 52,
            "return": [
                "Optional[importlib.machinery.ModuleSpec]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "pathlib.Path"
                ],
                "modname": [
                    "str",
                    "Text"
                ]
            }
        },
        "MarkingScheme.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marks": [
                    "bool",
                    "float",
                    "None"
                ],
                "score_style": [
                    "Text",
                    "bool",
                    "float"
                ],
                "grader": [
                    "bool",
                    "float",
                    "None"
                ],
                "submission_path": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "bool",
                    "Any"
                ],
                "finder": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "linter": [
                    "bool",
                    "float",
                    "None"
                ],
                "marks_db": [
                    "Optional[List[str]]",
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[Union[str,Any]]",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Dict[str,Any]"
                ],
                "preload_modules": [
                    "str",
                    "bool",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "MarkingScheme.update_config": {
            "name": "update_config",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MarkingScheme.validate": {
            "name": "validate",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkingScheme.add_exercise": {
            "name": "add_exercise",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [
                    "int",
                    "str",
                    "Dict",
                    "Callable",
                    "T",
                    "Callable[...,Awaitable]"
                ]
            }
        },
        "MarkingScheme.get_submissions": {
            "name": "get_submissions",
            "location": 196,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkingScheme.format_return": {
            "name": "format_return",
            "location": 207,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "str"
                ],
                "total_score": [
                    "str"
                ]
            }
        },
        "MarkingScheme.exercise": {
            "name": "exercise",
            "location": 233,
            "return": [
                "Union[(Callable[([Any], Any)], exercises.ClassExercise)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Sequence[str]"
                ],
                "cls": [
                    "str",
                    "Tuple",
                    "None",
                    "float"
                ],
                "interactive": [
                    "bool",
                    "str",
                    "Tuple",
                    "float"
                ]
            }
        },
        "MarkingScheme.create_grading_task": {
            "name": "create_grading_task",
            "location": 283,
            "return": [
                "execution.TestRun"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkingScheme.run": {
            "name": "run",
            "location": 292,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "generate": [
                    "bool",
                    "str"
                ]
            }
        },
        "MarkingScheme.exercise.decorator": {
            "name": "decorator",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "markingpy-master/markingpy/storage.py": {
        "write_csv": {
            "name": "write_csv",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "store_path": [
                    "List[str]",
                    "Literal",
                    "Iterable[str]",
                    "str"
                ],
                "submissions": [
                    "str",
                    "int",
                    "Dict",
                    "Union[Contributor,Coverage]"
                ],
                "id_heading": [
                    "Text",
                    "List[str]",
                    "Literal",
                    "Iterable[str]",
                    "str"
                ],
                "score_heading": [
                    "Text",
                    "List[str]",
                    "Literal",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "StorageABC.add_record": {
            "name": "add_record",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "StorageABC.get_record": {
            "name": "get_record",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "StorageABC.get_all": {
            "name": "get_all",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVStorageDB.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CSVStorageDB.open_for_read": {
            "name": "open_for_read",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVStorageDB.open_for_write": {
            "name": "open_for_write",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVStorageDB.close_file": {
            "name": "close_file",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVStorageDB.add_record": {
            "name": "add_record",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "int",
                    "None"
                ]
            }
        },
        "CSVStorageDB.get_record": {
            "name": "get_record",
            "location": 103,
            "return": [
                "markingpy.grader.Record"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str",
                    "int"
                ]
            }
        },
        "CSVStorageDB.get_all": {
            "name": "get_all",
            "location": 112,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDB.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SQLiteDB.create_table": {
            "name": "create_table",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDB.add_record": {
            "name": "add_record",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "int",
                    "None"
                ]
            }
        },
        "SQLiteDB.get_record": {
            "name": "get_record",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "int",
                    "str"
                ]
            }
        },
        "SQLiteDB.get_all": {
            "name": "get_all",
            "location": 162,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "write_csv.submission_to_dict": {
            "name": "submission_to_dict",
            "location": 179,
            "return": [
                "Dict",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "submission": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "markingpy-master/markingpy/submission.py": {
        "Submission.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "List[str]",
                    "str",
                    "List",
                    "Optional[str]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "source": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "Submission.compile": {
            "name": "compile",
            "location": 46,
            "return": [
                "str",
                "Dict[int,str]",
                "Union[str,List[str]]",
                "List",
                "Dict[str,str]",
                "int",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Submission.add_feedback": {
            "name": "add_feedback",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float",
                    "int",
                    "Type",
                    "Dict",
                    "Type[object]"
                ],
                "feedback": [
                    "float",
                    "int",
                    "Type",
                    "Dict",
                    "Type[object]"
                ]
            }
        },
        "Submission.generate_report": {
            "name": "generate_report",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markingpy-master/markingpy/syntax.py": {
        "CodeStyleReportABC.get_text_report": {
            "name": "get_text_report",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeStyleReportABC.get_stats": {
            "name": "get_stats",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeStyleReportABC.get_score": {
            "name": "get_score",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeStyleCheckerABC.check": {
            "name": "check",
            "location": 67,
            "return": [
                "CodeStyleReportABC",
                "None"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PyLintReport.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "int",
                    "Dict",
                    "str",
                    "Callable[...,None]"
                ],
                "statements": [
                    "int",
                    "Dict",
                    "str",
                    "Callable[...,None]"
                ],
                "calc": [
                    "int",
                    "Dict",
                    "str",
                    "Callable[...,None]"
                ]
            }
        },
        "PyLintReport.get_stats": {
            "name": "get_stats",
            "location": 81,
            "return": [
                "Counter[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLintReport.get_text_report": {
            "name": "get_text_report",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLintReport.get_score": {
            "name": "get_score",
            "location": 90,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLintChecker.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score_formula": [
                    "Optional[float]",
                    "float",
                    "None",
                    "List[str]",
                    "str",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]"
                ]
            }
        },
        "PyLintChecker.prepare_file": {
            "name": "prepare_file",
            "location": 113,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "str",
                    "bytes",
                    "Dict",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "PyLintChecker.check": {
            "name": "check",
            "location": 123,
            "return": [
                "PyLintReport"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "Dict[str,str]",
                    "defaultdict",
                    "DefaultDict"
                ]
            }
        }
    },
    "markingpy-master/markingpy/users.py": {
        "mark_scheme": {
            "name": "mark_scheme",
            "location": 33,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "exercise": {
            "name": "exercise",
            "location": 82,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "int"
                ],
                "cls": [
                    "str",
                    "None",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "int"
                ],
                "interactive": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "markingpy-master/markingpy/utils.py": {
        "log_calls": {
            "name": "log_calls",
            "location": 110,
            "return": [
                "Callable"
            ],
            "arguments": {
                "level": [
                    "str",
                    "None"
                ]
            }
        },
        "time_exceeded": {
            "name": "time_exceeded",
            "location": 140,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "build_style_calc": {
            "name": "build_style_calc",
            "location": 144,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "formula": [
                    "bool",
                    "List",
                    "Iterable[str]"
                ]
            }
        },
        "str_format_args": {
            "name": "str_format_args",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "time_run": {
            "name": "time_run",
            "location": 178,
            "return": [
                "float"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Type"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "GetArgumentVisitor.visit_Call": {
            "name": "visit_Call",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "GetArgumentVisitor.visit_Name": {
            "name": "visit_Name",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "GetArgumentVisitor.get_names": {
            "name": "get_names",
            "location": 69,
            "return": [
                "Set[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetArgumentVisitor.reset": {
            "name": "reset",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ]
            }
        },
        "TestCaseFunction.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "TestCaseFunction.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseFunction.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseFunction.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "bool",
                "Hashable",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "log_calls.decorator": {
            "name": "decorator",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "build_style_calc.calculator": {
            "name": "calculator",
            "location": 149,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stats": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cpu_limit": {
            "name": "cpu_limit",
            "location": 198,
            "return": [
                "ContextManager[None]",
                "Generator"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "log_calls.decorator.wrapper": {
            "name": "wrapper",
            "location": 122,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "markingpy-master/markingpy/__init__.py": {},
    "markingpy-master/markingpy/data/scheme.py": {
        "first_ex": {
            "name": "first_ex",
            "location": 30,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "Callable"
                ],
                "arg2": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "custom_test": {
            "name": "custom_test",
            "location": 61,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "ExerciseClass.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "description": [
                    "str",
                    "List",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "ExerciseClass.method_one": {
            "name": "method_one",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ExerciseClass.method_two": {
            "name": "method_two",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other_name": [
                    "str"
                ]
            }
        }
    },
    "markingpy-master/tests/__init__.py": {},
    "markingpy-master/tests/func/test_full.py": {
        "function_exercise": {
            "name": "function_exercise",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "class_exercise": {
            "name": "class_exercise",
            "location": 39,
            "return": [
                "cls_ex",
                "Union[str,List]",
                "int",
                "Set",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "submission1": {
            "name": "submission1",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "submission2": {
            "name": "submission2",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "finder": {
            "name": "finder",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "submission1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "submission2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "markscheme": {
            "name": "markscheme",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ],
                "function_exercise": [
                    "bool",
                    "str"
                ],
                "class_exercise": [
                    "str",
                    "Callable"
                ],
                "finder": [
                    "Dict",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_grader": {
            "name": "test_grader",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "markscheme": [
                    "str"
                ]
            }
        },
        "function_exercise.fn_ex": {
            "name": "fn_ex",
            "location": 31,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "class_exercise.cls_ex.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "no": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "T",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "class_exercise.cls_ex.meth": {
            "name": "meth",
            "location": 47,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        }
    },
    "markingpy-master/tests/func/test_syntax_checkers.py": {
        "submission": {
            "name": "submission",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_syntax_checker": {
            "name": "test_syntax_checker",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "submission": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "markingpy-master/tests/func/__init__.py": {},
    "markingpy-master/tests/unit/test_base_test.py": {
        "concrete_base": {
            "name": "concrete_base",
            "location": 43,
            "return": [
                "ConcreteBaseTest",
                "IO",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "test_get_name": {
            "name": "test_get_name",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "str"
                ]
            }
        },
        "test_common_attributes": {
            "name": "test_common_attributes",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "bytes",
                    "int",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "test_create_test": {
            "name": "test_create_test",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "str",
                    "Dict",
                    "int",
                    "Optional[Type[Exception]]",
                    "Type",
                    "None"
                ]
            }
        },
        "test_get_success": {
            "name": "test_get_success",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "Dict[str,Any]"
                ]
            }
        },
        "test_get_marks": {
            "name": "test_get_marks",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "Optional[Dict]",
                    "Dict",
                    "str",
                    "Type",
                    "None",
                    "Type[T]"
                ]
            }
        },
        "test_format_error": {
            "name": "test_format_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "test_format_warnings": {
            "name": "test_format_warnings",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_format_stdout": {
            "name": "test_format_stdout",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "bool",
                    "memoryview",
                    "Callable",
                    "IO[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_format_feedback": {
            "name": "test_format_feedback",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": []
            }
        },
        "test_format_feedback_with_warns_and_errors": {
            "name": "test_format_feedback_with_warns_and_errors",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "concrete_base": [
                    "unittesmock.MagicMock",
                    "dict"
                ]
            }
        },
        "ConcreteBaseTest.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "List[str]",
                    "Union[Callable,Type]",
                    "Type",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "ConcreteBaseTest.create_test": {
            "name": "create_test",
            "location": 38,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "bool",
                    "Union[Callable,Type]",
                    "Dict",
                    "Type"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/test_cases.py": {
        "call": {
            "name": "call",
            "location": 34,
            "return": [
                "Call"
            ],
            "arguments": {}
        },
        "call_test_m": {
            "name": "call_test_m",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_call_test_setup_common_attributes": {
            "name": "test_call_test_setup_common_attributes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        },
        "test_call_parameters_correctly_set": {
            "name": "test_call_parameters_correctly_set",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": [
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_create_test_execution_context": {
            "name": "test_create_test_execution_context",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": [
                    "str"
                ]
            }
        },
        "test_running_of_test_method": {
            "name": "test_running_of_test_method",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": []
            }
        },
        "test_running_of_test_method_bad_function": {
            "name": "test_running_of_test_method_bad_function",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": []
            }
        },
        "test_call_test_run_with_print": {
            "name": "test_call_test_run_with_print",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": [
                    "Callable",
                    "Optional[Mapping]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "test_call_test_run_through_call": {
            "name": "test_call_test_run_through_call",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_m": [
                    "Tuple[str]",
                    "Set",
                    "Union[int,str]",
                    "int",
                    "str"
                ]
            }
        },
        "timing_test_m": {
            "name": "timing_test_m",
            "location": 131,
            "return": [
                "str",
                "Callable",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "test_timing_test_setup_common_attributes": {
            "name": "test_timing_test_setup_common_attributes",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "timing_test_m": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_timing_test_specific_attributes": {
            "name": "test_timing_test_specific_attributes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "timing_test_m": [
                    "List",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_timing_test_create_execution_context": {
            "name": "test_timing_test_create_execution_context",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "timing_test_m": [
                    "str"
                ]
            }
        },
        "test_timing_test_running": {
            "name": "test_timing_test_running",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "timing_test_m": []
            }
        },
        "test_timing_test_function_exception": {
            "name": "test_timing_test_function_exception",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "timing_test_m": [
                    "Callable"
                ]
            }
        },
        "custom_test_m": {
            "name": "custom_test_m",
            "location": 197,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_custom_test_setup_common_attributes": {
            "name": "test_custom_test_setup_common_attributes",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_test_m": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "test_custom_test_create_execution_context": {
            "name": "test_custom_test_create_execution_context",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_test_m": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "float"
                ]
            }
        },
        "test_custom_test_run_test_good_func": {
            "name": "test_custom_test_run_test_good_func",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_test_m": [
                    "str"
                ]
            }
        },
        "call_test_func": {
            "name": "call_test_func",
            "location": 251,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_call_test_running_funcs": {
            "name": "test_call_test_running_funcs",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "call_test_func": [
                    "str",
                    "bool"
                ]
            }
        },
        "mock_exercise_func": {
            "name": "mock_exercise_func",
            "location": 280,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "mock_submission_func": {
            "name": "mock_submission_func",
            "location": 285,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "mock_function_exercise": {
            "name": "mock_function_exercise",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "mock_exercise_func": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "mock_execution_context": {
            "name": "mock_execution_context",
            "location": 297,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_call_test_expected_error_get_success": {
            "name": "test_call_test_expected_error_get_success",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_execution_context": [
                    "mock.MagicMock"
                ],
                "mock_function_exercise": []
            }
        },
        "call_test_m.test_func": {
            "name": "test_func",
            "location": 42,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_running_of_test_method.other": {
            "name": "other",
            "location": 72,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "test_running_of_test_method_bad_function.other": {
            "name": "other",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "test_call_test_run_with_print.other": {
            "name": "other",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "test_call_test_run_through_call.other": {
            "name": "other",
            "location": 122,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "timing_test_m.test_func": {
            "name": "test_func",
            "location": 134,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_timing_test_running.other": {
            "name": "other",
            "location": 168,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "test_timing_test_function_exception.other": {
            "name": "other",
            "location": 183,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": []
            }
        },
        "custom_test_m.test_func": {
            "name": "test_func",
            "location": 200,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "custom_test_m.custom_func": {
            "name": "custom_func",
            "location": 203,
            "return": [
                "bool",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "test_custom_test_run_test_good_func.other": {
            "name": "other",
            "location": 227,
            "return": [
                "Text",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "input": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_custom_test_run_test_good_func.wrapper": {
            "name": "wrapper",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "call_test_func.test_func": {
            "name": "test_func",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "bytes"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/test_compiler.py": {
        "TestCompiler.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.test_compile_good_code": {
            "name": "test_compile_good_code",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.test_compile_malformed_code": {
            "name": "test_compile_malformed_code",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.test_function_with_extra_whitespace": {
            "name": "test_function_with_extra_whitespace",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markingpy-master/tests/unit/test_exercise.py": {
        "call": {
            "name": "call",
            "location": 37,
            "return": [
                "Call"
            ],
            "arguments": {}
        },
        "no_add_exercises": {
            "name": "no_add_exercises",
            "location": 42,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "ex_no_args": {
            "name": "ex_no_args",
            "location": 48,
            "return": [
                "bool",
                "Optional[Any]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "no_add_exercises": [
                    "bool",
                    "Iterable[str]",
                    "Exception",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "ex_with_args": {
            "name": "ex_with_args",
            "location": 59,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "no_add_exercises": [
                    "bool",
                    "Iterable[str]",
                    "int",
                    "Optional[str]",
                    "tuple",
                    "dict"
                ]
            }
        },
        "test_created_exercise_attributes": {
            "name": "test_created_exercise_attributes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_no_args": [
                    "dict"
                ]
            }
        },
        "test_exercise_change_function": {
            "name": "test_exercise_change_function",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_no_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_ex_with_args_attributes": {
            "name": "test_ex_with_args_attributes",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_with_args": [
                    "IO[str]"
                ]
            }
        },
        "test_adding_tests_to_ex": {
            "name": "test_adding_tests_to_ex",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_with_args": [
                    "Exception"
                ]
            }
        },
        "test_ex_add_bad_timing_tests": {
            "name": "test_ex_add_bad_timing_tests",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "ex_with_args": [
                    "dict",
                    "str"
                ]
            }
        },
        "ex_with_component": {
            "name": "ex_with_component",
            "location": 145,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "no_add_exercises": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_running_of_test_components_success": {
            "name": "test_running_of_test_components_success",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_with_component": []
            }
        },
        "test_running_of_test_components_fail": {
            "name": "test_running_of_test_components_fail",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "ex_with_component": []
            }
        },
        "randbetween": {
            "name": "randbetween",
            "location": 180,
            "return": [
                "bytearray",
                "Tuple[Any, Any, Any]",
                "float",
                "Tuple[str, List[str]]",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "calltest_cases": {
            "name": "calltest_cases",
            "location": 185,
            "return": [
                "List[str]",
                "Dict[str, Dict[str, int]]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "multiple_test_abs_ex": {
            "name": "multiple_test_abs_ex",
            "location": 204,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "calltest_cases": [
                    "bool",
                    "Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "test_many_call_tests_ex": {
            "name": "test_many_call_tests_ex",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "calltest_cases": [],
                "multiple_test_abs_ex": []
            }
        },
        "exercise_target": {
            "name": "exercise_target",
            "location": 246,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "exercise_fixture": {
            "name": "exercise_fixture",
            "location": 251,
            "return": [
                "str",
                "int",
                "type"
            ],
            "arguments": {
                "exercise_target": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_common_attributes": {
            "name": "test_common_attributes",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [
                    "str"
                ]
            }
        },
        "test_get_name": {
            "name": "test_get_name",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [
                    "str"
                ],
                "exercise_target": [
                    "dict"
                ]
            }
        },
        "test_unlocked_exercise_call_record": {
            "name": "test_unlocked_exercise_call_record",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [
                    "int"
                ]
            }
        },
        "test_exercise_lock": {
            "name": "test_exercise_lock",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [
                    "str",
                    "float"
                ],
                "exercise_target": [
                    "str",
                    "float"
                ]
            }
        },
        "test_total_marks_property": {
            "name": "test_total_marks_property",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": []
            }
        },
        "test_exercise_validation": {
            "name": "test_exercise_validation",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [],
                "exercise_target": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_submission_func": {
            "name": "test_get_submission_func",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": []
            }
        },
        "test_custom_test_decorator": {
            "name": "test_custom_test_decorator",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise_fixture": [
                    "str"
                ]
            }
        },
        "ex_no_args.test_func": {
            "name": "test_func",
            "location": 51,
            "return": [
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "float",
                    "int"
                ],
                "b": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ex_with_args.test": {
            "name": "test",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_exercise_change_function.other": {
            "name": "other",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_adding_tests_to_ex.t3": {
            "name": "t3",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_adding_tests_to_ex.t4": {
            "name": "t4",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_adding_tests_to_ex.fun": {
            "name": "fun",
            "location": 122,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "ex_with_component.test": {
            "name": "test",
            "location": 148,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "multiple_test_abs_ex.abs": {
            "name": "abs",
            "location": 207,
            "return": [
                "int",
                "float",
                "str",
                "Type",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "list",
                    "int"
                ]
            }
        },
        "test_many_call_tests_ex.bs": {
            "name": "bs",
            "location": 233,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "list"
                ]
            }
        },
        "test_get_submission_func.mck": {
            "name": "mck",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "test_custom_test_decorator.func": {
            "name": "func",
            "location": 324,
            "return": [],
            "arguments": {}
        }
    },
    "markingpy-master/tests/unit/test_grader.py": {},
    "markingpy-master/tests/unit/test_interactionExercise.py": {
        "inter_ex": {
            "name": "inter_ex",
            "location": 25,
            "return": [
                "int",
                "str",
                "Callable",
                "Tuple[Union[str,Any]]",
                "Type",
                "List"
            ],
            "arguments": {}
        },
        "test_object_call_behaviour": {
            "name": "test_object_call_behaviour",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_ex": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_creation_of_interaction_test_object": {
            "name": "test_creation_of_interaction_test_object",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_ex": []
            }
        },
        "inter_ex.DummyClass.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "bool"
                ],
                "b": [
                    "int",
                    "str",
                    "bool"
                ],
                "kw": [
                    "None",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "inter_ex.DummyClass.method": {
            "name": "method",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_to": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/test_interactionTest.py": {
        "dummy_class": {
            "name": "dummy_class",
            "location": 25,
            "return": [
                "DummyClass",
                "Callable[...,T]",
                "str",
                "Exception",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "inter_tst": {
            "name": "inter_tst",
            "location": 41,
            "return": [
                "bool",
                "List[tuple[Union[str,str,str,str,Any]]]",
                "str",
                "List[str]",
                "Union[int,float,complex]",
                "Tuple[tuple[Union[Literal,Literal,Literal]]]",
                "Tuple[int,int]",
                "float",
                "Dict[str,int]"
            ],
            "arguments": {
                "dummy_class": [
                    "Type",
                    "int",
                    "str"
                ]
            }
        },
        "test_create_proxy_ns": {
            "name": "test_create_proxy_ns",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": []
            }
        },
        "test_create_instance_proxy": {
            "name": "test_create_instance_proxy",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": [
                    "str"
                ]
            }
        },
        "test_success_criterion": {
            "name": "test_success_criterion",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": [
                    "str",
                    "float"
                ]
            }
        },
        "test_create_test": {
            "name": "test_create_test",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": [
                    "ExecutionContext",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_get_success": {
            "name": "test_get_success",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "inter_tst": [
                    "Dict[str,Sequence[str]]",
                    "str"
                ],
                "dummy_class": [
                    "str"
                ]
            }
        },
        "test_success_criterion.sc": {
            "name": "sc",
            "location": 68,
            "return": [
                "bool",
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_success_criterion.sc2": {
            "name": "sc2",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_success_criterion.sc3": {
            "name": "sc3",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_success_criterion.sc4": {
            "name": "sc4",
            "location": 98,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_success_criterion.sc5": {
            "name": "sc5",
            "location": 108,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_run.other": {
            "name": "other",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "deque",
                    "int"
                ]
            }
        },
        "dummy_class.DummyClass.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ],
                "kw": [
                    "None",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "dummy_class.DummyClass.method": {
            "name": "method",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repl": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/test_markscheme.py": {
        "ms": {
            "name": "ms",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_markscheme_update_config": {
            "name": "test_markscheme_update_config",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "ms": [
                    "int"
                ]
            }
        },
        "test_markscheme_score_formatter": {
            "name": "test_markscheme_score_formatter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "ms": [
                    "Union[int,float]",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/test_method_tests.py": {
        "mock_ex": {
            "name": "mock_ex",
            "location": 30,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "mock_subms": {
            "name": "mock_subms",
            "location": 40,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "method_call": {
            "name": "method_call",
            "location": 49,
            "return": [
                "str",
                "Iterable[T]",
                "float",
                "List",
                "int",
                "List[str]"
            ],
            "arguments": {
                "mock_ex": [
                    "str",
                    "Dict",
                    "bool",
                    "bytes",
                    "kata.data.io.network.GithubApi"
                ]
            }
        },
        "test_method_test_setup": {
            "name": "test_method_test_setup",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ex": [],
                "method_call": [
                    "Generator[Union[None,Any,None]]",
                    "Generator[None,Any,None]",
                    "mock.MagicMock"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ex": [
                    "mock.Mock"
                ],
                "mock_subms": [
                    "Dict[str, Any]"
                ],
                "method_call": []
            }
        },
        "patched_timer": {
            "name": "patched_timer",
            "location": 86,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "method_timing": {
            "name": "method_timing",
            "location": 96,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "mock_ex": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "IO[bytes]",
                    "None",
                    "IO"
                ],
                "patched_timer": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_method_timing_setup": {
            "name": "test_method_timing_setup",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ex": [],
                "method_timing": []
            }
        },
        "test_run_timing_test_component": {
            "name": "test_run_timing_test_component",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ex": [],
                "method_timing": [
                    "io.BytesIO"
                ],
                "patched_timer": []
            }
        },
        "patched_timer.timer": {
            "name": "timer",
            "location": 88,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "markingpy-master/tests/unit/test_submission.py": {
        "TestStyleCalculator.test_style_calc_builder": {
            "name": "test_style_calc_builder",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.test_compilation_of_source": {
            "name": "test_compilation_of_source",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.test_compilation_tab_error": {
            "name": "test_compilation_tab_error",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.test_generate_report_no_compile": {
            "name": "test_generate_report_no_compile",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.test_generate_report_no_score": {
            "name": "test_generate_report_no_score",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmissionClass.test_generation_of_report": {
            "name": "test_generation_of_report",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markingpy-master/tests/unit/test_syntax.py": {
        "submission1": {
            "name": "submission1",
            "location": 29,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "messages": {
            "name": "messages",
            "location": 35,
            "return": [
                "List[dict[Text,Union[Text,int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_pylint_report_get_stats": {
            "name": "test_pylint_report_get_stats",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "messages": []
            }
        },
        "test_pylint_report_get_text_report": {
            "name": "test_pylint_report_get_text_report",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "messages": []
            }
        },
        "test_pylint_report_calc_score_default": {
            "name": "test_pylint_report_calc_score_default",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pylint_report_calc_score_custom": {
            "name": "test_pylint_report_calc_score_custom",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pylint_checker_init": {
            "name": "test_pylint_checker_init",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pylint_checker_init_overwrite_output": {
            "name": "test_pylint_checker_init_overwrite_output",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pylint_checker_prepare_file_setup": {
            "name": "test_pylint_checker_prepare_file_setup",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "submission1": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_pylint_checker_check_file_call": {
            "name": "test_pylint_checker_check_file_call",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "submission1": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_pylint_checker_check_file_call.mock_prepare": {
            "name": "mock_prepare",
            "location": 128,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "sub": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "markingpy-master/tests/unit/__init__.py": {}
}
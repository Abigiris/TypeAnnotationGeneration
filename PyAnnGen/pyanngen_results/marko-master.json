{
    "marko-master/noxfile.py": {
        "tests": {
            "name": "tests",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "benchmark": {
            "name": "benchmark",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        }
    },
    "marko-master/setup.py": {},
    "marko-master/docs/conf.py": {},
    "marko-master/marko/ast_renderer.py": {
        "ASTRenderer.render_raw_text": {
            "name": "render_raw_text",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.RawText"
                ]
            }
        },
        "ASTRenderer.render_children": {
            "name": "render_children",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str"
                ]
            }
        },
        "XMLRenderer.__enter__": {
            "name": "__enter__",
            "location": 86,
            "return": [
                "XMLRenderer"
            ],
            "arguments": {
                "self": [
                    "_TXMLRenderer"
                ]
            }
        },
        "XMLRenderer.__exit__": {
            "name": "__exit__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLRenderer.render_children": {
            "name": "render_children",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "marko.element.Element"
                ]
            }
        }
    },
    "marko-master/marko/block.py": {
        "BlockElement.match": {
            "name": "match",
            "location": 46,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [
                    "Type[BlockElement]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "BlockElement.parse": {
            "name": "parse",
            "location": 55,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [
                    "Type[BlockElement]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "BlockElement.parse_inline": {
            "name": "parse_inline",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockElement.__lt__": {
            "name": "__lt__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "BlockElement"
                ]
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BlankLine.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "BlankLine.match": {
            "name": "match",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "BlankLine.parse": {
            "name": "parse",
            "location": 109,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Heading.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Match"
                ]
            }
        },
        "Heading.match": {
            "name": "match",
            "location": 131,
            "return": [
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "re.Match[str]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "Set[str]",
                    "Tuple[Any, Any, Any]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Heading.parse": {
            "name": "parse",
            "location": 135,
            "return": [
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "SetextHeading.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "typing.List[str]"
                ]
            }
        },
        "CodeBlock.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str"
                ]
            }
        },
        "CodeBlock.match": {
            "name": "match",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "CodeBlock.parse": {
            "name": "parse",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Dict[str, Any]",
                    "breakfassource.Source",
                    "float",
                    "str"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "CodeBlock.strip_prefix": {
            "name": "strip_prefix",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "FencedCode.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Tuple[(str, str, str)]"
                ]
            }
        },
        "FencedCode.match": {
            "name": "match",
            "location": 227,
            "return": [
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "xml_parsers.Parser",
                    "type"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "FencedCode.parse": {
            "name": "parse",
            "location": 239,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "ThematicBreak.match": {
            "name": "match",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Union[str, bytes, IO[bytes]]",
                    "typing.IO",
                    "Union[str, bytes]",
                    "Literal"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "ThematicBreak.parse": {
            "name": "parse",
            "location": 275,
            "return": [
                "hematicBreak"
            ],
            "arguments": {
                "cls": [
                    "Type[_TThematicBreak]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "HTMLBlock.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str"
                ]
            }
        },
        "HTMLBlock.match": {
            "name": "match",
            "location": 290,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "HTMLBlock.parse": {
            "name": "parse",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "int",
                    "Optional[bytes]",
                    "None",
                    "Hashable",
                    "bytes",
                    "Set[str]",
                    "typing.Hashable",
                    "Optional[float]",
                    "set[str]",
                    "float"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Paragraph.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "typing.List[str]"
                ]
            }
        },
        "Paragraph.match": {
            "name": "match",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Paragraph.is_setext_heading": {
            "name": "is_setext_heading",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "Paragraph.break_paragraph": {
            "name": "break_paragraph",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[\"Node\"]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "source": [
                    "marko.helpers.Source"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "Paragraph.parse": {
            "name": "parse",
            "location": 391,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "breakfassource.Source"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Quote.match": {
            "name": "match",
            "location": 430,
            "return": [
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "Quote.parse": {
            "name": "parse",
            "location": 434,
            "return": [
                "Quote"
            ],
            "arguments": {
                "cls": [
                    "Type[_TQuote]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.match": {
            "name": "match",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "None",
                    "Optional[\"Node\"]",
                    "xml_parsers.Parser",
                    "Optional[Source]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "List.parse": {
            "name": "parse",
            "location": 466,
            "return": [
                "List"
            ],
            "arguments": {
                "cls": [
                    "Type[_TList]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "ListItem.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItem.parse_leading": {
            "name": "parse_leading",
            "location": 515,
            "return": [
                "Tuple[(int, str, int, str)]"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ],
                "line": [
                    "str"
                ],
                "prefix_pos": [
                    "int"
                ]
            }
        },
        "ListItem.match": {
            "name": "match",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "ListItem.parse": {
            "name": "parse",
            "location": 558,
            "return": [
                "ListItem"
            ],
            "arguments": {
                "cls": [
                    "Type[_TListItem]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "LinkRefDef.match": {
            "name": "match",
            "location": 588,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "None",
                    "breakfassource.Source",
                    "dict[str, str]",
                    "Optional[Source]",
                    "Dict[str, str]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        },
        "LinkRefDef.parse": {
            "name": "parse",
            "location": 609,
            "return": [
                "LinkRefDef"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLinkRefDef]"
                ],
                "source": [
                    "marko.helpers.Source"
                ]
            }
        }
    },
    "marko-master/marko/cli.py": {
        "import_class": {
            "name": "import_class",
            "location": 11,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "import_string": [
                    "str",
                    "NamedTuple",
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 25,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "marko-master/marko/element.py": {
        "Element.get_type": {
            "name": "get_type",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "snake_case": [
                    "bool"
                ]
            }
        }
    },
    "marko-master/marko/helpers.py": {
        "camel_to_snake_case": {
            "name": "camel_to_snake_case",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_paired": {
            "name": "is_paired",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "open": [
                    "str"
                ],
                "close": [
                    "str"
                ]
            }
        },
        "_preprocess_text": {
            "name": "_preprocess_text",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_label": {
            "name": "normalize_label",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "load_extension_object": {
            "name": "load_extension_object",
            "location": 190,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Source.state": {
            "name": "state",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.root": {
            "name": "root",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.push_state": {
            "name": "push_state",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "marko.block.BlockElement"
                ]
            }
        },
        "Source.pop_state": {
            "name": "pop_state",
            "location": 83,
            "return": [
                "marko.block.BlockElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.under_state": {
            "name": "under_state",
            "location": 88,
            "return": [
                "typing.Generator[\"Source\", None, None]",
                "typing.Generator[Source]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Source.exhausted": {
            "name": "exhausted",
            "location": 95,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.prefix": {
            "name": "prefix",
            "location": 100,
            "return": [
                "str",
                "List[str]",
                "List[Tuple[int, str, str]]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source._expect_re": {
            "name": "_expect_re",
            "location": 104,
            "return": [
                "Optional[Match[str]]"
            ],
            "arguments": {
                "self": [],
                "regexp": [
                    "Union[(str, Pattern[str])]"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "Source.match_prefix": {
            "name": "match_prefix",
            "location": 113,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "Optional[Callable[[Any, Any], None]]",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ],
                "line": [
                    "List[str]",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Source.expect_re": {
            "name": "expect_re",
            "location": 131,
            "return": [
                "Optional[Match[str]]"
            ],
            "arguments": {
                "self": [],
                "regexp": [
                    "Union[(str, Pattern[str])]"
                ]
            }
        },
        "Source.next_line": {
            "name": "next_line",
            "location": 147,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "require_prefix": [
                    "bool"
                ]
            }
        },
        "Source.consume": {
            "name": "consume",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.anchor": {
            "name": "anchor",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.reset": {
            "name": "reset",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source._update_prefix": {
            "name": "_update_prefix",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marko-master/marko/html_renderer.py": {
        "HTMLRenderer.render_paragraph": {
            "name": "render_paragraph",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Paragraph"
                ]
            }
        },
        "HTMLRenderer.render_list": {
            "name": "render_list",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.List"
                ]
            }
        },
        "HTMLRenderer.render_list_item": {
            "name": "render_list_item",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.ListItem"
                ]
            }
        },
        "HTMLRenderer.render_quote": {
            "name": "render_quote",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Quote"
                ]
            }
        },
        "HTMLRenderer.render_fenced_code": {
            "name": "render_fenced_code",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.FencedCode"
                ]
            }
        },
        "HTMLRenderer.render_code_block": {
            "name": "render_code_block",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.CodeBlock"
                ]
            }
        },
        "HTMLRenderer.render_html_block": {
            "name": "render_html_block",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.HTMLBlock"
                ]
            }
        },
        "HTMLRenderer.render_thematic_break": {
            "name": "render_thematic_break",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.ThematicBreak"
                ]
            }
        },
        "HTMLRenderer.render_heading": {
            "name": "render_heading",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Heading"
                ]
            }
        },
        "HTMLRenderer.render_setext_heading": {
            "name": "render_setext_heading",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.SetextHeading"
                ]
            }
        },
        "HTMLRenderer.render_blank_line": {
            "name": "render_blank_line",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.BlankLine"
                ]
            }
        },
        "HTMLRenderer.render_link_ref_def": {
            "name": "render_link_ref_def",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.LinkRefDef"
                ]
            }
        },
        "HTMLRenderer.render_emphasis": {
            "name": "render_emphasis",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Emphasis"
                ]
            }
        },
        "HTMLRenderer.render_strong_emphasis": {
            "name": "render_strong_emphasis",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.StrongEmphasis"
                ]
            }
        },
        "HTMLRenderer.render_inline_html": {
            "name": "render_inline_html",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.InlineHTML"
                ]
            }
        },
        "HTMLRenderer.render_plain_text": {
            "name": "render_plain_text",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "str",
                    "IO[bytes]",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "HTMLRenderer.render_link": {
            "name": "render_link",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Link"
                ]
            }
        },
        "HTMLRenderer.render_auto_link": {
            "name": "render_auto_link",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.AutoLink"
                ]
            }
        },
        "HTMLRenderer.render_image": {
            "name": "render_image",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Image"
                ]
            }
        },
        "HTMLRenderer.render_literal": {
            "name": "render_literal",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Literal"
                ]
            }
        },
        "HTMLRenderer.render_raw_text": {
            "name": "render_raw_text",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.RawText"
                ]
            }
        },
        "HTMLRenderer.render_line_break": {
            "name": "render_line_break",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.LineBreak"
                ]
            }
        },
        "HTMLRenderer.render_code_span": {
            "name": "render_code_span",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.CodeSpan"
                ]
            }
        },
        "HTMLRenderer.escape_html": {
            "name": "escape_html",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "raw": [
                    "str"
                ]
            }
        },
        "HTMLRenderer.escape_url": {
            "name": "escape_url",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "raw": [
                    "str"
                ]
            }
        }
    },
    "marko-master/marko/inline.py": {
        "InlineElement.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "InlineElement.find": {
            "name": "find",
            "location": 54,
            "return": [
                "Iterator[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "List[Union[str, Any]]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Literal.strip_backslash": {
            "name": "strip_backslash",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "LineBreak.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "LinkOrEmph.__new__": {
            "name": "__new__",
            "location": 106,
            "return": [
                "LinkOrEmph"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "SupportsFloat",
                    "int",
                    "typing.Deque",
                    "Deque[int]"
                ],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "LinkOrEmph.find": {
            "name": "find",
            "location": 110,
            "return": [
                "Iterator[Match]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "Image.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "CodeSpan.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "AutoLink.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(inline_parser.MatchObj, Match[str])]"
                ]
            }
        },
        "RawText.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str"
                ],
                "escape": [
                    "bool"
                ]
            }
        }
    },
    "marko-master/marko/inline_parser.py": {
        "parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "List[marko.inline.InlineElement]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "elements": [
                    "List[Type[marko.inline.InlineElement]]"
                ],
                "fallback": [
                    "Type[marko.inline.InlineElement]"
                ]
            }
        },
        "_resolve_overlap": {
            "name": "_resolve_overlap",
            "location": 39,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "tokens": [
                    "List[Token]"
                ]
            }
        },
        "make_elements": {
            "name": "make_elements",
            "location": 57,
            "return": [
                "List[marko.inline.InlineElement]"
            ],
            "arguments": {
                "tokens": [
                    "List[Token]"
                ],
                "text": [
                    "str"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "Optional[int]"
                ],
                "fallback": [
                    "Type[marko.inline.InlineElement]"
                ]
            }
        },
        "find_links_or_emphs": {
            "name": "find_links_or_emphs",
            "location": 151,
            "return": [
                "List[MatchObj]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "root_node": [
                    "marko.block.Document"
                ]
            }
        },
        "look_for_image_or_link": {
            "name": "look_for_image_or_link",
            "location": 192,
            "return": [
                "Optional[MatchObj]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "delimiters": [
                    "List[Delimiter]"
                ],
                "close": [
                    "int"
                ],
                "root_node": [
                    "marko.block.Document"
                ],
                "matches": [
                    "List[MatchObj]"
                ]
            }
        },
        "_is_legal_link_text": {
            "name": "_is_legal_link_text",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_expect_inline_link": {
            "name": "_expect_inline_link",
            "location": 234,
            "return": [
                "Optional[Tuple[(Tuple[(int, int, Optional[str])], Tuple[(int, int, Optional[str])], int)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "_expect_reference_link": {
            "name": "_expect_reference_link",
            "location": 283,
            "return": [
                "Optional[Tuple[(Tuple[(int, int, Optional[str])], Tuple[(int, int, Optional[str])], int)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "start": [
                    "int"
                ],
                "link_text": [
                    "str"
                ],
                "root_node": [
                    "marko.block.Document"
                ]
            }
        },
        "_get_reference_link": {
            "name": "_get_reference_link",
            "location": 298,
            "return": [
                "Optional[Tuple[(str, str)]]"
            ],
            "arguments": {
                "link_label": [
                    "str"
                ],
                "root_node": [
                    "marko.block.Document"
                ]
            }
        },
        "process_emphasis": {
            "name": "process_emphasis",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "delimiters": [
                    "List[Delimiter]"
                ],
                "stack_bottom": [
                    "Optional[int]"
                ],
                "matches": [
                    "List[MatchObj]"
                ]
            }
        },
        "_next_closer": {
            "name": "_next_closer",
            "location": 349,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "delimiters": [
                    "List[Delimiter]"
                ],
                "bound": [
                    "Optional[int]"
                ]
            }
        },
        "_nearest_opener": {
            "name": "_nearest_opener",
            "location": 359,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "delimiters": [
                    "List[Delimiter]"
                ],
                "higher": [
                    "int"
                ],
                "lower": [
                    "Optional[int]"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "Type[marko.inline.InlineElement]"
                ],
                "match": [
                    "Union[(MatchObj, Match[str])]"
                ],
                "text": [
                    "str"
                ],
                "fallback": [
                    "Type[marko.inline.InlineElement]"
                ]
            }
        },
        "Token.relation": {
            "name": "relation",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Token"
                ]
            }
        },
        "Token.append_child": {
            "name": "append_child",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Token"
                ]
            }
        },
        "Token.as_element": {
            "name": "as_element",
            "location": 129,
            "return": [
                "marko.inline.InlineElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__lt__": {
            "name": "__lt__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Token"
                ]
            }
        },
        "Delimiter.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Union[(MatchObj, Match[str])]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Delimiter._can_open": {
            "name": "_can_open",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter._can_close": {
            "name": "_can_close",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter.is_left_flanking": {
            "name": "is_left_flanking",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter.is_right_flanking": {
            "name": "is_right_flanking",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter.followed_by_punc": {
            "name": "followed_by_punc",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter.preceded_by_punc": {
            "name": "preceded_by_punc",
            "location": 427,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delimiter.closed_by": {
            "name": "closed_by",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Delimiter"
                ]
            }
        },
        "Delimiter.remove": {
            "name": "remove",
            "location": 441,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "left": [
                    "bool"
                ]
            }
        },
        "Delimiter.__repr__": {
            "name": "__repr__",
            "location": 451,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchObj.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "MatchObj.group": {
            "name": "group",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "MatchObj.start": {
            "name": "start",
            "location": 474,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "MatchObj.end": {
            "name": "end",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "marko-master/marko/md_renderer.py": {
        "MarkdownRenderer.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "MarkdownRenderer"
            ],
            "arguments": {
                "self": [
                    "_TMarkdownRenderer"
                ]
            }
        },
        "MarkdownRenderer.container": {
            "name": "container",
            "location": 28,
            "return": [
                "typing.Generator[None, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "bool"
                ],
                "second_prefix": [
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "int"
                ]
            }
        },
        "MarkdownRenderer.render_paragraph": {
            "name": "render_paragraph",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Paragraph"
                ]
            }
        },
        "MarkdownRenderer.render_list": {
            "name": "render_list",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.List"
                ]
            }
        },
        "MarkdownRenderer.render_list_item": {
            "name": "render_list_item",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.ListItem"
                ]
            }
        },
        "MarkdownRenderer.render_quote": {
            "name": "render_quote",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Quote"
                ]
            }
        },
        "MarkdownRenderer.render_fenced_code": {
            "name": "render_fenced_code",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.FencedCode"
                ]
            }
        },
        "MarkdownRenderer.render_code_block": {
            "name": "render_code_block",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.CodeBlock"
                ]
            }
        },
        "MarkdownRenderer.render_html_block": {
            "name": "render_html_block",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.HTMLBlock"
                ]
            }
        },
        "MarkdownRenderer.render_thematic_break": {
            "name": "render_thematic_break",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.ThematicBreak"
                ]
            }
        },
        "MarkdownRenderer.render_heading": {
            "name": "render_heading",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.Heading"
                ]
            }
        },
        "MarkdownRenderer.render_setext_heading": {
            "name": "render_setext_heading",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.SetextHeading"
                ]
            }
        },
        "MarkdownRenderer.render_blank_line": {
            "name": "render_blank_line",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.BlankLine"
                ]
            }
        },
        "MarkdownRenderer.render_link_ref_def": {
            "name": "render_link_ref_def",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "block.LinkRefDef"
                ]
            }
        },
        "MarkdownRenderer.render_emphasis": {
            "name": "render_emphasis",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Emphasis"
                ]
            }
        },
        "MarkdownRenderer.render_strong_emphasis": {
            "name": "render_strong_emphasis",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.StrongEmphasis"
                ]
            }
        },
        "MarkdownRenderer.render_inline_html": {
            "name": "render_inline_html",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.InlineHTML"
                ]
            }
        },
        "MarkdownRenderer.render_link": {
            "name": "render_link",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Link"
                ]
            }
        },
        "MarkdownRenderer.render_auto_link": {
            "name": "render_auto_link",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.AutoLink"
                ]
            }
        },
        "MarkdownRenderer.render_image": {
            "name": "render_image",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Image"
                ]
            }
        },
        "MarkdownRenderer.render_literal": {
            "name": "render_literal",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.Literal"
                ]
            }
        },
        "MarkdownRenderer.render_raw_text": {
            "name": "render_raw_text",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.RawText"
                ]
            }
        },
        "MarkdownRenderer.render_line_break": {
            "name": "render_line_break",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.LineBreak"
                ]
            }
        },
        "MarkdownRenderer.render_code_span": {
            "name": "render_code_span",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "inline.CodeSpan"
                ]
            }
        }
    },
    "marko-master/marko/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.add_element": {
            "name": "add_element",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Type[element.Element]"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 52,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "source_or_text": [
                    "Union[(marko.helpers.Source, AnyStr)]"
                ]
            }
        },
        "Parser.parse_inline": {
            "name": "parse_inline",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Parser._build_block_element_list": {
            "name": "_build_block_element_list",
            "location": 98,
            "return": [
                "List[Type[block.BlockElement]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._build_inline_element_list": {
            "name": "_build_inline_element_list",
            "location": 106,
            "return": [
                "List[Type[inline.InlineElement]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marko-master/marko/patterns.py": {},
    "marko-master/marko/renderer.py": {
        "force_delegate": {
            "name": "force_delegate",
            "location": 90,
            "return": [
                "_F"
            ],
            "arguments": {
                "func": [
                    "_F"
                ]
            }
        },
        "Renderer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderer.__enter__": {
            "name": "__enter__",
            "location": 44,
            "return": [
                "_T"
            ],
            "arguments": {
                "self": [
                    "_T"
                ]
            }
        },
        "Renderer.__exit__": {
            "name": "__exit__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderer.render": {
            "name": "render",
            "location": 53,
            "return": [
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "marko.element.Element"
                ]
            }
        },
        "Renderer.render_children": {
            "name": "render_children",
            "location": 71,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str"
                ]
            }
        }
    },
    "marko-master/marko/__init__.py": {
        "convert": {
            "name": "convert",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 145,
            "return": [
                "marko.block.Document"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "parsed": [
                    "marko.block.Document"
                ]
            }
        },
        "SetupDone.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Type[marko.parser.Parser]"
                ],
                "renderer": [
                    "Type[marko.renderer.Renderer]"
                ],
                "extensions": [
                    "Parser",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Markdown.use": {
            "name": "use",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown._setup_extensions": {
            "name": "_setup_extensions",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.convert": {
            "name": "convert",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Markdown.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Markdown.parse": {
            "name": "parse",
            "location": 114,
            "return": [
                "marko.block.Document"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Markdown.render": {
            "name": "render",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parsed": [
                    "marko.block.Document"
                ]
            }
        }
    },
    "marko-master/marko/__main__.py": {},
    "marko-master/marko/ext/codehilite.py": {
        "_parse_extras": {
            "name": "_parse_extras",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Set[str]",
                    "dict",
                    "list",
                    "List[str]"
                ]
            }
        },
        "make_extension": {
            "name": "make_extension",
            "location": 57,
            "return": [
                "CodeHilite"
            ],
            "arguments": {}
        },
        "CodeHiliteRendererMixin.render_fenced_code": {
            "name": "render_fenced_code",
            "location": 36,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "CodeHilite.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marko-master/marko/ext/footnote.py": {
        "make_extension": {
            "name": "make_extension",
            "location": 111,
            "return": [
                "Footnote"
            ],
            "arguments": {}
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FootnoteDef.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Pattern[str]",
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "FootnoteDef.match": {
            "name": "match",
            "location": 37,
            "return": [
                "List[str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "re.Match[str]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "Set[str]",
                    "Tuple[Any, Any, Any]"
                ],
                "source": [
                    "str",
                    "set[str]",
                    "re.Match[str]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "Set[str]",
                    "Tuple[Any, Any, Any]"
                ]
            }
        },
        "FootnoteDef.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "FootnoteDef"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFootnoteDef]"
                ],
                "source": [
                    "type",
                    "typing.Type"
                ]
            }
        },
        "FootnoteRef.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "FootnoteRef.find": {
            "name": "find",
            "location": 58,
            "return": [
                "Generator[(Match[Union[(bytes, str)]], Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "text": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "FootnoteRendererMixin.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootnoteRendererMixin.render_footnote_ref": {
            "name": "render_footnote_ref",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "List[\"transaction_model.TransactionModel\"]",
                    "list[T]",
                    "Tuple[str, str, int]",
                    "tuple[typing.Union[str,str,int]]"
                ]
            }
        },
        "FootnoteRendererMixin.render_footnote_def": {
            "name": "render_footnote_def",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "str",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "FootnoteRendererMixin._render_footnote_def": {
            "name": "_render_footnote_def",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[int]",
                    "list[int]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FootnoteRendererMixin.render_document": {
            "name": "render_document",
            "location": 95,
            "return": [
                "str",
                "Exception",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "marko-master/marko/ext/latex_renderer.py": {
        "LatexRenderer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatexRenderer.__enter__": {
            "name": "__enter__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatexRenderer.__exit__": {
            "name": "__exit__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatexRenderer.render_document": {
            "name": "render_document",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LatexRenderer.render_paragraph": {
            "name": "render_paragraph",
            "location": 40,
            "return": [
                "str",
                "int",
                "bytes",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "List[int]",
                    "list[int]",
                    "bool"
                ]
            }
        },
        "LatexRenderer.render_blank_line": {
            "name": "render_blank_line",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "LatexRenderer.render_line_break": {
            "name": "render_line_break",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "Dict[int, int]",
                    "dict[int, int]"
                ]
            }
        },
        "LatexRenderer.render_list": {
            "name": "render_list",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "deque",
                    "typing.Deque",
                    "Set[str]",
                    "set[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "LatexRenderer.render_list_item": {
            "name": "render_list_item",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LatexRenderer.render_quote": {
            "name": "render_quote",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LatexRenderer.render_fenced_code": {
            "name": "render_fenced_code",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "Type['AbstractIntegrationConversation']",
                    "typing.Type"
                ]
            }
        },
        "LatexRenderer.render_code_block": {
            "name": "render_code_block",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "LatexRenderer.render_thematic_break": {
            "name": "render_thematic_break",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "str",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "LatexRenderer.render_heading": {
            "name": "render_heading",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional[Any]",
                    "typing.Any",
                    "bytes",
                    "List[str]",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "LatexRenderer.render_setext_heading": {
            "name": "render_setext_heading",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LatexRenderer.render_emphasis": {
            "name": "render_emphasis",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LatexRenderer.render_strong_emphasis": {
            "name": "render_strong_emphasis",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LatexRenderer.render_code_span": {
            "name": "render_code_span",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Set[str]]",
                    "int",
                    "list[set[str]]"
                ]
            }
        },
        "LatexRenderer.render_link": {
            "name": "render_link",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "float",
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "LatexRenderer.render_auto_link": {
            "name": "render_auto_link",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "LatexRenderer.render_link_ref_def": {
            "name": "render_link_ref_def",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LatexRenderer.render_image": {
            "name": "render_image",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "str",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "LatexRenderer.render_html_block": {
            "name": "render_html_block",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[], Any]"
                ]
            }
        },
        "LatexRenderer.render_inline_html": {
            "name": "render_inline_html",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "str",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "LatexRenderer.render_literal": {
            "name": "render_literal",
            "location": 124,
            "return": [
                "str",
                "Type",
                "dict"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Container[int]",
                    "typing.Container"
                ]
            }
        },
        "LatexRenderer.render_raw_text": {
            "name": "render_raw_text",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LatexRenderer._escape_latex": {
            "name": "_escape_latex",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "LatexRenderer._environment": {
            "name": "_environment",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "env_name": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "options": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "marko-master/marko/ext/pangu.py": {
        "make_extension": {
            "name": "make_extension",
            "location": 43,
            "return": [
                "Pangu"
            ],
            "arguments": {}
        },
        "PanguRendererMixin.render_raw_text": {
            "name": "render_raw_text",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": []
            }
        }
    },
    "marko-master/marko/ext/toc.py": {
        "make_extension": {
            "name": "make_extension",
            "location": 85,
            "return": [
                "Toc"
            ],
            "arguments": {
                "openning": [
                    "str",
                    "None",
                    "bool",
                    "Mapping[str, Any]",
                    "float",
                    "List[\"libkol.Item\"]",
                    "typing.Mapping",
                    "int",
                    "list[\"libkol.Item\"]"
                ],
                "closing": [
                    "str",
                    "None",
                    "bool",
                    "Mapping[str, Any]",
                    "float",
                    "List[\"libkol.Item\"]",
                    "typing.Mapping",
                    "int",
                    "list[\"libkol.Item\"]"
                ],
                "item_format": [
                    "str",
                    "None",
                    "bool",
                    "Mapping[str, Any]",
                    "float",
                    "List[\"libkol.Item\"]",
                    "typing.Mapping",
                    "int",
                    "list[\"libkol.Item\"]"
                ]
            }
        },
        "TocRendererMixin.__enter__": {
            "name": "__enter__",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocRendererMixin.render_toc": {
            "name": "render_toc",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "maxdepth": [
                    "bool",
                    "Optional[bool]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "TocRendererMixin.render_heading": {
            "name": "render_heading",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "List[FrozenSet[str]]",
                    "list[frozenset]"
                ]
            }
        },
        "Toc.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "openning": [
                    "str",
                    "None",
                    "MutableMapping[str, Any]",
                    "int",
                    "List[str]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[str]"
                ],
                "closing": [
                    "str",
                    "None",
                    "MutableMapping[str, Any]",
                    "int",
                    "List[str]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "list[str]"
                ],
                "item_format": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "Callable",
                    "List[bytes]",
                    "typing.Callable[, ]",
                    "list[bytes]"
                ]
            }
        }
    },
    "marko-master/marko/ext/__init__.py": {},
    "marko-master/marko/ext/gfm/elements.py": {
        "Paragraph.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "Callable",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "_MatchObj.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "str"
                ],
                "start_shift": [
                    "int",
                    "str"
                ],
                "end_shift": [
                    "int",
                    "tuple",
                    "float"
                ]
            }
        },
        "_MatchObj.start": {
            "name": "start",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bytes"
                ]
            }
        },
        "_MatchObj.end": {
            "name": "end",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "Dict[str, str]",
                    "int",
                    "Dict[int, str]",
                    "str",
                    "Dict[int, Any]"
                ]
            }
        },
        "_MatchObj.group": {
            "name": "group",
            "location": 47,
            "return": [
                "str",
                "BaseException",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "_MatchObj.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, dict]",
                    "int"
                ]
            }
        },
        "Url.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "list",
                    "set",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ]
            }
        },
        "Url.find": {
            "name": "find",
            "location": 74,
            "return": [
                "Generator[(Union[(_MatchObj, Match[str])], Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Table.match": {
            "name": "match",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "float",
                    "Set[str]",
                    "bool"
                ],
                "source": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Table.parse": {
            "name": "parse",
            "location": 128,
            "return": [
                "able"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTable]"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "TableRow.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cells": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TableRow.match": {
            "name": "match",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "float"
                ]
            }
        },
        "TableRow.parse": {
            "name": "parse",
            "location": 191,
            "return": [
                "List[TableCell]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "TableCell.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "marko-master/marko/ext/gfm/__init__.py": {
        "make_extension": {
            "name": "make_extension",
            "location": 96,
            "return": [
                "GFM"
            ],
            "arguments": {}
        },
        "GFMRendererMixin.render_paragraph": {
            "name": "render_paragraph",
            "location": 32,
            "return": [
                "str",
                "dict",
                "int",
                "bytes",
                "float",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[int]",
                    "list[int]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GFMRendererMixin.render_strikethrough": {
            "name": "render_strikethrough",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "GFMRendererMixin.render_inline_html": {
            "name": "render_inline_html",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Iterable[str]",
                    "bytes",
                    "Iterable[str]",
                    "List[int]",
                    "list",
                    "T"
                ]
            }
        },
        "GFMRendererMixin.render_html_block": {
            "name": "render_html_block",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Deque",
                    "str",
                    "deque",
                    "bool",
                    "typing.Match",
                    "Match",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "GFMRendererMixin.render_table": {
            "name": "render_table",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Sequence[typing.Any]",
                    "T",
                    "Sequence[Any]"
                ]
            }
        },
        "GFMRendererMixin.render_table_row": {
            "name": "render_table_row",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "int"
                ]
            }
        },
        "GFMRendererMixin.render_table_cell": {
            "name": "render_table_cell",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        },
        "GFMRendererMixin.render_url": {
            "name": "render_url",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "marko-master/tests/benchmark.py": {
        "benchmark": {
            "name": "benchmark",
            "location": 16,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "Tuple[Tuple[str, str]]",
                    "tuple[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "run_markdown": {
            "name": "run_markdown",
            "location": 37,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "IO",
                    "typing.IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run_mistune": {
            "name": "run_mistune",
            "location": 43,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "IO",
                    "typing.IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run_commonmark": {
            "name": "run_commonmark",
            "location": 49,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "IO",
                    "typing.IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run_marko": {
            "name": "run_marko",
            "location": 55,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "typing.IO",
                    "IO",
                    "Union[str, List[str]]"
                ]
            }
        },
        "run_mistletoe": {
            "name": "run_mistletoe",
            "location": 61,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "List[Callable]",
                    "bytes"
                ]
            }
        },
        "run_markdown_it": {
            "name": "run_markdown_it",
            "location": 67,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "List[Callable]",
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "package_name": [
                    "str"
                ]
            }
        },
        "run_all": {
            "name": "run_all",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "package_names": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "benchmark.decorator": {
            "name": "decorator",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "benchmark.decorator.inner": {
            "name": "inner",
            "location": 18,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {}
        }
    },
    "marko-master/tests/normalize.py": {
        "normalize_html": {
            "name": "normalize_html",
            "location": 188,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "html": [
                    "_T0"
                ]
            }
        },
        "MyHTMLParser.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyHTMLParser.handle_data": {
            "name": "handle_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "T",
                    "Dict[str, str]"
                ]
            }
        },
        "MyHTMLParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MyHTMLParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "attrs": [
                    "list[str]",
                    "str",
                    "list[typing.Optional[bytes]]",
                    "List[str]",
                    "List[Optional[bytes]]",
                    "Set[str]"
                ]
            }
        },
        "MyHTMLParser.handle_startendtag": {
            "name": "handle_startendtag",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool"
                ],
                "attrs": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MyHTMLParser.handle_comment": {
            "name": "handle_comment",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "MyHTMLParser.handle_decl": {
            "name": "handle_decl",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "MyHTMLParser.unknown_decl": {
            "name": "unknown_decl",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "MyHTMLParser.handle_pi": {
            "name": "handle_pi",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "MyHTMLParser.handle_entityref": {
            "name": "handle_entityref",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[Union[str, Any]]"
                ]
            }
        },
        "MyHTMLParser.handle_charref": {
            "name": "handle_charref",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MyHTMLParser.output_char": {
            "name": "output_char",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "fallback": [
                    "str"
                ]
            }
        },
        "MyHTMLParser.is_block_tag": {
            "name": "is_block_tag",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "int",
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Type",
                    "List[str]",
                    "typing.Sequence[str]",
                    "Type[Exception]",
                    "typing.MutableMapping",
                    "Sequence[str]",
                    "MutableMapping[str, str]"
                ]
            }
        }
    },
    "marko-master/tests/test_basic.py": {
        "TestBasic.test_xml_renderer": {
            "name": "test_xml_renderer",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_ast_renderer": {
            "name": "test_ast_renderer",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_ast_renderer_unescape_raw_text": {
            "name": "test_ast_renderer_unescape_raw_text",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_markdown_renderer": {
            "name": "test_markdown_renderer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_use": {
            "name": "test_extension_use",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_setup": {
            "name": "test_extension_setup",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_override": {
            "name": "test_extension_override",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_override_element": {
            "name": "test_extension_override_element",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_override_non_base_element": {
            "name": "test_extension_override_non_base_element",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_with_illegal_element": {
            "name": "test_extension_with_illegal_element",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_no_delegate_render_methods": {
            "name": "test_no_delegate_render_methods",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_extension_override.MyRendererMixin.render_paragraph": {
            "name": "render_paragraph",
            "location": 69,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "tuple",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TestExtension.test_no_delegate_render_methods.RendererMixin.render_paragraph": {
            "name": "render_paragraph",
            "location": 113,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "tuple",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "marko-master/tests/test_ext.py": {
        "TestFootnote.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFootnote.test_footnote": {
            "name": "test_footnote",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFootnote.test_non_footnote": {
            "name": "test_non_footnote",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToc.setup_method": {
            "name": "setup_method",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToc.test_render_toc": {
            "name": "test_render_toc",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToc.test_render_toc_exceeding_maxdepth": {
            "name": "test_render_toc_exceeding_maxdepth",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToc.test_render_toc_replace_tags": {
            "name": "test_render_toc_replace_tags",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPangu.setup_method": {
            "name": "setup_method",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPangu.test_render_pangu": {
            "name": "test_render_pangu",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPangu.test_chinese_punctuations": {
            "name": "test_chinese_punctuations",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGFM.setup_method": {
            "name": "setup_method",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGFM.test_gfm_autolink": {
            "name": "test_gfm_autolink",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodeHilite.setup_method": {
            "name": "setup_method",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodeHilite.test_render_fenced_code": {
            "name": "test_render_fenced_code",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodeHilite.test_render_code_block": {
            "name": "test_render_code_block",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodeHilite.test_codehilite_options": {
            "name": "test_codehilite_options",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodeHilite.test_render_code_block_with_extra": {
            "name": "test_render_code_block_with_extra",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marko-master/tests/test_helpers.py": {
        "test_is_paired": {
            "name": "test_is_paired",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_string": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_is_not_paired": {
            "name": "test_is_not_paired",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "raw_string": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_source_no_state": {
            "name": "test_source_no_state",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_extension_object": {
            "name": "test_load_extension_object",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_illegal_extension_object": {
            "name": "test_load_illegal_extension_object",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "marko-master/tests/test_latex.py": {
        "test_render_paragraph": {
            "name": "test_render_paragraph",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_special_characters": {
            "name": "test_render_special_characters",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_format": {
            "name": "test_render_format",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_unordered_list": {
            "name": "test_render_unordered_list",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_ordered_list": {
            "name": "test_render_ordered_list",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_ordered_list_change_start": {
            "name": "test_render_ordered_list_change_start",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_render_headers": {
            "name": "test_render_headers",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_code": {
            "name": "test_render_code",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_links": {
            "name": "test_render_links",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_quote": {
            "name": "test_render_quote",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_thematic_break": {
            "name": "test_render_thematic_break",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_image": {
            "name": "test_render_image",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_html": {
            "name": "test_render_html",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "_assert_latex": {
            "name": "_assert_latex",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "markdown": [
                    "str"
                ],
                "latex": [
                    "str"
                ]
            }
        }
    },
    "marko-master/tests/test_spec.py": {
        "TestCommonMark.setup_class": {
            "name": "setup_class",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "type",
                    "typing.Type",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "TestCommonMark.test_greedy_consume_prefix": {
            "name": "test_greedy_consume_prefix",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGFM.setup_class": {
            "name": "setup_class",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "type",
                    "typing.Type",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "TestGFM.ignore_case": {
            "name": "ignore_case",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "float",
                    "Type[Exception]",
                    "Sequence",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "n": [
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "TestGFM.test_parse_table_with_backslashes": {
            "name": "test_parse_table_with_backslashes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marko-master/tests/__init__.py": {
        "parse_examples": {
            "name": "parse_examples",
            "location": 15,
            "return": [
                "Generator[(Tuple[(str, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "SpecTestSuite.load_spec": {
            "name": "load_spec",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_name": []
            }
        },
        "SpecTestSuite.ignore_case": {
            "name": "ignore_case",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "n": []
            }
        },
        "SpecTestSuite.assert_case": {
            "name": "assert_case",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "html": []
            }
        },
        "SpecTestSuite.test_mixed_tab_space_in_list_item": {
            "name": "test_mixed_tab_space_in_list_item",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecTestSuite.load_spec.attach_case": {
            "name": "attach_case",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [],
                "md": [],
                "html": []
            }
        },
        "SpecTestSuite.load_spec.attach_case.method": {
            "name": "method",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
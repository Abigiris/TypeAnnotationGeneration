{
    "markyp-master/setup.py": {},
    "markyp-master/markyp/elements.py": {
        "BaseElement.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.element_name": {
            "name": "element_name",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.inline_children": {
            "name": "inline_children",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.get_element_children": {
            "name": "get_element_children",
            "location": 72,
            "return": [
                "Optional[Sequence[Union[(str, markyp.IElement)]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseElement.get_element_properties": {
            "name": "get_element_properties",
            "location": 78,
            "return": [
                "Optional[Dict[(str, Optional[Union[(float, int, str)]])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildrenOnlyElement.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildrenOnlyElement.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildrenOnlyElement.element_name": {
            "name": "element_name",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChildrenOnlyElement.inline_children": {
            "name": "inline_children",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__getitem__": {
            "name": "__getitem__",
            "location": 166,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Element.__setitem__": {
            "name": "__setitem__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "Element.__delitem__": {
            "name": "__delitem__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Element.get": {
            "name": "get",
            "location": 175,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "Element.element_name": {
            "name": "element_name",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.inline_children": {
            "name": "inline_children",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElementSequence.__str__": {
            "name": "__str__",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyElement.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyElement.__str__": {
            "name": "__str__",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyElement.__getitem__": {
            "name": "__getitem__",
            "location": 251,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "EmptyElement.__setitem__": {
            "name": "__setitem__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "EmptyElement.__delitem__": {
            "name": "__delitem__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "EmptyElement.get": {
            "name": "get",
            "location": 260,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "EmptyElement.element_name": {
            "name": "element_name",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelfClosedElement.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandaloneElement.__str__": {
            "name": "__str__",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringElement.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "StringElement.__str__": {
            "name": "__str__",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringElement.__getitem__": {
            "name": "__getitem__",
            "location": 347,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "StringElement.__setitem__": {
            "name": "__setitem__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "StringElement.__delitem__": {
            "name": "__delitem__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "StringElement.get": {
            "name": "get",
            "location": 356,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "StringElement.element_name": {
            "name": "element_name",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "markyp-master/markyp/formatters.py": {
        "format_property": {
            "name": "format_property",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "value": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "format_properties": {
            "name": "format_properties",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "properties": [
                    "Dict[(str, Optional[Union[(float, str)]])]"
                ]
            }
        },
        "xml_format_element": {
            "name": "xml_format_element",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "element": [
                    "Union[(str, markyp.IElement)]"
                ]
            }
        },
        "format_element_sequence": {
            "name": "format_element_sequence",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "elements": [
                    "Sequence[Optional[Union[(str, markyp.IElement)]]]"
                ]
            }
        }
    },
    "markyp-master/markyp/parser.py": {
        "AnyElement.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyElement.element_name": {
            "name": "element_name",
            "location": 70,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoreElement.__new__": {
            "name": "__new__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Callable[None, None]",
                    "Type",
                    "Type[T]",
                    "Callable[[None], None]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.add_rules": {
            "name": "add_rules",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Sequence[Union[(ParserRule, Type[markyp.IElement])]]"
                ]
            }
        },
        "Parser.clear_rules": {
            "name": "clear_rules",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.set_rules": {
            "name": "set_rules",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Sequence[Union[(ParserRule, Type[markyp.IElement])]]"
                ]
            }
        },
        "Parser.converter": {
            "name": "converter",
            "location": 152,
            "return": [
                "Optional[Callable[([Type[Union[(str, markyp.IElement)]], Sequence[Union[(str, markyp.IElement)]], Dict[(str, Optional[Union[(float, int, str)]])]], Tuple[(Type[Union[(str, markyp.IElement)]], Sequence[Union[(str, markyp.IElement)]], Dict[(str, Optional[Union[(float, int, str)]])])])]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Optional[Callable[([Type[Union[(str, markyp.IElement)]], Sequence[Union[(str, markyp.IElement)]], Dict[(str, Optional[Union[(float, str)]])]], Tuple[(Type[Union[(str, markyp.IElement)]], Sequence[Union[(str, markyp.IElement)]], Dict[(str, Optional[Union[(float, str)]])])])]]"
                ]
            }
        },
        "Parser.convert": {
            "name": "convert",
            "location": 168,
            "return": [
                "Union[(str, markyp.IElement)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ET.Element"
                ]
            }
        },
        "Parser.fromstring": {
            "name": "fromstring",
            "location": 191,
            "return": [
                "Union[(str, markyp.IElement)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 204,
            "return": [
                "Union[(str, markyp.IElement)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Parser._get_children": {
            "name": "_get_children",
            "location": 217,
            "return": [
                "Sequence[Union[(str, markyp.IElement)]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ET.Element"
                ]
            }
        },
        "Parser._get_properties": {
            "name": "_get_properties",
            "location": 229,
            "return": [
                "Dict[(str, Optional[Union[(float, int, str)]])]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ET.Element"
                ]
            }
        },
        "Parser._get_rule_entry": {
            "name": "_get_rule_entry",
            "location": 241,
            "return": [
                "Tuple[(str, Type[markyp.IElement])]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "Union[(ParserRule, Type[markyp.IElement])]"
                ]
            }
        },
        "Parser._is_empty_string_or_none": {
            "name": "_is_empty_string_or_none",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        }
    },
    "markyp-master/markyp/utils.py": {
        "join_elements": {
            "name": "join_elements",
            "location": 16,
            "return": [
                "List[Union[(str, markyp.IElement)]]"
            ],
            "arguments": {
                "items": [
                    "List[Union[(str, markyp.IElement)]]"
                ],
                "separator": [
                    "Union[(Callable[([], Union[(str, markyp.IElement)])], str, markyp.IElement)]"
                ]
            }
        },
        "join_generator": {
            "name": "join_generator",
            "location": 27,
            "return": [
                "Iterator[Union[(str, markyp.IElement)]]"
            ],
            "arguments": {
                "items": [
                    "List[Union[(str, markyp.IElement)]]"
                ],
                "separator": [
                    "Union[(Callable[([], Union[(str, markyp.IElement)])], str, markyp.IElement)]"
                ]
            }
        }
    },
    "markyp-master/markyp/__init__.py": {
        "is_element": {
            "name": "is_element",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "str",
                    "bool",
                    "\"Track\"",
                    "dict[str, typing.Any]",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "IElement.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IElement.markup": {
            "name": "markup",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "markyp-master/test/test_elements.py": {
        "test_BaseElement": {
            "name": "test_BaseElement",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ChildrenOnlyElement": {
            "name": "test_ChildrenOnlyElement",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Element": {
            "name": "test_Element",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ElementSequence": {
            "name": "test_ElementSequence",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_EmptyElement": {
            "name": "test_EmptyElement",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SelfClosedElement": {
            "name": "test_SelfClosedElement",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_StandaloneElement": {
            "name": "test_StandaloneElement",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_StringElement": {
            "name": "test_StringElement",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_property_lookup": {
            "name": "test_property_lookup",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_BaseElement.TE.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_BaseElement.TE.get_element_children": {
            "name": "get_element_children",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BaseElement.TE.get_element_properties": {
            "name": "get_element_properties",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "markyp-master/test/test_formatters.py": {
        "test_format_property": {
            "name": "test_format_property",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_properties": {
            "name": "test_format_properties",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_xml_format_element": {
            "name": "test_xml_format_element",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_element_sequence": {
            "name": "test_format_element_sequence",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_properties.str_formatter": {
            "name": "str_formatter",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "value": []
            }
        }
    },
    "markyp-master/test/test_init.py": {
        "test_IElement": {
            "name": "test_IElement",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_element": {
            "name": "test_is_element",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "markyp-master/test/test_parser.py": {
        "test_converter": {
            "name": "test_converter",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_factory_error": {
            "name": "test_factory_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_from_file": {
            "name": "test_parse_from_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser": {
            "name": "test_parser",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_elements": {
            "name": "get_elements",
            "location": 60,
            "return": [
                "markyp.elements.ChildrenOnlyElement"
            ],
            "arguments": {}
        },
        "get_converted_elements": {
            "name": "get_converted_elements",
            "location": 71,
            "return": [
                "markyp.elements.ChildrenOnlyElement"
            ],
            "arguments": {}
        },
        "assert_elements_equal": {
            "name": "assert_elements_equal",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "foo": [
                    "Union[(str, markyp.IElement)]"
                ],
                "bar": [
                    "Union[(str, markyp.IElement)]"
                ]
            }
        },
        "get_parsers": {
            "name": "get_parsers",
            "location": 103,
            "return": [
                "Tuple[(markyp.parser.Parser, markyp.parser.Parser, markyp.parser.Parser, markyp.parser.Parser, markyp.parser.Parser)]"
            ],
            "arguments": {
                "converter": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "converter": {
            "name": "converter",
            "location": 162,
            "return": [
                "Tuple[(_T0, _T1, _T2)]"
            ],
            "arguments": {
                "factory": [
                    "_T0"
                ],
                "children": [
                    "_T1"
                ],
                "properties": [
                    "_T2"
                ]
            }
        }
    },
    "markyp-master/test/test_utils.py": {
        "separator_fun": {
            "name": "separator_fun",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_join_elements": {
            "name": "test_join_elements",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_generator": {
            "name": "test_join_generator",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SeparatorCls.__new__": {
            "name": "__new__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Callable[None, None]",
                    "Type",
                    "Type[T]",
                    "Callable[[None], None]"
                ]
            }
        }
    },
    "markyp-master/test/__init__.py": {}
}
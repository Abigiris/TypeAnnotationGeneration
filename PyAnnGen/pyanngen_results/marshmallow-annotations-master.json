{
    "marshmallow-annotations-master/setup.py": {},
    "marshmallow-annotations-master/docs/conf.py": {},
    "marshmallow-annotations-master/src/marshmallow_annotations/base.py": {
        "AbstractConverter.convert": {
            "name": "convert",
            "location": 31,
            "return": [
                "marshmallow.base.FieldABC",
                "None"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "type"
                ],
                "opts": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "AbstractConverter.convert_all": {
            "name": "convert_all",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "ignore": [
                    "AbstractSet[str]"
                ],
                "configs": [
                    "Optional[Dict[(str, Optional[Dict[(str, Any)]])]]"
                ]
            }
        },
        "AbstractConverter.is_scheme": {
            "name": "is_scheme",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "type"
                ]
            }
        },
        "TypeRegistry.register": {
            "name": "register",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "constructor": [
                    "Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
                ]
            }
        },
        "TypeRegistry.field_factory": {
            "name": "field_factory",
            "location": 99,
            "return": [
                "Callable[([Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]], Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)])]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        },
        "TypeRegistry.get": {
            "name": "get",
            "location": 117,
            "return": [
                "Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        },
        "TypeRegistry.register_field_for_type": {
            "name": "register_field_for_type",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "field": [
                    "marshmallow.base.FieldABC",
                    "typing.Type",
                    "bool",
                    "type",
                    "set[]",
                    "set",
                    "list[]",
                    "Optional[List]",
                    "None"
                ]
            }
        },
        "TypeRegistry.register_scheme_factory": {
            "name": "register_scheme_factory",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "scheme_or_name": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TypeRegistry.has": {
            "name": "has",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        },
        "TypeRegistry.__contains__": {
            "name": "__contains__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        },
        "TypeRegistry.field_factory.field_factory": {
            "name": "field_factory",
            "location": 110,
            "return": [
                "Callable[([Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]], Callable[([AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)])]"
            ],
            "arguments": {
                "constructor": []
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/converter.py": {
        "_is_optional": {
            "name": "_is_optional",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "typehint": [
                    "bool",
                    "dict"
                ]
            }
        },
        "_extract_optional": {
            "name": "_extract_optional",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "typehint": [
                    "rads.xml.base.Element"
                ]
            }
        },
        "should_include": {
            "name": "should_include",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "typehint": [
                    "List[str]",
                    "list",
                    "str",
                    "List['cirq.Qid']",
                    "T"
                ]
            }
        },
        "BaseConverter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConverter.convert": {
            "name": "convert",
            "location": 56,
            "return": [
                "int",
                "Tuple[int, int]",
                "Dict[str, str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "type"
                ],
                "opts": [
                    "Union[(builtins.NoneType, Dict[(str, Any)])]"
                ]
            }
        },
        "BaseConverter.convert_all": {
            "name": "convert_all",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "ignore": [
                    "AbstractSet[str]"
                ],
                "configs": [
                    "Union[(builtins.NoneType, Dict[(str, Union[(builtins.NoneType, Dict[(str, Any)])])])]"
                ]
            }
        },
        "BaseConverter.is_scheme": {
            "name": "is_scheme",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "type"
                ]
            }
        },
        "BaseConverter._field_from_typehint": {
            "name": "_field_from_typehint",
            "location": 87,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "str",
                    "bool",
                    "Union[int, float]",
                    "Optional[str]"
                ],
                "kwargs": []
            }
        },
        "BaseConverter._get_type_hints": {
            "name": "_get_type_hints",
            "location": 119,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "TextIO",
                    "str",
                    "List[str]"
                ],
                "ignore": [
                    "List[str]",
                    "list",
                    "int",
                    "type"
                ]
            }
        },
        "BaseConverter._get_field_defaults": {
            "name": "_get_field_defaults",
            "location": 133,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "BaseConverter._preprocess_typehint": {
            "name": "_preprocess_typehint",
            "location": 139,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "field_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ],
                "target": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BaseConverter._postprocess_typehint": {
            "name": "_postprocess_typehint",
            "location": 146,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "field_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ],
                "target": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/exceptions.py": {},
    "marshmallow-annotations-master/src/marshmallow_annotations/registry.py": {
        "_is_generic": {
            "name": "_is_generic",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "typehint": [
                    "type"
                ]
            }
        },
        "field_factory": {
            "name": "field_factory",
            "location": 21,
            "return": [
                "Callable[([marshmallow_annotations.base.AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "marshmallow.base.FieldABC"
                ]
            }
        },
        "scheme_factory": {
            "name": "scheme_factory",
            "location": 35,
            "return": [
                "Callable[([marshmallow_annotations.base.AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
            ],
            "arguments": {
                "scheme_name": [
                    "str"
                ]
            }
        },
        "_list_converter": {
            "name": "_list_converter",
            "location": 50,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "converter": [
                    "marshmallow_annotations.base.AbstractConverter"
                ],
                "subtypes": [
                    "Tuple[type]"
                ],
                "opts": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "field_factory._": {
            "name": "_",
            "location": 26,
            "return": [],
            "arguments": {
                "converter": [],
                "subtypes": [],
                "opts": []
            }
        },
        "scheme_factory._": {
            "name": "_",
            "location": 40,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "converter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "subtypes": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "opts": [
                    "base.ConfigOptions",
                    "str",
                    "bool"
                ]
            }
        },
        "DefaultTypeRegistry.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "Dict[(type, Callable[([marshmallow_annotations.base.AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)])]"
                ]
            }
        },
        "DefaultTypeRegistry.register": {
            "name": "register",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "constructor": [
                    "Callable[([marshmallow_annotations.base.AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
                ]
            }
        },
        "DefaultTypeRegistry.get": {
            "name": "get",
            "location": 114,
            "return": [
                "Callable[([marshmallow_annotations.base.AbstractConverter, Tuple[type], Dict[(str, Any)]], Any)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        },
        "DefaultTypeRegistry.register_field_for_type": {
            "name": "register_field_for_type",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "field": [
                    "Tuple['cirq.Qid']",
                    "str",
                    "tuple['cirq.Qid']",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "DefaultTypeRegistry.register_scheme_factory": {
            "name": "register_scheme_factory",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "scheme_or_name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "DefaultTypeRegistry.has": {
            "name": "has",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/scheme.py": {
        "AnnotationSchemaOpts.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "schema": [
                    "Optional[float]",
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "AnnotationSchemaOpts._process": {
            "name": "_process",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "DefaultDict[int, List[Any]]",
                    "typing.DefaultDict",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "schema": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AnnotationSchemaOpts._extract_from_parents": {
            "name": "_extract_from_parents",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "list[]",
                    "list",
                    "typing.Callable[, ]",
                    "callable",
                    "str",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "list[str]",
                    "List[str]",
                    "Callable"
                ],
                "f": [
                    "list[]",
                    "list",
                    "typing.Callable[, ]",
                    "callable",
                    "str",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "list[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "AnnotationSchemaOpts._extract_from": {
            "name": "_extract_from",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "AnnotationSchemaOpts._gather_field_configs": {
            "name": "_gather_field_configs",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "int"
                ],
                "meta": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "AnnotationSchemaOpts._finalize": {
            "name": "_finalize",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationSchemaMeta.get_declared_fields": {
            "name": "get_declared_fields",
            "location": 94,
            "return": [
                "str",
                "Union[int, float, complex]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "list[str]",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "mcls": [
                    "Type[AnnotationSchemaMeta]"
                ],
                "klass": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cls_fields": [
                    "str",
                    "bool",
                    "int"
                ],
                "inherited_fields": [
                    "str",
                    "bool",
                    "int"
                ],
                "dict_cls": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AnnotationSchema.OPTIONS_CLASS": {
            "name": "OPTIONS_CLASS",
            "location": 132,
            "return": [
                "AnnotationSchemaOpts"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "meta": [
                    "str"
                ]
            }
        },
        "AnnotationSchemaOpts._gather_field_configs.merge_field_configs": {
            "name": "merge_field_configs",
            "location": 64,
            "return": [
                "None",
                "int",
                "Optional[bool]",
                "str",
                "Set[VT]",
                "tuple"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "Union[str, int]",
                    "Union[int, float]",
                    "int"
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/_compat.py": {
        "_is_class_var": {
            "name": "_is_class_var",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "typehint": [
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "_get_base": {
            "name": "_get_base",
            "location": 29,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "typehint": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/__init__.py": {},
    "marshmallow-annotations-master/src/marshmallow_annotations/ext/attrs.py": {
        "_is_attrs": {
            "name": "_is_attrs",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": []
            }
        },
        "_get_attr_from_attrs": {
            "name": "_get_attr_from_attrs",
            "location": 20,
            "return": [
                "attr.Attribute"
            ],
            "arguments": {
                "attrs": [
                    "Iterable[attr.Attribute]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_should_include_default": {
            "name": "_should_include_default",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "attr": [
                    "Callable[[Dict], None]",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "AttrsConverter.convert_all": {
            "name": "convert_all",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "type"
                ],
                "ignore": [
                    "AbstractSet[str]"
                ],
                "configs": [
                    "Optional[Dict[(str, Optional[Dict[(str, Any)]])]]"
                ]
            }
        },
        "AttrsConverter._get_field_defaults": {
            "name": "_get_field_defaults",
            "location": 51,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool"
                ]
            }
        },
        "AttrsConverter._preprocess_typehint": {
            "name": "_preprocess_typehint",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "field_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "AttrsConverter._postprocess_typehint": {
            "name": "_postprocess_typehint",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typehint": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "field_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "AttrsConverter._ensure_all_hints_are_attribs": {
            "name": "_ensure_all_hints_are_attribs",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int"
                ],
                "ignore": [
                    "int"
                ]
            }
        },
        "AttrsSchema.make_object": {
            "name": "make_object",
            "location": 117,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "\"ks.Series\""
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/ext/namedtuple.py": {
        "NamedTupleConverter._get_field_defaults": {
            "name": "_get_field_defaults",
            "location": 16,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Type",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Tuple[bytes]",
                    "tuple[bytes]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "NamedTupleSchemaOpts.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "NamedTupleSchema.make_namedtuple": {
            "name": "make_namedtuple",
            "location": 44,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "\"ks.Series\""
                ]
            }
        },
        "NamedTupleSchema.remove_optional": {
            "name": "remove_optional",
            "location": 49,
            "return": [
                "dict[, ]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool",
                "List[Mapping[str, str]]",
                "dict",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "marshmallow-annotations-master/src/marshmallow_annotations/ext/__init__.py": {},
    "marshmallow-annotations-master/test/conftest.py": {
        "clear_registry": {
            "name": "clear_registry",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "registry_": {
            "name": "registry_",
            "location": 20,
            "return": [
                "",
                "typing.Generator[DefaultTypeRegistry]"
            ],
            "arguments": {}
        },
        "scheme": {
            "name": "scheme",
            "location": 25,
            "return": [
                "",
                "typing.Generator[ConverterTestScheme]"
            ],
            "arguments": {}
        }
    },
    "marshmallow-annotations-master/test/test_converter.py": {
        "test_convert_from_typehint": {
            "name": "test_convert_from_typehint",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_pulls_options_from_passed_options": {
            "name": "test_pulls_options_from_passed_options",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_convert_all_generates_schema_fields_from_type": {
            "name": "test_convert_all_generates_schema_fields_from_type",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_convert_all_generates_field_options_from_named_configs": {
            "name": "test_convert_all_generates_field_options_from_named_configs",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_ignores_fields_passed_to_it_in_convert_all": {
            "name": "test_ignores_fields_passed_to_it_in_convert_all",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_ignores_classvar_when_generating_fields": {
            "name": "test_ignores_classvar_when_generating_fields",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_passes_interior_options_to_list_subtype": {
            "name": "test_passes_interior_options_to_list_subtype",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_defaults_missing": {
            "name": "test_defaults_missing",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_override_missing": {
            "name": "test_override_missing",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_can_convert_Dict_type_to_DictField": {
            "name": "test_can_convert_Dict_type_to_DictField",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_defaults_missing.FieldDefaultConverter._get_field_defaults": {
            "name": "_get_field_defaults",
            "location": 80,
            "return": [
                "dict[typing.Text, list[float]]",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "marshmallow-annotations-master/test/test_scheme_from_target.py": {
        "test_autogenerates_fields": {
            "name": "test_autogenerates_fields",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_pulls_settings_from_meta": {
            "name": "test_pulls_settings_from_meta",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_doesnt_overwrite_explicitly_declared_fields": {
            "name": "test_doesnt_overwrite_explicitly_declared_fields",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_doesnt_overwrite_explicitly_declared_fields_from_parent": {
            "name": "test_doesnt_overwrite_explicitly_declared_fields_from_parent",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_pulls_configuration_from_parent": {
            "name": "test_pulls_configuration_from_parent",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_merges_configuration_with_parents": {
            "name": "test_merges_configuration_with_parents",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_can_use_custom_converter": {
            "name": "test_can_use_custom_converter",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_registers_schema_as_field_for_target_type": {
            "name": "test_registers_schema_as_field_for_target_type",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_uses_parent_converter_if_none_present_here": {
            "name": "test_uses_parent_converter_if_none_present_here",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_forward_declaration_of_scheme_target": {
            "name": "test_forward_declaration_of_scheme_target",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_builds_nested_many_field_when_typehint_is_scheme": {
            "name": "test_builds_nested_many_field_when_typehint_is_scheme",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "dict[str, float]",
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_excludes_fields_declared_in_exclude": {
            "name": "test_excludes_fields_declared_in_exclude",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "SomeType.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "children": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "str",
                    "float"
                ]
            }
        },
        "test_can_use_custom_converter.TattleConverter.convert_all": {
            "name": "convert_all",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "ignore": [
                    "frozenset"
                ],
                "configs": [
                    "None"
                ]
            }
        },
        "test_uses_parent_converter_if_none_present_here.TattleConverter.convert_all": {
            "name": "convert_all",
            "location": 163,
            "return": [
                "str",
                "List[int]",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int"
                ],
                "ignore": [
                    "int",
                    "frozenset"
                ],
                "configs": [
                    "int",
                    "None"
                ]
            }
        }
    },
    "marshmallow-annotations-master/test/test_type_registry.py": {
        "test_unrecognized_type_raises_error": {
            "name": "test_unrecognized_type_raises_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_register_type_to_field_factory": {
            "name": "test_can_register_type_to_field_factory",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_register_scheme_for_type": {
            "name": "test_can_register_scheme_for_type",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_using_decorator": {
            "name": "test_register_using_decorator",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_raw_field_type": {
            "name": "test_register_raw_field_type",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_preregister_type_field_mapping": {
            "name": "test_can_preregister_type_field_mapping",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_using_decorator.ipv4_field": {
            "name": "ipv4_field",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "converter": [
                    "int",
                    "str"
                ],
                "subtypes": [
                    "int",
                    "str"
                ],
                "kwargs": []
            }
        }
    },
    "marshmallow-annotations-master/test/ext/test_attrs.py": {
        "int_factory": {
            "name": "int_factory",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_properly_converts_attrs_class_to_schema": {
            "name": "test_properly_converts_attrs_class_to_schema",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_dumps_all_attributes": {
            "name": "test_dumps_all_attributes",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_cant_convert_non_attrs_subclass": {
            "name": "test_cant_convert_non_attrs_subclass",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_can_convert_forward_references_to_self": {
            "name": "test_can_convert_forward_references_to_self",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_metadata_included": {
            "name": "test_metadata_included",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "float"
                ]
            }
        },
        "test_handles_contained_attrs_class_properly": {
            "name": "test_handles_contained_attrs_class_properly",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_handles_contained_not_attrs_class": {
            "name": "test_handles_contained_not_attrs_class",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "NotAnAttrsClass.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        }
    },
    "marshmallow-annotations-master/test/ext/test_namedtuple.py": {
        "test_instance_conversion": {
            "name": "test_instance_conversion",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "str",
                    "float"
                ]
            }
        },
        "test_missing_values": {
            "name": "test_missing_values",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": []
            }
        },
        "test_dump_default_fields": {
            "name": "test_dump_default_fields",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_no_dump_default_fields": {
            "name": "test_no_dump_default_fields",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "marshmallow-annotations-master/test/ext/__init__.py": {}
}
{
    "mastermind-api-master/manage.py": {},
    "mastermind-api-master/config/urls.py": {},
    "mastermind-api-master/config/wsgi.py": {},
    "mastermind-api-master/config/__init__.py": {},
    "mastermind-api-master/config/settings/base.py": {},
    "mastermind-api-master/config/settings/local.py": {},
    "mastermind-api-master/config/settings/production.py": {},
    "mastermind-api-master/config/settings/test.py": {},
    "mastermind-api-master/config/settings/__init__.py": {},
    "mastermind-api-master/docs/conf.py": {},
    "mastermind-api-master/docs/__init__.py": {},
    "mastermind-api-master/mastermind_py/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "request_factory": {
            "name": "request_factory",
            "location": 11,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "mastermind-api-master/mastermind_py/__init__.py": {},
    "mastermind-api-master/mastermind_py/mastermind/api_tests.py": {
        "api_client": {
            "name": "api_client",
            "location": 13,
            "return": [
                "APIClient",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "TestMastermindApi.create_game": {
            "name": "create_game",
            "location": 20,
            "return": [
                "Game",
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "num_slots": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "num_colors": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "max_guesses": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "reference": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "status": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "secret_code": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestMastermindApi.assert_guess": {
            "name": "assert_guess",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "bytes"
                ],
                "expected_white_peg": [
                    "Dict",
                    "str",
                    "None",
                    "Optional[dict]",
                    "Mapping",
                    "Mapping[str,str]",
                    "Optional[str]"
                ],
                "expected_black_peg": [
                    "Dict",
                    "str",
                    "None",
                    "Optional[dict]",
                    "Mapping",
                    "Mapping[str,str]",
                    "Optional[str]"
                ]
            }
        },
        "TestMastermindApi.test_get_games": {
            "name": "test_get_games",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": []
            }
        },
        "TestMastermindApi.test_get_game": {
            "name": "test_get_game",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": []
            }
        },
        "TestMastermindApi.test_create_game": {
            "name": "test_create_game",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "TestMastermindApi.test_create_guess": {
            "name": "test_create_guess",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": []
            }
        },
        "TestMastermindApi.test_retrieve_guesses": {
            "name": "test_retrieve_guesses",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "TestMastermindApi.test_one_white_peg": {
            "name": "test_one_white_peg",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [],
                "secret_code": [],
                "guess": [
                    "rest_framework.tesAPIClient"
                ],
                "white_pegs": [
                    "Dict"
                ],
                "black_pegs": [
                    "Dict"
                ]
            }
        }
    },
    "mastermind-api-master/mastermind_py/mastermind/apps.py": {},
    "mastermind-api-master/mastermind_py/mastermind/domain.py": {
        "create_reference": {
            "name": "create_reference",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Guess.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "black_pegs": [
                    "int",
                    "str",
                    "float"
                ],
                "white_pegs": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "reference": [
                    "str",
                    "bool",
                    "List",
                    "List[int]",
                    "int"
                ],
                "num_slots": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "num_colors": [
                    "float",
                    "str",
                    "None",
                    "List",
                    "Optional[float]",
                    "random.Random",
                    "Tuple[Union[Any,Any]]",
                    "Tuple[Any,Any]"
                ],
                "secret_code": [
                    "int",
                    "str",
                    "float",
                    "Callable"
                ],
                "max_guesses": [
                    "int",
                    "Callable[,float]",
                    "Optional[int]",
                    "None"
                ],
                "status": [
                    "str",
                    "bool",
                    "List",
                    "List[int]",
                    "int"
                ],
                "guesses": [
                    "str",
                    "bool",
                    "List",
                    "List[int]",
                    "int"
                ]
            }
        },
        "Game.add_guess": {
            "name": "add_guess",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "Game._feedback": {
            "name": "_feedback",
            "location": 94,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "Game.new": {
            "name": "new",
            "location": 106,
            "return": [
                "Game"
            ],
            "arguments": {
                "num_slots": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "num_colors": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "max_guesses": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "mastermind-api-master/mastermind_py/mastermind/models.py": {},
    "mastermind-api-master/mastermind_py/mastermind/repo.py": {
        "Games.all": {
            "name": "all",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Games.save": {
            "name": "save",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "Iterable",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "database.Game"
                ]
            }
        },
        "Games.get": {
            "name": "get",
            "location": 29,
            "return": [
                "mastermind_py.mastermind.domain.Game"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "Games._to_domain": {
            "name": "_to_domain",
            "location": 32,
            "return": [
                "mastermind_py.mastermind.domain.Game"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "GPy.models.GPRegression",
                    "db.models.Region",
                    "esm.models.manifesManifest"
                ]
            }
        },
        "Games._to_model": {
            "name": "_to_model",
            "location": 49,
            "return": [
                "mastermind_py.mastermind.models.GameModel"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int",
                    "game_engine.Game",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "mastermind-api-master/mastermind_py/mastermind/sample_tests.py": {
        "test_sum": {
            "name": "test_sum",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mastermind-api-master/mastermind_py/mastermind/schemas.py": {},
    "mastermind-api-master/mastermind_py/mastermind/urls.py": {},
    "mastermind-api-master/mastermind_py/mastermind/views.py": {
        "MastermindViewset.list": {
            "name": "list",
            "location": 13,
            "return": [
                "Response",
                "bool",
                "bytes",
                "str",
                "Dict[str,object]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "MastermindViewset.create": {
            "name": "create",
            "location": 18,
            "return": [
                "Response",
                "bool",
                "Dict[str,Any]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "MastermindViewset.retrieve": {
            "name": "retrieve",
            "location": 28,
            "return": [
                "Response",
                "str",
                "django.http.HttpResponse",
                "int",
                "flask.wrappers.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,bool]"
                ]
            }
        },
        "GuessesViewset.create": {
            "name": "create",
            "location": 35,
            "return": [
                "Response",
                "bool",
                "Dict[str,Any]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str,str]"
                ],
                "id": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "mastermind-api-master/mastermind_py/mastermind/__init__.py": {},
    "mastermind-api-master/mastermind_py/mastermind/migrations/0001_initial.py": {},
    "mastermind-api-master/mastermind_py/mastermind/migrations/__init__.py": {}
}
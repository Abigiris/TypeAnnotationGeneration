{
    "mazes-for-programmers-python-src-master/algorithms/aldous_broder.py": {
        "AldousBroder.on": {
            "name": "on",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/base_algorithm.py": {
        "Algorithm.on": {
            "name": "on",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Algorithm.name": {
            "name": "name",
            "location": 13,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/binary_tree.py": {
        "BinaryTree.on": {
            "name": "on",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/hunt_and_kill.py": {
        "HuntAndKill.on": {
            "name": "on",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "float",
                    "Optional[bytes]",
                    "bool"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/recursive_backtracker.py": {
        "RecursiveBacktracker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starting_cell": [
                    "int",
                    "None"
                ]
            }
        },
        "RecursiveBacktracker.on": {
            "name": "on",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float",
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/sidewinder.py": {
        "Sidewinder.on": {
            "name": "on",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/wilson.py": {
        "Wilson.on": {
            "name": "on",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/algorithms/__init__.py": {},
    "mazes-for-programmers-python-src-master/base/cell.py": {
        "is_cell": {
            "name": "is_cell",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "int"
                ]
            }
        },
        "Cell.row": {
            "name": "row",
            "location": 14,
            "return": [
                "Tuple[int, int]",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.column": {
            "name": "column",
            "location": 18,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.links": {
            "name": "links",
            "location": 22,
            "return": [
                "List",
                "Dict[str,Dict[str,int]]",
                "Iterable[str]",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.neighbors": {
            "name": "neighbors",
            "location": 26,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.distances": {
            "name": "distances",
            "location": 39,
            "return": [
                "Distances",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.data": {
            "name": "data",
            "location": 55,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "column": [
                    "int"
                ]
            }
        },
        "Cell.link": {
            "name": "link",
            "location": 73,
            "return": [
                "Cell"
            ],
            "arguments": {
                "self": [
                    "_TCell@@Cell@@"
                ],
                "cell": [
                    "bool",
                    "Optional[int]",
                    "Callable",
                    "dict"
                ],
                "bidirectional": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Iterable",
                    "Dict"
                ]
            }
        },
        "Cell.unlink": {
            "name": "unlink",
            "location": 85,
            "return": [
                "Cell"
            ],
            "arguments": {
                "self": [
                    "_TCell@@Cell@@"
                ],
                "cell": [
                    "int",
                    "float"
                ],
                "bidirectional": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Cell.linked_to": {
            "name": "linked_to",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "Union[str,Path]",
                    "bool",
                    "str"
                ]
            }
        },
        "Cell.random_neighbour": {
            "name": "random_neighbour",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.has_data": {
            "name": "has_data",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "Cell.__iadd__": {
            "name": "__iadd__",
            "location": 117,
            "return": [
                "Cell"
            ],
            "arguments": {
                "self": [
                    "_TCell@@Cell@@"
                ],
                "cell": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cell.__isub__": {
            "name": "__isub__",
            "location": 124,
            "return": [
                "Cell"
            ],
            "arguments": {
                "self": [
                    "_TCell@@Cell@@"
                ],
                "cell": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cell.__and__": {
            "name": "__and__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_cell": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Cell.__hash__": {
            "name": "__hash__",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__eq__": {
            "name": "__eq__",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_cell": [
                    "Optional[Cell]",
                    "bool",
                    "None",
                    "Sequence[str]",
                    "Optional[AbstractSet[str]]",
                    "AbstractSet",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Cell.__ne__": {
            "name": "__ne__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_cell": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/colored_grid.py": {
        "ColoredGrid.background_color_for": {
            "name": "background_color_for",
            "location": 13,
            "return": [
                "Optional[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/distances.py": {
        "is_cell": {
            "name": "is_cell",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "Cell"
                ]
            }
        },
        "Distances.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "List[Dict[str, str]]"
                ]
            }
        },
        "Distances.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "str",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Distances.__setitem__": {
            "name": "__setitem__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "Callable",
                    "str"
                ],
                "distance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Distances.cells": {
            "name": "cells",
            "location": 38,
            "return": [
                "List",
                "List[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distances.max": {
            "name": "max",
            "location": 42,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distances.path_to": {
            "name": "path_to",
            "location": 53,
            "return": [
                "Distances"
            ],
            "arguments": {
                "self": [
                    "_TDistances@@Distances@@"
                ],
                "destination": [
                    "str",
                    "Cell",
                    "List[str]",
                    "BinaryIO"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/distance_grid.py": {
        "DistanceGrid.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "bool"
                ],
                "columns": [
                    "int",
                    "bool"
                ]
            }
        },
        "DistanceGrid.distances": {
            "name": "distances",
            "location": 24,
            "return": [
                "None",
                "int",
                "Dict[str,int]",
                "List[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "DistanceGrid.contents_of": {
            "name": "contents_of",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "Dict",
                    "Optional[Dict]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/grid.py": {
        "is_key": {
            "name": "is_key",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[int, slice]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Grid.rows": {
            "name": "rows",
            "location": 14,
            "return": [
                "Tuple[int, int]",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.columns": {
            "name": "columns",
            "location": 18,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.size": {
            "name": "size",
            "location": 22,
            "return": [
                "int",
                "float",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.dimensions": {
            "name": "dimensions",
            "location": 26,
            "return": [
                "Tuple",
                "int",
                "List[str]",
                "List[int]",
                "List[Tuple[int,int]]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.deadends": {
            "name": "deadends",
            "location": 30,
            "return": [
                "List",
                "int",
                "List[Dict]",
                "List[Tuple[int,float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int"
                ],
                "columns": [
                    "int"
                ]
            }
        },
        "Grid.cell_at": {
            "name": "cell_at",
            "location": 44,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Optional[int]",
                    "Iterable[Dict]",
                    "Iterable[int]",
                    "Callable[[int],str]"
                ],
                "column": [
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Grid.set_cell_at": {
            "name": "set_cell_at",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str,str]",
                    "Dict",
                    "Set[str]",
                    "int",
                    "Iterable",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "column": [
                    "Dict[str,str]",
                    "Dict",
                    "Set[str]",
                    "int",
                    "Iterable",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "Dict[str,str]",
                    "Dict",
                    "Set[str]",
                    "int",
                    "Iterable",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Grid.prepare_grid": {
            "name": "prepare_grid",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.configure_cells": {
            "name": "configure_cells",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.random_cell": {
            "name": "random_cell",
            "location": 70,
            "return": [
                "base.cell.Cell"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.each_row": {
            "name": "each_row",
            "location": 75,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.each_cell": {
            "name": "each_cell",
            "location": 79,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.contents_of": {
            "name": "contents_of",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "bool",
                    "Sequence[int]",
                    "base.cell.Cell"
                ]
            }
        },
        "Grid.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "None",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Grid.__setitem__": {
            "name": "__setitem__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "base.cell.Cell",
                    "bytes",
                    "Optional[str]",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "None",
                    "base.cell.Cell",
                    "bytes",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "Grid.__contains__": {
            "name": "__contains__",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "base.cell.Cell"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/rotator.py": {
        "Rotator.on": {
            "name": "on",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "grid": []
            }
        },
        "Rotator._rotated_coordinates": {
            "name": "_rotated_coordinates",
            "location": 34,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cell": [
                    "bool",
                    "List[object]",
                    "int"
                ],
                "grid": [
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Rotator._rotate_cell_neighbors": {
            "name": "_rotate_cell_neighbors",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "new_cell": [
                    "base.cell.Cell",
                    "int"
                ],
                "old_cell": [
                    "int",
                    "base.cell.Cell"
                ],
                "grid": [
                    "List[Photo]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/base/__init__.py": {},
    "mazes-for-programmers-python-src-master/demos/demo_utils.py": {
        "_instantiate_algorithm": {
            "name": "_instantiate_algorithm",
            "location": 25,
            "return": [
                "Union[(algorithms.aldous_broder.AldousBroder, algorithms.binary_tree.BinaryTree, algorithms.hunt_and_kill.HuntAndKill, algorithms.recursive_backtracker.RecursiveBacktracker, algorithms.sidewinder.Sidewinder, algorithms.wilson.Wilson)]"
            ],
            "arguments": {
                "desired_algorithm": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_algorithm": {
            "name": "get_algorithm",
            "location": 34,
            "return": [
                "Union[(algorithms.aldous_broder.AldousBroder, algorithms.binary_tree.BinaryTree, algorithms.hunt_and_kill.HuntAndKill, algorithms.recursive_backtracker.RecursiveBacktracker, algorithms.sidewinder.Sidewinder, algorithms.wilson.Wilson)]"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "bool"
                ],
                "available_algorithms": [
                    "List[str]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "_instantiate_exporter": {
            "name": "_instantiate_exporter",
            "location": 41,
            "return": [
                "Union[(exporters.ascii_exporter.ASCIIExporter, exporters.png_exporter.PNGExporter, exporters.unicode_exporter.UnicodeExporter, exporters.wolf3d_exporter.Wolf3DExporter)]"
            ],
            "arguments": {
                "desired_exporter": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_exporter": {
            "name": "get_exporter",
            "location": 50,
            "return": [
                "Union[(exporters.ascii_exporter.ASCIIExporter, exporters.png_exporter.PNGExporter, exporters.unicode_exporter.UnicodeExporter, exporters.wolf3d_exporter.Wolf3DExporter)]"
            ],
            "arguments": {
                "exporter": [
                    "str",
                    "bool"
                ],
                "available_exporters": [
                    "List[str]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "str2bool": {
            "name": "str2bool",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_string": [
                    "str",
                    "bytes",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/demos/game_map_demo.py": {
        "store_solution": {
            "name": "store_solution",
            "location": 19,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Tuple[str,int]",
                "bytearray"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "int",
                    "base.colored_grid.ColoredGrid"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/demos/image_demo.py": {},
    "mazes-for-programmers-python-src-master/demos/stats_demo.py": {},
    "mazes-for-programmers-python-src-master/demos/terminal_demo.py": {},
    "mazes-for-programmers-python-src-master/demos/__init__.py": {},
    "mazes-for-programmers-python-src-master/exporters/ascii_exporter.py": {
        "ASCIIExporter.render": {
            "name": "render",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "Type[T]"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/exporters/base_exporter.py": {
        "Exporter.render": {
            "name": "render",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Exporter.name": {
            "name": "name",
            "location": 14,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mazes-for-programmers-python-src-master/exporters/png_exporter.py": {
        "PNGExporter.render": {
            "name": "render",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "List[int]",
                    "eth.chains.base.MiningChain"
                ]
            }
        },
        "PNGExporter._render": {
            "name": "_render",
            "location": 24,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "grid": [
                    "int"
                ],
                "cell_size": [
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "bool"
                ],
                "coloring": [
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "PNGExporter._process_kwargs": {
            "name": "_process_kwargs",
            "location": 58,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "mazes-for-programmers-python-src-master/exporters/unicode_exporter.py": {
        "UnicodeExporter.render": {
            "name": "render",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "bytes",
                    "str",
                    "Type['Frame']",
                    "Dict[str, Any]"
                ]
            }
        },
        "UnicodeExporter.get_leftmost_junction": {
            "name": "get_leftmost_junction",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "bool"
                ]
            }
        },
        "UnicodeExporter.get_topmost_junction": {
            "name": "get_topmost_junction",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "bool"
                ]
            }
        },
        "UnicodeExporter.get_south_east_junction": {
            "name": "get_south_east_junction",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/exporters/wolf3d_exporter.py": {
        "Wolf3DExporter.enemies_count": {
            "name": "enemies_count",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wolf3DExporter.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wolf3DExporter.render": {
            "name": "render",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "List",
                    "float"
                ]
            }
        },
        "Wolf3DExporter.is_valid": {
            "name": "is_valid",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Wolf3DExporter._expand": {
            "name": "_expand",
            "location": 122,
            "return": [
                "base.colored_grid.ColoredGrid"
            ],
            "arguments": {
                "grid": [
                    "int",
                    "base.colored_grid.ColoredGrid"
                ],
                "rows": [
                    "int",
                    "base.colored_grid.ColoredGrid"
                ],
                "columns": [
                    "int",
                    "base.colored_grid.ColoredGrid"
                ]
            }
        },
        "Wolf3DExporter._store_solution": {
            "name": "_store_solution",
            "location": 129,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Tuple[str,int]",
                "bytearray"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "int",
                    "base.colored_grid.ColoredGrid"
                ]
            }
        },
        "Wolf3DExporter._write_data": {
            "name": "_write_data",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "walls": [
                    "List[int]",
                    "int",
                    "str",
                    "bytes",
                    "bytearray"
                ],
                "objects": [
                    "bytes",
                    "str",
                    "float",
                    "list",
                    "List[int]"
                ]
            }
        },
        "Wolf3DExporter._cell_distance": {
            "name": "_cell_distance",
            "location": 152,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cell": [
                    "int",
                    "float",
                    "base.cell.Cell",
                    "base.colored_grid.ColoredGrid"
                ],
                "grid": [
                    "int",
                    "float",
                    "base.cell.Cell",
                    "base.colored_grid.ColoredGrid"
                ]
            }
        },
        "Wolf3DExporter._wall_for": {
            "name": "_wall_for",
            "location": 158,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "str",
                    "int",
                    "float"
                ],
                "grid": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Wolf3DExporter._object_for": {
            "name": "_object_for",
            "location": 165,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "float"
                ],
                "grid": [
                    "int",
                    "float"
                ]
            }
        },
        "Wolf3DExporter._cell_contents": {
            "name": "_cell_contents",
            "location": 188,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "base.cell.Cell"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/exporters/__init__.py": {},
    "mazes-for-programmers-python-src-master/pathfinders/dijkstra.py": {
        "calculate_distances": {
            "name": "calculate_distances",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "Optional[int]",
                    "float",
                    "Optional[str]"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Union[str,Tuple[str,...]]",
                    "str"
                ],
                "end": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/pathfinders/longest_path.py": {
        "calculate": {
            "name": "calculate",
            "location": 9,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "mazes-for-programmers-python-src-master/pathfinders/__init__.py": {},
    "mazes-for-programmers-python-src-master/test/test_cell.py": {
        "test_equality": {
            "name": "test_equality",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linking": {
            "name": "test_linking",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linking_using_operator_overloads": {
            "name": "test_linking_using_operator_overloads",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unlinking": {
            "name": "test_unlinking",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unlinking_using_operator_overloads": {
            "name": "test_unlinking_using_operator_overloads",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_links_listing": {
            "name": "test_links_listing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_no_neighbors": {
            "name": "test_has_no_neighbors",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_neighbors": {
            "name": "test_has_neighbors",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distances": {
            "name": "test_distances",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mazes-for-programmers-python-src-master/test/test_distances.py": {
        "test_index_access": {
            "name": "test_index_access",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_distance": {
            "name": "test_max_distance",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mazes-for-programmers-python-src-master/test/test_grid.py": {
        "test_constructor": {
            "name": "test_constructor",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cell_access": {
            "name": "test_cell_access",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cell_access_using_operator_overloads": {
            "name": "test_cell_access_using_operator_overloads",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neighbors_setup_when_grid_is_created": {
            "name": "test_neighbors_setup_when_grid_is_created",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_cell": {
            "name": "test_random_cell",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_size": {
            "name": "test_size",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mazes-for-programmers-python-src-master/test/test_linters.py": {
        "test_flake8_compliance": {
            "name": "test_flake8_compliance",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mypy_compliance": {
            "name": "test_mypy_compliance",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mazes-for-programmers-python-src-master/test/__init__.py": {}
}
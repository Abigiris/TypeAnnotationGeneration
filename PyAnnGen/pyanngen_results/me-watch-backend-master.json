{
    "me-watch-backend-master/manage.py": {},
    "me-watch-backend-master/core/admin.py": {},
    "me-watch-backend-master/core/apps.py": {},
    "me-watch-backend-master/core/models.py": {},
    "me-watch-backend-master/core/permissions.py": {},
    "me-watch-backend-master/core/tests.py": {
        "BaseAuthorizedTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAuthorizedTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "me-watch-backend-master/core/urls.py": {},
    "me-watch-backend-master/core/utils.py": {
        "vk_api_call": {
            "name": "vk_api_call",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "params": [
                    "Optional[dict]"
                ]
            }
        },
        "BaseSocialIntegration.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSocialIntegration.get_redirect_uri": {
            "name": "get_redirect_uri",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "dict",
                    "Dict[str, str]",
                    "tildes.models.topic.Topic"
                ]
            }
        },
        "BaseSocialIntegration.get_redirect_params": {
            "name": "get_redirect_params",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseSocialIntegration.get_auth_params": {
            "name": "get_auth_params",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "starlette.requests.Request",
                    "django.http.HttpRequest"
                ],
                "code": [
                    "str",
                    "int",
                    "starlette.requests.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseSocialIntegration.get_personal_info": {
            "name": "get_personal_info",
            "location": 75,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "external_token": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "BaseOAuth2InitView.get": {
            "name": "get",
            "location": 92,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "BaseOAuth2CallbackView.generate_token": {
            "name": "generate_token",
            "location": 100,
            "return": [
                "Response",
                "bool",
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "external_token": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "BaseOAuth2CallbackView.authorize": {
            "name": "authorize",
            "location": 129,
            "return": [
                "Response",
                "str",
                "int",
                "Optional[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseOAuth2CallbackView.get": {
            "name": "get",
            "location": 149,
            "return": [
                "Response",
                "django.http.HttpResponse",
                "\"User\"",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str, Any]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "VkIntegration.get_personal_info": {
            "name": "get_personal_info",
            "location": 160,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "external_token": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        }
    },
    "me-watch-backend-master/core/views.py": {},
    "me-watch-backend-master/core/__init__.py": {},
    "me-watch-backend-master/core/migrations/0001_initial.py": {},
    "me-watch-backend-master/core/migrations/__init__.py": {},
    "me-watch-backend-master/me_watch/settings.py": {},
    "me-watch-backend-master/me_watch/urls.py": {},
    "me-watch-backend-master/me_watch/wsgi.py": {},
    "me-watch-backend-master/me_watch/__init__.py": {},
    "me-watch-backend-master/pictures/admin.py": {},
    "me-watch-backend-master/pictures/apps.py": {},
    "me-watch-backend-master/pictures/models.py": {},
    "me-watch-backend-master/pictures/serializers.py": {},
    "me-watch-backend-master/pictures/tests.py": {
        "BasePictureTestSuite.test_success_get_with_right_names": {
            "name": "test_success_get_with_right_names",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePictureTestSuite.test_fail_get_with_wrong_name": {
            "name": "test_fail_get_with_wrong_name",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePictureTestCase.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "me-watch-backend-master/pictures/types.py": {},
    "me-watch-backend-master/pictures/urls.py": {},
    "me-watch-backend-master/pictures/utils.py": {
        "BaseParser.get_sources": {
            "name": "get_sources",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "YandexParser.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YandexParser.get_sources": {
            "name": "get_sources",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "YandexParser._get_type_of_soup": {
            "name": "_get_type_of_soup",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "soup": []
            }
        },
        "YandexParser._parse_films": {
            "name": "_parse_films",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "initial_page": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "YandexParser._parse_series": {
            "name": "_parse_series",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "initial_page": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "YandexParser._get_internal_series_name": {
            "name": "_get_internal_series_name",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "initial_page": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "YandexParser._parse_source": {
            "name": "_parse_source",
            "location": 86,
            "return": [
                "Picture"
            ],
            "arguments": {
                "self": [],
                "internal_name": [],
                "season": [],
                "episode": []
            }
        },
        "YandexParser._series_parser": {
            "name": "_series_parser",
            "location": 106,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "internal_name": [],
                "season": []
            }
        }
    },
    "me-watch-backend-master/pictures/views.py": {
        "BasePictureListView.get_queryset": {
            "name": "get_queryset",
            "location": 15,
            "return": [
                "str",
                "int",
                "socialhome.users.models.Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilmListView.get_queryset": {
            "name": "get_queryset",
            "location": 21,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesListView.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PictureSearchView.get": {
            "name": "get",
            "location": 44,
            "return": [
                "str",
                "django.contrib.auth.models.AbstractUser"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "str",
                    "django.http.HttpRequest",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "picture_name": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "PictureSearchView.redirect": {
            "name": "redirect",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "picture": [
                    "str",
                    "Iterable[str]",
                    "Type[Any]"
                ]
            }
        },
        "PictureSearchView.parse_links": {
            "name": "parse_links",
            "location": 71,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "picture_name": [
                    "str"
                ]
            }
        }
    },
    "me-watch-backend-master/pictures/__init__.py": {},
    "me-watch-backend-master/pictures/migrations/0001_initial.py": {},
    "me-watch-backend-master/pictures/migrations/__init__.py": {}
}
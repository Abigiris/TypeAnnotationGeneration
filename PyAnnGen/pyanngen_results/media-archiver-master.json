{
    "media-archiver-master/setup.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "media-archiver-master/tasks.py": {
        "style": {
            "name": "style",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "check": [
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 33,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 39,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon": {
            "name": "radon",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 108,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "publish": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "xml": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/article.py": {},
    "media-archiver-master/mediaarchiver/config.py": {
        "SiteConfig.account_iterator": {
            "name": "account_iterator",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "directory_download": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TwitterConfig.account_iterator": {
            "name": "account_iterator",
            "location": 31,
            "return": [
                "mediaarchiver.models.AccountIterator"
            ],
            "arguments": {
                "self": [],
                "directory_download": [
                    "str",
                    "pathlib.Path",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/download_order_generator.py": {
        "DownloadOrderGenerator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "path_directory_download": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Callable[str,None]",
                    "Union[str,pathlib.Path]",
                    "Callable[[str],None]"
                ],
                "list_article": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "file_name_builder": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "DownloadOrderGenerator.set_default": {
            "name": "set_default",
            "location": 26,
            "return": [
                "Union[(mediaarchiver.file_name_builder.DefaultFileNameBuilder, _T0)]"
            ],
            "arguments": {
                "file_name_builder": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DownloadOrderGenerator.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadOrderGenerator.create_coroutine": {
            "name": "create_coroutine",
            "location": 34,
            "return": [
                "DownloadOrder",
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "bool",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ],
                "created_date_time": [
                    "str",
                    "int",
                    "bool",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "DownloadOrderGenerator.build_url": {
            "name": "build_url",
            "location": 42,
            "return": [
                "str",
                "bool",
                "Text"
            ],
            "arguments": {
                "self": [],
                "url_media": [
                    "str"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/exceptions.py": {},
    "media-archiver-master/mediaarchiver/file_name_builder.py": {
        "FileNameBuilder.build": {
            "name": "build",
            "location": 8,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "created_date_time": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "None",
                    "Mapping",
                    "bool",
                    "Optional[str]",
                    "Mapping[str,str]"
                ],
                "url": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "None",
                    "Mapping",
                    "bool",
                    "Optional[str]",
                    "Mapping[str,str]"
                ]
            }
        },
        "DefaultFileNameBuilder.build": {
            "name": "build",
            "location": 14,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "created_date_time": [
                    "str",
                    "Callable[,None]",
                    "datetime.datetime",
                    "None",
                    "Optional[Callable[,None]]",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Callable[,None]",
                    "datetime.datetime",
                    "None",
                    "Optional[Callable[,None]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/media_archiver.py": {
        "MediaArchiver.execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/media_archiving_step.py": {
        "MediaArchivingStep.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blog_site": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MediaArchivingStep.execute": {
            "name": "execute",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_download": [
                    "Exception",
                    "Dict[str,str]",
                    "List[Dict]",
                    "int",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "MediaArchivingStep.execute_per_account": {
            "name": "execute_per_account",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        }
    },
    "media-archiver-master/mediaarchiver/micro_image_filter.py": {
        "MicroImageFilter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroImageFilter._filter": {
            "name": "_filter",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "media_file": [
                    "str",
                    "List[str]",
                    "parallelmediadownloader.media_file.MediaFile"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/models.py": {
        "Account.__post_init__": {
            "name": "__post_init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.extract_datetime": {
            "name": "extract_datetime",
            "location": 27,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Account.is_target_month": {
            "name": "is_target_month",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "month": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "Account.is_target_diary": {
            "name": "is_target_diary",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "created_datetime": [
                    "str"
                ]
            }
        },
        "AccountIterator.__iter__": {
            "name": "__iter__",
            "location": 52,
            "return": [
                "Generator[(Account, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "media-archiver-master/mediaarchiver/parallel_html_scraper_wrapper.py": {
        "ParallelHtmlScraperWrapper.execute": {
            "name": "execute",
            "location": 11,
            "return": [
                "int",
                "float",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "cls": [
                    "Type[ParallelHtmlScraperWrapper]"
                ],
                "base_url": [
                    "Dict",
                    "str",
                    "bool"
                ],
                "list_url_monthly_archive_page": [
                    "Dict",
                    "str",
                    "bool"
                ],
                "analyzer": [
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "ParallelHtmlScraperWrapper.set_default": {
            "name": "set_default",
            "location": 27,
            "return": [
                "Union[(mediaarchiver.post_processor.Flattener, _T0)]"
            ],
            "arguments": {
                "cls": [
                    "Type[ParallelHtmlScraperWrapper]"
                ],
                "processor": [
                    "Sequence[str]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/post_processor.py": {
        "PostProcessor.execute": {
            "name": "execute",
            "location": 12,
            "return": [
                "U",
                "None"
            ],
            "arguments": {
                "self": [],
                "list_": [
                    "List[T]",
                    "Callable",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "Flattener.execute": {
            "name": "execute",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "list_": [
                    "Dict",
                    "int",
                    "List[str]",
                    "List[cirq.Qid]",
                    "Set",
                    "List",
                    "T",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "DuplicateRemover.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_": [
                    "int",
                    "None",
                    "List",
                    "List[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DuplicateRemover.execute": {
            "name": "execute",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "list_": [
                    "Dict",
                    "Iterable[T]"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/__init__.py": {
        "Directory.value": {
            "name": "value",
            "location": 18,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "media-archiver-master/mediaarchiver/htmlanalyzer/article_analyzer.py": {
        "DatetimeExtractor.execute": {
            "name": "execute",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "bs4.Tag",
                    "bs4.BeautifulSoup"
                ],
                "soup": [
                    "str",
                    "Set[str]",
                    "bs4.Tag",
                    "bs4.BeautifulSoup"
                ],
                "tag_article_area": [
                    "str",
                    "Set[str]",
                    "bs4.Tag",
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "ArticleAnalyzer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clue_article": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ArticleAnalyzer.create_article": {
            "name": "create_article",
            "location": 37,
            "return": [
                "mediaarchiver.article.Article"
            ],
            "arguments": {
                "self": [],
                "beautiful_soup": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Optional[Dict[str,int]]",
                    "Dict[str,int]",
                    "Optional[str]",
                    "None"
                ],
                "tag_article_area": [
                    "bs4.Tag",
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "ArticleAnalyzer.is_target_image_tag": {
            "name": "is_target_image_tag",
            "location": 48,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "bs4.Tag",
                    "T"
                ],
                "image_tag": [
                    "bs4.Tag",
                    "str",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/htmlanalyzer/article_page_url_analyzer.py": {
        "ArticlePageUrlAnalyzer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "List"
                ]
            }
        }
    },
    "media-archiver-master/mediaarchiver/htmlanalyzer/__init__.py": {},
    "media-archiver-master/mediaarchiver/sites/twitter.py": {
        "Position.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [],
                "account": []
            }
        },
        "Position.move": {
            "name": "move",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_position": []
            }
        },
        "Position.is_updated": {
            "name": "is_updated",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.build_blog_home_url": {
            "name": "build_blog_home_url",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "account": []
            }
        },
        "TimelineScanner.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [],
                "account": []
            }
        },
        "TimelineScanner.scan_timeline": {
            "name": "scan_timeline",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimelineScanner.extract_position": {
            "name": "extract_position",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "json_response": []
            }
        },
        "TimelineScanner.extract_article": {
            "name": "extract_article",
            "location": 87,
            "return": [
                "List[mediaarchiver.article.Article]"
            ],
            "arguments": {
                "cls": [],
                "json_response": []
            }
        },
        "Twitter.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": []
            }
        },
        "Twitter.list_up_url_article_page": {
            "name": "list_up_url_article_page",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "account": [],
                "soup_diary_home_page": []
            }
        },
        "Twitter.list_up_article": {
            "name": "list_up_article",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        }
    },
    "media-archiver-master/mediaarchiver/sites/__init__.py": {
        "BlogHomeUrlBuilder.build_blog_home_url": {
            "name": "build_blog_home_url",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Type[BlogHomeUrlBuilder]"
                ],
                "account": [
                    "List[str]",
                    "Callable",
                    "mediaarchiver.models.TypeVarAccount",
                    "List[dict[str,Any]]",
                    "bs4.BeautifulSoup",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "ArticlePageUrlListUpTask.execute": {
            "name": "execute",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[int]",
                    "asgard.models.accounAccount",
                    "bs4.BeautifulSoup",
                    "mediaarchiver.models.TypeVarAccount"
                ],
                "soup_diary_home_page": [
                    "List[int]",
                    "asgard.models.accounAccount",
                    "bs4.BeautifulSoup",
                    "mediaarchiver.models.TypeVarAccount"
                ]
            }
        },
        "NonTimeLineBlogSiteArticlePageUrlListUpTask.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "monthly_archive_home_page_url_extractor": [
                    "int",
                    "Dict[int,set[int]]",
                    "bool",
                    "Dict[int,Set[int]]"
                ],
                "monthly_archive_page_url_list_up_task": [
                    "int",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "article_page_analyzer": [
                    "bool"
                ]
            }
        },
        "NonTimeLineBlogSiteArticlePageUrlListUpTask.execute": {
            "name": "execute",
            "location": 74,
            "return": [
                "List[str]",
                "str",
                "Optional[List[str]]",
                "Union[List,Tuple]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "soup_diary_home_page": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "BlogSite.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "BlogSite.list_up_article": {
            "name": "list_up_article",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "Counter"
                ]
            }
        },
        "NonTimeLineBlogSite.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "non_time_line_blog_site_context": [
                    "server.models.User"
                ]
            }
        },
        "NonTimeLineBlogSite.list_up_article": {
            "name": "list_up_article",
            "location": 116,
            "return": [
                "str",
                "list",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "asgard.models.job.ScheduledJob",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "NonTimeLineBlogSite.__request_diary_home_page": {
            "name": "__request_diary_home_page",
            "location": 136,
            "return": [
                "BeautifulSoup",
                "Optional[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "MonthlyArchiveHomePageUrlExtractor.execute": {
            "name": "execute",
            "location": 162,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "soup": [
                    "List[int]",
                    "bs4.BeautifulSoup",
                    "mediaarchiver.models.TypeVarAccount"
                ],
                "account": [
                    "List[int]",
                    "bs4.BeautifulSoup",
                    "mediaarchiver.models.TypeVarAccount"
                ]
            }
        },
        "AbstractMonthlyArchivePageUrlListUpTask.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "AbstractMonthlyArchivePageUrlListUpTask.execute": {
            "name": "execute",
            "location": 170,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "list_url_monthly_archive_home_page": [
                    "List[str]",
                    "int",
                    "str",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "MonthlyArchivePageUrlListUpTask.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_site_context": [
                    "Optional[starfish.core.util.logging.Log]",
                    "bool",
                    "None"
                ],
                "monthly_archive_url_analyzer": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "MonthlyArchivePageUrlListUpTask.execute": {
            "name": "execute",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "list_url_monthly_archive_home_page": [
                    "str"
                ]
            }
        }
    },
    "media-archiver-master/tests/conftest.py": {
        "mock_aioresponse": {
            "name": "mock_aioresponse",
            "location": 6,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "media-archiver-master/tests/test_download_order_generator.py": {
        "TestDownloadOrderGenerator.test_integration": {
            "name": "test_integration",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "pathlib.Path",
                    "Dict",
                    "str"
                ],
                "mock_aioresponse": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "None",
                    "path.Path",
                    "Optional[str]"
                ]
            }
        }
    },
    "media-archiver-master/tests/test_file_name_builder.py": {
        "TestDefaultFileNameBuilder.test": {
            "name": "test",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "created_date_time": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "media-archiver-master/tests/__init__.py": {},
    "media-archiver-master/tests/testlibraries/instance_resource.py": {},
    "media-archiver-master/tests/testlibraries/__init__.py": {}
}
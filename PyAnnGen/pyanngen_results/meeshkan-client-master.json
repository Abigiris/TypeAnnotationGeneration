{
    "meeshkan-client-master/run_pylint.py": {},
    "meeshkan-client-master/setup.py": {
        "build_docs": {
            "name": "build_docs",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SetupCommand.initialize_options": {
            "name": "initialize_options",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupCommand.finalize_options": {
            "name": "finalize_options",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupCommand.status": {
            "name": "status",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "SetupCommand.rmdir_if_exists": {
            "name": "rmdir_if_exists",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int"
                ]
            }
        },
        "BuildDistCommand.run": {
            "name": "run",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildDocumentationCommand.run": {
            "name": "run",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 118,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.run": {
            "name": "run",
            "location": 140,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/docs/source/conf.py": {},
    "meeshkan-client-master/examples/blocking_job.py": {
        "my_loop": {
            "name": "my_loop",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main_with_context_manager": {
            "name": "main_with_context_manager",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/hello_world.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/pytorch_mnist.py": {
        "train": {
            "name": "train",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "model": [
                    "str",
                    "Type[T]",
                    "torch.nn.Module",
                    "List[Tuple[int, int, float]]"
                ],
                "device": [
                    "int",
                    "torch.Tensor"
                ],
                "train_loader": [
                    "int",
                    "list"
                ],
                "optimizer": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ],
                "epoch": [
                    "str",
                    "float"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "model": [
                    "List[str]",
                    "Callable"
                ],
                "device": [
                    "Callable"
                ],
                "test_loader": [
                    "str",
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "meeshkan-client-master/examples/report.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/report_condition.py": {
        "check_exp": {
            "name": "check_exp",
            "location": 7,
            "return": [
                "bool",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/report_multiple.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/sagemaker/source/data.py": {
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.add_word": {
            "name": "add_word",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bytes",
                    "List",
                    "str",
                    "List[str]",
                    "torch.LongTensor"
                ]
            }
        },
        "Dictionary.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Corpus.tokenize": {
            "name": "tokenize",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "meeshkan-client-master/examples/sagemaker/source/generate.py": {
        "model_fn": {
            "name": "model_fn",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "model_dir": [
                    "str",
                    "Union[os.PathLike,str]"
                ]
            }
        },
        "input_fn": {
            "name": "input_fn",
            "location": 38,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "serialized_input_data": [
                    "Dict[str,str]",
                    "int",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ],
                "content_type": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "output_fn": {
            "name": "output_fn",
            "location": 48,
            "return": [
                "Tuple[(str, _T1)]"
            ],
            "arguments": {
                "prediction_output": [
                    "Tuple[Union[int,slice,int,slice]]",
                    "torch.Tensor",
                    "Tuple[Union[int,slice],Union[int,slice]]"
                ],
                "accept": [
                    "Text",
                    "str",
                    "int",
                    "Dict",
                    "List",
                    "Dict[str,str]"
                ]
            }
        },
        "predict_fn": {
            "name": "predict_fn",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str,Any]"
                ],
                "model": [
                    "Set[int]",
                    "int"
                ]
            }
        }
    },
    "meeshkan-client-master/examples/sagemaker/source/rnn.py": {
        "RNNModel.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_type": [
                    "str",
                    "float"
                ],
                "ntoken": [
                    "str",
                    "bool"
                ],
                "ninp": [
                    "str",
                    "float",
                    "Mapping"
                ],
                "nhid": [
                    "str",
                    "int"
                ],
                "nlayers": [
                    "str",
                    "int"
                ],
                "dropout": [
                    "float",
                    "Optional[str]",
                    "Mapping"
                ],
                "tie_weights": [
                    "bool",
                    "Tuple[str]",
                    "Type[object]",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "RNNModel.init_weights": {
            "name": "init_weights",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNNModel.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "Callable",
                    "str"
                ],
                "hidden": [
                    "int",
                    "float",
                    "Tuple",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "RNNModel.init_hidden": {
            "name": "init_hidden",
            "location": 53,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "bsz": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None",
                    "List[Tuple[int,int]]",
                    "Union[int,str]",
                    "List[tuple[Union[int,int]]]",
                    "int"
                ]
            }
        }
    },
    "meeshkan-client-master/examples/sagemaker/source/train.py": {
        "batchify": {
            "name": "batchify",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "bsz": []
            }
        },
        "repackage_hidden": {
            "name": "repackage_hidden",
            "location": 131,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "h": []
            }
        },
        "get_batch": {
            "name": "get_batch",
            "location": 148,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "source": [],
                "i": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 155,
            "return": [
                "float"
            ],
            "arguments": {
                "data_source": []
            }
        },
        "train": {
            "name": "train",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/examples/sagemaker/source/__init__.py": {},
    "meeshkan-client-master/meeshkan/agent.py": {
        "__verify_version": {
            "name": "__verify_version",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "is_running": {
            "name": "is_running",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_stop_if_running": {
            "name": "_stop_if_running",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/meeshkan/exceptions.py": {
        "UnauthorizedRequestException.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Text"
                ]
            }
        },
        "OldVersionException.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobNotFoundException.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "TrackedScalarNotFoundException.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Text"
                ]
            }
        },
        "SageMakerNotAvailableException.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "DeferredImportException.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DeferredImportException.__getattr__": {
            "name": "__getattr__",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AgentNotAvailableException.__index__": {
            "name": "__index__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MismatchingIPythonKernelException.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "found_kernel_type": [
                    "str"
                ],
                "expected_kernel_type": [
                    "str"
                ]
            }
        },
        "InvalidTypeForFunctionSubmission.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "Sequence[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/__build__.py": {
        "_build_api": {
            "name": "_build_api",
            "location": 8,
            "return": [
                "bool",
                "Api"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "cloud_client": [
                    "str",
                    "cerise.config.Config"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/__init__.py": {},
    "meeshkan-client-master/meeshkan/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "int",
                    "slice"
                ],
                "silent": [
                    "int",
                    "Dict",
                    "Set",
                    "str",
                    "IO",
                    "IO[str]",
                    "bool"
                ]
            }
        },
        "help_cmd": {
            "name": "help_cmd",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "daemon_status": {
            "name": "daemon_status",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "report": {
            "name": "report",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "job_identifier": [
                    "str",
                    "bytes",
                    "requests.Response"
                ]
            }
        },
        "submit": {
            "name": "submit",
            "location": 162,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "name": [
                    "str",
                    "Tuple",
                    "Dict[str,Any]"
                ],
                "report_interval": [
                    "str",
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        },
        "cancel_job": {
            "name": "cancel_job",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "job_identifier": [
                    "str",
                    "bytes",
                    "requests.Response"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_jobs": {
            "name": "list_jobs",
            "location": 222,
            "return": [
                "None",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "logs": {
            "name": "logs",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "job_identifier": [
                    "str",
                    "bytes"
                ]
            }
        },
        "notifications": {
            "name": "notifications",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "job_identifier": [
                    "str",
                    "bytes",
                    "requests.Response"
                ]
            }
        },
        "sorry": {
            "name": "sorry",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear": {
            "name": "clear",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "im_bored": {
            "name": "im_bored",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DefGroup.parse_args": {
            "name": "parse_args",
            "location": 43,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "args": []
            }
        },
        "DefGroup.resolve_command": {
            "name": "resolve_command",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.Context"
                ],
                "args": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/__types__.py": {
        "ScalarIndexPairing.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "bool"
                ],
                "idx": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/__utils__.py": {
        "get_auth": {
            "name": "get_auth",
            "location": 21,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "save_token": {
            "name": "save_token",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "_get_api": {
            "name": "_get_api",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_build_cloud_client": {
            "name": "_build_cloud_client",
            "location": 47,
            "return": [
                "meeshkan.core.cloud.CloudClient"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "logging.Logger"
                ],
                "credentials": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "logging.Logger"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/__version__.py": {},
    "meeshkan-client-master/meeshkan/api/conditions.py": {
        "add_condition": {
            "name": "add_condition",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/meeshkan/api/external_job.py": {
        "as_blocking_job": {
            "name": "as_blocking_job",
            "location": 23,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "job_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "report_interval_secs": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "create_blocking_job": {
            "name": "create_blocking_job",
            "location": 59,
            "return": [
                "ExternalJobWrapper"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "float",
                    "None",
                    "Dict"
                ],
                "report_interval_secs": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[str]",
                    "float",
                    "Dict"
                ]
            }
        },
        "register_external_job": {
            "name": "register_external_job",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [
                    "bool",
                    "uuid.UUID",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "unregister_external_job": {
            "name": "unregister_external_job",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [
                    "bool",
                    "uuid.UUID",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ExternalJobWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Dict",
                    "uuid.UUID",
                    "List[int]",
                    "Union[str,uuid.UUID]",
                    "None",
                    "Optional[List[int]]"
                ]
            }
        },
        "ExternalJobWrapper.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalJobWrapper.__exit__": {
            "name": "__exit__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "as_blocking_job.job_decorator": {
            "name": "job_decorator",
            "location": 49,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "as_blocking_job.job_decorator.func_wrapper": {
            "name": "func_wrapper",
            "location": 51,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/meeshkan/api/scalars.py": {
        "report_scalar": {
            "name": "report_scalar",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "val_name": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/api/utils.py": {
        "submit_notebook": {
            "name": "submit_notebook",
            "location": 27,
            "return": [
                "None",
                "str",
                "bool",
                "Type[GenericList]",
                "Type[Declared]",
                "pathlib.Path"
            ],
            "arguments": {
                "job_name": [
                    "str",
                    "None",
                    "Optional[float]",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "report_interval": [
                    "str",
                    "None",
                    "Optional[float]",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "notebook_password": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "Set[int]",
                    "Optional[Set[int]]",
                    "Optional[str]",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "Optional[SparkSession]"
                ]
            }
        },
        "submit_function": {
            "name": "submit_function",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "bool"
                ],
                "job_name": [
                    "str",
                    "int",
                    "None"
                ],
                "report_interval": [
                    "str",
                    "int",
                    "None"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "_verify_valid_callable": {
            "name": "_verify_valid_callable",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Type",
                    "mypy.types.Type",
                    "ics.types.ContainerItem",
                    "Type[Any]",
                    "exporwiki.types.MissionType"
                ]
            }
        },
        "_write_function_script_file": {
            "name": "_write_function_script_file",
            "location": 106,
            "return": [
                "pathlib.Path",
                "tuple",
                "Union[str, pathlib.Path]",
                "str",
                "Set[pathlib.Path]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Path",
                    "int",
                    "BinaryIO"
                ],
                "entry_point_function": [
                    "str",
                    "Mapping",
                    "waterbutler.core.path.WaterButlerPath",
                    "Mapping[str,Any]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_unindent": {
            "name": "_unindent",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "ByteString",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_write_globals": {
            "name": "_write_globals",
            "location": 146,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "func": [
                    "str",
                    "List[Tuple[int,int]]",
                    "Sequence[int]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "_entry_point_for_custom_script": {
            "name": "_entry_point_for_custom_script",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "func_name": [
                    "str",
                    "List[str]"
                ],
                "load_globals_func_name": [
                    "str",
                    "List[str]"
                ],
                "deserialize_func_name": [
                    "str",
                    "List[str]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_global_loading_function": {
            "name": "_global_loading_function",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "func_name": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "globals_file": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "deserialize_func_name": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_generate_random_function_name": {
            "name": "_generate_random_function_name",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "_verify_ipython_notebook_kernel": {
            "name": "_verify_ipython_notebook_kernel",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "ipython_kernel": [
                    "str",
                    "List[str]",
                    "BaseException"
                ]
            }
        },
        "_get_notebook_path_generic": {
            "name": "_get_notebook_path_generic",
            "location": 196,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "get_ipython_function": [
                    "Optional[Callable[,Any]]",
                    "Callable[,Any]",
                    "List[Union[int,Any]]",
                    "Optional[Any]",
                    "None",
                    "Any",
                    "Optional[Tuple[str,Any]]",
                    "Union[str,None]",
                    "Tuple[Union[str,Any]]",
                    "str"
                ],
                "list_servers_function": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Union[Any,str]]",
                    "Any",
                    "Optional[list]",
                    "List",
                    "Iterable[object]"
                ],
                "connection_file_function": [
                    "Callable[,str]",
                    "str",
                    "bool",
                    "List[str]",
                    "path.Path"
                ],
                "notebook_password": [
                    "str",
                    "None",
                    "bool",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "_notebook_authenticated_session": {
            "name": "_notebook_authenticated_session",
            "location": 249,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Dict[str,str]"
                ],
                "port": [
                    "int",
                    "str",
                    "float"
                ],
                "nb_password": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/api/__init__.py": {},
    "meeshkan-client-master/meeshkan/core/api.py": {
        "ExternalJobsApi.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ExternalJobsApi.create_external_job": {
            "name": "create_external_job",
            "location": 30,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "poll_interval": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ExternalJobsApi.register_active_external_job": {
            "name": "register_active_external_job",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ExternalJobsApi.unregister_active_external_job": {
            "name": "unregister_active_external_job",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Api.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": [
                    "str"
                ],
                "service": [
                    "str",
                    "None"
                ],
                "task_poller": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bytes",
                    "golem_messages.message.tasks.ReportComputedTask"
                ],
                "sagemaker_job_monitor": [
                    "str",
                    "None"
                ],
                "notifier": [
                    "str",
                    "None"
                ]
            }
        },
        "Api.__enter__": {
            "name": "__enter__",
            "location": 69,
            "return": [
                "Api",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.__exit__": {
            "name": "__exit__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Api.external_jobs": {
            "name": "external_jobs",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.register_with_pyro": {
            "name": "register_with_pyro",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "daemon": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Api.get_notification_status": {
            "name": "get_notification_status",
            "location": 87,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Api.find_job_id": {
            "name": "find_job_id",
            "location": 124,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "Optional[Tuple[Any,Any]]",
                "List",
                "Optional[Dict[str,Any]]",
                "Tuple[Type]",
                "Pattern",
                "List[bool]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "None",
                    "uuid.UUID",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "job_number": [
                    "int",
                    "None",
                    "str",
                    "uuid.UUID",
                    "Iterable[int]",
                    "Optional[Iterable[int]]",
                    "Optional[str]"
                ],
                "pattern": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "uuid.UUID",
                    "Optional[Iterable[int]]",
                    "Optional[str]"
                ]
            }
        },
        "Api.cancel_job": {
            "name": "cancel_job",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Api.get_job": {
            "name": "get_job",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Api.get_notification_history": {
            "name": "get_notification_history",
            "location": 168,
            "return": [
                "Dict",
                "Optional[str]",
                "str",
                "List",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "Api.find_job_id_by_identifier": {
            "name": "find_job_id_by_identifier",
            "location": 185,
            "return": [
                "Dict[str, str]",
                "str",
                "Callable[[str, str], None]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "Api.get_job_output": {
            "name": "get_job_output",
            "location": 208,
            "return": [
                "Tuple",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Api.submit": {
            "name": "submit",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "cwd": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Callable",
                    "List[Union[str,Any]]"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Callable",
                    "List[Union[str,Any]]"
                ],
                "poll_interval": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Callable",
                    "List[Union[str,Any]]"
                ]
            }
        },
        "Api.monitor_sagemaker": {
            "name": "monitor_sagemaker",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "Optional[float]",
                    "None",
                    "float",
                    "Optional[str]"
                ],
                "poll_interval": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "Api.list_jobs": {
            "name": "list_jobs",
            "location": 239,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.add_stop_callback": {
            "name": "add_stop_callback",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "List",
                    "Callable[,T]",
                    "str",
                    "Callable[,None]"
                ]
            }
        },
        "Api.report_scalar": {
            "name": "report_scalar",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "Api.add_condition": {
            "name": "add_condition",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int"
                ],
                "serialized_condition": [
                    "int"
                ],
                "only_relevant": [
                    "int"
                ]
            }
        },
        "Api.get_updates": {
            "name": "get_updates",
            "location": 263,
            "return": [
                "Dict[tuple[Union[str,Any]],Union[str,Any]]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Api.stop": {
            "name": "stop",
            "location": 270,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.find_job_id.filter_jobs": {
            "name": "filter_jobs",
            "location": 130,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "condition": [
                    "Callable[[None], bool]",
                    "type"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/cloud.py": {
        "CloudClient.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud_url": [
                    "str"
                ],
                "token_store": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "refresh_token": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Any",
                    "Optional[bool]",
                    "Optional[Union[str,Any]]"
                ],
                "build_session": [
                    "bool",
                    "Sequence[str]",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "CloudClient.__enter__": {
            "name": "__enter__",
            "location": 44,
            "return": [
                "CloudClient"
            ],
            "arguments": {
                "self": [
                    "_TCloudClient@@CloudClient@@"
                ]
            }
        },
        "CloudClient.__exit__": {
            "name": "__exit__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "CloudClient._post": {
            "name": "_post",
            "location": 50,
            "return": [
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str"
                ],
                "token": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "CloudClient._check_for_errors": {
            "name": "_check_for_errors",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "res": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "golem_messages.datastructures.tasks.TaskHeader",
                    "float"
                ]
            }
        },
        "CloudClient._post_gql_payload": {
            "name": "_post_gql_payload",
            "location": 88,
            "return": [
                "bool",
                "List[pathlib.Path]",
                "list"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "int",
                    "List[str]",
                    "Union[str,pathlib.Path]"
                ],
                "retries": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "logging.LogRecord",
                    "Dict[str,List[str]]",
                    "Sequence[Sequence[T]]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "delay": [
                    "float",
                    "List[int]",
                    "bool",
                    "golem_messages.message.tasks.WantToComputeTask",
                    "int"
                ]
            }
        },
        "CloudClient.post_payload": {
            "name": "post_payload",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Optional[Type]",
                    "Dict",
                    "Type",
                    "None"
                ]
            }
        },
        "CloudClient.get_new_token": {
            "name": "get_new_token",
            "location": 121,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "str"
                ]
            }
        },
        "CloudClient._upload_file": {
            "name": "_upload_file",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "requests.Response",
                    "Dict",
                    "str",
                    "Optional[dict]",
                    "None"
                ],
                "url": [
                    "requests.Response",
                    "Dict",
                    "str",
                    "Optional[dict]",
                    "None"
                ],
                "headers": [
                    "requests.Response",
                    "Dict",
                    "str",
                    "Optional[dict]",
                    "None"
                ],
                "file": [
                    "str",
                    "requests.Response",
                    "Optional[dict]"
                ]
            }
        },
        "CloudClient.post_payload_with_file": {
            "name": "post_payload_with_file",
            "location": 140,
            "return": [
                "str",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path",
                    "None",
                    "Optional[str]"
                ],
                "download_link": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Dict",
                    "str"
                ]
            }
        },
        "CloudClient.notify_service_start": {
            "name": "notify_service_start",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudClient.pop_tasks": {
            "name": "pop_tasks",
            "location": 185,
            "return": [
                "List[Union[(meeshkan.core.tasks.CreateGitHubJobTask, meeshkan.core.tasks.EmptyTask, meeshkan.core.tasks.StopTask)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudClient.close": {
            "name": "close",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudTokenStore.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ],
                "refresh_token": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CloudTokenStore._fetch_token": {
            "name": "_fetch_token",
            "location": 228,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudClient._check_for_errors.contains_unauthenticated": {
            "name": "contains_unauthenticated",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "errs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/config.py": {
        "ensure_base_dirs": {
            "name": "ensure_base_dirs",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "str",
                    "Mapping"
                ]
            }
        },
        "init_config": {
            "name": "init_config",
            "location": 119,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "credentials_path": [
                    "pathlib.Path",
                    "str"
                ],
                "force_refresh": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ensure_base_dirs.create_dir_if_not_exist": {
            "name": "create_dir_if_not_exist",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud_url": [
                    "str"
                ],
                "sentry_dsn": [
                    "str",
                    "None",
                    "Dict",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "Configuration.from_yaml": {
            "name": "from_yaml",
            "location": 52,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "str"
                ]
            }
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "git_access_token": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Credentials.from_isi": {
            "name": "from_isi",
            "location": 71,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "Credentials.to_isi": {
            "name": "to_isi",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "refresh_token": [
                    "str",
                    "None",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ],
                "git_access_token": [
                    "bytes",
                    "None"
                ],
                "path": [
                    "pathlib.Path",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/logger.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "log_config": [
                    "bool",
                    "pathlib.Path",
                    "tuple",
                    "Dict[str, Any]",
                    "dict"
                ],
                "silent": [
                    "bool",
                    "pathlib.Path",
                    "Tuple",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "remove_non_file_handlers": {
            "name": "remove_non_file_handlers",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_logging.prepare_filenames": {
            "name": "prepare_filenames",
            "location": 27,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "lightbus.config.Config",
                    "dict",
                    "opentrons.config.robot_configs.robot_config"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/oauth.py": {
        "TokenStore.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "Sequence",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TokenStore._fetch_token": {
            "name": "_fetch_token",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenStore.get_token": {
            "name": "get_token",
            "location": 24,
            "return": [
                "Type",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/sagemaker_monitor.py": {
        "SageMakerHelper.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "None",
                    "bytes",
                    "asyncio.LifoQueue",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "sagemaker_session": [
                    "str",
                    "None"
                ]
            }
        },
        "SageMakerHelper.__has_client": {
            "name": "__has_client",
            "location": 57,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "SageMakerHelper.check_or_build_connection": {
            "name": "check_or_build_connection",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SageMakerHelper.build_client_or_none": {
            "name": "build_client_or_none",
            "location": 94,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "SageMakerHelper.get_job_status": {
            "name": "get_job_status",
            "location": 103,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SageMakerHelper.wait_for_job_finish": {
            "name": "wait_for_job_finish",
            "location": 122,
            "return": [
                "str",
                "List[Dict[str,Any]]",
                "List[str]",
                "Optional[str]",
                "Dict[Any,str]",
                "Dict[int,str]",
                "Type",
                "Dict[str,list[Any]]"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SageMakerHelper.get_training_job_analytics_df": {
            "name": "get_training_job_analytics_df",
            "location": 151,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str"
                ]
            }
        },
        "JobScalarHelper.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "JobScalarHelper.add_new_scalars_from": {
            "name": "add_new_scalars_from",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics_dataframe": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "SageMakerJobMonitor.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_loop": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "sagemaker_helper": [
                    "bool",
                    "None",
                    "Union[int,Tuple[int,int]]",
                    "bytes",
                    "int",
                    "Tuple[Union[int,int]]"
                ],
                "notify_start": [
                    "int",
                    "None",
                    "List",
                    "List[float]",
                    "asyncio.Event",
                    "List[str]",
                    "threading.Event"
                ],
                "notify_update": [
                    "bool",
                    "None",
                    "Union[int,Tuple[int,int]]",
                    "bytes",
                    "int",
                    "Tuple[Union[int,int]]"
                ],
                "notify_finish": [
                    "bool",
                    "None",
                    "Union[int,Tuple[int,int]]",
                    "bytes",
                    "int",
                    "Tuple[Union[int,int]]"
                ],
                "scalar_helper_factory": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,int,int]]]"
                ]
            }
        },
        "SageMakerJobMonitor.start": {
            "name": "start",
            "location": 214,
            "return": [
                "str",
                "Optional[asyncio.AbstractEventLoop]"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Awaitable[None]",
                    "str",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "SageMakerJobMonitor.query_scalars": {
            "name": "query_scalars",
            "location": 303,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SageMakerJobMonitor.__query_and_report": {
            "name": "__query_and_report",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "SageMakerJobMonitor.create_job": {
            "name": "create_job",
            "location": 317,
            "return": [
                "meeshkan.core.job.jobs.SageMakerJob"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[int]"
                ],
                "poll_interval": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/scheduler.py": {
        "QueueProcessor.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueProcessor.start": {
            "name": "start",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue_": [
                    "int",
                    "Dict",
                    "BinaryIO",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "process_item": [
                    "int",
                    "Callable",
                    "List[str]",
                    "Callable[...,asyncio.coroutine]",
                    "..."
                ]
            }
        },
        "QueueProcessor.__process": {
            "name": "__process",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process_item": [
                    "Sequence",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "QueueProcessor.schedule_stop": {
            "name": "schedule_stop",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueProcessor.is_running": {
            "name": "is_running",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueProcessor.wait_stop": {
            "name": "wait_stop",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue_processor": [
                    "str"
                ],
                "notifier": [
                    "str",
                    "None"
                ],
                "event_loop": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Scheduler.jobs": {
            "name": "jobs",
            "location": 92,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.is_running": {
            "name": "is_running",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.__enter__": {
            "name": "__enter__",
            "location": 99,
            "return": [
                "Scheduler"
            ],
            "arguments": {
                "self": [
                    "_TScheduler@@Scheduler@@"
                ]
            }
        },
        "Scheduler.__exit__": {
            "name": "__exit__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Scheduler._handle_job": {
            "name": "_handle_job",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Scheduler.submit_job": {
            "name": "submit_job",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Scheduler.stop_job": {
            "name": "stop_job",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "Scheduler.register_external_job": {
            "name": "register_external_job",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Scheduler.unregister_external_job": {
            "name": "unregister_external_job",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Scheduler.__get_job_by_pid": {
            "name": "__get_job_by_pid",
            "location": 164,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "Dict"
                ]
            }
        },
        "Scheduler.add_condition": {
            "name": "add_condition",
            "location": 176,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "bytes",
                    "Dict"
                ]
            }
        },
        "Scheduler.report_scalar": {
            "name": "report_scalar",
            "location": 189,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "val": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Scheduler.get_job_by_id": {
            "name": "get_job_by_id",
            "location": 202,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "Scheduler.query_scalars": {
            "name": "query_scalars",
            "location": 208,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.__query_and_report": {
            "name": "__query_and_report",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Scheduler.start": {
            "name": "start",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.stop": {
            "name": "stop",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/serializer.py": {
        "Serializer.serialize": {
            "name": "serialize",
            "location": 15,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "Serializer.deserialize": {
            "name": "deserialize",
            "location": 19,
            "return": [
                "bool",
                "IO[str]",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "content": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Serializer.deserialize_func_as_str": {
            "name": "deserialize_func_as_str",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "func_name": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/service.py": {
        "_platform_is_darwin": {
            "name": "_platform_is_darwin",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_get_localhost": {
            "name": "_get_localhost",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminate_daemon_event": [
                    "bool",
                    "str",
                    "asyncio.Event",
                    "Iterable[str]",
                    "Dict[str,Any]",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Service.is_running": {
            "name": "is_running",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Service.api": {
            "name": "api",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Service._pyro_proxy": {
            "name": "_pyro_proxy",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Service.daemonize": {
            "name": "daemonize",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cloud_client_serialized": [
                    "bool",
                    "str",
                    "Callable",
                    "List[Tuple[int,str]]",
                    "List[tuple[Union[int,str]]]"
                ]
            }
        },
        "Service.start": {
            "name": "start",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "cloud_client_serialized": [
                    "Callable",
                    "Dict",
                    "Dict[str,Any]",
                    "MutableMapping",
                    "backup.config.Config",
                    "MutableMapping[str,Any]"
                ]
            }
        },
        "Service.stop": {
            "name": "stop",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/tasks.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_type": [
                    "str",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Task.describe": {
            "name": "describe",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyTask.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_input": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EmptyTask.describe": {
            "name": "describe",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopTask.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_identifier": [
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "StopTask.describe": {
            "name": "describe",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateGitHubJobTask.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "bool",
                    "str"
                ],
                "entry_point": [
                    "bool",
                    "str"
                ],
                "branch_or_commit": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "Dict",
                    "Optional[str]"
                ],
                "report_interval": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "CreateGitHubJobTask.describe": {
            "name": "describe",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskFactory.build": {
            "name": "build",
            "location": 68,
            "return": [
                "Union[(CreateGitHubJobTask, EmptyTask, StopTask)]"
            ],
            "arguments": {
                "json_task": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TaskPoller.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop_tasks": [
                    "str",
                    "List[str]",
                    "asyncio.Task"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/tracker.py": {
        "TrackingPoller.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notify_function": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "TrackerCondition.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerCondition.__contains__": {
            "name": "__contains__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val_name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TrackerCondition.__len__": {
            "name": "__len__",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerCondition.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.add_tracked": {
            "name": "add_tracked",
            "location": 102,
            "return": [
                "Optional[TrackerCondition]"
            ],
            "arguments": {
                "self": [],
                "val_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TrackerBase.add_condition": {
            "name": "add_condition",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.generate_image": {
            "name": "generate_image",
            "location": 128,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "history": [
                    "Dict",
                    "Dict[str,str]",
                    "Mapping[str,Any]",
                    "str",
                    "int"
                ],
                "output_path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "Deque",
                    "norfs.fs.base.Path",
                    "deque[str]"
                ],
                "title": [
                    "str",
                    "None",
                    "Optional[Union[Any,Any]]",
                    "Optional[Tuple[str,str]]",
                    "Any",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "TrackerBase._update_access": {
            "name": "_update_access",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase._verify_scalar_names_exist": {
            "name": "_verify_scalar_names_exist",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.get_updates": {
            "name": "get_updates",
            "location": 181,
            "return": [
                "Tuple[(Dict[(Any, List[meeshkan.__types__.ScalarIndexPairing])], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.refresh": {
            "name": "refresh",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.get_statistics": {
            "name": "get_statistics",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_name": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "from_beginning": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "TrackerBase.update": {
            "name": "update",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase._clean": {
            "name": "_clean",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackerBase.clean": {
            "name": "clean",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowTracker.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "TensorFlowTracker.update": {
            "name": "update",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowTracker.clean": {
            "name": "clean",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/__init__.py": {},
    "meeshkan-client-master/meeshkan/core/job/base.py": {
        "Trackable.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scalar_history": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Trackable.add_scalar_to_history": {
            "name": "add_scalar_to_history",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "scalar_name": [
                    "str",
                    "bool",
                    "Callable[[float],bool]",
                    "Callable[float,bool]",
                    "Optional[str]",
                    "None"
                ],
                "scalar_value": [
                    "str",
                    "bool",
                    "Callable[[float],bool]",
                    "Callable[float,bool]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Trackable.add_condition": {
            "name": "add_condition",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trackable.get_updates": {
            "name": "get_updates",
            "location": 31,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stoppable.terminate": {
            "name": "terminate",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseJob.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "bool",
                    "Callable[str,Any]",
                    "int",
                    "Callable[[str],Any]"
                ],
                "job_uuid": [
                    "str",
                    "None",
                    "Union[str,List[str]]",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "job_number": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "Sequence[T]"
                ],
                "name": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[List[str]]",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "poll_interval": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseJob.terminate": {
            "name": "terminate",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/job/executables.py": {
        "Executable.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "None",
                    "pathlib.Path",
                    "str",
                    "int",
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "Executable.launch_and_wait": {
            "name": "launch_and_wait",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.stdout": {
            "name": "stdout",
            "location": 36,
            "return": [
                "None",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.stderr": {
            "name": "stderr",
            "location": 40,
            "return": [
                "None",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.terminate": {
            "name": "terminate",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.convert_notebook": {
            "name": "convert_notebook",
            "location": 46,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "notebook_file": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "Executable.to_full_path": {
            "name": "to_full_path",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "cwd": [
                    "str"
                ]
            }
        },
        "ProcessExecutable.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "cwd": [
                    "List[str]",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "pathlib.Path"
                ],
                "output_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "ProcessExecutable._update_pid_and_wait": {
            "name": "_update_pid_and_wait",
            "location": 95,
            "return": [
                "bool",
                "int",
                "Union[int,float,complex]",
                "float",
                "Optional[str]",
                "Dict",
                "List[str]",
                "List",
                "List[dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessExecutable.launch_and_wait": {
            "name": "launch_and_wait",
            "location": 104,
            "return": [
                "List[int]",
                "float",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessExecutable.terminate": {
            "name": "terminate",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessExecutable.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessExecutable.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/job/jobs.py": {
        "SageMakerJob.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "status": [
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "poll_interval": [
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SageMakerJob.terminate": {
            "name": "terminate",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalJob.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "str",
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ],
                "job_uuid": [
                    "str",
                    "None",
                    "Optional[float]",
                    "uuid.UUID",
                    "float"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[float]",
                    "uuid.UUID",
                    "float"
                ],
                "desc": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ],
                "poll_interval": [
                    "str",
                    "None",
                    "Optional[float]",
                    "uuid.UUID",
                    "float"
                ]
            }
        },
        "ExternalJob.create": {
            "name": "create",
            "location": 60,
            "return": [
                "ExternalJob"
            ],
            "arguments": {
                "pid": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "poll_interval": [
                    "str",
                    "int"
                ]
            }
        },
        "ExternalJob.terminate": {
            "name": "terminate",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "job_number": [
                    "str",
                    "float",
                    "int",
                    "uuid.UUID",
                    "None",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "job_uuid": [
                    "str",
                    "None",
                    "int",
                    "uuid.UUID",
                    "float",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "uuid.UUID",
                    "float",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "desc": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Union[str,List[Any]]",
                    "List[Any]"
                ],
                "poll_interval": [
                    "str",
                    "None",
                    "int",
                    "uuid.UUID",
                    "float",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Job.pid": {
            "name": "pid",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.output_path": {
            "name": "output_path",
            "location": 97,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.stdout": {
            "name": "stdout",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.stderr": {
            "name": "stderr",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.launch_and_wait": {
            "name": "launch_and_wait",
            "location": 108,
            "return": [
                "float",
                "int",
                "str",
                "List",
                "Dict",
                "Union[str,float]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.terminate": {
            "name": "terminate",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.cancel": {
            "name": "cancel",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.to_dict": {
            "name": "to_dict",
            "location": 144,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.create_job": {
            "name": "create_job",
            "location": 153,
            "return": [
                "Job"
            ],
            "arguments": {
                "args": [],
                "job_number": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "cwd": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List]",
                    "List",
                    "Optional[Dict]",
                    "Dict"
                ],
                "name": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "poll_interval": [
                    "int",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "Union[str,List[str],Tuple[str,...]]",
                    "Callable",
                    "List[str]",
                    "Tuple[Union[str,...]]"
                ],
                "description": [
                    "int",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "Union[str,List[str],Tuple[str,...]]",
                    "Callable",
                    "List[str]",
                    "Tuple[Union[str,...]]"
                ],
                "output_path": [
                    "str",
                    "pathlib.Path",
                    "Callable[[], str]"
                ]
            }
        },
        "Job.__verify_python_executable": {
            "name": "__verify_python_executable",
            "location": 176,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/job/status.py": {
        "JobStatus.is_launched": {
            "name": "is_launched",
            "location": 17,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.is_running": {
            "name": "is_running",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.is_processed": {
            "name": "is_processed",
            "location": 27,
            "return": [
                "bool",
                "Union[List[str],List[Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.stale": {
            "name": "stale",
            "location": 31,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meeshkan-client-master/meeshkan/core/job/__init__.py": {},
    "meeshkan-client-master/meeshkan/git/utils.py": {
        "submit_git": {
            "name": "submit_git",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "Optional[str]",
                    "None"
                ],
                "entry_point": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "branch_or_commit": [
                    "bool",
                    "None",
                    "List[str]",
                    "List[pathlib.Path]",
                    "pathlib.Path",
                    "str",
                    "Union[str,pathlib.Path]",
                    "Optional[Union[str,pathlib.Path]]"
                ],
                "job_name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ],
                "report_interval_secs": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "GitRunner.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        },
        "GitRunner.pull_repo": {
            "name": "pull_repo",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "branch_or_commit": [
                    "List[str]",
                    "None",
                    "Callable",
                    "int",
                    "Optional[Callable]"
                ]
            }
        },
        "GitRunner.url": {
            "name": "url",
            "location": 96,
            "return": [
                "str",
                "bool",
                "Tuple",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRunner._is_active_branch": {
            "name": "_is_active_branch",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch_or_commit": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "GitRunner._git_access_token": {
            "name": "_git_access_token",
            "location": 115,
            "return": [
                "str",
                "Dict[str,Any]",
                "None",
                "Dict[str,bool]"
            ],
            "arguments": {
                "credentials": [
                    "Optional[dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "GitRunner._verify_git_exists": {
            "name": "_verify_git_exists",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GitRunner._wait_and_raise_on_error": {
            "name": "_wait_and_raise_on_error",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/git/__init__.py": {},
    "meeshkan-client-master/meeshkan/notifications/notifiers.py": {
        "Notifier.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Union[str,List[str]]",
                    "List[str]",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "Notifier.__add_to_history": {
            "name": "__add_to_history",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "List[str]",
                    "List",
                    "int",
                    "Tuple[str]",
                    "Dict[str,int]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "notification": [
                    "str",
                    "List[str]",
                    "List",
                    "int",
                    "Tuple[str]",
                    "Dict[str,int]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Notifier.get_notification_history": {
            "name": "get_notification_history",
            "location": 30,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Notifier.get_last_notification_status": {
            "name": "get_last_notification_status",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Notifier.notify_job_start": {
            "name": "notify_job_start",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool"
                ]
            }
        },
        "Notifier.notify_job_end": {
            "name": "notify_job_end",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "Notifier.notify": {
            "name": "notify",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "List",
                    "int"
                ],
                "image_path": [
                    "str",
                    "int",
                    "Dict",
                    "core.job.BaseJob"
                ],
                "n_iterations": [
                    "str",
                    "int",
                    "Dict",
                    "core.job.BaseJob"
                ],
                "iterations_unit": [
                    "Text",
                    "str",
                    "int",
                    "core.job.BaseJob",
                    "Dict"
                ]
            }
        },
        "Notifier._notify_job_start": {
            "name": "_notify_job_start",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "core.job.BaseJob"
                ]
            }
        },
        "Notifier._notify_job_end": {
            "name": "_notify_job_end",
            "location": 83,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Notifier._notify": {
            "name": "_notify",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "int",
                    "List",
                    "core.job.BaseJob"
                ],
                "image_path": [
                    "str",
                    "int",
                    "List",
                    "core.job.BaseJob"
                ],
                "n_iterations": [
                    "str",
                    "int",
                    "List",
                    "core.job.BaseJob"
                ],
                "iterations_unit": [
                    "Text",
                    "str",
                    "int",
                    "core.job.BaseJob",
                    "List"
                ]
            }
        },
        "LoggingNotifier.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "LoggingNotifier.log": {
            "name": "log",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LoggingNotifier._notify": {
            "name": "_notify",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "Exception",
                    "core.job.BaseJob",
                    "int",
                    "Union[str,uuid.UUID]"
                ],
                "image_path": [
                    "str",
                    "bool",
                    "None",
                    "uuid.UUID",
                    "Optional[str]"
                ],
                "n_iterations": [
                    "str",
                    "int"
                ],
                "iterations_unit": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "LoggingNotifier._notify_job_start": {
            "name": "_notify_job_start",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Optional[preacher.core.value.Value.Context]",
                    "Optional[str]"
                ]
            }
        },
        "LoggingNotifier._notify_job_end": {
            "name": "_notify_job_end",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "Optional[preacher.core.value.Value.Context]",
                    "None"
                ]
            }
        },
        "CloudNotifier.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post_payload": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "None",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "upload_file": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CloudNotifier._notify_job_start": {
            "name": "_notify_job_start",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "Callable",
                    "preacher.core.extraction.analysis.Analyzer"
                ]
            }
        },
        "CloudNotifier._input_vars_for_failed": {
            "name": "_input_vars_for_failed",
            "location": 144,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "base_job": [
                    "bool",
                    "core.job.BaseJob"
                ]
            }
        },
        "CloudNotifier._notify_job_end": {
            "name": "_notify_job_end",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Dict[str,Any]",
                    "str",
                    "core.job.BaseJob"
                ]
            }
        },
        "CloudNotifier._notify": {
            "name": "_notify",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "pathlib.Path"
                ],
                "image_path": [
                    "str"
                ],
                "n_iterations": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "iterations_unit": [
                    "Text",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "CloudNotifier._post": {
            "name": "_post",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mutation": [
                    "Callable",
                    "Sequence",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "variables": [
                    "str",
                    "Set[str]",
                    "pathlib.Path"
                ]
            }
        },
        "NotifierCollection.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotifierCollection.get_notification_history": {
            "name": "get_notification_history",
            "location": 234,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "NotifierCollection.get_last_notification_status": {
            "name": "get_last_notification_status",
            "location": 241,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "uuid.UUID",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "NotifierCollection.register_notifier": {
            "name": "register_notifier",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_notifier": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Callable[...,collections.abc.Awaitable]",
                    "Callable[...,Awaitable]",
                    "Callable"
                ]
            }
        },
        "NotifierCollection._notify_job_start": {
            "name": "_notify_job_start",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "core.job.BaseJob"
                ]
            }
        },
        "NotifierCollection._notify_job_end": {
            "name": "_notify_job_end",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NotifierCollection._notify": {
            "name": "_notify",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "int",
                    "core.job.BaseJob"
                ],
                "image_path": [
                    "str",
                    "int",
                    "core.job.BaseJob"
                ],
                "n_iterations": [
                    "str",
                    "int",
                    "core.job.BaseJob"
                ],
                "iterations_unit": [
                    "Text",
                    "str",
                    "int",
                    "core.job.BaseJob"
                ]
            }
        },
        "CloudNotifier._input_vars_for_failed.parse_stderr": {
            "name": "parse_stderr",
            "location": 150,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]",
                "None"
            ],
            "arguments": {
                "job": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/notifications/__init__.py": {},
    "meeshkan-client-master/meeshkan/notifications/__types__.py": {
        "NotificationWithStatusTime.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notification_type": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "FrozenSet[str]",
                    "None",
                    "frozenset"
                ],
                "status": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/sagemaker/lib.py": {
        "monitor": {
            "name": "monitor",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "job_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "poll_interval": [
                    "str",
                    "List",
                    "None"
                ]
            }
        }
    },
    "meeshkan-client-master/meeshkan/sagemaker/__init__.py": {},
    "meeshkan-client-master/tests/test_api.py": {
        "__get_job": {
            "name": "__get_job",
            "location": 27,
            "return": [
                "meeshkan.core.job.jobs.Job"
            ],
            "arguments": {
                "sleep_duration": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 32,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {}
        },
        "test_api_submits_job": {
            "name": "test_api_submits_job",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_api_stop_callbacks": {
            "name": "test_api_stop_callbacks",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_api_as_contextmanager": {
            "name": "test_api_as_contextmanager",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "test_get_notification_status_empty": {
            "name": "test_get_notification_status_empty",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "test_notification_history_no_notifier": {
            "name": "test_notification_history_no_notifier",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "test_notification_history_with_notifier": {
            "name": "test_notification_history_with_notifier",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "Mapping",
                    "tests.async_mock.MagicMock",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_get_job_output": {
            "name": "test_get_job_output",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_get_job": {
            "name": "test_get_job",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_find_job_id_by_id": {
            "name": "test_find_job_id_by_id",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": [
                    "pathlib.Path"
                ]
            }
        },
        "test_find_job_id_by_number": {
            "name": "test_find_job_id_by_number",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "test_find_job_id_by_pattern": {
            "name": "test_find_job_id_by_pattern",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "test_find_job_no_input": {
            "name": "test_find_job_no_input",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "test_find_job_id_precedence": {
            "name": "test_find_job_id_precedence",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "cleanup": []
            }
        },
        "mock_sagemaker_job_monitor": {
            "name": "mock_sagemaker_job_monitor",
            "location": 248,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "mock_api": {
            "name": "mock_api",
            "location": 253,
            "return": [
                "typing.Generator[Api]"
            ],
            "arguments": {
                "mock_sagemaker_job_monitor": []
            }
        },
        "test_starts_monitoring_queued_sagemaker_job": {
            "name": "test_starts_monitoring_queued_sagemaker_job",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [
                    "meeshkan.core.api.Api",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_does_not_start_monitoring_finished_sagemaker_job": {
            "name": "test_does_not_start_monitoring_finished_sagemaker_job",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [
                    "meeshkan.core.api.Api",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_api_stop_callbacks.callback": {
            "name": "callback",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExternalJobs.test_create_job_stores_job": {
            "name": "test_create_job_stores_job",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "meeshkan.core.api.Api",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestExternalJobs.test_register_active_job_notifies_start_and_end": {
            "name": "test_register_active_job_notifies_start_and_end",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "neuromation.api.Client",
                    "meeshkan.core.api.Api"
                ]
            }
        },
        "TestConnectionToNotebookServer.test_without_token_without_password": {
            "name": "test_without_token_without_password",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionToNotebookServer.test_with_token_without_password": {
            "name": "test_with_token_without_password",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionToNotebookServer.test_without_token_with_password": {
            "name": "test_without_token_with_password",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.get_valid_shell": {
            "name": "get_valid_shell",
            "location": 363,
            "return": [
                "unittest.mock.MagicMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.get_kernel_file": {
            "name": "get_kernel_file",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.test_from_non_ipython": {
            "name": "test_from_non_ipython",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.test_from_non_notebook_ipython": {
            "name": "test_from_non_notebook_ipython",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.test_from_notebook_ipython_no_connection_file": {
            "name": "test_from_notebook_ipython_no_connection_file",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.test_from_notebook_ipython": {
            "name": "test_from_notebook_ipython",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionSubmission.test_fail_verify": {
            "name": "test_fail_verify",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionSubmission.test_successful_submission_with_vars_and_args_or_kwargs": {
            "name": "test_successful_submission_with_vars_and_args_or_kwargs",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionSubmission.test_failing_submission_with_invalid_args_or_kwargs": {
            "name": "test_failing_submission_with_invalid_args_or_kwargs",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookPathDiscovery.test_from_notebook_ipython.fake_get": {
            "name": "fake_get",
            "location": 393,
            "return": [
                "MockResponse",
                "bool",
                "List[Dict[str,Any]]",
                "Dict",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Callable[[], T]"
                ]
            }
        },
        "TestNotebookPathDiscovery.test_from_notebook_ipython.fake_server": {
            "name": "fake_server",
            "location": 408,
            "return": [
                "List[dict[Text,Union[Text,int]]]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "TestFunctionSubmission.test_successful_submission_with_vars_and_args_or_kwargs.empty_test_function": {
            "name": "empty_test_function",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "a": []
            }
        },
        "TestFunctionSubmission.test_successful_submission_with_vars_and_args_or_kwargs.fake_submit": {
            "name": "fake_submit",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "name": [],
                "poll_interval": []
            }
        },
        "TestFunctionSubmission.test_successful_submission_with_vars_and_args_or_kwargs.verify_content": {
            "name": "verify_content",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_result": []
            }
        },
        "TestFunctionSubmission.test_failing_submission_with_invalid_args_or_kwargs.empty_test_function": {
            "name": "empty_test_function",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Tuple[float, float]",
                    "int",
                    "Sequence[T]",
                    "List[str]"
                ]
            }
        },
        "TestFunctionSubmission.test_failing_submission_with_invalid_args_or_kwargs.fake_submit": {
            "name": "fake_submit",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "poll_interval": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "TestFunctionSubmission.test_failing_submission_with_invalid_args_or_kwargs.verify_content": {
            "name": "verify_content",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "error_msg": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/test_cloud.py": {
        "_build_session": {
            "name": "_build_session",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]",
                "dict",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "post_side_effect": [
                    "[dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "_mock_token_store": {
            "name": "_mock_token_store",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_post_payloads": {
            "name": "test_post_payloads",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_payloads_unauthorized_retry": {
            "name": "test_post_payloads_unauthorized_retry",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_payloads_raises_error_for_multiple_401s": {
            "name": "test_post_payloads_raises_error_for_multiple_401s",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop_tasks": {
            "name": "test_pop_tasks",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_payloads.mocked_requests_post": {
            "name": "mocked_requests_post",
            "location": 30,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "test_post_payloads_unauthorized_retry.mocked_requests_post": {
            "name": "mocked_requests_post",
            "location": 58,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "test_post_payloads_raises_error_for_multiple_401s.mocked_requests_post": {
            "name": "mocked_requests_post",
            "location": 87,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_config.py": {
        "test_config_init": {
            "name": "test_config_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_credentials_change_without_prev_creds": {
            "name": "test_credentials_change_without_prev_creds",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_credentials_change_no_error": {
            "name": "test_credentials_change_no_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_credentials_change_without_git": {
            "name": "test_credentials_change_without_git",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_credentials_changes_without_token": {
            "name": "test_credentials_changes_without_token",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_daemon.py": {
        "mock_cloud_client": {
            "name": "mock_cloud_client",
            "location": 8,
            "return": [
                "PicklableMock"
            ],
            "arguments": {}
        },
        "stop_if_running": {
            "name": "stop_if_running",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_stop_agent": {
            "name": "start_stop_agent",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_start_stop": {
            "name": "test_start_stop",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "start_stop_agent": [
                    "str",
                    "List[list[int]]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[List[int]]"
                ],
                "mock_cloud_client": [
                    "bool",
                    "Callable",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_double_start": {
            "name": "test_double_start",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "start_stop_agent": [
                    "List[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "List[list[int]]",
                    "List[List[int]]"
                ],
                "mock_cloud_client": [
                    "str",
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_getting_api_before_start_raises_exception": {
            "name": "test_getting_api_before_start_raises_exception",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_external_jobs.py": {
        "test_as_blocking_job_calls_function_with_correct_arguments": {
            "name": "test_as_blocking_job_calls_function_with_correct_arguments",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_as_blocking_job_calls_service_api": {
            "name": "test_as_blocking_job_calls_service_api",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_blocking_job_calls_function_with_correct_arguments.func": {
            "name": "func",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_blocking_job_calls_service_api.func": {
            "name": "func",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_git.py": {
        "clean": {
            "name": "clean",
            "location": 19,
            "return": [
                "str",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "test_git_verify": {
            "name": "test_git_verify",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_git_access_token": {
            "name": "test_git_access_token",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gitrunner_init": {
            "name": "test_gitrunner_init",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "clean": [
                    "str",
                    "int"
                ]
            }
        },
        "test_gitrunner_pull_branch": {
            "name": "test_gitrunner_pull_branch",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "clean": [
                    "Callable",
                    "str",
                    "Tuple[float, float, float, float, float]"
                ]
            }
        },
        "test_gitrunner_pull_commit": {
            "name": "test_gitrunner_pull_commit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "clean": [
                    "Callable",
                    "str",
                    "Tuple[float, float, float, float, float]"
                ]
            }
        },
        "clean.remove_tempdir_from_gitrunner": {
            "name": "remove_tempdir_from_gitrunner",
            "location": 20,
            "return": [],
            "arguments": {
                "gitrunner": [
                    "meeshkan.giutils.GitRunner",
                    "str",
                    "int"
                ]
            }
        },
        "test_git_verify.fake_which": {
            "name": "fake_which",
            "location": 27,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "List[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_job.py": {
        "clean_up": {
            "name": "clean_up",
            "location": 18,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_proc_exec_output_path": {
            "name": "test_proc_exec_output_path",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_up": [
                    "Generator",
                    "pathlib.Path"
                ]
            }
        },
        "test_proc_exec_args_raise_file_not_found": {
            "name": "test_proc_exec_args_raise_file_not_found",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_args_to_full_path_with_runtime": {
            "name": "test_job_args_to_full_path_with_runtime",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "example_job": {
            "name": "example_job",
            "location": 59,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "notebook_job": {
            "name": "notebook_job",
            "location": 65,
            "return": [
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "test_job_cancel_changes_status": {
            "name": "test_job_cancel_changes_status",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "example_job": []
            }
        },
        "test_job_inherits_attributes": {
            "name": "test_job_inherits_attributes",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "example_job": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_job_add_tracked_works": {
            "name": "test_job_add_tracked_works",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "example_job": [
                    "Dict[str, Any]",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_job_add_condition_works": {
            "name": "test_job_add_condition_works",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "example_job": []
            }
        },
        "test_executable_notebook": {
            "name": "test_executable_notebook",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "notebook_job": []
            }
        },
        "test_executable_notebook_run": {
            "name": "test_executable_notebook_run",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "notebook_job": [
                    "Dict[str,Any]"
                ]
            }
        },
        "clean_up.remove_file": {
            "name": "remove_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "List[pathlib.Path]"
                ]
            }
        },
        "clean_up.remove_stdout_stderr": {
            "name": "remove_stdout_stderr",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executable_notebook_run.clean_failing_lines": {
            "name": "clean_failing_lines",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/test_main.py": {
        "run_cli": {
            "name": "run_cli",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "inputs": [
                    "bool",
                    "None",
                    "Iterable[int]",
                    "Tuple",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "catch_exceptions": [
                    "bool",
                    "Iterable[int]",
                    "Tuple",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_build_session": {
            "name": "_build_session",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]",
                "dict",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "post_return_value": [
                    "Optional[Tuple[str,Any]]",
                    "str",
                    "None",
                    "int",
                    "Tuple[Union[str,Any]]"
                ],
                "request_return_value": [
                    "Optional[str]",
                    "None",
                    "List[int]",
                    "Optional[Type[Any]]",
                    "str",
                    "Type",
                    "Optional[int]",
                    "Union[Exception,str]",
                    "int",
                    "Exception"
                ]
            }
        },
        "_token_store": {
            "name": "_token_store",
            "location": 37,
            "return": [
                "tests.utils.DummyStore"
            ],
            "arguments": {
                "build_session": [
                    "Dict",
                    "None",
                    "tartare.core.models.DataSource",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "pre_post_tests": {
            "name": "pre_post_tests",
            "location": 47,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_setup_if_exists": {
            "name": "test_setup_if_exists",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_setup_if_doesnt_exists": {
            "name": "test_setup_if_doesnt_exists",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_version_mismatch_major": {
            "name": "test_version_mismatch_major",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_version_mismatch": {
            "name": "test_version_mismatch",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_start_stop": {
            "name": "test_start_stop",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_double_start": {
            "name": "test_double_start",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_start_fail": {
            "name": "test_start_fail",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_start_with_401_fails": {
            "name": "test_start_with_401_fails",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_start_submit": {
            "name": "test_start_submit",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_sorry_success": {
            "name": "test_sorry_success",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_sorry_upload_fail": {
            "name": "test_sorry_upload_fail",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": []
            }
        },
        "test_sorry_connection_fail": {
            "name": "test_sorry_connection_fail",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_empty_list": {
            "name": "test_empty_list",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": []
            }
        },
        "test_easter_egg": {
            "name": "test_easter_egg",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_clear": {
            "name": "test_clear",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "bool"
                ]
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "pre_post_tests": [
                    "Callable[[str,List],None]",
                    "str",
                    "Callable[str,List,None]"
                ]
            }
        },
        "pre_post_tests.stop_service": {
            "name": "stop_service",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_if_exists.to_isi": {
            "name": "to_isi",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "refresh_token": [],
                "git_access_token": []
            }
        },
        "test_setup_if_doesnt_exists.to_isi": {
            "name": "to_isi",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "refresh_token": [
                    "str",
                    "Tuple[str, str]"
                ],
                "git_access_token": [
                    "bool",
                    "str",
                    "boucanpy.core.security.TokenPayload"
                ]
            }
        },
        "test_start_fail.fail_notify_start": {
            "name": "fail_notify_start",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_submit.verify_finished": {
            "name": "verify_finished",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "out": [
                    "str",
                    "List[dict]"
                ]
            }
        },
        "test_sorry_success.mock_cc_builder": {
            "name": "mock_cc_builder",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "test_sorry_upload_fail.mock_cc_builder": {
            "name": "mock_cc_builder",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_sorry_connection_fail.mock_cc_builder": {
            "name": "mock_cc_builder",
            "location": 311,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "test_clear.do_nothing": {
            "name": "do_nothing",
            "location": 343,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "List[int]",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "test_start_with_401_fails.side_effect": {
            "name": "side_effect",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_notifiers.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 18,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {}
        },
        "_get_job": {
            "name": "_get_job",
            "location": 24,
            "return": [
                "meeshkan.core.job.jobs.Job"
            ],
            "arguments": {}
        },
        "_empty_upload": {
            "name": "_empty_upload",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "image_url": [
                    "str",
                    "bool"
                ],
                "download_link": [
                    "str",
                    "bool"
                ]
            }
        },
        "_empty_post": {
            "name": "_empty_post",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "job": {
            "name": "job",
            "location": 131,
            "return": [
                "Generator",
                "Optional[str]",
                "None",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestLoggingNotifier.test_logging_notifier_job_start_end": {
            "name": "test_logging_notifier_job_start_end",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggingNotifier.test_logging_notifier_job_update_no_file_no_dir": {
            "name": "test_logging_notifier_job_update_no_file_no_dir",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggingNotifier.test_logging_notifier_job_update_no_file_with_dir": {
            "name": "test_logging_notifier_job_update_no_file_with_dir",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggingNotifier.test_logging_notifier_job_update_file_dir": {
            "name": "test_logging_notifier_job_update_file_dir",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_start_end_queries": {
            "name": "test_cloud_notifier_job_start_end_queries",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Dict[str,Any]",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TestCloudNotifier.test_cloud_notifier_notifies_failed_job_with_correct_payload": {
            "name": "test_cloud_notifier_notifies_failed_job_with_correct_payload",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_update_no_image": {
            "name": "test_cloud_notifier_job_update_no_image",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_update_existing_file": {
            "name": "test_cloud_notifier_job_update_existing_file",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "TestNotifierHistory.test_notifier_history": {
            "name": "test_notifier_history",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotifierCollection.test_notifier_collection_notifiers_init": {
            "name": "test_notifier_collection_notifiers_init",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotifierCollection.test_notifier_collection_registering_notifiers": {
            "name": "test_notifier_collection_registering_notifiers",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotifierCollection.test_notifier_collection_notifications": {
            "name": "test_notifier_collection_notifications",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggingNotifier.test_logging_notifier_job_start_end.fake_log": {
            "name": "fake_log",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [],
                "message": []
            }
        },
        "TestLoggingNotifier.test_logging_notifier_job_update_file_dir.fake_log": {
            "name": "fake_log",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_start_end_queries.fake_post": {
            "name": "fake_post",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": []
            }
        },
        "TestCloudNotifier.test_cloud_notifier_notifies_failed_job_with_correct_payload.get_failed_job": {
            "name": "get_failed_job",
            "location": 179,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "TestCloudNotifier.test_cloud_notifier_job_update_no_image.fake_post": {
            "name": "fake_post",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": []
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_update_existing_file.fake_post": {
            "name": "fake_post",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "Optional[Type]",
                    "dict",
                    "float",
                    "str"
                ]
            }
        },
        "TestCloudNotifier.test_cloud_notifier_job_update_existing_file.fake_upload": {
            "name": "fake_upload",
            "location": 252,
            "return": [
                "Text",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "image_path": [
                    "str",
                    "bytes"
                ],
                "download_link": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "Optional[bool]"
                ]
            }
        },
        "TestNotifierHistory.test_notifier_history._fake_post": {
            "name": "_fake_post",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestNotifierCollection.test_notifier_collection_notifications.fake_post": {
            "name": "fake_post",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestNotifierCollection.test_notifier_collection_notifications.fake_log": {
            "name": "fake_log",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "Optional[List[str]]",
                    "Iterable[str]",
                    "bool"
                ],
                "message": [
                    "str",
                    "Optional[List[str]]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/test_oauth.py": {
        "_token_store": {
            "name": "_token_store",
            "location": 14,
            "return": [
                "tests.utils.DummyStore"
            ],
            "arguments": {
                "build_session": [
                    "Dict",
                    "None",
                    "tartare.core.models.DataSource",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "test_token_store": {
            "name": "test_token_store",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_source": {
            "name": "test_token_source",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_source_raises_error_for_non_200": {
            "name": "test_token_source_raises_error_for_non_200",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_token_source.mocked_requests_post": {
            "name": "mocked_requests_post",
            "location": 32,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "test_token_source_raises_error_for_non_200.mocked_requests_post": {
            "name": "mocked_requests_post",
            "location": 53,
            "return": [
                "MockResponse",
                "Dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_sagemaker_monitor.py": {
        "mock_boto": {
            "name": "mock_boto",
            "location": 16,
            "return": [
                "Dict[str,Sequence[str]]",
                "MagicMock"
            ],
            "arguments": {}
        },
        "mock_sagemaker_session": {
            "name": "mock_sagemaker_session",
            "location": 21,
            "return": [
                "Dict[str,Sequence[str]]",
                "MagicMock"
            ],
            "arguments": {}
        },
        "raise_client_error": {
            "name": "raise_client_error",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "training_job_description_for_status": {
            "name": "training_job_description_for_status",
            "location": 29,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "status": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_mock_coro": {
            "name": "get_mock_coro",
            "location": 90,
            "return": [
                "unittest.mock.MagicMock"
            ],
            "arguments": {
                "return_value": [
                    "str",
                    "bool",
                    "List",
                    "Callable[[str,Any],None]",
                    "Callable[str,Any,None]"
                ]
            }
        },
        "mock_sagemaker_helper": {
            "name": "mock_sagemaker_helper",
            "location": 97,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "sagemaker_job_monitor": {
            "name": "sagemaker_job_monitor",
            "location": 103,
            "return": [
                "SageMakerJobMonitor",
                "pandas.DataFrame",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "event_loop": [
                    "int"
                ],
                "mock_sagemaker_helper": [
                    "int"
                ]
            }
        },
        "sagemaker_job": {
            "name": "sagemaker_job",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "sagemaker_job_monitor": [
                    "str"
                ]
            }
        },
        "job_scalar_helper": {
            "name": "job_scalar_helper",
            "location": 142,
            "return": [
                "JobScalarHelper",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sagemaker_available": {
            "name": "sagemaker_available",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "real_sagemaker_job_monitor": {
            "name": "real_sagemaker_job_monitor",
            "location": 226,
            "return": [
                "SageMakerJobMonitor",
                "pandas.DataFrame",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "event_loop": [
                    "Dict[str,str]"
                ]
            }
        },
        "TestSageMakerHelper.test_get_job_status": {
            "name": "test_get_job_status",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerHelper.test_get_job_status_only_checks_connection_once": {
            "name": "test_get_job_status_only_checks_connection_once",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerHelper.test_get_job_status_with_broken_boto_raises_exception": {
            "name": "test_get_job_status_with_broken_boto_raises_exception",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerHelper.test_wait_for_job_finish_calls_waiter_and_returns_status": {
            "name": "test_wait_for_job_finish_calls_waiter_and_returns_status",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerHelper.test_get_analytics_stores_analytics_object": {
            "name": "test_get_analytics_stores_analytics_object",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerHelper.test_get_analytics_reuses_analytics_object": {
            "name": "test_get_analytics_reuses_analytics_object",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_boto": [
                    "unittesmock.MagicMock"
                ],
                "mock_sagemaker_session": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestSageMakerJobMonitor.test_create_queued_job": {
            "name": "test_create_queued_job",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sagemaker_job_monitor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TestSageMakerJobMonitor.test_create_running_job": {
            "name": "test_create_running_job",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sagemaker_job_monitor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TestJobScalarHelper.test_adding_new_metric": {
            "name": "test_adding_new_metric",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_scalar_helper": []
            }
        },
        "TestJobScalarHelper.test_adding_same_metric_twice": {
            "name": "test_adding_same_metric_twice",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_scalar_helper": [
                    "str"
                ]
            }
        },
        "TestJobScalarHelper.test_appending_new_record_with_larger_timestamp": {
            "name": "test_appending_new_record_with_larger_timestamp",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_scalar_helper": []
            }
        },
        "TestJobScalarHelper.test_appending_new_record_with_different_name": {
            "name": "test_appending_new_record_with_different_name",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_scalar_helper": []
            }
        },
        "TestRealSageMaker.test_start_monitoring_for_non_existing_job": {
            "name": "test_start_monitoring_for_non_existing_job",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_sagemaker_job_monitor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor",
                    "str"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/test_scheduler.py": {
        "get_scheduler": {
            "name": "get_scheduler",
            "location": 46,
            "return": [
                "meeshkan.core.scheduler.Scheduler"
            ],
            "arguments": {
                "with_notifier": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "get_listener": {
            "name": "get_listener",
            "location": 55,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {}
        },
        "get_executable": {
            "name": "get_executable",
            "location": 61,
            "return": [
                "TargetExecutable"
            ],
            "arguments": {
                "target": [
                    "str",
                    "int",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "bool"
                ],
                "on_terminate": [
                    "str",
                    "None",
                    "int",
                    "AsyncGenerator",
                    "bool",
                    "collections.abc.AsyncGenerator"
                ]
            }
        },
        "get_job": {
            "name": "get_job",
            "location": 65,
            "return": [
                "meeshkan.core.job.jobs.Job"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "job_number": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "get_future_and_resolve": {
            "name": "get_future_and_resolve",
            "location": 69,
            "return": [
                "Tuple[(concurrent.futures._base.Future[nothing], Callable[([], Any)])]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "int",
                    "List[int]",
                    "Optional[Any]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "test_job_submit": {
            "name": "test_job_submit",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scheduling": {
            "name": "test_scheduling",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notifiers": {
            "name": "test_notifiers",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_terminating_job": {
            "name": "test_terminating_job",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_canceling_job": {
            "name": "test_canceling_job",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stopping_scheduler": {
            "name": "test_stopping_scheduler",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_processor_shutsdown_cleanly": {
            "name": "test_queue_processor_shutsdown_cleanly",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_processor_processes_jobs": {
            "name": "test_queue_processor_processes_jobs",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TargetExecutable.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float",
                    "bool"
                ],
                "on_terminate": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "TargetExecutable.launch_and_wait": {
            "name": "launch_and_wait",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetExecutable.terminate": {
            "name": "terminate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureWaitingExecutable.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FutureWaitingExecutable.launch_and_wait": {
            "name": "launch_and_wait",
            "location": 36,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureWaitingExecutable.terminate": {
            "name": "terminate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_listener.notify": {
            "name": "notify",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "return_code": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "get_future_and_resolve.resolve": {
            "name": "resolve",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_queue_processor_shutsdown_cleanly.process_item": {
            "name": "process_item",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        },
        "test_queue_processor_processes_jobs.process_item": {
            "name": "process_item",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/test_start.py": {
        "test_verify_version_failure": {
            "name": "test_verify_version_failure",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_version_failure.fail_get": {
            "name": "fail_get",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_tasks.py": {
        "test_task_poller_handles_tasks.pop_tasks": {
            "name": "pop_tasks",
            "location": 15,
            "return": [
                "List",
                "str",
                "bytes",
                "List[str]",
                "golem_messages.message.tasks.ReportComputedTask"
            ],
            "arguments": {}
        }
    },
    "meeshkan-client-master/tests/test_tracker.py": {
        "test_tracker_history": {
            "name": "test_tracker_history",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_image": {
            "name": "test_generate_image",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_updates_with_image": {
            "name": "test_get_updates_with_image",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_latest_updates": {
            "name": "test_get_latest_updates",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_updates_with_name": {
            "name": "test_get_updates_with_name",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_clean": {
            "name": "test_base_clean",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_refresh": {
            "name": "test_base_refresh",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_value": {
            "name": "test_missing_value",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tracker_polling.notify_function": {
            "name": "notify_function",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/utils.py": {
        "wait_for_true": {
            "name": "wait_for_true",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Exception",
                    "Type",
                    "bytes"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PicklableMock.__reduce__": {
            "name": "__reduce__",
            "location": 25,
            "return": [
                "Tuple[(Type[mock.MagicMock], Tuple[()])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Optional[TrackingData]",
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "str"
                ],
                "status_code": [
                    "int",
                    "str",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "MockResponse.json": {
            "name": "json",
            "location": 34,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.text": {
            "name": "text",
            "location": 38,
            "return": [
                "Text",
                "float",
                "bytes",
                "Optional[Exception]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.ok": {
            "name": "ok",
            "location": 42,
            "return": [
                "bool",
                "Dict",
                "bytes",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__enter__": {
            "name": "__enter__",
            "location": 48,
            "return": [
                "MockResponse"
            ],
            "arguments": {
                "self": [
                    "_TMockResponse@@MockResponse@@"
                ]
            }
        },
        "MockResponse.__exit__": {
            "name": "__exit__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "MockResponse.for_unauthenticated": {
            "name": "for_unauthenticated",
            "location": 55,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "DummyStore.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud_url": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "refresh_token": [
                    "str",
                    "Dict[str,Any]",
                    "src.autoks.core.gp_model.GPModel"
                ],
                "build_session": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "cmk.base.config.ConfigCache",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "DummyStore._fetch_token": {
            "name": "_fetch_token",
            "location": 69,
            "return": [
                "Token",
                "str",
                "core.models.Recipe",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockNotifier.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockNotifier._notify_job_start": {
            "name": "_notify_job_start",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "List",
                    "str",
                    "Callable[,None]",
                    "Tuple",
                    "float"
                ]
            }
        },
        "MockNotifier._notify_job_end": {
            "name": "_notify_job_end",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]"
                ]
            }
        },
        "MockNotifier._notify": {
            "name": "_notify",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "List",
                    "List[List[Any]]",
                    "List[str]",
                    "List[list[Any]]",
                    "Sequence[str]",
                    "str"
                ],
                "image_url": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[list[int]]",
                    "List[List[int]]"
                ],
                "n_iterations": [
                    "int",
                    "bool",
                    "List[int]",
                    "List[List[int]]"
                ],
                "iterations_unit": [
                    "Text",
                    "int",
                    "bool",
                    "List[int]",
                    "List[List[int]]"
                ]
            }
        },
        "NBServer.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[Mapping]",
                    "None",
                    "Mapping"
                ],
                "port": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[Mapping]",
                    "None",
                    "Mapping"
                ],
                "key": [
                    "Text",
                    "Dict[str,str]",
                    "Optional[Dict]",
                    "Dict",
                    "bool",
                    "django.contrib.auth.tokens.PasswordResetTokenGenerator",
                    "Dict[str,Union[str,int]]",
                    "UdpTransport"
                ],
                "use_password": [
                    "bool",
                    "str"
                ]
            }
        },
        "NBServer.url": {
            "name": "url",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NBServer.__enter__": {
            "name": "__enter__",
            "location": 122,
            "return": [
                "NBServer"
            ],
            "arguments": {
                "self": [
                    "_TNBServer@@NBServer@@"
                ]
            }
        },
        "NBServer.__exit__": {
            "name": "__exit__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "NBServer._start_local_jupyter_server": {
            "name": "_start_local_jupyter_server",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempCredentialsFile.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "Optional[bool]",
                    "None",
                    "Dict[str,int]",
                    "str",
                    "bool",
                    "Set[str]",
                    "int"
                ],
                "git_token": [
                    "Optional[bool]",
                    "None",
                    "Dict[str,int]",
                    "str",
                    "bool",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "TempCredentialsFile.update": {
            "name": "update",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "git_token": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "TempCredentialsFile.__enter__": {
            "name": "__enter__",
            "location": 175,
            "return": [
                "TempCredentialsFile"
            ],
            "arguments": {
                "self": [
                    "_TTempCredentialsFile@@TempCredentialsFile@@"
                ]
            }
        },
        "TempCredentialsFile.__exit__": {
            "name": "__exit__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "meeshkan-client-master/tests/__init__.py": {}
}
{
    "megatron-master/app/manage.py": {},
    "megatron-master/app/megatron/admin.py": {},
    "megatron-master/app/megatron/api.py": {
        "incoming": {
            "name": "incoming",
            "location": 33,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "outgoing": {
            "name": "outgoing",
            "location": 60,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "test": {
            "name": "test",
            "location": 90,
            "return": [
                "megatron.responses.MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "notify_user": {
            "name": "notify_user",
            "location": 95,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "broadcast": {
            "name": "broadcast",
            "location": 116,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "message": {
            "name": "message",
            "location": 168,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": [],
                "user_id": []
            }
        },
        "edit": {
            "name": "edit",
            "location": 188,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_a_human": {
            "name": "get_a_human",
            "location": 240,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "register_workspace": {
            "name": "register_workspace",
            "location": 276,
            "return": [
                "MegatronResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "megatron-master/app/megatron/apps.py": {},
    "megatron-master/app/megatron/authentication.py": {
        "get_organization_token": {
            "name": "get_organization_token",
            "location": 12,
            "return": [
                "dict",
                "bool",
                "as3.scanner.Token",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "organization": [
                    "Dict",
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "validate_slack_token": {
            "name": "validate_slack_token",
            "location": 20,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "validate_slack_token.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "HttpResponse",
                "bool",
                "int",
                "users.models.CustomUser"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "MegatronTokenAuthentication.get_model": {
            "name": "get_model",
            "location": 35,
            "return": [
                "Type[megatron.models.Token]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "megatron-master/app/megatron/aws.py": {
        "upload_to_s3": {
            "name": "upload_to_s3",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "file_name": [
                    "str"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "generate_presigned_url": {
            "name": "generate_presigned_url",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "upload_temp_image": {
            "name": "upload_temp_image",
            "location": 68,
            "return": [
                "str",
                "None",
                "Dict",
                "Optional[str]",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "float"
                ],
                "extension": [
                    "str",
                    "bytes",
                    "int",
                    "OrderedDict"
                ]
            }
        }
    },
    "megatron-master/app/megatron/bot_types.py": {
        "BotType.get_bot_connection": {
            "name": "get_bot_connection",
            "location": 11,
            "return": [
                "slack.SlackConnection"
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "Dict[str,set[str]]",
                    "gardnr.models.Grow",
                    "str",
                    "Dict",
                    "Dict[str,Set[str]]",
                    "Sequence[S]",
                    "None",
                    "Sequence[services.seating.models.seaSeat]",
                    "Optional[str]"
                ]
            }
        },
        "BotType.get_bot_connection_from_platform_id": {
            "name": "get_bot_connection_from_platform_id",
            "location": 18,
            "return": [
                "slack.SlackConnection"
            ],
            "arguments": {
                "self": [],
                "platform_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "megatron-master/app/megatron/celery.py": {
        "setup_periodic_tasks": {
            "name": "setup_periodic_tasks",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "T",
                    "List[dict]",
                    "collections.abc.Awaitable[Any]",
                    "Awaitable[Any]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/errors.py": {
        "raise_error": {
            "name": "raise_error",
            "location": 46,
            "return": [
                "ErrorResponse"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "status": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "catch_megatron_errors": {
            "name": "catch_megatron_errors",
            "location": 51,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable[[aiohttp.web.Request], Awaitable[aiohttp.web.Response]]",
                    "Callable"
                ]
            }
        },
        "MegatronError.status_code": {
            "name": "status_code",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MegatronException.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform_message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ErrorResponse.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Optional[Callable[[str], str]]"
                ],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "catch_megatron_errors.wrapper": {
            "name": "wrapper",
            "location": 53,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "megatron-master/app/megatron/models.py": {
        "MegatronUser.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MegatronUser.get_full_name": {
            "name": "get_full_name",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MegatronUser.get_short_name": {
            "name": "get_short_name",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.save": {
            "name": "save",
            "location": 100,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.generate_key": {
            "name": "generate_key",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformUser.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformUser.get_display_name": {
            "name": "get_display_name",
            "location": 125,
            "return": [
                "str",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformAgent.__str__": {
            "name": "__str__",
            "location": 145,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformAgent.get_display_name": {
            "name": "get_display_name",
            "location": 148,
            "return": [
                "str",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "megatron-master/app/megatron/responses.py": {
        "MegatronResponse.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Optional[bool]",
                    "bool",
                    "Dict[str,Any]",
                    "List[str]",
                    "None",
                    "Dict[str,Union[str,int]]",
                    "bytes",
                    "Dict",
                    "str",
                    "Optional[str]"
                ],
                "status": [
                    "int",
                    "Optional[int]",
                    "None",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/root.py": {
        "root": {
            "name": "root",
            "location": 4,
            "return": [
                "HttpResponse",
                "Mapping[str,Any]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/scheduled_tasks.py": {
        "refresh_platform_user_data": {
            "name": "refresh_platform_user_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unpause_reminder": {
            "name": "unpause_reminder",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "archive_channels": {
            "name": "archive_channels",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "megatron-master/app/megatron/services.py": {
        "IntegrationService.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integration": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IntegrationService.get_connection": {
            "name": "get_connection",
            "location": 26,
            "return": [
                "megatron.connections.slack.SlackConnection"
            ],
            "arguments": {
                "self": [],
                "as_user": [
                    "bool",
                    "str",
                    "duniterpy.api.clienClient",
                    "TextIO"
                ]
            }
        },
        "IntegrationService.get_interpreter": {
            "name": "get_interpreter",
            "location": 29,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationService.get_or_create_user_by_id": {
            "name": "get_or_create_user_by_id",
            "location": 35,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[int,Any]",
                "Counter",
                "Dict",
                "List",
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "WorkspaceService.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "WorkspaceService.get_connection": {
            "name": "get_connection",
            "location": 67,
            "return": [
                "megatron.connections.slack.SlackConnection"
            ],
            "arguments": {
                "self": [],
                "as_user": [
                    "bool",
                    "str",
                    "duniterpy.api.clienClient",
                    "TextIO"
                ]
            }
        },
        "WorkspaceService.refresh_user_data": {
            "name": "refresh_user_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceService.get_or_create_user_by_id": {
            "name": "get_or_create_user_by_id",
            "location": 92,
            "return": [
                "Optional[str]",
                "None",
                "Optional[bool]",
                "str",
                "Optional[int]",
                "int",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MegatronChannelService.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "float",
                    "bool",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "MegatronChannelService.unarchive": {
            "name": "unarchive",
            "location": 124,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MegatronChannelService.archive": {
            "name": "archive",
            "location": 135,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MegatronChannelService.change_pause_state": {
            "name": "change_pause_state",
            "location": 148,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "pause_state": [
                    "int",
                    "str",
                    "None",
                    "transfer.models.TopicID",
                    "Optional[str]",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user_channel_id": [
                    "int",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "megatron-master/app/megatron/settings.py": {},
    "megatron-master/app/megatron/statics.py": {},
    "megatron-master/app/megatron/urls.py": {},
    "megatron-master/app/megatron/utils.py": {
        "remove_sensitive_data": {
            "name": "remove_sensitive_data",
            "location": 12,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "msg": [
                    "dict",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "get_customer_for_megatron_channel": {
            "name": "get_customer_for_megatron_channel",
            "location": 43,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "megatron_channel_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "megatron-master/app/megatron/wsgi.py": {},
    "megatron-master/app/megatron/__init__.py": {},
    "megatron-master/app/megatron/commands/commands.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Dict[str,LabwareDefinition]"
                ],
                "description": [
                    "str",
                    "int",
                    "Dict[str,LabwareDefinition]"
                ],
                "parse": [
                    "str",
                    "int",
                    "Dict[str,LabwareDefinition]"
                ],
                "action": [
                    "str",
                    "int",
                    "Dict[str,LabwareDefinition]"
                ]
            }
        },
        "Command.get_command": {
            "name": "get_command",
            "location": 13,
            "return": [
                "Optional[Command]"
            ],
            "arguments": {
                "command_str": [
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "megatron-master/app/megatron/commands/command_actions.py": {
        "open_channel": {
            "name": "open_channel",
            "location": 31,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "str"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "dict[str, int]"
                ],
                "arguments": [
                    "list[str]"
                ]
            }
        },
        "close_channel": {
            "name": "close_channel",
            "location": 73,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[, ]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "str"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "typing.Callable[str, bool]",
                    "dict[str, typing.Any]"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "forward_message": {
            "name": "forward_message",
            "location": 137,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "channel": [
                    "bool",
                    "str"
                ],
                "msg": [
                    "dict[, ]"
                ],
                "from_user": [
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "pause_channel": {
            "name": "pause_channel",
            "location": 164,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "str"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "typing.Callable[str, bool]",
                    "dict[str, typing.Any]"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "unpause_channel": {
            "name": "unpause_channel",
            "location": 201,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "str"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "typing.Callable[str, bool]",
                    "dict[str, typing.Any]"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "clear_context": {
            "name": "clear_context",
            "location": 238,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Callable[str, bool]",
                    "bytes",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "do": {
            "name": "do",
            "location": 291,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "serialized_request_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Callable[str, bool]",
                    "bytes",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "_update_channel_link": {
            "name": "_update_channel_link",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "megatron_user_id": [
                    "int",
                    "list[dict[, ]]",
                    "None"
                ],
                "platform_user": [
                    "int"
                ],
                "response_url": [
                    "str",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "_check_channel": {
            "name": "_check_channel",
            "location": 365,
            "return": [
                "str",
                "list[tuple[typing.Union[typing.Any,str]]]",
                "list[]",
                "dict[str, str]",
                "dict[str, list[float]]",
                "None"
            ],
            "arguments": {
                "platform_channel_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_channel_link": {
            "name": "_get_channel_link",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "megatron_user": [
                    "str",
                    "None",
                    "int"
                ],
                "channel_id": [
                    "int",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "_create_or_update_channel": {
            "name": "_create_or_update_channel",
            "location": 379,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "megatron_user": [
                    "str"
                ],
                "channel_data": [
                    "str"
                ],
                "platform_user": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "_get_conversation_history": {
            "name": "_get_conversation_history",
            "location": 396,
            "return": [
                "Any"
            ],
            "arguments": {
                "channel": [
                    "int"
                ]
            }
        },
        "_format_slack_timestamp": {
            "name": "_format_slack_timestamp",
            "location": 423,
            "return": [
                "str"
            ],
            "arguments": {
                "timestamp": [],
                "previous_ts": [
                    "int"
                ]
            }
        },
        "_change_pause_state": {
            "name": "_change_pause_state",
            "location": 433,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "megatron_user": [
                    "str"
                ],
                "platform_user": [
                    "list[dict[str, typing.Any]]"
                ],
                "request_data": [
                    "dict[, ]"
                ],
                "pause_state": [
                    "bool"
                ]
            }
        }
    },
    "megatron-master/app/megatron/commands/parsing.py": {
        "get_targeted_user_id": {
            "name": "get_targeted_user_id",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": [],
                "command": [
                    "str",
                    "int",
                    "Iterable[Pattern]",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[dict]",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "response_channel": [
                    "bool",
                    "str",
                    "tracim.models.auth.User",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "require_targeted_user_id": {
            "name": "require_targeted_user_id",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": [],
                "command": [
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "django.http.HttpResponse"
                ],
                "response_channel": [
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "django.http.HttpResponse"
                ]
            }
        },
        "_disambiguate_response": {
            "name": "_disambiguate_response",
            "location": 59,
            "return": [
                "Dict[(str, Union[(str, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "users": [
                    "List[zerver.models.UserProfile]",
                    "str",
                    "Dict[str,str]",
                    "excars.models.user.User",
                    "Optional[Dict[str,str]]"
                ],
                "command": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "passthrough": {
            "name": "passthrough",
            "location": 88,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "args": [],
                "command": [
                    "Literal",
                    "List[tuple[Union[str,int]]]",
                    "Literal[True]",
                    "Literal[False]",
                    "bool",
                    "List[Tuple[str,int]]",
                    "int"
                ],
                "response_channel": [
                    "Literal",
                    "List[tuple[Union[str,int]]]",
                    "Literal[True]",
                    "Literal[False]",
                    "bool",
                    "List[Tuple[str,int]]",
                    "int"
                ]
            }
        }
    },
    "megatron-master/app/megatron/commands/__init__.py": {},
    "megatron-master/app/megatron/connections/actions.py": {},
    "megatron-master/app/megatron/connections/authentication.py": {
        "get_organization_token": {
            "name": "get_organization_token",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "megatron-master/app/megatron/connections/bot_connection.py": {
        "BotConnection.broadcast": {
            "name": "broadcast",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "broadcast": [
                    "List[str]",
                    "Dict",
                    "bool",
                    "str"
                ],
                "user_ids": [
                    "List[str]",
                    "Dict",
                    "bool",
                    "str"
                ],
                "capture_feedback": [
                    "List[str]",
                    "Dict",
                    "bool",
                    "str"
                ]
            }
        },
        "BotConnection.message": {
            "name": "message",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bot_user_id": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool"
                ],
                "msg": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BotConnection.dm_user": {
            "name": "dm_user",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bot_user_id": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "msg": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BotConnection.join_or_create_channel": {
            "name": "join_or_create_channel",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "BotConnection.update_msg": {
            "name": "update_msg",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict]"
                ],
                "channel_id": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict]"
                ],
                "new_msg": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/connections/safe_requests.py": {
        "SafeRequest.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_verification": [
                    "Dict",
                    "List[dict]",
                    "int",
                    "bool"
                ],
                "get_response_data": []
            }
        },
        "SafeRequest.safe_requests": {
            "name": "safe_requests",
            "location": 15,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict"
                ],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "SafeRequest.post": {
            "name": "post",
            "location": 41,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "json": [
                    "Dict",
                    "None",
                    "str",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "SafeRequest.get": {
            "name": "get",
            "location": 44,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "json": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/connections/slack.py": {
        "response_verification": {
            "name": "response_verification",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "get_response_data": {
            "name": "get_response_data",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "response": []
            }
        },
        "SlackConnection.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "as_user": [
                    "bool"
                ]
            }
        },
        "SlackConnection.take_action": {
            "name": "take_action",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "SlackConnection._broadcast": {
            "name": "_broadcast",
            "location": 84,
            "return": [
                "Dict[(str, Union[(bool, List[Dict[(Any, str)]])])]"
            ],
            "arguments": {
                "self": [],
                "broadcast": [],
                "user_ids": [
                    "list[str]",
                    "dict[, ]",
                    "str"
                ],
                "capture_feedback": [
                    "bool",
                    "str"
                ]
            }
        },
        "SlackConnection._post_message": {
            "name": "_post_message",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "channel": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SlackConnection._get_user_info": {
            "name": "_get_user_info",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SlackConnection.respond_to_url": {
            "name": "respond_to_url",
            "location": 134,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "response_url": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "msg": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SlackConnection.ephemeral_message": {
            "name": "ephemeral_message",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "request_data": [
                    "bool",
                    "str",
                    "None"
                ],
                "msg": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "SlackConnection.dm_user": {
            "name": "dm_user",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "slack_id": [
                    "str",
                    "set[int]",
                    "int"
                ],
                "msg": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "list[str]"
                ]
            }
        },
        "SlackConnection.message": {
            "name": "message",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "None",
                    "float"
                ],
                "msg": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "SlackConnection.open_im": {
            "name": "open_im",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "slack_user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SlackConnection.im_history": {
            "name": "im_history",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [
                    "int",
                    "str"
                ],
                "count": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "SlackConnection.create_channel": {
            "name": "create_channel",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ]
            }
        },
        "SlackConnection.archive_channel": {
            "name": "archive_channel",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "SlackConnection.unarchive_channel": {
            "name": "unarchive_channel",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SlackConnection._update_msg": {
            "name": "_update_msg",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "new_msg": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "old_msg": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "SlackConnection.get_image": {
            "name": "get_image",
            "location": 243,
            "return": [
                "None",
                "tuple[typing.Union[str,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "file_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SlackConnection.get_channel_by_name": {
            "name": "get_channel_by_name",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ]
            }
        },
        "SlackConnection._post_to_response_url": {
            "name": "_post_to_response_url",
            "location": 274,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "response_url": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "msg": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "SlackConnection._post_to_channel": {
            "name": "_post_to_channel",
            "location": 281,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "list[list[int]]",
                    "str",
                    "None",
                    "bytes"
                ],
                "msg": [
                    "dict[, ]"
                ]
            }
        },
        "SlackConnection._post_ephemeral_message": {
            "name": "_post_ephemeral_message",
            "location": 294,
            "return": [
                "Union[(megatron.responses.MegatronResponse, requests.models.Response)]"
            ],
            "arguments": {
                "self": [],
                "request_data": [
                    "dict[str, typing.Any]"
                ],
                "msg": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SlackConnection._build_broadcast_attach": {
            "name": "_build_broadcast_attach",
            "location": 308,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "SlackConnection._build_feedback_attach": {
            "name": "_build_feedback_attach",
            "location": 312,
            "return": [
                "Dict[(str, Union[(str, List[Union[(str, Dict[(str, str)])]])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlackConnection.build_img_attach": {
            "name": "build_img_attach",
            "location": 338,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "user": [
                    "dict[, ]",
                    "set[]"
                ]
            }
        },
        "SlackConnection.add_forward_footer": {
            "name": "add_forward_footer",
            "location": 353,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "_T0@@"
                ],
                "user_data": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "SlackConnection._refresh_access_token": {
            "name": "_refresh_access_token",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform_user_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "SlackConnection.archive_channel.archive_response_verification": {
            "name": "archive_response_verification",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": []
            }
        }
    },
    "megatron-master/app/megatron/connections/__init__.py": {},
    "megatron-master/app/megatron/interpreters/__init__.py": {},
    "megatron-master/app/megatron/interpreters/slack/api.py": {
        "incoming": {
            "name": "incoming",
            "location": 34,
            "return": [
                "None",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "msg": [],
                "channel": [
                    "int"
                ]
            }
        },
        "outgoing": {
            "name": "outgoing",
            "location": 67,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "dict[int, dict[, ]]"
                ],
                "channel": [
                    "int",
                    "str"
                ]
            }
        },
        "slash_command": {
            "name": "slash_command",
            "location": 90,
            "return": [
                "JsonResponse",
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "interactive_message": {
            "name": "interactive_message",
            "location": 120,
            "return": [
                "JsonResponse",
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "event": {
            "name": "event",
            "location": 170,
            "return": [
                "JsonResponse",
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "_image_passthrough_message": {
            "name": "_image_passthrough_message",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "_get_slack_user_data": {
            "name": "_get_slack_user_data",
            "location": 278,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "channel_id": [
                    "int"
                ],
                "slack_id": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "_check_and_send_paused_warning": {
            "name": "_check_and_send_paused_warning",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "megatron_channel": [
                    "str",
                    "int",
                    "None"
                ],
                "user_id": [
                    "str",
                    "typing.Sequence[str]",
                    "dict[str, tonga.models.structs.positioning.BasePositioning]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/interpreters/slack/formatting.py": {
        "user_titled": {
            "name": "user_titled",
            "location": 16,
            "return": [
                "Dict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "platform_user": [
                    "str",
                    "List[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "error_ephemeral": {
            "name": "error_ephemeral",
            "location": 22,
            "return": [
                "Dict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "extra": [
                    "Dict",
                    "Mapping[str,Dict[str,Any]]",
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Iterable[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "get_pause_warning": {
            "name": "get_pause_warning",
            "location": 31,
            "return": [
                "Dict[(str, Union[(str, List[Dict[(str, Union[(str, List[Dict[(str, str)]])])]])])]"
            ],
            "arguments": {
                "workspace_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "platform_user_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "get_unpaused_warning": {
            "name": "get_unpaused_warning",
            "location": 58,
            "return": [
                "Dict[(str, Union[(str, List[Dict[(str, Union[(str, List[Dict[(str, str)]])])]])])]"
            ],
            "arguments": {
                "workspace_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "platform_user_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "megatron-master/app/megatron/interpreters/slack/urls.py": {},
    "megatron-master/app/megatron/interpreters/slack/__init__.py": {},
    "megatron-master/app/megatron/migrations/0001_initial.py": {},
    "megatron-master/app/megatron/migrations/0002_auto_20181121_1143.py": {},
    "megatron-master/app/megatron/migrations/0003_auto_20181201_1140.py": {},
    "megatron-master/app/megatron/migrations/0004_auto_20181201_1236.py": {},
    "megatron-master/app/megatron/migrations/0005_customerworkspace_domain.py": {},
    "megatron-master/app/megatron/migrations/0006_auto_20190119_1359.py": {},
    "megatron-master/app/megatron/migrations/0007_auto_20190119_1422.py": {
        "delete_dupes": {
            "name": "delete_dupes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "TextIO"
                ],
                "schema_editor": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "megatron-master/app/megatron/migrations/0008_auto_20190204_1223.py": {},
    "megatron-master/app/megatron/migrations/0011_auto_20200121_1455.py": {},
    "megatron-master/app/megatron/migrations/0012_platformagent.py": {
        "delete_user_agents": {
            "name": "delete_user_agents",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "str",
                    "zam_repondeur.models.Lecture"
                ],
                "schema_editor": [
                    "bool",
                    "List[list[str]]",
                    "zerver.models.Message",
                    "List[List[str]]",
                    "int"
                ]
            }
        }
    },
    "megatron-master/app/megatron/migrations/0013_auto_20200414_1253.py": {},
    "megatron-master/app/megatron/migrations/__init__.py": {},
    "megatron-master/app/megatron/tests/api_test.py": {
        "authenticate_request_factory": {
            "name": "authenticate_request_factory",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str,Any]",
                    "ValuesView",
                    "Optional[models.LTI1p3Provider]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ]
            }
        },
        "authenticate_request_factory.authenticate_request": {
            "name": "authenticate_request",
            "location": 17,
            "return": [
                "Callable[[Any], bool]",
                "Mapping",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Optional[Exception]",
                    "T",
                    "Type[T]",
                    "List[dict]"
                ]
            }
        },
        "TestBroadcast.broadcast_payload": {
            "name": "broadcast_payload",
            "location": 37,
            "return": [
                "Dict[Text,list[dict[Text,Union[Text,list[Text]]]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestBroadcast.test_broadcast_success": {
            "name": "test_broadcast_success",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcast_payload": []
            }
        },
        "TestBroadcast.test_broadcast_error": {
            "name": "test_broadcast_error",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcast_payload": [
                    "server.models.Bike"
                ],
                "missing_param": [
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "TestIncomingMessage.incoming_payload": {
            "name": "incoming_payload",
            "location": 76,
            "return": [
                "Dict[Text,Union[Text,dict[Text,Text]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestIncomingMessage.test_incoming_message": {
            "name": "test_incoming_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming_payload": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestRegisterOrganization.fake_request": {
            "name": "fake_request",
            "location": 95,
            "return": [
                "int",
                "str",
                "Dict[str,str]",
                "List[Union[Any,Any,Any]]"
            ],
            "arguments": {}
        },
        "TestRegisterOrganization.test_register_organization": {
            "name": "test_register_organization",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_request": [
                    "django.tesRequestFactory",
                    "rest_framework.tesAPIClient",
                    "django.http.HttpRequest"
                ]
            }
        },
        "authenticate_request_factory.authenticate_request.auth": {
            "name": "auth",
            "location": 22,
            "return": [
                "int",
                "float"
            ],
            "arguments": {}
        }
    },
    "megatron-master/app/megatron/tests/command_test.py": {
        "fake_platform_user": {
            "name": "fake_platform_user",
            "location": 19,
            "return": [
                "django.db.models.QuerySet",
                "Dict[str,str]",
                "zam_repondeur.models.Lecture",
                "Dict[int,str]",
                "bool",
                "Dict[Any,dict[str,Any]]"
            ],
            "arguments": {}
        },
        "fake_platform_agent": {
            "name": "fake_platform_agent",
            "location": 30,
            "return": [
                "Dict[str,str]",
                "str",
                "bool",
                "Set",
                "Mapping"
            ],
            "arguments": {}
        },
        "fake_channel": {
            "name": "fake_channel",
            "location": 41,
            "return": [
                "None",
                "str",
                "bool",
                "int",
                "salon.models.Stylist",
                "allennlp.models.model.Model",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "fake_platform_user": [
                    "Optional[zerver.models.UserProfile]",
                    "None"
                ]
            }
        },
        "fake_request_data": {
            "name": "fake_request_data",
            "location": 54,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "int",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "fake_channel": [
                    "zerver.models.UserProfile",
                    "tracim.models.User",
                    "tracim.models.auth.User",
                    "ajapaik.ajapaik.models.Profile",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "fake_platform_agent": [
                    "zerver.models.UserProfile",
                    "tracim.models.User",
                    "tracim.models.auth.User",
                    "ajapaik.ajapaik.models.Profile",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "fake_arguments": {
            "name": "fake_arguments",
            "location": 63,
            "return": [
                "Dict[Text,]",
                "bool",
                "AsyncGenerator",
                "str"
            ],
            "arguments": {
                "fake_platform_user": [
                    "int",
                    "str"
                ]
            }
        },
        "TestOpenChannel.test_open_channel_creates_channel": {
            "name": "test_open_channel_creates_channel",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_request_data": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "fake_arguments": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestForwardMessage.test_forward_message": {
            "name": "test_forward_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_channel": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestPauseChannel.no_post": {
            "name": "no_post",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bytes",
                    "Dict",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "TestPauseChannel.test_pause_channel": {
            "name": "test_pause_channel",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pause_func": [
                    "int",
                    "salon.models.Stylist"
                ],
                "paused": [
                    "str",
                    "List[int]",
                    "bool",
                    "boggle.models.board.Board"
                ],
                "fake_arguments": [
                    "int",
                    "salon.models.Stylist"
                ],
                "fake_request_data": [
                    "salon.models.Stylist",
                    "bool",
                    "float"
                ]
            }
        },
        "TestPauseChannel.no_post.fake_post": {
            "name": "fake_post",
            "location": 95,
            "return": [
                "Response",
                "Dict",
                "List[str]",
                "bool",
                "Optional[Dict[str,Any]]",
                "str",
                "Dict[str,Tuple[str,str]]",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "megatron-master/app/megatron/tests/conftest.py": {
        "minimal_megatron_setup": {
            "name": "minimal_megatron_setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_app_response": {
            "name": "fake_app_response",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict",
                    "bytes",
                    "bool"
                ]
            }
        },
        "no_bot_connections": {
            "name": "no_bot_connections",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "fake_app_response.fake_resp": {
            "name": "fake_resp",
            "location": 30,
            "return": [
                "Dict[Text,Union[bool,dict[Text,Text]]]",
                "bool",
                "core_lib.core.models.Event",
                "Dict"
            ],
            "arguments": {}
        },
        "fake_app_response.fake_post": {
            "name": "fake_post",
            "location": 40,
            "return": [
                "Response",
                "Dict",
                "str",
                "Dict[str,Any]",
                "Exception",
                "tartare.core.models.Job",
                "Mapping[str,Any]",
                "Optional[int]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "json": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "no_bot_connections.fake_get_bot_connection": {
            "name": "fake_get_bot_connection",
            "location": 92,
            "return": [
                "FakeConnection",
                "Callable",
                "str",
                "List[str]",
                "List"
            ],
            "arguments": {
                "self": [],
                "as_user": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "no_bot_connections.FakeConnection.take_action": {
            "name": "take_action",
            "location": 53,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "no_bot_connections.FakeConnection.broadcast": {
            "name": "broadcast",
            "location": 56,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "Type[Exception]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "Type[Exception]",
                    "int"
                ],
                "capture_feedback": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "Type[Exception]",
                    "int"
                ]
            }
        },
        "no_bot_connections.FakeConnection.incoming": {
            "name": "incoming",
            "location": 59,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "no_bot_connections.FakeConnection.clear_context": {
            "name": "clear_context",
            "location": 62,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "no_bot_connections.FakeConnection.create_channel": {
            "name": "create_channel",
            "location": 65,
            "return": [
                "Dict[Text,Union[bool,dict[Text,Text]]]",
                "bool",
                "Tuple[str,str]",
                "Dict[str,Any]",
                "str",
                "Dict",
                "django.db.models.Q.uerySet"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "no_bot_connections.FakeConnection.message": {
            "name": "message",
            "location": 68,
            "return": [
                "Dict[Text,Union[bool,dict[Text,float]]]",
                "bool",
                "int",
                "Optional[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "response_channel": [
                    "bool",
                    "bytes",
                    "dict"
                ],
                "new_msg": [
                    "bool",
                    "bytes",
                    "dict"
                ]
            }
        },
        "no_bot_connections.FakeConnection.respond_to_url": {
            "name": "respond_to_url",
            "location": 71,
            "return": [
                "Dict[Text,bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "response_channel": [
                    "float",
                    "dict"
                ],
                "new_msg": [
                    "float",
                    "dict"
                ]
            }
        },
        "no_bot_connections.FakeConnection.open_im": {
            "name": "open_im",
            "location": 74,
            "return": [
                "Dict[Text,Union[bool,dict[Text,Text]]]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "platform_user_id": [
                    "str",
                    "Optional[str]",
                    "models.CloudConfig"
                ]
            }
        },
        "no_bot_connections.FakeConnection.im_history": {
            "name": "im_history",
            "location": 77,
            "return": [
                "bool",
                "Dict[Text,Union[bool,list]]"
            ],
            "arguments": {
                "self": [],
                "channel_id": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[\"UtilityFunction\"]"
                ],
                "num_messages": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[\"UtilityFunction\"]"
                ]
            }
        },
        "no_bot_connections.FakeConnection.update_msg": {
            "name": "update_msg",
            "location": 80,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "message_ts": [
                    "str",
                    "int",
                    "models.Course",
                    "List[manager.models.reflection.Reflection]"
                ],
                "channel_id": [
                    "str",
                    "int",
                    "models.Course",
                    "List[manager.models.reflection.Reflection]"
                ],
                "join_message": [
                    "str",
                    "int",
                    "models.Course",
                    "List[manager.models.reflection.Reflection]"
                ]
            }
        },
        "no_bot_connections.FakeConnection.dm_user": {
            "name": "dm_user",
            "location": 83,
            "return": [
                "Dict[Text,Union[bool,Text]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "slack_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "msg": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "no_bot_connections.FakeConnection.ephemeral_message": {
            "name": "ephemeral_message",
            "location": 86,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "request_data": [
                    "pyramid.response.Response",
                    "responses.Response",
                    "requests.Request",
                    "dict"
                ],
                "msg": [
                    "pyramid.response.Response",
                    "responses.Response",
                    "requests.Request",
                    "dict"
                ]
            }
        },
        "no_bot_connections.FakeConnection.archive_channel": {
            "name": "archive_channel",
            "location": 89,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "channel_id": [
                    "str",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "megatron-master/app/megatron/tests/slack_action_test.py": {},
    "megatron-master/app/megatron/tests/slack_api_test.py": {
        "fake_platform_user": {
            "name": "fake_platform_user",
            "location": 23,
            "return": [
                "django.db.models.QuerySet",
                "Dict[str,str]",
                "zam_repondeur.models.Lecture",
                "Dict[int,str]",
                "bool",
                "Dict[Any,dict[str,Any]]"
            ],
            "arguments": {}
        },
        "fake_platform_agent": {
            "name": "fake_platform_agent",
            "location": 34,
            "return": [
                "Dict[str,str]",
                "str",
                "bool",
                "Set",
                "django.db.migrations.state.StateApps",
                "Mapping"
            ],
            "arguments": {}
        },
        "fake_channel": {
            "name": "fake_channel",
            "location": 45,
            "return": [
                "None",
                "str",
                "bool",
                "int",
                "salon.models.Stylist",
                "allennlp.models.model.Model",
                "django.db.migrations.state.StateApps",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "fake_platform_user": [
                    "Optional[zerver.models.UserProfile]",
                    "None"
                ]
            }
        },
        "TestInteractiveMessage.no_delay_actions": {
            "name": "no_delay_actions",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestInteractiveMessage.interactive_payload_button": {
            "name": "interactive_payload_button",
            "location": 73,
            "return": [
                "Dict[Text,Union[list[dict[Text,Text]],Text,dict[Text,Text]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestInteractiveMessage.interactive_payload_select": {
            "name": "interactive_payload_select",
            "location": 86,
            "return": [
                "Dict[Text,Union[Text,list[dict[Text,Union[Text,list[dict[Text,Text]]]]],dict[Text,Text]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestInteractiveMessage.test_interactive_message": {
            "name": "test_interactive_message",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interactive_payload_button": [
                    "bool",
                    "dict"
                ],
                "interactive_payload_select": [
                    "bool",
                    "dict"
                ],
                "no_delay_actions": [
                    "bool",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "int",
                    "List[Tuple[str,Any]]"
                ],
                "fake_app_response": [
                    "bool",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "int",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "TestEventIgnoredBotMessage.fake_data": {
            "name": "fake_data",
            "location": 136,
            "return": [
                "Dict[Text,Union[Text,list[list[Text]],dict[Text,Union[Text,bool,dict[Text,Union[list,Text]]]]]]",
                "str",
                "List[str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "TestEventIgnoredBotMessage.test": {
            "name": "test",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_data": [
                    "dict",
                    "zerver.models.Stream"
                ]
            }
        },
        "TestInteractiveMessage.no_delay_actions.no_forward_message": {
            "name": "no_forward_message",
            "location": 61,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "channel": [
                    "bool",
                    "str",
                    "int"
                ],
                "msg": [
                    "bool",
                    "str",
                    "int"
                ],
                "from_user": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "megatron-master/app/megatron/tests/slack_connection_test.py": {
        "test_get_user_info": {
            "name": "test_get_user_info",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_customer_workspace_refresh": {
            "name": "test_customer_workspace_refresh",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_app_response": [
                    "bool"
                ]
            }
        }
    },
    "megatron-master/app/megatron/tests/test_tasks.py": {
        "test_archive_channels": {
            "name": "test_archive_channels",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "megatron-master/app/megatron/tests/utils_test.py": {
        "TestRemoveSensitiveData.test_sensitive_data_removed": {
            "name": "test_sensitive_data_removed",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "megatron-master/app/megatron/tests/__init_.py": {},
    "megatron-master/app/megatron/tests/__init__.py": {},
    "megatron-master/app/megatron/tests/factories/factories.py": {
        "MegatronChannelFactory._create": {
            "name": "_create",
            "location": 51,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "target_class": [
                    "str"
                ]
            }
        }
    },
    "megatron-master/docs/source/conf.py": {}
}
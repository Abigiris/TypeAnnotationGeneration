{
    "meowcat2-master/app/account.py": {
        "accountSettings": {
            "name": "accountSettings",
            "location": 19,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/adminsite.py": {
        "createAdminSite": {
            "name": "createAdminSite",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/alert.py": {
        "alertTabLine": {
            "name": "alertTabLine",
            "location": 27,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "tab": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "alerts_replies": {
            "name": "alerts_replies",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "getMessages": {
            "name": "getMessages",
            "location": 58,
            "return": [
                "str",
                "int",
                "bool",
                "pricemonitor.config.Coin",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "q": [
                    "int",
                    "str",
                    "models.Profile"
                ]
            }
        },
        "alerts_stars": {
            "name": "alerts_stars",
            "location": 71,
            "return": [
                "bytearray",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "getStarredMessages": {
            "name": "getStarredMessages",
            "location": 91,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "q": [
                    "int",
                    "str",
                    "models.Profile"
                ]
            }
        },
        "groupByMessage": {
            "name": "groupByMessage",
            "location": 112,
            "return": [
                "Iterable[Tuple[models.Message,List[str]]]",
                "typing.Generator[tuple[typing.Optional[list[]]]]",
                "typing.Generator[tuple[typing.Union[None,int,bytes,list[str],str,tuple[typing.Union[typing.Any,typing.Any]],list[]]]]"
            ],
            "arguments": {
                "als": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "alerts_current": {
            "name": "alerts_current",
            "location": 143,
            "return": [
                "int",
                "typing.Iterator",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "alertsTable": {
            "name": "alertsTable",
            "location": 159,
            "return": [
                "typing.Text",
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "q": [
                    "int",
                    "str"
                ],
                "pag": [
                    "int",
                    "str"
                ]
            }
        },
        "alerts_historic": {
            "name": "alerts_historic",
            "location": 199,
            "return": [
                "int",
                "typing.Iterator",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/allpages.py": {},
    "meowcat2-master/app/blog.py": {
        "blog": {
            "name": "blog",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "xFollow": {
            "name": "xFollow",
            "location": 102,
            "return": [
                "typing.Text",
                "int",
                "float"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "dict[, ]",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "typing.Hashable",
                    "dict",
                    "Hashable"
                ],
                "status": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "rss_blog": {
            "name": "rss_blog",
            "location": 133,
            "return": [
                "Response",
                "str",
                "dict",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "au_blog": {
            "name": "au_blog",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "BlogFormatter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[Collection[str]]",
                    "typing.Collection",
                    "None"
                ]
            }
        },
        "BlogFormatter.includeAuthorOneLine": {
            "name": "includeAuthorOneLine",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlogFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlogFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 42,
            "return": [
                "FeedGenerator",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/config.py": {},
    "meowcat2-master/app/follow.py": {
        "listFollowing": {
            "name": "listFollowing",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "float",
                    "dict[str, str]",
                    "Dict[str,str]",
                    "models.User"
                ]
            }
        },
        "followingTableH": {
            "name": "followingTableH",
            "location": 43,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "ai": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "core.models.Grouping",
                    "core.models.Registration",
                    "dict",
                    "Dict[str, Any]"
                ],
                "pag": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "float",
                    "list[]",
                    "Union[int, List]",
                    "Optional[float]"
                ]
            }
        },
        "userInfoLine": {
            "name": "userInfoLine",
            "location": 65,
            "return": [
                "dict"
            ],
            "arguments": {
                "id": [
                    "str",
                    "float",
                    "fal.models.Season",
                    "bozen.paginate.Paginator"
                ]
            }
        },
        "listFollowers": {
            "name": "listFollowers",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "models.File",
                    "dict"
                ]
            }
        },
        "followersTableH": {
            "name": "followersTableH",
            "location": 122,
            "return": [
                "typing.Text",
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "id": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "str",
                    "esm.models.last_operation.LastOperation"
                ],
                "pag": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "str",
                    "esm.models.last_operation.LastOperation"
                ]
            }
        },
        "userList": {
            "name": "userList",
            "location": 138,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {}
        },
        "userListTableH": {
            "name": "userListTableH",
            "location": 150,
            "return": [
                "typing.Text",
                "bool",
                "Iterable[Any]",
                "str",
                "int"
            ],
            "arguments": {
                "pag": [
                    "bool",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "followingMess": {
            "name": "followingMess",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[Iterable[int]]",
                    "typing.Iterable[int]",
                    "None"
                ]
            }
        },
        "rss_followingMess": {
            "name": "rss_followingMess",
            "location": 200,
            "return": [
                "Response",
                "str",
                "dict",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "au_followingMess": {
            "name": "au_followingMess",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "followerMess": {
            "name": "followerMess",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[Iterable[int]]",
                    "typing.Iterable[int]",
                    "None"
                ]
            }
        },
        "rss_followerMess": {
            "name": "rss_followerMess",
            "location": 252,
            "return": [
                "Response",
                "str",
                "dict",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "au_followerMess": {
            "name": "au_followerMess",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "FollowingFormatter.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "tracim.models.data.Workspace",
                    "readicomponents.User"
                ]
            }
        },
        "FollowingFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 172,
            "return": [
                "str",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowingFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 177,
            "return": [
                "FeedGenerator",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowerFormatter.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "Union[str, int, None]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "FollowerFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 224,
            "return": [
                "str",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowerFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 229,
            "return": [
                "FeedGenerator",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/front.py": {
        "front": {
            "name": "front",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/getrss.py": {
        "getRss": {
            "name": "getRss",
            "location": 12,
            "return": [
                "tuple[]",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "u": [
                    "str",
                    "int"
                ]
            }
        },
        "saveData": {
            "name": "saveData",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "getFeedDataFromFile": {
            "name": "getFeedDataFromFile",
            "location": 29,
            "return": [
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "displayFeedData": {
            "name": "displayFeedData",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "str",
                    "int",
                    "bytes",
                    "feedparser.FeedParserDict",
                    "typing.Generator[]",
                    "Generator"
                ]
            }
        }
    },
    "meowcat2-master/app/ht.py": {
        "errorBox": {
            "name": "errorBox",
            "location": 9,
            "return": [
                "str",
                "int",
                "typing.Text",
                "set",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "tuple[]",
                    "int",
                    "tuple"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "warningBox": {
            "name": "warningBox",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "typing.Text",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "str",
                    "float"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "goodMessageBox": {
            "name": "goodMessageBox",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "typing.Text",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "str",
                    "float"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "boolH": {
            "name": "boolH",
            "location": 70,
            "return": [
                "str",
                "Callable",
                "list[]",
                "bytes",
                "int",
                "IO"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "str",
                    "int"
                ],
                "yesText": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "noText": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        }
    },
    "meowcat2-master/app/login.py": {
        "login": {
            "name": "login",
            "location": 43,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "createAccount": {
            "name": "createAccount",
            "location": 116,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "CreateAccountForm.formWideErrorMessage": {
            "name": "formWideErrorMessage",
            "location": 107,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/main.py": {
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/mark.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 70,
            "return": [
                "Tuple[(str, List[str])]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "wikiExt": [
                    "bool"
                ]
            }
        },
        "encloseHashtagAtStart": {
            "name": "encloseHashtagAtStart",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "normaliseTagWpn": {
            "name": "normaliseTagWpn",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "GetHashtags.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str"
                ]
            }
        },
        "GetHashtags.calc": {
            "name": "calc",
            "location": 118,
            "return": [
                "Tuple[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetHashtags.substFun": {
            "name": "substFun",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mo": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "meowcat2-master/app/mess.py": {
        "messList": {
            "name": "messList",
            "location": 47,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {}
        },
        "rss_messList": {
            "name": "rss_messList",
            "location": 58,
            "return": [
                "Response",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "au_messList": {
            "name": "au_messList",
            "location": 65,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "Sequence[int]",
                "str"
            ],
            "arguments": {}
        },
        "mess": {
            "name": "mess",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Dict[str, T]",
                    "dict[str, T]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "messSource": {
            "name": "messSource",
            "location": 89,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "complex",
                "models.Name"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Dict[str, T]",
                    "dict[str, T]"
                ]
            }
        },
        "messRep": {
            "name": "messRep",
            "location": 114,
            "return": [
                "str",
                "ajapaik.ajapaik.models.Album",
                "list[]",
                "dict",
                "dict[str, typing.Any]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "id": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "editMess": {
            "name": "editMess",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Dict[str, T]",
                    "dict[str, T]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "context": {
            "name": "context",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "thread": {
            "name": "thread",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "None",
                "models.Question",
                "list[str]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "threadFromH": {
            "name": "threadFromH",
            "location": 241,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "m": [
                    "str",
                    "django.db.models.Model"
                ]
            }
        },
        "MessListFormatter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessListFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 34,
            "return": [
                "typing.Text",
                "List[Dict]",
                "str",
                "List[str]",
                "List[List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessListFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 39,
            "return": [
                "FeedGenerator",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/messlist.py": {
        "FormattingOptionsForm.setFromUrl": {
            "name": "setFromUrl",
            "location": 45,
            "return": [
                "None",
                "Callable",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.getQuery": {
            "name": "getQuery",
            "location": 74,
            "return": [
                "dict[typing.Text, dict[typing.Text, list[typing.Optional[typing.Text]]]]",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "fof": [
                    "bool",
                    "None"
                ]
            }
        },
        "ListFormatter.setUpPagination": {
            "name": "setUpPagination",
            "location": 91,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.paginationBefore": {
            "name": "paginationBefore",
            "location": 104,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.paginationAfter": {
            "name": "paginationAfter",
            "location": 116,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.getMessages": {
            "name": "getMessages",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fof": [
                    "server.models.PickupPoint",
                    "str",
                    "None"
                ]
            }
        },
        "ListFormatter.includeAuthorOneLine": {
            "name": "includeAuthorOneLine",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.getMessagesH": {
            "name": "getMessagesH",
            "location": 165,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 182,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 188,
            "return": [
                "feedgen.feed.FeedGenerator",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.jsForPage": {
            "name": "jsForPage",
            "location": 194,
            "return": [
                "int",
                "float",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.autoUpdateJS": {
            "name": "autoUpdateJS",
            "location": 211,
            "return": [
                "int",
                "str",
                "typing.Text",
                "bool",
                "list[]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.mostRecentTimeStamp": {
            "name": "mostRecentTimeStamp",
            "location": 229,
            "return": [
                "typing.Text",
                "str",
                "base_site.nubank.models.NubankCards",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListFormatter.renderRss": {
            "name": "renderRss",
            "location": 243,
            "return": [
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/mkusers.py": {
        "makeUser": {
            "name": "makeUser",
            "location": 13,
            "return": [
                "None",
                "float",
                "str",
                "DefaultDict",
                "bytes"
            ],
            "arguments": {
                "un": [
                    "str",
                    "zerver.models.Realm",
                    "dss.config.Replica"
                ]
            }
        },
        "makeUsers": {
            "name": "makeUsers",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/models.py": {
        "maxChars": {
            "name": "maxChars",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "a": [
                    "float",
                    "int",
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "getAccountInfo": {
            "name": "getAccountInfo",
            "location": 300,
            "return": [
                "str",
                "Tuple[int, int, int]",
                "int",
                "bool",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "AccountInfo"
            ],
            "arguments": {
                "userId": [
                    "str"
                ]
            }
        },
        "follows": {
            "name": "follows",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "a1": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "a2": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "notifyTags": {
            "name": "notifyTags",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Type[Exception]",
                    "list"
                ]
            }
        },
        "notifyTag": {
            "name": "notifyTag",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ts": [
                    "str",
                    "int"
                ]
            }
        },
        "x_numActiveAlerts": {
            "name": "x_numActiveAlerts",
            "location": 385,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "Message.classLogo": {
            "name": "classLogo",
            "location": 47,
            "return": [
                "typing.Text",
                "NamedTuple",
                "str",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "typing.Callable[..., T]",
                    "Type[Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "Message.preCreate": {
            "name": "preCreate",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.preSave": {
            "name": "preSave",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.url": {
            "name": "url",
            "location": 62,
            "return": [
                "str",
                "typing.Type",
                "Callable[[str], bool]",
                "list[str]",
                "dict[str, str]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.fullUrl": {
            "name": "fullUrl",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Any]",
                "app.App",
                "bool",
                "app.config.MQConfig",
                "Dict[str, str]",
                "zaimcsvconverter.config.SFCardViewerConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.viewH": {
            "name": "viewH",
            "location": 71,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, typing.Union[str,None]]",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.starH": {
            "name": "starH",
            "location": 102,
            "return": [
                "int",
                "str",
                "Callable",
                "list[tuple[typing.Union[int,int]]]",
                "float",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.linkA": {
            "name": "linkA",
            "location": 130,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.replyA": {
            "name": "replyA",
            "location": 136,
            "return": [
                "tuple",
                "typing.Text",
                "Tuple[str, str, str]",
                "float",
                "list[]",
                "bool",
                "str",
                "dict[typing.Any, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.editA": {
            "name": "editA",
            "location": 146,
            "return": [
                "tuple",
                "typing.Text",
                "Tuple[str, str, str]",
                "float",
                "list[]",
                "bool",
                "str",
                "dict[typing.Any, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.replyToText": {
            "name": "replyToText",
            "location": 158,
            "return": [
                "int",
                "Optional[float]",
                "typing.Text",
                "list[]",
                "str",
                "list[str]",
                "bool",
                "list[tuple[typing.Union[str,typing.Any,str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.editedAtStr": {
            "name": "editedAtStr",
            "location": 170,
            "return": [
                "typing.Text",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.contextA": {
            "name": "contextA",
            "location": 180,
            "return": [
                "tuple",
                "typing.Text",
                "Tuple[str, str, str]",
                "float",
                "list[]",
                "bool",
                "str",
                "dict[typing.Any, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.viewOneLine": {
            "name": "viewOneLine",
            "location": 187,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "showAuthor": [
                    "bool",
                    "Callable",
                    "int",
                    "str",
                    "Iterator[str]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[bytes]"
                ]
            }
        },
        "Message.context": {
            "name": "context",
            "location": 210,
            "return": [
                "list[Message]",
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.isReply": {
            "name": "isReply",
            "location": 221,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Optional[Iterable[Any]]",
                "Callable[[str], str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.isHeadPost": {
            "name": "isHeadPost",
            "location": 224,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.getParent": {
            "name": "getParent",
            "location": 227,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.getNumChildren": {
            "name": "getNumChildren",
            "location": 232,
            "return": [
                "Callable",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.getChildren": {
            "name": "getChildren",
            "location": 236,
            "return": [
                "str",
                "bool",
                "int",
                "pricemonitor.config.Coin",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountInfo.url": {
            "name": "url",
            "location": 284,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountInfo.classLogo": {
            "name": "classLogo",
            "location": 289,
            "return": [
                "typing.Text",
                "Type",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountInfo.preCreate": {
            "name": "preCreate",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountInfo.preSave": {
            "name": "preSave",
            "location": 296,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.getName": {
            "name": "getName",
            "location": 321,
            "return": [
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.classLogo": {
            "name": "classLogo",
            "location": 325,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "typing.Callable[..., T]",
                    "Type[Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "Alert.logo": {
            "name": "logo",
            "location": 369,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.classLogo": {
            "name": "classLogo",
            "location": 376,
            "return": [
                "typing.Text",
                "NamedTuple",
                "str",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.preCreate": {
            "name": "preCreate",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/permission.py": {
        "needUser": {
            "name": "needUser",
            "location": 20,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "fn": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "currentUserName": {
            "name": "currentUserName",
            "location": 34,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "http403": {
            "name": "http403",
            "location": 50,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "msg": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "http404": {
            "name": "http404",
            "location": 62,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "needUser.viewWrapper": {
            "name": "viewWrapper",
            "location": 24,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/rssin.py": {
        "rssin": {
            "name": "rssin",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "meowcat2-master/app/star.py": {
        "mostStarred": {
            "name": "mostStarred",
            "location": 19,
            "return": [
                "bool",
                "float",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "uid": [
                    "None",
                    "Optional[float]",
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "mostStarredTable": {
            "name": "mostStarredTable",
            "location": 41,
            "return": [
                "typing.Text",
                "str",
                "Sequence"
            ],
            "arguments": {
                "q": [
                    "float",
                    "str",
                    "set",
                    "set[]",
                    "tuple",
                    "tuple[]"
                ],
                "pag": [
                    "float",
                    "str",
                    "set",
                    "set[]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "x_star": {
            "name": "x_star",
            "location": 78,
            "return": [
                "None",
                "app.models.Article",
                "typing.Text",
                "Iterator",
                "core.models.Resource"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        }
    },
    "meowcat2-master/app/tabs.py": {
        "makeTabLine3": {
            "name": "makeTabLine3",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "tabTypesNames": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "curTabType": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "urlTemplate": [
                    "str"
                ],
                "fillerH": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        }
    },
    "meowcat2-master/app/tag.py": {
        "popularTags": {
            "name": "popularTags",
            "location": 25,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "popularTagsTable": {
            "name": "popularTagsTable",
            "location": 35,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "pag": [
                    "int",
                    "typing.Iterable[int]",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "audiopyle.lib.models.resulAnalysisStats",
                    "Iterable[int]"
                ]
            }
        },
        "tag": {
            "name": "tag",
            "location": 87,
            "return": [
                "list[int]",
                "str",
                "float",
                "list[]",
                "bool",
                "Iterable[str]",
                "List[str]",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "t": [
                    "float"
                ]
            }
        },
        "rss_tag": {
            "name": "rss_tag",
            "location": 99,
            "return": [
                "Response",
                "str",
                "Optional[str]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "t": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None",
                    "set",
                    "set[]"
                ]
            }
        },
        "au_tag": {
            "name": "au_tag",
            "location": 106,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "t": [
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "TagFormatter.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "typing.Sequence[str]",
                    "Union[str, Sequence[str]]"
                ]
            }
        },
        "TagFormatter.pageUrl": {
            "name": "pageUrl",
            "location": 74,
            "return": [
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagFormatter.getFeedGenerator": {
            "name": "getFeedGenerator",
            "location": 79,
            "return": [
                "FeedGenerator",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/templateglobal.py": {
        "rowcol": {
            "name": "rowcol",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "colSpec": [
                    "str"
                ]
            }
        },
        "col": {
            "name": "col",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "colSpec": [
                    "str"
                ]
            }
        },
        "endrow": {
            "name": "endrow",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "formSection": {
            "name": "formSection",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "str"
                ]
            }
        },
        "helpPage": {
            "name": "helpPage",
            "location": 90,
            "return": [
                "typing.Text",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {}
        },
        "highlightPageIfCurrent": {
            "name": "highlightPageIfCurrent",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "testUrl": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "highlightPageExact": {
            "name": "highlightPageExact",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "testUrl": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "highlightPageFull": {
            "name": "highlightPageFull",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "testUrl": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "completeH": {
            "name": "completeH",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "b": [
                    "int",
                    "dict[tuple[typing.Union[int,...]], int]",
                    "bool",
                    "Dict[Tuple[int, ...], int]"
                ],
                "yesText": [
                    "typing.Text",
                    "Tuple[float, float, float, float]",
                    "bool",
                    "str",
                    "Sequence[int]",
                    "int"
                ],
                "noText": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "yesNoH": {
            "name": "yesNoH",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "b": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "yesText": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "noText": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "usingHelp": {
            "name": "usingHelp",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "generate_csrf_token": {
            "name": "generate_csrf_token",
            "location": 164,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "currentUserName": {
            "name": "currentUserName",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "canView": {
            "name": "canView",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "page": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "meowcat2-master/app/test_mark.py": {
        "T_mark.checkTags": {
            "name": "checkTags",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str"
                ],
                "ts": [
                    "List[str]"
                ],
                "tagsSB": [
                    "List[str]"
                ]
            }
        },
        "T_mark.checkHeading": {
            "name": "checkHeading",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str"
                ],
                "headText": [
                    "str"
                ],
                "headType": [
                    "str"
                ]
            }
        },
        "T_mark.test_normal": {
            "name": "test_normal",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_mark.test_headings": {
            "name": "test_headings",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_mark.test_tags": {
            "name": "test_tags",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_mark.test_tagsAtStart": {
            "name": "test_tagsAtStart",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_mark.test_tagsUnderline": {
            "name": "test_tagsUnderline",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_normaliseTagWpn.ntw": {
            "name": "ntw",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "sb": [
                    "str"
                ],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "T_normaliseTagWpn.test_capitalisation": {
            "name": "test_capitalisation",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_normaliseTagWpn.test_cyrillic": {
            "name": "test_cyrillic",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_normaliseTagWpn.test_spaces": {
            "name": "test_spaces",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_normaliseTagWpn.test_dots": {
            "name": "test_dots",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/test_wiki.py": {
        "T_paths.testDecompose": {
            "name": "testDecompose",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pn": [
                    "str"
                ],
                "fo": [
                    "str",
                    "float"
                ],
                "fi": [
                    "str"
                ]
            }
        },
        "T_paths.test_decomposePathName": {
            "name": "test_decomposePathName",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/userdb.py": {
        "load_user": {
            "name": "load_user",
            "location": 117,
            "return": [
                "set",
                "str",
                "int",
                "typing.Generator[typing.Union[str,None,None]]",
                "bool"
            ],
            "arguments": {
                "userId": [
                    "str"
                ]
            }
        },
        "randStr": {
            "name": "randStr",
            "location": 131,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "hashPassword": {
            "name": "hashPassword",
            "location": 135,
            "return": [
                "str",
                "bool",
                "dict[, ]",
                "list[list[str]]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "verifyPassword": {
            "name": "verifyPassword",
            "location": 145,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "hashedPassword": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "guessedPassword": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "toHex": {
            "name": "toHex",
            "location": 158,
            "return": [
                "typing.Text",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "str",
                "Tuple[type]",
                "Iterable[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "AnyStr",
                    "Iterable[T]"
                ]
            }
        },
        "User.classLogo": {
            "name": "classLogo",
            "location": 52,
            "return": [
                "typing.Text",
                "bool",
                "Type",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "typing.Callable[..., T]",
                    "Type[Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_anonymous": {
            "name": "is_anonymous",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.isAuthenticated": {
            "name": "isAuthenticated",
            "location": 83,
            "return": [
                "str",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.preSave": {
            "name": "preSave",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.blogLink": {
            "name": "blogLink",
            "location": 105,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/wiki.py": {
        "wiki_u": {
            "name": "wiki_u",
            "location": 27,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "u": [
                    "str"
                ]
            }
        },
        "wiki": {
            "name": "wiki",
            "location": 31,
            "return": [
                "int",
                "bool",
                "str",
                "Callable",
                "models.Question",
                "dict[str, typing.Any]",
                "dict[str, str]",
                "float"
            ],
            "arguments": {
                "u": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "pn": [
                    "str",
                    "bool",
                    "zerver.models.Realm"
                ]
            }
        },
        "wikiEdit": {
            "name": "wikiEdit",
            "location": 58,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "u": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "pn": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "wikiIndex": {
            "name": "wikiIndex",
            "location": 89,
            "return": [
                "str",
                "int",
                "Callable",
                "tuple[typing.Union[str,typing.Any]]",
                "models.Question",
                "dict[str, typing.Any]",
                "list[]"
            ],
            "arguments": {
                "u": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "db.models.Region",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "zerver.models.Realm"
                ]
            }
        },
        "wikiNav": {
            "name": "wikiNav",
            "location": 110,
            "return": [
                "str",
                "int",
                "dict[str, int]",
                "Callable",
                "bool",
                "models.Question"
            ],
            "arguments": {
                "u": [
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "str",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "wikiPageNav": {
            "name": "wikiPageNav",
            "location": 125,
            "return": [
                "str",
                "int",
                "dict[str, int]",
                "Callable",
                "bool",
                "models.Question"
            ],
            "arguments": {
                "u": [
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "str",
                    "int",
                    "bool",
                    "None"
                ],
                "npn": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, List[str]]",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "meowcat2-master/app/wikidb.py": {
        "getWikiPage": {
            "name": "getWikiPage",
            "location": 69,
            "return": [
                "str",
                "list[str]",
                "bool",
                "WikiPage"
            ],
            "arguments": {
                "u": [
                    "str",
                    "int",
                    "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                    "dict[int, T]"
                ],
                "pn": [
                    "str",
                    "int",
                    "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                    "dict[int, T]"
                ],
                "create": [
                    "bool",
                    "int"
                ]
            }
        },
        "getWikiPages": {
            "name": "getWikiPages",
            "location": 88,
            "return": [
                "str",
                "bool",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "u": [
                    "str",
                    "bool"
                ]
            }
        },
        "WikiPage.classLogo": {
            "name": "classLogo",
            "location": 44,
            "return": [
                "typing.Text",
                "Set[str]",
                "Set[object]",
                "Set[Type[Any]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "typing.Callable[..., T]",
                    "Type[Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "WikiPage.logo": {
            "name": "logo",
            "location": 47,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiPage.url": {
            "name": "url",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiPage.getName": {
            "name": "getName",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiPage.preCreate": {
            "name": "preCreate",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiPage.preSave": {
            "name": "preSave",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/admin.py": {
        "getColName": {
            "name": "getColName",
            "location": 304,
            "return": [
                "str",
                "list[str]",
                "dict[str, str]",
                "set[str]",
                "tuple[typing.Union[int,int,int]]",
                "typing.Pattern",
                "typing.Final"
            ],
            "arguments": {
                "clsName": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "AdminSite.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "collections": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "stub": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AdminSite.showFields": {
            "name": "showFields",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "colClass": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ],
                "fieldNames": [
                    "str"
                ]
            }
        },
        "AdminSite.sortFields": {
            "name": "sortFields",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "colClass": [
                    "str",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "sortSpec": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AdminSite.runFlask": {
            "name": "runFlask",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "flaskApp": [
                    "bool",
                    "str"
                ],
                "jinjaEnv": [
                    "bool",
                    "type",
                    "typing.Type",
                    "str",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AdminSite.adminEp": {
            "name": "adminEp",
            "location": 108,
            "return": [
                "str",
                "int",
                "list[]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.colTableH": {
            "name": "colTableH",
            "location": 120,
            "return": [
                "typing.Text",
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.adminColEp": {
            "name": "adminColEp",
            "location": 152,
            "return": [
                "int",
                "str",
                "bool",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "colName": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "AdminSite.docTableH": {
            "name": "docTableH",
            "location": 169,
            "return": [
                "str",
                "int",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "colClass": [
                    "dict",
                    "Callable"
                ],
                "pag": [
                    "str"
                ]
            }
        },
        "AdminSite.adminDocEp": {
            "name": "adminDocEp",
            "location": 216,
            "return": [
                "set[]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "colName": [
                    "int",
                    "str",
                    "float"
                ],
                "id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "AdminSite.adminPagesLisH": {
            "name": "adminPagesLisH",
            "location": 266,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.getUseFields": {
            "name": "getUseFields",
            "location": 281,
            "return": [
                "dict[, ]",
                "dict",
                "list[]",
                "tuple[str]",
                "Union[int, float, complex]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "type",
                "dict[typing.Any, str]",
                "OrderedDict",
                "Optional[str]",
                "Mapping[int, str]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "colClass": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Tuple[type]",
                    "str",
                    "tuple[typing.Type]"
                ]
            }
        },
        "AdminSite.colUrl": {
            "name": "colUrl",
            "location": 291,
            "return": [
                "str",
                "bool",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "colClass": [
                    "str",
                    "Exception",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/autopages.py": {
        "notifyFlaskForAutopages": {
            "name": "notifyFlaskForAutopages",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "flask.Flask"
                ],
                "jinjaEnv": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "http403": {
            "name": "http403",
            "location": 24,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "addAutopage": {
            "name": "addAutopage",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "monDocCls": [
                    "str",
                    "int",
                    "Type[T]",
                    "typing.Type"
                ],
                "pages": [
                    "str"
                ]
            }
        },
        "Autopage.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monDocCls": [
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "typing.Type",
                    "Type",
                    "tuple[str]",
                    "Tuple[str]",
                    "int"
                ],
                "caps": [
                    "str"
                ]
            }
        },
        "Autopage.runFlask": {
            "name": "runFlask",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autopage.colStubBrowseEp": {
            "name": "colStubBrowseEp",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autopage.browseTableH": {
            "name": "browseTableH",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pag": [
                    "paginate.Paginator"
                ]
            }
        },
        "Autopage.addButtonH": {
            "name": "addButtonH",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autopage.colStubDocEp": {
            "name": "colStubDocEp",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/bozenutil.py": {
        "Incrementor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "int",
                    "float"
                ]
            }
        },
        "Incrementor.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "int",
                "float",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/butil.py": {
        "normalizePath": {
            "name": "normalizePath",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "form": {
            "name": "form",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "pr": {
            "name": "pr",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "epr": {
            "name": "epr",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "prn": {
            "name": "prn",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "eprn": {
            "name": "eprn",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "dpr": {
            "name": "dpr",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "formatStr": [
                    "str"
                ]
            }
        },
        "printargs": {
            "name": "printargs",
            "location": 85,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "pretty": {
            "name": "pretty",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "ob": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "myStr": {
            "name": "myStr",
            "location": 113,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "None",
                    "Optional[object]",
                    "Optional[int]"
                ]
            }
        },
        "attrEsc": {
            "name": "attrEsc",
            "location": 133,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "typing.Text",
                "str",
                "int",
                "None",
                "list[typing.Any]",
                "typing.Type",
                "float",
                "dict[, ]",
                "typing.Sequence[typing.Any]",
                "typing.Sequence[str]",
                "dict[str, str]"
            ],
            "arguments": {
                "s": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[List[Any]]",
                    "None",
                    "list[typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "typing.Type",
                    "Optional[float]",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "noneIs": [
                    "typing.Text",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "htmlEsc": {
            "name": "htmlEsc",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "toBytes": {
            "name": "toBytes",
            "location": 150,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "int"
                ]
            }
        },
        "exValue": {
            "name": "exValue",
            "location": 183,
            "return": [
                "str",
                "dict[tuple[typing.Union[int,int]], str]",
                "Dict[str, Dict[str, int]]",
                "List[str]",
                "list[str]",
                "Dict[str, Any]",
                "dict[str, int]",
                "set",
                "dict[str, dict[, ]]",
                "dict[str, str]",
                "typing.Type",
                "dict[, ]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "orValue": [
                    "str",
                    "Iterable[Hashable]",
                    "typing.Iterable[typing.Hashable]"
                ]
            }
        },
        "printargs.wrapper": {
            "name": "wrapper",
            "location": 87,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "Struct.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.hasattr": {
            "name": "hasattr",
            "location": 177,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/bztypes.py": {},
    "meowcat2-master/app/bozen/fieldinfo.py": {
        "titleize": {
            "name": "titleize",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "cssClasses": {
            "name": "cssClasses",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "possibleAttr": {
            "name": "possibleAttr",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "attrName": [
                    "str"
                ],
                "attrValue": [
                    "Optional[str]"
                ]
            }
        },
        "FieldInfo.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.createWithInitialValue": {
            "name": "createWithInitialValue",
            "location": 139,
            "return": [
                "int",
                "list",
                "str",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "FieldInfo.xxxformBox": {
            "name": "xxxformBox",
            "location": 155,
            "return": [
                "List[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Type[Any]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "FieldInfo.formField": {
            "name": "formField",
            "location": 158,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Container[str]",
                    "typing.Container",
                    "AbstractSet[str]",
                    "typing.AbstractSet",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "FieldInfo.autocompleteAttr": {
            "name": "autocompleteAttr",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.formField_rw": {
            "name": "formField_rw",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "FieldInfo.formField_ro": {
            "name": "formField_ro",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "AnyStr",
                    "typing.AnyStr"
                ]
            }
        },
        "FieldInfo.errorMsg": {
            "name": "errorMsg",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[SupportsFloat]",
                    "None"
                ]
            }
        },
        "FieldInfo.readArgs": {
            "name": "readArgs",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.defaultDefault": {
            "name": "defaultDefault",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.convert": {
            "name": "convert",
            "location": 262,
            "return": [
                "bool",
                "str",
                "Mapping",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "FieldInfo.convertValue": {
            "name": "convertValue",
            "location": 275,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "FieldInfo.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FieldInfo.convertToScreen": {
            "name": "convertToScreen",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "T"
                ]
            }
        },
        "FieldInfo.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 302,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0"
                ]
            }
        },
        "FieldInfo.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 309,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0"
                ]
            }
        },
        "FieldInfo.setFieldName": {
            "name": "setFieldName",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        },
        "FieldInfo.setDocClass": {
            "name": "setDocClass",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docClass": [
                    "Type[FieldInfo]"
                ]
            }
        },
        "FieldInfo.classFieldName": {
            "name": "classFieldName",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.readArgs": {
            "name": "readArgs",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.defaultDefault": {
            "name": "defaultDefault",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.convertValue": {
            "name": "convertValue",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "StrField.errorMsg": {
            "name": "errorMsg",
            "location": 372,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "list",
                    "T"
                ]
            }
        },
        "TextAreaField.readArgs": {
            "name": "readArgs",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAreaField.formField_rw": {
            "name": "formField_rw",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TextAreaField.formField_ro": {
            "name": "formField_ro",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "PasswordField.formField_rw": {
            "name": "formField_rw",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/filefield.py": {},
    "meowcat2-master/app/bozen/formdoc.py": {
        "initialiseClass": {
            "name": "initialiseClass",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "dyct": [
                    "bool",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "checkForMissingIndex": {
            "name": "checkForMissingIndex",
            "location": 59,
            "return": [
                "None",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "dyct": [
                    "dict",
                    "dict[, ]",
                    "Type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FormDocMeta.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "dyct": [
                    "str",
                    "bool",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "initialiseClass.keyFn": {
            "name": "keyFn",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "fieldName": [
                    "str",
                    "Tuple[str, Optional[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "FormDoc.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.allowedFieldNameSet": {
            "name": "allowedFieldNameSet",
            "location": 106,
            "return": [
                "str",
                "NamedTuple",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.populateFields": {
            "name": "populateFields",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__getattr__": {
            "name": "__getattr__",
            "location": 138,
            "return": [
                "Optional[str]",
                "str",
                "typing.Iterator",
                "int",
                "dict[, ]",
                "Dict[str, Any]",
                "NullDoc"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        },
        "FormDoc.getFKeysDereference": {
            "name": "getFKeysDereference",
            "location": 166,
            "return": [
                "list[]",
                "str",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "fnids": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "FormDoc.__getitem__": {
            "name": "__getitem__",
            "location": 186,
            "return": [
                "str",
                "Dict[str, List[Any]]",
                "Union[str, bytes]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[T, T]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "FormDoc.__setitem__": {
            "name": "__setitem__",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "FormDoc.__delitem__": {
            "name": "__delitem__",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[T, T]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "FormDoc.keys": {
            "name": "keys",
            "location": 195,
            "return": [
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Literal",
                "Mapping",
                "bytes",
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__iter__": {
            "name": "__iter__",
            "location": 198,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__len__": {
            "name": "__len__",
            "location": 202,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.get": {
            "name": "get",
            "location": 205,
            "return": [
                "None",
                "bool",
                "list[T]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Union[int, str]",
                    "int",
                    "List[Tuple]",
                    "str",
                    "list[tuple[]]"
                ],
                "defaultValue": [
                    "List[T]",
                    "None",
                    "list[T]"
                ]
            }
        },
        "FormDoc.has_key": {
            "name": "has_key",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "FormDoc.buildForm": {
            "name": "buildForm",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.buildFormLines": {
            "name": "buildFormLines",
            "location": 225,
            "return": [
                "typing.Text",
                "str",
                "int",
                "complex",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.formLine": {
            "name": "formLine",
            "location": 237,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Dict[str, float]",
                    "dict[str, float]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FormDoc.formField": {
            "name": "formField",
            "location": 266,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FormDoc.populateFromRequest": {
            "name": "populateFromRequest",
            "location": 281,
            "return": [
                "int",
                "Sequence[str]",
                "set",
                "\"Result\""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Hashable",
                    "str",
                    "typing.Hashable",
                    "Exception"
                ],
                "populateBools": [
                    "typing.Text",
                    "Dict[str, Any]",
                    "Type",
                    "int"
                ]
            }
        },
        "FormDoc.makeCopy": {
            "name": "makeCopy",
            "location": 376,
            "return": [
                "int",
                "Iterable[str]",
                "str",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "Callable",
                "dict[, ]",
                "typing.Callable[list[typing.Any], list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.asReadableH": {
            "name": "asReadableH",
            "location": 382,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "dict[str, dict[str, typing.Any]]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FormDoc.asReadable": {
            "name": "asReadable",
            "location": 393,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "dict[str, dict[str, typing.Any]]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FormDoc.isValid": {
            "name": "isValid",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fieldsToValidate": [
                    "Set[str]",
                    "None",
                    "Optional[str]",
                    "set[str]",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "FormDoc.formWideErrorMessageH": {
            "name": "formWideErrorMessageH",
            "location": 427,
            "return": [
                "str",
                "Sequence",
                "typing.Text",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.formWideErrorMessage": {
            "name": "formWideErrorMessage",
            "location": 442,
            "return": [
                "typing.Text",
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.getFieldInfo": {
            "name": "getFieldInfo",
            "location": 454,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "fieldName": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FormDoc.hasFieldInfo": {
            "name": "hasFieldInfo",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "fieldName": [
                    "str"
                ]
            }
        },
        "FormDoc.fieldNames": {
            "name": "fieldNames",
            "location": 466,
            "return": [
                "list[]",
                "bool",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Exception",
                    "type",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "FormDoc.setField": {
            "name": "setField",
            "location": 470,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ],
                "newValue": [
                    "str",
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "FormDoc.classTitle": {
            "name": "classTitle",
            "location": 488,
            "return": [
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ]
            }
        },
        "FormDoc.classTitlePlural": {
            "name": "classTitlePlural",
            "location": 492,
            "return": [
                "Dict[str, Any]",
                "Tuple[str]",
                "bytes",
                "Type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, type]"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/ht.py": {
        "errorBox": {
            "name": "errorBox",
            "location": 8,
            "return": [
                "str",
                "int",
                "typing.Text",
                "set",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "tuple[]",
                    "int",
                    "tuple"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "warningBox": {
            "name": "warningBox",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "typing.Text",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "str",
                    "float"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "goodMessageBox": {
            "name": "goodMessageBox",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "typing.Text",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "str",
                    "float"
                ],
                "escapeForHtml": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/keychoicefield.py": {
        "renderChoices": {
            "name": "renderChoices",
            "location": 228,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "fieldName": [
                    "str"
                ],
                "choices": [
                    "str",
                    "bool",
                    "Type[T]"
                ],
                "chosen": [
                    "str",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ChoiceField.readArgs": {
            "name": "readArgs",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceField.formField_rw": {
            "name": "formField_rw",
            "location": 50,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "Callable[..., Awaitable[None]]",
                    "typing.Callable[..., collections.abc.Awaitable[None]]",
                    "Type",
                    "typing.Type",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "ChoiceField.getChoices": {
            "name": "getChoices",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[Union[str, int]]",
                    "list[typing.Union[str,int]]"
                ]
            }
        },
        "ChoiceField.convertToScreen": {
            "name": "convertToScreen",
            "location": 69,
            "return": [
                "int",
                "list",
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ChoiceField.errorMsg": {
            "name": "errorMsg",
            "location": 77,
            "return": [
                "typing.Text",
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FK.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "foreignTable": [
                    "bool",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[int, str]",
                    "typing.Mapping"
                ]
            }
        },
        "FK.readArgs": {
            "name": "readArgs",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FK.formField_rw": {
            "name": "formField_rw",
            "location": 122,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "FK.formField_ro": {
            "name": "formField_ro",
            "location": 131,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "FK.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 134,
            "return": [
                "str",
                "Union[str, int, float]",
                "int",
                "list[str]",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "FK.getChoices": {
            "name": "getChoices",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "List['PydanticModelField']",
                    "list[F]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "FK.convertValue": {
            "name": "convertValue",
            "location": 170,
            "return": [
                "str",
                "bool",
                "List[str]",
                "dict[, ]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "T",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "FK.errorMsg": {
            "name": "errorMsg",
            "location": 177,
            "return": [
                "typing.Text",
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FK.getDoc": {
            "name": "getDoc",
            "location": 188,
            "return": [
                "str",
                "float",
                "bool",
                "int",
                "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "fkValue": [
                    "bool",
                    "str",
                    "T",
                    "bytes",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "FK.foreignTable": {
            "name": "foreignTable",
            "location": 202,
            "return": [
                "float",
                "str",
                "list[]",
                "type",
                "dict[str, None]",
                "int",
                "dict[typing.Type, str]",
                "dict[str, bool]",
                "set[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/lintest.py": {
        "fileExists": {
            "name": "fileExists",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "dirExists": {
            "name": "dirExists",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int"
                ]
            }
        },
        "getFunCollate": {
            "name": "getFunCollate",
            "location": 433,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "Dict[str, Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "stripOnLines": {
            "name": "stripOnLines",
            "location": 440,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Test.getFullName": {
            "name": "getFullName",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.getParentName": {
            "name": "getParentName",
            "location": 81,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "Union[str, bytes, IO[bytes]]",
                "Union[str, bytes]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.printTestResults": {
            "name": "printTestResults",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAssertionMixin.assertFileExists": {
            "name": "assertFileExists",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [
                    "str"
                ],
                "comment": [
                    "typing.Text",
                    "bytes",
                    "List[str]",
                    "str"
                ]
            }
        },
        "FileAssertionMixin.assertFileDoesNotExist": {
            "name": "assertFileDoesNotExist",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [
                    "str",
                    "Union[str, Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "List[str]",
                    "list[str]"
                ],
                "comment": [
                    "typing.Text",
                    "bool",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "FileAssertionMixin.assertDirExists": {
            "name": "assertDirExists",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [
                    "str",
                    "bytes"
                ],
                "comment": [
                    "typing.Text",
                    "dict",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "FileAssertionMixin.assertFilesEqual": {
            "name": "assertFilesEqual",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan1": [
                    "str",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "pan2": [
                    "str",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "comment": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "Dict[str, Dict[Any, int]]"
                ]
            }
        },
        "FileAssertionMixin.assertFileHasData": {
            "name": "assertFileHasData",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "int",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "comment": [
                    "typing.Text",
                    "dict",
                    "bytes"
                ]
            }
        },
        "FileAssertionMixin.cmd": {
            "name": "cmd",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "TestCase.passedTest": {
            "name": "passedTest",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCase.assertEqual": {
            "name": "assertEqual",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "List[int]",
                    "list[int]"
                ],
                "sb": [
                    "list[int]",
                    "List[int]",
                    "set[]",
                    "bool",
                    "set",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "comment": [
                    "typing.Text",
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "TestCase.assertApprox": {
            "name": "assertApprox",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "sb": [
                    "int",
                    "List[int]"
                ],
                "comment": [
                    "typing.Text",
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "TestCase.assertNotEqual": {
            "name": "assertNotEqual",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "list[int]",
                    "List[int]",
                    "set[]",
                    "bool",
                    "set",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "snb": [
                    "list[int]",
                    "List[int]",
                    "set[]",
                    "bool",
                    "set",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "comment": [
                    "typing.Text",
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "TestCase.assertBool": {
            "name": "assertBool",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bool": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "comment": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "TestCase.assertFalse": {
            "name": "assertFalse",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bool": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "Callable[[], Any]",
                    "list[]",
                    "list"
                ],
                "comment": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCase.failed": {
            "name": "failed",
            "location": 301,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "typing.Text",
                    "str",
                    "int",
                    "float",
                    "Union[float, int]"
                ]
            }
        },
        "TestCase.passed": {
            "name": "passed",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestCase.run": {
            "name": "run",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[\"TreeNode\"]",
                    "None"
                ]
            }
        },
        "TestCase._pnTxt": {
            "name": "_pnTxt",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.canRun": {
            "name": "canRun",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "methodName": [
                    "str"
                ]
            }
        },
        "TestCase.doRun": {
            "name": "doRun",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methodName": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCase.getTests": {
            "name": "getTests",
            "location": 376,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase._runRequirements": {
            "name": "_runRequirements",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "list",
                    "list[]",
                    "Exception",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestCase._getRequirements": {
            "name": "_getRequirements",
            "location": 414,
            "return": [
                "list[list[]]",
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestGroup.run": {
            "name": "run",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[\"TreeNode\"]",
                    "None",
                    "str",
                    "Tuple[str, float]",
                    "tuple[typing.Union[str,float]]"
                ]
            }
        },
        "TestGroup.addTest": {
            "name": "addTest",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aTest": [
                    "Callable[[], T]",
                    "typing.Callable[T, T]",
                    "dict",
                    "dict[, ]",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestGroup.addCase": {
            "name": "addCase",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testCaseSubclass": [
                    "str"
                ]
            }
        },
        "TestGroup.add": {
            "name": "add",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/mondoc.py": {
        "initialiseMonDocClass": {
            "name": "initialiseMonDocClass",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "typing.Callable[, ]",
                    "Callable",
                    "Iterable[bytes]"
                ],
                "dyct": [
                    "bool",
                    "Dict[str, type]",
                    "dict[str, typing.Type]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "setCollection": {
            "name": "setCollection",
            "location": 47,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "dyct": [
                    "typing.Type",
                    "Type[T]",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "Type[tuple]",
                    "dict[str, bool]",
                    "List[Dict[str, Any]]",
                    "list[]",
                    "Dict[str, bool]",
                    "bool",
                    "list"
                ]
            }
        },
        "MonDocMeta.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional['InstrumentBase']",
                    "None"
                ],
                "dyct": [
                    "str",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MonDoc.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.allowedFieldNameSet": {
            "name": "allowedFieldNameSet",
            "location": 77,
            "return": [
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.count": {
            "name": "count",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "Callable[..., T]",
                    "Type"
                ]
            }
        },
        "MonDoc.find": {
            "name": "find",
            "location": 114,
            "return": [
                "Iterator",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Union[str, Pattern[str]]",
                    "Callable",
                    "int"
                ]
            }
        },
        "MonDoc.find_one": {
            "name": "find_one",
            "location": 126,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "type",
                    "Union[str, Pattern[str]]"
                ]
            }
        },
        "MonDoc.delete_many": {
            "name": "delete_many",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "str",
                    "bytes",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MonDoc.getDoc": {
            "name": "getDoc",
            "location": 146,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str, None]",
                    "Type[T]",
                    "int",
                    "bytes"
                ],
                "id": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "MonDoc.transform": {
            "name": "transform",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Union[int, slice]",
                    "T",
                    "list"
                ],
                "mongoDoc": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "MonDoc.col": {
            "name": "col",
            "location": 183,
            "return": [
                "str",
                "Union[List, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Optional[\"Response\"]",
                    "None",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MonDoc.save": {
            "name": "save",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.delete": {
            "name": "delete",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.preSave": {
            "name": "preSave",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.postSave": {
            "name": "postSave",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.preCreate": {
            "name": "preCreate",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.postLoad": {
            "name": "postLoad",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.mongoDict": {
            "name": "mongoDict",
            "location": 232,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "Dict[str, bool]",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getForeignIds": {
            "name": "getForeignIds",
            "location": 252,
            "return": [
                "list[]",
                "str",
                "typing.Generator[]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "foreignCol": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "fn": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MonDoc.getForeignDocs": {
            "name": "getForeignDocs",
            "location": 265,
            "return": [
                "str",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "foreignCol": [
                    "str",
                    "bool"
                ],
                "fn": [
                    "typing.Text",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "MonDoc.getForeignFieldNames": {
            "name": "getForeignFieldNames",
            "location": 281,
            "return": [
                "list[]",
                "int",
                "str",
                "bool",
                "Dict[str, bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "foreignClass": [
                    "str",
                    "float",
                    "Callable[[Any], None]",
                    "int",
                    "typing.Callable[typing.Any, None]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MonDoc.a": {
            "name": "a",
            "location": 299,
            "return": [
                "typing.Text",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "urlStub": [
                    "str",
                    "None"
                ],
                "includeLogo": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "MonDoc.url": {
            "name": "url",
            "location": 320,
            "return": [
                "str",
                "dict[str, list[str]]",
                "Callable[[str], bool]",
                "list[str]",
                "typing.Final",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.classLogo": {
            "name": "classLogo",
            "location": 333,
            "return": [
                "typing.Text",
                "Callable[..., T]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "Type[T]",
                    "typing.Callable[..., T]",
                    "Type[Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "MonDoc.logo": {
            "name": "logo",
            "location": 342,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getName": {
            "name": "getName",
            "location": 351,
            "return": [
                "typing.Text",
                "bool",
                "Optional[Callable[..., Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getNameH": {
            "name": "getNameH",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.adminA": {
            "name": "adminA",
            "location": 371,
            "return": [
                "typing.Text",
                "str",
                "AnyStr"
            ],
            "arguments": {
                "self": [],
                "adminStub": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "MonDoc.adminUrl": {
            "name": "adminUrl",
            "location": 379,
            "return": [
                "str",
                "float",
                "dict[, ]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "adminStub": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonDoc.autopages": {
            "name": "autopages",
            "location": 390,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "pages": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "MonDoc.id": {
            "name": "id",
            "location": 396,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.hasId": {
            "name": "hasId",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.fixKwargs": {
            "name": "fixKwargs",
            "location": 412,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "Optional[Union[str, Any, Any, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "kwargs": []
            }
        },
        "MonDoc.fixSort": {
            "name": "fixSort",
            "location": 424,
            "return": [
                "list[typing.Union[tuple[],tuple[typing.Union[str,dict[str, float],int]]]]",
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sortArg": [
                    "dict[str, float]",
                    "str",
                    "Dict[str, float]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MonDoc.makeMonDoc": {
            "name": "makeMonDoc",
            "location": 447,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Dict[str, Any]",
                "tuple[typing.Union[float,float,float]]"
            ],
            "arguments": {
                "mdos": [
                    "str",
                    "int",
                    "Tuple[float, float, float]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/mongo.py": {
        "setDefaultDatabase": {
            "name": "setDefaultDatabase",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "dbName": [
                    "str"
                ],
                "host": [
                    "str",
                    "typing.Text"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "getDefaultDatabase": {
            "name": "getDefaultDatabase",
            "location": 23,
            "return": [
                "None",
                "bool",
                "Callable[[KT], VT]",
                "Mapping",
                "Tuple[float, float, float, float]"
            ],
            "arguments": {}
        },
        "indexToBase36": {
            "name": "indexToBase36",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "ix": [
                    "int"
                ]
            }
        },
        "base36encode": {
            "name": "base36encode",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "base36decode": {
            "name": "base36decode",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "str"
                ]
            }
        },
        "isObjectIdStr": {
            "name": "isObjectIdStr",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "str",
                    "None",
                    "Optional[str]",
                    "list[str]"
                ]
            }
        },
        "normaliseId": {
            "name": "normaliseId",
            "location": 110,
            "return": [
                "str",
                "int",
                "Callable",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "MongoabIncrementor.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MongoabIncrementor.getNewIndex": {
            "name": "getNewIndex",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoabIncrementor.getNewIndexB36": {
            "name": "getNewIndexB36",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoabIncrementor.show": {
            "name": "show",
            "location": 55,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict[str, bool]",
                "typing.Counter",
                "typing.Type",
                "list[str]",
                "dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/multichoicefield.py": {
        "MultiChoiceField.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "MultiChoiceField.readArgs": {
            "name": "readArgs",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChoiceField.defaultDefault": {
            "name": "defaultDefault",
            "location": 20,
            "return": [
                "list[]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChoiceField.convert": {
            "name": "convert",
            "location": 26,
            "return": [
                "str",
                "Iterable[str]",
                "dict[, ]",
                "int",
                "typing.Pattern",
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict[, ]",
                    "dict",
                    "bytes",
                    "typing.Pattern",
                    "str",
                    "Pattern[str]",
                    "int",
                    "None",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "MultiChoiceField.convertValue": {
            "name": "convertValue",
            "location": 35,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "dict",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "T",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "MultiChoiceField.formField_rw": {
            "name": "formField_rw",
            "location": 40,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "tuple[typing.Type]",
                    "Tuple[Type]",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "MultiChoiceField.formField_ro": {
            "name": "formField_ro",
            "location": 67,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MultiChoiceField.convertToScreen": {
            "name": "convertToScreen",
            "location": 83,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "dict[, ]",
                    "float",
                    "dict",
                    "Optional[Any]"
                ]
            }
        },
        "FKeys.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "foreignTable": [
                    "bool",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[int, str]",
                    "typing.Mapping"
                ]
            }
        },
        "FKeys.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "FKeys.readArgs": {
            "name": "readArgs",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FKeys.defaultDefault": {
            "name": "defaultDefault",
            "location": 114,
            "return": [
                "list[]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FKeys.formField_rw": {
            "name": "formField_rw",
            "location": 117,
            "return": [
                "str",
                "int",
                "List[int]",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FKeys.formField_ro": {
            "name": "formField_ro",
            "location": 138,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FKeys.convertValue": {
            "name": "convertValue",
            "location": 142,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Iterable[str]",
                "typing.Type",
                "int",
                "list[]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "typing.Type",
                    "Type[T]",
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "FKeys.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 151,
            "return": [
                "typing.Text",
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict[, ]",
                    "Match[bytes]",
                    "dict",
                    "int"
                ]
            }
        },
        "FKeys.convertToScreen": {
            "name": "convertToScreen",
            "location": 171,
            "return": [
                "typing.Text",
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "FKeys.foreignTable": {
            "name": "foreignTable",
            "location": 189,
            "return": [
                "float",
                "str",
                "list[]",
                "type",
                "dict[str, None]",
                "int",
                "dict[typing.Type, str]",
                "dict[str, bool]",
                "set[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/nulldoc.py": {
        "NullDoc.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fakeClass": [
                    "bool",
                    "type",
                    "typing.Type",
                    "set",
                    "set[]",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "NullDoc.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.a": {
            "name": "a",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "NullDoc",
                "str",
                "typing.Text",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        },
        "NullDoc.getName": {
            "name": "getName",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.asReadable": {
            "name": "asReadable",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str"
                ]
            }
        },
        "NullDoc.asReadableH": {
            "name": "asReadableH",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str"
                ]
            }
        },
        "NullDoc.id": {
            "name": "id",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/numberfield.py": {
        "IntField.defaultDefault": {
            "name": "defaultDefault",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntField.convertValue": {
            "name": "convertValue",
            "location": 30,
            "return": [
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "FloatField.defaultDefault": {
            "name": "defaultDefault",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatField.convertValue": {
            "name": "convertValue",
            "location": 56,
            "return": [
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "BoolField.readArgs": {
            "name": "readArgs",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolField.defaultDefault": {
            "name": "defaultDefault",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolField.convertValue": {
            "name": "convertValue",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BoolField.convertToScreen": {
            "name": "convertToScreen",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "float",
                    "str",
                    "bool",
                    "T",
                    "Iterable[Tuple[Any, Any]]"
                ]
            }
        },
        "BoolField.formField_rw": {
            "name": "formField_rw",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool"
                ]
            }
        },
        "BoolField.setFieldName": {
            "name": "setFieldName",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/objectfield.py": {
        "ObjectField.defaultDefault": {
            "name": "defaultDefault",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectField.convertToScreen": {
            "name": "convertToScreen",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "float",
                    "str",
                    "bool",
                    "T",
                    "Iterable[Tuple[Any, Any]]"
                ]
            }
        },
        "ObjectField.formField_rw": {
            "name": "formField_rw",
            "location": 32,
            "return": [
                "Iterable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "ObjectField.formField_ro": {
            "name": "formField_ro",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/paginate.py": {
        "Paginator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "float",
                    "bool"
                ],
                "perPage": [
                    "int",
                    "bool",
                    "float"
                ],
                "showSinglePage": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Paginator.calc": {
            "name": "calc",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "meowcat2-master/app/bozen/termcolours.py": {},
    "meowcat2-master/app/bozen/timefield.py": {
        "isValidDate": {
            "name": "isValidDate",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "isValidDate8": {
            "name": "isValidDate8",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "isValidDateTime": {
            "name": "isValidDateTime",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "isValidTod": {
            "name": "isValidTod",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "convertToBzDataTimeStr": {
            "name": "convertToBzDataTimeStr",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "decodeDateTime8": {
            "name": "decodeDateTime8",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "decodeDateTime": {
            "name": "decodeDateTime",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get3ints": {
            "name": "get3ints",
            "location": 275,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "getPosInt": {
            "name": "getPosInt",
            "location": 284,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "s": [
                    "int"
                ],
                "default": [
                    "int"
                ]
            }
        },
        "BzDate.__new__": {
            "name": "__new__",
            "location": 53,
            "return": [
                "Optional[BzDate]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "None",
                    "Callable[[T], bool]",
                    "typing.Any",
                    "type",
                    "typing.Callable[T, bool]",
                    "typing.Type"
                ],
                "s": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Tuple[Type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BzDate.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.toTuple_ymd": {
            "name": "toTuple_ymd",
            "location": 76,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.toTuple_ymdhms": {
            "name": "toTuple_ymdhms",
            "location": 83,
            "return": [
                "Tuple[(int, int, int, int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.to_date": {
            "name": "to_date",
            "location": 91,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.to_datetime": {
            "name": "to_datetime",
            "location": 96,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.formatDate": {
            "name": "formatDate",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatStr": [
                    "str"
                ]
            }
        },
        "BzDate.addDays": {
            "name": "addDays",
            "location": 106,
            "return": [
                "BzDate"
            ],
            "arguments": {
                "self": [
                    "_TBzDate"
                ],
                "numDays": [
                    "int"
                ]
            }
        },
        "BzDate.today": {
            "name": "today",
            "location": 112,
            "return": [
                "BzDate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBzDate]"
                ]
            }
        },
        "BzDateTime.__new__": {
            "name": "__new__",
            "location": 121,
            "return": [
                "Optional[BzDateTime]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "Type[T]",
                    "Type"
                ],
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "BzDateTime.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.toTuple_ymd": {
            "name": "toTuple_ymd",
            "location": 152,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.toTuple_ymdhms": {
            "name": "toTuple_ymdhms",
            "location": 159,
            "return": [
                "Tuple[(int, int, int, int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.to_date": {
            "name": "to_date",
            "location": 170,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.to_datetime": {
            "name": "to_datetime",
            "location": 175,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.formatDateTime": {
            "name": "formatDateTime",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatStr": [
                    "str"
                ]
            }
        },
        "BzDateTime.addDays": {
            "name": "addDays",
            "location": 189,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "self": [
                    "_TBzDateTime"
                ],
                "numDays": [
                    "int"
                ]
            }
        },
        "BzDateTime.addDaysSeconds": {
            "name": "addDaysSeconds",
            "location": 200,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "self": [
                    "_TBzDateTime"
                ],
                "numDays": [
                    "int"
                ],
                "numSeconds": [
                    "int"
                ]
            }
        },
        "BzDateTime.now": {
            "name": "now",
            "location": 207,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBzDateTime]"
                ]
            }
        },
        "DateField.readArgs": {
            "name": "readArgs",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateField.defaultDefault": {
            "name": "defaultDefault",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateField.formField_rw": {
            "name": "formField_rw",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "DateField.formField_ro": {
            "name": "formField_ro",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DateField.errorMsg": {
            "name": "errorMsg",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "DateField.convertValue": {
            "name": "convertValue",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vStr": [
                    "str"
                ]
            }
        },
        "DateField.convertToScreen": {
            "name": "convertToScreen",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "DateField.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 401,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "DateField.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "DateTimeField.readArgs": {
            "name": "readArgs",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.defaultDefault": {
            "name": "defaultDefault",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.formField_rw": {
            "name": "formField_rw",
            "location": 443,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "DateTimeField.formField_ro": {
            "name": "formField_ro",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DateTimeField.errorMsg": {
            "name": "errorMsg",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "DateTimeField.convertValue": {
            "name": "convertValue",
            "location": 482,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vStr": [
                    "str"
                ]
            }
        },
        "DateTimeField.convertToScreen": {
            "name": "convertToScreen",
            "location": 499,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "DateTimeField.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 513,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "DateTimeField.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 526,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        }
    },
    "meowcat2-master/app/bozen/__init__.py": {}
}
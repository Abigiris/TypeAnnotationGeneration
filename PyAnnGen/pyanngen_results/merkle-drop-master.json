{
    "merkle-drop-master/setup.py": {},
    "merkle-drop-master/scripts/pack_contracts.py": {
        "pack_contracts": {
            "name": "pack_contracts",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "bool"
                ],
                "output_filename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/airdrop.py": {
        "get_item": {
            "name": "get_item",
            "location": 8,
            "return": [
                "merkle_drop.merkle_tree.Item"
            ],
            "arguments": {
                "address": [
                    "bytes"
                ],
                "airdrop_data": [
                    "Dict[(bytes, int)]"
                ]
            }
        },
        "to_items": {
            "name": "to_items",
            "location": 12,
            "return": [
                "List[merkle_drop.merkle_tree.Item]"
            ],
            "arguments": {
                "airdrop_data": [
                    "Dict[(bytes, int)]"
                ]
            }
        },
        "get_balance": {
            "name": "get_balance",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "address": [
                    "bytes"
                ],
                "airdrop_data": [
                    "Dict[(bytes, int)]"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/cli.py": {
        "validate_address": {
            "name": "validate_address",
            "location": 26,
            "return": [
                "dict",
                "List[str]",
                "str",
                "float"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "int",
                    "click.Context"
                ]
            }
        },
        "validate_date": {
            "name": "validate_date",
            "location": 32,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "root": {
            "name": "root",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "airdrop_file_name": [
                    "str"
                ]
            }
        },
        "balance": {
            "name": "balance",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "airdrop_file_name": [
                    "str"
                ]
            }
        },
        "proof": {
            "name": "proof",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "bytes"
                ],
                "airdrop_file_name": [
                    "str"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "keystore": [
                    "Tuple[int, int]"
                ],
                "jsonrpc": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "gas": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "gas_price": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "nonce": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Callable[[str, str], None]",
                    "Hashable"
                ],
                "auto_nonce": [
                    "int",
                    "bool",
                    "Optional[Union[int, str]]",
                    "Callable"
                ],
                "token_address": [
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ],
                "airdrop_file_name": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "decay_start_time": [
                    "pendulum.DateTime",
                    "Optional[int]",
                    "int"
                ],
                "decay_start_date": [
                    "pendulum.DateTime",
                    "Optional[int]"
                ],
                "decay_duration": [
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "jsonrpc": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ],
                "merkle_drop_address": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Tuple[str]"
                ]
            }
        },
        "check_root": {
            "name": "check_root",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "jsonrpc": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "merkle_drop_address": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "airdrop_file_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/deploy.py": {
        "deploy_merkle_drop": {
            "name": "deploy_merkle_drop",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sum_of_airdropped_tokens": {
            "name": "sum_of_airdropped_tokens",
            "location": 31,
            "return": [
                "int",
                "float",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "airdrop_data": [
                    "str",
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/load_csv.py": {
        "load_airdrop_file": {
            "name": "load_airdrop_file",
            "location": 7,
            "return": [
                "Dict[(bytes, int)]"
            ],
            "arguments": {
                "airdrop_file": [
                    "str"
                ]
            }
        },
        "validate_address_value_pairs": {
            "name": "validate_address_value_pairs",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "address_value_pairs": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/merkle_tree.py": {
        "compute_merkle_root": {
            "name": "compute_merkle_root",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "items": [
                    "List[Item]"
                ]
            }
        },
        "build_tree": {
            "name": "build_tree",
            "location": 41,
            "return": [
                "Tree"
            ],
            "arguments": {
                "items": [
                    "List[Item]"
                ]
            }
        },
        "compute_leaf_hash": {
            "name": "compute_leaf_hash",
            "location": 70,
            "return": [
                "bytes"
            ],
            "arguments": {
                "item": [
                    "Item"
                ]
            }
        },
        "_build_leaves": {
            "name": "_build_leaves",
            "location": 81,
            "return": [
                "List[Node]"
            ],
            "arguments": {
                "items": [
                    "List[Item]"
                ]
            }
        },
        "compute_parent_hash": {
            "name": "compute_parent_hash",
            "location": 87,
            "return": [
                "bytes"
            ],
            "arguments": {
                "left_hash": [
                    "bytes"
                ],
                "right_hash": [
                    "bytes"
                ]
            }
        },
        "in_tree": {
            "name": "in_tree",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "Item"
                ],
                "root": [
                    "Node"
                ]
            }
        },
        "create_proof": {
            "name": "create_proof",
            "location": 108,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "item": [
                    "Item"
                ],
                "tree": [
                    "Tree"
                ]
            }
        },
        "validate_proof": {
            "name": "validate_proof",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "Item"
                ],
                "proof": [
                    "List[bytes]"
                ],
                "root_hash": [
                    "bytes"
                ]
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[str]",
                    "str",
                    "IO",
                    "None",
                    "typing.IO"
                ],
                "leaves": [
                    "List[Node]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "bytes"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "in_tree._in_tree": {
            "name": "_in_tree",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "item_hash": [],
                "root": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/server.py": {
        "init_gunicorn_logging": {
            "name": "init_gunicorn_logging",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_cors": {
            "name": "init_cors",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "airdrop_filename": [
                    "str"
                ],
                "decay_start_time_param": [
                    "int"
                ],
                "decay_duration_in_seconds_param": [
                    "int"
                ]
            }
        },
        "not_found": {
            "name": "not_found",
            "location": 64,
            "return": [
                "tuple[int]",
                "bool",
                "str",
                "Dict[str, Any]",
                "Tuple[bool, float]"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Exception"
                ]
            }
        },
        "bad_request": {
            "name": "bad_request",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "tuple[int]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "internal_server_error": {
            "name": "internal_server_error",
            "location": 74,
            "return": [
                "tuple[int]",
                "int",
                "dict"
            ],
            "arguments": {
                "e": [
                    "str",
                    "UnicodeError",
                    "bool"
                ]
            }
        },
        "get_entitlement_for": {
            "name": "get_entitlement_for",
            "location": 79,
            "return": [
                "Optional[Dict]",
                "str",
                "dict"
            ],
            "arguments": {
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "decay_tokens": {
            "name": "decay_tokens",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "tokens": [
                    "int"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/status.py": {
        "get_merkle_drop_status": {
            "name": "get_merkle_drop_status",
            "location": 6,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "contract_address": [
                    "str",
                    "bool",
                    "Optional[Iterable[T]]",
                    "typing.Iterable[T]",
                    "None"
                ]
            }
        }
    },
    "merkle-drop-master/src/merkle_drop/__init__.py": {},
    "merkle-drop-master/tests/conftest.py": {
        "canonical_addresses": {
            "name": "canonical_addresses",
            "location": 13,
            "return": [
                "list[]",
                "List[str]",
                "Set[str]",
                "Tuple[float, float]",
                "List[object]"
            ],
            "arguments": {
                "accounts": [
                    "str",
                    "int"
                ]
            }
        },
        "tree_data": {
            "name": "tree_data",
            "location": 25,
            "return": [
                "Tuple[int, int]",
                "list[Item]"
            ],
            "arguments": {
                "canonical_addresses": [
                    "bool"
                ]
            }
        },
        "tree_data_small_values": {
            "name": "tree_data_small_values",
            "location": 37,
            "return": [
                "str",
                "list[Item]"
            ],
            "arguments": {
                "canonical_addresses": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "other_data": {
            "name": "other_data",
            "location": 47,
            "return": [
                "Tuple[int, int]",
                "list[Item]"
            ],
            "arguments": {
                "canonical_addresses": [
                    "bool",
                    "dict"
                ]
            }
        },
        "proofs_for_tree_data": {
            "name": "proofs_for_tree_data",
            "location": 53,
            "return": [
                "list[]",
                "bool",
                "List[Dict]",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "tree_data": [
                    "dict[, ]",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "proofs_for_tree_data_small_values": {
            "name": "proofs_for_tree_data_small_values",
            "location": 66,
            "return": [
                "list[]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "tree_data_small_values": [
                    "str",
                    "bool",
                    "Type",
                    "Mapping[str, str]"
                ]
            }
        },
        "eligible_address_0": {
            "name": "eligible_address_0",
            "location": 79,
            "return": [
                "str",
                "Tuple[float]",
                "bytes",
                "list",
                "List[str]"
            ],
            "arguments": {
                "tree_data": [
                    "str",
                    "bytes",
                    "type",
                    "int",
                    "Optional[str]",
                    "T"
                ]
            }
        },
        "eligible_value_0": {
            "name": "eligible_value_0",
            "location": 84,
            "return": [
                "Optional[T]",
                "type",
                "Optional[BaseException]",
                "str",
                "list"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "MutableMapping",
                    "Dict[str, Any]",
                    "int",
                    "Mapping"
                ]
            }
        },
        "proof_0": {
            "name": "proof_0",
            "location": 89,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "proofs_for_tree_data": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "root_hash_for_tree_data": {
            "name": "root_hash_for_tree_data",
            "location": 94,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "tree_data": [
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "str",
                    "Mapping[str, str]",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "root_hash_for_tree_data_small_values": {
            "name": "root_hash_for_tree_data_small_values",
            "location": 100,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "tree_data_small_values": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "premint_token_owner": {
            "name": "premint_token_owner",
            "location": 106,
            "return": [
                "bool",
                "List[Callable]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "premint_token_value": {
            "name": "premint_token_value",
            "location": 111,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "List[int]"
            ],
            "arguments": {}
        },
        "premint_token_small_value": {
            "name": "premint_token_small_value",
            "location": 117,
            "return": [
                "int",
                "Tuple[bytes]",
                "str",
                "IO[Any]",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "dropped_token_contract": {
            "name": "dropped_token_contract",
            "location": 123,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "float",
                "dict[str, list[str]]",
                "list[str]"
            ],
            "arguments": {
                "deploy_contract": [
                    "float"
                ],
                "premint_token_owner": [
                    "float"
                ],
                "premint_token_value": [
                    "float"
                ],
                "premint_token_small_value": [
                    "float"
                ]
            }
        },
        "decay_start_time": {
            "name": "decay_start_time",
            "location": 143,
            "return": [
                "int",
                "str",
                "List[str]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {}
        },
        "decay_duration": {
            "name": "decay_duration",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "merkle_drop_contract": {
            "name": "merkle_drop_contract",
            "location": 155,
            "return": [
                "dict[, ]",
                "int",
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "root_hash_for_tree_data": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "dropped_token_contract": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "premint_token_owner": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "premint_token_value": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "decay_start_time": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "decay_duration": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "merkle_drop_contract_small_values": {
            "name": "merkle_drop_contract_small_values",
            "location": 192,
            "return": [
                "float",
                "bool",
                "Sequence",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "deploy_contract": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "root_hash_for_tree_data_small_values": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "dropped_token_contract": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "premint_token_owner": [],
                "premint_token_small_value": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "decay_start_time": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "decay_duration": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "merkle-drop-master/tests/test_cli.py": {
        "is_encoded_hash32": {
            "name": "is_encoded_hash32",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "airdrop_list_file": {
            "name": "airdrop_list_file",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Set[str]",
                    "list",
                    "Iterable[str]"
                ],
                "tree_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "wrong_airdrop_list_file": {
            "name": "wrong_airdrop_list_file",
            "location": 41,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "tmp_path": [
                    "int",
                    "str",
                    "Set[str]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "tree_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "airdrop_data": {
            "name": "airdrop_data",
            "location": 57,
            "return": [
                "dict[, ]",
                "int",
                "List[List[str]]",
                "List[str]",
                "List[Dict[str, str]]",
                "Tuple[int, int]",
                "Iterable[str]"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "token_contract": {
            "name": "token_contract",
            "location": 62,
            "return": [
                "str",
                "int",
                "bool",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "premint_token_value": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "unfunded_merkle_drop_contract": {
            "name": "unfunded_merkle_drop_contract",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "premint_token_value": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Literal"
                ],
                "root_hash_for_tree_data": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Literal"
                ],
                "token_contract": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Literal"
                ]
            }
        },
        "funded_merkle_drop_contract": {
            "name": "funded_merkle_drop_contract",
            "location": 106,
            "return": [
                "list[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "premint_token_value": [
                    "list[str]",
                    "List[str]",
                    "web3.contracContract"
                ],
                "unfunded_merkle_drop_contract": [
                    "list[str]",
                    "List[str]",
                    "web3.contracContract"
                ],
                "token_contract": [
                    "list[str]",
                    "List[str]",
                    "web3.contracContract"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 122,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_merkle_root_cli": {
            "name": "test_merkle_root_cli",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "int",
                    "str"
                ],
                "airdrop_list_file": [
                    "int",
                    "str"
                ]
            }
        },
        "test_read_csv_file": {
            "name": "test_read_csv_file",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "airdrop_list_file": [
                    "Callable[[str], str]",
                    "str",
                    "typing.Callable[str, str]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "airdrop_data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "dict[str, typing.Union[str,None]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_valid_airdrop_file_validation": {
            "name": "test_valid_airdrop_file_validation",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "address_value_pairs": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_invalid_airdrop_file_validation": {
            "name": "test_invalid_airdrop_file_validation",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "address_value_pairs": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "web3.contracContract"
                ]
            }
        },
        "test_merkle_balance_cli": {
            "name": "test_merkle_balance_cli",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "airdrop_list_file": [
                    "str"
                ],
                "airdrop_data": [
                    "dict[str, list[typing.Any]]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "test_merkle_not_existing_balance_cli": {
            "name": "test_merkle_not_existing_balance_cli",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "int"
                ],
                "airdrop_list_file": [
                    "int"
                ]
            }
        },
        "test_merkle_proof_cli": {
            "name": "test_merkle_proof_cli",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "airdrop_list_file": [],
                "airdrop_data": [
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "Optional[\"TrackingData\"]",
                    "bool"
                ]
            }
        },
        "test_not_existing_merkle_proof_cli": {
            "name": "test_not_existing_merkle_proof_cli",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "bool",
                    "int"
                ],
                "airdrop_list_file": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_deploy_cli": {
            "name": "test_deploy_cli",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "flask.testing.FlaskClient",
                    "None",
                    "Optional[\"Game\"]"
                ],
                "airdrop_list_file": [
                    "str",
                    "flask.testing.FlaskClient",
                    "None",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_deploy_cli_with_date": {
            "name": "test_deploy_cli_with_date",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "airdrop_list_file": [
                    "str"
                ]
            }
        },
        "test_status_cli_not_funded": {
            "name": "test_status_cli_not_funded",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "unfunded_merkle_drop_contract": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "test_status_cli_success": {
            "name": "test_status_cli_success",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "funded_merkle_drop_contract": [
                    "int",
                    "typing.Callable[, ]",
                    "web3.Web3",
                    "Callable"
                ],
                "token_contract": [
                    "str"
                ]
            }
        },
        "test_check_root_cli_success": {
            "name": "test_check_root_cli_success",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "funded_merkle_drop_contract": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "root_hash_for_tree_data": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "airdrop_list_file": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_check_root_cli_fail_wrong_root": {
            "name": "test_check_root_cli_fail_wrong_root",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "Callable[[int], Tuple]",
                    "None",
                    "Optional[int]",
                    "web3.contracContract"
                ],
                "funded_merkle_drop_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "Callable[[int], Tuple]",
                    "None",
                    "Optional[int]",
                    "web3.contracContract"
                ],
                "root_hash_for_tree_data": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "wrong_airdrop_list_file": [
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "Callable[[int], Tuple]",
                    "None",
                    "Optional[int]",
                    "web3.contracContract"
                ]
            }
        }
    },
    "merkle-drop-master/tests/test_deploy.py": {
        "test_deploy": {
            "name": "test_deploy",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "merkle-drop-master/tests/test_merkle_drop.py": {
        "merkle_drop_contract_already_withdrawn": {
            "name": "merkle_drop_contract_already_withdrawn",
            "location": 10,
            "return": [
                "int",
                "bool",
                "str",
                "Callable",
                "list[str]"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "dropped_token_contract": [
                    "int",
                    "Optional[float]",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "eligible_address_0": [
                    "list[str]",
                    "web3.contracContract",
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ],
                "eligible_value_0": [
                    "list[str]",
                    "web3.contracContract",
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ],
                "proof_0": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "time_travel_chain_to_decay_multiplier": {
            "name": "time_travel_chain_to_decay_multiplier",
            "location": 30,
            "return": [
                "str",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "chain": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "bool",
                    "T",
                    "List[Dict[str, Any]]"
                ],
                "decay_start_time": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "bool",
                    "T",
                    "List[Dict[str, Any]]"
                ],
                "decay_duration": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "bool",
                    "T",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "time_travel_chain_past_decay_multiplier": {
            "name": "time_travel_chain_past_decay_multiplier",
            "location": 41,
            "return": [
                "str",
                "int",
                "float",
                "List[float]"
            ],
            "arguments": {
                "chain": [
                    "float",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "decay_start_time": [
                    "float",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "decay_duration": [
                    "float",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "decayed_value": {
            "name": "decayed_value",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "dict",
                    "T"
                ],
                "decay_multiplier": [
                    "float",
                    "str",
                    "dict",
                    "T"
                ],
                "round_up": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "Callable",
                    "bool",
                    "None",
                    "dict",
                    "typing.Callable[, ]",
                    "Iterable[Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_proof_entitlement": {
            "name": "test_proof_entitlement",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "dict[, ]",
                    "Union[web3.contracContractFunction, web3.contracContracConstructor]",
                    "typing.Callable[..., T]",
                    "dict",
                    "Callable[..., T]",
                    "Callable"
                ],
                "tree_data": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "proofs_for_tree_data": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "test_incorrect_value_entitlement": {
            "name": "test_incorrect_value_entitlement",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "dict[, ]",
                    "web3.contracContract",
                    "typing.Callable[..., T]",
                    "Union[web3.contracContractFunction, web3.contracContracConstructor]",
                    "dict",
                    "Callable[..., T]"
                ],
                "tree_data": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ],
                "proofs_for_tree_data": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Dict[str, str]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "test_incorrect_proof_entitlement": {
            "name": "test_incorrect_proof_entitlement",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "web3.contracContract"
                ],
                "other_data": [
                    "int",
                    "float"
                ],
                "proofs_for_tree_data": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_withdraw": {
            "name": "test_withdraw",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [],
                "tree_data": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "proofs_for_tree_data": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "dropped_token_contract": []
            }
        },
        "test_withdraw_already_withdrawn": {
            "name": "test_withdraw_already_withdrawn",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract_already_withdrawn": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "eligible_address_0": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "eligible_value_0": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "proof_0": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_withdraw_wrong_proof": {
            "name": "test_withdraw_wrong_proof",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract_already_withdrawn": [
                    "bool",
                    "web3.contracContract",
                    "dict[, ]",
                    "dict"
                ],
                "other_data": [
                    "web3.contracContract",
                    "bool",
                    "dict"
                ],
                "proof_0": [
                    "bool",
                    "web3.contracContract",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "test_withdraw_event": {
            "name": "test_withdraw_event",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "bool",
                    "web3.contracContract"
                ],
                "web3": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "eligible_address_0": [
                    "bool",
                    "web3.contracContract",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "eligible_value_0": [
                    "bool",
                    "web3.contracContract"
                ],
                "proof_0": [
                    "float",
                    "web3.contracContract"
                ]
            }
        },
        "test_entitlement_with_decay": {
            "name": "test_entitlement_with_decay",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "bool",
                    "str",
                    "web3.contracContract",
                    "int"
                ],
                "decay_start_time": [
                    "int",
                    "bool",
                    "str"
                ],
                "decay_duration": [
                    "int",
                    "bool",
                    "str"
                ],
                "decay_multiplier": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "round_up": [
                    "List[float]",
                    "int",
                    "list[float]"
                ]
            }
        },
        "test_withdraw_with_decay": {
            "name": "test_withdraw_with_decay",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "int",
                    "list[float]",
                    "T",
                    "List[float]"
                ],
                "dropped_token_contract": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "None",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "decay_multiplier": [
                    "web3.contracContract",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "eligible_address_0": [
                    "dict[str, list[str]]",
                    "str",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "eligible_value_0": [
                    "dict[str, list[str]]",
                    "str",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "proof_0": [
                    "int",
                    "list[float]",
                    "T",
                    "List[float]"
                ]
            }
        },
        "test_entitlement_after_decay": {
            "name": "test_entitlement_after_decay",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "str",
                    "web3.contracContract",
                    "int",
                    "frozenset",
                    "FrozenSet[int]"
                ],
                "decay_start_time": [
                    "int",
                    "bool",
                    "str"
                ],
                "decay_duration": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_withdraw_after_decay": {
            "name": "test_withdraw_after_decay",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "int"
                ],
                "time_travel_chain_past_decay_multiplier": [
                    "int",
                    "str"
                ],
                "eligible_address_0": [
                    "int"
                ],
                "eligible_value_0": [
                    "int"
                ],
                "proof_0": [
                    "int"
                ]
            }
        },
        "test_burn_unusable_tokens": {
            "name": "test_burn_unusable_tokens",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "int"
                ],
                "dropped_token_contract": [
                    "int",
                    "str"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "None",
                    "web3.contracContract"
                ],
                "decay_multiplier": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]",
                    "dict[int, dict[str, float]]"
                ]
            }
        },
        "test_burn_tokens_after_decay_duration": {
            "name": "test_burn_tokens_after_decay_duration",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "int",
                    "web3.contracContract"
                ],
                "dropped_token_contract": [
                    "int"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "None",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "web3.contracContract",
                    "int"
                ]
            }
        },
        "test_withdraw_after_burn": {
            "name": "test_withdraw_after_burn",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [],
                "dropped_token_contract": [
                    "int",
                    "str",
                    "bool"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "None",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "decay_multiplier": [
                    "list",
                    "list[]"
                ],
                "eligible_address_0": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "eligible_value_0": [
                    "str",
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "proof_0": [
                    "int",
                    "list[float]",
                    "T",
                    "List[float]"
                ]
            }
        },
        "test_balance_null_after_withdraw_and_burn": {
            "name": "test_balance_null_after_withdraw_and_burn",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "web3.contracContract"
                ],
                "dropped_token_contract": [
                    "str",
                    "int",
                    "bool"
                ],
                "eligible_address_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "eligible_value_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "proof_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "float",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "test_everyone_can_withdraw_after_burns": {
            "name": "test_everyone_can_withdraw_after_burns",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "web3.contracContract"
                ],
                "dropped_token_contract": [
                    "str",
                    "int",
                    "bool"
                ],
                "eligible_address_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "eligible_value_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "proof_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "tree_data": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "proofs_for_tree_data": [
                    "int",
                    "float",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "float",
                    "None",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "test_burn_enough_token": {
            "name": "test_burn_enough_token",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.contracContract"
                ],
                "dropped_token_contract": [
                    "int",
                    "str",
                    "bool"
                ],
                "eligible_address_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "eligible_value_0": [
                    "bytes",
                    "Optional[Callable[[Dict], bool]]",
                    "bool",
                    "typing.Callable[dict[, ], bool]",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "proof_0": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "bytes",
                    "Dict[str, str]",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "premint_token_value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_self_destruct": {
            "name": "test_self_destruct",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract_already_withdrawn": [
                    "bool",
                    "web3.contracContract"
                ],
                "eligible_address_0": [
                    "web3.contracContract"
                ],
                "time_travel_chain_past_decay_multiplier": [
                    "bool",
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        },
        "test_self_destruct_too_soon": {
            "name": "test_self_destruct_too_soon",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract": [
                    "web3.contracContract"
                ]
            }
        },
        "test_yoichis_finding": {
            "name": "test_yoichis_finding",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "merkle_drop_contract_small_values": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "time_travel_chain_to_decay_multiplier": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]",
                    "List[str]",
                    "list[str]"
                ],
                "dropped_token_contract": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "proofs_for_tree_data_small_values": [
                    "int",
                    "List[Optional['Cell']]",
                    "List[str]",
                    "Iterable[Any]",
                    "bool",
                    "Iterable[\"Entity\"]"
                ],
                "tree_data_small_values": [
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "time_travel_chain_to_decay_multiplier.time_travel": {
            "name": "time_travel",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "decay_multiplier": []
            }
        },
        "time_travel_chain_past_decay_multiplier.time_travel": {
            "name": "time_travel",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "decay_multiplier": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "merkle-drop-master/tests/test_merkle_tree.py": {
        "tree_data": {
            "name": "tree_data",
            "location": 17,
            "return": [
                "str",
                "list[Item]"
            ],
            "arguments": {}
        },
        "other_data": {
            "name": "other_data",
            "location": 28,
            "return": [
                "list[Item]",
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "test_parent_hash": {
            "name": "test_parent_hash",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "left_hash": [
                    "bool"
                ],
                "right_hash": [
                    "bool"
                ],
                "parent_hash": [
                    "bool"
                ]
            }
        },
        "test_leaf_hash": {
            "name": "test_leaf_hash",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "leaf_hash": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_invalid_leaf_hash": {
            "name": "test_invalid_leaf_hash",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "list",
                    "list[]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_in_tree": {
            "name": "test_in_tree",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "List[dict]",
                    "list[dict[, ]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_not_in_tree": {
            "name": "test_not_in_tree",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "str",
                    "bool",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ],
                "other_data": [
                    "Optional[List[\"DeliveryItem\"]]",
                    "list[I]",
                    "list",
                    "str",
                    "None",
                    "dict",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "test_valid_proof": {
            "name": "test_valid_proof",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Mapping"
                ]
            }
        },
        "test_invalid_proof": {
            "name": "test_invalid_proof",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "dict[, ]",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "Optional[Tuple[str, str]]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_wrong_proof": {
            "name": "test_wrong_proof",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_wrong_value": {
            "name": "test_wrong_value",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "other_data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_can_not_create_proof_for_missing_item": {
            "name": "test_can_not_create_proof_for_missing_item",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "dict",
                    "dict[, ]",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping"
                ],
                "other_data": [
                    "Mapping[str, int]"
                ]
            }
        },
        "test_tree_is_sorted": {
            "name": "test_tree_is_sorted",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tree_data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "merkle-drop-master/tests/test_status.py": {
        "test_status": {
            "name": "test_status",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "dict",
                    "dict[, ]"
                ],
                "merkle_drop_contract": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dropped_token_contract": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "typing.Sequence[int]",
                    "int",
                    "set[str]",
                    "Sequence[int]",
                    "Set[str]"
                ],
                "root_hash_for_tree_data": [
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "decay_start_time": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "decay_duration": [
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "premint_token_value": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "merkle-drop-master/tests/__init__.py": {}
}
{
    "mindgraph-master/setup.py": {},
    "mindgraph-master/mindgraph/graph.py": {
        "read_yaml": {
            "name": "read_yaml",
            "location": 152,
            "return": [
                "Task"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "priority": [
                    "int"
                ]
            }
        },
        "Task.append": {
            "name": "append",
            "location": 19,
            "return": [
                "ask"
            ],
            "arguments": {
                "self": [
                    "_TTask"
                ],
                "newtask": []
            }
        },
        "Task.pop": {
            "name": "pop",
            "location": 28,
            "return": [
                "ask"
            ],
            "arguments": {
                "self": [
                    "_TTask"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "Task.blockedby": {
            "name": "blockedby",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Task"
                ]
            }
        },
        "Task.blocking": {
            "name": "blocking",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Task"
                ]
            }
        },
        "Task.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "ask"
            ],
            "arguments": {
                "self": [
                    "_TTask"
                ],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task._format_tree": {
            "name": "_format_tree",
            "location": 57,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ]
            }
        },
        "Task._postorder": {
            "name": "_postorder",
            "location": 68,
            "return": [
                "Iterator[Tuple[(int, Task)]]"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ],
                "visited": [
                    "Set[Task]"
                ],
                "taskkey": [
                    "Callable[([Task], Any)]"
                ]
            }
        },
        "Task.todo": {
            "name": "todo",
            "location": 95,
            "return": [
                "Iterator[Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.blockers": {
            "name": "blockers",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.name": {
            "name": "name",
            "location": 120,
            "return": [
                "None",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Task.subtasks": {
            "name": "subtasks",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.priority": {
            "name": "priority",
            "location": 135,
            "return": [
                "None",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Task.to_yaml": {
            "name": "to_yaml",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Project.__new__": {
            "name": "__new__",
            "location": 148,
            "return": [
                "Task"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Task.todo.taskkey": {
            "name": "taskkey",
            "location": 101,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "mindgraph-master/mindgraph/mindgraph_cli.py": {
        "arg_parser": {
            "name": "arg_parser",
            "location": 8,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mindgraph-master/mindgraph/__init__.py": {},
    "mindgraph-master/test/test_mindgraph.py": {
        "project": {
            "name": "project",
            "location": 14,
            "return": [
                "bool",
                "list[str]",
                "int",
                "str",
                "None"
            ],
            "arguments": {}
        },
        "task_project": {
            "name": "task_project",
            "location": 20,
            "return": [
                "list[typing.Union[int,str]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_todo_high_priorities_win": {
            "name": "test_todo_high_priorities_win",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": [
                    "Callable"
                ]
            }
        },
        "test_todo_blocking_tasks_win": {
            "name": "test_todo_blocking_tasks_win",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": [
                    "Callable",
                    "List[str]",
                    "Optional[Dict]",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_postorder_default_priorities_ignored": {
            "name": "test_postorder_default_priorities_ignored",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": [
                    "\"Step\"",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "test_task_init_typeerror": {
            "name": "test_task_init_typeerror",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_task_append_task": {
            "name": "test_task_append_task",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_task_append": {
            "name": "test_task_append",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "test_dict_like_getter": {
            "name": "test_dict_like_getter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_task_pop": {
            "name": "test_task_pop",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_task_pop_fail1": {
            "name": "test_task_pop_fail1",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_task_append_TypeError": {
            "name": "test_task_append_TypeError",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blockedby": {
            "name": "test_blockedby",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "Callable"
                ]
            }
        },
        "test_blockedby_TypeError": {
            "name": "test_blockedby_TypeError",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blocking": {
            "name": "test_blocking",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "Callable"
                ]
            }
        },
        "test_blocking_TypeError": {
            "name": "test_blocking_TypeError",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_deep_repr": {
            "name": "test_deep_repr",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_priority_getter_setter": {
            "name": "test_priority_getter_setter",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_getter_setter": {
            "name": "test_name_getter_setter",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_yaml": {
            "name": "test_to_yaml",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str"
                ]
            }
        },
        "test_to_yaml_TypeError": {
            "name": "test_to_yaml_TypeError",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser": {
            "name": "test_parser",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_read_yaml": [],
                "mock_arg_parse": [],
                "mock_file": []
            }
        }
    },
    "mindgraph-master/test/__init__.py": {}
}
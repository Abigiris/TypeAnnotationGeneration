{
    "minerva-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/config.py": {},
    "minerva-master/minerva/__init__.py": {},
    "minerva-master/minerva/__version__.py": {},
    "minerva-master/minerva/nlp/__init__.py": {},
    "minerva-master/minerva/nlp/wrappers/nltk.py": {
        "sent_tokenize": {
            "name": "sent_tokenize",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "language": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "language": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "pos_tag": {
            "name": "pos_tag",
            "location": 22,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "txt": [
                    "str"
                ],
                "language": [
                    "Text",
                    "str",
                    "Iterable[Sequence[str]]"
                ]
            }
        }
    },
    "minerva-master/minerva/nlp/wrappers/__init__.py": {},
    "minerva-master/minerva/text/base.py": {
        "Annotation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Dict[str,Any]"
                ],
                "score": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "float",
                    "List[tuple[Union[int,float]]]"
                ]
            }
        },
        "Annotation.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Annotation.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [
                "int",
                "Optional[int]",
                "tuple",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "TokenSpan.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "Sequence[str]",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "start_token": [
                    "int"
                ],
                "end_token": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "score": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "float",
                    "Optional[str]",
                    "Union[int,float]",
                    "str"
                ]
            }
        },
        "TokenSpan.start_token": {
            "name": "start_token",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_token": {
            "name": "end_token",
            "location": 106,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.start_index": {
            "name": "start_index",
            "location": 116,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_index": {
            "name": "end_index",
            "location": 125,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.text": {
            "name": "text",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Mapping[str,List[str]]",
                    "Mapping"
                ],
                "language": [
                    "Text",
                    "str",
                    "bool",
                    "Mapping[str,List[str]]"
                ]
            }
        },
        "BaseEntity.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTextualEntity.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "char_index": [
                    "int",
                    "str"
                ],
                "language": [
                    "str",
                    "Text"
                ],
                "parent": [
                    "Optional[str]",
                    "None",
                    "Optional[type]",
                    "str",
                    "Type"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "float",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "index": [
                    "int",
                    "str",
                    "float",
                    "Optional[Dict[str,str]]"
                ],
                "parent": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "char_index": [
                    "int",
                    "str",
                    "float",
                    "Optional[Dict[str,str]]"
                ],
                "language": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "Token.__contains__": {
            "name": "__contains__",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict",
                    "str"
                ]
            }
        },
        "Token.__setitem__": {
            "name": "__setitem__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Token.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "abc.Mapping"
                ]
            }
        },
        "Token.__iter__": {
            "name": "__iter__",
            "location": 231,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__len__": {
            "name": "__len__",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "Optional[Span]",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[object]"
                ],
                "parent": [
                    "str",
                    "None",
                    "bool",
                    "Union[str,Iterable[str]]",
                    "Iterable[str]",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Sentence.add_annotation": {
            "name": "add_annotation",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List",
                    "Dict",
                    "Dict[str,str]"
                ],
                "value": [
                    "str",
                    "T",
                    "KT"
                ],
                "begin": [
                    "int",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "Set[int]",
                    "Optional[float]",
                    "str",
                    "KT",
                    "float"
                ],
                "end": [
                    "int",
                    "float",
                    "Callable",
                    "Optional[str]",
                    "Optional[float]",
                    "KT",
                    "Set[int]"
                ],
                "score": [
                    "str",
                    "None",
                    "T",
                    "KT"
                ]
            }
        },
        "Sentence.get_annotation": {
            "name": "get_annotation",
            "location": 280,
            "return": [
                "Optional[Union[(Annotation, List[TokenSpan])]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "Union[int,slice]",
                    "Dict"
                ]
            }
        },
        "Sentence.token_at_char": {
            "name": "token_at_char",
            "location": 303,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Sentence.__getitem__": {
            "name": "__getitem__",
            "location": 345,
            "return": [
                "None",
                "int",
                "bool",
                "Iterable[str]",
                "List[List[str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "Sentence.__iter__": {
            "name": "__iter__",
            "location": 348,
            "return": [
                "listiterator[Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__len__": {
            "name": "__len__",
            "location": 351,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "_id": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[int]"
                ],
                "language": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "Optional[Collection[str]]"
                ]
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 374,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 377,
            "return": [
                "listiterator[Sentence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__len__": {
            "name": "__len__",
            "location": 380,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__str__": {
            "name": "__str__",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "items": [
                    "str",
                    "None"
                ]
            }
        },
        "Corpus.add": {
            "name": "add",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "List[Deque]",
                    "Callable",
                    "List[deque]",
                    "T"
                ]
            }
        },
        "Corpus.__add__": {
            "name": "__add__",
            "location": 400,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [
                    "_TCorpus@@Corpus@@"
                ],
                "other": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None",
                    "Type[Frame]",
                    "int",
                    "Type"
                ]
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "Corpus.__iter__": {
            "name": "__iter__",
            "location": 407,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__len__": {
            "name": "__len__",
            "location": 410,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__str__": {
            "name": "__str__",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/text/__init__.py": {},
    "minerva-master/minerva/utils/lazy.py": {
        "LazyLoader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Dict[str,Dict[str,Any]]"
                ],
                "local_name": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[Any]",
                    "Optional[Sequence[Any]]",
                    "int"
                ],
                "parent_module_globals": [
                    "Dict",
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Callable]",
                    "Optional[Literal[only_clustered,include_clustered]]"
                ],
                "warning": [
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "LazyLoader._load": {
            "name": "_load",
            "location": 27,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Type"
                ]
            }
        },
        "LazyLoader.__dir__": {
            "name": "__dir__",
            "location": 50,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/test/test_base.py": {
        "quotes_template": {
            "name": "quotes_template",
            "location": 6,
            "return": [
                "List[tuple[Union[Text,list[Text]]]]",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "contractions_template_en": {
            "name": "contractions_template_en",
            "location": 28,
            "return": [
                "List[tuple[Union[Text,list[Text]]]]",
                "bool",
                "int",
                "str",
                "Hashable"
            ],
            "arguments": {}
        },
        "sample_text": {
            "name": "sample_text",
            "location": 45,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "sample_tokens": {
            "name": "sample_tokens",
            "location": 50,
            "return": [
                "List[Text]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "sample_pos_tags": {
            "name": "sample_pos_tags",
            "location": 55,
            "return": [
                "List[Text]",
                "bool",
                "Optional[str]",
                "Optional[int]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        },
        "lipsum_array": {
            "name": "lipsum_array",
            "location": 60,
            "return": [
                "List[Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "lipsum_txt": {
            "name": "lipsum_txt",
            "location": 69,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sentence": {
            "name": "sentence",
            "location": 78,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "sample_text": [
                    "str"
                ]
            }
        },
        "test_tokenization": {
            "name": "test_tokenization",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Sequence[int]",
                    "Dict"
                ],
                "sample_text": [
                    "bool",
                    "BaseException",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "sample_tokens": [
                    "Callable",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "test_document": {
            "name": "test_document",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": [
                    "str",
                    "int"
                ],
                "lipsum_txt": [
                    "str",
                    "int"
                ]
            }
        },
        "test_corpus": {
            "name": "test_corpus",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tags": {
            "name": "test_tags",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "IO"
                ],
                "sample_pos_tags": [
                    "Optional[List[str]]",
                    "Callable",
                    "List[str]",
                    "None"
                ]
            }
        },
        "test_quotes_and_contraptions_en": {
            "name": "test_quotes_and_contraptions_en",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "quotes_template": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "contractions_template_en": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    }
}
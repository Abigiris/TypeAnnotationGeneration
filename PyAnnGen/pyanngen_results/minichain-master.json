{
    "minichain-master/chain/block.py": {
        "Block.__hash__": {
            "name": "__hash__",
            "location": 15,
            "return": [
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.calculate_hash": {
            "name": "calculate_hash",
            "location": 19,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "index": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "prev_hash": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "data": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "nonce": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "target": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "Block.validate_difficulty": {
            "name": "validate_difficulty",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "tuple",
                    "int",
                    "bytes"
                ],
                "target": [
                    "str",
                    "tuple",
                    "int",
                    "bytes"
                ]
            }
        },
        "Block.deserialize": {
            "name": "deserialize",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "other": [
                    "Dict",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Block.serialize": {
            "name": "serialize",
            "location": 33,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid": {
            "name": "is_valid",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid_hash": {
            "name": "is_valid_hash",
            "location": 47,
            "return": [
                "bool",
                "Dict[str,Union[str,Set]]",
                "List[Product]",
                "Dict[str,Dict[str,Any]]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid_difficulty": {
            "name": "is_valid_difficulty",
            "location": 50,
            "return": [
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.recalculate_hash": {
            "name": "recalculate_hash",
            "location": 53,
            "return": [
                "str",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/chain/blockchain.py": {
        "BlockChain.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "List",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BlockChain.__len__": {
            "name": "__len__",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockChain.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "BlockChain.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [
                "int",
                "Tuple[int,int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.are_blocks_adjacent": {
            "name": "are_blocks_adjacent",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "block": [
                    "Block",
                    "str"
                ],
                "prev_block": [
                    "None",
                    "Optional[mypy.nodes.Block]",
                    "block.Block",
                    "Block"
                ]
            }
        },
        "BlockChain.genesis": {
            "name": "genesis",
            "location": 46,
            "return": [
                "Block",
                "Dict[str,int]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "BlockChain.deserialize": {
            "name": "deserialize",
            "location": 60,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "float",
                    "Dict",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "raiden.utils.Any"
                ],
                "other": [
                    "type",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "BlockChain.interval": {
            "name": "interval",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.latest_block": {
            "name": "latest_block",
            "location": 69,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.length": {
            "name": "length",
            "location": 73,
            "return": [
                "int",
                "Sequence[cirq.Qid]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.serialize": {
            "name": "serialize",
            "location": 76,
            "return": [
                "str",
                "list",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.replace": {
            "name": "replace",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "BlockChain.retarget": {
            "name": "retarget",
            "location": 90,
            "return": [
                "str",
                "utils.Node",
                "int",
                "List[int]",
                "raiden.utils.Tuple[int,int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.validate_blocks": {
            "name": "validate_blocks",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "Set",
                    "str",
                    "Dict[int,Any]"
                ],
                "right": [
                    "int",
                    "Set",
                    "str",
                    "Dict[int,Any]"
                ]
            }
        },
        "BlockChain.is_valid_chain": {
            "name": "is_valid_chain",
            "location": 122,
            "return": [
                "Dict[str, Any]",
                "str",
                "raiden.utils.BlockNumber",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.generate_next": {
            "name": "generate_next",
            "location": 125,
            "return": [
                "Block",
                "Dict[str,int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "int",
                    "Optional[dict]",
                    "Dict",
                    "Iterable",
                    "None"
                ]
            }
        },
        "BlockChain.is_next_block": {
            "name": "is_next_block",
            "location": 138,
            "return": [
                "List[str]",
                "raiden.utils.TokenAmount",
                "Dict[str, Any]",
                "Sequence[str]",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Dict[str,Any]",
                    "mypy.nodes.Block"
                ]
            }
        },
        "BlockChain.add_block": {
            "name": "add_block",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "mypy.nodes.Block",
                    "dict",
                    "str"
                ]
            }
        },
        "BlockChain.mine": {
            "name": "mine",
            "location": 148,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Union[str,bytes,None]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "minichain-master/chain/mempool.py": {
        "get_mempool": {
            "name": "get_mempool",
            "location": 51,
            "return": [
                "Mempool",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Mempool.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transactions": [
                    "Set",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Mempool.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mempool.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Union[int,float]",
                    "int",
                    "float"
                ]
            }
        },
        "Mempool.trim_txs": {
            "name": "trim_txs",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_txs": [
                    "int",
                    "str"
                ]
            }
        },
        "Mempool.is_double_spent": {
            "name": "is_double_spent",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "str",
                    "Callable",
                    "T"
                ]
            }
        },
        "Mempool.add": {
            "name": "add",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "Dict",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Mempool.remove": {
            "name": "remove",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "List[int]",
                    "Dict"
                ]
            }
        },
        "Mempool.serialize": {
            "name": "serialize",
            "location": 40,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mempool.deserialize": {
            "name": "deserialize",
            "location": 44,
            "return": [
                "Mempool",
                "str",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "other": [
                    "List[int]",
                    "str",
                    "bool",
                    "Union[Set[int],List[int],Dict[int,Any]]"
                ]
            }
        }
    },
    "minichain-master/chain/p2p.py": {
        "Message.get_latest_block": {
            "name": "get_latest_block",
            "location": 29,
            "return": [
                "str",
                "Optional[Dict]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Dict[str,str]",
                    "Union[Callable[[Dict],Hashable],str]",
                    "Callable[dict,Hashable]"
                ]
            }
        },
        "Message.send_latest_block": {
            "name": "send_latest_block",
            "location": 33,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "mypy.nodes.Block",
                    "Block"
                ],
                "block": [
                    "mypy.nodes.Block",
                    "Block",
                    "dict"
                ]
            }
        },
        "Message.get_blocks": {
            "name": "get_blocks",
            "location": 37,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "start_index": [
                    "int"
                ],
                "end_index": [
                    "int"
                ]
            }
        },
        "Message.send_blocks": {
            "name": "send_blocks",
            "location": 43,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Sequence[int]"
                ],
                "start_index": [
                    "int",
                    "Sequence[int]"
                ],
                "end_index": [
                    "int",
                    "Sequence[int]"
                ],
                "blocks": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Message.get_blockchain": {
            "name": "get_blockchain",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,str]",
                    "conflow.node.AbstractNode",
                    "Dict",
                    "str",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Message.send_blockchain": {
            "name": "send_blockchain",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Optional[int]",
                    "int",
                    "None",
                    "bool"
                ],
                "blockchain": [
                    "str",
                    "Optional[int]",
                    "type",
                    "bool"
                ]
            }
        },
        "Message.get_transactions": {
            "name": "get_transactions",
            "location": 62,
            "return": [
                "Dict[str, str]",
                "str",
                "Iterable[Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Message.send_transactions": {
            "name": "send_transactions",
            "location": 66,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "None",
                    "Tuple[object]",
                    "Optional[mypy.nodes.Node]",
                    "Callable[str,str]",
                    "raiden.utils.BlockIdentifier",
                    "Callable[[str],str]"
                ],
                "transactions": [
                    "Tuple[object]",
                    "Optional[mypy.nodes.Node]",
                    "raiden.utils.BlockIdentifier",
                    "Callable[[str],str]"
                ]
            }
        },
        "UDPProtocal.get_refresh_ids": {
            "name": "get_refresh_ids",
            "location": 74,
            "return": [
                "List[Union[int,list[tuple[Union[Any,Any,Any,float]]],dict[str,list]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[Union[float,float,float,float]]",
                    "Tuple[float,float,float,float]"
                ]
            }
        },
        "TCPProtocol.reply": {
            "name": "reply",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str,bytes]"
                ]
            }
        },
        "TCPProtocol.handle_request_latest_block": {
            "name": "handle_request_latest_block",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.handle_receive_latest_block": {
            "name": "handle_receive_latest_block",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Dict",
                    "str",
                    "mypy.nodes.Block"
                ]
            }
        },
        "TCPProtocol.handle_request_blockchain": {
            "name": "handle_request_blockchain",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.handle_receive_blockchain": {
            "name": "handle_receive_blockchain",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "bool",
                    "Dict",
                    "int",
                    "random.Random"
                ]
            }
        },
        "TCPProtocol.handle_message": {
            "name": "handle_message",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str,Any]",
                    "List[dict]",
                    "Dict"
                ]
            }
        },
        "TCPProtocol.connection_made": {
            "name": "connection_made",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "int"
                ]
            }
        },
        "TCPProtocol.data_received": {
            "name": "data_received",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List",
                    "str",
                    "memoryview",
                    "raiden.utils.Address",
                    "Union[Iterable,str]",
                    "Union[int,str]",
                    "bool"
                ]
            }
        },
        "TCPProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TCPClientProtocol.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "bool",
                    "AsyncContextManager[None]",
                    "int"
                ],
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping",
                    "cmk.utils.type_defs.AgentRawData",
                    "bytes",
                    "List",
                    "raiden.utils.List[raiden.utils.Tuple[str,int]]"
                ]
            }
        },
        "TCPClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "int"
                ]
            }
        },
        "TCPClientProtocol.data_received": {
            "name": "data_received",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List",
                    "str",
                    "memoryview",
                    "raiden.utils.Address",
                    "Union[Iterable,str]",
                    "Union[int,str]",
                    "bool"
                ]
            }
        },
        "TCPClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "P2PServer.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ksize": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.ChannelID",
                    "raiden.utils.ChainID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "alpha": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.ChannelID",
                    "raiden.utils.ChainID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "node_id": [
                    "None",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.ChannelID",
                    "raiden.utils.ChainID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "storage": [
                    "None",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.ChannelID",
                    "raiden.utils.ChainID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "mining": [
                    "bool",
                    "int",
                    "str",
                    "Tuple[str,str,str]"
                ]
            }
        },
        "P2PServer.listen": {
            "name": "listen",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "interface": [
                    "int",
                    "Text"
                ]
            }
        },
        "P2PServer.stop": {
            "name": "stop",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.refresh_table": {
            "name": "refresh_table",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.get_mempool": {
            "name": "get_mempool",
            "location": 220,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.read_blockchain": {
            "name": "read_blockchain",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.sync_blockchain": {
            "name": "sync_blockchain",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.broadcast_message": {
            "name": "broadcast_message",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "P2PServer.get_peers": {
            "name": "get_peers",
            "location": 262,
            "return": [
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/chain/transaction.py": {
        "TxIn.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_index": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "int"
                ],
                "tx_hash": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "int"
                ],
                "amount": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "int"
                ],
                "pubkey": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "int"
                ],
                "signature": [
                    "Text",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "int",
                    "Callable"
                ]
            }
        },
        "TxIn.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "TxIn.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.signature": {
            "name": "signature",
            "location": 44,
            "return": [
                "int",
                "Set[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.hash": {
            "name": "hash",
            "location": 48,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.valid": {
            "name": "valid",
            "location": 52,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.serialize": {
            "name": "serialize",
            "location": 55,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.calculate_hash": {
            "name": "calculate_hash",
            "location": 64,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxIn.sign": {
            "name": "sign",
            "location": 68,
            "return": [
                "int",
                "decimal.Decimal",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TxIn.verify": {
            "name": "verify",
            "location": 72,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quiet": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "TxIn.deserialize": {
            "name": "deserialize",
            "location": 86,
            "return": [
                "bool",
                "TxIn"
            ],
            "arguments": {
                "other": [
                    "Iterable[T]",
                    "raiden.utils.Any"
                ]
            }
        },
        "TxOut.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bytes",
                    "decimal.Decimal"
                ],
                "address": [
                    "int",
                    "bytes",
                    "decimal.Decimal"
                ]
            }
        },
        "TxOut.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "raiden.utils.Any",
                    "bool"
                ]
            }
        },
        "TxOut.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxOut.__hash__": {
            "name": "__hash__",
            "location": 104,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxOut.amount": {
            "name": "amount",
            "location": 108,
            "return": [
                "Sequence[int]",
                "int",
                "bytes",
                "dict",
                "List[List[int]]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxOut.address": {
            "name": "address",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxOut.serialize": {
            "name": "serialize",
            "location": 115,
            "return": [
                "bool",
                "Dict[str, bool]",
                "Dict[str, Set[str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TxOut.deserialize": {
            "name": "deserialize",
            "location": 119,
            "return": [
                "TxOut",
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "other": [
                    "Iterable[T]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "bool",
                    "TextIO",
                    "Dict[int,bool]",
                    "int"
                ],
                "inputs": [
                    "List",
                    "str",
                    "bool",
                    "TextIO",
                    "Dict[int,bool]",
                    "int"
                ],
                "outputs": [
                    "List",
                    "str",
                    "bool",
                    "TextIO",
                    "Dict[int,bool]",
                    "int"
                ]
            }
        },
        "Transaction.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[float,float]]",
                    "float",
                    "raiden.utils.Any",
                    "Tuple[float,float]"
                ]
            }
        },
        "Transaction.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__hash__": {
            "name": "__hash__",
            "location": 153,
            "return": [
                "int",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.reward": {
            "name": "reward",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.type": {
            "name": "type",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.inputs": {
            "name": "inputs",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.outputs": {
            "name": "outputs",
            "location": 169,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.hash": {
            "name": "hash",
            "location": 173,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.total_input": {
            "name": "total_input",
            "location": 177,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Optional[dict]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.total_output": {
            "name": "total_output",
            "location": 181,
            "return": [
                "bool",
                "int",
                "Tuple[int,int]",
                "Iterable[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.has_enough_balance": {
            "name": "has_enough_balance",
            "location": 185,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.fee": {
            "name": "fee",
            "location": 189,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.valid": {
            "name": "valid",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.has_same_inputs": {
            "name": "has_same_inputs",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Cell]",
                    "None"
                ]
            }
        },
        "Transaction.serialize": {
            "name": "serialize",
            "location": 207,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.calculate_hash": {
            "name": "calculate_hash",
            "location": 214,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.deserialize": {
            "name": "deserialize",
            "location": 219,
            "return": [
                "Transaction",
                "str",
                "int",
                "Tuple[str,str]"
            ],
            "arguments": {
                "other": [
                    "raiden.utils.Any"
                ]
            }
        }
    },
    "minichain-master/chain/wallet.py": {
        "Wallet.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Wallet.get_public_key": {
            "name": "get_public_key",
            "location": 9,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallet.get_private_key": {
            "name": "get_private_key",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "minichain-master/chain/__init__.py": {},
    "minichain-master/chain/__main__.py": {},
    "minichain-master/chain/utils/elliptic.py": {
        "remove_0x": {
            "name": "remove_0x",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "decode_hex": {
            "name": "decode_hex",
            "location": 16,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "generate_keypair": {
            "name": "generate_keypair",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "sign": {
            "name": "sign",
            "location": 25,
            "return": [
                "str",
                "dict",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "priv_key": [
                    "bytes",
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 30,
            "return": [
                "int",
                "List[dict]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "pub_key": [
                    "str",
                    "bytes",
                    "int",
                    "umbral.keys.UmbralPublicKey",
                    "umbral.keys.UmbralPrivateKey",
                    "coincurve.PrivateKey"
                ],
                "sig": [
                    "str",
                    "bytes",
                    "Hashable",
                    "List[Dict]",
                    "List[dict]"
                ],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "minichain-master/chain/utils/log.py": {
        "_stderr_supports_color": {
            "name": "_stderr_supports_color",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LogFormatter.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "bool",
                    "Sequence"
                ],
                "datefmt": [
                    "str",
                    "dict"
                ],
                "style": [
                    "Text",
                    "List[Dict[str,Any]]",
                    "bool",
                    "str",
                    "Callable[[List],List[str]]"
                ],
                "color": [
                    "bool",
                    "str",
                    "Sequence"
                ],
                "colors": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "LogFormatter.format": {
            "name": "format",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "logging.LogRecord",
                    "dict"
                ]
            }
        }
    },
    "minichain-master/chain/utils/__init__.py": {},
    "minichain-master/tests/test_blockchain.py": {
        "TestBlockChain.test_block": {
            "name": "test_block",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlockChain.test_blockchain": {
            "name": "test_blockchain",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/test_tx.py": {
        "TestTx.test_txin": {
            "name": "test_txin",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTx.test_txout": {
            "name": "test_txout",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTx.test_transaction": {
            "name": "test_transaction",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/test_utils.py": {
        "TestUtils.test_elliptic": {
            "name": "test_elliptic",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_log": {
            "name": "test_log",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/__init__.py": {
        "TestCase.assertSerializable": {
            "name": "assertSerializable",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "obj": [
                    "int",
                    "List[str]",
                    "list",
                    "dict",
                    "str"
                ],
                "env": [
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        }
    }
}
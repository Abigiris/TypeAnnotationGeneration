{
    "minstrel-master/setup.py": {},
    "minstrel-master/minstrel/cli.py": {
        "_read_config_into_kwargs": {
            "name": "_read_config_into_kwargs",
            "location": 13,
            "return": [
                "dict[tuple[typing.Text], ]",
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict",
                    "None",
                    "Optional[str]",
                    "Callable"
                ],
                "kwargs": []
            }
        },
        "minstrel": {
            "name": "minstrel",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "load": {
            "name": "load",
            "location": 48,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "config": [
                    "str",
                    "click.Context",
                    "Optional[str]"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Callable"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "BinaryIO",
                    "int"
                ],
                "indent": [
                    "bytes",
                    "Dict[str, object]",
                    "dict[str, object]",
                    "monkq.config.Setting",
                    "dict[, ]",
                    "Union[Dict, List]",
                    "list[]",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "amqp": {
            "name": "amqp",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ],
                "host": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ],
                "user": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "sql": {
            "name": "sql",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bytes",
                    "Exception",
                    "Tuple[str, float]",
                    "List[str]",
                    "Dict[str, T]"
                ],
                "config": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "read_sql": {
            "name": "read_sql",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "list[]",
                    "click.Context",
                    "list"
                ],
                "table_name": [
                    "str",
                    "bool",
                    "list[int]",
                    "click.Context",
                    "None",
                    "List[int]",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "click.Context"
                ]
            }
        }
    },
    "minstrel-master/minstrel/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Config.setup": {
            "name": "setup",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.run": {
            "name": "run",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minstrel-master/minstrel/generate_diffs.py": {
        "differ": {
            "name": "differ",
            "location": 6,
            "return": [
                "Iterable[dict]"
            ],
            "arguments": {
                "dicts": [
                    "Iterable[dict]"
                ]
            }
        }
    },
    "minstrel-master/minstrel/mock.py": {
        "Mock.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport_configs": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "base": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "derivatives": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Mock.generate_objects": {
            "name": "generate_objects",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minstrel-master/minstrel/patching.py": {
        "patch": {
            "name": "patch",
            "location": 9,
            "return": [
                "Callable",
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "base": [
                    "dict"
                ],
                "patches": [
                    "Iterable[dict]"
                ]
            }
        }
    },
    "minstrel-master/minstrel/types.py": {},
    "minstrel-master/minstrel/__init__.py": {
        "_load_file": {
            "name": "_load_file",
            "location": 6,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "generate_mocks": {
            "name": "generate_mocks",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handling.py": {
        "flattenit": {
            "name": "flattenit",
            "location": 9,
            "return": [
                "Generator[(Tuple[(_T1, _T0)], Any, None)]"
            ],
            "arguments": {
                "pyobj": [
                    "_T0"
                ],
                "keytuple": [
                    "_T1"
                ]
            }
        },
        "_any_of_types": {
            "name": "_any_of_types",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Type",
                    "mypy.types.AnyType",
                    "Type"
                ],
                "types": [
                    "str",
                    "mypy.types.AnyType",
                    "Type"
                ]
            }
        },
        "simplify_value": {
            "name": "simplify_value",
            "location": 23,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Union[str, Any]]",
                    "list[typing.Union[str,typing.Any]]"
                ],
                "handler_map": [
                    "Dict[(Tuple[(type, ...)], Any)]"
                ]
            }
        },
        "realify_filler": {
            "name": "realify_filler",
            "location": 31,
            "return": [
                "str",
                "List[int]",
                "types.StrPath",
                "int"
            ],
            "arguments": {
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "filler": [
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "handler_map": [
                    "Dict[(Tuple[(type, ...)], Any)]"
                ]
            }
        },
        "best_default_dict": {
            "name": "best_default_dict",
            "location": 40,
            "return": [
                "_frozendict.frozendict"
            ],
            "arguments": {
                "dicts": [
                    "Iterable[_frozendict.frozendict]"
                ]
            }
        },
        "handle_dicts": {
            "name": "handle_dicts",
            "location": 75,
            "return": [
                "Tuple[(dict, List[dict])]"
            ],
            "arguments": {
                "dicts": [
                    "List[dict]"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/__init__.py": {},
    "minstrel-master/minstrel/jester/handlers/array_handler.py": {
        "ArrayHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayHandler.simplify": {
            "name": "simplify",
            "location": 32,
            "return": [
                "ArrayFiller"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "tuple"
                ]
            }
        },
        "ArrayHandler.realify": {
            "name": "realify",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "filler": [
                    "ArrayFiller"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/base_handler.py": {
        "Filler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "type",
                    "Optional[int]"
                ],
                "path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "original_value": [
                    "bool",
                    "typing.Sequence[dict[str, str]]",
                    "str",
                    "int",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "Filler.__hash__": {
            "name": "__hash__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filler.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "Filler.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexFiller.__hash__": {
            "name": "__hash__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.create_filler": {
            "name": "create_filler",
            "location": 59,
            "return": [
                "FillerType"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Forms"
                ],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "ValueType"
                ]
            }
        },
        "BaseHandler.simplify": {
            "name": "simplify",
            "location": 65,
            "return": [
                "FillerType"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "ValueType"
                ]
            }
        },
        "BaseHandler.realify": {
            "name": "realify",
            "location": 68,
            "return": [
                "ValueType"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "filler": [
                    "FillerType"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/bool_handler.py": {
        "BoolHandler.simplify": {
            "name": "simplify",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "BoolHandler.realify": {
            "name": "realify",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "bool"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/none_handler.py": {
        "NoneHandler.simplify": {
            "name": "simplify",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "None"
                ]
            }
        },
        "NoneHandler.realify": {
            "name": "realify",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "None"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/number_handler.py": {
        "NumberHandler.simplify": {
            "name": "simplify",
            "location": 25,
            "return": [
                "NumberFiller"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "value": [
                    "str",
                    "int",
                    "opentrons.types.Location"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/object_handler.py": {
        "ObjectHandler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectHandler.simplify": {
            "name": "simplify",
            "location": 22,
            "return": [
                "str",
                "types.StrPath",
                "Union[pathlib.Path, str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "value": [
                    "dict"
                ]
            }
        },
        "ObjectHandler.realify": {
            "name": "realify",
            "location": 30,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Tuple[Union[(int, str)]]"
                ],
                "filler": [
                    "ObjectFiller"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/string_handler.py": {
        "StringHandler.simplify": {
            "name": "simplify",
            "location": 23,
            "return": [
                "StringFiller"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Exception",
                    "typing.Pattern",
                    "Optional[Pattern[str]]",
                    "None",
                    "Optional[str]",
                    "typing.Sequence[str]",
                    "Union[str, pathlib.Path]",
                    "Sequence[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "IO",
                    "IO[Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "minstrel-master/minstrel/jester/handlers/__init__.py": {
        "get_handler_map": {
            "name": "get_handler_map",
            "location": 14,
            "return": [
                "Dict[(Tuple[(type, ...)], Any)]"
            ],
            "arguments": {}
        }
    },
    "minstrel-master/minstrel/transports/amqp_transport.py": {
        "AMQPTransport.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "AMQPTransport.write": {
            "name": "write",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Optional[Container[str]]",
                    "typing.Container",
                    "None"
                ]
            }
        }
    },
    "minstrel-master/minstrel/transports/base_transport.py": {
        "Transport.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Transport.write": {
            "name": "write",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Transport.read": {
            "name": "read",
            "location": 9,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minstrel-master/minstrel/transports/sql_transport.py": {
        "SQLTransport.sql_url": {
            "name": "sql_url",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTransport.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "datetime.datetime"
                ],
                "host": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "datetime.datetime"
                ],
                "user": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "datetime.datetime"
                ],
                "password": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "datetime.datetime"
                ],
                "database": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "SQLTransport._setup_table": {
            "name": "_setup_table",
            "location": 44,
            "return": [
                "Table",
                "Optional[Iterable[Any]]",
                "type",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SQLTransport.write": {
            "name": "write",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.Mock"
                ]
            }
        },
        "SQLTransport.read": {
            "name": "read",
            "location": 124,
            "return": [
                "Dict[(str, Union[(dict, List[Dict[(str, dict)]])])]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "_T0"
                ]
            }
        }
    },
    "minstrel-master/minstrel/transports/__init__.py": {},
    "minstrel-master/tests/test_handling.py": {
        "test_handle_dicts": {
            "name": "test_handle_dicts",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_dicts": {
            "name": "test_nested_dicts",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arrays": {
            "name": "test_arrays",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
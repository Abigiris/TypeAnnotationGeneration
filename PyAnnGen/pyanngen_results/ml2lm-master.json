{
    "ml2lm-master/bin/manage.py": {},
    "ml2lm-master/etc/runners.py": {
        "ManagedModelTestRunner.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int",
                    "bool",
                    "float"
                ],
                "failfast": [
                    "bool",
                    "int",
                    "float"
                ],
                "keepdb": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "ManagedModelTestRunner.run_tests": {
            "name": "run_tests",
            "location": 15,
            "return": [
                "bool",
                "list",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "test_labels": [
                    "str",
                    "tracim.models.data.Workspace",
                    "Type[django.db.models.base.Model]"
                ]
            }
        },
        "ManagedModelTestRunner.setup_test_environment": {
            "name": "setup_test_environment",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedModelTestRunner.teardown_test_environment": {
            "name": "teardown_test_environment",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml2lm-master/etc/settings.py": {},
    "ml2lm-master/etc/__init__.py": {},
    "ml2lm-master/main/urls.py": {},
    "ml2lm-master/main/wsgi.py": {},
    "ml2lm-master/main/__init__.py": {},
    "ml2lm-master/plugins/frontend/apps.py": {},
    "ml2lm-master/plugins/frontend/urls.py": {},
    "ml2lm-master/plugins/frontend/__init__.py": {},
    "ml2lm-master/plugins/ml2lm/admin.py": {},
    "ml2lm-master/plugins/ml2lm/apps.py": {
        "Ml2lmConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/models.py": {
        "Playlist.site": {
            "name": "site",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Playlist.playlist_id": {
            "name": "playlist_id",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Playlist.latest_movie": {
            "name": "latest_movie",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Playlist.thumbnail_url": {
            "name": "thumbnail_url",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Playlist.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/serializer.py": {
        "PlaylistSerializer.get_thumbnail_url": {
            "name": "get_thumbnail_url",
            "location": 29,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "salon.models.Stylist"
                ]
            }
        },
        "PlaylistSerializer.create": {
            "name": "create",
            "location": 32,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Optional[int]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "list[]",
                    "dict",
                    "Iterable[T]",
                    "Type[Any]",
                    "Iterable",
                    "Union[Dict, List]",
                    "T"
                ]
            }
        },
        "PlaylistSerializer.validate_url": {
            "name": "validate_url",
            "location": 72,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/signals.py": {
        "notify_created_playlist": {
            "name": "notify_created_playlist",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "bool",
                    "Type",
                    "None",
                    "Callable",
                    "Optional[type]"
                ],
                "instance": [
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "logging.Logger",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[Tuple[str, ...]]",
                    "Tuple[str, int]"
                ],
                "created": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "bool",
                    "Type",
                    "None",
                    "Callable",
                    "Optional[type]"
                ]
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/urls.py": {},
    "ml2lm-master/plugins/ml2lm/views.py": {
        "redirect_latest_movie": {
            "name": "redirect_latest_movie",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bytes",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "short_id": [
                    "str"
                ]
            }
        },
        "update_playlists": {
            "name": "update_playlists",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "scrapy.http.Request",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "update_playlists.command": {
            "name": "command",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "PlaylistViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 48,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/__init__.py": {},
    "ml2lm-master/plugins/ml2lm/management/commands/update_playlists.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser",
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._update_playlist": {
            "name": "_update_playlist",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "playlist": [
                    "plugins.ml2lm.models.Playlist"
                ]
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/management/commands/__init__.py": {},
    "ml2lm-master/plugins/ml2lm/migrations/0001_initial.py": {},
    "ml2lm-master/plugins/ml2lm/migrations/__init__.py": {},
    "ml2lm-master/plugins/ml2lm/tests/test_admin.py": {
        "TestAcceptance.test_admin_views": {
            "name": "test_admin_views",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_client": [
                    "int"
                ],
                "url": [
                    "int"
                ],
                "status_code": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/tests/test_api.py": {
        "TestApi.test_acceptance": {
            "name": "test_acceptance",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "status_code": []
            }
        },
        "TestApi.test_shoten_nicovideo": {
            "name": "test_shoten_nicovideo",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestApi.test_shoten_youtube": {
            "name": "test_shoten_youtube",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "ml2lm-master/plugins/ml2lm/tests/test_frontend.py": {
        "TestFrontend.app": {
            "name": "app",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontend.test_acceptance": {
            "name": "test_acceptance",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "url": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "status_code": [
                    "int",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Union[Dict[str, Any], List[Any]]",
                    "list[typing.Any]"
                ]
            }
        }
    },
    "ml2lm-master/plugins/utils/nicovideo_fetcher.py": {
        "NicovideoFetcher.fetch_playlist_and_latest_movie": {
            "name": "fetch_playlist_and_latest_movie",
            "location": 11,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "playlist_id": [
                    "str"
                ]
            }
        }
    },
    "ml2lm-master/plugins/utils/youtube_fetcher.py": {
        "YoutubeFetcher.fetch_playlist": {
            "name": "fetch_playlist",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ],
                "playlist_id": [
                    "str"
                ]
            }
        },
        "YoutubeFetcher.fetch_latest_movie": {
            "name": "fetch_latest_movie",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ],
                "playlist_id": [
                    "str"
                ]
            }
        },
        "YoutubeFetcher.fetch_playlist_and_latest_movie": {
            "name": "fetch_playlist_and_latest_movie",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "playlist_id": [
                    "str"
                ]
            }
        }
    },
    "ml2lm-master/plugins/utils/__init__.py": {}
}
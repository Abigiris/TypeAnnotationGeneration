{
    "mlconjug3-master/setup.py": {},
    "mlconjug3-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "Callable[[T],bool]",
                    "Callable[T,bool]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "Tuple[Union[Any,Any,None]]",
                "Dict",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Iterator",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Dict[str,Any]"
                ],
                "config": [
                    "Dict[str,Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "mlconjug3-master/docs/conf.py": {},
    "mlconjug3-master/mlconjug3/cli.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "verbs": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "language": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "output": [
                    "str"
                ],
                "subject": [
                    "bytes",
                    "bool",
                    "str",
                    "Union[slice,List[slice],List[int]]",
                    "Optional[List[str]]",
                    "List[slice]",
                    "List[int]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "mlconjug3-master/mlconjug3/mlconjug.py": {
        "extract_verb_features": {
            "name": "extract_verb_features",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "verb": [],
                "lang": [],
                "ngram_range": []
            }
        },
        "Conjugator.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "typing.Text"
                ],
                "model": [
                    "None"
                ]
            }
        },
        "Conjugator.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conjugator.conjugate": {
            "name": "conjugate",
            "location": 146,
            "return": [
                "Optional[Union[(mlconjug3.PyVerbiste.VerbEn, mlconjug3.PyVerbiste.VerbEs, mlconjug3.PyVerbiste.VerbFr, mlconjug3.PyVerbiste.VerbIt, mlconjug3.PyVerbiste.VerbPt, mlconjug3.PyVerbiste.VerbRo)]]"
            ],
            "arguments": {
                "self": [],
                "verb": [],
                "subject": [
                    "typing.Text"
                ]
            }
        },
        "Conjugator.set_model": {
            "name": "set_model",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DataSet.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbs_dict": []
            }
        },
        "DataSet.__repr__": {
            "name": "__repr__",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet.construct_dict_conjug": {
            "name": "construct_dict_conjug",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet.split_data": {
            "name": "split_data",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "int"
                ],
                "proportion": [
                    "float"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vectorizer": [
                    "None"
                ],
                "feature_selector": [
                    "None"
                ],
                "classifier": [
                    "None"
                ],
                "language": [
                    "None"
                ]
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.train": {
            "name": "train",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [],
                "labels": []
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "verbs": []
            }
        }
    },
    "mlconjug3-master/mlconjug3/PyVerbiste.py": {
        "ConjugManager.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "ConjugManager.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugManager._load_verbs": {
            "name": "_load_verbs",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbs_file": []
            }
        },
        "ConjugManager._load_conjugations": {
            "name": "_load_conjugations",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conjugations_file": []
            }
        },
        "ConjugManager._detect_allowed_endings": {
            "name": "_detect_allowed_endings",
            "location": 151,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugManager.is_valid_verb": {
            "name": "is_valid_verb",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "ConjugManager.get_verb_info": {
            "name": "get_verb_info",
            "location": 181,
            "return": [
                "Optional[VerbInfo]"
            ],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "ConjugManager.get_conjug_info": {
            "name": "get_conjug_info",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": []
            }
        },
        "Verbiste._load_verbs": {
            "name": "_load_verbs",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbs_file": []
            }
        },
        "Verbiste._parse_verbs": {
            "name": "_parse_verbs",
            "location": 237,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "file": []
            }
        },
        "Verbiste._load_conjugations": {
            "name": "_load_conjugations",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conjugations_file": []
            }
        },
        "Verbiste._parse_conjugations": {
            "name": "_parse_conjugations",
            "location": 268,
            "return": [
                "Dict[(Any, collections.OrderedDict[(Any, collections.OrderedDict)])]"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Verbiste._load_tense": {
            "name": "_load_tense",
            "location": 290,
            "return": [
                "None",
                "list[tuple[None]]",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "tense": []
            }
        },
        "VerbInfo.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "infinitive": [],
                "root": [],
                "template": []
            }
        },
        "VerbInfo.__repr__": {
            "name": "__repr__",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbInfo.__eq__": {
            "name": "__eq__",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Verb.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verb_info": [],
                "conjug_info": [],
                "subject": [
                    "typing.Text"
                ],
                "predicted": [
                    "bool"
                ]
            }
        },
        "Verb.__repr__": {
            "name": "__repr__",
            "location": 392,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Verb.iterate": {
            "name": "iterate",
            "location": 395,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Verb._load_conjug": {
            "name": "_load_conjug",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Verb.conjugate_person": {
            "name": "conjugate_person",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "persons_dict": [],
                "term": []
            }
        },
        "VerbFr._load_conjug": {
            "name": "_load_conjug",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbEn._load_conjug": {
            "name": "_load_conjug",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbEs._load_conjug": {
            "name": "_load_conjug",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbIt._load_conjug": {
            "name": "_load_conjug",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbPt._load_conjug": {
            "name": "_load_conjug",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerbRo._load_conjug": {
            "name": "_load_conjug",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mlconjug3-master/mlconjug3/utils.py": {},
    "mlconjug3-master/mlconjug3/__init__.py": {
        "_get_user_locale": {
            "name": "_get_user_locale",
            "location": 59,
            "return": [
                "Union[(str, List[int])]"
            ],
            "arguments": {}
        },
        "_getdoc": {
            "name": "_getdoc",
            "location": 84,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mlconjug3-master/tests/test_mlconjug.py": {
        "TestPyVerbiste.test_init_verbiste": {
            "name": "test_init_verbiste",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyVerbiste.test_repr": {
            "name": "test_repr",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyVerbiste.test_unsupported_language": {
            "name": "test_unsupported_language",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyVerbiste.test_get_verb_info": {
            "name": "test_get_verb_info",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyVerbiste.test_get_conjug_info": {
            "name": "test_get_conjug_info",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyVerbiste.test_is_valid_verb": {
            "name": "test_is_valid_verb",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerb.test_verbinfo": {
            "name": "test_verbinfo",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": []
            }
        },
        "TestVerb.test_default_verb": {
            "name": "test_default_verb",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerb.test_repr": {
            "name": "test_repr",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerb.test_iterate": {
            "name": "test_iterate",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndingCountVectorizer.test_char_ngrams": {
            "name": "test_char_ngrams",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjugator.test_repr": {
            "name": "test_repr",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjugator.test_conjugate": {
            "name": "test_conjugate",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjugator.test_set_model": {
            "name": "test_set_model",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataSet.test_repr": {
            "name": "test_repr",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataSet.test_construct_dict_conjug": {
            "name": "test_construct_dict_conjug",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataSet.test_split_data": {
            "name": "test_split_data",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_repr": {
            "name": "test_repr",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_train": {
            "name": "test_train",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_predict": {
            "name": "test_predict",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_save_file": {
            "name": "test_save_file",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        }
    },
    "mlconjug3-master/tests/__init__.py": {},
    "mlconjug3-master/utils/conjug_formatter.py": {
        "detect_root": {
            "name": "detect_root",
            "location": 7,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "verb": [
                    "str",
                    "bool"
                ],
                "info_verb": [
                    "Dict[str,Any]",
                    "Dict[int,str]",
                    "Callable",
                    "Iterable[Dict[str,Any]]"
                ],
                "language": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "construct_template": {
            "name": "construct_template",
            "location": 38,
            "return": [
                "Optional[collections.OrderedDict[(Any, tuple)]]"
            ],
            "arguments": {
                "verb": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "info_verb": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,int]",
                    "str",
                    "Iterable[Tuple[Hashable,Any]]"
                ],
                "root_info": [
                    "str",
                    "Optional[Dict[str,str]]"
                ],
                "language": [
                    "int",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "bool"
                ],
                "pronouns_dict": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "int",
                    "bool"
                ]
            }
        },
        "group_by_template": {
            "name": "group_by_template",
            "location": 60,
            "return": [
                "collections.defaultdict[(frozenset, Any)]"
            ],
            "arguments": {
                "model_verbs_dict": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,float]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,dict]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]"
                ],
                "all_verbs_dict": [
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,float]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Union[AsyncIterable[Any],Iterable[Any]]"
                ],
                "verb_roots": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "construct_verbs_dict": {
            "name": "construct_verbs_dict",
            "location": 88,
            "return": [
                "dict"
            ],
            "arguments": {
                "hastable": [
                    "str",
                    "bool",
                    "int"
                ],
                "verb_roots": [
                    "str",
                    "path.Path"
                ]
            }
        },
        "construct_conjug_dict": {
            "name": "construct_conjug_dict",
            "location": 100,
            "return": [
                "dict"
            ],
            "arguments": {
                "hastable": [
                    "str",
                    "bool",
                    "bytes",
                    "List[str]",
                    "int",
                    "Sequence"
                ],
                "verb_roots": [
                    "str",
                    "List[str]"
                ],
                "all_verbs_conjugation": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "mlconjug3-master/utils/cooljugator_scraper.py": {
        "chunks": {
            "name": "chunks",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "show_progress_indicator": {
            "name": "show_progress_indicator",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "ConjugProvider.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tor_controller": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ConjugProvider.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugProvider.__tor_status__": {
            "name": "__tor_status__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugProvider.__socket_is_patched": {
            "name": "__socket_is_patched",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ConjugProvider._get_all_languages": {
            "name": "_get_all_languages",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugProvider._get_all_verbs": {
            "name": "_get_all_verbs",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ConjugProvider._make_verb_url": {
            "name": "_make_verb_url",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "artist": [
                    "bool",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "ConjugProvider._clean_string": {
            "name": "_clean_string",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ConjugProvider.get_page": {
            "name": "get_page",
            "location": 144,
            "return": [
                "str",
                "bool",
                "Dict",
                "float",
                "Dict[str,Any]",
                "Dict[str,str]",
                "List",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Cooljugator._get_all_languages": {
            "name": "_get_all_languages",
            "location": 171,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cooljugator._get_all_verbs": {
            "name": "_get_all_verbs",
            "location": 187,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Cooljugator._make_verb_url": {
            "name": "_make_verb_url",
            "location": 209,
            "return": [
                "str",
                "bool",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str"
                ]
            }
        },
        "Cooljugator.get_verb_page": {
            "name": "get_verb_page",
            "location": 219,
            "return": [
                "Optional[bs4.BeautifulSoup]"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str",
                    "bool"
                ]
            }
        },
        "Cooljugator.get_conjug": {
            "name": "get_conjug",
            "location": 238,
            "return": [
                "Optional[Dict[(Any, List[Tuple[(Any, Any)]])]]"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "Dict[str,Set[str]]",
                    "str",
                    "Dict[str,set[str]]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Cooljugator._clean_string": {
            "name": "_clean_string",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "mlconjug3-master/utils/evaluate_best_models.py": {},
    "mlconjug3-master/utils/GridSearchModels.py": {},
    "mlconjug3-master/utils/MultiCore_training_default_params.py": {},
    "mlconjug3-master/utils/quick_training_with_default_parameters.py": {},
    "mlconjug3-master/utils/quick_training_with_gridsearch_parameters.py": {},
    "mlconjug3-master/utils/ReducedGridSearchModels.py": {},
    "mlconjug3-master/utils/issues/issue#44.py": {},
    "mlconjug3-master/utils/issues/issue#80.py": {},
    "mlconjug3-master/utils/issues/issue#82.py": {},
    "mlconjug3-master/utils/issues/issue#89.py": {}
}
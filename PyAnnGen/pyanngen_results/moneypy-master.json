{
    "moneypy-master/setup.py": {},
    "moneypy-master/moneypy/decorators.py": {
        "validate_other_is": {
            "name": "validate_other_is",
            "location": 8,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "others_type": [
                    "int",
                    "bool",
                    "str"
                ],
                "op_name": [
                    "int",
                    "bool",
                    "str"
                ],
                "add_info": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "validate_same_currencies": {
            "name": "validate_same_currencies",
            "location": 31,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "op_name": [
                    "str",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "validate_other_is._validate_other_is": {
            "name": "_validate_other_is",
            "location": 14,
            "return": [
                "Dict[str, Dict[str, int]]",
                "int",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "function": [
                    "List[str]",
                    "Callable",
                    "BaseException"
                ]
            }
        },
        "validate_same_currencies._validate_same_currencies": {
            "name": "_validate_same_currencies",
            "location": 32,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "validate_other_is._validate_other_is.func_wrapper": {
            "name": "func_wrapper",
            "location": 16,
            "return": [],
            "arguments": {
                "self_object": [],
                "other_object": []
            }
        },
        "validate_same_currencies._validate_same_currencies.func_wrapper": {
            "name": "func_wrapper",
            "location": 34,
            "return": [
                "int",
                "Type"
            ],
            "arguments": {
                "self_object": [
                    "bytes",
                    "str",
                    "int"
                ],
                "other_object": [
                    "Optional[str]"
                ]
            }
        }
    },
    "moneypy-master/moneypy/exceptions.py": {},
    "moneypy-master/moneypy/messages.py": {},
    "moneypy-master/moneypy/money.py": {
        "Money.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "Dict[str,str]",
                    "str"
                ],
                "currency": [
                    "bool",
                    "Dict",
                    "int"
                ],
                "precision": [
                    "Text",
                    "int",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "Money.amount": {
            "name": "amount",
            "location": 30,
            "return": [
                "Sequence[int]",
                "int",
                "bytes",
                "dict",
                "List[List[int]]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.currency": {
            "name": "currency",
            "location": 34,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money._to_decimal": {
            "name": "_to_decimal",
            "location": 38,
            "return": [
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float"
                ],
                "precision": [
                    "int",
                    "float"
                ]
            }
        },
        "Money._quantize": {
            "name": "_quantize",
            "location": 41,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "decimal.Decimal",
                    "int",
                    "str"
                ],
                "precision": [
                    "int",
                    "str",
                    "decimal.Decimal"
                ]
            }
        },
        "Money._validate_currency_code": {
            "name": "_validate_currency_code",
            "location": 45,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "currency_code": [
                    "str",
                    "ImportError"
                ]
            }
        },
        "Money.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__bool__": {
            "name": "__bool__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__hash__": {
            "name": "__hash__",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__pos__": {
            "name": "__pos__",
            "location": 76,
            "return": [
                "Money"
            ],
            "arguments": {
                "self": [
                    "_TMoney@@Money@@"
                ]
            }
        },
        "Money.__neg__": {
            "name": "__neg__",
            "location": 79,
            "return": [
                "Money"
            ],
            "arguments": {
                "self": [
                    "_TMoney@@Money@@"
                ]
            }
        },
        "Money.__add__": {
            "name": "__add__",
            "location": 84,
            "return": [
                "Money",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Money.__sub__": {
            "name": "__sub__",
            "location": 93,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Money.__eq__": {
            "name": "__eq__",
            "location": 98,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__ne__": {
            "name": "__ne__",
            "location": 103,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__lt__": {
            "name": "__lt__",
            "location": 108,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__le__": {
            "name": "__le__",
            "location": 113,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__gt__": {
            "name": "__gt__",
            "location": 118,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__ge__": {
            "name": "__ge__",
            "location": 123,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__mul__": {
            "name": "__mul__",
            "location": 127,
            "return": [
                "Money",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Money.__rmul__": {
            "name": "__rmul__",
            "location": 131,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]",
                "mypy.messages.MessageBuilder"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Money.__truediv__": {
            "name": "__truediv__",
            "location": 135,
            "return": [
                "Money",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Money.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 140,
            "return": [
                "Money",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Money.__floordiv__": {
            "name": "__floordiv__",
            "location": 145,
            "return": [
                "Money",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Money.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 150,
            "return": [
                "Money",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "moneypy-master/moneypy/__init__.py": {},
    "moneypy-master/tests/test_basics.py": {
        "test_money_properties": {
            "name": "test_money_properties",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Union[int,float]",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "currency": [
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ],
                "expected_amount": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_money_amount_round": {
            "name": "test_money_amount_round",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "precision": [
                    "int",
                    "List[str]",
                    "float",
                    "decimal.Decimal"
                ],
                "expected_amount": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_money_repr": {
            "name": "test_money_repr",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "List[str]",
                    "List",
                    "List[int]",
                    "float"
                ],
                "currency": [
                    "int",
                    "List[str]",
                    "List",
                    "List[int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "List[str]",
                    "List",
                    "List[int]",
                    "float"
                ]
            }
        },
        "test_money_str": {
            "name": "test_money_str",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "List[str]",
                    "float",
                    "decimal.Decimal"
                ],
                "currency": [
                    "int",
                    "List[str]",
                    "float",
                    "decimal.Decimal"
                ],
                "expected": [
                    "int",
                    "List[str]",
                    "float",
                    "decimal.Decimal"
                ]
            }
        },
        "test_currency_code_validation_should_raise_error_on_non_string": {
            "name": "test_currency_code_validation_should_raise_error_on_non_string",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "non_string_object": [
                    "int",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_currency_code_validation_should_raise_error_on_malformatted_code": {
            "name": "test_currency_code_validation_should_raise_error_on_malformatted_code",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_code": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "moneypy-master/tests/test_operations.py": {
        "test_money_bool": {
            "name": "test_money_bool",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "expected": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_money_hash__two_identical_instances_of_money_should_have_the_same_hash": {
            "name": "test_money_hash__two_identical_instances_of_money_should_have_the_same_hash",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int"
                ],
                "currency": [
                    "int"
                ]
            }
        },
        "test_money_hash__two_different_instances_of_money_should_have_different_hashes": {
            "name": "test_money_hash__two_different_instances_of_money_should_have_different_hashes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "money1": [],
                "money2": []
            }
        },
        "test_money_neg": {
            "name": "test_money_neg",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_money_pos": {
            "name": "test_money_pos",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_money_add_should_work_between_money_instances_of_the_same_currency": {
            "name": "test_money_add_should_work_between_money_instances_of_the_same_currency",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "int",
                    "Sequence[float]",
                    "List[int]",
                    "float"
                ],
                "amount2": [
                    "int",
                    "Sequence[float]",
                    "List[int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "float"
                ]
            }
        },
        "test_money_add_should_not_work_between_money_instances_of_different_currencies": {
            "name": "test_money_add_should_not_work_between_money_instances_of_different_currencies",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_money_add_should_not_work_with_instances_of_other_types": {
            "name": "test_money_add_should_not_work_with_instances_of_other_types",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "non_money_object": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_money_subtract_should_work_between_money_instances_of_the_same_currency": {
            "name": "test_money_subtract_should_work_between_money_instances_of_the_same_currency",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "int",
                    "Sequence[float]",
                    "List[int]",
                    "float"
                ],
                "amount2": [
                    "int",
                    "Sequence[float]",
                    "List[int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_money_subtract_should_not_work_between_money_instances_of_different_currencies": {
            "name": "test_money_subtract_should_not_work_between_money_instances_of_different_currencies",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_money_subtract_should_not_work_with_instances_of_other_types": {
            "name": "test_money_subtract_should_not_work_with_instances_of_other_types",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "non_money_object": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_multiplying_with_factors_of_money_and_int_or_decimal_should_work": {
            "name": "test_multiplying_with_factors_of_money_and_int_or_decimal_should_work",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "to_type": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "money_amount": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "None"
                ],
                "multiplier": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "expected_amount": [
                    "str",
                    "int",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "Sequence[int]",
                    "Dict[str,dict[str,str]]",
                    "bool",
                    "Dict[str,Dict[str,str]]"
                ]
            }
        },
        "test_multiplying_with_factors_of_money_and_decimal_should_work_with_proper_rounding": {
            "name": "test_multiplying_with_factors_of_money_and_decimal_should_work_with_proper_rounding",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "money_amount": [
                    "str",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ],
                "multiplier": [
                    "str",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ],
                "expected_amount": [
                    "str",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ],
                "precision": [
                    "str",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ]
            }
        },
        "test_multiplying_with_factors_of_money_and_not_int_or_decimal_should_not_work": {
            "name": "test_multiplying_with_factors_of_money_and_not_int_or_decimal_should_not_work",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "other": [
                    "float",
                    "int"
                ]
            }
        },
        "test_true_dividing_money_by_int_or_decimal_should_work_with_proper_rounding": {
            "name": "test_true_dividing_money_by_int_or_decimal_should_work_with_proper_rounding",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "to_type": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool",
                    "int",
                    "property"
                ],
                "dividends_amount": [
                    "str",
                    "bool",
                    "List",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "divisor": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool",
                    "int",
                    "property"
                ],
                "expected_amount": [
                    "str",
                    "Union[str,int]",
                    "int",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "test_true_dividing_int_or_decimal_by_money_should_work_with_proper_rounding": {
            "name": "test_true_dividing_int_or_decimal_by_money_should_work_with_proper_rounding",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "to_type": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dividend": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "divisors_amount": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[str]",
                    "List[str]",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "expected_amount": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_floor_dividing_money_by_int_or_decimal_should_work_with_proper_rounding": {
            "name": "test_floor_dividing_money_by_int_or_decimal_should_work_with_proper_rounding",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "to_type": [
                    "str",
                    "List",
                    "Set[str]"
                ],
                "dividends_amount": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "bool",
                    "None",
                    "Union[str,float]",
                    "float"
                ],
                "divisor": [
                    "str",
                    "List",
                    "Set[str]"
                ],
                "expected_amount": [
                    "Tuple[Union[str,str]]",
                    "str",
                    "Tuple[str,str]",
                    "int",
                    "Sequence[int]",
                    "bytes",
                    "Dict[str,dict[str,str]]",
                    "bool",
                    "Dict[str,Dict[str,str]]"
                ],
                "precision": [
                    "int",
                    "Set",
                    "str",
                    "Iterable[Tuple[str,dict]]",
                    "bool"
                ]
            }
        },
        "test_floor_dividing_int_or_decimal_by_money_should_work_with_proper_rounding": {
            "name": "test_floor_dividing_int_or_decimal_by_money_should_work_with_proper_rounding",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "to_type": [
                    "str",
                    "int",
                    "Dict"
                ],
                "dividend": [
                    "str",
                    "int",
                    "Dict"
                ],
                "divisors_amount": [
                    "int",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "expected_amount": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "precision": [
                    "bool"
                ]
            }
        },
        "test_money_true_and_floor_dividing_should_not_work_with_instances_of_other_types_than_int_and_decimal": {
            "name": "test_money_true_and_floor_dividing_should_not_work_with_instances_of_other_types_than_int_and_decimal",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "str"
                ],
                "other": [
                    "str"
                ]
            }
        },
        "test_money_comparison_operators_should_not_fail_between_money_instances_of_the_same_currency": {
            "name": "test_money_comparison_operators_should_not_fail_between_money_instances_of_the_same_currency",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "str",
                    "float"
                ]
            }
        },
        "test_money_comparison_operators_should_fail_between_money_instances_of_different_currencies": {
            "name": "test_money_comparison_operators_should_fail_between_money_instances_of_different_currencies",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "Type",
                    "Dict"
                ]
            }
        },
        "test_money_comparison_operators_should_fail_with_instances_of_other_types": {
            "name": "test_money_comparison_operators_should_fail_with_instances_of_other_types",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "non_money_object": [],
                "operator": []
            }
        },
        "test_eq": {
            "name": "test_eq",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "None",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "test_ne": {
            "name": "test_ne",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "int",
                    "str",
                    "TextIO"
                ],
                "amount2": [
                    "int",
                    "str",
                    "TextIO"
                ],
                "precision": [
                    "int",
                    "str"
                ]
            }
        },
        "test_lt": {
            "name": "test_lt",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "int"
                ],
                "amount2": [
                    "int"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "test_lte": {
            "name": "test_lte",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "str",
                    "TextIO"
                ],
                "amount2": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "test_gt": {
            "name": "test_gt",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "int"
                ],
                "amount2": [
                    "int"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "test_ge": {
            "name": "test_ge",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "amount1": [
                    "str",
                    "TextIO"
                ],
                "amount2": [
                    "str",
                    "TextIO"
                ]
            }
        }
    },
    "moneypy-master/tests/__init__.py": {}
}
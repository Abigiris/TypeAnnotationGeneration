{
    "monkey-py-master/main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkey-py-master/monkey/ast.py": {
        "Modify": {
            "name": "Modify",
            "location": 490,
            "return": [
                "Node"
            ],
            "arguments": {
                "node": [
                    "Node"
                ],
                "modifier": [
                    "Callable[([Node], Node)]"
                ]
            }
        },
        "Node.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.String": {
            "name": "String",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.statementNode": {
            "name": "statementNode",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statement.String": {
            "name": "String",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.node": {
            "name": "node",
            "location": 27,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.expressionNode": {
            "name": "expressionNode",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.String": {
            "name": "String",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.String": {
            "name": "String",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.node": {
            "name": "node",
            "location": 57,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.expressionNode": {
            "name": "expressionNode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.String": {
            "name": "String",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetStatement.node": {
            "name": "node",
            "location": 77,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetStatement.statementNode": {
            "name": "statementNode",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetStatement.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetStatement.String": {
            "name": "String",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.node": {
            "name": "node",
            "location": 106,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.statementNode": {
            "name": "statementNode",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.String": {
            "name": "String",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.node": {
            "name": "node",
            "location": 133,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.statementNode": {
            "name": "statementNode",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.String": {
            "name": "String",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.node": {
            "name": "node",
            "location": 155,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.String": {
            "name": "String",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.node": {
            "name": "node",
            "location": 175,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.expressionNode": {
            "name": "expressionNode",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.String": {
            "name": "String",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.node": {
            "name": "node",
            "location": 202,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.expressionNode": {
            "name": "expressionNode",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.String": {
            "name": "String",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.node": {
            "name": "node",
            "location": 229,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.expressionNode": {
            "name": "expressionNode",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.String": {
            "name": "String",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.node": {
            "name": "node",
            "location": 248,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.expressionNode": {
            "name": "expressionNode",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.String": {
            "name": "String",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.node": {
            "name": "node",
            "location": 272,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.expressionNode": {
            "name": "expressionNode",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.String": {
            "name": "String",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.node": {
            "name": "node",
            "location": 300,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.String": {
            "name": "String",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.node": {
            "name": "node",
            "location": 329,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.expressionNode": {
            "name": "expressionNode",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.String": {
            "name": "String",
            "location": 338,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.node": {
            "name": "node",
            "location": 356,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.String": {
            "name": "String",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayLiteral.node": {
            "name": "node",
            "location": 375,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 381,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayLiteral.String": {
            "name": "String",
            "location": 384,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexExpression.node": {
            "name": "node",
            "location": 405,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexExpression.expressionNode": {
            "name": "expressionNode",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexExpression.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 411,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexExpression.String": {
            "name": "String",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashLiteral.node": {
            "name": "node",
            "location": 432,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashLiteral.String": {
            "name": "String",
            "location": 441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacroLiteral.node": {
            "name": "node",
            "location": 462,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacroLiteral.expressionNode": {
            "name": "expressionNode",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacroLiteral.TokenLiteral": {
            "name": "TokenLiteral",
            "location": 468,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacroLiteral.String": {
            "name": "String",
            "location": 471,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/monkey/evaluator.py": {
        "Eval": {
            "name": "Eval",
            "location": 11,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "node": [],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalStatements": {
            "name": "evalStatements",
            "location": 104,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "stmts": [
                    "List[ast.Statement]"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalPrefixExpression": {
            "name": "evalPrefixExpression",
            "location": 115,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "right": [
                    "object.Object"
                ]
            }
        },
        "evalBangOperatorExpression": {
            "name": "evalBangOperatorExpression",
            "location": 124,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "right": [
                    "Optional[object.Object]"
                ]
            }
        },
        "evalMinusPrefixOperatorExpression": {
            "name": "evalMinusPrefixOperatorExpression",
            "location": 135,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "right": [
                    "Optional[object.Object]"
                ]
            }
        },
        "evalInfixExpression": {
            "name": "evalInfixExpression",
            "location": 145,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "left": [
                    "object.Object"
                ],
                "right": [
                    "object.Object"
                ]
            }
        },
        "evalIntegerInfixExpression": {
            "name": "evalIntegerInfixExpression",
            "location": 162,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "left": [
                    "object.Object"
                ],
                "right": [
                    "object.Object"
                ]
            }
        },
        "evalStringInfixExpression": {
            "name": "evalStringInfixExpression",
            "location": 187,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "operator": [
                    "str"
                ],
                "left": [
                    "object.Object"
                ],
                "right": [
                    "object.Object"
                ]
            }
        },
        "evalIfExpression": {
            "name": "evalIfExpression",
            "location": 198,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "ie": [
                    "ast.IfExpression"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalProgram": {
            "name": "evalProgram",
            "location": 222,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "program": [
                    "ast.Program"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalBlockStatement": {
            "name": "evalBlockStatement",
            "location": 235,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "block": [
                    "ast.BlockStatement"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalIdentifier": {
            "name": "evalIdentifier",
            "location": 249,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "node": [
                    "ast.Identifier"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalExpressions": {
            "name": "evalExpressions",
            "location": 261,
            "return": [
                "List[object.Object]"
            ],
            "arguments": {
                "exps": [
                    "List[ast.Expression]"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalIndexExpression": {
            "name": "evalIndexExpression",
            "location": 274,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "left": [
                    "object.Object"
                ],
                "index": [
                    "object.Object"
                ]
            }
        },
        "evalArrayIndexExpression": {
            "name": "evalArrayIndexExpression",
            "location": 289,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "array": [
                    "object.Object"
                ],
                "index": [
                    "object.Object"
                ]
            }
        },
        "evalHashLiteral": {
            "name": "evalHashLiteral",
            "location": 300,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "node": [
                    "ast.HashLiteral"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalHashIndexExpression": {
            "name": "evalHashIndexExpression",
            "location": 327,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "hash": [
                    "object.Object"
                ],
                "index": [
                    "object.Object"
                ]
            }
        },
        "applyFunction": {
            "name": "applyFunction",
            "location": 344,
            "return": [
                "Optional[object.Object]"
            ],
            "arguments": {
                "fn": [
                    "object.Object"
                ],
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "quote": {
            "name": "quote",
            "location": 363,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "node": [
                    "ast.Node"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "evalUnquoteCalls": {
            "name": "evalUnquoteCalls",
            "location": 368,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "quoted": [
                    "ast.Node"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "isUnquoteCall": {
            "name": "isUnquoteCall",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "ast.Node"
                ]
            }
        },
        "convertObjectToASTNode": {
            "name": "convertObjectToASTNode",
            "location": 398,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "obj": [
                    "object.Object"
                ]
            }
        },
        "extendFunctionEnv": {
            "name": "extendFunctionEnv",
            "location": 417,
            "return": [
                "object.Environment"
            ],
            "arguments": {
                "fn": [
                    "object.Function"
                ],
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "unwrapReturnValue": {
            "name": "unwrapReturnValue",
            "location": 426,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "obj": [
                    "object.Object"
                ]
            }
        },
        "isTruthy": {
            "name": "isTruthy",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "object.Object"
                ]
            }
        },
        "isError": {
            "name": "isError",
            "location": 444,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "object.Object"
                ]
            }
        },
        "nativeBoolToBooleanObject": {
            "name": "nativeBoolToBooleanObject",
            "location": 451,
            "return": [
                "object.Boolean"
            ],
            "arguments": {
                "input": [
                    "bool"
                ]
            }
        },
        "newError": {
            "name": "newError",
            "location": 455,
            "return": [
                "object.Error"
            ],
            "arguments": {
                "template": [
                    "str"
                ],
                "a": [
                    "tuple"
                ]
            }
        },
        "builtin_len": {
            "name": "builtin_len",
            "location": 459,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "builtin_first": {
            "name": "builtin_first",
            "location": 473,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "builtin_last": {
            "name": "builtin_last",
            "location": 488,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "builtin_rest": {
            "name": "builtin_rest",
            "location": 504,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "builtin_push": {
            "name": "builtin_push",
            "location": 521,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "builtin_puts": {
            "name": "builtin_puts",
            "location": 537,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "args": [
                    "List[object.Object]"
                ]
            }
        },
        "DefineMacros": {
            "name": "DefineMacros",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "ast.Program"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "isMacroDefinition": {
            "name": "isMacroDefinition",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "ast.Statement"
                ]
            }
        },
        "addMacro": {
            "name": "addMacro",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "stmt": [
                    "ast.Statement"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "ExpandMacros": {
            "name": "ExpandMacros",
            "location": 594,
            "return": [
                "ast.Node"
            ],
            "arguments": {
                "program": [
                    "ast.Node"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "isMacroCall": {
            "name": "isMacroCall",
            "location": 617,
            "return": [
                "Optional[object.Macro]"
            ],
            "arguments": {
                "exp": [
                    "ast.CallExpression"
                ],
                "env": [
                    "object.Environment"
                ]
            }
        },
        "quoteArgs": {
            "name": "quoteArgs",
            "location": 633,
            "return": [
                "List[object.Quote]"
            ],
            "arguments": {
                "exp": [
                    "ast.CallExpression"
                ]
            }
        },
        "extendMacroEnv": {
            "name": "extendMacroEnv",
            "location": 640,
            "return": [
                "object.Environment"
            ],
            "arguments": {
                "macro": [
                    "object.Macro"
                ],
                "args": [
                    "List[object.Quote]"
                ]
            }
        },
        "evalUnquoteCalls.x": {
            "name": "x",
            "location": 369,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ExpandMacros.f": {
            "name": "f",
            "location": 595,
            "return": [
                "ast_@_CallExpression"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "monkey-py-master/monkey/lexer.py": {
        "New": {
            "name": "New",
            "location": 130,
            "return": [
                "Lexer"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "Lexer.readChar": {
            "name": "readChar",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.NextToken": {
            "name": "NextToken",
            "location": 21,
            "return": [
                "token.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.newToken": {
            "name": "newToken",
            "location": 90,
            "return": [
                "token.Token"
            ],
            "arguments": {
                "self": [],
                "tokenType": [
                    "token.TokenType"
                ],
                "ch": [
                    "str"
                ]
            }
        },
        "Lexer.readIdentifier": {
            "name": "readIdentifier",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.isLetter": {
            "name": "isLetter",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ch": [
                    "str"
                ]
            }
        },
        "Lexer.skipWhitespace": {
            "name": "skipWhitespace",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.readNumber": {
            "name": "readNumber",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.readString": {
            "name": "readString",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.isDigit": {
            "name": "isDigit",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ch": [
                    "str"
                ]
            }
        },
        "Lexer.peekChar": {
            "name": "peekChar",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/monkey/object.py": {
        "GetHashKey": {
            "name": "GetHashKey",
            "location": 191,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "GetHashKeyBoolean": {
            "name": "GetHashKeyBoolean",
            "location": 196,
            "return": [
                "HashKey",
                "dict",
                "Dict[str, str]",
                "Union[type, Tuple[type, ...]]",
                "List[str]"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "Sized",
                    "typing.Sized"
                ]
            }
        },
        "GetHashKeyInteger": {
            "name": "GetHashKeyInteger",
            "location": 202,
            "return": [
                "HashKey",
                "bool",
                "str"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "GetHashKeyString": {
            "name": "GetHashKeyString",
            "location": 207,
            "return": [
                "HashKey",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GetHashPair": {
            "name": "GetHashPair",
            "location": 243,
            "return": [
                "Optional[HashPair]"
            ],
            "arguments": {
                "hash": [
                    "Hash"
                ],
                "key": [
                    "HashKey"
                ]
            }
        },
        "NewEnvironment": {
            "name": "NewEnvironment",
            "location": 309,
            "return": [
                "Environment"
            ],
            "arguments": {}
        },
        "NewEnclosedEnvironment": {
            "name": "NewEnclosedEnvironment",
            "location": 314,
            "return": [
                "Environment"
            ],
            "arguments": {
                "outer": [
                    "Environment"
                ]
            }
        },
        "Object.Type": {
            "name": "Type",
            "location": 33,
            "return": [
                "ObjectType",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Inspect": {
            "name": "Inspect",
            "location": 38,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyObject.Type": {
            "name": "Type",
            "location": 47,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyObject.Inspect": {
            "name": "Inspect",
            "location": 51,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.Type": {
            "name": "Type",
            "location": 60,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.Inspect": {
            "name": "Inspect",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.Type": {
            "name": "Type",
            "location": 73,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.Inspect": {
            "name": "Inspect",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.Type": {
            "name": "Type",
            "location": 86,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.Inspect": {
            "name": "Inspect",
            "location": 90,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.Type": {
            "name": "Type",
            "location": 99,
            "return": [
                "ObjectType",
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.Inspect": {
            "name": "Inspect",
            "location": 103,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.Type": {
            "name": "Type",
            "location": 112,
            "return": [
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.Inspect": {
            "name": "Inspect",
            "location": 116,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.Type": {
            "name": "Type",
            "location": 127,
            "return": [
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.Inspect": {
            "name": "Inspect",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.Type": {
            "name": "Type",
            "location": 153,
            "return": [
                "ObjectType",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.Inspect": {
            "name": "Inspect",
            "location": 157,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.Type": {
            "name": "Type",
            "location": 166,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.Inspect": {
            "name": "Inspect",
            "location": 170,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.Type": {
            "name": "Type",
            "location": 225,
            "return": [
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.Inspect": {
            "name": "Inspect",
            "location": 229,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.Type": {
            "name": "Type",
            "location": 263,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.Inspect": {
            "name": "Inspect",
            "location": 267,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builtin.Type": {
            "name": "Type",
            "location": 285,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builtin.Inspect": {
            "name": "Inspect",
            "location": 289,
            "return": [
                "typing.Text",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.Get": {
            "name": "Get",
            "location": 298,
            "return": [
                "Optional[Object]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Environment.Set": {
            "name": "Set",
            "location": 304,
            "return": [
                "Object"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "val": [
                    "Object"
                ]
            }
        },
        "Macro.Type": {
            "name": "Type",
            "location": 327,
            "return": [
                "Callable[[T], T]",
                "ObjectType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.Inspect": {
            "name": "Inspect",
            "location": 331,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/monkey/parser.py": {
        "New": {
            "name": "New",
            "location": 429,
            "return": [
                "Parser"
            ],
            "arguments": {
                "lex": [
                    "lexer.Lexer"
                ]
            }
        },
        "Parser.nextToken": {
            "name": "nextToken",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.ParseProgram": {
            "name": "ParseProgram",
            "location": 49,
            "return": [
                "ast.Program"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseStatement": {
            "name": "parseStatement",
            "location": 60,
            "return": [
                "Optional[ast.Statement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseLetStatement": {
            "name": "parseLetStatement",
            "location": 68,
            "return": [
                "Optional[ast.LetStatement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseReturnStatement": {
            "name": "parseReturnStatement",
            "location": 92,
            "return": [
                "Optional[ast.ReturnStatement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseExpressionStatement": {
            "name": "parseExpressionStatement",
            "location": 109,
            "return": [
                "Optional[ast.ExpressionStatement]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseExpression": {
            "name": "parseExpression",
            "location": 118,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "precedence": [
                    "int"
                ]
            }
        },
        "Parser.parseIdentifier": {
            "name": "parseIdentifier",
            "location": 134,
            "return": [
                "ast.Expression"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseIntegerLiteral": {
            "name": "parseIntegerLiteral",
            "location": 137,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parsePrefixExpression": {
            "name": "parsePrefixExpression",
            "location": 147,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseInfixExpression": {
            "name": "parseInfixExpression",
            "location": 155,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast.Expression"
                ]
            }
        },
        "Parser.parseBoolean": {
            "name": "parseBoolean",
            "location": 168,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseGroupedExpression": {
            "name": "parseGroupedExpression",
            "location": 171,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseIfExpression": {
            "name": "parseIfExpression",
            "location": 181,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseBlockStatement": {
            "name": "parseBlockStatement",
            "location": 216,
            "return": [
                "ast.BlockStatement"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseFunctionLiteral": {
            "name": "parseFunctionLiteral",
            "location": 231,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseFunctionParameters": {
            "name": "parseFunctionParameters",
            "location": 246,
            "return": [
                "List[ast.Identifier]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseCallExpression": {
            "name": "parseCallExpression",
            "location": 269,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "ast.Expression"
                ]
            }
        },
        "Parser.parseCallArguments": {
            "name": "parseCallArguments",
            "location": 274,
            "return": [
                "List[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseStringLiteral": {
            "name": "parseStringLiteral",
            "location": 298,
            "return": [
                "ast.Expression"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseArrayLiteral": {
            "name": "parseArrayLiteral",
            "location": 301,
            "return": [
                "ast.Expression"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseExpressionList": {
            "name": "parseExpressionList",
            "location": 306,
            "return": [
                "List[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.parseIndexExpression": {
            "name": "parseIndexExpression",
            "location": 330,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "ast.Expression"
                ]
            }
        },
        "Parser.parseHashLiteral": {
            "name": "parseHashLiteral",
            "location": 345,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseMacroLiteral": {
            "name": "parseMacroLiteral",
            "location": 370,
            "return": [
                "Optional[ast.Expression]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.curTokenIs": {
            "name": "curTokenIs",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.peekTokenIs": {
            "name": "peekTokenIs",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.expectPeek": {
            "name": "expectPeek",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.Errors": {
            "name": "Errors",
            "location": 397,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.peekError": {
            "name": "peekError",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.registerPrefix": {
            "name": "registerPrefix",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenType": [
                    "token.TokenType"
                ],
                "fn": [
                    "Callable[([], Optional[ast.Expression])]"
                ]
            }
        },
        "Parser.registerInfix": {
            "name": "registerInfix",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenType": [
                    "token.TokenType"
                ],
                "fn": [
                    "Callable[([ast.Expression], Optional[ast.Expression])]"
                ]
            }
        },
        "Parser.noPrefixParseFnError": {
            "name": "noPrefixParseFnError",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "token.TokenType"
                ]
            }
        },
        "Parser.peekPrecedence": {
            "name": "peekPrecedence",
            "location": 414,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.curPrecedence": {
            "name": "curPrecedence",
            "location": 421,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/monkey/repl.py": {
        "Start": {
            "name": "Start",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "printParserErrors": {
            "name": "printParserErrors",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "errors": [
                    "List[str]"
                ]
            }
        }
    },
    "monkey-py-master/monkey/token.py": {
        "LookupIdent": {
            "name": "LookupIdent",
            "location": 72,
            "return": [
                "TokenType"
            ],
            "arguments": {
                "ident": [
                    "str"
                ]
            }
        }
    },
    "monkey-py-master/monkey/__init__.py": {},
    "monkey-py-master/tests/test_ast.py": {
        "TestAst.test_string": {
            "name": "test_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_modify": {
            "name": "test_modify",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_modify.turnOneIntoTwo": {
            "name": "turnOneIntoTwo",
            "location": 28,
            "return": [
                "bytes",
                "ast_@_IntegerLiteral"
            ],
            "arguments": {
                "node": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "monkey-py-master/tests/test_evaluator.py": {
        "testParseProgram": {
            "name": "testParseProgram",
            "location": 535,
            "return": [
                "ast.Program"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "testNullObject": {
            "name": "testNullObject",
            "location": 541,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object.Object"
                ]
            }
        },
        "testEval": {
            "name": "testEval",
            "location": 548,
            "return": [
                "object.Object"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "testIntegerObject": {
            "name": "testIntegerObject",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object.Object"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "testBooleanObject": {
            "name": "testBooleanObject",
            "location": 569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object.Object"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "TestEvaluator.test_eval_integer_expression": {
            "name": "test_eval_integer_expression",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_eval_boolean_expression": {
            "name": "test_eval_boolean_expression",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_bang_operator": {
            "name": "test_bang_operator",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_if_else_expressions": {
            "name": "test_if_else_expressions",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_return_statements": {
            "name": "test_return_statements",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_error_handling": {
            "name": "test_error_handling",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_let_statements": {
            "name": "test_let_statements",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_function_object": {
            "name": "test_function_object",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_function_application": {
            "name": "test_function_application",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_closures": {
            "name": "test_closures",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_string_literal": {
            "name": "test_string_literal",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_builtin_functions": {
            "name": "test_builtin_functions",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_array_literals": {
            "name": "test_array_literals",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_array_index_expressions": {
            "name": "test_array_index_expressions",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_empty": {
            "name": "test_empty",
            "location": 318,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_hash_literals": {
            "name": "test_hash_literals",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_hash_index_expressions": {
            "name": "test_hash_index_expressions",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMacro.test_quote": {
            "name": "test_quote",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMacro.test_quote_unquote": {
            "name": "test_quote_unquote",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefineMacros.test_define_macros": {
            "name": "test_define_macros",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpandMacros.test_expand_macros": {
            "name": "test_expand_macros",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/tests/test_lexer.py": {
        "TestLexer.test_next_token": {
            "name": "test_next_token",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/tests/test_object.py": {
        "TestObject.test_string_hash_key": {
            "name": "test_string_hash_key",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkey-py-master/tests/test_parser.py": {
        "testLetStatement": {
            "name": "testLetStatement",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "ast.Statement"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "testIntegerLiteral": {
            "name": "testIntegerLiteral",
            "location": 618,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "il": [
                    "ast.Expression"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "testIdentifier": {
            "name": "testIdentifier",
            "location": 632,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exp": [
                    "ast.Expression"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "testLiteralExpression": {
            "name": "testLiteralExpression",
            "location": 649,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exp": [
                    "ast.Expression"
                ],
                "expected": []
            }
        },
        "testInfixExpression": {
            "name": "testInfixExpression",
            "location": 661,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exp": [
                    "ast.Expression"
                ],
                "left": [],
                "operator": [
                    "str"
                ],
                "right": []
            }
        },
        "testBooleanLietral": {
            "name": "testBooleanLietral",
            "location": 680,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exp": [
                    "ast.Expression"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "checkParserErrors": {
            "name": "checkParserErrors",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "parser.Parser"
                ]
            }
        },
        "TestParser.test_return_statetments": {
            "name": "test_return_statetments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_let_statements": {
            "name": "test_let_statements",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_identifier_expression": {
            "name": "test_identifier_expression",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_integer_literal_expression": {
            "name": "test_integer_literal_expression",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_prefix_expressions": {
            "name": "test_parsing_prefix_expressions",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_infix_expressions": {
            "name": "test_parsing_infix_expressions",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_operator_precedence_parsing": {
            "name": "test_operator_precedence_parsing",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_boolean_expression": {
            "name": "test_boolean_expression",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_if_expression": {
            "name": "test_if_expression",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_if_else_expression": {
            "name": "test_if_else_expression",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_function_literal_parsing": {
            "name": "test_function_literal_parsing",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_function_parameter_parsing": {
            "name": "test_function_parameter_parsing",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_call_expression_parsing": {
            "name": "test_call_expression_parsing",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_string_literal_expression": {
            "name": "test_string_literal_expression",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_array_literals": {
            "name": "test_parsing_array_literals",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_index_expressions": {
            "name": "test_parsing_index_expressions",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_hash_literals_string_keys": {
            "name": "test_parsing_hash_literals_string_keys",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parsing_hash_literals_with_expressions": {
            "name": "test_parsing_hash_literals_with_expressions",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_macro_literal_parsing": {
            "name": "test_macro_literal_parsing",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
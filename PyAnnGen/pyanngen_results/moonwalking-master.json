{
    "moonwalking-master/setup.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "requirements": {
            "name": "requirements",
            "location": 15,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/main.py": {
        "Dummycoin.validate_addr": {
            "name": "validate_addr",
            "location": 53,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Dummycoin.create_addr": {
            "name": "create_addr",
            "location": 57,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummycoin.sign_tx": {
            "name": "sign_tx",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "priv": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tx": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Bitcoin.validate_addr": {
            "name": "validate_addr",
            "location": 108,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ]
            }
        },
        "Litecoin.validate_addr": {
            "name": "validate_addr",
            "location": 133,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ]
            }
        },
        "BitcoinCash.validate_addr": {
            "name": "validate_addr",
            "location": 152,
            "return": [
                "eth.chains.base.MiningChain",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ]
            }
        },
        "BitcoinCash.sign_tx": {
            "name": "sign_tx",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "priv": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tx": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BitcoinCash.create_addr": {
            "name": "create_addr",
            "location": 205,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinCash.calc_fee": {
            "name": "calc_fee",
            "location": 210,
            "return": [
                "int",
                "List[float]",
                "float"
            ],
            "arguments": {
                "n_in": [
                    "int"
                ],
                "n_out": [
                    "int"
                ]
            }
        },
        "BitcoinCash.to_legacy_address": {
            "name": "to_legacy_address",
            "location": 241,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "BitcoinCash.normalize_decimal": {
            "name": "normalize_decimal",
            "location": 245,
            "return": [
                "int",
                "float",
                "Optional[bytes]",
                "dict",
                "bool",
                "Optional[abilian.core.models.Model]"
            ],
            "arguments": {
                "d": [
                    "AbstractSet[int]"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/settings.py": {},
    "moonwalking-master/moonwalking/testing.py": {
        "private_key_to_checksum_address": {
            "name": "private_key_to_checksum_address",
            "location": 8,
            "return": [
                "bool",
                "bytes",
                "Optional[Any]",
                "Mapping",
                "List[Callable]",
                "Iterable[Tuple[str, dict]]",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/utils.py": {
        "rand_str": {
            "name": "rand_str",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/wallets.py": {
        "block": {
            "name": "block",
            "location": 4,
            "return": [
                "moonwalking.blocks.base.BaseBlock"
            ],
            "arguments": {
                "currency": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ]
            }
        },
        "validate_addr": {
            "name": "validate_addr",
            "location": 11,
            "return": [
                "bool",
                "str",
                "Hashable"
            ],
            "arguments": {
                "currency": [
                    "str",
                    "Union[int,str]",
                    "int"
                ],
                "addr": [
                    "str",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "create_addr": {
            "name": "create_addr",
            "location": 15,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "currency": [
                    "Dict[int,int]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/__init__.py": {},
    "moonwalking-master/moonwalking/blocks/base.py": {
        "BlockBaseError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "BaseBlock.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "decimal.Decimal",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseBlock.register": {
            "name": "register",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "T"
                ]
            }
        },
        "BaseBlock.validate_addr": {
            "name": "validate_addr",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BaseBlock.sign_tx": {
            "name": "sign_tx",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "priv": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "tx": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/bitcoin_generic.py": {
        "to_string": {
            "name": "to_string",
            "location": 26,
            "return": [
                "str",
                "bool",
                "Union[str,Pattern]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BitcoinGeneric.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinGeneric.get_data": {
            "name": "get_data",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "BitcoinGeneric.create_addr": {
            "name": "create_addr",
            "location": 53,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinGeneric.calc_fee": {
            "name": "calc_fee",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BitcoinGeneric.calculate_tx_size": {
            "name": "calculate_tx_size",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "tx": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "BitcoinGeneric.sign_tx": {
            "name": "sign_tx",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "priv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/ccyhelper.py": {
        "CcyHelper.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ccy": [
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Callable",
                    "int",
                    "Union[int,Tuple[int,int]]",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]"
                ],
                "use_testnet": [
                    "bool",
                    "str"
                ]
            }
        },
        "CcyHelper.validate_addr": {
            "name": "validate_addr",
            "location": 13,
            "return": [
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "CcyHelper.validate_btc": {
            "name": "validate_btc",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ]
            }
        },
        "CcyHelper.validate_ltc": {
            "name": "validate_ltc",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ]
            }
        },
        "CcyHelper.validate_eth": {
            "name": "validate_eth",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "addr": [
                    "Type",
                    "float"
                ]
            }
        },
        "CcyHelper.validate_bch": {
            "name": "validate_bch",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "addr": [
                    "Type",
                    "float"
                ]
            }
        },
        "CcyHelper.validate_lnd": {
            "name": "validate_lnd",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "addr": [
                    "Type",
                    "float"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/eth_generic.py": {
        "EthereumGeneric.get_data": {
            "name": "get_data",
            "location": 33,
            "return": [
                "Dict[(str, Union[(list, str, _T0)])]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "EthereumGeneric.make_lnd_transfer_data": {
            "name": "make_lnd_transfer_data",
            "location": 89,
            "return": [
                "bool",
                "Tuple[int, int]",
                "int",
                "Optional[base.WhereSpec]"
            ],
            "arguments": {
                "self": [],
                "addr_to": [
                    "bool",
                    "Dict[int,dict]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "amount": [
                    "bool",
                    "Dict[int,dict]",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "EthereumGeneric.validate_addr": {
            "name": "validate_addr",
            "location": 108,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthereumGeneric.create_addr": {
            "name": "create_addr",
            "location": 112,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumGeneric.get_contract_addr": {
            "name": "get_contract_addr",
            "location": 117,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "EthereumGeneric.get_method_hash": {
            "name": "get_method_hash",
            "location": 123,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EthereumGeneric.get_addr_hash": {
            "name": "get_addr_hash",
            "location": 129,
            "return": [
                "str",
                "Text",
                "int",
                "Tuple",
                "List[str]"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "Tuple[Tuple[int,...]]"
                ]
            }
        },
        "EthereumGeneric.get_amount_hash": {
            "name": "get_amount_hash",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "EthereumGeneric.get_method_signature": {
            "name": "get_method_signature",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "method_name": [
                    "str",
                    "AnyStr",
                    "Union[List[str],str]",
                    "List[str]"
                ]
            }
        },
        "EthereumGeneric.sign_tx": {
            "name": "sign_tx",
            "location": 189,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "priv": [
                    "Dict",
                    "List",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping"
                ],
                "tx": [
                    "Dict",
                    "List",
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/exc.py": {
        "BlockBaseError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/fee.py": {
        "FeeStation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "moonwalking-master/moonwalking/blocks/__init__.py": {
        "get": {
            "name": "get",
            "location": 4,
            "return": [
                "moonwalking.blocks.base.BaseBlock"
            ],
            "arguments": {
                "ccy": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "moonwalking-master/tests/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "moonwalking-master/tests/test_bch.py": {
        "test_create_addr": {
            "name": "test_create_addr",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "fee_mocker": []
            }
        }
    },
    "moonwalking-master/tests/test_btc.py": {
        "test_create_addr": {
            "name": "test_create_addr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "fee_mocker": []
            }
        }
    },
    "moonwalking-master/tests/test_btc_mainnet.py": {},
    "moonwalking-master/tests/test_ccyhelper.py": {
        "test_ccyhelper": {
            "name": "test_ccyhelper",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "moonwalking-master/tests/test_eth.py": {
        "test_create_addr": {
            "name": "test_create_addr",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "moonwalking-master/tests/test_eth_mainnet.py": {},
    "moonwalking-master/tests/test_lnd.py": {},
    "moonwalking-master/tests/test_lnd_mainnet.py": {},
    "moonwalking-master/tests/test_ltc.py": {},
    "moonwalking-master/tests/test_ltc_mainnet.py": {},
    "moonwalking-master/tests/__init__.py": {}
}
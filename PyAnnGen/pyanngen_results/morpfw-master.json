{
    "morpfw-master/bootstrap-buildout.py": {
        "_final_version": {
            "name": "_final_version",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "parsed_version": [
                    "str",
                    "Optional[Dict]",
                    "float"
                ]
            }
        }
    },
    "morpfw-master/install-deps.py": {},
    "morpfw-master/setup.py": {},
    "morpfw-master/docs/authapp.py": {},
    "morpfw-master/docs/conf.py": {},
    "morpfw-master/docs/exampleapp.py": {
        "get_approot": {
            "name": "get_approot",
            "location": 22,
            "return": [
                "AppRoot",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "allow_all": {
            "name": "allow_all",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 33,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "get_storage": {
            "name": "get_storage",
            "location": 68,
            "return": [
                "PageStorage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 73,
            "return": [
                "PageCollection",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_model": {
            "name": "get_model",
            "location": 79,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_pagemodel_statemachine": {
            "name": "get_pagemodel_statemachine",
            "location": 94,
            "return": [
                "PageStateMachine",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "allow_collection_all": {
            "name": "allow_collection_all",
            "location": 99,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[[int, str], bool]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "context": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "allow_model_all": {
            "name": "allow_model_all",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "context": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ]
            }
        },
        "get_typeinfo": {
            "name": "get_typeinfo",
            "location": 111,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,PageSchema,PageCollection,PageModel]]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "AppRoot.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "morpfw-master/docs/_code/aggregateprovider.py": {
        "get_aggregateprovider": {
            "name": "get_aggregateprovider",
            "location": 17,
            "return": [
                "PagesAggregateProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "PagesAggregateProvider.aggregate": {
            "name": "aggregate",
            "location": 9,
            "return": [
                "list",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]",
                    "Union[None, list, tuple]"
                ],
                "group": [
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]",
                    "Union[None, list, tuple]"
                ],
                "order_by": [
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]",
                    "Union[None, list, tuple]"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/app.py": {
        "get_approot": {
            "name": "get_approot",
            "location": 17,
            "return": [
                "AppRoot",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "allow_all": {
            "name": "allow_all",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 28,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "AppRoot.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "morpfw-master/docs/_code/async_subscribe.py": {
        "get_root": {
            "name": "get_root",
            "location": 18,
            "return": [
                "Root"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 26,
            "return": [
                "list",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "handler1": {
            "name": "handler1",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request_options": [
                    "str"
                ],
                "obj": [
                    "Exception"
                ]
            }
        },
        "handler2": {
            "name": "handler2",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request_options": [
                    "str"
                ],
                "obj": [
                    "Exception"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/make_request.py": {},
    "morpfw-master/docs/_code/page.py": {
        "get_storage": {
            "name": "get_storage",
            "location": 39,
            "return": [
                "PageStorage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 44,
            "return": [
                "PageCollection",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_model": {
            "name": "get_model",
            "location": 50,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "allow_collection_all": {
            "name": "allow_collection_all",
            "location": 56,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[[int, str], bool]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "context": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "allow_model_all": {
            "name": "allow_model_all",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "context": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ]
            }
        },
        "get_typeinfo": {
            "name": "get_typeinfo",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,PageSchema,PageCollection,PageModel]]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/rulesprovider.py": {
        "get_rulesprovider": {
            "name": "get_rulesprovider",
            "location": 14,
            "return": [
                "PageRulesProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_value_offset": {
            "name": "get_value_offset",
            "location": 19,
            "return": [
                "int",
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "str",
                    "Tuple[bool, str]"
                ],
                "request": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "PageRulesProvider.calculate_value_offset": {
            "name": "calculate_value_offset",
            "location": 9,
            "return": [
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/docs/_code/scheduler.py": {
        "get_root": {
            "name": "get_root",
            "location": 17,
            "return": [
                "Root"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "run_5_secs": {
            "name": "run_5_secs",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request_options": [
                    "bytes"
                ]
            }
        },
        "run_every_1_minute": {
            "name": "run_every_1_minute",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request_options": [
                    "bytes"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/searchprovider.py": {
        "get_searchprovider": {
            "name": "get_searchprovider",
            "location": 17,
            "return": [
                "PagesSearchProvider",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Tuple[int]"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Tuple[int]"
                ]
            }
        },
        "PagesSearchProvider.search": {
            "name": "search",
            "location": 9,
            "return": [
                "list",
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ],
                "offset": [
                    "int",
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ],
                "limit": [
                    "None",
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ],
                "order_by": [
                    "None",
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/signalexample.py": {
        "handle_create": {
            "name": "handle_create",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "context": [
                    "int"
                ],
                "signal": [
                    "int"
                ]
            }
        },
        "handle_update": {
            "name": "handle_update",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "context": [
                    "int"
                ],
                "signal": [
                    "int"
                ]
            }
        },
        "handle_deleted": {
            "name": "handle_deleted",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [],
                "context": [],
                "signal": []
            }
        }
    },
    "morpfw-master/docs/_code/signalpublish.py": {
        "dispatch": {
            "name": "dispatch",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ],
                "context": [
                    "Dict[str, Any]"
                ]
            }
        },
        "handle_signal": {
            "name": "handle_signal",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "context": [
                    "bool"
                ],
                "signal": [
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/statemachine.py": {
        "get_pagemodel_statemachine": {
            "name": "get_pagemodel_statemachine",
            "location": 19,
            "return": [
                "PageStateMachine",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/docs/_code/xattr.py": {
        "get_xattrprovider": {
            "name": "get_xattrprovider",
            "location": 23,
            "return": [
                "PageXattrProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/docs/_http/page-blobs-post.py": {},
    "morpfw-master/docs/_http/pages-aggregate-get.py": {},
    "morpfw-master/docs/_http/pages-search-get.py": {},
    "morpfw-master/morpfw/alembic.py": {
        "_load_engines": {
            "name": "_load_engines",
            "location": 12,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Config",
                    "Union[str, dict]",
                    "Dict[str, bool]",
                    "Mapping"
                ]
            }
        },
        "drop_all": {
            "name": "drop_all",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/app.py": {
        "BaseApp.all_migration_scripts": {
            "name": "all_migration_scripts",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "BaseApp.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/colander.py": {
        "EncryptedExportField.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fernet_key": [
                    "str"
                ]
            }
        },
        "EncryptedExportField.serialize": {
            "name": "serialize",
            "location": 15,
            "return": [
                "bool",
                "colander_@_null"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ],
                "appstruct": [
                    "Tuple[object]"
                ]
            }
        },
        "EncryptedExportField.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [
                "colander_@_null",
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ],
                "cstruct": [
                    "Tuple[object]"
                ]
            }
        },
        "EncryptedStoreField.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fernet_key": [
                    "str"
                ]
            }
        },
        "EncryptedStoreField.serialize": {
            "name": "serialize",
            "location": 46,
            "return": [
                "colander_@_null",
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ],
                "appstruct": [
                    "Tuple[object]"
                ]
            }
        },
        "EncryptedStoreField.deserialize": {
            "name": "deserialize",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ],
                "cstruct": [
                    "Tuple[object]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/directive.py": {},
    "morpfw-master/morpfw/exc.py": {},
    "morpfw-master/morpfw/identity.py": {
        "Identity.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "userid": [
                    "dict",
                    "Callable[..., Awaitable[dict]]"
                ]
            }
        },
        "Identity.timezone": {
            "name": "timezone",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity.is_administrator": {
            "name": "is_administrator",
            "location": 16,
            "return": [
                "List[Callable]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/interfaces.py": {
        "IDataProvider.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Type[ISchema]"
                ],
                "data": [
                    "dict"
                ],
                "storage": [
                    "IStorageBase"
                ]
            }
        },
        "IDataProvider.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "IDataProvider.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "IDataProvider.__delitem__": {
            "name": "__delitem__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "IDataProvider.setdefault": {
            "name": "setdefault",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "IDataProvider.get": {
            "name": "get",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Any]"
                ],
                "default": [
                    "None",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "IDataProvider.set": {
            "name": "set",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "T",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "T",
                    "bytes"
                ]
            }
        },
        "IDataProvider.items": {
            "name": "items",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDataProvider.keys": {
            "name": "keys",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDataProvider.as_dict": {
            "name": "as_dict",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDataProvider.as_json": {
            "name": "as_json",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDataProvider._is_json_type": {
            "name": "_is_json_type",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[T, Sequence[T]]",
                    "float",
                    "str"
                ]
            }
        },
        "IBlob.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "Optional[str]"
                ],
                "size": [
                    "Optional[int]"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "IBlob.open": {
            "name": "open",
            "location": 99,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBlob.get_size": {
            "name": "get_size",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBlob.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "webob.Response",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "dict"
                ]
            }
        },
        "IBlobStorage.put": {
            "name": "put",
            "location": 113,
            "return": [
                "IBlob"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "fileobj": [
                    "BinaryIO"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "Optional[str]"
                ],
                "size": [
                    "Optional[int]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "uuid": [
                    "Optional[str]"
                ]
            }
        },
        "IBlobStorage.get": {
            "name": "get",
            "location": 127,
            "return": [
                "Optional[IBlob]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "IBlobStorage.delete": {
            "name": "delete",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "IStorageBase.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list",
                    "Dict[str, Any]"
                ],
                "blobstorage": [
                    "Optional[IBlobStorage]"
                ]
            }
        },
        "IStorageBase.create": {
            "name": "create",
            "location": 147,
            "return": [
                "IModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "IStorageBase.get": {
            "name": "get",
            "location": 152,
            "return": [
                "Optional[IModel]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "IStorageBase.search": {
            "name": "search",
            "location": 157,
            "return": [
                "Sequence[IModel]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "offset": [
                    "Optional[int]"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        },
        "IStorageBase.get_by_id": {
            "name": "get_by_id",
            "location": 168,
            "return": [
                "Optional[IModel]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "IStorageBase.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 173,
            "return": [
                "Optional[IModel]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "IStorageBase.update": {
            "name": "update",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ],
                "data": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "IStorageBase.delete": {
            "name": "delete",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "model": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "IStorage.aggregate": {
            "name": "aggregate",
            "location": 192,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "group": [
                    "Optional[dict]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        },
        "IModel.schema": {
            "name": "schema",
            "location": 223,
            "return": [
                "typing.Type[ISchema]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ],
                "collection": [
                    "ICollection"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "IModel.__getitem__": {
            "name": "__getitem__",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "IModel.update": {
            "name": "update",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "IModel.delete": {
            "name": "delete",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.save": {
            "name": "save",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.json": {
            "name": "json",
            "location": 277,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.links": {
            "name": "links",
            "location": 282,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.rulesprovider": {
            "name": "rulesprovider",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.statemachine": {
            "name": "statemachine",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.xattrprovider": {
            "name": "xattrprovider",
            "location": 297,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.set_initial_state": {
            "name": "set_initial_state",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.put_blob": {
            "name": "put_blob",
            "location": 307,
            "return": [
                "IBlob"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "fileobj": [
                    "BinaryIO"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "Optional[str]"
                ],
                "size": [
                    "Optional[int]"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "IModel.get_blob": {
            "name": "get_blob",
            "location": 320,
            "return": [
                "IBlob"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "IModel.delete_blob": {
            "name": "delete_blob",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "IModel.after_created": {
            "name": "after_created",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.before_update": {
            "name": "before_update",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict"
                ]
            }
        },
        "IModel.after_updated": {
            "name": "after_updated",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.before_delete": {
            "name": "before_delete",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IModel.before_blobput": {
            "name": "before_blobput",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "fileobj": [
                    "BinaryIO"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "Optional[str]"
                ],
                "size": [
                    "Optional[int]"
                ],
                "encoding": [
                    "Optional[str]"
                ]
            }
        },
        "IModel.after_blobput": {
            "name": "after_blobput",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "blob": [
                    "IBlob"
                ]
            }
        },
        "IModel.before_blobdelete": {
            "name": "before_blobdelete",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "ICollection.search": {
            "name": "search",
            "location": 375,
            "return": [
                "List[IModel]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "offset": [
                    "int"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "order_by": [
                    "Optional[tuple]"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "ICollection.aggregate": {
            "name": "aggregate",
            "location": 401,
            "return": [
                "List[IModel]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "group": [
                    "Optional[dict]"
                ],
                "order_by": [
                    "Optional[tuple]"
                ]
            }
        },
        "ICollection.create": {
            "name": "create",
            "location": 420,
            "return": [
                "IModel"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ICollection.get": {
            "name": "get",
            "location": 425,
            "return": [
                "IModel"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "ICollection.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 430,
            "return": [
                "IModel"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "ICollection.json": {
            "name": "json",
            "location": 435,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ICollection.links": {
            "name": "links",
            "location": 440,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ICollection.before_create": {
            "name": "before_create",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "IStateMachine.states": {
            "name": "states",
            "location": 450,
            "return": [
                "typing.List",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStateMachine.readonly_states": {
            "name": "readonly_states",
            "location": 455,
            "return": [
                "typing.List",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStateMachine.transitions": {
            "name": "transitions",
            "location": 460,
            "return": [
                "typing.List",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStateMachine._get_state": {
            "name": "_get_state",
            "location": 465,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStateMachine._set_state": {
            "name": "_set_state",
            "location": 470,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool"
                ]
            }
        },
        "IStateMachine.get_triggers": {
            "name": "get_triggers",
            "location": 477,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IXattrProvider.schema": {
            "name": "schema",
            "location": 484,
            "return": [
                "typing.Type[typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IXattrProvider.jsonschema": {
            "name": "jsonschema",
            "location": 493,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IXattrProvider.as_dict": {
            "name": "as_dict",
            "location": 498,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IXattrProvider.as_json": {
            "name": "as_json",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IXattrProvider.process_update": {
            "name": "process_update",
            "location": 510,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict"
                ]
            }
        },
        "IXattrProvider.update": {
            "name": "update",
            "location": 515,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict"
                ]
            }
        },
        "IXattrProvider.__setitem__": {
            "name": "__setitem__",
            "location": 520,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "IXattrProvider.__getitem__": {
            "name": "__getitem__",
            "location": 524,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "IXattrProvider.__delitem__": {
            "name": "__delitem__",
            "location": 528,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "IXattrProvider.get": {
            "name": "get",
            "location": 532,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Any]"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "ISearchProvider.parse_query": {
            "name": "parse_query",
            "location": 538,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str"
                ]
            }
        },
        "ISearchProvider.search": {
            "name": "search",
            "location": 546,
            "return": [
                "List[IModel]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "offset": [
                    "int"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        },
        "IAggregateProvider.parse_query": {
            "name": "parse_query",
            "location": 559,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str"
                ]
            }
        },
        "IAggregateProvider.parse_group": {
            "name": "parse_group",
            "location": 567,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str"
                ]
            }
        },
        "IAggregateProvider.aggregate": {
            "name": "aggregate",
            "location": 575,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "group": [
                    "Optional[dict]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/main.py": {
        "create_app": {
            "name": "create_app",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]"
                ],
                "scan": [
                    "bool",
                    "str"
                ]
            }
        },
        "create_admin": {
            "name": "create_admin",
            "location": 94,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "bool"
                ],
                "username": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ],
                "settings": [
                    "bool"
                ],
                "host": [
                    "typing.Text",
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "ignore_cli": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "runprod": {
            "name": "runprod",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "settings": [],
                "host": [
                    "typing.Text",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "ignore_cli": [
                    "bool"
                ],
                "workers": [
                    "None"
                ]
            }
        },
        "set_buildout_environ": {
            "name": "set_buildout_environ",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, T]",
                    "Iterable"
                ]
            }
        }
    },
    "morpfw-master/morpfw/memoizer.py": {
        "ModelMemoizer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ]
            }
        },
        "ModelMemoizer.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ModelRequestMemoizer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ]
            }
        },
        "ModelRequestMemoizer.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "ModelMemoizer.__call__.MemoizeWrapper": {
            "name": "MemoizeWrapper",
            "location": 19,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelRequestMemoizer.__call__.RequestMemoizeWrapper": {
            "name": "RequestMemoizeWrapper",
            "location": 73,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/oauth.py": {
        "jwtpolicy": {
            "name": "jwtpolicy",
            "location": 22,
            "return": [
                "JWTIdentityPolicy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "httpx.Request",
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "oauthserver": {
            "name": "oauthserver",
            "location": 141,
            "return": [
                "Server",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "morepath.Request"
                ]
            }
        },
        "extract_params": {
            "name": "extract_params",
            "location": 156,
            "return": [
                "tuple",
                "str",
                "int",
                "List[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "fastapi.Request"
                ]
            }
        },
        "get_token": {
            "name": "get_token",
            "location": 272,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "IO"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "dict"
                ],
                "request": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "hook_oauth_models": {
            "name": "hook_oauth_models",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "path": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "RequestValidator.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "scrapy.http.Request",
                    "base.Request",
                    "Callable",
                    "Iterator",
                    "Exception"
                ]
            }
        },
        "RequestValidator.validate_client_id": {
            "name": "validate_client_id",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "RequestValidator.authenticate_client": {
            "name": "authenticate_client",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "experimental.util.alice.alice_pb2.String"
                ]
            }
        },
        "RequestValidator.validate_grant_type": {
            "name": "validate_grant_type",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "grant_type": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "client": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "request": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RequestValidator.get_default_scopes": {
            "name": "get_default_scopes",
            "location": 66,
            "return": [
                "list[typing.Text]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "RequestValidator.validate_scopes": {
            "name": "validate_scopes",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "scopes": [
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "client": [
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "request": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "RequestValidator.save_bearer_token": {
            "name": "save_bearer_token",
            "location": 72,
            "return": [
                "str",
                "Optional[List[str]]",
                "List[Tuple[str, str, int]]",
                "bool",
                "Optional[Dict[str, Any]]",
                "dict",
                "Union[None, str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "bool",
                    "list",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "request": [
                    "bool",
                    "list",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "RequestValidator.generate_access_token": {
            "name": "generate_access_token",
            "location": 125,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "RequestValidator.get_default_redirect_uri": {
            "name": "get_default_redirect_uri",
            "location": 137,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]",
                "Exception",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "OAuthRoot.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "fastapi.Request"
                ],
                "server_factory": [
                    "requests.Request",
                    "scrapy.http.Request"
                ]
            }
        },
        "OAuthProvider.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "List[cmk.base.check_utils.Service]",
                    "Union[object, type]",
                    "dict"
                ],
                "request": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        },
        "OAuthProvider.authorization_form": {
            "name": "authorization_form",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthProvider._authorization_form": {
            "name": "_authorization_form",
            "location": 192,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "credentials": [
                    "str",
                    "Callable"
                ]
            }
        },
        "OAuthProvider.authorize": {
            "name": "authorize",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthProvider.get_token": {
            "name": "get_token",
            "location": 224,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "list",
                "Collection[Any]",
                "app.domain.users.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthProvider.refresh_token": {
            "name": "refresh_token",
            "location": 238,
            "return": [
                "Dict[str, Any]",
                "Request",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthProvider.response_from_return": {
            "name": "response_from_return",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Mapping[str, str]",
                    "MutableMapping"
                ],
                "body": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Mapping[str, str]",
                    "MutableMapping"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Mapping[str, str]",
                    "MutableMapping"
                ]
            }
        },
        "OAuthProvider.response_from_error": {
            "name": "response_from_error",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable"
                ]
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 279,
            "return": [
                "JWTIdentityPolicy",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "bytes",
                    "list",
                    "bool"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "asyncworker.App"
                ],
                "identity": [
                    "asyncworker.App"
                ]
            }
        },
        "hook_oauth_models.get_authroot": {
            "name": "get_authroot",
            "location": 293,
            "return": [
                "OAuthRoot",
                "bool",
                "Mapping[str, Any]",
                "str",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/permission.py": {
        "All.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "list",
                    "Callable[[], T]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/permission_rule.py": {
        "import_name": {
            "name": "import_name",
            "location": 14,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "eval_config_groupperms": {
            "name": "eval_config_groupperms",
            "location": 20,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Iterator"
                ],
                "model": [
                    "str"
                ],
                "permission": [],
                "identity": [
                    "Dict[str, Any]"
                ]
            }
        },
        "currentuser_permission": {
            "name": "currentuser_permission",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "Type[django.db.models.base.Model]",
                    "Optional[str]"
                ],
                "model": [
                    "List[dict]",
                    "model.predictor.PredictorModel",
                    "List[Dict[str, Any]]",
                    "django.db.models.Model",
                    "app.user.models.User"
                ],
                "permission": [
                    "str",
                    "Sequence[str]",
                    "T",
                    "list"
                ]
            }
        },
        "allow_api_registration": {
            "name": "allow_api_registration",
            "location": 77,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "Optional[Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str"
                ],
                "model": [
                    "str",
                    "bool"
                ],
                "permission": [
                    "bool",
                    "str"
                ]
            }
        },
        "allow_user_crud": {
            "name": "allow_user_crud",
            "location": 82,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "Model"
            ],
            "arguments": {
                "identity": [
                    "allennlp.models.Model",
                    "bool",
                    "Optional[List[str]]",
                    "Dict[str, int]",
                    "str",
                    "Callable"
                ],
                "model": [
                    "allennlp.models.Model",
                    "bool",
                    "Optional[List[str]]",
                    "Dict[str, int]",
                    "str",
                    "Callable"
                ],
                "permission": [
                    "allennlp.models.Model",
                    "bool",
                    "Optional[List[str]]",
                    "Dict[str, int]",
                    "str",
                    "Callable"
                ]
            }
        },
        "allow_change_all_user_password": {
            "name": "allow_change_all_user_password",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "Sequence[Dict[str, str]]",
                    "Dict[str, Set[str]]",
                    "Optional[str]",
                    "str"
                ],
                "model": [
                    "int",
                    "str",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Optional[Callable[[Any], bool]]",
                    "bool",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "allow_change_self_password": {
            "name": "allow_change_self_password",
            "location": 97,
            "return": [
                "str",
                "list",
                "dict",
                "int"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "int",
                    "bool",
                    "allennlp.models.Model"
                ],
                "model": [
                    "str",
                    "int",
                    "bool",
                    "allennlp.models.Model"
                ],
                "permission": [
                    "str",
                    "int",
                    "bool",
                    "allennlp.models.Model"
                ]
            }
        },
        "allow_apikeycollection_management": {
            "name": "allow_apikeycollection_management",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "int"
                ],
                "model": [
                    "str",
                    "Callable",
                    "List[model.qa.Answer]"
                ],
                "permission": [
                    "bool",
                    "str"
                ]
            }
        },
        "allow_apikey_management": {
            "name": "allow_apikey_management",
            "location": 112,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "model": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "permission": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "collection_permission": {
            "name": "collection_permission",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Optional[int]"
                ],
                "model": [
                    "str",
                    "Optional[int]"
                ],
                "permission": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "model_permission": {
            "name": "model_permission",
            "location": 122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "int"
                ],
                "model": [
                    "str",
                    "int"
                ],
                "permission": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/request.py": {
        "request_factory": {
            "name": "request_factory",
            "location": 336,
            "return": [
                "dict"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "extra_environ": [
                    "None",
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "scan": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "MutableMapping[str, str]",
                    "int"
                ],
                "app_factory_opts": [
                    "None",
                    "str",
                    "List[str]",
                    "Iterable[Tuple[str, dict]]",
                    "Callable[[], Any]",
                    "bytes"
                ],
                "path": [
                    "typing.Text",
                    "Optional[str]",
                    "Set[str]",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ],
                "request_method": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "Request.session": {
            "name": "session",
            "location": 41,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.cache": {
            "name": "cache",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.copy": {
            "name": "copy",
            "location": 48,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.async_dispatch": {
            "name": "async_dispatch",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "signal": [
                    "bool"
                ]
            }
        },
        "Request.host_url": {
            "name": "host_url",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__enter__": {
            "name": "__enter__",
            "location": 83,
            "return": [
                "Request",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__exit__": {
            "name": "__exit__",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Type[Exception]",
                    "Type[BaseException]",
                    "BaseException"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Request.commit": {
            "name": "commit",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.timezone": {
            "name": "timezone",
            "location": 101,
            "return": [
                "Tuple[List[Any], int]",
                "Type",
                "Type[Any]",
                "float",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.permits": {
            "name": "permits",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "permission": [
                    "str"
                ]
            }
        },
        "Request.get_collection": {
            "name": "get_collection",
            "location": 126,
            "return": [
                "str",
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str"
                ]
            }
        },
        "Request.get_typeinfo": {
            "name": "get_typeinfo",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Request.resolve_path": {
            "name": "resolve_path",
            "location": 146,
            "return": [
                "str",
                "bool",
                "Deque[str]",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[Any]",
                    "None"
                ],
                "app": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Request.fernet_encrypt": {
            "name": "fernet_encrypt",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "Request.fernet_decrypt": {
            "name": "fernet_decrypt",
            "location": 174,
            "return": [
                "int",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ],
                "ttl": [
                    "None",
                    "int",
                    "dict",
                    "List[int]",
                    "str",
                    "Hashable"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Request.metalink": {
            "name": "metalink",
            "location": 180,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "view_name": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Request.resolve_metalink": {
            "name": "resolve_metalink",
            "location": 183,
            "return": [
                "bool",
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "List[Callable]",
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "DBSessionRequest._db_session": {
            "name": "_db_session",
            "location": 189,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBSessionRequest._db_engines": {
            "name": "_db_engines",
            "location": 198,
            "return": [
                "dict",
                "Callable[[List, bool], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBSessionRequest.db_session": {
            "name": "db_session",
            "location": 207,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBSessionRequest.get_db_engine": {
            "name": "get_db_engine",
            "location": 210,
            "return": [
                "str",
                "bool",
                "sqlalchemy.orm.Session",
                "bytes",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "DBSessionRequest.get_db_session": {
            "name": "get_db_session",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Type['Declared']"
                ]
            }
        },
        "DBSessionRequest.clear_db_session": {
            "name": "clear_db_session",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DBSessionRequest.expunge_all": {
            "name": "expunge_all",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "Type['Declared']",
                    "Dict[str, Any]"
                ]
            }
        },
        "DBSessionRequest.dispose_db_engines": {
            "name": "dispose_db_engines",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "dict",
                    "Type[T]",
                    "Dict[str, object]"
                ]
            }
        },
        "ESCapableRequest._es_client": {
            "name": "_es_client",
            "location": 306,
            "return": [
                "dict",
                "Optional[Dict]",
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCapableRequest.get_es_client": {
            "name": "get_es_client",
            "location": 314,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "morpfw-master/morpfw/sql.py": {},
    "morpfw-master/morpfw/static.py": {
        "serve_static": {
            "name": "serve_static",
            "location": 33,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "StaticRoot.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "StaticRoot.resource_path": {
            "name": "resource_path",
            "location": 25,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "serve_static.add_headers": {
            "name": "add_headers",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "serve_static.add_caching_headers": {
            "name": "add_caching_headers",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "serve_static.add_notmodified_headers": {
            "name": "add_notmodified_headers",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/util.py": {
        "create_group": {
            "name": "create_group",
            "location": 8,
            "return": [
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "groupname": [
                    "Iterable[int]"
                ]
            }
        },
        "delete_group": {
            "name": "delete_group",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "groupname": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user_by_userid": {
            "name": "get_user_by_userid",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "userid": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/wsgi.py": {
        "wsgi_factory": {
            "name": "wsgi_factory",
            "location": 12,
            "return": [],
            "arguments": {
                "app_factory": []
            }
        },
        "app": {
            "name": "app",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "Callable[[List, bool], None]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "OrderedDict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "Optional[Dict[str, bytes]]"
                ],
                "start_response": [
                    "str",
                    "List[str]",
                    "Mapping[str, List[Any]]"
                ]
            }
        },
        "wsgi_factory.app": {
            "name": "app",
            "location": 15,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "morpfw-master/morpfw/__init__.py": {},
    "morpfw-master/morpfw/authn/base.py": {
        "AuthnPolicy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_settings": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "identity": []
            }
        }
    },
    "morpfw-master/morpfw/authn/cookie.py": {
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 7,
            "return": [
                "IdentityPolicy",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "identity": []
            }
        }
    },
    "morpfw-master/morpfw/authn/noauth.py": {
        "NoAuthIdentityPolicy.identify": {
            "name": "identify",
            "location": 8,
            "return": [
                "Identity",
                "dict",
                "int",
                "Optional[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NoAuthIdentityPolicy.remember": {
            "name": "remember",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ],
                "identity": [
                    "float"
                ]
            }
        },
        "NoAuthIdentityPolicy.forget": {
            "name": "forget",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ]
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 19,
            "return": [
                "NoAuthIdentityPolicy",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "identity": []
            }
        }
    },
    "morpfw-master/morpfw/authn/remoteuser.py": {
        "RemoteUserIdentityPolicy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_nets": [
                    "None",
                    "str",
                    "List[List[Any]]",
                    "int",
                    "list",
                    "dict",
                    "bytes"
                ]
            }
        },
        "RemoteUserIdentityPolicy.identify": {
            "name": "identify",
            "location": 14,
            "return": [
                "Identity",
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RemoteUserIdentityPolicy.remember": {
            "name": "remember",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ],
                "identity": [
                    "float"
                ]
            }
        },
        "RemoteUserIdentityPolicy.forget": {
            "name": "forget",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ]
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 33,
            "return": [
                "RemoteUserIdentityPolicy",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "settings": [
                    "str",
                    "Generator",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ],
                "app": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ],
                "identity": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/useridparam.py": {
        "UserParamIdentityPolicy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_nets": [
                    "None",
                    "str",
                    "List[List[Any]]",
                    "int",
                    "list",
                    "dict",
                    "bytes"
                ]
            }
        },
        "UserParamIdentityPolicy.identify": {
            "name": "identify",
            "location": 14,
            "return": [
                "Identity",
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "UserParamIdentityPolicy.remember": {
            "name": "remember",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ],
                "identity": [
                    "float"
                ]
            }
        },
        "UserParamIdentityPolicy.forget": {
            "name": "forget",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float"
                ],
                "request": [
                    "float"
                ]
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 33,
            "return": [
                "UserParamIdentityPolicy",
                "Callable",
                "int",
                "Optional[List[str]]",
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "settings": [
                    "str",
                    "bool"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ],
                "app": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ],
                "identity": [
                    "bool",
                    "str",
                    "Optional[Type[Any]]",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/app.py": {},
    "morpfw-master/morpfw/authn/pas/exc.py": {
        "MembershipError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ],
                "group": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/model.py": {},
    "morpfw-master/morpfw/authn/pas/path.py": {
        "hook_auth_models": {
            "name": "hook_auth_models",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]",
                    "Set[str]",
                    "List[str]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "Iterable[str]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "hook_auth_models._get_user": {
            "name": "_get_user",
            "location": 16,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "app": [
                    "bool"
                ],
                "request": [
                    "str"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "hook_auth_models._get_user_collection": {
            "name": "_get_user_collection",
            "location": 20,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "Callable[[], T]"
            ],
            "arguments": {
                "app": [
                    "bool"
                ],
                "request": [
                    "auth.user.User",
                    "str"
                ]
            }
        },
        "hook_auth_models._get_current_user": {
            "name": "_get_current_user",
            "location": 24,
            "return": [
                "None",
                "Optional[str]",
                "CurrentUserModel",
                "Optional[List[str]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "request": [
                    "dict"
                ]
            }
        },
        "hook_auth_models._get_group": {
            "name": "_get_group",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [],
                "request": [],
                "identifier": []
            }
        },
        "hook_auth_models._get_group_collection": {
            "name": "_get_group_collection",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "str"
                ]
            }
        },
        "hook_auth_models._get_apikey": {
            "name": "_get_apikey",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Any]",
                "Mapping[int, str]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "str"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "hook_auth_models._get_apikey_collection": {
            "name": "_get_apikey_collection",
            "location": 47,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/permission.py": {},
    "morpfw-master/morpfw/authn/pas/policy.py": {
        "verify_refresh_request": {
            "name": "verify_refresh_request",
            "location": 55,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_user_sqlstorage": {
            "name": "get_user_sqlstorage",
            "location": 78,
            "return": [
                "UserSQLStorage",
                "str",
                "Iterable[str]",
                "app.db_models.User"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "request": [
                    "dict",
                    "bool"
                ],
                "blobstorage": [
                    "dict",
                    "bool"
                ]
            }
        },
        "get_group_sqlstorage": {
            "name": "get_group_sqlstorage",
            "location": 83,
            "return": [
                "GroupSQLStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_apikey_sqlstorage": {
            "name": "get_apikey_sqlstorage",
            "location": 88,
            "return": [
                "APIKeySQLStorage",
                "bytes",
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "str"
                ],
                "blobstorage": [
                    "dict",
                    "str"
                ]
            }
        },
        "get_user_memorystorage": {
            "name": "get_user_memorystorage",
            "location": 97,
            "return": [
                "UserMemoryStorage",
                "str",
                "Iterable[str]",
                "app.db_models.User"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "request": [
                    "dict",
                    "bool"
                ],
                "blobstorage": [
                    "dict",
                    "bool"
                ]
            }
        },
        "get_group_memorystorage": {
            "name": "get_group_memorystorage",
            "location": 102,
            "return": [
                "GroupMemoryStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_apikey_memorystorage": {
            "name": "get_apikey_memorystorage",
            "location": 107,
            "return": [
                "APIKeyMemoryStorage",
                "bytes",
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "str"
                ],
                "blobstorage": [
                    "dict",
                    "str"
                ]
            }
        },
        "Identity.timezone": {
            "name": "timezone",
            "location": 28,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JWTWithAPIKeyIdentityPolicy.identify": {
            "name": "identify",
            "location": 38,
            "return": [
                "Identity",
                "bytes",
                "morepath_@_Identity",
                "dict",
                "str",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DefaultAuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 65,
            "return": [
                "JWTWithAPIKeyIdentityPolicy"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "bytes",
                    "list",
                    "bool"
                ]
            }
        },
        "DefaultAuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "asyncworker.App"
                ],
                "identity": [
                    "asyncworker.App"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/utils.py": {
        "rellink": {
            "name": "rellink",
            "location": 8,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "request": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "method": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "link_name": [
                    "None",
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "has_role": {
            "name": "has_role",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict"
                ],
                "role": [
                    "Callable"
                ],
                "userid": [
                    "None",
                    "str",
                    "dict"
                ],
                "groupname": [
                    "typing.Text"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/validator.py": {
        "validate": {
            "name": "validate",
            "location": 4,
            "return": [
                "Optional[Dict[(str, list)]]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int"
                ],
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/view.py": {
        "exception_view": {
            "name": "exception_view",
            "location": 7,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "int",
                "type",
                "Dict[str, Any]",
                "dict",
                "Callable[..., None]"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "bool",
                    "Callable"
                ],
                "request": [
                    "MutableMapping[str, str]",
                    "str"
                ]
            }
        },
        "exception_view.adjust_status": {
            "name": "adjust_status",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "List[dict]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/apikey/model.py": {
        "APIKeyModel.client_id": {
            "name": "client_id",
            "location": 17,
            "return": [
                "int",
                "Iterable[Any]",
                "Dict[str, bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIKeyModel.generate_secret": {
            "name": "generate_secret",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIKeyModel.validate": {
            "name": "validate",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "api_secret": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "APIKeyModel.user": {
            "name": "user",
            "location": 32,
            "return": [
                "bool",
                "str",
                "int",
                "app.models.Game"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIKeyCollection.search": {
            "name": "search",
            "location": 41,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "APIKeyCollection.get_by_identity": {
            "name": "get_by_identity",
            "location": 49,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/apikey/path.py": {
        "get_apikey_collection": {
            "name": "get_apikey_collection",
            "location": 5,
            "return": [
                "morpfw.authn.pas.apikey.model.APIKeyCollection"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_apikey": {
            "name": "get_apikey",
            "location": 10,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/apikey/schema.py": {
        "current_userid": {
            "name": "current_userid",
            "location": 10,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "float"
                ],
                "data": [
                    "float"
                ],
                "model": []
            }
        },
        "generate_identity": {
            "name": "generate_identity",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [],
                "data": [],
                "model": []
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/apikey/typeinfo.py": {
        "get_typeinfo": {
            "name": "get_typeinfo",
            "location": 8,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "bool",
                "str",
                "Dict[str, Type[Any]]",
                "int",
                "Mapping"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/apikey/view.py": {
        "generate_apikey": {
            "name": "generate_apikey",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "context": [],
                "request": [
                    "Union[dict, list]",
                    "str"
                ]
            }
        },
        "generate_apikey.adjust_response": {
            "name": "adjust_response",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/apikey/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/group/model.py": {
        "GroupCollection.get_by_groupname": {
            "name": "get_by_groupname",
            "location": 18,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str",
                    "float"
                ]
            }
        },
        "GroupModel.get_user_by_userid": {
            "name": "get_user_by_userid",
            "location": 25,
            "return": [
                "Optional[str]",
                "tuple",
                "Sequence[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GroupModel.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 28,
            "return": [
                "Optional[str]",
                "tuple",
                "Sequence[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GroupModel.members": {
            "name": "members",
            "location": 31,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupModel.children": {
            "name": "children",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupModel.add_members": {
            "name": "add_members",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "int"
                ]
            }
        },
        "GroupModel.remove_members": {
            "name": "remove_members",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "str"
                ]
            }
        },
        "GroupModel.get_member_roles": {
            "name": "get_member_roles",
            "location": 51,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "app.domain.stocks.StockMetadata",
                    "solo.config.app.Config"
                ]
            }
        },
        "GroupModel.grant_member_role": {
            "name": "grant_member_role",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str"
                ],
                "rolename": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "int",
                    "tuple"
                ]
            }
        },
        "GroupModel.revoke_member_role": {
            "name": "revoke_member_role",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "bool"
                ],
                "rolename": [
                    "int",
                    "bool",
                    "Dict[str, List[str]]",
                    "tuple",
                    "Iterable[str]"
                ]
            }
        },
        "GroupModel._links": {
            "name": "_links",
            "location": 72,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/group/path.py": {
        "get_group": {
            "name": "get_group",
            "location": 7,
            "return": [
                "morpfw.authn.pas.group.model.GroupModel"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "get_group_collection": {
            "name": "get_group_collection",
            "location": 12,
            "return": [
                "morpfw.authn.pas.group.model.GroupCollection"
            ],
            "arguments": {
                "request": [
                    "morepath.Request"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/group/schema.py": {
        "valid_group_identifier": {
            "name": "valid_group_identifier",
            "location": 10,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "schema": [
                    "int",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "field": [
                    "int",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "value": [
                    "int",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "mode": [
                    "None",
                    "int",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/group/typeinfo.py": {
        "get_typeinfo": {
            "name": "get_typeinfo",
            "location": 8,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/group/view.py": {
        "list_members": {
            "name": "list_members",
            "location": 14,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, list]]]",
                "str",
                "dict",
                "Tuple[str, str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "context": [
                    "int"
                ],
                "request": [
                    "experimental.util.alice.alice_pb2.RunRequest",
                    "int"
                ]
            }
        },
        "grant_member": {
            "name": "grant_member",
            "location": 33,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "context": [
                    "int"
                ],
                "request": []
            }
        },
        "revoke_member": {
            "name": "revoke_member",
            "location": 57,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "context": [
                    "int"
                ],
                "request": []
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/group/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/storage/interfaces.py": {
        "IUserStorage.create": {
            "name": "create",
            "location": 16,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "List[Dict]"
                ],
                "data": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "List[Dict]"
                ]
            }
        },
        "IUserStorage.search": {
            "name": "search",
            "location": 23,
            "return": [
                "List[IUserModel]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Optional[int]",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "str",
                    "bool"
                ],
                "query": [
                    "Optional[dict]"
                ],
                "offset": [
                    "Optional[int]"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        },
        "IUserStorage.get_by_id": {
            "name": "get_by_id",
            "location": 35,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "IUserStorage.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 40,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "uuid": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "IUserStorage.update": {
            "name": "update",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "identifier": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "IUserStorage.delete": {
            "name": "delete",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ],
                "identifier": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ],
                "model": [
                    "IUserModel"
                ]
            }
        },
        "IUserStorage.get_userid": {
            "name": "get_userid",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "dict",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "model": [
                    "IUserModel"
                ]
            }
        },
        "IUserStorage.get_by_email": {
            "name": "get_by_email",
            "location": 60,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "email": [
                    "str"
                ]
            }
        },
        "IUserStorage.get_by_userid": {
            "name": "get_by_userid",
            "location": 65,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "userid": [
                    "str"
                ]
            }
        },
        "IUserStorage.get_by_username": {
            "name": "get_by_username",
            "location": 70,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "IUserStorage.change_password": {
            "name": "change_password",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int",
                    "Union[str, int]"
                ],
                "userid": [
                    "str"
                ],
                "new_password": [
                    "str"
                ]
            }
        },
        "IUserStorage.get_user_groups": {
            "name": "get_user_groups",
            "location": 80,
            "return": [
                "IGroupModel"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool"
                ],
                "userid": [
                    "str"
                ]
            }
        },
        "IUserStorage.validate": {
            "name": "validate",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str"
                ],
                "userid": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "IGroupStorage.create": {
            "name": "create",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "IGroupStorage.search": {
            "name": "search",
            "location": 99,
            "return": [
                "Sequence[IGroupModel]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[dict]"
                ],
                "offset": [
                    "Optional[int]"
                ],
                "limit": [
                    "Optional[int]"
                ],
                "order_by": [
                    "Optional[Union[(list, tuple)]]"
                ]
            }
        },
        "IGroupStorage.get_by_id": {
            "name": "get_by_id",
            "location": 110,
            "return": [
                "IGroupModel"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "IGroupStorage.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 115,
            "return": [
                "IGroupModel"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "IGroupStorage.update": {
            "name": "update",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "IGroupStorage.delete": {
            "name": "delete",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "model": [
                    "IGroupModel"
                ]
            }
        },
        "IGroupStorage.get_user_by_userid": {
            "name": "get_user_by_userid",
            "location": 130,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str"
                ],
                "as_model": [
                    "bool"
                ]
            }
        },
        "IGroupStorage.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 138,
            "return": [
                "IUserModel"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "as_model": [
                    "bool"
                ]
            }
        },
        "IGroupStorage.get_members": {
            "name": "get_members",
            "location": 146,
            "return": [
                "List[IUserModel]"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ]
            }
        },
        "IGroupStorage.add_group_members": {
            "name": "add_group_members",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "userids": [
                    "List[str]"
                ]
            }
        },
        "IGroupStorage.remove_group_members": {
            "name": "remove_group_members",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "userids": [
                    "List[str]"
                ]
            }
        },
        "IGroupStorage.get_group_user_roles": {
            "name": "get_group_user_roles",
            "location": 161,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "userid": [
                    "str"
                ]
            }
        },
        "IGroupStorage.grant_group_user_role": {
            "name": "grant_group_user_role",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "userid": [
                    "str"
                ],
                "rolename": [
                    "str"
                ]
            }
        },
        "IGroupStorage.revoke_group_user_role": {
            "name": "revoke_group_user_role",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "groupname": [
                    "str"
                ],
                "userid": [
                    "str"
                ],
                "rolename": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/storage/ldap3storage.py": {
        "LDAP3SQLUserStorage.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "ldap_url": [
                    "str"
                ],
                "base_dn": [
                    "str"
                ],
                "bind_dn": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "bind_password": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "search_scope": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "start_tls": [
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "username_attr": [
                    "str",
                    "typing.Text"
                ],
                "email_attr": [
                    "typing.Text",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "attributes": [
                    "str",
                    "None"
                ],
                "filterstr": [
                    "str",
                    "typing.Text"
                ],
                "blobstorage": [
                    "None",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "LDAP3SQLUserStorage.ldap_connect": {
            "name": "ldap_connect",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAP3SQLUserStorage.ldap_admin_connect": {
            "name": "ldap_admin_connect",
            "location": 56,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAP3SQLUserStorage.ldap_get_user": {
            "name": "ldap_get_user",
            "location": 61,
            "return": [
                "None",
                "dict[typing.Text, ]",
                "Optional[str]",
                "str",
                "Optional[Any]",
                "Optional[int]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "LDAP3SQLUserStorage.get_by_username": {
            "name": "get_by_username",
            "location": 89,
            "return": [
                "None",
                "set",
                "bool",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool"
                ],
                "username": [
                    "str",
                    "set",
                    "bool"
                ]
            }
        },
        "LDAP3SQLUserStorage.change_password": {
            "name": "change_password",
            "location": 110,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "userid": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "new_password": [
                    "str",
                    "Optional[str]",
                    "Callable[[], bool]"
                ]
            }
        },
        "LDAP3SQLUserStorage.validate": {
            "name": "validate",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "userid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/storage/memorystorage.py": {
        "UserMemoryStorage.get_userid": {
            "name": "get_userid",
            "location": 18,
            "return": [
                "model.Model",
                "str",
                "model.SockeyeModel",
                "invgp.model.GP",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "UserMemoryStorage.get_by_email": {
            "name": "get_by_email",
            "location": 21,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[Dict]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "email": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "UserMemoryStorage.get_by_userid": {
            "name": "get_by_userid",
            "location": 27,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "userid": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "UserMemoryStorage.get_by_username": {
            "name": "get_by_username",
            "location": 33,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "username": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "UserMemoryStorage.change_password": {
            "name": "change_password",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "userid": [
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "new_password": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "UserMemoryStorage.get_user_groups": {
            "name": "get_user_groups",
            "location": 43,
            "return": [
                "Optional[str]",
                "tuple",
                "Sequence[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool"
                ],
                "userid": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UserMemoryStorage.validate": {
            "name": "validate",
            "location": 48,
            "return": [
                "bool",
                "str",
                "dict",
                "Dict[str, Any]",
                "list",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str"
                ],
                "userid": [
                    "str"
                ],
                "password": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "GroupMemoryStorage.get_by_groupname": {
            "name": "get_by_groupname",
            "location": 60,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "groupname": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "GroupMemoryStorage.get_user_by_userid": {
            "name": "get_user_by_userid",
            "location": 66,
            "return": [
                "Optional[str]",
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Any]",
                    "int"
                ],
                "userid": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GroupMemoryStorage.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 71,
            "return": [
                "Optional[str]",
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Any]",
                    "int"
                ],
                "username": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "GroupMemoryStorage.get_user_groups": {
            "name": "get_user_groups",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "Optional[str]",
                    "Callable",
                    "dict"
                ],
                "collection": [
                    "str",
                    "bool"
                ]
            }
        },
        "GroupMemoryStorage.get_members": {
            "name": "get_members",
            "location": 83,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Optional[str]"
                ],
                "groupid": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GroupMemoryStorage.add_group_members": {
            "name": "add_group_members",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "groupid": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "userids": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "GroupMemoryStorage.remove_group_members": {
            "name": "remove_group_members",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "dict"
                ],
                "groupid": [
                    "str",
                    "dict"
                ],
                "userids": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GroupMemoryStorage.get_group_user_roles": {
            "name": "get_group_user_roles",
            "location": 116,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "int"
                ],
                "groupid": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, int]"
                ],
                "userid": [
                    "str",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "GroupMemoryStorage.grant_group_user_role": {
            "name": "grant_group_user_role",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "int"
                ],
                "groupid": [
                    "int"
                ],
                "userid": [
                    "bool"
                ],
                "rolename": [
                    "str",
                    "int",
                    "List[Mapping[str, Any]]"
                ]
            }
        },
        "GroupMemoryStorage.revoke_group_user_role": {
            "name": "revoke_group_user_role",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "int"
                ],
                "groupid": [
                    "bool",
                    "str",
                    "apistar.interfaces.Injector"
                ],
                "userid": [
                    "apistar.interfaces.Injector",
                    "model.Integration"
                ],
                "rolename": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/storage/pamstorage.py": {
        "UserPAMSQLStorage.get": {
            "name": "get",
            "location": 15,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "UserPAMSQLStorage.validate": {
            "name": "validate",
            "location": 28,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str"
                ],
                "password": [
                    "str",
                    "dict",
                    "tuple"
                ]
            }
        },
        "UserPAMSQLStorage.change_password": {
            "name": "change_password",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str",
                    "Union[str, int]"
                ],
                "new_password": [
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/storage/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/storage/sqlstorage/dbmodel.py": {},
    "morpfw-master/morpfw/authn/pas/storage/sqlstorage/sqlstorage.py": {
        "hash": {
            "name": "hash",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "UserSQLStorage.create": {
            "name": "create",
            "location": 24,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Sequence[int]",
                    "Optional[bool]",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[int]"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "UserSQLStorage.get_userid": {
            "name": "get_userid",
            "location": 28,
            "return": [
                "model.Model",
                "str",
                "model.SockeyeModel",
                "invgp.model.GP",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "UserSQLStorage.get_by_userid": {
            "name": "get_by_userid",
            "location": 31,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "FrozenSet[bytes]",
                    "Optional[str]"
                ],
                "userid": [
                    "dict",
                    "str",
                    "netanalysis.traffic.data.model.ProductId",
                    "app.contexts.AuthContext",
                    "int"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "UserSQLStorage.get_by_username": {
            "name": "get_by_username",
            "location": 40,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "FrozenSet[bytes]",
                    "Optional[str]"
                ],
                "username": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "app.models.User"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "UserSQLStorage.get_by_email": {
            "name": "get_by_email",
            "location": 51,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "email": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UserSQLStorage.change_password": {
            "name": "change_password",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Sequence[int]",
                    "bool",
                    "sqlalchemy.orm.session.Session"
                ],
                "userid": [
                    "str",
                    "Sequence[int]",
                    "bool",
                    "sqlalchemy.orm.session.Session"
                ],
                "new_password": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserSQLStorage.get_user_groups": {
            "name": "get_user_groups",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "float",
                    "db.models.Cowboy"
                ],
                "userid": [
                    "int",
                    "float",
                    "db.models.Cowboy"
                ]
            }
        },
        "UserSQLStorage.validate": {
            "name": "validate",
            "location": 78,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str"
                ],
                "userid": [
                    "str"
                ],
                "password": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "UserSQLStorage.vacuum": {
            "name": "vacuum",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupSQLStorage.get_user_by_userid": {
            "name": "get_user_by_userid",
            "location": 104,
            "return": [
                "Optional[str]",
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Any]",
                    "int"
                ],
                "userid": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GroupSQLStorage.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 109,
            "return": [
                "Optional[str]",
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Any]",
                    "int"
                ],
                "username": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "as_model": [
                    "bool",
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GroupSQLStorage.get_members": {
            "name": "get_members",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "groupid": [
                    "Sequence[str]",
                    "Optional[int]",
                    "int",
                    "django.db.migrations.state.StateApps",
                    "List[str]",
                    "grouper.models.group.Group"
                ]
            }
        },
        "GroupSQLStorage.add_group_members": {
            "name": "add_group_members",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "float"
                ],
                "groupid": [
                    "str",
                    "int"
                ],
                "userids": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "GroupSQLStorage.remove_group_members": {
            "name": "remove_group_members",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Dict[str, model.Integration]",
                    "Optional[int]"
                ],
                "groupid": [
                    "int",
                    "str",
                    "bool"
                ],
                "userids": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GroupSQLStorage.get_group_user_roles": {
            "name": "get_group_user_roles",
            "location": 193,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "sqlalchemy.orm.state.InstanceState",
                    "bool"
                ],
                "groupid": [
                    "str",
                    "bool",
                    "set",
                    "int"
                ],
                "userid": [
                    "str",
                    "sqlalchemy.orm.state.InstanceState",
                    "bool"
                ]
            }
        },
        "GroupSQLStorage.get_by_groupname": {
            "name": "get_by_groupname",
            "location": 219,
            "return": [
                "Optional[morpfw.authn.pas.group.model.GroupModel]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "FrozenSet[bytes]"
                ],
                "groupname": [
                    "int",
                    "set"
                ]
            }
        },
        "GroupSQLStorage.grant_group_user_role": {
            "name": "grant_group_user_role",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "groupid": [
                    "bool",
                    "set",
                    "str",
                    "int"
                ],
                "userid": [
                    "dict",
                    "bool",
                    "List[Tuple[str, int]]"
                ],
                "rolename": [
                    "int",
                    "Dict[int, dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GroupSQLStorage.revoke_group_user_role": {
            "name": "revoke_group_user_role",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "groupid": [
                    "bool",
                    "set",
                    "str",
                    "int"
                ],
                "userid": [
                    "dict",
                    "bool",
                    "List[Tuple[str, int]]"
                ],
                "rolename": [
                    "int",
                    "Dict[int, dict]"
                ]
            }
        },
        "GroupSQLStorage.vacuum": {
            "name": "vacuum",
            "location": 307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/storage/sqlstorage/__init__.py": {},
    "morpfw-master/morpfw/authn/pas/user/model.py": {
        "userstatemachine": {
            "name": "userstatemachine",
            "location": 121,
            "return": [
                "UserStateMachine",
                "bool",
                "str",
                "sqlalchemy.orm.query.Query",
                "int",
                "List[str]"
            ],
            "arguments": {
                "context": [
                    "Callable"
                ]
            }
        },
        "add_user_to_default_group": {
            "name": "add_user_to_default_group",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "dict",
                    "int"
                ],
                "request": [
                    "str",
                    "Exception",
                    "Dict[str, str]"
                ],
                "obj": [
                    "Dict[str, Any]",
                    "Tuple[int]"
                ],
                "signal": [
                    "str",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "UserCollection.authenticate": {
            "name": "authenticate",
            "location": 31,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "UserCollection.get_by_userid": {
            "name": "get_by_userid",
            "location": 43,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str",
                    "float"
                ]
            }
        },
        "UserCollection.get_by_email": {
            "name": "get_by_email",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "UserCollection.get_by_username": {
            "name": "get_by_username",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "float"
                ]
            }
        },
        "UserCollection._create": {
            "name": "_create",
            "location": 52,
            "return": [
                "bool",
                "Optional[Callable]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[float]",
                    "bytes",
                    "int",
                    "bool",
                    "Optional[datetime.timedelta]",
                    "MutableMapping"
                ]
            }
        },
        "UserModel.title": {
            "name": "title",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.userid": {
            "name": "userid",
            "location": 66,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.identity": {
            "name": "identity",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.change_password": {
            "name": "change_password",
            "location": 73,
            "return": [
                "bool",
                "str",
                "rflx.model.Refinement"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "new_password": [
                    "str"
                ],
                "secure": [
                    "bool"
                ]
            }
        },
        "UserModel.validate": {
            "name": "validate",
            "location": 79,
            "return": [
                "bool",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "check_state": [
                    "bool"
                ]
            }
        },
        "UserModel.groups": {
            "name": "groups",
            "location": 83,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.group_roles": {
            "name": "group_roles",
            "location": 86,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.timezone": {
            "name": "timezone",
            "location": 92,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel._links": {
            "name": "_links",
            "location": 96,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/path.py": {
        "get_user": {
            "name": "get_user",
            "location": 7,
            "return": [
                "morpfw.authn.pas.user.model.UserModel"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_user_collection": {
            "name": "get_user_collection",
            "location": 12,
            "return": [
                "morpfw.authn.pas.user.model.UserCollection"
            ],
            "arguments": {
                "request": [
                    "dict"
                ]
            }
        },
        "get_current_user": {
            "name": "get_current_user",
            "location": 16,
            "return": [
                "morpfw.authn.pas.user.model.UserModel"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "refresh_nonce_handler": {
            "name": "refresh_nonce_handler",
            "location": 22,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "userid": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/rulesprovider.py": {
        "get_user_rulesprovider": {
            "name": "get_user_rulesprovider",
            "location": 27,
            "return": [
                "UserRulesProvider",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "UserRulesProvider.change_password": {
            "name": "change_password",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "new_password": [
                    "str"
                ],
                "secure": [
                    "bool",
                    "str"
                ]
            }
        },
        "UserRulesProvider.validate": {
            "name": "validate",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]"
                ],
                "check_state": [
                    "bool",
                    "str",
                    "Optional[Mapping[str, str]]",
                    "int",
                    "List[Tuple[str, str]]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/schema.py": {},
    "morpfw-master/morpfw/authn/pas/user/typeinfo.py": {
        "get_typeinfo": {
            "name": "get_typeinfo",
            "location": 8,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/validator.py": {
        "valid_source": {
            "name": "valid_source",
            "location": 6,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "Callable",
                    "int",
                    "str"
                ],
                "schema": [
                    "bytes",
                    "Callable",
                    "int",
                    "str"
                ],
                "field": [
                    "bytes",
                    "Callable",
                    "int",
                    "str"
                ],
                "value": [
                    "bytes",
                    "Callable",
                    "int",
                    "str"
                ],
                "mode": [
                    "None",
                    "bytes",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "valid_tz": {
            "name": "valid_tz",
            "location": 11,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "bool",
                    "Callable",
                    "str"
                ],
                "schema": [
                    "bytes",
                    "bool",
                    "Callable",
                    "str"
                ],
                "field": [
                    "bytes",
                    "bool",
                    "Callable",
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "str"
                ],
                "mode": [
                    "None",
                    "bytes",
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/view.py": {
        "register": {
            "name": "register",
            "location": 32,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "login": {
            "name": "login",
            "location": 56,
            "return": [
                "dict[typing.Text, list]",
                "dict",
                "int",
                "float"
            ],
            "arguments": {
                "context": [
                    "routemaster.app.App",
                    "str",
                    "bool",
                    "int"
                ],
                "request": [
                    "routemaster.app.App",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "process_login": {
            "name": "process_login",
            "location": 64,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,typing.Text]]]]",
                "bool",
                "dict[typing.Text, typing.Text]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "refresh_token": {
            "name": "refresh_token",
            "location": 94,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "model.Integration",
                "cmk.utils.type_defs.UserId",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "context": [
                    "morepath.Request"
                ],
                "request": [
                    "morepath.Request"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 131,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "roles": {
            "name": "roles",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "int"
                ],
                "request": []
            }
        },
        "admin_change_password": {
            "name": "admin_change_password",
            "location": 152,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "str",
                "dict[typing.Text, typing.Text]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "Mapping[str, Any]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "request": [
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "user_change_password": {
            "name": "user_change_password",
            "location": 178,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "str",
                "dict[typing.Text, typing.Text]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "request": [
                    "bool"
                ]
            }
        },
        "process_login.remember": {
            "name": "remember",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "logout.forget": {
            "name": "forget",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "register.adjust_response": {
            "name": "adjust_response",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "process_login.adjust_status": {
            "name": "adjust_status",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "refresh_token.remember": {
            "name": "remember",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "admin_change_password.adjust_status": {
            "name": "adjust_status",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "user_change_password.adjust_status": {
            "name": "adjust_status",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "List[dict]"
                ]
            }
        },
        "refresh_token.expired_nonce_or_token": {
            "name": "expired_nonce_or_token",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "refresh_token.invalid_token": {
            "name": "invalid_token",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authn/pas/user/__init__.py": {},
    "morpfw-master/morpfw/authz/pas.py": {
        "_has_admin_role": {
            "name": "_has_admin_role",
            "location": 18,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "context": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authz/__init__.py": {},
    "morpfw-master/morpfw/authz/rule/fullaccess.py": {
        "group_policy": {
            "name": "group_policy",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "groupname": [
                    "bool",
                    "int",
                    "float"
                ],
                "identity": [
                    "int",
                    "dict",
                    "allennlp.models.model.Model",
                    "bool",
                    "bytes"
                ],
                "model": [
                    "str",
                    "bool",
                    "sensibility.model.lstm.DualLSTMModel",
                    "tensorflow.keras.Model",
                    "model.SockeyeModel",
                    "int"
                ],
                "permission": [
                    "str",
                    "Dict[str, Callable]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authz/rule/readonly.py": {
        "group_policy": {
            "name": "group_policy",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "groupname": [
                    "bool",
                    "int",
                    "float"
                ],
                "identity": [
                    "int",
                    "dict",
                    "allennlp.models.model.Model",
                    "bool",
                    "bytes"
                ],
                "model": [
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "model.predictor.PredictorModel"
                ],
                "permission": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authz/rule/submitedit.py": {
        "group_policy": {
            "name": "group_policy",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "groupname": [
                    "bool",
                    "int",
                    "float"
                ],
                "identity": [
                    "int",
                    "dict",
                    "allennlp.models.model.Model",
                    "bool",
                    "bytes"
                ],
                "model": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, object]"
                ],
                "permission": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authz/rule/transitedit.py": {
        "group_policy": {
            "name": "group_policy",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "groupname": [
                    "bool",
                    "int",
                    "float"
                ],
                "identity": [
                    "int",
                    "dict",
                    "allennlp.models.model.Model",
                    "bool",
                    "bytes"
                ],
                "model": [
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "model.predictor.PredictorModel"
                ],
                "permission": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/authz/rule/__init__.py": {},
    "morpfw-master/morpfw/avro/jsl_to_avro.py": {
        "_avro_field": {
            "name": "_avro_field",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "jsl_field_to_avro_field": {
            "name": "jsl_field_to_avro_field",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "prop": [
                    "str"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "namespace": [
                    "str"
                ]
            }
        },
        "jsl_to_avro": {
            "name": "jsl_to_avro",
            "location": 48,
            "return": [
                "Dict[(str, Union[(str, List[dict], _T1, _T2)])]"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "name": [
                    "_T1"
                ],
                "namespace": [
                    "_T2"
                ]
            }
        }
    },
    "morpfw-master/morpfw/avro/__init__.py": {},
    "morpfw-master/morpfw/cli/cli.py": {
        "load_settings": {
            "name": "load_settings",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "settings_file": [
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Optional[MutableMapping[str, Any]]",
                    "Optional[List[str]]"
                ],
                "default": [
                    "str",
                    "int"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 53,
            "return": [
                "dict[typing.Text, None]",
                "str",
                "click.HelpFormatter"
            ],
            "arguments": {
                "settings_file": [
                    "None",
                    "TextIO",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "host": [
                    "None",
                    "str",
                    "int"
                ],
                "port": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "confirmation_dialog": {
            "name": "confirmation_dialog",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "typing.Text",
                    "bytes",
                    "str",
                    "dict"
                ],
                "token_length": [
                    "int",
                    "List[str]",
                    "float",
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "settings": []
            }
        }
    },
    "morpfw-master/morpfw/cli/db.py": {
        "alembic_config": {
            "name": "alembic_config",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_cls": [
                    "str"
                ],
                "settings": [
                    "str",
                    "list",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "alembic_logging_config": {
            "name": "alembic_logging_config",
            "location": 25,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "app_cls": [
                    "str"
                ],
                "settings": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "default_alembic_logging_config": {
            "name": "default_alembic_logging_config",
            "location": 30,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]]",
                "str",
                "bytes",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "app_cls": [
                    "Union[str, None]",
                    "Optional[Type[Any]]",
                    "bool"
                ],
                "settings": [
                    "Union[str, None]",
                    "Optional[Type[Any]]",
                    "bool"
                ]
            }
        },
        "default_alembic_config": {
            "name": "default_alembic_config",
            "location": 56,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "app_cls": [
                    "str",
                    "Dict[str, str]"
                ],
                "settings": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "resetdb": {
            "name": "resetdb",
            "location": 76,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "vacuum": {
            "name": "vacuum",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/elasticstore.py": {
        "update_esindex": {
            "name": "update_esindex",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "str"
                ]
            }
        },
        "reset_esindex": {
            "name": "reset_esindex",
            "location": 33,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/generate_config.py": {
        "get_settings_opts": {
            "name": "get_settings_opts",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app_cls": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "default_get_settings_opts": {
            "name": "default_get_settings_opts",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "app_cls": [
                    "dict",
                    "str"
                ]
            }
        },
        "genconfig": {
            "name": "genconfig",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/main.py": {
        "generate_config": {
            "name": "generate_config",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Callable",
                    "bool"
                ],
                "options": [
                    "click.Context",
                    "Callable",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "morpfw-master/morpfw/cli/register_admin.py": {
        "register_admin": {
            "name": "register_admin",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "bytes"
                ],
                "username": [
                    "str",
                    "Optional[Mapping]",
                    "Tuple[int, int]",
                    "dict",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "Optional[Mapping]",
                    "Tuple[int, int]",
                    "dict",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[Mapping]",
                    "Tuple[int, int]",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/scheduler.py": {
        "scheduler": {
            "name": "scheduler",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/shell.py": {
        "shell": {
            "name": "shell",
            "location": 20,
            "return": [
                "bool",
                "Callable",
                "str",
                "Hashable",
                "Exception"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "script": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "profile": {
            "name": "profile",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "script": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "script": [
                    "bool",
                    "click.Context"
                ],
                "commit": []
            }
        },
        "_start_shell": {
            "name": "_start_shell",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "script": [
                    "str",
                    "click.Context"
                ],
                "spawn_shell": [
                    "bool",
                    "str",
                    "click.Context"
                ]
            }
        },
        "_shell": {
            "name": "_shell",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vars": [
                    "str",
                    "int",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "_start_shell.commit": {
            "name": "commit",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "morpfw-master/morpfw/cli/start.py": {
        "start": {
            "name": "start",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Union[int, str, bool]"
                ],
                "host": [
                    "str",
                    "click.Context",
                    "click.HelpFormatter",
                    "bytes"
                ],
                "port": [
                    "str",
                    "click.Context",
                    "click.HelpFormatter",
                    "bytes"
                ],
                "prod": [
                    "click.Context",
                    "bool",
                    "Callable",
                    "str"
                ],
                "workers": [
                    "str",
                    "click.HelpFormatter",
                    "bytes",
                    "click.Context"
                ]
            }
        }
    },
    "morpfw-master/morpfw/cli/worker.py": {
        "start_worker": {
            "name": "start_worker",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "solo_worker": {
            "name": "solo_worker",
            "location": 24,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "worker": {
            "name": "worker",
            "location": 30,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "morpfw-master/morpfw/cli/__init__.py": {
        "run_module": {
            "name": "run_module",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argv": [
                    "list",
                    "Iterable[int]",
                    "List[float]",
                    "Tuple[int, int, int]",
                    "List[Tuple[int, Any]]",
                    "List[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "run_module_profile": {
            "name": "run_module_profile",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str",
                    "list",
                    "Dict[str, str]",
                    "Optional[str]",
                    "List[Dict[str, str]]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/app.py": {
        "App.get_storage": {
            "name": "get_storage",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "request": []
            }
        },
        "App.get_blobstorage": {
            "name": "get_blobstorage",
            "location": 44,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "request": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "App.get_config_blobstorage": {
            "name": "get_config_blobstorage",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "morepath.Request",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "App.get_config_storage": {
            "name": "get_config_storage",
            "location": 57,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "App._get_storage": {
            "name": "_get_storage",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ],
                "blobstorage": [
                    "str",
                    "dict"
                ]
            }
        },
        "App._get_storage_factory": {
            "name": "_get_storage_factory",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "App._get_blobstorage": {
            "name": "_get_blobstorage",
            "location": 80,
            "return": [
                "NullBlobStorage",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "App._get_blobstorage_factory": {
            "name": "_get_blobstorage_factory",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "App.get_authz_rule": {
            "name": "get_authz_rule",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.get_dataprovider": {
            "name": "get_dataprovider",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "obj": [
                    "str"
                ],
                "storage": [
                    "str"
                ]
            }
        },
        "App.get_jsonprovider": {
            "name": "get_jsonprovider",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[int, str]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "App.get_formvalidators": {
            "name": "get_formvalidators",
            "location": 106,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_identifierfield": {
            "name": "get_identifierfield",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Union[int, str]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "App.get_uuidfield": {
            "name": "get_uuidfield",
            "location": 114,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_default_identifier": {
            "name": "get_default_identifier",
            "location": 120,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict",
                    "int",
                    "Optional[bytes]"
                ],
                "obj": [
                    "dict",
                    "int",
                    "Optional[bytes]"
                ],
                "request": [
                    "dict",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "App.get_rulesprovider": {
            "name": "get_rulesprovider",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_statemachine": {
            "name": "get_statemachine",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_statemachine_factory": {
            "name": "get_statemachine_factory",
            "location": 132,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "bool",
                    "str",
                    "models.Model",
                    "Optional[Any]",
                    "IO"
                ]
            }
        },
        "App.get_searchprovider": {
            "name": "get_searchprovider",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_aggregateprovider": {
            "name": "get_aggregateprovider",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App.get_xattrprovider": {
            "name": "get_xattrprovider",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "App._get_metalinkprovider_by_name": {
            "name": "_get_metalinkprovider_by_name",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, str]"
                ],
                "request": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "App._get_metalinkprovider_by_model": {
            "name": "_get_metalinkprovider_by_model",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "App.get_metalink": {
            "name": "get_metalink",
            "location": 155,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Tuple[int]",
                    "Dict[str, Any]"
                ],
                "request": [
                    "str",
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "App.resolve_metalink": {
            "name": "resolve_metalink",
            "location": 159,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "Union[None, bool]",
                    "Optional[Any]",
                    "sqlalchemy.orm.Session",
                    "int"
                ],
                "request": [
                    "str",
                    "Callable",
                    "Iterable[str]"
                ]
            }
        },
        "App.get_typeinfo_factory": {
            "name": "get_typeinfo_factory",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "App.get_typeinfo": {
            "name": "get_typeinfo",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "request": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "App.get_typeinfo_by_schema": {
            "name": "get_typeinfo_by_schema",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "request": []
            }
        },
        "App.get_compositekey_separator": {
            "name": "get_compositekey_separator",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.join_identifier": {
            "name": "join_identifier",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.permits": {
            "name": "permits",
            "location": 183,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "morepath.Request"
                ],
                "context": [
                    "int"
                ],
                "permission": [
                    "int"
                ]
            }
        },
        "App.get_config": {
            "name": "get_config",
            "location": 187,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]",
                "List[Dict[str, Any]]",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "App.get_template": {
            "name": "get_template",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "App.get_template.render": {
            "name": "render",
            "location": 194,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "content": [
                    "Optional[bool]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "request": [
                    "Optional[bool]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/batching.py": {
        "CollectionBatching.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "collection": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "query": [
                    "None",
                    "bool",
                    "Tuple[int, int]"
                ],
                "order_by": [
                    "None",
                    "bool",
                    "Tuple[int, int]"
                ],
                "pagesize": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "pagenumber": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "page_opt": [
                    "typing.Text",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "CollectionBatching.items": {
            "name": "items",
            "location": 25,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionBatching.total": {
            "name": "total",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionBatching.total_pages": {
            "name": "total_pages",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionBatching.next_page": {
            "name": "next_page",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionBatching.navigator": {
            "name": "navigator",
            "location": 51,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "None",
                    "bool",
                    "float",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "float",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "CollectionBatching.navigator.get_page_url": {
            "name": "get_page_url",
            "location": 57,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "page": [
                    "List[str]",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/component.py": {
        "StorageAction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "StorageAction.identifier": {
            "name": "identifier",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "StorageAction.perform": {
            "name": "perform",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "T",
                    "dict",
                    "Dict[int, dict]"
                ],
                "app_class": [
                    "Dict[str, Any]",
                    "T",
                    "dict",
                    "Dict[int, dict]"
                ]
            }
        },
        "BlobStorageAction.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "BlobStorageAction.identifier": {
            "name": "identifier",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "BlobStorageAction.perform": {
            "name": "perform",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[int, dict]",
                    "bool"
                ],
                "app_class": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[int, dict]",
                    "bool"
                ]
            }
        },
        "DataProviderAction.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ],
                "storage": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DataProviderAction.identifier": {
            "name": "identifier",
            "location": 57,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "DataProviderAction.perform": {
            "name": "perform",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "type",
                    "Dict[str, Any]"
                ],
                "app_class": [
                    "bool",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "JSONProviderAction.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONProviderAction.identifier": {
            "name": "identifier",
            "location": 73,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "JSONProviderAction.perform": {
            "name": "perform",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type",
                    "str",
                    "bool"
                ],
                "app_class": [
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "IdentifierFieldAction.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IdentifierFieldAction.identifier": {
            "name": "identifier",
            "location": 87,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "IdentifierFieldAction.perform": {
            "name": "perform",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type",
                    "str",
                    "bool"
                ],
                "app_class": [
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "UUIDFieldAction.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UUIDFieldAction.identifier": {
            "name": "identifier",
            "location": 101,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "UUIDFieldAction.perform": {
            "name": "perform",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type",
                    "str",
                    "bool"
                ],
                "app_class": [
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "DefaultIdentifierAction.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DefaultIdentifierAction.identifier": {
            "name": "identifier",
            "location": 115,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "DefaultIdentifierAction.perform": {
            "name": "perform",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str"
                ],
                "app_class": [
                    "bool",
                    "str"
                ]
            }
        },
        "FormValidatorAction.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FormValidatorAction.identifier": {
            "name": "identifier",
            "location": 131,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "FormValidatorAction.perform": {
            "name": "perform",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type",
                    "str",
                    "bool"
                ],
                "app_class": [
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "RulesProviderAction.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "RulesProviderAction.identifier": {
            "name": "identifier",
            "location": 145,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "RulesProviderAction.perform": {
            "name": "perform",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ],
                "app_class": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "StateMachineAction.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "StateMachineAction.identifier": {
            "name": "identifier",
            "location": 159,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "StateMachineAction.perform": {
            "name": "perform",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Callable"
                ],
                "app_class": [
                    "str",
                    "int"
                ]
            }
        },
        "SearchProviderAction.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "SearchProviderAction.identifier": {
            "name": "identifier",
            "location": 180,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "SearchProviderAction.perform": {
            "name": "perform",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ],
                "app_class": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "AggregateProviderAction.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "AggregateProviderAction.identifier": {
            "name": "identifier",
            "location": 194,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "AggregateProviderAction.perform": {
            "name": "perform",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ],
                "app_class": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "XattrProviderAction.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "XattrProviderAction.identifier": {
            "name": "identifier",
            "location": 208,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "XattrProviderAction.perform": {
            "name": "perform",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ],
                "app_class": [
                    "Optional[str]",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "TypeInfoFactoryAction.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "schema": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TypeInfoFactoryAction.identifier": {
            "name": "identifier",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "Exception",
                    "type"
                ],
                "type_registry": [
                    "morpfw.crud.typeregistry.TypeRegistry"
                ]
            }
        },
        "TypeInfoFactoryAction.perform": {
            "name": "perform",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "int",
                    "Callable[[], None]",
                    "type",
                    "Dict[str, Any]"
                ],
                "app_class": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "type_registry": [
                    "morpfw.crud.typeregistry.TypeRegistry"
                ]
            }
        },
        "StorageFactoryAction.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "StorageFactoryAction.identifier": {
            "name": "identifier",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "StorageFactoryAction.perform": {
            "name": "perform",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Callable"
                ],
                "app_class": [
                    "str"
                ]
            }
        },
        "BlobStorageFactoryAction.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "BlobStorageFactoryAction.identifier": {
            "name": "identifier",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "BlobStorageFactoryAction.perform": {
            "name": "perform",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Callable"
                ],
                "app_class": [
                    "str"
                ]
            }
        },
        "MetalinkAction.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "model": [
                    "int",
                    "Sequence",
                    "bool",
                    "str"
                ]
            }
        },
        "MetalinkAction.identifier": {
            "name": "identifier",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "MetalinkAction.perform": {
            "name": "perform",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Callable"
                ],
                "app_class": [
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "AuthzRuleAction.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AuthzRuleAction.identifier": {
            "name": "identifier",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "AuthzRuleAction.perform": {
            "name": "perform",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Callable"
                ],
                "app_class": [
                    "str"
                ]
            }
        },
        "StateMachineAction.perform.factory": {
            "name": "factory",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "keanu.vertex.base.Vertex",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "TypeInfoFactoryAction.perform.factory": {
            "name": "factory",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "StorageFactoryAction.perform.factory": {
            "name": "factory",
            "location": 249,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "BlobStorageFactoryAction.perform.factory": {
            "name": "factory",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "MetalinkAction.perform.name_factory": {
            "name": "name_factory",
            "location": 286,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Callable[[str, Any], None]",
                    "Iterable[str]"
                ],
                "request": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Optional[str]"
                ]
            }
        },
        "MetalinkAction.perform.model_factory": {
            "name": "model_factory",
            "location": 293,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "model": [],
                "request": []
            }
        },
        "AuthzRuleAction.perform.factory": {
            "name": "factory",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/const.py": {},
    "morpfw-master/morpfw/crud/errors.py": {
        "UnprocessableError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FormValidationError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FieldValidationError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "message": [
                    "bool",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_errors": [
                    "Optional[List[FieldValidationError]]"
                ],
                "form_errors": [
                    "Optional[List[FormValidationError]]"
                ]
            }
        },
        "AlreadyExistsError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/field.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "None",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Field.default": {
            "name": "default",
            "location": 15,
            "return": [
                "Field",
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Field.default_factory": {
            "name": "default_factory",
            "location": 19,
            "return": [
                "Field",
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "Field.required": {
            "name": "required",
            "location": 23,
            "return": [
                "Field",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.editable": {
            "name": "editable",
            "location": 27,
            "return": [
                "Field",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "editable": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.init": {
            "name": "init",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.widget": {
            "name": "widget",
            "location": 38,
            "return": [
                "Field",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.unique": {
            "name": "unique",
            "location": 42,
            "return": [
                "Field",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/log.py": {},
    "morpfw-master/morpfw/crud/metalink.py": {
        "get_collection_metalink": {
            "name": "get_collection_metalink",
            "location": 47,
            "return": [
                "CollectionMetalinkProvider",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "get_model_metalink": {
            "name": "get_model_metalink",
            "location": 52,
            "return": [
                "ModelMetalinkProvider",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "MetalinkProvider.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "dict"
                ]
            }
        },
        "MetalinkProvider.link": {
            "name": "link",
            "location": 10,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "IO[str]",
                    "List[str]",
                    "List[dict]"
                ]
            }
        },
        "MetalinkProvider.resolve": {
            "name": "resolve",
            "location": 13,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "List[str]",
                    "Iterator[str]",
                    "str",
                    "Optional[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "CollectionMetalinkProvider.link": {
            "name": "link",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "Dict[str, Any]",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Dict[str, List[Callable]]",
                "Dict[str, str]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "view_name": [
                    "None",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CollectionMetalinkProvider.resolve": {
            "name": "resolve",
            "location": 26,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ModelMetalinkProvider.link": {
            "name": "link",
            "location": 32,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "Dict[str, Any]",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Dict[str, List[Callable]]",
                "Dict[str, str]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict"
                ],
                "view_name": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "ModelMetalinkProvider.resolve": {
            "name": "resolve",
            "location": 41,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/model.py": {
        "Collection.schema": {
            "name": "schema",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.name": {
            "name": "name",
            "location": 70,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__setitem__": {
            "name": "__setitem__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "bool"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "Collection.__getitem__": {
            "name": "__getitem__",
            "location": 81,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bytes"
                ]
            }
        },
        "Collection.__delitem__": {
            "name": "__delitem__",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bytes"
                ]
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "morepath.Request"
                ],
                "storage": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Mapping"
                ],
                "data": [
                    "None",
                    "aiohttp.web.Request",
                    "dict",
                    "Optional[dict]",
                    "Request",
                    "Optional[str]"
                ]
            }
        },
        "Collection.search": {
            "name": "search",
            "location": 100,
            "return": [
                "list",
                "str",
                "List[str]",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "offset": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "Set[str]"
                ],
                "order_by": [
                    "None",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "secure": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Collection.all": {
            "name": "all",
            "location": 118,
            "return": [
                "str",
                "List[str]",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.count": {
            "name": "count",
            "location": 122,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "Optional[bool]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.max_id": {
            "name": "max_id",
            "location": 128,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.min_id": {
            "name": "min_id",
            "location": 134,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._search": {
            "name": "_search",
            "location": 139,
            "return": [
                "list",
                "str",
                "List[str]",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "Dict[str, str]"
                ],
                "offset": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "limit": [
                    "None",
                    "str",
                    "List[str]"
                ],
                "order_by": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[list]"
                ],
                "secure": [
                    "bool",
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "Collection.aggregate": {
            "name": "aggregate",
            "location": 160,
            "return": [
                "list",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "group": [
                    "None",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "order_by": [
                    "None",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "limit": [
                    "None",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Collection.searchprovider": {
            "name": "searchprovider",
            "location": 167,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.aggregateprovider": {
            "name": "aggregateprovider",
            "location": 172,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.create": {
            "name": "create",
            "location": 177,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "deserialize": [
                    "bool",
                    "dict",
                    "bytes",
                    "Dict[str, str]"
                ],
                "secure": [
                    "bool",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "Collection.update_computed_fields": {
            "name": "update_computed_fields",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "Collection._create": {
            "name": "_create",
            "location": 237,
            "return": [
                "bool",
                "int",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "Collection.get": {
            "name": "get",
            "location": 241,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Dict[int, dict]"
                ]
            }
        },
        "Collection.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 247,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Collection.json": {
            "name": "json",
            "location": 250,
            "return": [
                "int",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.links": {
            "name": "links",
            "location": 256,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection._links": {
            "name": "_links",
            "location": 270,
            "return": [
                "list",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.hidden_fields": {
            "name": "hidden_fields",
            "location": 285,
            "return": [
                "set",
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__setitem__": {
            "name": "__setitem__",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "Model.__getitem__": {
            "name": "__getitem__",
            "location": 298,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "typesystem.schemas.Schema.Definitions",
                    "Tuple[str, str]"
                ]
            }
        },
        "Model.__delitem__": {
            "name": "__delitem__",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "typesystem.schemas.Schema.Definitions",
                    "Tuple[str, str]"
                ]
            }
        },
        "Model.__dict__": {
            "name": "__dict__",
            "location": 307,
            "return": [
                "Dict[str, Any]",
                "pypi2nix.logger.Logger",
                "Sequence",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.title": {
            "name": "title",
            "location": 310,
            "return": [
                "typing.Text",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.statemachine_view_enabled": {
            "name": "statemachine_view_enabled",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.xattr_view_enabled": {
            "name": "xattr_view_enabled",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.schema": {
            "name": "schema",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.identifier": {
            "name": "identifier",
            "location": 337,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.uuid": {
            "name": "uuid",
            "location": 353,
            "return": [
                "str",
                "bool",
                "List[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "morepath.Request",
                    "Request",
                    "Dict[str, Any]"
                ],
                "collection": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "data": [
                    "Optional[str]",
                    "aiohttp.web.Request",
                    "morepath.Request",
                    "Request"
                ]
            }
        },
        "Model.is_editable": {
            "name": "is_editable",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.update": {
            "name": "update",
            "location": 373,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict",
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "secure": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]"
                ],
                "deserialize": [
                    "bool",
                    "dict",
                    "Dict[str, float]",
                    "bytes"
                ]
            }
        },
        "Model.update_computed_fields": {
            "name": "update_computed_fields",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Model.delete": {
            "name": "delete",
            "location": 430,
            "return": [
                "None",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.save": {
            "name": "save",
            "location": 457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._base_json": {
            "name": "_base_json",
            "location": 465,
            "return": [
                "dict",
                "Dict[str, Any]",
                "OrderedDict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "exclude_metadata": [
                    "bool",
                    "T",
                    "Mapping[str, Any]",
                    "list",
                    "int"
                ]
            }
        },
        "Model.base_json": {
            "name": "base_json",
            "location": 480,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.data_json": {
            "name": "data_json",
            "location": 484,
            "return": [
                "Optional[int]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._json": {
            "name": "_json",
            "location": 487,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.json": {
            "name": "json",
            "location": 490,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool",
                "dict",
                "List[List[int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.as_json": {
            "name": "as_json",
            "location": 495,
            "return": [
                "str",
                "OrderedDict",
                "Callable",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.as_dict": {
            "name": "as_dict",
            "location": 498,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.links": {
            "name": "links",
            "location": 502,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._links": {
            "name": "_links",
            "location": 524,
            "return": [
                "list",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.rulesprovider": {
            "name": "rulesprovider",
            "location": 528,
            "return": [
                "Dict[str, str]",
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.statemachine": {
            "name": "statemachine",
            "location": 532,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.state_title": {
            "name": "state_title",
            "location": 538,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.state": {
            "name": "state",
            "location": 545,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.xattrprovider": {
            "name": "xattrprovider",
            "location": 552,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.set_initial_state": {
            "name": "set_initial_state",
            "location": 557,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._blob_guard": {
            "name": "_blob_guard",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Model.put_blob": {
            "name": "put_blob",
            "location": 570,
            "return": [
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, float]",
                    "str",
                    "Union[str, Callable]",
                    "bytes"
                ],
                "fileobj": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "mimetype": [
                    "None",
                    "str",
                    "float"
                ],
                "size": [
                    "None",
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "Model.get_blob": {
            "name": "get_blob",
            "location": 589,
            "return": [
                "None",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "dict",
                "Optional[bool]",
                "bool",
                "Optional[Any]",
                "Optional[int]",
                "List[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "Model.delete_blob": {
            "name": "delete_blob",
            "location": 600,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "interfaces.Section"
                ]
            }
        },
        "Model.references": {
            "name": "references",
            "location": 613,
            "return": [
                "dict",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.backreferences": {
            "name": "backreferences",
            "location": 621,
            "return": [
                "dict",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.resolve_reference": {
            "name": "resolve_reference",
            "location": 629,
            "return": [
                "str",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "str",
                    "List[List[int]]",
                    "int",
                    "bool",
                    "Tuple[int, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Model.resolve_backreference": {
            "name": "resolve_backreference",
            "location": 633,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "backreference": [
                    "bool",
                    "Optional[int]",
                    "Dict[int, dict]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/permission.py": {},
    "morpfw-master/morpfw/crud/pubsub.py": {
        "_dispatch_subscribe": {
            "name": "_dispatch_subscribe",
            "location": 8,
            "return": [
                "Union[(functools.partial, _T1)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T1"
                ]
            }
        },
        "_dispatch_publish": {
            "name": "_dispatch_publish",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_dispatchmethod_publish": {
            "name": "_dispatchmethod_publish",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "_registry_subscribe": {
            "name": "_registry_subscribe",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "Union[Callable[[Dict], Hashable], str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/relationship.py": {
        "Reference.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ]
            }
        },
        "Reference.collection": {
            "name": "collection",
            "location": 20,
            "return": [
                "str",
                "float",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Reference.get_title": {
            "name": "get_title",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "str"
                ]
            }
        },
        "ReferenceResolver.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "context": [
                    "bool",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "Sequence[str]",
                    "str"
                ],
                "reference": [
                    "Reference"
                ]
            }
        },
        "ReferenceResolver.resolve": {
            "name": "resolve",
            "location": 35,
            "return": [
                "None",
                "str",
                "type",
                "List[str]",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackReference.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ],
                "reference_name": [
                    "str"
                ]
            }
        },
        "BackReference.collection": {
            "name": "collection",
            "location": 62,
            "return": [
                "str",
                "float",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "BackReference.get_title": {
            "name": "get_title",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "str"
                ]
            }
        },
        "BackReference.get_reference": {
            "name": "get_reference",
            "location": 69,
            "return": [
                "str",
                "List[str]",
                "List[Dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BackReferenceResolver.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": [],
                "backreference": [
                    "BackReference"
                ]
            }
        },
        "BackReferenceResolver.resolve": {
            "name": "resolve",
            "location": 86,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/schema.py": {
        "identifierfield": {
            "name": "identifierfield",
            "location": 117,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "default_identifier": {
            "name": "default_identifier",
            "location": 122,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Iterator"
                ],
                "obj": [
                    "str"
                ],
                "request": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "BaseSchema.validate": {
            "name": "validate",
            "location": 21,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "request": [
                    "int"
                ],
                "data": [
                    "bytes"
                ],
                "deserialize": [
                    "bool",
                    "memoryview",
                    "int"
                ],
                "json": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "update_mode": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/signals.py": {
        "_get_identifier": {
            "name": "_get_identifier",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "construct_key": {
            "name": "construct_key",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "signal": [
                    "str"
                ],
                "app": [
                    "float",
                    "bool",
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Connect.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "signal": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Connect.identifier": {
            "name": "identifier",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_class": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Connect.perform": {
            "name": "perform",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[str, int]",
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "app_class": [
                    "Union[str, int]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "signal": [
                    "str"
                ]
            }
        },
        "Dispatcher.dispatch": {
            "name": "dispatch",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "SignalApp._events": {
            "name": "_events",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "obj": [
                    "str"
                ],
                "signal": [
                    "str"
                ]
            }
        },
        "SignalApp.dispatcher": {
            "name": "dispatcher",
            "location": 61,
            "return": [
                "Dispatcher"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/subscribers.py": {
        "set_uuid": {
            "name": "set_uuid",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "request": [],
                "obj": [
                    "dict"
                ],
                "signal": []
            }
        },
        "set_created": {
            "name": "set_created",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "request": [],
                "obj": [
                    "dict"
                ],
                "signal": []
            }
        },
        "set_creator": {
            "name": "set_creator",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "request": [
                    "Union[dict, list]",
                    "Iterator",
                    "dict"
                ],
                "obj": [
                    "dict",
                    "Tuple[int]"
                ],
                "signal": []
            }
        },
        "set_modified": {
            "name": "set_modified",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "request": [],
                "obj": [
                    "str",
                    "bool"
                ],
                "signal": []
            }
        }
    },
    "morpfw-master/morpfw/crud/typeregistry.py": {
        "TypeRegistry.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeRegistry.register_type": {
            "name": "register_type",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[Any]",
                    "Collection",
                    "Type[T]",
                    "Tuple[Type]",
                    "Union[dict, str]"
                ],
                "schema": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "TypeRegistry.get_typeinfo": {
            "name": "get_typeinfo",
            "location": 16,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "request": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TypeRegistry.get_typeinfos": {
            "name": "get_typeinfos",
            "location": 29,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "TypeRegistry.get_typeinfo_by_schema": {
            "name": "get_typeinfo_by_schema",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict",
                    "str"
                ],
                "request": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/types.py": {
        "datestr.datetime": {
            "name": "datetime",
            "location": 5,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/util.py": {
        "resolve_model": {
            "name": "resolve_model",
            "location": 11,
            "return": [
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "request": []
            }
        },
        "generate_default": {
            "name": "generate_default",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/validator.py": {
        "get_data": {
            "name": "get_data",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]",
                    "str",
                    "int"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]",
                    "str",
                    "int"
                ]
            }
        },
        "regex_validator": {
            "name": "regex_validator",
            "location": 17,
            "return": [
                "Callable"
            ],
            "arguments": {
                "pattern": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 27,
            "return": [
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "validator": [
                    "dict",
                    "int"
                ],
                "schema": [
                    "Optional[str]",
                    "int",
                    "IO",
                    "dict"
                ],
                "request": []
            }
        },
        "validate_schema": {
            "name": "validate_schema",
            "location": 44,
            "return": [
                "functools.partial"
            ],
            "arguments": {
                "validator": [
                    "str",
                    "bool"
                ],
                "schema": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "regex_validator._regex_validator": {
            "name": "_regex_validator",
            "location": 20,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "Callable[..., None]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "request": [
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Iterable",
                    "str"
                ],
                "schema": [
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Iterable",
                    "str"
                ],
                "field": [
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Iterable",
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ],
                "mode": [
                    "None",
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Iterable",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/view.py": {
        "get_collection_data": {
            "name": "get_collection_data",
            "location": 29,
            "return": [
                "int",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Union[str, int]]"
                ],
                "request": [
                    "requests.Request",
                    "scrapy.http.Request",
                    "str"
                ]
            }
        },
        "schema": {
            "name": "schema",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "requests.Request",
                    "Set[str]"
                ],
                "request": []
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "Mapping",
                    "dict",
                    "app.models.Position",
                    "Dict[str, Union[Any, int]]"
                ],
                "request": [
                    "int",
                    "Dict[str, Any]",
                    "aiohttp.web.Request",
                    "Request",
                    "requests.Request"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 69,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "context": [
                    "Mapping",
                    "dict"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "flask.Request",
                    "scrapy.http.Request",
                    "Dict[str, Any]",
                    "requests.Request"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 149,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "context": [
                    "aiohttp.web.Request"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "scrapy.http.Request"
                ]
            }
        },
        "get_obj_data": {
            "name": "get_obj_data",
            "location": 157,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "List[str]"
                ],
                "request": [
                    "fausweb.Request",
                    "dict"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 164,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str, Any]"
                ],
                "request": [
                    "dict",
                    "_models.Request",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 174,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "statemachine": {
            "name": "statemachine",
            "location": 188,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Hashable",
                "model.Integration",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "requests.Request",
                    "Set[str]"
                ],
                "request": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 219,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "context": [],
                "request": [
                    "int",
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "get_blob": {
            "name": "get_blob",
            "location": 228,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "Optional[int]",
                    "Optional[bytes]",
                    "Optional[float]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request",
                    "str",
                    "_models.Request",
                    "dict"
                ]
            }
        },
        "put_blob": {
            "name": "put_blob",
            "location": 245,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "bool",
                    "Mapping[str, str]"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "Dict[str, Any]",
                    "pyppeteer.network_manager.Request",
                    "Request"
                ]
            }
        },
        "delete_blob": {
            "name": "delete_blob",
            "location": 270,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "context": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "dict"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "starlette.requests.Request",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_xattr_schema": {
            "name": "get_xattr_schema",
            "location": 284,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "List[str]"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "get_xattr": {
            "name": "get_xattr",
            "location": 293,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "List[str]"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "set_xattr": {
            "name": "set_xattr",
            "location": 302,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "context": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "alreadyexists_error": {
            "name": "alreadyexists_error",
            "location": 312,
            "return": [
                "Dict[str, Any]",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "context": [
                    "Set[str]",
                    "requests.Request",
                    "aiohttp.web.Request",
                    "str"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "forbidden_error": {
            "name": "forbidden_error",
            "location": 328,
            "return": [
                "dict[typing.Text, typing.Text]",
                "model.Integration",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "httpnotfound_error": {
            "name": "httpnotfound_error",
            "location": 339,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "validation_error": {
            "name": "validation_error",
            "location": 348,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, ]]]]",
                "Dict[str, Any]",
                "str",
                "type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "aiohttp.web.Request"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "field_validation_error": {
            "name": "field_validation_error",
            "location": 368,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list]]",
                "str",
                "Optional[type]",
                "Dict[str, Any]",
                "Mapping[Tuple[str, str], Any]"
            ],
            "arguments": {
                "context": [
                    "aiohttp.web.Request",
                    "resttesmodels.Request",
                    "str"
                ],
                "request": [
                    "apistar.http.Request",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "str"
                ]
            }
        },
        "statemachine_error": {
            "name": "statemachine_error",
            "location": 379,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bytes",
                    "falcon.Request"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "stateupdateprohibited_error": {
            "name": "stateupdateprohibited_error",
            "location": 388,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "internalserver_error": {
            "name": "internalserver_error",
            "location": 400,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "logging.LogRecord"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "unprocessable_error": {
            "name": "unprocessable_error",
            "location": 416,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bool",
                "model.Integration",
                "dict",
                "Callable"
            ],
            "arguments": {
                "context": [
                    "Set[str]",
                    "requests.Request",
                    "aiohttp.web.Request",
                    "str"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "alreadyexists_error.adjust_status": {
            "name": "adjust_status",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "forbidden_error.adjust_status": {
            "name": "adjust_status",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "httpnotfound_error.adjust_status": {
            "name": "adjust_status",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "validation_error.adjust_status": {
            "name": "adjust_status",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "field_validation_error.adjust_status": {
            "name": "adjust_status",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "statemachine_error.adjust_status": {
            "name": "adjust_status",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "stateupdateprohibited_error.adjust_status": {
            "name": "adjust_status",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "internalserver_error.adjust_status": {
            "name": "adjust_status",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "unprocessable_error.adjust_status": {
            "name": "adjust_status",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "List[dict]"
                ]
            }
        },
        "statemachine.adjust_status": {
            "name": "adjust_status",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "morpfw-master/morpfw/crud/workflow.py": {
        "WorkflowModel.transition": {
            "name": "transition",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "int"
                ],
                "model": [
                    "int"
                ]
            }
        },
        "WorkflowModel._apply_transition": {
            "name": "_apply_transition",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "request": []
            }
        },
        "WorkflowModel.process": {
            "name": "process",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WorkflowModel.transition.apply_transition": {
            "name": "apply_transition",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/__init__.py": {},
    "morpfw-master/morpfw/crud/aggregateprovider/base.py": {
        "AggregateProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, List[int]]",
                    "int",
                    "bytes"
                ]
            }
        },
        "AggregateProvider._parse": {
            "name": "_parse",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str"
                ]
            }
        },
        "AggregateProvider.parse_query": {
            "name": "parse_query",
            "location": 38,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "AggregateProvider.parse_group": {
            "name": "parse_group",
            "location": 49,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/aggregateprovider/storageaggregateprovider.py": {
        "get_aggregateprovider": {
            "name": "get_aggregateprovider",
            "location": 14,
            "return": [
                "StorageAggregateProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "StorageAggregateProvider.aggregate": {
            "name": "aggregate",
            "location": 7,
            "return": [
                "int",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "dict",
                    "str"
                ],
                "group": [
                    "None",
                    "dict",
                    "str"
                ],
                "order_by": [
                    "None",
                    "dict",
                    "str"
                ],
                "limit": [
                    "None",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/aggregateprovider/__init__.py": {},
    "morpfw-master/morpfw/crud/blobstorage/base.py": {
        "Blob.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "None",
                    "str",
                    "bool"
                ],
                "size": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "List[AnyStr]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "float",
                    "int",
                    "bytes",
                    "Dict[str, str]"
                ],
                "sha256sum": [
                    "None",
                    "int",
                    "Iterator[int]",
                    "str",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "Blob.get_size": {
            "name": "get_size",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "NullBlobStorage.put": {
            "name": "put",
            "location": 63,
            "return": [
                "Blob"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "BinaryIO"
                ],
                "filename": [
                    "str"
                ],
                "mimetype": [
                    "Optional[str]"
                ],
                "size": [
                    "Optional[int]"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "uuid": [
                    "Optional[str]"
                ]
            }
        },
        "NullBlobStorage.get": {
            "name": "get",
            "location": 74,
            "return": [
                "Optional[Blob]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "NullBlobStorage.delete": {
            "name": "delete",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/blobstorage/fsblobstorage.py": {
        "get_fsblobstorage": {
            "name": "get_fsblobstorage",
            "location": 113,
            "return": [
                "str",
                "FSBlobStorage"
            ],
            "arguments": {
                "request": [],
                "uri": [
                    "Iterable[int]"
                ]
            }
        },
        "FSBlob.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "FSBlob.open": {
            "name": "open",
            "location": 25,
            "return": [
                "typing.IO",
                "pathlib.Path",
                "path.Path",
                "str",
                "uuid.UUID",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSBlob.get_size": {
            "name": "get_size",
            "location": 28,
            "return": [
                "str",
                "types.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSBlobStorage.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "str",
                    "pathlib.Path",
                    "List[Dict]",
                    "bool"
                ],
                "path": [
                    "str",
                    "path.Path",
                    "List[str]"
                ]
            }
        },
        "FSBlobStorage._uuid_path": {
            "name": "_uuid_path",
            "location": 38,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "float"
                ]
            }
        },
        "FSBlobStorage._meta_path": {
            "name": "_meta_path",
            "location": 43,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "obj_path": [
                    "pathlib.Path",
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "FSBlobStorage.put": {
            "name": "put",
            "location": 46,
            "return": [
                "FSBlob",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "bytes",
                    "os.stat_result",
                    "str",
                    "pathlib.Path"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "mimetype": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "size": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "uuid": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Set[int]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[float]"
                ]
            }
        },
        "FSBlobStorage.get": {
            "name": "get",
            "location": 87,
            "return": [
                "None",
                "Optional[int]",
                "FSBlob",
                "bool",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "FSBlobStorage.delete": {
            "name": "delete",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/blobstorage/typeblobstorage.py": {
        "TypeBlobStoreCollection._create": {
            "name": "_create",
            "location": 39,
            "return": [
                "bool",
                "int",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ]
            }
        },
        "TypeBlobStoreModel.__setitem__": {
            "name": "__setitem__",
            "location": 48,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "int",
                    "T",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "TypeBlobStoreModel.__getitem__": {
            "name": "__getitem__",
            "location": 61,
            "return": [
                "dict[typing.Text, BytesIO]",
                "Callable[[Any], bool]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "TypeBlobStoreModel.__delitem__": {
            "name": "__delitem__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "TypeBlobStoreModel.__dict__": {
            "name": "__dict__",
            "location": 82,
            "return": [
                "str",
                "bytes",
                "Union[int, float, complex]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeBlob.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypeBlob.open": {
            "name": "open",
            "location": 103,
            "return": [
                "BytesIO",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeBlob.get_size": {
            "name": "get_size",
            "location": 106,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeBlobStorage.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "Sequence[Dict[str, str]]"
                ],
                "type_name": [
                    "str",
                    "Callable[..., T]",
                    "bool",
                    "Optional[str]",
                    "sqlalchemy.MetaData"
                ]
            }
        },
        "TypeBlobStorage.put": {
            "name": "put",
            "location": 117,
            "return": [
                "TypeBlob",
                "str",
                "Type[Any]",
                "Tuple[str, str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "Path"
                ],
                "filename": [
                    "str",
                    "int"
                ],
                "mimetype": [
                    "None",
                    "str",
                    "int"
                ],
                "size": [
                    "None",
                    "str",
                    "int"
                ],
                "encoding": [
                    "None",
                    "str",
                    "int"
                ],
                "uuid": [
                    "None",
                    "Optional[str]",
                    "list",
                    "Set[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "TypeBlobStorage.get": {
            "name": "get",
            "location": 152,
            "return": [
                "bool",
                "None",
                "TypeBlob"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TypeBlobStorage.delete": {
            "name": "delete",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/blobstorage/__init__.py": {},
    "morpfw-master/morpfw/crud/dataprovider/dictprovider.py": {
        "get_dataprovider": {
            "name": "get_dataprovider",
            "location": 99,
            "return": [
                "DictProvider",
                "int",
                "apistar.types.WSGIEnviron",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "bool"
                ],
                "obj": [
                    "str",
                    "bool"
                ],
                "storage": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_jsonprovider": {
            "name": "get_jsonprovider",
            "location": 104,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "DictProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping",
                    "bytes",
                    "list"
                ],
                "storage": [
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "DictProvider.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "str",
                "None",
                "dict",
                "Dict[str, bool]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Mapping",
                    "int",
                    "dict"
                ]
            }
        },
        "DictProvider.__setitem__": {
            "name": "__setitem__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "Tuple[Dict[str, Any], int]",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "DictProvider.__delitem__": {
            "name": "__delitem__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "DictProvider.setdefault": {
            "name": "setdefault",
            "location": 59,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "DictProvider.get": {
            "name": "get",
            "location": 68,
            "return": [
                "bool",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "default": [
                    "list",
                    "str",
                    "int",
                    "type",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "DictProvider.set": {
            "name": "set",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Callable[[None], Any]",
                    "VT",
                    "KT",
                    "List[str]"
                ]
            }
        },
        "DictProvider.items": {
            "name": "items",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "OrderedDict",
                "dict",
                "Iterable[Sequence[str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictProvider.keys": {
            "name": "keys",
            "location": 84,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictProvider.as_dict": {
            "name": "as_dict",
            "location": 87,
            "return": [
                "dict",
                "list",
                "Tuple[int, Dict[str, Any]]",
                "List[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictProvider.as_json": {
            "name": "as_json",
            "location": 93,
            "return": [
                "bool",
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/dataprovider/esdictprovider.py": {
        "get_dataprovider": {
            "name": "get_dataprovider",
            "location": 13,
            "return": [
                "ElasticSearchProvider",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Tuple[int]"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Tuple[int]"
                ],
                "obj": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Tuple[int]"
                ],
                "storage": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Tuple[int]"
                ]
            }
        },
        "_deserialize": {
            "name": "_deserialize",
            "location": 20,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Optional[int]"
                ],
                "key": [
                    "str",
                    "Optional[int]"
                ],
                "value": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/dataprovider/samodelprovider.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 25,
            "return": [
                "Callable",
                "dict",
                "str",
                "Optional[str]",
                "app.models.user.UserInDB"
            ],
            "arguments": {
                "datestr": [
                    "str"
                ]
            }
        },
        "get_provider": {
            "name": "get_provider",
            "location": 157,
            "return": [
                "SQLAlchemyModelProvider",
                "list",
                "str",
                "Callable"
            ],
            "arguments": {
                "schema": [
                    "list",
                    "str",
                    "Callable"
                ],
                "obj": [
                    "list",
                    "str",
                    "Callable"
                ],
                "storage": [
                    "list",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_dict_provider": {
            "name": "get_dict_provider",
            "location": 162,
            "return": [
                "DictProvider",
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "Callable"
                ],
                "obj": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "Callable"
                ],
                "storage": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_jsonprovider": {
            "name": "get_jsonprovider",
            "location": 167,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "SQLAlchemyModelProvider.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytearray",
                    "str",
                    "T",
                    "allennlp.common.util.JsonDict",
                    "bytes"
                ],
                "storage": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "dict",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "SQLAlchemyModelProvider.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "VT"
                ]
            }
        },
        "SQLAlchemyModelProvider.__setitem__": {
            "name": "__setitem__",
            "location": 74,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "T",
                    "Hashable",
                    "KT",
                    "Optional[Container[str]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Callable[[], T]",
                    "datetime.date",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SQLAlchemyModelProvider.__delitem__": {
            "name": "__delitem__",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SQLAlchemyModelProvider.setdefault": {
            "name": "setdefault",
            "location": 89,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "SQLAlchemyModelProvider.get": {
            "name": "get",
            "location": 94,
            "return": [
                "list",
                "str",
                "None",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list",
                    "bool"
                ],
                "default": [
                    "list",
                    "str",
                    "Union[None, str, int]",
                    "Optional[str]"
                ]
            }
        },
        "SQLAlchemyModelProvider.set": {
            "name": "set",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "Union[str, uuid.UUID]"
                ],
                "value": [
                    "bool",
                    "str",
                    "Union[str, uuid.UUID]"
                ]
            }
        },
        "SQLAlchemyModelProvider.items": {
            "name": "items",
            "location": 116,
            "return": [
                "list[tuple]",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyModelProvider.keys": {
            "name": "keys",
            "location": 123,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyModelProvider.as_dict": {
            "name": "as_dict",
            "location": 126,
            "return": [
                "dict",
                "list",
                "Tuple[int, Dict[str, Any]]",
                "List[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyModelProvider.as_json": {
            "name": "as_json",
            "location": 137,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/dataprovider/__init__.py": {},
    "morpfw-master/morpfw/crud/rulesprovider/base.py": {
        "RulesProvider.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[int, dict]",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/rulesprovider/__init__.py": {},
    "morpfw-master/morpfw/crud/searchprovider/base.py": {
        "SearchProvider.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, List[int]]",
                    "int",
                    "bytes"
                ]
            }
        },
        "SearchProvider.parse_query": {
            "name": "parse_query",
            "location": 14,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "qs": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/searchprovider/storagesearchprovider.py": {
        "get_searchprovider": {
            "name": "get_searchprovider",
            "location": 12,
            "return": [
                "StorageSearchProvider",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Tuple[int]"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Tuple[int]"
                ]
            }
        },
        "StorageSearchProvider.search": {
            "name": "search",
            "location": 7,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "int"
                ],
                "offset": [
                    "int",
                    "str"
                ],
                "limit": [
                    "None",
                    "str",
                    "int"
                ],
                "order_by": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/searchprovider/__init__.py": {},
    "morpfw-master/morpfw/crud/statemachine/base.py": {
        "StateMachine.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ]
            }
        },
        "StateMachine._get_state": {
            "name": "_get_state",
            "location": 29,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine._set_state": {
            "name": "_set_state",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "StateMachine.get_triggers": {
            "name": "get_triggers",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.is_readonly": {
            "name": "is_readonly",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/statemachine/__init__.py": {},
    "morpfw-master/morpfw/crud/storage/base.py": {
        "BaseStorage.model": {
            "name": "model",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStorage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "blobstorage": [
                    "None",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "BaseStorage.set_identifier": {
            "name": "set_identifier",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "float"
                ],
                "identifier": [
                    "bool",
                    "float"
                ]
            }
        },
        "BaseStorage.set_schema_defaults": {
            "name": "set_schema_defaults",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Awaitable",
                    "int"
                ]
            }
        },
        "BaseStorage._blob_guard": {
            "name": "_blob_guard",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStorage.get_blob": {
            "name": "get_blob",
            "location": 60,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseStorage.put_blob": {
            "name": "put_blob",
            "location": 64,
            "return": [
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "int",
                    "str",
                    "bytearray",
                    "List[int]",
                    "float"
                ],
                "filename": [
                    "int",
                    "str",
                    "bytearray",
                    "List[int]",
                    "float"
                ],
                "mimetype": [
                    "None",
                    "int",
                    "str",
                    "bytearray",
                    "List[int]",
                    "float"
                ],
                "size": [
                    "None",
                    "int",
                    "str",
                    "bytearray",
                    "List[int]",
                    "float"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str",
                    "bytearray",
                    "List[int]",
                    "float"
                ]
            }
        },
        "BaseStorage.delete_blob": {
            "name": "delete_blob",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/storage/elasticsearchstorage.py": {
        "is_text_mapping": {
            "name": "is_text_mapping",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "collection": [
                    "bool",
                    "str",
                    "Callable",
                    "List[float]"
                ],
                "field": [
                    "bool",
                    "str",
                    "Callable",
                    "List[float]"
                ]
            }
        },
        "AggGroup.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "MutableMapping"
                ],
                "field": [
                    "str",
                    "bool",
                    "Set[str]",
                    "int",
                    "list"
                ],
                "type": [
                    "typing.Text",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Callable"
                ],
                "opts": [
                    "None",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Callable"
                ],
                "children": [
                    "None",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "AggGroup.parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "list",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Set[VT]",
                    "Mapping[str, str]",
                    "Dict[str, Tuple[int, int]]"
                ],
                "parents": [
                    "None",
                    "str",
                    "complex",
                    "bytes",
                    "Mapping",
                    "bool"
                ]
            }
        },
        "AggGroup.json": {
            "name": "json",
            "location": 49,
            "return": [
                "dict[, typing.Union[dict[, dict[typing.Text, ]],dict[typing.Text, ]]]",
                "str",
                "Optional[str]",
                "bytes",
                "Set[str]",
                "Deque[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggValue.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "dict",
                    "object"
                ],
                "function": [
                    "str",
                    "Optional[float]",
                    "int",
                    "bool"
                ],
                "field": [
                    "dict",
                    "str",
                    "list",
                    "Sequence[Any]",
                    "Callable"
                ]
            }
        },
        "AggValue.parse": {
            "name": "parse",
            "location": 70,
            "return": [
                "dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Mapping[str, str]",
                    "dict",
                    "Type[object]"
                ],
                "parents": [
                    "None",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "AggValue.json": {
            "name": "json",
            "location": 78,
            "return": [
                "dict",
                "bool",
                "dict[, dict[, dict[typing.Text, ]]]",
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.add_group": {
            "name": "add_group",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "Dict[str, Any]",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "KT"
                ],
                "field": [
                    "int",
                    "Dict[str, Any]",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "KT"
                ],
                "type": [
                    "typing.Text",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "KT"
                ],
                "opts": [
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[object]",
                    "Optional[Mapping]",
                    "KT"
                ]
            }
        },
        "Aggregate.add": {
            "name": "add",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Iterable",
                    "Optional[Iterable]",
                    "str",
                    "object"
                ],
                "function": [
                    "Iterable",
                    "Optional[Iterable]",
                    "str",
                    "object"
                ],
                "field": [
                    "Iterable",
                    "Optional[Iterable]",
                    "str",
                    "object"
                ]
            }
        },
        "Aggregate.finalize": {
            "name": "finalize",
            "location": 101,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.json": {
            "name": "json",
            "location": 127,
            "return": [
                "dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregate.parse": {
            "name": "parse",
            "location": 134,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ElasticSearchStorage.index_name": {
            "name": "index_name",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchStorage.client": {
            "name": "client",
            "location": 163,
            "return": [
                "Dict[str, List[Callable]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchStorage.create_index": {
            "name": "create_index",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "recreate": [
                    "bool",
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ElasticSearchStorage.update_index": {
            "name": "update_index",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "ElasticSearchStorage.create": {
            "name": "create",
            "location": 210,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "ElasticSearchStorage.search": {
            "name": "search",
            "location": 235,
            "return": [
                "list",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "query": [
                    "None",
                    "Optional[int]",
                    "str",
                    "Sized",
                    "Optional[bool]"
                ],
                "offset": [
                    "None",
                    "Optional[Union[str, Any]]",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "limit": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "Optional[float]"
                ],
                "order_by": [
                    "List[str]",
                    "list",
                    "Dict[str, str]",
                    "str",
                    "tuple"
                ]
            }
        },
        "ElasticSearchStorage.aggregate": {
            "name": "aggregate",
            "location": 273,
            "return": [
                "list",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ],
                "group": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "Type[T]"
                ],
                "order_by": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "limit": [
                    "None",
                    "int",
                    "str",
                    "Type",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[float]"
                ]
            }
        },
        "ElasticSearchStorage.get": {
            "name": "get",
            "location": 443,
            "return": [
                "None",
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "float",
                    "Mapping"
                ],
                "identifier": [
                    "str",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "ElasticSearchStorage.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 461,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[List[str]]",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "dict",
                    "int"
                ],
                "uuid": [
                    "str",
                    "int"
                ]
            }
        },
        "ElasticSearchStorage.get_by_id": {
            "name": "get_by_id",
            "location": 470,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "ElasticSearchStorage.update": {
            "name": "update",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "Mapping[str, Any]"
                ],
                "identifier": [
                    "dict"
                ],
                "data": [
                    "Mapping[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "ElasticSearchStorage.delete": {
            "name": "delete",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ],
                "model": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/storage/memorystorage.py": {
        "MemoryStorage.datastore": {
            "name": "datastore",
            "location": 16,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStorage.typekey": {
            "name": "typekey",
            "location": 20,
            "return": [
                "str",
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStorage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Callable[..., Coroutine]",
                    "fausweb.Request"
                ],
                "blobstorage": [
                    "None",
                    "int",
                    "Callable[..., Coroutine]",
                    "fausweb.Request"
                ]
            }
        },
        "MemoryStorage.create": {
            "name": "create",
            "location": 27,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MemoryStorage.aggregate": {
            "name": "aggregate",
            "location": 37,
            "return": [
                "List[Dict[(Any, int)]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "bytes"
                ],
                "group": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "T",
                    "Mapping[str, Dict[str, Any]]"
                ],
                "order_by": [
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]",
                    "Union[None, list, tuple]"
                ],
                "limit": [
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "MemoryStorage.search": {
            "name": "search",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool"
                ],
                "query": [
                    "None",
                    "Optional[int]",
                    "str",
                    "Sized",
                    "Optional[bool]"
                ],
                "offset": [
                    "None",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Tuple[int, int]",
                    "Optional[Sequence]"
                ],
                "limit": [
                    "None",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Tuple[int, int]",
                    "Optional[Sequence]"
                ],
                "order_by": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "dict"
                ]
            }
        },
        "MemoryStorage.get": {
            "name": "get",
            "location": 73,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "identifier": [
                    "List[str]",
                    "float"
                ]
            }
        },
        "MemoryStorage.get_by_id": {
            "name": "get_by_id",
            "location": 80,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "MemoryStorage.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 94,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "uuid": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "MemoryStorage.update": {
            "name": "update",
            "location": 108,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "identifier": [
                    "dict",
                    "str",
                    "type"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "MemoryStorage.delete": {
            "name": "delete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "List[str]"
                ],
                "model": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/storage/pgsqlstorage.py": {
        "construct_orm_model": {
            "name": "construct_orm_model",
            "location": 27,
            "return": [
                "Table",
                "float",
                "str",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "metadata": [
                    "str",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "PgSQLStorage.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Callable[..., Coroutine]"
                ],
                "metadata": [
                    "None",
                    "float",
                    "routemaster.state_machine.types.Metadata"
                ],
                "blobstorage": [
                    "None",
                    "int",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "PgSQLStorage.orm_model": {
            "name": "orm_model",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/storage/sqlstorage.py": {
        "SQLStorage.orm_model": {
            "name": "orm_model",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLStorage.session": {
            "name": "session",
            "location": 33,
            "return": [
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLStorage.create": {
            "name": "create",
            "location": 36,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "dict",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "Dict[str, str]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "SQLStorage.aggregate": {
            "name": "aggregate",
            "location": 49,
            "return": [
                "int",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "Optional[int]",
                    "sqlalchemy.orm.Session"
                ],
                "group": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "T",
                    "Mapping[str, Dict[str, Any]]"
                ],
                "order_by": [
                    "None",
                    "Optional[str]",
                    "Optional[Sequence]",
                    "int",
                    "Optional[bool]",
                    "bool",
                    "types.K"
                ],
                "limit": [
                    "None",
                    "Callable",
                    "Tuple[Type]",
                    "Optional[Sequence]",
                    "Optional[List[Any]]",
                    "bool",
                    "Optional[int]",
                    "Optional[Match]"
                ]
            }
        },
        "SQLStorage.search": {
            "name": "search",
            "location": 168,
            "return": [
                "list",
                "Set[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "FrozenSet[bytes]"
                ],
                "query": [
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "grouper.models.base.session.Session"
                ],
                "offset": [
                    "None",
                    "str",
                    "bool",
                    "Callable[[], datetime.datetime]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "limit": [
                    "None",
                    "str",
                    "bool",
                    "Callable[[], datetime.datetime]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "order_by": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Callable[[], datetime.datetime]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "SQLStorage.get": {
            "name": "get",
            "location": 219,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "types.CommandCoroutine",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "FrozenSet[bytes]"
                ],
                "identifier": [
                    "str",
                    "int",
                    "app.models.Tweet",
                    "app.models.Position",
                    "bool"
                ]
            }
        },
        "SQLStorage.get_by_id": {
            "name": "get_by_id",
            "location": 245,
            "return": [
                "None",
                "Optional[str]",
                "types.CommandCoroutine",
                "str",
                "List[Dict[str, Any]]",
                "Optional[int]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "str"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "SQLStorage.get_by_uuid": {
            "name": "get_by_uuid",
            "location": 252,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[mypy.types.Type]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "FrozenSet[bytes]"
                ],
                "uuid": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SQLStorage.update": {
            "name": "update",
            "location": 265,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "Optional[str]",
                    "Callable[..., Awaitable]",
                    "Optional[dict]"
                ],
                "identifier": [
                    "List[Dict[str, Any]]",
                    "dict",
                    "list",
                    "float",
                    "Dict[str, Any]"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "SQLStorage.delete": {
            "name": "delete",
            "location": 288,
            "return": [
                "None",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Optional[str]",
                    "list",
                    "List[List[Any]]",
                    "List[str]"
                ],
                "model": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "list",
                    "eggman.types.Handler",
                    "str"
                ]
            }
        },
        "SQLStorage.vacuum": {
            "name": "vacuum",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/crud/storage/__init__.py": {},
    "morpfw-master/morpfw/crud/xattrprovider/base.py": {
        "XattrProvider.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ]
            }
        },
        "XattrProvider.jsonschema": {
            "name": "jsonschema",
            "location": 21,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XattrProvider.process_update": {
            "name": "process_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/xattrprovider/fieldxattrprovider.py": {
        "FieldXattrProvider.__getitem__": {
            "name": "__getitem__",
            "location": 15,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "dict",
                    "Union[Callable[[Dict], Hashable], str]",
                    "tuple",
                    "Iterator[str]"
                ]
            }
        },
        "FieldXattrProvider.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "FieldXattrProvider.__delitem__": {
            "name": "__delitem__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "FieldXattrProvider.get": {
            "name": "get",
            "location": 28,
            "return": [
                "app.models.external.UserDTO",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "default": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "Union[str, int, float]",
                    "bool"
                ]
            }
        },
        "FieldXattrProvider.as_json": {
            "name": "as_json",
            "location": 33,
            "return": [
                "Optional[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldXattrProvider.as_dict": {
            "name": "as_dict",
            "location": 36,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldXattrProvider.update": {
            "name": "update",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newdata": [
                    "dict",
                    "Exception",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/crud/xattrprovider/__init__.py": {},
    "morpfw-master/morpfw/signal/app.py": {
        "periodic_transaction_handler": {
            "name": "periodic_transaction_handler",
            "location": 90,
            "return": [
                "int",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "name": [],
                "func": []
            }
        },
        "transaction_handler": {
            "name": "transaction_handler",
            "location": 138,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "MorpTask.after_return": {
            "name": "after_return",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bytes",
                    "List[str]",
                    "List[int]",
                    "bool",
                    "dict"
                ],
                "retval": [
                    "str",
                    "bytes",
                    "List[str]",
                    "List[int]",
                    "bool",
                    "dict"
                ],
                "task_id": [
                    "str",
                    "bytes",
                    "List[str]",
                    "List[int]",
                    "bool",
                    "dict"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "str",
                    "bytes",
                    "List[str]",
                    "List[int]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AsyncDispatcher.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "signal": [
                    "str"
                ]
            }
        },
        "AsyncDispatcher.subscribers": {
            "name": "subscribers",
            "location": 61,
            "return": [
                "bool",
                "str",
                "int",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncDispatcher.dispatch": {
            "name": "dispatch",
            "location": 65,
            "return": [
                "list",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "periodic_transaction_handler.transaction_wrapper": {
            "name": "transaction_wrapper",
            "location": 91,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "transaction_handler.transaction_wrapper": {
            "name": "transaction_wrapper",
            "location": 139,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "int",
                "threading.Event"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Tuple[int, int]"
                ],
                "request": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]",
                    "py._path.local.LocalPath"
                ]
            }
        },
        "SignalApp.async_dispatcher": {
            "name": "async_dispatcher",
            "location": 191,
            "return": [
                "str",
                "AsyncDispatcher"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SignalApp.async_subscribe": {
            "name": "async_subscribe",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "signal": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "task_name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "SignalApp.cron": {
            "name": "cron",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "minute": [
                    "str",
                    "typing.Text"
                ],
                "hour": [
                    "str",
                    "typing.Text"
                ],
                "day_of_week": [
                    "str",
                    "typing.Text"
                ],
                "day_of_month": [
                    "str",
                    "typing.Text"
                ],
                "month_of_year": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "SignalApp.periodic": {
            "name": "periodic",
            "location": 237,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "seconds": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]"
                ]
            }
        },
        "SignalApp.async_subscribe.wrapper": {
            "name": "wrapper",
            "location": 196,
            "return": [],
            "arguments": {
                "wrapped": []
            }
        },
        "SignalApp.cron.wrapper": {
            "name": "wrapper",
            "location": 218,
            "return": [],
            "arguments": {
                "wrapped": []
            }
        },
        "SignalApp.periodic.wrapper": {
            "name": "wrapper",
            "location": 238,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "wrapped": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "morpfw-master/morpfw/signal/directive.py": {
        "CelerySubscriberAction.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CelerySubscriberAction.identifier": {
            "name": "identifier",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "celery_subscriber_registry": [
                    "bool",
                    "List[str]",
                    "Callable[[int], None]"
                ],
                "app_class": [
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CelerySubscriberAction.perform": {
            "name": "perform",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "List[List[Any]]",
                    "List[Tuple[float, ...]]",
                    "Tuple[float]",
                    "Union[str, List[str]]"
                ],
                "celery_subscriber_registry": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "app_class": [
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "morpfw-master/morpfw/signal/signal.py": {},
    "morpfw-master/morpfw/signal/__init__.py": {},
    "morpfw-master/morpfw/tests/common.py": {
        "make_request": {
            "name": "make_request",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "appobj": [
                    "dict"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 46,
            "return": [
                "List[str]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "create_admin": {
            "name": "create_admin",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "email": [
                    "str",
                    "bool"
                ]
            }
        },
        "start_scheduler": {
            "name": "start_scheduler",
            "location": 62,
            "return": [
                "Process",
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "app": []
            }
        },
        "start_worker": {
            "name": "start_worker",
            "location": 74,
            "return": [
                "Process",
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "app": []
            }
        },
        "WebTestResponse.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "bool",
                    "Callable[[Any], None]"
                ]
            }
        },
        "WebTestResponse.status_code": {
            "name": "status_code",
            "location": 91,
            "return": [
                "bool",
                "Dict[int, dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTestResponse.request": {
            "name": "request",
            "location": 95,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTestResponse.headers": {
            "name": "headers",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTestResponse.text": {
            "name": "text",
            "location": 103,
            "return": [
                "str",
                "Mapping[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeRequest.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebTestOAuth2Session.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "wt_client": [
                    "Callable",
                    "Callable[..., neuromation.api.Client]",
                    "baseplate.lib.metrics.Client"
                ]
            }
        },
        "WebTestOAuth2Session.request": {
            "name": "request",
            "location": 117,
            "return": [
                "WebTestResponse",
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "bytes",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "Literal",
                    "List[int]",
                    "Union[str, bytes]"
                ],
                "data": [
                    "None",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ],
                "auth": [
                    "None",
                    "int",
                    "bool",
                    "str"
                ],
                "withhold_token": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "client_id": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "Set[int]",
                    "bool"
                ],
                "client_secret": [
                    "None",
                    "List[Dict[str, Any]]",
                    "int",
                    "Iterable[int]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/conftest.py": {
        "pika_connection_channel": {
            "name": "pika_connection_channel",
            "location": 26,
            "return": [
                "list",
                "str",
                "int",
                "Callable[[str], None]"
            ],
            "arguments": {
                "rabbitmq_pika_proc": [
                    "int"
                ]
            }
        },
        "es_proc": {
            "name": "es_proc",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "es_client": {
            "name": "es_client",
            "location": 77,
            "return": [
                "Elasticsearch"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "oauth_server": {
            "name": "oauth_server",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "es_proc.finalize_elasticsearch": {
            "name": "finalize_elasticsearch",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "es_client.drop_indexes": {
            "name": "drop_indexes",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "oauth_server.finalize": {
            "name": "finalize",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "morpfw-master/morpfw/tests/test_sqlapp.py": {
        "allow_all_model_access": {
            "name": "allow_all_model_access",
            "location": 20,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "context": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "allow_statemachine": {
            "name": "allow_statemachine",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "context": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "permission": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "allow_all_collection_access": {
            "name": "allow_all_collection_access",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "context": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "page_schema_identifier": {
            "name": "page_schema_identifier",
            "location": 48,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_pagecollection": {
            "name": "get_pagecollection",
            "location": 66,
            "return": [
                "PageCollection",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Tuple[int]"
                ]
            }
        },
        "get_page": {
            "name": "get_page",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_morp_framework": {
            "name": "test_morp_framework",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/test_sqlsession.py": {
        "test_sqlsession": {
            "name": "test_sqlsession",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/test_worker.py": {
        "get_identity_policy": {
            "name": "get_identity_policy",
            "location": 20,
            "return": [
                "bytes",
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "IO[str]"
            ],
            "arguments": {}
        },
        "verify_identity": {
            "name": "verify_identity",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_root": {
            "name": "get_root",
            "location": 29,
            "return": [
                "Root"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 34,
            "return": [
                "list",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "handler1": {
            "name": "handler1",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request_options": [
                    "dict",
                    "int"
                ],
                "obj": [
                    "Exception"
                ]
            }
        },
        "handler2": {
            "name": "handler2",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request_options": [
                    "dict",
                    "int"
                ],
                "obj": [
                    "Exception"
                ]
            }
        },
        "handler3": {
            "name": "handler3",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request_options": [
                    "dict",
                    "int"
                ],
                "obj": [
                    "Exception"
                ]
            }
        },
        "test_signal": {
            "name": "test_signal",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "int",
                    "abilian.app.Application"
                ],
                "pika_connection_channel": [
                    "int",
                    "abilian.app.Application"
                ],
                "celery_worker": [
                    "int",
                    "abilian.app.Application"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/test_workerscheduler.py": {
        "allow_all_model_access": {
            "name": "allow_all_model_access",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "context": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "allow_all_collection_access": {
            "name": "allow_all_collection_access",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "context": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "page_schema_identifier": {
            "name": "page_schema_identifier",
            "location": 42,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_pagecollection": {
            "name": "get_pagecollection",
            "location": 60,
            "return": [
                "PageCollection",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Tuple[int]"
                ]
            }
        },
        "get_page": {
            "name": "get_page",
            "location": 66,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "tick": {
            "name": "tick",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request_options": []
            }
        },
        "test_scheduler": {
            "name": "test_scheduler",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "int"
                ],
                "pika_connection_channel": [
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/__init__.py": {},
    "morpfw-master/morpfw/tests/auth_test/auth_crud.py": {
        "object1_collection_factory": {
            "name": "object1_collection_factory",
            "location": 31,
            "return": [
                "Object1Collection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "object1_model_factory": {
            "name": "object1_model_factory",
            "location": 37,
            "return": [
                "str",
                "allennlp.models.Model",
                "bool",
                "Callable",
                "model.Model"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_object1_typeinfo": {
            "name": "get_object1_typeinfo",
            "location": 43,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,Object1Schema,Object1Collection,Object1Model]]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "object2_collection_factory": {
            "name": "object2_collection_factory",
            "location": 72,
            "return": [
                "Object2Collection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "object2_model_factory": {
            "name": "object2_model_factory",
            "location": 78,
            "return": [
                "str",
                "allennlp.models.Model",
                "bool",
                "Callable",
                "model.Model"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_object2_typeinfo": {
            "name": "get_object2_typeinfo",
            "location": 84,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,Object2Schema,Object2Collection,Object2Model]]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "run_test": {
            "name": "run_test",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "Dict[str, dict]",
                    "Dict[str, str]",
                    "int",
                    "List[str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/auth_test/test_auth.py": {
        "login": {
            "name": "login",
            "location": 21,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "list",
                    "List[str]",
                    "Pattern[str]"
                ],
                "username": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "password": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Dict[str, str]]",
                    "Iterable[str]",
                    "bool",
                    "List[\"IntensityTable\"]",
                    "Optional[Union[str, Any]]",
                    "List[str]",
                    "Optional[T]"
                ]
            }
        },
        "_test_authentication": {
            "name": "_test_authentication",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "Dict[str, model.Integration]",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/auth_test/test_auth_crud_sqlstorage.py": {
        "get_object1_storage": {
            "name": "get_object1_storage",
            "location": 30,
            "return": [
                "Object1Storage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "get_object2_storage": {
            "name": "get_object2_storage",
            "location": 40,
            "return": [
                "Object2Storage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "test_auth_crud": {
            "name": "test_auth_crud",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/auth_test/test_auth_memorystorage.py": {
        "test_authentication_memorystorage": {
            "name": "test_authentication_memorystorage",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "morpfw-master/morpfw/tests/auth_test/test_auth_sqlstorage.py": {
        "test_authentication_sqlstorage": {
            "name": "test_authentication_sqlstorage",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/auth_test/test_oauth.py": {
        "get_approot": {
            "name": "get_approot",
            "location": 35,
            "return": [
                "AppRoot",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "oauth_permission_rule": {
            "name": "oauth_permission_rule",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Sequence[str]",
                    "T",
                    "Mapping[str, T]"
                ],
                "context": [
                    "str",
                    "Sequence[str]",
                    "T",
                    "Mapping[str, T]"
                ],
                "permission": [
                    "str",
                    "Sequence[str]",
                    "T",
                    "Mapping[str, T]"
                ]
            }
        },
        "head": {
            "name": "head",
            "location": 45,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "context": [],
                "request": []
            }
        },
        "get_authroot": {
            "name": "get_authroot",
            "location": 50,
            "return": [
                "OAuthRoot",
                "bool",
                "Mapping[str, Any]",
                "str",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "get_protected_view": {
            "name": "get_protected_view",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "int"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "test_oauth_sqlstorage": {
            "name": "test_oauth_sqlstorage",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "bool"
                ]
            }
        },
        "AppRoot.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/auth_test/__init__.py": {},
    "morpfw-master/morpfw/tests/crud_test/crud_common.py": {
        "allow_all_model_access": {
            "name": "allow_all_model_access",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "context": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "allow_all_model_state_access": {
            "name": "allow_all_model_state_access",
            "location": 44,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "context": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "permission": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ]
            }
        },
        "allow_all_collection_access": {
            "name": "allow_all_collection_access",
            "location": 49,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "context": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "validate_body": {
            "name": "validate_body",
            "location": 53,
            "return": [
                "None",
                "dict[typing.Text, typing.Text]",
                "Callable[[], None]",
                "str",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "schema": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "data": [
                    "str",
                    "dict"
                ],
                "mode": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "page_formvalidators": {
            "name": "page_formvalidators",
            "location": 78,
            "return": [
                "list",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "object_created": {
            "name": "object_created",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "request": [],
                "obj": [
                    "Callable"
                ],
                "signal": []
            }
        },
        "object_updated": {
            "name": "object_updated",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "set"
                ],
                "request": [
                    "set"
                ],
                "obj": [
                    "Callable"
                ],
                "signal": [
                    "set"
                ]
            }
        },
        "get_objectmodel_xattrprovider": {
            "name": "get_objectmodel_xattrprovider",
            "location": 130,
            "return": [
                "ObjectXattrProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_pagemodel_statemachine": {
            "name": "get_pagemodel_statemachine",
            "location": 144,
            "return": [
                "PageStateMachine",
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "namedobject_identifierfield": {
            "name": "namedobject_identifierfield",
            "location": 158,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "namedobject_default_identifier": {
            "name": "namedobject_default_identifier",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": [
                    "Optional[bytes]"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Optional[bytes]"
                ]
            }
        },
        "get_object_by_uuid": {
            "name": "get_object_by_uuid",
            "location": 172,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "request": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "run_jslcrud_test": {
            "name": "run_jslcrud_test",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "dict",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Any]"
                ],
                "skip_aggregate": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "IdentityPolicy.identify": {
            "name": "identify",
            "location": 199,
            "return": [
                "Identity",
                "Dict[str, Any]",
                "morepath_@_Identity",
                "dict",
                "bytes",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AuthnPolicy.get_identity_policy": {
            "name": "get_identity_policy",
            "location": 217,
            "return": [
                "IdentityPolicy",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AuthnPolicy.verify_identity": {
            "name": "verify_identity",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "identity": [
                    "str"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_elasticsearchstorage.py": {
        "collection_factory": {
            "name": "collection_factory",
            "location": 55,
            "return": [
                "PageCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "model_factory": {
            "name": "model_factory",
            "location": 61,
            "return": [
                "str",
                "allennlp.models.Model",
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "aiohttp.web.Request",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_page_typeinfo": {
            "name": "get_page_typeinfo",
            "location": 67,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "object_identifierfield": {
            "name": "object_identifierfield",
            "location": 86,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "object_default_identifier": {
            "name": "object_default_identifier",
            "location": 91,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "schema": [
                    "Optional[bytes]"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Optional[bytes]"
                ]
            }
        },
        "get_xattr_provider": {
            "name": "get_xattr_provider",
            "location": 100,
            "return": [
                "ObjectXattrProvider",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "object_created": {
            "name": "object_created",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "fausweb.Request"
                ],
                "request": [
                    "fausweb.Request"
                ],
                "obj": [
                    "aiohttp.web.Request",
                    "Callable"
                ],
                "signal": [
                    "fausweb.Request"
                ]
            }
        },
        "object_updated": {
            "name": "object_updated",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "fausweb.Request",
                    "set"
                ],
                "request": [
                    "fausweb.Request",
                    "set"
                ],
                "obj": [
                    "Callable",
                    "aiohttp.web.Request"
                ],
                "signal": [
                    "fausweb.Request",
                    "set"
                ]
            }
        },
        "get_object_by_uuid": {
            "name": "get_object_by_uuid",
            "location": 126,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "request": [
                    "Dict[str, str]",
                    "str",
                    "aiohttp.web.Request",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "object_collection_factory": {
            "name": "object_collection_factory",
            "location": 132,
            "return": [
                "ObjectCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "object_model_factory": {
            "name": "object_model_factory",
            "location": 138,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "namedobject_collection_factory": {
            "name": "namedobject_collection_factory",
            "location": 150,
            "return": [
                "NamedObjectCollection",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Optional[Dict[str, Any]]",
                    "httpx.Request"
                ]
            }
        },
        "namedobject_model_factory": {
            "name": "namedobject_model_factory",
            "location": 156,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "get_blobobject_storage": {
            "name": "get_blobobject_storage",
            "location": 168,
            "return": [
                "BlobObjectStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_blobobject_blobstorage": {
            "name": "get_blobobject_blobstorage",
            "location": 173,
            "return": [
                "str",
                "FSBlobStorage"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "blobobject_collection_factory": {
            "name": "blobobject_collection_factory",
            "location": 178,
            "return": [
                "BlobObjectCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "blobobject_model_factory": {
            "name": "blobobject_model_factory",
            "location": 184,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "test_elasticsearchstorage": {
            "name": "test_elasticsearchstorage",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "es_client": [
                    "bool",
                    "bocadillo.App"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_memorystorage.py": {
        "collection_factory": {
            "name": "collection_factory",
            "location": 36,
            "return": [
                "PageCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "model_factory": {
            "name": "model_factory",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_page_typeinfo": {
            "name": "get_page_typeinfo",
            "location": 48,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "object_collection_factory": {
            "name": "object_collection_factory",
            "location": 67,
            "return": [
                "ObjectCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "object_model_factory": {
            "name": "object_model_factory",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "namedobject_collection_factory": {
            "name": "namedobject_collection_factory",
            "location": 83,
            "return": [
                "NamedObjectCollection",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "namedobject_model_factory": {
            "name": "namedobject_model_factory",
            "location": 89,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_blobobject_storage": {
            "name": "get_blobobject_storage",
            "location": 99,
            "return": [
                "BlobObjectStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_blobobject_blobstorage": {
            "name": "get_blobobject_blobstorage",
            "location": 104,
            "return": [
                "str",
                "FSBlobStorage"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "blobobject_collection_factory": {
            "name": "blobobject_collection_factory",
            "location": 109,
            "return": [
                "BlobObjectCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "blobobject_model_factory": {
            "name": "blobobject_model_factory",
            "location": 115,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_memorystorage": {
            "name": "test_memorystorage",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_metalink.py": {
        "allow_all_model_access": {
            "name": "allow_all_model_access",
            "location": 28,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "context": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "allow_all_model_state_access": {
            "name": "allow_all_model_state_access",
            "location": 33,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "context": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "permission": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ]
            }
        },
        "allow_all_collection_access": {
            "name": "allow_all_collection_access",
            "location": 38,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "context": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "object_collection_factory": {
            "name": "object_collection_factory",
            "location": 56,
            "return": [
                "ObjectCollection",
                "str",
                "bytes",
                "List[cmk.base.check_utils.Service]",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "object_model_factory": {
            "name": "object_model_factory",
            "location": 62,
            "return": [
                "str",
                "allennlp.models.Model",
                "bool",
                "Callable",
                "model.Model"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_object_typeinfo": {
            "name": "get_object_typeinfo",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,ObjectSchema,ObjectCollection,ObjectModel]]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "get_object_storage": {
            "name": "get_object_storage",
            "location": 88,
            "return": [
                "ObjectStorage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "test_metalink": {
            "name": "test_metalink",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_pgsqlstorage.py": {
        "collection_factory": {
            "name": "collection_factory",
            "location": 41,
            "return": [
                "PageCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "model_factory": {
            "name": "model_factory",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_page_typeinfo": {
            "name": "get_page_typeinfo",
            "location": 53,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "object_collection_factory": {
            "name": "object_collection_factory",
            "location": 70,
            "return": [
                "ObjectCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "object_model_factory": {
            "name": "object_model_factory",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "namedobject_collection_factory": {
            "name": "namedobject_collection_factory",
            "location": 86,
            "return": [
                "NamedObjectCollection",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "namedobject_model_factory": {
            "name": "namedobject_model_factory",
            "location": 92,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_blobobject_storage": {
            "name": "get_blobobject_storage",
            "location": 102,
            "return": [
                "BlobObjectStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_blobobject_blobstorage": {
            "name": "get_blobobject_blobstorage",
            "location": 107,
            "return": [
                "str",
                "FSBlobStorage"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "blobobject_collection_factory": {
            "name": "blobobject_collection_factory",
            "location": 112,
            "return": [
                "BlobObjectCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "blobobject_model_factory": {
            "name": "blobobject_model_factory",
            "location": 118,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_pgsqlstorage": {
            "name": "test_pgsqlstorage",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_signal.py": {
        "test_signal": {
            "name": "test_signal",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_dispatchmethod": {
            "name": "test_event_dispatchmethod",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal.event": {
            "name": "event",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "float"
                ],
                "signal": [
                    "int",
                    "float"
                ]
            }
        },
        "test_signal.one": {
            "name": "one",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "model": [],
                "signal": []
            }
        },
        "test_signal.two": {
            "name": "two",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "model": [],
                "signal": []
            }
        },
        "test_signal.three": {
            "name": "three",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "model": [],
                "signal": []
            }
        },
        "test_event_dispatchmethod.one": {
            "name": "one",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [
                    "int",
                    "bool"
                ],
                "model": [
                    "int",
                    "bool"
                ],
                "signal": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_event_dispatchmethod.two": {
            "name": "two",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [
                    "int",
                    "bool"
                ],
                "model": [
                    "int",
                    "bool"
                ],
                "signal": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_event_dispatchmethod.three": {
            "name": "three",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [
                    "int",
                    "bool"
                ],
                "model": [
                    "int",
                    "bool"
                ],
                "signal": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_event_dispatchmethod.App.event": {
            "name": "event",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float"
                ],
                "signal": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_sqlstorage.py": {
        "collection_factory": {
            "name": "collection_factory",
            "location": 57,
            "return": [
                "PageCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "model_factory": {
            "name": "model_factory",
            "location": 63,
            "return": [
                "str",
                "allennlp.models.Model",
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "aiohttp.web.Request",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_page_typeinfo": {
            "name": "get_page_typeinfo",
            "location": 69,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "object_collection_factory": {
            "name": "object_collection_factory",
            "location": 97,
            "return": [
                "ObjectCollection",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "object_model_factory": {
            "name": "object_model_factory",
            "location": 103,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "namedobject_collection_factory": {
            "name": "namedobject_collection_factory",
            "location": 124,
            "return": [
                "NamedObjectCollection",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Optional[Dict[str, Any]]",
                    "httpx.Request"
                ]
            }
        },
        "namedobject_model_factory": {
            "name": "namedobject_model_factory",
            "location": 130,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "get_blobobject_storage": {
            "name": "get_blobobject_storage",
            "location": 148,
            "return": [
                "BlobObjectStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_blobobject_blobstorage": {
            "name": "get_blobobject_blobstorage",
            "location": 153,
            "return": [
                "str",
                "FSBlobStorage"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "blobobject_collection_factory": {
            "name": "blobobject_collection_factory",
            "location": 158,
            "return": [
                "BlobObjectCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "blobobject_model_factory": {
            "name": "blobobject_model_factory",
            "location": 164,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "test_sqlstorage": {
            "name": "test_sqlstorage",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_sqlstorage_typeblobstorage.py": {
        "blobstore_collection_factory": {
            "name": "blobstore_collection_factory",
            "location": 50,
            "return": [
                "str",
                "BlobStoreCollection"
            ],
            "arguments": {
                "request": []
            }
        },
        "blobstore_model_factory": {
            "name": "blobstore_model_factory",
            "location": 56,
            "return": [
                "allennlp.models.Model",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_blobobject_blobstorage": {
            "name": "get_blobobject_blobstorage",
            "location": 62,
            "return": [
                "TypeBlobStorage",
                "bool",
                "sqlalchemy.MetaData",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "Set[str]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_blobstore_typeinfo": {
            "name": "get_blobstore_typeinfo",
            "location": 67,
            "return": [
                "str",
                "dict[typing.Text, typing.Union[typing.Text,BlobStoreSchema,BlobStoreCollection,BlobStoreModel,bool]]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_sqlstorage_typeblobstorage": {
            "name": "test_sqlstorage_typeblobstorage",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/test_workflow_sqlstorage.py": {
        "get_order_storage": {
            "name": "get_order_storage",
            "location": 30,
            "return": [
                "OrderStorage",
                "str",
                "int",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "str"
                ],
                "blobstorage": [
                    "str"
                ]
            }
        },
        "get_kitchen_order_storage": {
            "name": "get_kitchen_order_storage",
            "location": 44,
            "return": [
                "KitchenOrderStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_delivery_order_storage": {
            "name": "get_delivery_order_storage",
            "location": 58,
            "return": [
                "DeliveryOrderStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "get_process_wf_storage": {
            "name": "get_process_wf_storage",
            "location": 72,
            "return": [
                "ProcessWorkflowStorage",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "blobstorage": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "test_workflow": {
            "name": "test_workflow",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pgsql_db": [
                    "bool"
                ]
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/workflow_common.py": {
        "allow_all_model_access": {
            "name": "allow_all_model_access",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "context": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "permission": [
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "allow_all_model_state_access": {
            "name": "allow_all_model_state_access",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "context": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "permission": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ]
            }
        },
        "allow_all_collection_access": {
            "name": "allow_all_collection_access",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "context": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ],
                "permission": [
                    "str",
                    "Tuple[int, int]",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "generate_workflow": {
            "name": "generate_workflow",
            "location": 35,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]"
                ],
                "data": [],
                "model": []
            }
        },
        "order_statemachine": {
            "name": "order_statemachine",
            "location": 80,
            "return": [
                "OrderSM",
                "str",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "context": []
            }
        },
        "order_collection_factory": {
            "name": "order_collection_factory",
            "location": 85,
            "return": [
                "OrderCollection",
                "str",
                "bytes",
                "List[cmk.base.check_utils.Service]",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "order_model_factory": {
            "name": "order_model_factory",
            "location": 91,
            "return": [
                "str",
                "allennlp.models.Model",
                "bool",
                "Callable",
                "model.Model"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_order_typeinfo": {
            "name": "get_order_typeinfo",
            "location": 97,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,OrderSchema,OrderCollection,OrderModel]]",
                "bool",
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "kitchen_order_statemachine": {
            "name": "kitchen_order_statemachine",
            "location": 150,
            "return": [
                "KitchenOrderSM",
                "str",
                "dict"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "kitchen_order_collection_factory": {
            "name": "kitchen_order_collection_factory",
            "location": 155,
            "return": [
                "KitchenOrderCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "kitchen_order_model_factory": {
            "name": "kitchen_order_model_factory",
            "location": 161,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_kitchen_order_typeinfo": {
            "name": "get_kitchen_order_typeinfo",
            "location": 167,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,KitchenOrderSchema,KitchenOrderCollection,KitchenOrderModel]]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "delivery_order_statemachine": {
            "name": "delivery_order_statemachine",
            "location": 216,
            "return": [
                "DeliveryOrderSM",
                "str",
                "dict"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "delivery_order_collection_factory": {
            "name": "delivery_order_collection_factory",
            "location": 221,
            "return": [
                "DeliveryOrderCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "delivery_order_model_factory": {
            "name": "delivery_order_model_factory",
            "location": 227,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_delivery_order_typeinfo": {
            "name": "get_delivery_order_typeinfo",
            "location": 233,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,DeliveryOrderSchema,DeliveryOrderCollection,DeliveryOrderModel]]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "process_workflow_collection_factory": {
            "name": "process_workflow_collection_factory",
            "location": 259,
            "return": [
                "ProcessWorkflowCollection",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "process_workflow_model_factory": {
            "name": "process_workflow_model_factory",
            "location": 265,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Optional[int]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_process_workflow_typeinfo": {
            "name": "get_process_workflow_typeinfo",
            "location": 271,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,ProcessWorkflowSchema,ProcessWorkflowCollection,ProcessWorkflowModel]]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "process_order": {
            "name": "process_order",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wf": [
                    "datetime.datetime",
                    "str"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "process_kitchenorder": {
            "name": "process_kitchenorder",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wf": [
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "cancel_kitchenorder": {
            "name": "cancel_kitchenorder",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wf": [
                    "Dict[str, List[int]]",
                    "str",
                    "Callable"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "cancel_deliveryorder": {
            "name": "cancel_deliveryorder",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wf": [
                    "Dict[str, List[int]]",
                    "str",
                    "Callable"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "complete_deliveryorder": {
            "name": "complete_deliveryorder",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wf": [
                    "Dict[str, List[int]]",
                    "str",
                    "Callable"
                ],
                "obj": [
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "run_test": {
            "name": "run_test",
            "location": 330,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "dict",
                    "Iterable",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Schema",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderSM.trigger_workflow": {
            "name": "trigger_workflow",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitchenOrderSM.trigger_workflow": {
            "name": "trigger_workflow",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeliveryOrderSM.trigger_workflow": {
            "name": "trigger_workflow",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "morpfw-master/morpfw/tests/crud_test/__init__.py": {},
    "morpfw-master/morpfw/validator/field.py": {
        "unique": {
            "name": "unique",
            "location": 7,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "schema": [
                    "bool",
                    "str"
                ],
                "field": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "value": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "mode": [
                    "None",
                    "int",
                    "bool",
                    "Iterable[int]"
                ]
            }
        },
        "valid_identifier": {
            "name": "valid_identifier",
            "location": 17,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "schema": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "field": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "mode": [
                    "None",
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "valid_namespaced_identifier": {
            "name": "valid_namespaced_identifier",
            "location": 24,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "schema": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "field": [
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "mode": [
                    "None",
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "morpfw-master/morpfw/validator/__init__.py": {}
}
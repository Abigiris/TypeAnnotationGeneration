{
    "mort-master/fabfile.py": {
        "coverage": {
            "name": "coverage",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mort-master/mort/controller.py": {
        "capture": {
            "name": "capture",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[str]"
                ],
                "targets": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "int",
                    "Tuple[str, int]"
                ],
                "git_hash": [
                    "bytes",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None",
                    "Tuple[str,float]",
                    "Tuple[Union[str,float]]"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "bool"
                ],
                "targets": [
                    "str",
                    "bool"
                ],
                "curr_git_hash": [
                    "str",
                    "bool"
                ],
                "ref_git_hash": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mort-master/mort/download_utils.py": {
        "download_urls": {
            "name": "download_urls",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "urls": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[int]"
                ],
                "to_dir": [
                    "int",
                    "str"
                ],
                "pool_size": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "to_dir": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "get_filename_from_url": {
            "name": "get_filename_from_url",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "mort-master/mort/driver.py": {
        "submit_request": {
            "name": "submit_request",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "targets": [
                    "str"
                ]
            }
        },
        "is_done": {
            "name": "is_done",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_job_state": {
            "name": "get_job_state",
            "location": 66,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "job_id": [
                    "str"
                ]
            }
        },
        "download_latest_target_list": {
            "name": "download_latest_target_list",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "to_json_file": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "mort-master/mort/file_utils.py": {
        "get_git_hash": {
            "name": "get_git_hash",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_dir_if_not_exists": {
            "name": "create_dir_if_not_exists",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_absolute_path": {
            "name": "get_absolute_path",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "relative_path": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "mort-master/mort/imgdiff.py": {
        "load_image": {
            "name": "load_image",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "img_file": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_similarity_index": {
            "name": "get_similarity_index",
            "location": 21,
            "return": [
                "float",
                "int",
                "List[int]"
            ],
            "arguments": {
                "image_file": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "reference_file": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "generate_annotated_diff_image": {
            "name": "generate_annotated_diff_image",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "image_file": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "reference_file": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[int,bool]",
                    "List[List[str]]",
                    "List[list[str]]",
                    "Optional[str]",
                    "None"
                ],
                "as_file": [
                    "str"
                ]
            }
        }
    },
    "mort-master/mort/list_utils.py": {
        "iterable": {
            "name": "iterable",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[...,bool]",
                    "str"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,Awaitable[Any]]"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "some": {
            "name": "some",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "Callable[...,bool]"
                ],
                "l": [
                    "List",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "every": {
            "name": "every",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "Callable[...,bool]"
                ],
                "l": [
                    "List",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 40,
            "return": [
                "Text",
                "Optional[str]",
                "None",
                "List",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "Callable[...,bool]"
                ],
                "l": [
                    "List",
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "mort-master/mort/main.py": {
        "cli": {
            "name": "cli",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "click.Context",
                    "None",
                    "Optional[str]"
                ],
                "targets": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "click.Context",
                    "None",
                    "Optional[str]"
                ],
                "paths": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "click.Context",
                    "None",
                    "Optional[str]"
                ],
                "git_hash": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "click.Context",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "capture": {
            "name": "capture",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "ref_git_hash": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "save_as": [
                    "int",
                    "Sequence[T]",
                    "List[float]",
                    "str"
                ]
            }
        }
    },
    "mort-master/mort/matcher.py": {
        "target_matches": {
            "name": "target_matches",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "Dict[str,Outcome]",
                    "Mapping",
                    "Optional[Tuple[str,...]]"
                ],
                "target": [
                    "Mapping",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "get_targets": {
            "name": "get_targets",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "mort-master/mort/repo_manager.py": {
        "extract_urls_from_job_details": {
            "name": "extract_urls_from_job_details",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "job_detail": [
                    "List[tuple[Union[int,int]]]",
                    "float",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "local_dir_for_screen_shots": {
            "name": "local_dir_for_screen_shots",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "git_hash": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "save_capture_result_to": {
            "name": "save_capture_result_to",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "capture_result": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Union[Any,str]]"
                ],
                "git_hash": [
                    "str"
                ]
            }
        },
        "get_screenshot_path": {
            "name": "get_screenshot_path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "git_hash": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "screenshot": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_screenshots": {
            "name": "load_screenshots",
            "location": 43,
            "return": [
                "List[Tuple[(Any, Any, str, str)]]"
            ],
            "arguments": {
                "paths": [
                    "List",
                    "List[str]",
                    "bool"
                ],
                "targets": [
                    "List",
                    "List[str]",
                    "bool"
                ],
                "curr_git_hash": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "ref_git_hash": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "get_screenshot": {
            "name": "get_screenshot",
            "location": 61,
            "return": [
                "bytes",
                "dict",
                "int"
            ],
            "arguments": {
                "git_hash": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "target_spec": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        }
    },
    "mort-master/mort/__init__.py": {},
    "mort-master/tests/data.py": {},
    "mort-master/tests/test_controller.py": {
        "TestController.test_capture_successful": {
            "name": "test_capture_successful",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [],
                "get_job_state": [],
                "submit_request": [],
                "download_urls": [
                    "int",
                    "mock.MagicMock"
                ]
            }
        },
        "TestController.test_compare": {
            "name": "test_compare",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_similarity_index": [
                    "Dict[str,Any]"
                ],
                "load_screenshots": [
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        }
    },
    "mort-master/tests/test_download_utils.py": {
        "TestUtils.test_get_filename_from_url": {
            "name": "test_get_filename_from_url",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_download": {
            "name": "test_download",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mort-master/tests/test_driver.py": {
        "TestSubmitRequest.test_submit_request_successful": {
            "name": "test_submit_request_successful",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "TestSubmitRequest.test_submit_duplicated_request_returns_existing_job_id": {
            "name": "test_submit_duplicated_request_returns_existing_job_id",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "bytes",
                    "mock.MagicMock"
                ]
            }
        },
        "TestSubmitRequest.test_submit_invalid_request_throws_out_exception": {
            "name": "test_submit_invalid_request_throws_out_exception",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "bytes",
                    "mock.MagicMock"
                ]
            }
        },
        "TestWaitAndFetch.test_is_job_done": {
            "name": "test_is_job_done",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get": [
                    "Dict[str,Any]",
                    "tests.helpers.MockedFetcher"
                ]
            }
        },
        "TestWaitAndFetch.test_return_correct_list_when_ready": {
            "name": "test_return_correct_list_when_ready",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get": [
                    "Dict[str,Any]",
                    "tests.helpers.MockedFetcher"
                ]
            }
        },
        "TestWaitAndFetch.test_download_latest_target_list": {
            "name": "test_download_latest_target_list",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get": [
                    "Dict[str,Any]",
                    "tests.helpers.MockedFetcher"
                ]
            }
        }
    },
    "mort-master/tests/test_file_utils.py": {
        "TestFileUtils.test_get_filename_from_url": {
            "name": "test_get_filename_from_url",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "makedirs": [
                    "int",
                    "bool"
                ],
                "exists": [
                    "mock.Mock"
                ]
            }
        },
        "TestFileUtils.test_download": {
            "name": "test_download",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_output": []
            }
        }
    },
    "mort-master/tests/test_imgdiff.py": {
        "TestImageDiff.test_get_similarity_index": {
            "name": "test_get_similarity_index",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageDiff.test_generate_diff_image": {
            "name": "test_generate_diff_image",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mort-master/tests/test_list_utils.py": {
        "empty": {
            "name": "empty",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_three": {
            "name": "is_three",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Union[int,float]",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "Dict[str,Any]",
                    "int",
                    "Sequence",
                    "None",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_multiple": {
            "name": "is_multiple",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Union[int,float]",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "say_hello": {
            "name": "say_hello",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "to": [
                    "int",
                    "Text"
                ]
            }
        },
        "TestListUtils.test_every": {
            "name": "test_every",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListUtils.test_some": {
            "name": "test_some",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListUtils.test_iterable": {
            "name": "test_iterable",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListUtils.test_apply": {
            "name": "test_apply",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mort-master/tests/test_matcher.py": {
        "TestMatcher.test_single_match": {
            "name": "test_single_match",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatcher.test_match_against_target_list": {
            "name": "test_match_against_target_list",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mort-master/tests/test_repo_manager.py": {
        "TestRepoManager.test_find_all_screenshots": {
            "name": "test_find_all_screenshots",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture",
                    "tests.async_mock.MagicMock",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestRepoManager.test_extract_urls_from_job_details": {
            "name": "test_extract_urls_from_job_details",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepoManager.test_get_screenshot_path": {
            "name": "test_get_screenshot_path",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepoManager.test_load_screenshots": {
            "name": "test_load_screenshots",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_screenshot_path": [],
                "get_screenshot": [
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "mort-master/tests/__init__.py": {}
}
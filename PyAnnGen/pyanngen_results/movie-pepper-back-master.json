{
    "movie-pepper-back-master/d2v-optimizer.py": {
        "get_cmap": {
            "name": "get_cmap",
            "location": 32,
            "return": [],
            "arguments": {
                "n": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "rand_jitter": {
            "name": "rand_jitter",
            "location": 36,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "calculate": {
            "name": "calculate",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "movie": []
            }
        },
        "defaultlist.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fx": []
            }
        },
        "defaultlist.__setitem__": {
            "name": "__setitem__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "defaultlist.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "movie-pepper-back-master/doc2vec.py": {
        "Doc2VecModel.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc2VecModel.create_model": {
            "name": "create_model",
            "location": 15,
            "return": [
                "Doc2Vec",
                "str",
                "GPy.models.GPRegression"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "text_recognizer.models.base.Model",
                    "Sequence",
                    "Optional[float]"
                ],
                "window": [
                    "int",
                    "Optional[int]",
                    "text_recognizer.models.base.Model",
                    "Sequence",
                    "Optional[float]"
                ],
                "min_count": [
                    "int",
                    "Optional[int]",
                    "text_recognizer.models.base.Model",
                    "Sequence",
                    "Optional[float]"
                ],
                "iter": [
                    "int",
                    "Optional[int]",
                    "text_recognizer.models.base.Model",
                    "Sequence",
                    "Optional[float]"
                ]
            }
        },
        "Doc2VecModel.recommendation": {
            "name": "recommendation",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "movie_title": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ],
                "topn": [
                    "str",
                    "None",
                    "list",
                    "bool",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "annofabapi.models.Inspection",
                    "int"
                ]
            }
        },
        "Doc2VecModel.main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie-pepper-back-master/optimizer.py": {
        "calculate_variation": {
            "name": "calculate_variation",
            "location": 32,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "movie": [],
                "director": [],
                "genres": [],
                "imdb_keyword": [],
                "lsa": [],
                "rec": []
            }
        },
        "get_cmap": {
            "name": "get_cmap",
            "location": 56,
            "return": [],
            "arguments": {
                "n": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "rand_jitter": {
            "name": "rand_jitter",
            "location": 60,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "calculate": {
            "name": "calculate",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "movie": []
            }
        },
        "defaultlist.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fx": []
            }
        },
        "defaultlist.__setitem__": {
            "name": "__setitem__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "defaultlist.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "movie-pepper-back-master/recommender.py": {
        "union": {
            "name": "union",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "list_a": [
                    "list"
                ],
                "list_b": [
                    "list"
                ]
            }
        },
        "ordenar": {
            "name": "ordenar",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "comparacion": [
                    "dict"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "mov": [
                    "dict"
                ],
                "pel": [
                    "dict"
                ],
                "ratio": [
                    "dict"
                ]
            }
        },
        "rec": {
            "name": "rec",
            "location": 87,
            "return": [
                "dict"
            ],
            "arguments": {
                "mov": [
                    "dict"
                ],
                "pel": [
                    "dict"
                ],
                "ratio": [
                    "dict"
                ]
            }
        },
        "Recommender.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.get_movies": {
            "name": "get_movies",
            "location": 107,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.film_quantity": {
            "name": "film_quantity",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recommender.recommend": {
            "name": "recommend",
            "location": 126,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "movie": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "bool"
                ],
                "ratio": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "list[str]"
                ],
                "film_quantity": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "Recommender.ask_movie": {
            "name": "ask_movie",
            "location": 154,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "peliculas": [
                    "list"
                ]
            }
        },
        "Recommender.clean": {
            "name": "clean",
            "location": 177,
            "return": [
                "list"
            ],
            "arguments": {
                "item": [
                    "list"
                ]
            }
        },
        "Recommender.load": {
            "name": "load",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "Recommender.main_loop": {
            "name": "main_loop",
            "location": 201,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "peliculas": [
                    "list"
                ]
            }
        },
        "Recommender.get_best_keyword": {
            "name": "get_best_keyword",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "originals": [
                    "dict"
                ]
            }
        },
        "Recommender.main": {
            "name": "main",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie-pepper-back-master/server.py": {
        "brotlify": {
            "name": "brotlify",
            "location": 25,
            "return": [
                "Response",
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "dict[, ]",
                    "tuple",
                    "tuple[]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "movies": {
            "name": "movies",
            "location": 49,
            "return": [
                "Response",
                "bytes",
                "List[str]",
                "Optional[str]",
                "Tuple[str, Optional[int]]",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "recommend": {
            "name": "recommend",
            "location": 58,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "title": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]"
                ]
            }
        },
        "recommend_d2v": {
            "name": "recommend_d2v",
            "location": 67,
            "return": [
                "Response",
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "movie-pepper-back-master/tests.py": {
        "TestMoviePepper.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "typing.Type",
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestMoviePepper.test_crawl": {
            "name": "test_crawl",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_tfidf_lsa": {
            "name": "test_tfidf_lsa",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_create_d2v": {
            "name": "test_create_d2v",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_server_movies": {
            "name": "test_server_movies",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_server_recommend": {
            "name": "test_server_recommend",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_server_d2vrecommend": {
            "name": "test_server_d2vrecommend",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.test_env": {
            "name": "test_env",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoviePepper.tearDownClass": {
            "name": "tearDownClass",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[Any]",
                    "typing.Callable[, ]",
                    "Type[T]",
                    "Callable"
                ]
            }
        }
    },
    "movie-pepper-back-master/tfidf_lsa.py": {
        "_get_best_keyword": {
            "name": "_get_best_keyword",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "originals": [
                    "dict"
                ]
            }
        },
        "_check_exists": {
            "name": "_check_exists",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "item": [
                    "dict"
                ]
            }
        },
        "_check_english": {
            "name": "_check_english",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_load_list": {
            "name": "_load_list",
            "location": 66,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "json_list": [
                    "List[dict]"
                ]
            }
        },
        "repl": {
            "name": "repl",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_replace_with_hypernym": {
            "name": "_replace_with_hypernym",
            "location": 103,
            "return": [
                "list"
            ],
            "arguments": {
                "corpus": [
                    "list"
                ]
            }
        },
        "_represents_int": {
            "name": "_represents_int",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "num_str": [
                    "str"
                ]
            }
        },
        "filt": {
            "name": "filt",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_filter_stopwords": {
            "name": "_filter_stopwords",
            "location": 137,
            "return": [
                "list"
            ],
            "arguments": {
                "corpus_0": [
                    "list"
                ]
            }
        },
        "stemm": {
            "name": "stemm",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_stemm_synopsis": {
            "name": "_stemm_synopsis",
            "location": 168,
            "return": [
                "list"
            ],
            "arguments": {
                "corpus_1": [
                    "list"
                ],
                "originals": [
                    "dict"
                ]
            }
        },
        "_filter_text": {
            "name": "_filter_text",
            "location": 180,
            "return": [
                "list"
            ],
            "arguments": {
                "json_list": [
                    "list"
                ]
            }
        },
        "_movie_distance": {
            "name": "_movie_distance",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "lsa_matrix": [
                    "dict"
                ],
                "json_list": [
                    "list"
                ]
            }
        },
        "_get_keywords": {
            "name": "_get_keywords",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "json_list": [
                    "list"
                ],
                "tfidf_x": [
                    "dict"
                ],
                "vectorizer": [
                    "str",
                    "list",
                    "List[dict]"
                ]
            }
        },
        "_save_files": {
            "name": "_save_files",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "json_list": [
                    "list"
                ]
            }
        },
        "calculate_corpus_var": {
            "name": "calculate_corpus_var",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "max_df": [
                    "int"
                ],
                "min_df": [
                    "int"
                ],
                "n_components": [
                    "int"
                ],
                "max_features": [
                    "int",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        }
    },
    "movie-pepper-back-master/movie_scrape/movie_scrape/items.py": {},
    "movie-pepper-back-master/movie_scrape/movie_scrape/middlewares.py": {
        "MovieScrapeSpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [
                "MovieScrapeSpiderMiddleware"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMovieScrapeSpiderMiddleware]"
                ],
                "crawler": []
            }
        },
        "MovieScrapeSpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "MovieScrapeSpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "MovieScrapeSpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "MovieScrapeSpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "MovieScrapeSpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "movie-pepper-back-master/movie_scrape/movie_scrape/pipelines.py": {
        "MovieScrapePipeline.process_item": {
            "name": "process_item",
            "location": 10,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T0"
                ],
                "spider": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "T",
                    "list[]",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "movie-pepper-back-master/movie_scrape/movie_scrape/settings.py": {},
    "movie-pepper-back-master/movie_scrape/movie_scrape/__init__.py": {},
    "movie-pepper-back-master/movie_scrape/movie_scrape/spiders/spider.py": {
        "Spider.start_requests": {
            "name": "start_requests",
            "location": 12,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spider.parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.Response",
                    "scrapy.http.TextResponse",
                    "Dict[str, Any]",
                    "django.http.HttpResponse"
                ]
            }
        },
        "Spider.parse_movie": {
            "name": "parse_movie",
            "location": 29,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.Response",
                    "django.http.HttpResponse"
                ]
            }
        },
        "Spider.extract_keywords": {
            "name": "extract_keywords",
            "location": 54,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Spider.extract_plot": {
            "name": "extract_plot",
            "location": 64,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Spider.extract_reviews": {
            "name": "extract_reviews",
            "location": 74,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict[, ]",
                    "dict",
                    "typing.Mapping",
                    "Mapping[str, object]",
                    "scrapy.http.Response"
                ]
            }
        }
    },
    "movie-pepper-back-master/movie_scrape/movie_scrape/spiders/__init__.py": {}
}
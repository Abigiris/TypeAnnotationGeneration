{
    "msg_translator_prototype-master/test_compacted_topics.py": {
        "send_messages": {
            "name": "send_messages",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_messages": {
            "name": "read_messages",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "simple_consume": {
            "name": "simple_consume",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Rebalance_Listener.on_partitions_revoked": {
            "name": "on_partitions_revoked",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revoked": [
                    "str",
                    "int"
                ]
            }
        },
        "Rebalance_Listener.on_partitions_assigned": {
            "name": "on_partitions_assigned",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assigned": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "msg_translator_prototype-master/test/test_kafka.py": {
        "TestKafka.test_delete_topics": {
            "name": "test_delete_topics",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKafka.test_create_topics": {
            "name": "test_create_topics",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKafka.test_produce_and_consume": {
            "name": "test_produce_and_consume",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translation.py": {
        "TestMessageTranslator.test_cloud_event_1": {
            "name": "test_cloud_event_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translation_manager.py": {
        "_consume_manager": {
            "name": "_consume_manager",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "Tuple[int]",
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "_consume_response": {
            "name": "_consume_response",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": [
                    "str",
                    "Generator[str,None,None]",
                    "bool",
                    "Any"
                ],
                "queue": [
                    "list",
                    "str"
                ]
            }
        },
        "TestTranslationManager._set_topics": {
            "name": "_set_topics",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "topic_names": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestTranslationManager.test_0": {
            "name": "test_0",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translation_with_kafka.py": {
        "TestTranslationWithKafka.test_cloud_event_1": {
            "name": "test_cloud_event_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translator_custom.py": {
        "TestTranslatorCustom.test_0": {
            "name": "test_0",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorCustom.test_apply_script_1": {
            "name": "test_apply_script_1",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorCustom.test_apply_script_2": {
            "name": "test_apply_script_2",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translator_edit.py": {
        "TestTranslatorEDIT.test_0": {
            "name": "test_0",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorEDIT.test_1": {
            "name": "test_1",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translator_json_to_xml.py": {
        "TestTranslatorJSONtoXML.test_translate_1": {
            "name": "test_translate_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translator_remove.py": {
        "TestTranslatorREMOVE.test_0": {
            "name": "test_0",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorREMOVE.test_1": {
            "name": "test_1",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/test_translator_xml_to_json.py": {
        "TestTranslatorXMLtoJSON.test_0": {
            "name": "test_0",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorXMLtoJSON.test_translate_1": {
            "name": "test_translate_1",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslatorXMLtoJSON.test_translate_2": {
            "name": "test_translate_2",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msg_translator_prototype-master/test/translator_test.py": {
        "TranslatorTest._get_cloud_event_template": {
            "name": "_get_cloud_event_template",
            "location": 9,
            "return": [
                "str",
                "CloudEvent"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Dict",
                    "str",
                    "bytes",
                    "Union[Iterable,str]"
                ]
            }
        }
    },
    "msg_translator_prototype-master/test/test_data/test_script_1.py": {
        "script": {
            "name": "script",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Mapping[str,str]",
                    "List[List[str]]",
                    "Dict"
                ]
            }
        }
    },
    "msg_translator_prototype-master/test/test_data/test_script_2.py": {
        "script": {
            "name": "script",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "List",
                    "Callable",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "foo": {
            "name": "foo",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "msg_translator_prototype-master/test/test_data/test_script_3.py": {
        "script": {
            "name": "script",
            "location": 4,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "msg_translator_prototype-master/test/test_data/test_script_4.py": {
        "script": {
            "name": "script",
            "location": 1,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "dict_elements": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "type"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/abstract_translator.py": {
        "MessageTranslator.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "source_format": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "target_format": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ],
                "operation": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MessageTranslator.get_translator": {
            "name": "get_translator",
            "location": 27,
            "return": [
                "Optional[MessageTranslator]"
            ],
            "arguments": {
                "source_format": [
                    "str",
                    "int",
                    "bool"
                ],
                "target_format": [
                    "str",
                    "int",
                    "bool"
                ],
                "operation": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MessageTranslator.test_message": {
            "name": "test_message",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "MessageTranslator.translate": {
            "name": "translate",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MessageTranslatorUserDefinedFunctions.set_script": {
            "name": "set_script",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_defined_script": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "main_function_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MessageTranslatorUserDefinedFunctions.test_message": {
            "name": "test_message",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "MessageTranslatorPathManipulation.set_element_paths": {
            "name": "set_element_paths",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_element_paths": [
                    "str",
                    "None",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "MessageTranslatorPathManipulation._element_from_path": {
            "name": "_element_from_path",
            "location": 93,
            "return": [
                "str",
                "bool",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "str",
                    "bytes",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "list_path": [
                    "str"
                ]
            }
        },
        "MessageTranslatorPathManipulation._set_element_from_path": {
            "name": "_set_element_from_path",
            "location": 102,
            "return": [
                "str",
                "float",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "dictionary": [
                    "bool",
                    "Type",
                    "str"
                ],
                "list_path": [
                    "str",
                    "List[int]"
                ],
                "value": [
                    "List[str]",
                    "Optional[List[str]]",
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "MessageTranslatorPathManipulation._delete_element_from_path": {
            "name": "_delete_element_from_path",
            "location": 116,
            "return": [
                "float",
                "bytes",
                "str",
                "Dict",
                "int",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "list_path": [
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "MessageTranslatorPathManipulation._prepare_dict_element_paths": {
            "name": "_prepare_dict_element_paths",
            "location": 129,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "dict_element_paths": [
                    "str"
                ]
            }
        },
        "MessageTranslatorPathManipulation._extract_elements_from_dict": {
            "name": "_extract_elements_from_dict",
            "location": 132,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dict_msg": [
                    "Dict",
                    "str"
                ]
            }
        },
        "MessageTranslatorPathManipulation.test_message": {
            "name": "test_message",
            "location": 139,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "MessageTranslatorPathManipulation._set_element_from_path.recursion": {
            "name": "recursion",
            "location": 103,
            "return": [],
            "arguments": {
                "d": [],
                "l": []
            }
        },
        "MessageTranslatorPathManipulation._delete_element_from_path.recursion": {
            "name": "recursion",
            "location": 117,
            "return": [
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "d": [
                    "Sequence[Any]",
                    "dict"
                ],
                "l": [
                    "snorkel.types.DataPoint",
                    "int",
                    "str"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/helpers.py": {
        "load_json": {
            "name": "load_json",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "get_project_root": {
            "name": "get_project_root",
            "location": 11,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "load_test_data": {
            "name": "load_test_data",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/messages.py": {
        "CloudEvent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "float",
                    "List[float]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "CloudEvent.init_from_dict": {
            "name": "init_from_dict",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Exception]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "CloudEvent.create_new_message": {
            "name": "create_new_message",
            "location": 54,
            "return": [
                "CloudEvent"
            ],
            "arguments": {
                "self": [
                    "_TCloudEvent@@CloudEvent@@"
                ]
            }
        },
        "CloudEvent.serialize_message": {
            "name": "serialize_message",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudEvent.type": {
            "name": "type",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "List[str]",
                    "type",
                    "Type",
                    "Callable[[None], None]"
                ]
            }
        },
        "CloudEvent.specversion": {
            "name": "specversion",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "specversion": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CloudEvent.source": {
            "name": "source",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "float",
                    "List[Tuple[int, int]]",
                    "TextIO"
                ]
            }
        },
        "CloudEvent.id": {
            "name": "id",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "CloudEvent.time": {
            "name": "time",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "time": [
                    "int",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "CloudEvent.schemaurl": {
            "name": "schemaurl",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "schemaurl": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CloudEvent.contenttype": {
            "name": "contenttype",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "contenttype": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CloudEvent.data": {
            "name": "data",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "CloudEvent.__getitem__": {
            "name": "__getitem__",
            "location": 138,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "CloudEvent.__setitem__": {
            "name": "__setitem__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "CloudEvent.__delitem__": {
            "name": "__delitem__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "CloudEvent.__iter__": {
            "name": "__iter__",
            "location": 147,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudEvent.__contains__": {
            "name": "__contains__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "datetime.timedelta",
                    "T"
                ]
            }
        },
        "CloudEvent.__getattr__": {
            "name": "__getattr__",
            "location": 153,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/slip_router.py": {
        "route_message": {
            "name": "route_message",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "Dict[str, Any]",
                    "Dict[int, List[Any]]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "message": [
                    "messages.CloudEvent",
                    "Tuple[int, int]",
                    "Dict[str, int]"
                ],
                "default_topic": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/translation_manager.py": {
        "TranslationManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bootstrap_servers": [
                    "str",
                    "int"
                ],
                "source_topic": [
                    "str"
                ],
                "target_topic": [
                    "int",
                    "str"
                ],
                "translator": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "TranslationManager.start_consuming": {
            "name": "start_consuming",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationManager.translate_message": {
            "name": "translate_message",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/translator.py": {
        "TranslatorCUSTOM.test_message": {
            "name": "test_message",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "messages.CloudEvent"
                ]
            }
        },
        "TranslatorCUSTOM.translate": {
            "name": "translate",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TranslatorEDIT.test_message": {
            "name": "test_message",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "messages.CloudEvent"
                ]
            }
        },
        "TranslatorEDIT.translate": {
            "name": "translate",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "trezor.messages.TxInputType.TxInputType",
                    "dict",
                    "AnyStr"
                ]
            }
        },
        "TranslatorREMOVE.translate": {
            "name": "translate",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[bytes]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "TranslatorREMOVE.test_message": {
            "name": "test_message",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "messages.CloudEvent"
                ]
            }
        },
        "TranslatorADD.translate": {
            "name": "translate",
            "location": 153,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TranslatorJSONtoXML.test_message": {
            "name": "test_message",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "messages.CloudEvent"
                ]
            }
        },
        "TranslatorJSONtoXML.translate": {
            "name": "translate",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "AnyStr",
                    "raiden.messages.Message"
                ]
            }
        },
        "TranslatorJSONtoXML.recursive_build": {
            "name": "recursive_build",
            "location": 186,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "E": [
                    "str",
                    "Dict",
                    "Dict[Hashable,Any]"
                ],
                "key": [
                    "str",
                    "Dict",
                    "Dict[Hashable,Any]"
                ],
                "data": [
                    "Dict",
                    "str"
                ]
            }
        },
        "TranslatorJSONtoXML.build_element": {
            "name": "build_element",
            "location": 194,
            "return": [
                "bool",
                "str",
                "float",
                "List[object]",
                "int"
            ],
            "arguments": {
                "self": [],
                "E": [
                    "str",
                    "Dict",
                    "MutableMapping",
                    "Type[Declared]",
                    "Type"
                ],
                "key": [
                    "str",
                    "Dict",
                    "MutableMapping",
                    "Type[Declared]",
                    "Type"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[bytes]",
                    "Optional[Scope]",
                    "bytes"
                ]
            }
        },
        "TranslatorXMLtoJSON.test_message": {
            "name": "test_message",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TranslatorXMLtoJSON.translate": {
            "name": "translate",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "msg_translator_prototype-master/translator/__init__.py": {},
    "msg_translator_prototype-master/translator/__main__.py": {}
}
{
    "msrest-for-python-master/setup.py": {},
    "msrest-for-python-master/doc/conf.py": {},
    "msrest-for-python-master/msrest/async_client.py": {
        "SDKClientAsync.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "bool"
                ]
            }
        },
        "ServiceClientAsync.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "ServiceClientAsync._create_default_pipeline": {
            "name": "_create_default_pipeline",
            "location": 74,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceClientAsync.stream_download_async": {
            "name": "stream_download_async",
            "location": 120,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "excars.models.rides.Ride.Request"
                ],
                "user_callback": [
                    "Dict[str, Any]",
                    "excars.models.rides.Ride.Request"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/async_paging.py": {
        "AsyncPagedMixin.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/msrest/authentication.py": {},
    "msrest-for-python-master/msrest/configuration.py": {},
    "msrest-for-python-master/msrest/exceptions.py": {},
    "msrest-for-python-master/msrest/http_logger.py": {},
    "msrest-for-python-master/msrest/paging.py": {},
    "msrest-for-python-master/msrest/serialization.py": {},
    "msrest-for-python-master/msrest/service_client.py": {},
    "msrest-for-python-master/msrest/version.py": {},
    "msrest-for-python-master/msrest/__init__.py": {},
    "msrest-for-python-master/msrest/pipeline/aiohttp.py": {
        "AioHTTPSender.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "bool",
                    "Optional[Callable]",
                    "float",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "AioHTTPSender.build_context": {
            "name": "build_context",
            "location": 47,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/msrest/pipeline/async_abc.py": {
        "AsyncHTTPPolicy.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SansIOAsyncHTTPPolicyRunner.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncHTTPSender.build_context": {
            "name": "build_context",
            "location": 98,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPSender.__enter__": {
            "name": "__enter__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPSender.__exit__": {
            "name": "__exit__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "AsyncPipeline.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policies": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "sender": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncPipeline.__enter__": {
            "name": "__enter__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPipeline.__exit__": {
            "name": "__exit__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/pipeline/async_requests.py": {
        "AsyncPipelineRequestsHTTPSender.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "universal_http_requests_driver": [
                    "fausweb.Request",
                    "Optional[fausweb.Response]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AsyncPipelineRequestsHTTPSender.build_context": {
            "name": "build_context",
            "location": 66,
            "return": [
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncRequestsCredentialsPolicy.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/pipeline/requests.py": {
        "RequestsCredentialsPolicy.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RequestsCredentialsPolicy.send": {
            "name": "send",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "str",
                "Optional[str]",
                "bytes",
                "Dict[str, dict]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "RequestsPatchSession.send": {
            "name": "send",
            "location": 105,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str",
                "bool",
                "bytes",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "RequestsContext.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "PipelineRequestsHTTPSender.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "universal_http_requests_driver": [
                    "Dict[str, Any]",
                    "fausweb.Request",
                    "Optional[fausweb.Response]",
                    "int",
                    "jumeaux.models.Request"
                ]
            }
        },
        "PipelineRequestsHTTPSender.__enter__": {
            "name": "__enter__",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineRequestsHTTPSender.__exit__": {
            "name": "__exit__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineRequestsHTTPSender.close": {
            "name": "close",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineRequestsHTTPSender.build_context": {
            "name": "build_context",
            "location": 173,
            "return": [
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineRequestsHTTPSender.send": {
            "name": "send",
            "location": 179,
            "return": [
                "List[str]",
                "Dict[str, str]",
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "Optional[str]",
                    "_models.Request"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/pipeline/universal.py": {
        "HeadersPolicy.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "flask.Response",
                    "fastapi.Response",
                    "MutableMapping"
                ]
            }
        },
        "HeadersPolicy.on_request": {
            "name": "on_request",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "aiohttp.web.Request",
                    "str",
                    "Dict[str, Any]",
                    "fastapi.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "UserAgentPolicy.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_agent": [
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "UserAgentPolicy.user_agent": {
            "name": "user_agent",
            "location": 91,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAgentPolicy.add_user_agent": {
            "name": "add_user_agent",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "UserAgentPolicy.on_request": {
            "name": "on_request",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "aiohttp.web.Request",
                    "str",
                    "Dict[str, Any]",
                    "fastapi.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "HTTPLogger.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enable_http_logger": [
                    "int",
                    "bool"
                ]
            }
        },
        "HTTPLogger.on_request": {
            "name": "on_request",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "aiohttp.web.Request",
                    "str",
                    "Dict[str, Any]",
                    "fastapi.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "HTTPLogger.on_response": {
            "name": "on_response",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "collector_utilities.type.Response",
                    "flask.Response",
                    "scrapy.http.Response"
                ],
                "response": [
                    "requests.Response",
                    "Dict[str, Any]",
                    "str",
                    "requests.models.Response",
                    "Response",
                    "flask.Response"
                ]
            }
        },
        "RawDeserializer.deserialize_from_text": {
            "name": "deserialize_from_text",
            "location": 140,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[Tuple[distutils.version.LooseVersion, str, bool]]",
                    "Optional[Iterable[str]]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "data": [
                    "dict",
                    "str",
                    "TextIO",
                    "int",
                    "Dict[str, Any]"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "RawDeserializer.deserialize_from_http_generics": {
            "name": "deserialize_from_http_generics",
            "location": 206,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "bytes"
                ],
                "body_bytes": [
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "bytes"
                ],
                "headers": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "RawDeserializer.on_response": {
            "name": "on_response",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "faustypes.web.Request",
                    "Request",
                    "responses.Response",
                    "requests.Request"
                ],
                "response": [
                    "Dict[str, Any]",
                    "flask.Response",
                    "requests.Response"
                ]
            }
        },
        "RawDeserializer.deserialize_from_text._json_attemp": {
            "name": "_json_attemp",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/pipeline/__init__.py": {},
    "msrest-for-python-master/msrest/polling/async_poller.py": {
        "AsyncPollingMethod.initialize": {
            "name": "initialize",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "Optional[bytes]"
                ],
                "initial_response": [
                    "bool",
                    "Optional[bytes]"
                ],
                "deserialization_callback": [
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "AsyncPollingMethod.status": {
            "name": "status",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPollingMethod.finished": {
            "name": "finished",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPollingMethod.resource": {
            "name": "resource",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/msrest/polling/poller.py": {
        "PollingMethod.initialize": {
            "name": "initialize",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "Optional[bytes]"
                ],
                "initial_response": [
                    "bool",
                    "Optional[bytes]"
                ],
                "deserialization_callback": [
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "PollingMethod.run": {
            "name": "run",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingMethod.status": {
            "name": "status",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingMethod.finished": {
            "name": "finished",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingMethod.resource": {
            "name": "resource",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoPolling.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoPolling.initialize": {
            "name": "initialize",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[str]",
                    "float"
                ],
                "initial_response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "deserialization_callback": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "NoPolling.run": {
            "name": "run",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoPolling.status": {
            "name": "status",
            "location": 84,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoPolling.finished": {
            "name": "finished",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoPolling.resource": {
            "name": "resource",
            "location": 98,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LROPoller.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "initial_response": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "deserialization_callback": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "polling_method": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "LROPoller._start": {
            "name": "_start",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LROPoller.status": {
            "name": "status",
            "location": 165,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LROPoller.result": {
            "name": "result",
            "location": 174,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "LROPoller.wait": {
            "name": "wait",
            "location": 186,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "LROPoller.done": {
            "name": "done",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LROPoller.add_done_callback": {
            "name": "add_done_callback",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "int",
                    "Iterable",
                    "\"Atom\""
                ]
            }
        },
        "LROPoller.remove_done_callback": {
            "name": "remove_done_callback",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "List[str]",
                    "str",
                    "Sequence[T]",
                    "Callable[[str, str], float]",
                    "dict",
                    "List[Tuple[Any, int, int, str, str]]"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/polling/__init__.py": {},
    "msrest-for-python-master/msrest/universal_http/aiohttp.py": {
        "AioHTTPSender.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AioHttpClientResponse.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Callable[..., Coroutine]",
                    "Optional[str]"
                ],
                "aiohttp_response": [
                    "aiohttp.web.Request",
                    "aiohttp.web.StreamResponse",
                    "aiohttp.web.Response"
                ]
            }
        },
        "AioHttpClientResponse.body": {
            "name": "body",
            "location": 77,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AioHttpClientResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AioHttpClientResponse.stream_download": {
            "name": "stream_download",
            "location": 91,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "callback": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/universal_http/async_abc.py": {
        "AsyncClientResponse.stream_download": {
            "name": "stream_download",
            "location": 48,
            "return": [
                "typing.AsyncIterator[builtins.bytes]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "callback": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "AsyncHTTPSender.build_context": {
            "name": "build_context",
            "location": 70,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPSender.__enter__": {
            "name": "__enter__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncHTTPSender.__exit__": {
            "name": "__exit__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/universal_http/async_requests.py": {
        "_msrest_next": {
            "name": "_msrest_next",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "StreamDownloadGenerator.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "user_callback": [
                    "int",
                    "Optional[int]",
                    "float",
                    "List[str]"
                ],
                "block": [
                    "int",
                    "tuple"
                ]
            }
        },
        "AsyncRequestsClientResponse.stream_download": {
            "name": "stream_download",
            "location": 137,
            "return": [
                "bool",
                "int",
                "Union[str, Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "str",
                    "int",
                    "Match",
                    "float"
                ],
                "callback": [
                    "str",
                    "int",
                    "Match",
                    "float"
                ]
            }
        },
        "TrioStreamDownloadGenerator.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "user_callback": [
                    "int",
                    "Optional[int]",
                    "float",
                    "List[str]"
                ],
                "block": [
                    "int",
                    "tuple"
                ]
            }
        },
        "TrioAsyncRequestsClientResponse.stream_download": {
            "name": "stream_download",
            "location": 183,
            "return": [
                "str",
                "bool",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "str",
                    "Dict[str, int]",
                    "List[str]",
                    "float"
                ],
                "callback": [
                    "str",
                    "Dict[str, int]",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/universal_http/requests.py": {
        "_patch_redirect": {
            "name": "_patch_redirect",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "default_session_configuration_callback": {
            "name": "default_session_configuration_callback",
            "location": 400,
            "return": [
                "bool",
                "Dict[str, str]",
                "dict",
                "Dict[int, Dict[int, int]]"
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "global_config": [
                    "bool"
                ],
                "local_config": [
                    "bool"
                ]
            }
        },
        "HTTPRequestsClientResponse.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "requests.Response",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "requests_response": []
            }
        },
        "HTTPRequestsClientResponse.body": {
            "name": "body",
            "location": 68,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "jumeaux.models.Request",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequestsClientResponse.text": {
            "name": "text",
            "location": 71,
            "return": [
                "str",
                "Mapping[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "HTTPRequestsClientResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsClientResponse.stream_download": {
            "name": "stream_download",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "Tuple[int, int]"
                ],
                "callback": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "BasicRequestsHTTPSender.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict"
                ]
            }
        },
        "BasicRequestsHTTPSender.__enter__": {
            "name": "__enter__",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicRequestsHTTPSender.__exit__": {
            "name": "__exit__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicRequestsHTTPSender.close": {
            "name": "close",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicRequestsHTTPSender.send": {
            "name": "send",
            "location": 125,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "_patch_redirect.enforce_http_spec": {
            "name": "enforce_http_spec",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "dict",
                    "Callable"
                ],
                "request": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "_patch_redirect.wrapped_redirect": {
            "name": "wrapped_redirect",
            "location": 170,
            "return": [
                "str",
                "app.models.Tweet",
                "app.models.Position",
                "bool"
            ],
            "arguments": {
                "resp": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ],
                "req": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestsHTTPSender.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestsHTTPSender.session": {
            "name": "session",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "MutableMapping[str, Any]",
                    "int"
                ]
            }
        },
        "RequestsHTTPSender._init_session": {
            "name": "_init_session",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "grouper.models.user.User",
                    "str",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "RequestsHTTPSender._configure_send": {
            "name": "_configure_send",
            "location": 236,
            "return": [
                "int",
                "str",
                "zerver.models.Realm",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request"
                ]
            }
        },
        "RequestsHTTPSender.send": {
            "name": "send",
            "location": 312,
            "return": [
                "str",
                "List[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Tuple[int]",
                    "viewer.models.Archive"
                ]
            }
        },
        "ClientRetryPolicy.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRetryPolicy.__call__": {
            "name": "__call__",
            "location": 356,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRetryPolicy.retries": {
            "name": "retries",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Sequence[T]",
                    "Iterable[Any]",
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "ClientRetryPolicy.backoff_factor": {
            "name": "backoff_factor",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "ClientRetryPolicy.max_backoff": {
            "name": "max_backoff",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "RequestHTTPSenderConfiguration.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RequestHTTPSenderConfiguration.save": {
            "name": "save",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "IO",
                    "models.User",
                    "List[str]",
                    "Mapping[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "RequestHTTPSenderConfiguration.load": {
            "name": "load",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "IO[str]",
                    "zerver.models.Realm",
                    "bool"
                ]
            }
        },
        "RequestsHTTPSender._configure_send.make_user_hook_cb": {
            "name": "make_user_hook_cb",
            "location": 272,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "user_hook": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "session": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "RequestsHTTPSender._configure_send.make_user_hook_cb.user_hook_cb": {
            "name": "user_hook_cb",
            "location": 273,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "r": [
                    "list",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        }
    },
    "msrest-for-python-master/msrest/universal_http/__init__.py": {},
    "msrest-for-python-master/tests/conftest.py": {},
    "msrest-for-python-master/tests/test_auth.py": {},
    "msrest-for-python-master/tests/test_client.py": {},
    "msrest-for-python-master/tests/test_exceptions.py": {
        "TestExceptions.test_request_exception": {
            "name": "test_request_exception",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_custom_exception": {
            "name": "test_custom_exception",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_request_exception.raise_for_status": {
            "name": "raise_for_status",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestExceptions.test_custom_exception.ErrorResponse.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestExceptions.test_custom_exception.ErrorResponseException.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deserialize": [
                    "dict",
                    "Optional[dict]"
                ],
                "response": [
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "TestExceptions.test_custom_exception.ErrorDetails.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/test_paging.py": {
        "FakePaged.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_basic_paging": {
            "name": "test_basic_paging",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_advance_paging": {
            "name": "test_advance_paging",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_get_paging": {
            "name": "test_get_paging",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_reset_paging": {
            "name": "test_reset_paging",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_none_value": {
            "name": "test_none_value",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPaging.test_basic_paging.internal_paging": {
            "name": "internal_paging",
            "location": 44,
            "return": [],
            "arguments": {
                "next_link": [],
                "raw": []
            }
        },
        "TestPaging.test_advance_paging.internal_paging": {
            "name": "internal_paging",
            "location": 65,
            "return": [],
            "arguments": {
                "next_link": [],
                "raw": []
            }
        },
        "TestPaging.test_get_paging.internal_paging": {
            "name": "internal_paging",
            "location": 93,
            "return": [],
            "arguments": {
                "next_link": [],
                "raw": []
            }
        },
        "TestPaging.test_reset_paging.internal_paging": {
            "name": "internal_paging",
            "location": 124,
            "return": [],
            "arguments": {
                "next_link": [],
                "raw": []
            }
        },
        "TestPaging.test_none_value.internal_paging": {
            "name": "internal_paging",
            "location": 157,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "next_link": [
                    "Set[str]",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "raw": [
                    "Set[str]",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/test_pipeline.py": {},
    "msrest-for-python-master/tests/test_polling.py": {
        "test_abc_polling": {
            "name": "test_abc_polling",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_polling": {
            "name": "test_no_polling",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 108,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "test_poller": {
            "name": "test_poller",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict"
                ]
            }
        },
        "test_broken_poller": {
            "name": "test_broken_poller",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict"
                ]
            }
        },
        "test_no_polling.deserialization_cb": {
            "name": "deserialization_cb",
            "location": 62,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "response": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PollingTwoSteps.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PollingTwoSteps.initialize": {
            "name": "initialize",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[str]",
                    "float"
                ],
                "initial_response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "deserialization_callback": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "PollingTwoSteps.run": {
            "name": "run",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingTwoSteps.status": {
            "name": "status",
            "location": 92,
            "return": [
                "Optional[Any]",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingTwoSteps.finished": {
            "name": "finished",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingTwoSteps.resource": {
            "name": "resource",
            "location": 104,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_poller.deserialization_callback": {
            "name": "deserialization_callback",
            "location": 119,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "test_broken_poller.deserialization_callback": {
            "name": "deserialization_callback",
            "location": 169,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "test_broken_poller.NoPollingError.run": {
            "name": "run",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/test_requests_universal.py": {
        "test_session_callback": {
            "name": "test_session_callback",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_max_retries_on_default_adapter": {
            "name": "test_max_retries_on_default_adapter",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_threading_basic_requests": {
            "name": "test_threading_basic_requests",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_threading_cfg_requests": {
            "name": "test_threading_cfg_requests",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_threading_basic_requests.thread_body": {
            "name": "thread_body",
            "location": 79,
            "return": [],
            "arguments": {
                "local_sender": []
            }
        },
        "test_threading_cfg_requests.thread_body": {
            "name": "thread_body",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "local_sender": [
                    "bool"
                ]
            }
        },
        "test_session_callback.callback": {
            "name": "callback",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "session": [
                    "float"
                ],
                "global_config": [
                    "Callable",
                    "dict"
                ],
                "local_config": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/test_runtime.py": {},
    "msrest-for-python-master/tests/test_serialization.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "location": [],
                "id": [],
                "name": [],
                "type": [],
                "tags": []
            }
        },
        "GenericResource.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "location": [],
                "id": [],
                "name": [],
                "type": [],
                "tags": [],
                "plan": [],
                "properties": []
            }
        },
        "TestModelDeserialization.setUp": {
            "name": "setUp",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelDeserialization.test_model_kwargs": {
            "name": "test_model_kwargs",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelDeserialization.test_model_kwargs_logs": {
            "name": "test_model_kwargs_logs",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelDeserialization.test_empty_enum_logs": {
            "name": "test_empty_enum_logs",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelDeserialization.test_response": {
            "name": "test_response",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.setUp": {
            "name": "setUp",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_validation_type": {
            "name": "test_validation_type",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_validation_flag": {
            "name": "test_validation_flag",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_query": {
            "name": "test_serialize_query",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_custom_model": {
            "name": "test_serialize_custom_model",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_direct_model": {
            "name": "test_serialize_direct_model",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_validate": {
            "name": "test_validate",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_model_validate": {
            "name": "test_model_validate",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_obj_serialize_none": {
            "name": "test_obj_serialize_none",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_obj_with_malformed_map": {
            "name": "test_obj_with_malformed_map",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_obj_with_mismatched_map": {
            "name": "test_obj_with_mismatched_map",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_enum": {
            "name": "test_attr_enum",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_none": {
            "name": "test_attr_none",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_int": {
            "name": "test_attr_int",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_str": {
            "name": "test_attr_str",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_bool": {
            "name": "test_attr_bool",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_sequence": {
            "name": "test_attr_sequence",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_duration": {
            "name": "test_attr_duration",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_list_simple": {
            "name": "test_attr_list_simple",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_empty_list": {
            "name": "test_empty_list",
            "location": 723,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_list_complex": {
            "name": "test_attr_list_complex",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_attr_dict_simple": {
            "name": "test_attr_dict_simple",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_datetime": {
            "name": "test_serialize_datetime",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_time": {
            "name": "test_serialize_time",
            "location": 828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_primitive_types": {
            "name": "test_serialize_primitive_types",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_object": {
            "name": "test_serialize_object",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_empty_iter": {
            "name": "test_serialize_empty_iter",
            "location": 879,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_str_as_iter": {
            "name": "test_serialize_str_as_iter",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_int_as_iter_with_div": {
            "name": "test_serialize_int_as_iter_with_div",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_from_dict_datetime": {
            "name": "test_serialize_from_dict_datetime",
            "location": 895,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_json_obj": {
            "name": "test_serialize_json_obj",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization": {
            "name": "test_polymorphic_serialization",
            "location": 982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_key_type": {
            "name": "test_key_type",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_no_send": {
            "name": "test_additional_properties_no_send",
            "location": 1174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_manual": {
            "name": "test_additional_properties_manual",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties": {
            "name": "test_additional_properties",
            "location": 1243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_with_auto_model": {
            "name": "test_additional_properties_with_auto_model",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_declared": {
            "name": "test_additional_properties_declared",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_long_as_type_object": {
            "name": "test_long_as_type_object",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_unicode_as_type_object": {
            "name": "test_unicode_as_type_object",
            "location": 1383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_datetime_types_as_type_object": {
            "name": "test_datetime_types_as_type_object",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_decimal_types_as_type_object": {
            "name": "test_decimal_types_as_type_object",
            "location": 1421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_json_with_xml_map": {
            "name": "test_json_with_xml_map",
            "location": 1436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.setUp": {
            "name": "setUp",
            "location": 1482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_cls_method_deserialization": {
            "name": "test_cls_method_deserialization",
            "location": 1486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_twice_key_scenario": {
            "name": "test_twice_key_scenario",
            "location": 1519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_array_deserialize": {
            "name": "test_array_deserialize",
            "location": 1546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_personalize_deserialization": {
            "name": "test_personalize_deserialization",
            "location": 1550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_robust_deserialization": {
            "name": "test_robust_deserialization",
            "location": 1575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_basic_deserialization": {
            "name": "test_basic_deserialization",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_flattening": {
            "name": "test_deserialize_flattening",
            "location": 1645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_storage": {
            "name": "test_deserialize_storage",
            "location": 1685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_invalid_json": {
            "name": "test_invalid_json",
            "location": 1728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_non_obj_deserialization": {
            "name": "test_non_obj_deserialization",
            "location": 1736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_obj_with_no_attr": {
            "name": "test_obj_with_no_attr",
            "location": 1766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_obj_with_malformed_map": {
            "name": "test_obj_with_malformed_map",
            "location": 1778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_none": {
            "name": "test_attr_none",
            "location": 1809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_int": {
            "name": "test_attr_int",
            "location": 1816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_str": {
            "name": "test_attr_str",
            "location": 1828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_bool": {
            "name": "test_attr_bool",
            "location": 1849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_list_simple": {
            "name": "test_attr_list_simple",
            "location": 1866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_list_in_list": {
            "name": "test_attr_list_in_list",
            "location": 1895,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_list_complex": {
            "name": "test_attr_list_complex",
            "location": 1924,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_object": {
            "name": "test_deserialize_object",
            "location": 1943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_date": {
            "name": "test_deserialize_date",
            "location": 1972,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_time": {
            "name": "test_deserialize_time",
            "location": 1980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_datetime": {
            "name": "test_deserialize_datetime",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_datetime_rfc": {
            "name": "test_deserialize_datetime_rfc",
            "location": 2092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_rfc_pickable": {
            "name": "test_rfc_pickable",
            "location": 2141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization": {
            "name": "test_polymorphic_deserialization",
            "location": 2155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_missing_info": {
            "name": "test_polymorphic_missing_info",
            "location": 2280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization_with_escape": {
            "name": "test_polymorphic_deserialization_with_escape",
            "location": 2311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties": {
            "name": "test_additional_properties",
            "location": 2354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_declared": {
            "name": "test_additional_properties_declared",
            "location": 2384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_not_configured": {
            "name": "test_additional_properties_not_configured",
            "location": 2418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_flattening": {
            "name": "test_additional_properties_flattening",
            "location": 2447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_attr_enum": {
            "name": "test_attr_enum",
            "location": 2477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_long_as_type_object": {
            "name": "test_long_as_type_object",
            "location": 2520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_failsafe_deserialization": {
            "name": "test_failsafe_deserialization",
            "location": 2537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelInstanceEquality.test_model_instance_equality": {
            "name": "test_model_instance_equality",
            "location": 2566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAzureCoreExceptions.test_azure_core_exceptions": {
            "name": "test_azure_core_exceptions",
            "location": 2585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.TestObj.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "attr_a": [],
                "attr_b": [],
                "attr_c": [],
                "attr_d": [],
                "attr_e": [],
                "attr_f": [],
                "attr_g": []
            }
        },
        "TestRuntimeSerialized.TestObj.__str__": {
            "name": "__str__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_direct_model.value_override": {
            "name": "value_override",
            "location": 399,
            "return": [],
            "arguments": {
                "attr": [],
                "attr_desc": [],
                "value": []
            }
        },
        "TestRuntimeDeserialized.test_cls_method_deserialization.assert_model": {
            "name": "assert_model",
            "location": 1496,
            "return": [],
            "arguments": {
                "inst": []
            }
        },
        "TestRuntimeDeserialized.test_personalize_deserialization.duration_rest_key_extractor": {
            "name": "duration_rest_key_extractor",
            "location": 1562,
            "return": [],
            "arguments": {
                "attr": [],
                "attr_desc": [],
                "data": []
            }
        },
        "TestModelDeserialization.test_model_kwargs.MyModel.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelDeserialization.test_model_kwargs_logs.MyModel.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeSerialized.test_serialize_custom_model.CustomSample.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestRuntimeSerialized.test_model_validate.TestObj.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeSerialized.test_serialize_from_dict_datetime.DateTimeTest.__init__": {
            "name": "__init__",
            "location": 900,
            "return": [],
            "arguments": {
                "self": [],
                "birthday": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization.Zoo.__init__": {
            "name": "__init__",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "animals": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization.Animal.__init__": {
            "name": "__init__",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization.Dog.__init__": {
            "name": "__init__",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_dog_food": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization.Cat.__init__": {
            "name": "__init__",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_mice": [],
                "dislikes": []
            }
        },
        "TestRuntimeSerialized.test_polymorphic_serialization.Siamese.__init__": {
            "name": "__init__",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_mice": [],
                "dislikes": [],
                "color": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_no_send.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_manual.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 1214,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "additional_properties": []
            }
        },
        "TestRuntimeSerialized.test_additional_properties_declared.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "additional_properties": []
            }
        },
        "TestRuntimeDeserialized.test_twice_key_scenario.LocalModel.__init__": {
            "name": "__init__",
            "location": 1532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_basic_deserialization.TestObj.__init__": {
            "name": "__init__",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_flattening.ComputeResource.__init__": {
            "name": "__init__",
            "location": 1660,
            "return": [],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "TestRuntimeDeserialized.test_deserialize_flattening.VirtualMachine.__init__": {
            "name": "__init__",
            "location": 1672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeDeserialized.test_obj_with_malformed_map.BadResponse.__init__": {
            "name": "__init__",
            "location": 1803,
            "return": [],
            "arguments": {}
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization.Zoo.__init__": {
            "name": "__init__",
            "location": 2163,
            "return": [],
            "arguments": {
                "self": [],
                "animals": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization.Animal.__init__": {
            "name": "__init__",
            "location": 2177,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization.Dog.__init__": {
            "name": "__init__",
            "location": 2188,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_dog_food": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization.Cat.__init__": {
            "name": "__init__",
            "location": 2206,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_mice": [],
                "dislikes": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization.Siamese.__init__": {
            "name": "__init__",
            "location": 2222,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_mice": [],
                "dislikes": [],
                "color": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_missing_info.Animal.__init__": {
            "name": "__init__",
            "location": 2292,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization_with_escape.Animal.__init__": {
            "name": "__init__",
            "location": 2324,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeDeserialized.test_polymorphic_deserialization_with_escape.Dog.__init__": {
            "name": "__init__",
            "location": 2335,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "likes_dog_food": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_declared.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 2393,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "additional_properties": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_not_configured.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 2426,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestRuntimeDeserialized.test_additional_properties_flattening.AdditionalTest.__init__": {
            "name": "__init__",
            "location": 2456,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "content": []
            }
        },
        "TestRuntimeDeserialized.test_failsafe_deserialization.Error.__init__": {
            "name": "__init__",
            "location": 2545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelInstanceEquality.test_model_instance_equality.Animal.__init__": {
            "name": "__init__",
            "location": 2574,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "msrest-for-python-master/tests/test_universal_pipeline.py": {
        "test_user_agent": {
            "name": "test_user_agent",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_no_log": {
            "name": "test_no_log",
            "location": 65,
            "return": [],
            "arguments": {
                "mock_http_logger": []
            }
        },
        "test_raw_deserializer": {
            "name": "test_raw_deserializer",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_raw_deserializer.build_response": {
            "name": "build_response",
            "location": 112,
            "return": [],
            "arguments": {
                "body": [],
                "content_type": []
            }
        },
        "test_raw_deserializer.build_response.MockResponse.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "body": [],
                "content_type": []
            }
        },
        "test_raw_deserializer.build_response.MockResponse.body": {
            "name": "body",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/test_xml_serialization.py": {
        "assert_xml_equals": {
            "name": "assert_xml_equals",
            "location": 35,
            "return": [],
            "arguments": {
                "x1": [],
                "x2": []
            }
        },
        "TestXmlDeserialization.test_basic": {
            "name": "test_basic",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_unicode": {
            "name": "test_basic_unicode",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_text": {
            "name": "test_basic_text",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_add_prop": {
            "name": "test_add_prop",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_object": {
            "name": "test_object",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_object_no_text": {
            "name": "test_object_no_text",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_empty": {
            "name": "test_basic_empty",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_empty_list": {
            "name": "test_basic_empty_list",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_wrapped_items_name_basic_types": {
            "name": "test_list_wrapped_items_name_basic_types",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_not_wrapped_items_name_basic_types": {
            "name": "test_list_not_wrapped_items_name_basic_types",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_wrapped_basic_types": {
            "name": "test_list_wrapped_basic_types",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_not_wrapped_basic_types": {
            "name": "test_list_not_wrapped_basic_types",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_wrapped_items_name_complex_types": {
            "name": "test_list_wrapped_items_name_complex_types",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_not_wrapped_items_name_complex_types": {
            "name": "test_list_not_wrapped_items_name_complex_types",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_wrapped_complex_types": {
            "name": "test_list_wrapped_complex_types",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_list_not_wrapped_complex_types": {
            "name": "test_list_not_wrapped_complex_types",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_additional_properties": {
            "name": "test_basic_additional_properties",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_namespace": {
            "name": "test_basic_namespace",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_complex_namespace": {
            "name": "test_complex_namespace",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_polymorphic_deserialization": {
            "name": "test_polymorphic_deserialization",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic": {
            "name": "test_basic",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_unicode": {
            "name": "test_basic_unicode",
            "location": 655,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_nested_unicode": {
            "name": "test_nested_unicode",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_add_prop": {
            "name": "test_add_prop",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_object": {
            "name": "test_object",
            "location": 733,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_type_basic": {
            "name": "test_type_basic",
            "location": 749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_text": {
            "name": "test_basic_text",
            "location": 776,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_direct_array": {
            "name": "test_direct_array",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_basic_types": {
            "name": "test_list_wrapped_basic_types",
            "location": 830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_basic_types": {
            "name": "test_list_not_wrapped_basic_types",
            "location": 859,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_items_name_complex_types": {
            "name": "test_list_wrapped_items_name_complex_types",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_items_name_complex_types": {
            "name": "test_list_not_wrapped_items_name_complex_types",
            "location": 927,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_complex_types": {
            "name": "test_list_wrapped_complex_types",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_complex_types": {
            "name": "test_list_not_wrapped_complex_types",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_two_complex_same_type": {
            "name": "test_two_complex_same_type",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_namespace": {
            "name": "test_basic_namespace",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_is_xml": {
            "name": "test_basic_is_xml",
            "location": 1108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_unicode_is_xml": {
            "name": "test_basic_unicode_is_xml",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_add_prop_is_xml": {
            "name": "test_add_prop_is_xml",
            "location": 1159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_object_is_xml": {
            "name": "test_object_is_xml",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_type_basic_is_xml": {
            "name": "test_type_basic_is_xml",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_direct_array_is_xml": {
            "name": "test_direct_array_is_xml",
            "location": 1233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_basic_types_is_xml": {
            "name": "test_list_wrapped_basic_types_is_xml",
            "location": 1263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_basic_types_is_xml": {
            "name": "test_list_not_wrapped_basic_types_is_xml",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_items_name_complex_types_is_xml": {
            "name": "test_list_wrapped_items_name_complex_types_is_xml",
            "location": 1319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_items_name_complex_types_is_xml": {
            "name": "test_list_not_wrapped_items_name_complex_types_is_xml",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_wrapped_complex_types_is_xml": {
            "name": "test_list_wrapped_complex_types_is_xml",
            "location": 1399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_list_not_wrapped_complex_types_is_xml": {
            "name": "test_list_not_wrapped_complex_types_is_xml",
            "location": 1439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_two_complex_same_type_is_xml": {
            "name": "test_two_complex_same_type_is_xml",
            "location": 1480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_basic_namespace_is_xml": {
            "name": "test_basic_namespace_is_xml",
            "location": 1517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlSerialization.test_complex_namespace": {
            "name": "test_complex_namespace",
            "location": 1543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_basic_additional_properties.XmlModel.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXmlDeserialization.test_polymorphic_deserialization.CorrelationFilter.__init__": {
            "name": "__init__",
            "location": 595,
            "return": [],
            "arguments": {
                "self": [],
                "correlation_id": []
            }
        },
        "TestXmlDeserialization.test_polymorphic_deserialization.SqlFilter.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/__init__.py": {},
    "msrest-for-python-master/tests/asynctests/test_async_client.py": {},
    "msrest-for-python-master/tests/asynctests/test_async_paging.py": {
        "FakePaged.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/asynctests/test_pipeline.py": {
        "test_conf_async_trio_requests": {
            "name": "test_conf_async_trio_requests",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sans_io_exception.SwapExec.on_exception": {
            "name": "on_exception",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests": [
                    "int",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/asynctests/test_polling.py": {
        "client": {
            "name": "client",
            "location": 111,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "test_no_polling.deserialization_cb": {
            "name": "deserialization_cb",
            "location": 65,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "response": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PollingTwoSteps.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PollingTwoSteps.initialize": {
            "name": "initialize",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[str]",
                    "float"
                ],
                "initial_response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "deserialization_callback": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "PollingTwoSteps.status": {
            "name": "status",
            "location": 95,
            "return": [
                "Optional[Any]",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingTwoSteps.finished": {
            "name": "finished",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingTwoSteps.resource": {
            "name": "resource",
            "location": 107,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_poller.deserialization_callback": {
            "name": "deserialization_callback",
            "location": 123,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "test_broken_poller.deserialization_callback": {
            "name": "deserialization_callback",
            "location": 160,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "test_poller.MockedModel.deserialize": {
            "name": "deserialize",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Mapping",
                    "List[Callable]"
                ],
                "data": [
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/asynctests/test_universal_http.py": {
        "test_conf_async_trio_requests": {
            "name": "test_conf_async_trio_requests",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "msrest-for-python-master/tests/storage_models/account_sas_parameters.py": {
        "AccountSasParameters.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Callable",
                    "bool"
                ],
                "resource_types": [
                    "str",
                    "int"
                ],
                "permissions": [
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Callable",
                    "bool"
                ],
                "shared_access_expiry_time": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "ip_address_or_range": [
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Callable",
                    "bool"
                ],
                "protocols": [
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Callable",
                    "bool"
                ],
                "shared_access_start_time": [
                    "bool",
                    "Union[int, float]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict"
                ],
                "key_to_sign": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/check_name_availability_result.py": {
        "CheckNameAvailabilityResult.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/custom_domain.py": {
        "CustomDomain.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "use_sub_domain": [
                    "bool"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/encryption.py": {
        "Encryption.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/encryption_service.py": {
        "EncryptionService.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/encryption_services.py": {
        "EncryptionServices.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blob": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/endpoints.py": {
        "Endpoints.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/list_account_sas_response.py": {
        "ListAccountSasResponse.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/list_service_sas_response.py": {
        "ListServiceSasResponse.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/resource.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "tuple"
                ],
                "tags": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/service_sas_parameters.py": {
        "ServiceSasParameters.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "canonicalized_resource": [
                    "bool",
                    "str",
                    "float"
                ],
                "resource": [
                    "bool",
                    "str",
                    "float"
                ],
                "permissions": [
                    "bool",
                    "str",
                    "float"
                ],
                "ip_address_or_range": [
                    "bool",
                    "str",
                    "float"
                ],
                "protocols": [
                    "bool",
                    "str",
                    "float"
                ],
                "shared_access_start_time": [
                    "bool",
                    "Union[int, float]",
                    "float",
                    "Optional[Callable[[], Any]]",
                    "Dict[str, Any]",
                    "List[Callable]"
                ],
                "shared_access_expiry_time": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Sequence[str]",
                    "Dict[Tuple[str, str], Exception]"
                ],
                "identifier": [
                    "bool",
                    "str",
                    "float"
                ],
                "partition_key_start": [
                    "str",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "partition_key_end": [
                    "bool",
                    "str",
                    "bytearray",
                    "Tuple[str, str]"
                ],
                "row_key_start": [
                    "str",
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ],
                "row_key_end": [
                    "int",
                    "Optional[int]",
                    "Tuple[str, str]",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "key_to_sign": [
                    "bool",
                    "List[str]"
                ],
                "cache_control": [
                    "bool",
                    "str",
                    "float"
                ],
                "content_disposition": [
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]"
                ],
                "content_encoding": [
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]"
                ],
                "content_language": [
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]"
                ],
                "content_type": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/sku.py": {
        "Sku.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account.py": {
        "StorageAccount.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "tags": [
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "enable_https_traffic_only": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_check_name_availability_parameters.py": {
        "StorageAccountCheckNameAvailabilityParameters.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_create_parameters.py": {
        "StorageAccountCreateParameters.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "str",
                    "bool"
                ],
                "kind": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "str",
                    "bool"
                ],
                "location": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "tags": [
                    "Optional[str]",
                    "str"
                ],
                "custom_domain": [
                    "Optional[bool]",
                    "str",
                    "Optional[int]",
                    "allennlp.models.model.Model",
                    "allennlp.models.Model"
                ],
                "encryption": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "str",
                    "bool"
                ],
                "access_tier": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "str",
                    "bool"
                ],
                "enable_https_traffic_only": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_key.py": {
        "StorageAccountKey.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_list_keys_result.py": {
        "StorageAccountListKeysResult.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_paged.py": {
        "StorageAccountPaged.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_regenerate_key_parameters.py": {
        "StorageAccountRegenerateKeyParameters.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "str",
                    "float",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_account_update_parameters.py": {
        "StorageAccountUpdateParameters.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sku": [
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "tags": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ],
                "custom_domain": [
                    "int",
                    "float",
                    "allennlp.models.Model",
                    "Optional[int]"
                ],
                "encryption": [
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "access_tier": [
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "enable_https_traffic_only": [
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/storage_management_client_enums.py": {},
    "msrest-for-python-master/tests/storage_models/usage.py": {
        "Usage.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/usage_name.py": {
        "UsageName.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/usage_paged.py": {
        "UsagePaged.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "msrest-for-python-master/tests/storage_models/__init__.py": {}
}
{
    "mtg_ssm-trunk/setup.py": {},
    "mtg_ssm-trunk/mtg_ssm/ssm.py": {
        "epilog": {
            "name": "epilog",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "set_type_list": {
            "name": "set_type_list",
            "location": 27,
            "return": [
                "Set[mtg_ssm.scryfall.models.ScrySetType]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 42,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        },
        "get_oracle": {
            "name": "get_oracle",
            "location": 139,
            "return": [
                "mtg_ssm.containers.indexes.Oracle"
            ],
            "arguments": {
                "set_types": [
                    "Set[mtg_ssm.scryfall.models.ScrySetType]",
                    "str",
                    "Type",
                    "zerver.models.Realm",
                    "Type[Exception]"
                ],
                "include_digital": [
                    "bool",
                    "str",
                    "Type",
                    "Iterable[str]"
                ]
            }
        },
        "get_serializer": {
            "name": "get_serializer",
            "location": 148,
            "return": [
                "ser_interface.SerializationDialect"
            ],
            "arguments": {
                "dialect_mapping": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "path": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "pathpy.core.path.Path.Collection"
                ]
            }
        },
        "get_backup_path": {
            "name": "get_backup_path",
            "location": 159,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "pathlib.PosixPath",
                "Sequence[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_temp_path": {
            "name": "get_temp_path",
            "location": 165,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "pathlib.PosixPath",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]",
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "serializer": [
                    "str",
                    "List[str]",
                    "Callable[str,None]",
                    "pathlib.Path",
                    "IO",
                    "Callable[[str],None]",
                    "IO[Any]"
                ],
                "collection": [
                    "str",
                    "List[str]",
                    "Callable[str,None]",
                    "pathlib.Path",
                    "IO",
                    "Callable[[str],None]",
                    "IO[Any]"
                ],
                "path": [
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "create_cmd": {
            "name": "create_cmd",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "oracle": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "update_cmd": {
            "name": "update_cmd",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "oracle": [
                    "Callable",
                    "str",
                    "float",
                    "Dict",
                    "int",
                    "Callable[...,Awaitable]"
                ]
            }
        },
        "merge_cmd": {
            "name": "merge_cmd",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "oracle": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "diff_cmd": {
            "name": "diff_cmd",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "oracle": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtg_ssm-trunk/mtg_ssm/version.py": {},
    "mtg_ssm-trunk/mtg_ssm/__init__.py": {},
    "mtg_ssm-trunk/mtg_ssm/containers/bundles.py": {
        "remove_digital": {
            "name": "remove_digital",
            "location": 15,
            "return": [
                "ScryfallDataSet",
                "List[List[int]]",
                "BinaryIO",
                "Tuple"
            ],
            "arguments": {
                "scryfall_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[int]",
                    "Iterable"
                ]
            }
        },
        "filter_set_types": {
            "name": "filter_set_types",
            "location": 28,
            "return": [
                "ScryfallDataSet",
                "str",
                "Optional[Union[Any,str]]"
            ],
            "arguments": {
                "scryfall_data": [
                    "Set",
                    "Tuple",
                    "List[Tuple[str,Any]]",
                    "Dict",
                    "List[tuple[Union[str,Any]]]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]",
                    "Tuple[List[int],List[int]]",
                    "Tuple[Union[list[int],list[int]]]"
                ],
                "set_types": [
                    "Set[mtg_ssm.scryfall.models.ScrySetType]",
                    "str",
                    "Callable[[str],Any]",
                    "Dict[str,Any]",
                    "Callable[str,Any]"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/containers/collection.py": {
        "MagicCollection.__add__": {
            "name": "__add__",
            "location": 17,
            "return": [
                "Union[(MagicCollection, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "MagicCollection.__iadd__": {
            "name": "__iadd__",
            "location": 25,
            "return": [
                "Union[(MagicCollection, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[FixedPoint,int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MagicCollection.__sub__": {
            "name": "__sub__",
            "location": 31,
            "return": [
                "Union[(MagicCollection, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "MagicCollection.__isub__": {
            "name": "__isub__",
            "location": 39,
            "return": [
                "Union[(MagicCollection, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[FixedPoint,int]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/containers/counts.py": {
        "aggregate_card_counts": {
            "name": "aggregate_card_counts",
            "location": 23,
            "return": [
                "Dict[(Any, Dict[(CountType, int)])]"
            ],
            "arguments": {
                "card_rows": [
                    "Dict[str,str]",
                    "Dict",
                    "Iterable[Dict[str,Any]]",
                    "Iterator[Dict[str,Any]]"
                ],
                "oracle": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "merge_card_counts": {
            "name": "merge_card_counts",
            "location": 46,
            "return": [
                "Dict[(uuid.UUID, Any)]"
            ],
            "arguments": {}
        },
        "diff_card_counts": {
            "name": "diff_card_counts",
            "location": 55,
            "return": [
                "collections.defaultdict[(Any, dict)]"
            ],
            "arguments": {
                "left": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[float]",
                    "List[float]"
                ],
                "right": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[float]",
                    "List[float]"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/containers/indexes.py": {
        "name_card_sort_key": {
            "name": "name_card_sort_key",
            "location": 13,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "card": [
                    "str",
                    "int"
                ]
            }
        },
        "set_card_sort_key": {
            "name": "set_card_sort_key",
            "location": 19,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "card": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "busboy.util.Maybe[psycopg2.extensions.connection]",
                    "bytes",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "build_snnmas": {
            "name": "build_snnmas",
            "location": 25,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "card": [
                    "Dict[str,Union[str,Any]]",
                    "bool",
                    "Set[str]",
                    "Iterable[zam_repondeur.models.Amendement]",
                    "None",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "ScryfallDataIndex.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScryfallDataIndex.load_data": {
            "name": "load_data",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scrydata": [
                    "str",
                    "List[int]",
                    "List",
                    "Dict"
                ]
            }
        },
        "Oracle.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scrydata": [
                    "str",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/containers/legacy.py": {
        "extract_counts": {
            "name": "extract_counts",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "card_row": [
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable[str]",
                    "Mapping[Any,Any]",
                    "Optional[Any]",
                    "Sequence"
                ]
            }
        },
        "find_scryfall_id": {
            "name": "find_scryfall_id",
            "location": 102,
            "return": [
                "str",
                "int",
                "None",
                "Generator[Union[Any,None,None]]",
                "Dict"
            ],
            "arguments": {
                "card_row": [
                    "Dict[str,Any]",
                    "mtg_ssm.containers.indexes.Oracle",
                    "Dict[str,str]",
                    "Dict"
                ],
                "oracle": [
                    "Dict[str,str]",
                    "Dict",
                    "mtg_ssm.containers.indexes.Oracle",
                    "Dict[str,bool]",
                    "Dict[str,Any]"
                ]
            }
        },
        "coerce_row": {
            "name": "coerce_row",
            "location": 148,
            "return": [
                "dict"
            ],
            "arguments": {
                "card_row": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "mtg_ssm.containers.indexes.Oracle",
                    "Iterable[str]"
                ],
                "oracle": [
                    "Dict[str,Any]",
                    "str",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/containers/__init__.py": {},
    "mtg_ssm-trunk/mtg_ssm/mtg/util.py": {
        "dig_str": {
            "name": "dig_str",
            "location": 13,
            "return": [
                "Tuple[Optional[str]]",
                "Optional[str]",
                "Tuple[Union[int,str,None]]",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "collector_number": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "collector_int_var": {
            "name": "collector_int_var",
            "location": 27,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "card": [
                    "str",
                    "mtg_ssm.scryfall.models.ScryCard"
                ]
            }
        },
        "is_strict_basic": {
            "name": "is_strict_basic",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "card_name": [
                    "str"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/mtg/__init__.py": {},
    "mtg_ssm-trunk/mtg_ssm/scryfall/fetcher.py": {
        "_cache_path": {
            "name": "_cache_path",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int",
                    "Exception"
                ],
                "extension": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_fetch_endpoint": {
            "name": "_fetch_endpoint",
            "location": 41,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict",
                "app.models.TweetContent",
                "Dict[str, Any]",
                "Optional[Any]"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "_deserialize_cards": {
            "name": "_deserialize_cards",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "card_jsons": [
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "scryfetch": {
            "name": "scryfetch",
            "location": 84,
            "return": [
                "ScryfallDataSet",
                "bool",
                "str",
                "models.Subtask"
            ],
            "arguments": {}
        }
    },
    "mtg_ssm-trunk/mtg_ssm/scryfall/models.py": {},
    "mtg_ssm-trunk/mtg_ssm/scryfall/__init__.py": {},
    "mtg_ssm-trunk/mtg_ssm/serialization/csv.py": {
        "row_for_card": {
            "name": "row_for_card",
            "location": 20,
            "return": [
                "dict"
            ],
            "arguments": {
                "card": [
                    "Dict[str,Any]",
                    "Type",
                    "mtg_ssm.scryfall.models.ScryCard"
                ],
                "card_count": [
                    "Dict[str,Any]",
                    "mtg_ssm.scryfall.models.ScryCard",
                    "Type"
                ]
            }
        },
        "rows_for_cards": {
            "name": "rows_for_cards",
            "location": 31,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "collection": [
                    "Type",
                    "mtg_ssm.containers.collection.MagicCollection",
                    "models.Name"
                ],
                "verbose": [
                    "bool",
                    "int"
                ]
            }
        },
        "CsvFullDialect.write": {
            "name": "write",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "collection": [
                    "Dict[str,Any]",
                    "bool",
                    "Set[str]",
                    "str",
                    "int"
                ]
            }
        },
        "CsvFullDialect.read": {
            "name": "read",
            "location": 61,
            "return": [
                "mtg_ssm.containers.collection.MagicCollection"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ],
                "oracle": [
                    "int",
                    "str",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "List[Any]",
                    "Mapping"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/serialization/interface.py": {
        "SerializationDialect.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[SerializationDialect]",
                    "bool",
                    "Type",
                    "Hashable"
                ]
            }
        },
        "SerializationDialect.write": {
            "name": "write",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ],
                "collection": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "SerializationDialect.read": {
            "name": "read",
            "location": 47,
            "return": [
                "mtg_ssm.containers.collection.MagicCollection",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ],
                "oracle": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "SerializationDialect.dialects": {
            "name": "dialects",
            "location": 51,
            "return": [
                "List[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "cls": [
                    "Type[SerializationDialect]",
                    "Type",
                    "Mapping[Any,Any]",
                    "Mapping",
                    "int",
                    "Dict",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "Iterable"
                ]
            }
        },
        "SerializationDialect.by_extension": {
            "name": "by_extension",
            "location": 60,
            "return": [
                "Type[SerializationDialect]"
            ],
            "arguments": {
                "cls": [
                    "Type[SerializationDialect]",
                    "float",
                    "Type",
                    "str",
                    "int"
                ],
                "extension": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "List[Callable]",
                    "int"
                ],
                "dialect_mappings": [
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/serialization/xlsx.py": {
        "_card_set_sort_key": {
            "name": "_card_set_sort_key",
            "location": 37,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cset": [
                    "str",
                    "int",
                    "salon.models.Stylist",
                    "db.models.Cowboy",
                    "abilian.core.models.subjects.User",
                    "bool"
                ]
            }
        },
        "create_all_sets": {
            "name": "create_all_sets",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "List",
                    "List[str]",
                    "openpyxl.worksheeworksheeWorksheet"
                ],
                "index": [
                    "mtg_ssm.scryfall.models.ScryCard",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "style_all_sets": {
            "name": "style_all_sets",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "create_haverefs": {
            "name": "create_haverefs",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "index": [
                    "str",
                    "Sequence[T]",
                    "List[str]",
                    "Callable[[T],bool]",
                    "List[int]",
                    "Callable[T,bool]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "cards": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Sequence[T]",
                    "Callable[[T],bool]",
                    "Optional[int]"
                ]
            }
        },
        "get_references": {
            "name": "get_references",
            "location": 94,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "index": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "card_name": [
                    "str"
                ],
                "exclude_sets": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "List",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "create_all_cards": {
            "name": "create_all_cards",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "openpyxl.worksheeworksheeWorksheet",
                    "float"
                ],
                "index": [
                    "Type",
                    "denite.util.UserContext"
                ]
            }
        },
        "style_all_cards": {
            "name": "style_all_cards",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "create_set_sheet": {
            "name": "create_set_sheet",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "openpyxl.worksheeworksheeWorksheet",
                    "bool"
                ],
                "collection": [
                    "Dict[str,Dict[str,int]]",
                    "Dict",
                    "Dict[str,dict[str,int]]",
                    "int",
                    "str",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "setcode": [
                    "str",
                    "int"
                ]
            }
        },
        "style_set_sheet": {
            "name": "style_set_sheet",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "rows_from_sheet": {
            "name": "rows_from_sheet",
            "location": 203,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "sheet": [
                    "int",
                    "Dict",
                    "openpyxl.worksheeworksheeWorksheet",
                    "List",
                    "float",
                    "Tuple",
                    "Union[Dict,List]",
                    "Union[Dict,Tuple]"
                ]
            }
        },
        "rows_for_workbook": {
            "name": "rows_for_workbook",
            "location": 213,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "book": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "XlsxDialect.write": {
            "name": "write",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "collection": [
                    "int",
                    "List",
                    "List[str]",
                    "pathlib.Path",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "XlsxDialect.read": {
            "name": "read",
            "location": 258,
            "return": [
                "mtg_ssm.containers.collection.MagicCollection"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "datetime.timedelta"
                ],
                "oracle": [
                    "int",
                    "str",
                    "Union[Dict[str,Any],List[Any]]",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "List[Any]",
                    "Mapping"
                ]
            }
        }
    },
    "mtg_ssm-trunk/mtg_ssm/serialization/__init__.py": {},
    "mtg_ssm-trunk/tests/conftest.py": {
        "fetcher_cache_dir": {
            "name": "fetcher_cache_dir",
            "location": 23,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "_pytesmonkeypatch.MonkeyPatch",
                    "Union[bool, str]"
                ],
                "monkeypatch": [
                    "_pytesmonkeypatch.MonkeyPatch",
                    "Union[str, 'Path']",
                    "Callable",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "requests_mock": {
            "name": "requests_mock",
            "location": 31,
            "return": [
                "Generator[responses.RequestsMock,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "cards_data": {
            "name": "cards_data",
            "location": 38,
            "return": [
                "str",
                "bool",
                "bytes",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {}
        },
        "sets_data": {
            "name": "sets_data",
            "location": 46,
            "return": [
                "str",
                "bytes",
                "Optional[str]",
                "Callable",
                "Union[List[str], str]"
            ],
            "arguments": {}
        },
        "id_to_card": {
            "name": "id_to_card",
            "location": 54,
            "return": [
                "Dict[,Union[mtg_ssm.scryfall.models.ScryCard,dict,str]]",
                "int",
                "float",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cards_data": [
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict",
                    "str",
                    "List[dict]",
                    "bytes",
                    "Optional[List[Dict]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "scryfall_data": {
            "name": "scryfall_data",
            "location": 60,
            "return": [
                "ScryfallDataSet",
                "bytes",
                "bool",
                "Dict",
                "Optional[str]",
                "salon.models.Stylist",
                "List[Dict[str,Any]]",
                "bytearray"
            ],
            "arguments": {
                "cards_data": [
                    "List[mtg_ssm.scryfall.models.ScrySet]",
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict",
                    "bytes",
                    "List",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Tuple[str]]",
                    "Tuple[str]",
                    "None"
                ],
                "sets_data": [
                    "List[mtg_ssm.scryfall.models.ScrySet]",
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict",
                    "bytes",
                    "List",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Tuple[str]]",
                    "Tuple[str]",
                    "None"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/gen_testdata.py": {
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtg_ssm-trunk/tests/test_ssm.py": {
        "oracle": {
            "name": "oracle",
            "location": 20,
            "return": [
                "Oracle",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "scryfall_data": [
                    "Iterable",
                    "Dict",
                    "Dict[str,Outcome]",
                    "List"
                ]
            }
        },
        "patch_scryfetch": {
            "name": "patch_scryfetch",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "int",
                    "models.User"
                ],
                "oracle": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_get_args": {
            "name": "test_get_args",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "cmdline": [
                    "str",
                    "bool",
                    "argparse.Namespace",
                    "None",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "argparse.Namespace",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_create_cmd": {
            "name": "test_create_cmd",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "oracle": [
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "test_update_cmd": {
            "name": "test_update_cmd",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "oracle": [
                    "str",
                    "mtg_ssm.containers.indexes.Oracle",
                    "pathlib.Path"
                ]
            }
        },
        "test_merge_cmd_new": {
            "name": "test_merge_cmd_new",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "oracle": [
                    "str",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "test_merge_cmd_existing": {
            "name": "test_merge_cmd_existing",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "oracle": [
                    "str",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "test_merge_cmd_multiple": {
            "name": "test_merge_cmd_multiple",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "oracle": [
                    "str",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "test_diff_cmd": {
            "name": "test_diff_cmd",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "oracle": [
                    "str",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "patch_scryfetch.mock_scryfetch": {
            "name": "mock_scryfetch",
            "location": 34,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "mtg_ssm-trunk/tests/__init__.py": {},
    "mtg_ssm-trunk/tests/containers/test_bundles.py": {
        "test_remove_digital": {
            "name": "test_remove_digital",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": [
                    "mtg_ssm.containers.bundles.ScryfallDataSet",
                    "str",
                    "Dict",
                    "Union[str,Dict[str,Any]]",
                    "Dict[str,Any]",
                    "bytes",
                    "Optional[Dict]",
                    "None"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/containers/test_counts.py": {
        "oracle": {
            "name": "oracle",
            "location": 17,
            "return": [
                "Oracle",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "scryfall_data": [
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "mtg_ssm.containers.bundles.ScryfallDataSet"
                ]
            }
        },
        "test_merge_card_counts": {
            "name": "test_merge_card_counts",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "in_card_counts": [
                    "int",
                    "float",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "bool"
                ],
                "out_card_count": [
                    "int",
                    "float",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "bool"
                ]
            }
        },
        "test_diff_card_counts": {
            "name": "test_diff_card_counts",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "int",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "right": [
                    "int",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "output": [
                    "int",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_aggregate_card_counts": {
            "name": "test_aggregate_card_counts",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "List[dict[str,Any]]",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "int",
                    "Callable",
                    "List[Dict[str,Any]]",
                    "mtg_ssm.containers.indexes.Oracle"
                ],
                "card_rows": [
                    "List[dict[str,Any]]",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "int",
                    "Callable",
                    "List[Dict[str,Any]]",
                    "mtg_ssm.containers.indexes.Oracle"
                ],
                "output": [
                    "List[dict[str,Any]]",
                    "mtg_ssm.containers.counts.ScryfallCardCount",
                    "str",
                    "int",
                    "Callable",
                    "List[Dict[str,Any]]",
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/containers/test_indexes.py": {
        "test_load_data": {
            "name": "test_load_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_id_to_card": {
            "name": "test_id_to_card",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_name_to_cards": {
            "name": "test_name_to_cards",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_setcode_to_cards": {
            "name": "test_setcode_to_cards",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_id_to_setindex": {
            "name": "test_id_to_setindex",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_setcode_to_set": {
            "name": "test_setcode_to_set",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        },
        "test_snnma_to_id": {
            "name": "test_snnma_to_id",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": []
            }
        }
    },
    "mtg_ssm-trunk/tests/containers/test_legacy.py": {
        "oracle": {
            "name": "oracle",
            "location": 15,
            "return": [
                "Oracle",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "scryfall_data": [
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "mtg_ssm.containers.bundles.ScryfallDataSet"
                ]
            }
        },
        "test_extract_counts": {
            "name": "test_extract_counts",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "card_row": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "None"
                ],
                "expected": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_find_scryfall_id": {
            "name": "test_find_scryfall_id",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "card_row": [
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "expected": [
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "oracle": [
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_coerce_row": {
            "name": "test_coerce_row",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "card_row": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "expected": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "oracle": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/containers/__init__.py": {},
    "mtg_ssm-trunk/tests/mtg/test_util.py": {
        "test_is_strict_basic": {
            "name": "test_is_strict_basic",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "expected": []
            }
        },
        "test_collector_int_var": {
            "name": "test_collector_int_var",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "id_to_card": [],
                "name": [],
                "card_id": [],
                "number": [],
                "variant": []
            }
        }
    },
    "mtg_ssm-trunk/tests/mtg/__init__.py": {},
    "mtg_ssm-trunk/tests/scryfall/test_fetcher.py": {
        "scryurls": {
            "name": "scryurls",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "str",
                    "responses.RequestsMock",
                    "Dict",
                    "Mapping",
                    "Mapping[str,str]"
                ]
            }
        },
        "test_scryfetch": {
            "name": "test_scryfetch",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_break_object_cache": {
            "name": "test_break_object_cache",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "baddata": [
                    "bytes",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_data_fixtures": {
            "name": "test_data_fixtures",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "scryfall_data": [
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "mtg_ssm.containers.bundles.ScryfallDataSet",
                    "bytes",
                    "List[dict[str,Any]]",
                    "int",
                    "List[Dict[str,Any]]",
                    "Dict[str,Union[str,None]]",
                    "Dict[str,Optional[str]]"
                ],
                "sets_data": [
                    "List[mtg_ssm.scryfall.models.ScrySet]",
                    "Dict[str,str]",
                    "Dict",
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict[str,Any]"
                ],
                "cards_data": [
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Dict",
                    "mtg_ssm.containers.bundles.ScryfallDataSet",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Union[str,None]]"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/scryfall/__init__.py": {},
    "mtg_ssm-trunk/tests/serialization/test_csv.py": {
        "oracle": {
            "name": "oracle",
            "location": 23,
            "return": [
                "Oracle",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "scryfall_data": [
                    "Iterable",
                    "Dict",
                    "Dict[str,Outcome]",
                    "List"
                ]
            }
        },
        "test_header": {
            "name": "test_header",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_row_for_card": {
            "name": "test_row_for_card",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "id_to_card": [
                    "str",
                    "int"
                ]
            }
        },
        "test_rows_for_cards_verbose": {
            "name": "test_rows_for_cards_verbose",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": []
            }
        },
        "test_rows_for_cards_terse": {
            "name": "test_rows_for_cards_terse",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": []
            }
        },
        "test_write_verbose": {
            "name": "test_write_verbose",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_write_terse": {
            "name": "test_write_terse",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_read": {
            "name": "test_read",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "str",
                    "path.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/serialization/test_interface.py": {
        "test_all_dialects": {
            "name": "test_all_dialects",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extension_lookup": {
            "name": "test_extension_lookup",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "extension": [
                    "str",
                    "bool"
                ],
                "dialect_mapping": [
                    "str",
                    "bool"
                ],
                "dialect_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/serialization/test_xlsx.py": {
        "oracle": {
            "name": "oracle",
            "location": 21,
            "return": [
                "Oracle",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "scryfall_data": [
                    "Iterable",
                    "Dict",
                    "Dict[str,Outcome]",
                    "List"
                ]
            }
        },
        "test_create_all_sets": {
            "name": "test_create_all_sets",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "mtg_ssm.containers.indexes.Oracle"
                ]
            }
        },
        "test_create_haverefs": {
            "name": "test_create_haverefs",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": []
            }
        },
        "test_get_references": {
            "name": "test_get_references",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "exclude_sets": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_create_all_cards_sheet": {
            "name": "test_create_all_cards_sheet",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "Callable",
                    "int",
                    "mtg_ssm.containers.indexes.Oracle",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_create_set_sheet": {
            "name": "test_create_set_sheet",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": []
            }
        },
        "test_write": {
            "name": "test_write",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "mock.MagicMock"
                ],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_rows_from_workbook": {
            "name": "test_rows_from_workbook",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "sheets_and_rows": [
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "skip_sheets": [
                    "Optional[Set[str]]",
                    "Set[str]",
                    "int",
                    "List[Dict[str,str]]",
                    "None",
                    "List[dict[str,str]]"
                ],
                "expected": [
                    "Optional[Set[str]]",
                    "Set[str]",
                    "int",
                    "List[Dict[str,str]]",
                    "None",
                    "List[dict[str,str]]"
                ]
            }
        },
        "test_read_from_file": {
            "name": "test_read_from_file",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "oracle": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        }
    },
    "mtg_ssm-trunk/tests/serialization/__init__.py": {}
}
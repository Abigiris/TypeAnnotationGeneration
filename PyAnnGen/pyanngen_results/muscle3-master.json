{
    "muscle3-master/conftest.py": {},
    "muscle3-master/setup.py": {},
    "muscle3-master/docs/source/conf.py": {
        "patch_installation_version": {
            "name": "patch_installation_version",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Dict"
                ]
            }
        }
    },
    "muscle3-master/docs/source/examples/python/diffusion.py": {
        "laplacian": {
            "name": "laplacian",
            "location": 10,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Z": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "diffusion": {
            "name": "diffusion",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/docs/source/examples/python/reaction.py": {
        "reaction": {
            "name": "reaction",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/docs/source/examples/python/reaction_diffusion.py": {
        "reaction": {
            "name": "reaction",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "laplacian": {
            "name": "laplacian",
            "location": 41,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Z": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "diffusion": {
            "name": "diffusion",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/docs/source/examples/python/reaction_diffusion_qmc.py": {
        "reaction": {
            "name": "reaction",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "laplacian": {
            "name": "laplacian",
            "location": 41,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Z": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "diffusion": {
            "name": "diffusion",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_balancer": {
            "name": "load_balancer",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "qmc_driver": {
            "name": "qmc_driver",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/integration_test/conftest.py": {
        "yatiml_log_warning": {
            "name": "yatiml_log_warning",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_server": {
            "name": "make_server",
            "location": 30,
            "return": [
                "MMPServer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ymmsl_doc": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "start_mmp_server": {
            "name": "start_mmp_server",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "control_pipe": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Dict"
                ],
                "ymmsl_doc": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "make_server_process": {
            "name": "make_server_process",
            "location": 49,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "ymmsl_doc": [
                    "str",
                    "Tuple",
                    "List[str]",
                    "Callable",
                    "Dict[str,Callable[,None]]",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "mmp_server_process": {
            "name": "mmp_server_process",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "yatiml_log_warning": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "List[float]",
                    "None",
                    "bool"
                ]
            }
        },
        "mmp_server_process_simple": {
            "name": "mmp_server_process_simple",
            "location": 97,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "yatiml_log_warning": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "List[float]",
                    "None",
                    "bool"
                ]
            }
        },
        "mmp_server": {
            "name": "mmp_server",
            "location": 124,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "yatiml_log_warning": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "List[float]",
                    "None",
                    "bool"
                ]
            }
        },
        "sys_argv_manager": {
            "name": "sys_argv_manager",
            "location": 155,
            "return": [
                "Generator[None,None,None]",
                "Generator[None]"
            ],
            "arguments": {}
        },
        "log_file_in_tmpdir": {
            "name": "log_file_in_tmpdir",
            "location": 163,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "tmpdir": [
                    "List[str]"
                ]
            }
        }
    },
    "muscle3-master/integration_test/include_libmuscle.py": {},
    "muscle3-master/integration_test/test_all.py": {
        "macro": {
            "name": "macro",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "micro": {
            "name": "micro",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_cpp_macro_micro.py": {
        "run_macro": {
            "name": "run_macro",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "macro": {
            "name": "macro",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cpp_macro_micro": {
            "name": "test_cpp_macro_micro",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_server_process_simple": [
                    "str",
                    "Mapping",
                    "phial.Message",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_cpp_mmp_client.py": {
        "do_mmp_client_test": {
            "name": "do_mmp_client_test",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "List",
                    "bytes",
                    "str",
                    "bool",
                    "List[str]",
                    "Dict",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "test_mmp_client": {
            "name": "test_mmp_client",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "Tuple[int,int]",
                    "pathlib.Path"
                ],
                "caplog": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "do_mmp_client_test.mock_remove": {
            "name": "mock_remove",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "ymmsl.Reference",
                    "str",
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_cpp_tcp_client.py": {
        "tcp_server_process": {
            "name": "tcp_server_process",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "control_pipe": []
            }
        },
        "test_cpp_tcp_client": {
            "name": "test_cpp_tcp_client",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "tcp_server_process.get_message": {
            "name": "get_message",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "receiver": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_cpp_tcp_server.py": {
        "test_cpp_tcp_server": {
            "name": "test_cpp_tcp_server",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_duplication_mapper.py": {
        "duplication_mapper": {
            "name": "duplication_mapper",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "receiver": {
            "name": "receiver",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplication_mapper": {
            "name": "test_duplication_mapper",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_fortran_macro_micro.py": {
        "run_macro": {
            "name": "run_macro",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "macro": {
            "name": "macro",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fortran_macro_micro": {
            "name": "test_fortran_macro_micro",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_server_process_simple": [
                    "str",
                    "Mapping",
                    "phial.Message",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_logging.py": {
        "do_logging_test": {
            "name": "do_logging_test",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_logging": {
            "name": "test_logging",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ],
                "caplog": [
                    "str"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_mpi_macro_micro.py": {
        "run_macro": {
            "name": "run_macro",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str"
                ]
            }
        },
        "macro": {
            "name": "macro",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cpp_macro_micro": {
            "name": "test_cpp_macro_micro",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_server_process_simple": [
                    "str",
                    "Mapping",
                    "phial.Message",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_parameter_overlays.py": {
        "qmc": {
            "name": "qmc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "macro": {
            "name": "macro",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "explicit_relay": {
            "name": "explicit_relay",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "micro": {
            "name": "micro",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_settings_overlays": {
            "name": "test_settings_overlays",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_registration.py": {
        "test_registration": {
            "name": "test_registration",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ],
                "mmp_server": []
            }
        },
        "test_wiring": {
            "name": "test_wiring",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_in_tmpdir": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ],
                "mmp_server_process": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "muscle3-master/integration_test/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/integration_test/__init__.py": {},
    "muscle3-master/libmuscle/python/conftest.py": {},
    "muscle3-master/libmuscle/python/libmuscle/communicator.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "next_timestamp": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "data": [
                    "Dict[str,List[Any]]",
                    "Tuple",
                    "Dict[str,list[Any]]",
                    "bytes",
                    "Dict",
                    "Dict[str,str]"
                ],
                "settings": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "Communicator.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "int",
                    "float",
                    "bool"
                ],
                "index": [
                    "int",
                    "float",
                    "bool"
                ],
                "declared_ports": [
                    "int",
                    "str",
                    "bool"
                ],
                "profiler": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Communicator.get_locations": {
            "name": "get_locations",
            "location": 102,
            "return": [
                "List",
                "List[str]",
                "Optional[bool]",
                "str",
                "Dict",
                "Union[int,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.connect": {
            "name": "connect",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conduits": [
                    "str",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ],
                "peer_dims": [
                    "bool",
                    "List[str]",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ],
                "peer_locations": [
                    "bool",
                    "List[str]",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "Communicator.settings_in_connected": {
            "name": "settings_in_connected",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.list_ports": {
            "name": "list_ports",
            "location": 149,
            "return": [
                "Dict",
                "str",
                "object",
                "List",
                "List[str]",
                "Callable[...,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.port_exists": {
            "name": "port_exists",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str"
                ]
            }
        },
        "Communicator.get_port": {
            "name": "get_port",
            "location": 172,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "Communicator.send_message": {
            "name": "send_message",
            "location": 180,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "slot": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Communicator.receive_message": {
            "name": "receive_message",
            "location": 234,
            "return": [
                "List",
                "bool",
                "Dict[str,Any]",
                "None",
                "str",
                "Any",
                "Tuple[Type]",
                "Message"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "List[str]",
                    "int",
                    "Type[BaseException]",
                    "Type"
                ],
                "slot": [
                    "bool",
                    "None",
                    "Sequence[str]",
                    "Optional[Exception]",
                    "Optional[int]",
                    "Exception"
                ],
                "default": [
                    "None",
                    "Optional[Message]",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Tuple[Type]",
                    "Optional[Any]",
                    "Tuple[type]"
                ]
            }
        },
        "Communicator.close_port": {
            "name": "close_port",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "slot": [
                    "str",
                    "None",
                    "Type",
                    "Optional[int]",
                    "int",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Collection"
                ]
            }
        },
        "Communicator.shutdown": {
            "name": "shutdown",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.__instance_id": {
            "name": "__instance_id",
            "location": 360,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.__ports_from_declared": {
            "name": "__ports_from_declared",
            "location": 365,
            "return": [
                "Dict",
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Communicator.__ports_from_conduits": {
            "name": "__ports_from_conduits",
            "location": 390,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "conduits": [
                    "List[ymmsl.Conduit]"
                ]
            }
        },
        "Communicator.__settings_in_port": {
            "name": "__settings_in_port",
            "location": 421,
            "return": [
                "Port",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "conduits": [
                    "List[ymmsl.Conduit]",
                    "bool",
                    "Dict[str,dict]",
                    "List[str]",
                    "Dict[str,Dict]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "Communicator.__get_client": {
            "name": "__get_client",
            "location": 439,
            "return": [
                "typing.Final",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "bytes",
                "dict[str, list[int]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "Communicator.__get_endpoint": {
            "name": "__get_endpoint",
            "location": 460,
            "return": [
                "Endpoint",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "slot": [
                    "str",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "Communicator.__split_port_desc": {
            "name": "__split_port_desc",
            "location": 475,
            "return": [
                "bool",
                "Tuple[Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "port_desc": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/endpoint.py": {
        "Endpoint.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "int",
                    "float",
                    "bool"
                ],
                "index": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ],
                "slot": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Endpoint.ref": {
            "name": "ref",
            "location": 59,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.instance": {
            "name": "instance",
            "location": 88,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/grid.py": {
        "Grid.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "indexes": [
                    "Optional[Tuple[Any,Any]]",
                    "None",
                    "Dict[str,Callable]",
                    "str",
                    "Tuple[Union[Any,Any]]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/instance.py": {
        "Instance.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ports": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "Instance.reuse_instance": {
            "name": "reuse_instance",
            "location": 76,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "apply_overlay": [
                    "dict"
                ]
            }
        },
        "Instance.error_shutdown": {
            "name": "error_shutdown",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "Instance.get_setting": {
            "name": "get_setting",
            "location": 158,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "typ": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instance.list_ports": {
            "name": "list_ports",
            "location": 179,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List[int]",
                "list",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_connected": {
            "name": "is_connected",
            "location": 194,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "tildes.lib.event_stream.Message",
                    "str",
                    "int"
                ]
            }
        },
        "Instance.is_vector_port": {
            "name": "is_vector_port",
            "location": 206,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "tildes.lib.event_stream.Message",
                    "str",
                    "int"
                ]
            }
        },
        "Instance.is_resizable": {
            "name": "is_resizable",
            "location": 223,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "tildes.lib.event_stream.Message",
                    "str",
                    "int"
                ]
            }
        },
        "Instance.get_port_length": {
            "name": "get_port_length",
            "location": 237,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "Instance.set_port_length": {
            "name": "set_port_length",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "length": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Instance.send": {
            "name": "send",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str"
                ],
                "message": [
                    "Optional[str]",
                    "str",
                    "libmuscle.communicator.Message",
                    "List[str]"
                ],
                "slot": [
                    "str"
                ]
            }
        },
        "Instance.receive": {
            "name": "receive",
            "location": 282,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "slot": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "default": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Instance.receive_with_settings": {
            "name": "receive_with_settings",
            "location": 314,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "slot": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "default": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "Instance._register": {
            "name": "_register",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._connect": {
            "name": "_connect",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._deregister": {
            "name": "_deregister",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__extract_manager_location": {
            "name": "__extract_manager_location",
            "location": 387,
            "return": [
                "int",
                "dict",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {}
        },
        "Instance.__set_up_logging": {
            "name": "__set_up_logging",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__receive_message": {
            "name": "__receive_message",
            "location": 426,
            "return": [
                "list",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "slot": [
                    "str",
                    "bool",
                    "List[str]",
                    "Union[int, str]"
                ],
                "default": [
                    "Optional[str]",
                    "Optional[Any]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Iterable[str]]",
                    "Optional[bytes]"
                ],
                "with_settings": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[libmuscle.communicator.Message]"
                ]
            }
        },
        "Instance.__make_full_name": {
            "name": "__make_full_name",
            "location": 484,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__list_declared_ports": {
            "name": "__list_declared_ports",
            "location": 525,
            "return": [
                "str",
                "object",
                "list",
                "List[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._instance_name": {
            "name": "_instance_name",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__check_port": {
            "name": "__check_port",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Instance.__receive_settings": {
            "name": "__receive_settings",
            "location": 554,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__pre_receive_f_init": {
            "name": "__pre_receive_f_init",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apply_overlay": [
                    "bool",
                    "list",
                    "List[bytes]",
                    "Iterator[str]",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "Instance._set_log_level": {
            "name": "_set_log_level",
            "location": 610,
            "return": [
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__apply_overlay": {
            "name": "__apply_overlay",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any",
                    "str",
                    "libmuscle.communicator.Message",
                    "bool",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Instance.__check_compatibility": {
            "name": "__check_compatibility",
            "location": 656,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str"
                ],
                "overlay": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Optional[int]",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "Instance.__close_outgoing_ports": {
            "name": "__close_outgoing_ports",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__drain_incoming_port": {
            "name": "__drain_incoming_port",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "int",
                    "Callable",
                    "dict"
                ]
            }
        },
        "Instance.__drain_incoming_vector_port": {
            "name": "__drain_incoming_vector_port",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port_name": [
                    "str",
                    "float",
                    "Callable",
                    "dict"
                ]
            }
        },
        "Instance.__close_incoming_ports": {
            "name": "__close_incoming_ports",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__close_ports": {
            "name": "__close_ports",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__shutdown": {
            "name": "__shutdown",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "int",
                    "Callable"
                ]
            }
        },
        "Instance.__make_full_name.split_reference": {
            "name": "split_reference",
            "location": 491,
            "return": [
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "ref": [
                    "ymmsl.Reference",
                    "str",
                    "Callable"
                ]
            }
        },
        "Instance.__pre_receive_f_init.pre_receive": {
            "name": "pre_receive",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "port_name": [
                    "str"
                ],
                "slot": [
                    "str",
                    "Iterable",
                    "Type",
                    "int"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/logging.py": {
        "LogLevel.from_python_level": {
            "name": "from_python_level",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "LogLevel.as_python_level": {
            "name": "as_python_level",
            "location": 43,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]",
                "Dict[str, Dict[str, int]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogLevel.from_grpc": {
            "name": "from_grpc",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "level": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "LogLevel.to_grpc": {
            "name": "to_grpc",
            "location": 74,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogMessage.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "Iterable[str]"
                ],
                "timestamp": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "level": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "LogMessage.to_grpc": {
            "name": "to_grpc",
            "location": 125,
            "return": [
                "bytes",
                "LogMessage"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/logging_handler.py": {
        "MuscleManagerHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "int"
                ],
                "level": [
                    "int",
                    "str",
                    "bool"
                ],
                "mmp_client": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MuscleManagerHandler.emit": {
            "name": "emit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mmp_client.py": {
        "conduit_from_grpc": {
            "name": "conduit_from_grpc",
            "location": 22,
            "return": [
                "Conduit",
                "float",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "conduit": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "MMPClient.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "int",
                    "List",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "bool"
                ]
            }
        },
        "MMPClient.submit_log_message": {
            "name": "submit_log_message",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "MMPClient.submit_profile_events": {
            "name": "submit_profile_events",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "List[dict]"
                ]
            }
        },
        "MMPClient.get_settings": {
            "name": "get_settings",
            "location": 77,
            "return": [
                "Settings",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMPClient.register_instance": {
            "name": "register_instance",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "locations": [
                    "str",
                    "Dict[str,Any]"
                ],
                "ports": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "Dict"
                ]
            }
        },
        "MMPClient.request_peers": {
            "name": "request_peers",
            "location": 122,
            "return": [
                "Tuple[Union[list,dict]]",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "MMPClient.deregister_instance": {
            "name": "deregister_instance",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/operator.py": {
        "operator_from_grpc": {
            "name": "operator_from_grpc",
            "location": 7,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "operator": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "operator_to_grpc": {
            "name": "operator_to_grpc",
            "location": 29,
            "return": [
                "str",
                "bytes",
                "int",
                "IO",
                "ymmsl.Operator",
                "List[str]"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "bytes",
                    "IO",
                    "ymmsl.Operator",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/outbox.py": {
        "Outbox.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Outbox.is_empty": {
            "name": "is_empty",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Outbox.deposit": {
            "name": "deposit",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "multiprocessing.Queue"
                ]
            }
        },
        "Outbox.retrieve": {
            "name": "retrieve",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/peer_manager.py": {
        "PeerManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "index": [
                    "Callable",
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "bool"
                ],
                "conduits": [
                    "Tuple[Union[str,int]]",
                    "bool",
                    "Tuple[str,int]",
                    "int"
                ],
                "peer_dims": [
                    "Callable",
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "bool"
                ],
                "peer_locations": [
                    "Callable",
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "bool"
                ]
            }
        },
        "PeerManager.is_connected": {
            "name": "is_connected",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "PeerManager.get_peer_port": {
            "name": "get_peer_port",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bool"
                ]
            }
        },
        "PeerManager.get_peer_dims": {
            "name": "get_peer_dims",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "peer_kernel": [
                    "str",
                    "bool"
                ]
            }
        },
        "PeerManager.get_peer_locations": {
            "name": "get_peer_locations",
            "location": 75,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "peer_instance": [
                    "List",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "PeerManager.get_peer_endpoint": {
            "name": "get_peer_endpoint",
            "location": 86,
            "return": [
                "Endpoint",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bool"
                ],
                "slot": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/port.py": {
        "port_from_grpc": {
            "name": "port_from_grpc",
            "location": 10,
            "return": [
                "Port",
                "bool",
                "str"
            ],
            "arguments": {
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "port_to_grpc": {
            "name": "port_to_grpc",
            "location": 16,
            "return": [
                "Port",
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "port": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "optional_port_to_grpc": {
            "name": "optional_port_to_grpc",
            "location": 22,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "str",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "port": [
                    "Optional[ymmsl.Port]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Port.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "operator": [
                    "Callable",
                    "str",
                    "ymmsl.Operator"
                ],
                "is_vector": [
                    "int",
                    "List[int]",
                    "bytes",
                    "bool",
                    "str",
                    "List[str]",
                    "Union[List[str],List[int]]"
                ],
                "is_connected": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "None"
                ],
                "our_ndims": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "Union[List[str],List[int]]",
                    "str"
                ],
                "peer_dims": [
                    "int",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "float",
                    "str"
                ]
            }
        },
        "Port.is_connected": {
            "name": "is_connected",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Port.is_open": {
            "name": "is_open",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "Port.is_vector": {
            "name": "is_vector",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Port.is_resizable": {
            "name": "is_resizable",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Port.get_length": {
            "name": "get_length",
            "location": 126,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Port.set_length": {
            "name": "set_length",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "Port.set_closed": {
            "name": "set_closed",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "None",
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/post_office.py": {
        "PostOffice.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostOffice.get_message": {
            "name": "get_message",
            "location": 22,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str",
                    "bool"
                ]
            }
        },
        "PostOffice.deposit": {
            "name": "deposit",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PostOffice.wait_for_receivers": {
            "name": "wait_for_receivers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostOffice._ensure_outbox_exists": {
            "name": "_ensure_outbox_exists",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/profiler.py": {
        "Profiler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "manager": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Profiler.start": {
            "name": "start",
            "location": 25,
            "return": [
                "ProfileEvent",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[ymmsl.Port]"
                ],
                "port": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[ymmsl.Port]"
                ],
                "port_length": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[ymmsl.Port]"
                ],
                "slot": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[ymmsl.Port]"
                ],
                "message_size": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[ymmsl.Port]"
                ]
            }
        },
        "Profiler.shutdown": {
            "name": "shutdown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.record_event": {
            "name": "record_event",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "int",
                    "List[dict]",
                    "List",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "Profiler.__flush": {
            "name": "__flush",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/profiling.py": {
        "ProfileEventType.from_grpc": {
            "name": "from_grpc",
            "location": 25,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "event_type": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ProfileEventType.to_grpc": {
            "name": "to_grpc",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileEvent.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "int",
                    "str"
                ],
                "start_time": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "float",
                    "libmuscle.timestamp.Timestamp",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "stop_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "libmuscle.timestamp.Timestamp"
                ],
                "event_type": [
                    "bool",
                    "float",
                    "str",
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "port": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "int",
                    "Callable[,bool]",
                    "Container",
                    "Iterable[str]",
                    "Optional[Callable[,bool]]",
                    "Container[str]",
                    "Optional[int]"
                ],
                "port_length": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "int",
                    "Callable[,bool]",
                    "Container",
                    "Iterable[str]",
                    "Optional[Callable[,bool]]",
                    "Container[str]",
                    "Optional[int]"
                ],
                "slot": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "int",
                    "Callable[,bool]",
                    "Container",
                    "Iterable[str]",
                    "Optional[Callable[,bool]]",
                    "Container[str]",
                    "Optional[int]"
                ],
                "message_size": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ProfileEvent.stop": {
            "name": "stop",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileEvent.to_grpc": {
            "name": "to_grpc",
            "location": 119,
            "return": [
                "ProfileEvent",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/runner.py": {
        "manager_process": {
            "name": "manager_process",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "control_pipe": [
                    "str"
                ],
                "configuration": [
                    "int",
                    "str",
                    "Exception"
                ]
            }
        },
        "start_server_process": {
            "name": "start_server_process",
            "location": 64,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "configuration": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "implementation_process": {
            "name": "implementation_process",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "int"
                ],
                "implementation": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "ymmsl.Reference",
                    "bytes"
                ]
            }
        },
        "_parse_prefix": {
            "name": "_parse_prefix",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_split_reference": {
            "name": "_split_reference",
            "location": 172,
            "return": [
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "ref": [
                    "ymmsl.Reference",
                    "str",
                    "Callable"
                ]
            }
        },
        "run_instances": {
            "name": "run_instances",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "instances": [
                    "Dict[str, Callable]",
                    "Dict[str, Any]",
                    "dict",
                    "Callable[[T], bool]",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        },
        "run_simulation": {
            "name": "run_simulation",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration": [
                    "ymmsl.Configuration",
                    "Dict[int, Any]",
                    "int"
                ],
                "implementations": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "BinaryIO",
                    "bool",
                    "Iterable[bytes]"
                ]
            }
        },
        "MMPServerController.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": [
                    "int",
                    "bool",
                    "float"
                ],
                "control_pipe": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MMPServerController.stop": {
            "name": "stop",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_parse_prefix.parse_identifier": {
            "name": "parse_identifier",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int",
                    "dict"
                ],
                "i": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "_parse_prefix.parse_number": {
            "name": "parse_number",
            "location": 135,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int"
                ],
                "i": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/settings_manager.py": {
        "has_setting_type": {
            "name": "has_setting_type",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Callable",
                    "Dict[str, Any]",
                    "str",
                    "Union[List[str], str]",
                    "list",
                    "List[str]"
                ],
                "typ": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "SettingsManager.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsManager.get_setting": {
            "name": "get_setting",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Tuple[str, str]"
                ],
                "setting_name": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "typ": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/timestamp.py": {
        "Timestamp.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Timestamp.to_rfc3339": {
            "name": "to_rfc3339",
            "location": 15,
            "return": [
                "datetime.datetime",
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.from_grpc": {
            "name": "from_grpc",
            "location": 25,
            "return": [
                "Timestamp",
                "bool",
                "Dict"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "Callable",
                    "Callable[[None,None],bool]"
                ]
            }
        },
        "Timestamp.to_grpc": {
            "name": "to_grpc",
            "location": 36,
            "return": [
                "Timestamp",
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/util.py": {
        "conduit_to_grpc": {
            "name": "conduit_to_grpc",
            "location": 10,
            "return": [
                "Conduit",
                "str",
                "bytes"
            ],
            "arguments": {
                "conduit": [
                    "str",
                    "Pattern",
                    "Dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "instance_to_kernel": {
            "name": "instance_to_kernel",
            "location": 23,
            "return": [
                "dict",
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Collection[int]",
                    "List[Tuple[int, int]]",
                    "float",
                    "ymmsl.Reference"
                ]
            }
        },
        "instance_indices": {
            "name": "instance_indices",
            "location": 38,
            "return": [
                "List",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "Union[List[str],str]",
                "float"
            ],
            "arguments": {
                "instance": [
                    "ymmsl.Reference",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "List[int]",
                    "Sequence[str]",
                    "int",
                    "List[List[int]]",
                    "List[float]"
                ]
            }
        },
        "generate_indices": {
            "name": "generate_indices",
            "location": 56,
            "return": [
                "Generator[List[int],None,None]",
                "Generator[list[int]]"
            ],
            "arguments": {
                "dims": [
                    "str",
                    "bytes",
                    "TextIO",
                    "int"
                ]
            }
        },
        "increment_index": {
            "name": "increment_index",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "index": [
                    "int",
                    "List[List[Any]]",
                    "list",
                    "str"
                ],
                "dims": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "extract_log_file_location": {
            "name": "extract_log_file_location",
            "location": 93,
            "return": [
                "int",
                "str",
                "Path",
                "Optional[str]",
                "List[str]",
                "Optional[type]"
            ],
            "arguments": {
                "run_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "filename": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/__init__.py": {},
    "muscle3-master/libmuscle/python/libmuscle/manager/instance_registry.py": {
        "InstanceRegistry.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_instances": [
                    "List[str]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "InstanceRegistry.add": {
            "name": "add",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]"
                ],
                "locations": [
                    "str",
                    "List[str]"
                ],
                "ports": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "InstanceRegistry.get_locations": {
            "name": "get_locations",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[float],bool]",
                    "Callable[float,bool]"
                ]
            }
        },
        "InstanceRegistry.get_ports": {
            "name": "get_ports",
            "location": 67,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "InstanceRegistry.remove": {
            "name": "remove",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "InstanceRegistry.wait": {
            "name": "wait",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceRegistry.wait.all_deregistered": {
            "name": "all_deregistered",
            "location": 101,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/logger.py": {
        "Formatter.usesTime": {
            "name": "usesTime",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Formatter.formatMessage": {
            "name": "formatMessage",
            "location": 15,
            "return": [
                "Text",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Dict[str,Any]",
                    "List[dict]",
                    "Dict"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [
                    "None",
                    "Optional[pathlib.Path]",
                    "Dict[pathlib.Path,P]",
                    "str",
                    "pathlib.Path",
                    "Dict[pathlib.Path,PackageSummary]",
                    "Union[pathlib.Path,str]",
                    "Union[str,pathlib.Path,None]"
                ]
            }
        },
        "Logger.close": {
            "name": "close",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log_message": {
            "name": "log_message",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "bool"
                ],
                "timestamp": [
                    "str"
                ],
                "level": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/manager.py": {
        "elements_for_model": {
            "name": "elements_for_model",
            "location": 11,
            "return": [
                "List[str]",
                "str",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "model": [
                    "float",
                    "Dict",
                    "int",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 57,
            "return": [
                "MMPServer",
                "int",
                "Tuple[str,str]",
                "str",
                "List"
            ],
            "arguments": {
                "configuration": [
                    "str",
                    "int",
                    "allennlp.models.model.Model"
                ]
            }
        },
        "elements_for_model.increment": {
            "name": "increment",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "Sequence[int]",
                    "List[int]"
                ],
                "dims": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "elements_for_model.index_to_str": {
            "name": "index_to_str",
            "location": 29,
            "return": [
                "Text",
                "Match",
                "bool",
                "Tuple[int,Dict[str,Any]]",
                "Parameter",
                "Dict[str,Set[str]]",
                "Dict[str,Tuple[int,int]]",
                "int"
            ],
            "arguments": {
                "index": [
                    "List['cirq.Qid']"
                ]
            }
        },
        "elements_for_model.generate_indices": {
            "name": "generate_indices",
            "location": 35,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "multiplicity": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[float]",
                    "Dict[str, str]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/mmp_server.py": {
        "MMPServicer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "bool",
                    "float",
                    "Union[int,float]",
                    "int",
                    "rotkehlchen.Timestamp"
                ],
                "settings": [
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ],
                "instance_registry": [
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ],
                "topology_store": [
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "MMPServicer.SubmitLogMessage": {
            "name": "SubmitLogMessage",
            "location": 45,
            "return": [
                "int",
                "bool",
                "List[Dict]",
                "Optional[Callable[[dict], None]]",
                "float",
                "List[List[int]]",
                "bytes",
                "Union[Dict, List]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "context": [
                    "grpc.ServicerContext"
                ]
            }
        },
        "MMPServicer.SubmitProfileEvents": {
            "name": "SubmitProfileEvents",
            "location": 58,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ],
                "context": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ]
            }
        },
        "MMPServicer.RequestSettings": {
            "name": "RequestSettings",
            "location": 67,
            "return": [
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ],
                "context": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ]
            }
        },
        "MMPServicer.RegisterInstance": {
            "name": "RegisterInstance",
            "location": 122,
            "return": [
                "bool",
                "dict",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Iterator"
                ],
                "context": [
                    "bool",
                    "grpc.ServicerContext"
                ]
            }
        },
        "MMPServicer.RequestPeers": {
            "name": "RequestPeers",
            "location": 144,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict"
                ],
                "context": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ]
            }
        },
        "MMPServicer.DeregisterInstance": {
            "name": "DeregisterInstance",
            "location": 189,
            "return": [
                "bool",
                "dict",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "context": [
                    "bool",
                    "grpc.ServicerContext"
                ]
            }
        },
        "MMPServicer.__generate_peer_instances": {
            "name": "__generate_peer_instances",
            "location": 204,
            "return": [
                "Generator[ymmsl.Reference,None,None]",
                "Generator[Union[int,bytes,str,float,list,tuple[Union[str,list[Any]]],tuple[Union[str,dict[str,Any]]]]]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "List"
                ]
            }
        },
        "MMPServicer.__log": {
            "name": "__log",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "Dict",
                    "Union[str,int]"
                ],
                "msg": [
                    "int",
                    "str",
                    "Dict",
                    "Union[str,int]"
                ]
            }
        },
        "MMPServer.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "bool",
                    "Final",
                    "str",
                    "float",
                    "int"
                ],
                "settings": [
                    "bool",
                    "Final",
                    "str",
                    "float",
                    "int"
                ],
                "instance_registry": [
                    "int",
                    "str"
                ],
                "topology_store": [
                    "bool",
                    "Final",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "MMPServer.get_location": {
            "name": "get_location",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMPServer.wait": {
            "name": "wait",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMPServer.stop": {
            "name": "stop",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/topology_store.py": {
        "TopologyStore.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "TopologyStore.has_kernel": {
            "name": "has_kernel",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TopologyStore.get_conduits": {
            "name": "get_conduits",
            "location": 41,
            "return": [
                "List",
                "str",
                "Iterable[Tuple[str,str]]"
            ],
            "arguments": {
                "self": [],
                "kernel_name": [
                    "str"
                ]
            }
        },
        "TopologyStore.get_peer_dimensions": {
            "name": "get_peer_dimensions",
            "location": 58,
            "return": [
                "Dict",
                "str",
                "Iterable[Tuple[str,str]]"
            ],
            "arguments": {
                "self": [],
                "kernel_name": [
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/__init__.py": {},
    "muscle3-master/libmuscle/python/libmuscle/manager/test/conftest.py": {
        "logger": {
            "name": "logger",
            "location": 14,
            "return": [
                "typing.Generator[Logger]"
            ],
            "arguments": {
                "tmpdir": [
                    "Exception",
                    "Callable",
                    "Settings",
                    "Dict",
                    "core.base.setup.Settings",
                    "settings.Settings",
                    "sublime.Settings"
                ]
            }
        },
        "settings": {
            "name": "settings",
            "location": 21,
            "return": [
                "Settings",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "instance_registry": {
            "name": "instance_registry",
            "location": 26,
            "return": [
                "str",
                "InstanceRegistry"
            ],
            "arguments": {}
        },
        "topology_store": {
            "name": "topology_store",
            "location": 34,
            "return": [
                "TopologyStore",
                "Dict[str,Any]",
                "Mapping[str,int]",
                "Optional[logging.Logger]",
                "Optional[str]",
                "Dict",
                "Optional[pathlib.Path]"
            ],
            "arguments": {}
        },
        "mmp_servicer": {
            "name": "mmp_servicer",
            "location": 51,
            "return": [
                "MMPServicer",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "settings": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "instance_registry": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "topology_store": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ]
            }
        },
        "loaded_instance_registry": {
            "name": "loaded_instance_registry",
            "location": 57,
            "return": [
                "Set[Union[str,Reference,list[Text]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "instance_registry": [
                    "Set[str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "registered_mmp_servicer": {
            "name": "registered_mmp_servicer",
            "location": 68,
            "return": [
                "MMPServicer",
                "Callable",
                "str",
                "Tuple[Any,Any,Any]",
                "List"
            ],
            "arguments": {
                "logger": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "settings": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "loaded_instance_registry": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "topology_store": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ]
            }
        },
        "topology_store2": {
            "name": "topology_store2",
            "location": 75,
            "return": [
                "TopologyStore",
                "Dict[str,Any]",
                "Mapping[str,int]",
                "Optional[logging.Logger]",
                "Optional[str]",
                "Dict",
                "Optional[pathlib.Path]"
            ],
            "arguments": {}
        },
        "loaded_instance_registry2": {
            "name": "loaded_instance_registry2",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "registered_mmp_servicer2": {
            "name": "registered_mmp_servicer2",
            "location": 120,
            "return": [
                "MMPServicer",
                "Callable",
                "str",
                "Tuple[Any,Any,Any]",
                "List"
            ],
            "arguments": {
                "logger": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "settings": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "loaded_instance_registry2": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ],
                "topology_store2": [
                    "int",
                    "str",
                    "bool",
                    "ymmsl.Settings",
                    "libmuscle.manager.topology_store.TopologyStore"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/test/test_instance_registry.py": {
        "port": {
            "name": "port",
            "location": 9,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "registry": {
            "name": "registry",
            "location": 14,
            "return": [
                "InstanceRegistry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_port": {
            "name": "test_port",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_registry_add": {
            "name": "test_registry_add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "Set[int]",
                    "Dict[str,Sequence[str]]",
                    "str"
                ],
                "port": [
                    "Dict[str,Sequence[str]]",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "test_registry_get": {
            "name": "test_registry_get",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [],
                "port": []
            }
        },
        "test_registry_remove": {
            "name": "test_registry_remove",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/test/test_logger.py": {
        "test_log_level": {
            "name": "test_log_level",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_logger": {
            "name": "test_create_logger",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pypi2nix.logger.Logger"
                ]
            }
        },
        "test_log_message": {
            "name": "test_log_message",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "logging.LogRecord"
                ],
                "caplog": [
                    "int",
                    "pathlib.Path"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/test/test_mmp_servicer.py": {
        "test_create_servicer": {
            "name": "test_create_servicer",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str"
                ],
                "settings": [
                    "str"
                ],
                "instance_registry": [
                    "str"
                ],
                "topology_store": [
                    "str"
                ]
            }
        },
        "test_log_message": {
            "name": "test_log_message",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_servicer": [],
                "caplog": [
                    "int"
                ]
            }
        },
        "test_request_settings": {
            "name": "test_request_settings",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "bool",
                    "Optional[bool]"
                ],
                "mmp_servicer": [
                    "str"
                ]
            }
        },
        "test_register_instance": {
            "name": "test_register_instance",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_servicer": [],
                "instance_registry": []
            }
        },
        "test_double_register_instance": {
            "name": "test_double_register_instance",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_servicer": [],
                "instance_registry": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_request_peers_pending": {
            "name": "test_request_peers_pending",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "mmp_servicer": [
                    "str"
                ]
            }
        },
        "test_request_peers_fanout": {
            "name": "test_request_peers_fanout",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_mmp_servicer": []
            }
        },
        "test_request_peers_fanin": {
            "name": "test_request_peers_fanin",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_mmp_servicer": []
            }
        },
        "test_request_peers_bidir": {
            "name": "test_request_peers_bidir",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_mmp_servicer2": []
            }
        },
        "test_request_peers_own_conduits": {
            "name": "test_request_peers_own_conduits",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_mmp_servicer2": []
            }
        },
        "test_request_peers_unknown": {
            "name": "test_request_peers_unknown",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "registered_mmp_servicer2": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/test/test_topology_store.py": {
        "test_create_topology_store": {
            "name": "test_create_topology_store",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "topology_store": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_get_conduits": {
            "name": "test_get_conduits",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "topology_store2": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "test_get_peer_dimensions": {
            "name": "test_get_peer_dimensions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "topology_store": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        },
        "test_data_error": {
            "name": "test_data_error",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/manager/test/__init__.py": {},
    "muscle3-master/libmuscle/python/libmuscle/mcp/client.py": {
        "Client.can_connect_to": {
            "name": "can_connect_to",
            "location": 12,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "bool",
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "List[str]"
                ]
            }
        },
        "Client.shutdown": {
            "name": "shutdown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "int",
                    "str",
                    "List",
                    "Optional[float]",
                    "bytes",
                    "float",
                    "None",
                    "ymmsl.Reference"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "ymmsl.Reference",
                    "Dict",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "location": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Client.receive": {
            "name": "receive",
            "location": 48,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Client.close": {
            "name": "close",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/direct_client.py": {
        "DirectClient.can_connect_to": {
            "name": "can_connect_to",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "location": [
                    "str",
                    "Exception",
                    "Dict[str,str]"
                ]
            }
        },
        "DirectClient.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "bytes",
                    "int",
                    "ymmsl.Reference"
                ],
                "location": [
                    "str",
                    "bytes",
                    "ymmsl.Reference",
                    "int"
                ]
            }
        },
        "DirectClient.receive": {
            "name": "receive",
            "location": 44,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "ymmsl.Reference"
                ]
            }
        },
        "DirectClient.close": {
            "name": "close",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/direct_server.py": {
        "DirectServer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "int",
                    "libmuscle.post_office.PostOffice",
                    "float",
                    "None",
                    "ymmsl.Reference",
                    "bool",
                    "Optional[Union[int,float]]"
                ],
                "post_office": [
                    "int",
                    "libmuscle.post_office.PostOffice",
                    "float",
                    "None",
                    "ymmsl.Reference",
                    "bool",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "DirectServer.get_location": {
            "name": "get_location",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectServer.request": {
            "name": "request",
            "location": 42,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str",
                    "bool"
                ]
            }
        },
        "DirectServer.close": {
            "name": "close",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/message.py": {
        "_encode_grid": {
            "name": "_encode_grid",
            "location": 48,
            "return": [
                "Type"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "float",
                    "Set[str]",
                    "int",
                    "List[str]",
                    "Union[str,List[str]]",
                    "Iterable"
                ]
            }
        },
        "_decode_grid": {
            "name": "_decode_grid",
            "location": 88,
            "return": [
                "Grid",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "data": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        },
        "_data_encoder": {
            "name": "_data_encoder",
            "location": 113,
            "return": [
                "bool",
                "Grid",
                "np_@_ndarray",
                "Settings",
                "ClosePort"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "int"
                ]
            }
        },
        "_ext_decoder": {
            "name": "_ext_decoder",
            "location": 132,
            "return": [
                "ClosePort",
                "str",
                "Settings",
                "Dict",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "float",
                    "bool"
                ],
                "receiver": [
                    "float",
                    "bool"
                ],
                "port_length": [
                    "float",
                    "bool"
                ],
                "timestamp": [
                    "float",
                    "bool"
                ],
                "next_timestamp": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[int]",
                    "numpy.ndarray",
                    "bool",
                    "Optional[int]"
                ],
                "settings_overlay": [
                    "float",
                    "bool"
                ],
                "data": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Message.from_bytes": {
            "name": "from_bytes",
            "location": 185,
            "return": [
                "Message",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "message": [
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "Message.encoded": {
            "name": "encoded",
            "location": 204,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/pipe_client.py": {
        "PipeClient.can_connect_to": {
            "name": "can_connect_to",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "location": [
                    "Dict",
                    "Sequence",
                    "Type",
                    "bool",
                    "str"
                ]
            }
        },
        "PipeClient.shutdown": {
            "name": "shutdown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "int",
                    "str",
                    "ymmsl.Reference"
                ]
            }
        },
        "PipeClient.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "int"
                ],
                "location": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "PipeClient.receive": {
            "name": "receive",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str"
                ]
            }
        },
        "PipeClient.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/pipe_multiplexer.py": {
        "add_instance": {
            "name": "add_instance",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "ymmsl.Reference",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "can_communicate_for": {
            "name": "can_communicate_for",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance_id": [
                    "int",
                    "str",
                    "ymmsl.Reference",
                    "uuid.UUID",
                    "bool"
                ]
            }
        },
        "close_instance_ends": {
            "name": "close_instance_ends",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "ymmsl.Reference",
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "close_mux_ends": {
            "name": "close_mux_ends",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "ymmsl.Reference",
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "close_all_pipes": {
            "name": "close_all_pipes",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_instance_server_conn": {
            "name": "get_instance_server_conn",
            "location": 109,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "instance_id": [
                    "int",
                    "str",
                    "ymmsl.Reference"
                ]
            }
        },
        "get_instance_client_conn": {
            "name": "get_instance_client_conn",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "ymmsl.Reference",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "get_address_for": {
            "name": "get_address_for",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "int",
                    "ymmsl.Reference"
                ]
            }
        },
        "can_connect_to": {
            "name": "can_connect_to",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "peer_address": [
                    "str",
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_InstancePipe.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "close_all_pipes.close_all": {
            "name": "close_all",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "pipes": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/pipe_server.py": {
        "PipeServer.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "float",
                    "int"
                ],
                "post_office": [
                    "int",
                    "libmuscle.post_office.PostOffice",
                    "float",
                    "None",
                    "ymmsl.Reference",
                    "bool",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "PipeServer.get_location": {
            "name": "get_location",
            "location": 43,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "Optional[List[str]]",
                "Sequence[int]",
                "Callable[[], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeServer.close": {
            "name": "close",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeServer.__conn_request_handler": {
            "name": "__conn_request_handler",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeServer.__mcp_pipe_handler": {
            "name": "__mcp_pipe_handler",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ],
                "connection": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "str",
                    "int",
                    "Dict"
                ],
                "post_office": [
                    "bool",
                    "float",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Server.get_location": {
            "name": "get_location",
            "location": 28,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.close": {
            "name": "close",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/tcp_client.py": {
        "TcpClient.can_connect_to": {
            "name": "can_connect_to",
            "location": 14,
            "return": [
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "location": [
                    "str",
                    "Exception",
                    "Type",
                    "Callable",
                    "Tuple",
                    "Optional[list]"
                ]
            }
        },
        "TcpClient.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "bytes",
                    "int",
                    "ymmsl.Reference"
                ],
                "location": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TcpClient.receive": {
            "name": "receive",
            "location": 53,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "TcpClient.close": {
            "name": "close",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpClient._connect": {
            "name": "_connect",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "slice",
                    "List[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/tcp_server.py": {
        "TcpServerImpl.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host_port_tuple": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "streamhandler": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "tcp_server": [
                    "str",
                    "int",
                    "rotkehlchen.api.server.APIServer",
                    "bool"
                ]
            }
        },
        "TcpHandler.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpHandler.receive_request": {
            "name": "receive_request",
            "location": 41,
            "return": [
                "str",
                "Reference",
                "Dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpServer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [
                    "int",
                    "libmuscle.post_office.PostOffice",
                    "float",
                    "None",
                    "ymmsl.Reference",
                    "bool",
                    "Optional[Union[int,float]]"
                ],
                "post_office": [
                    "int",
                    "libmuscle.post_office.PostOffice",
                    "float",
                    "None",
                    "ymmsl.Reference",
                    "bool",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "TcpServer.get_location": {
            "name": "get_location",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpServer.close": {
            "name": "close",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpServer.post_office": {
            "name": "post_office",
            "location": 96,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpServer._get_if_addresses": {
            "name": "_get_if_addresses",
            "location": 101,
            "return": [
                "List",
                "str",
                "Set",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/tcp_util.py": {
        "recv_all": {
            "name": "recv_all",
            "location": 10,
            "return": [
                "bytearray",
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "socket": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "length": [
                    "int",
                    "bool"
                ]
            }
        },
        "send_int64": {
            "name": "send_int64",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "socket": [
                    "Mapping[str, object]",
                    "int",
                    "dict"
                ],
                "data": [
                    "bool",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "recv_int64": {
            "name": "recv_int64",
            "location": 53,
            "return": [
                "int",
                "str",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "socket": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/type_registry.py": {},
    "muscle3-master/libmuscle/python/libmuscle/mcp/__init__.py": {},
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/conftest.py": {
        "receiver": {
            "name": "receiver",
            "location": 12,
            "return": [
                "Reference",
                "List[str]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "post_office": {
            "name": "post_office",
            "location": 17,
            "return": [
                "Dict[str,Sequence[str]]",
                "MockPO"
            ],
            "arguments": {
                "receiver": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "direct_server": {
            "name": "direct_server",
            "location": 28,
            "return": [
                "DirectServer",
                "float",
                "int",
                "List"
            ],
            "arguments": {
                "post_office": []
            }
        },
        "tcp_server": {
            "name": "tcp_server",
            "location": 33,
            "return": [
                "typing.Generator[TcpServer]"
            ],
            "arguments": {
                "post_office": []
            }
        },
        "post_office.MockPO.get_message": {
            "name": "get_message",
            "location": 21,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_direct_client.py": {
        "test_can_connect_to": {
            "name": "test_can_connect_to",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_servers": []
            }
        },
        "test_create": {
            "name": "test_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_servers": [
                    "Tuple[str,mock.Mock]",
                    "Tuple[Union[str,mock.Mock]]"
                ]
            }
        },
        "test_receive": {
            "name": "test_receive",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_servers": [
                    "mock.Mock"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_direct_communication.py": {
        "test_send_receive": {
            "name": "test_send_receive",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "direct_server": [],
                "post_office": [
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_direct_server.py": {
        "test_create": {
            "name": "test_create",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_server": []
            }
        },
        "test_location": {
            "name": "test_location",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "direct_server": []
            }
        },
        "test_request": {
            "name": "test_request",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [
                    "bytes",
                    "Optional[bytes]",
                    "bool",
                    "None"
                ],
                "post_office": [
                    "bool",
                    "float"
                ],
                "direct_server": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_message.py": {
        "test_create": {
            "name": "test_create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_encode": {
            "name": "test_grid_encode",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_decode": {
            "name": "test_grid_decode",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grid_roundtrip": {
            "name": "test_grid_roundtrip",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_contiguous_grid_roundtrip": {
            "name": "test_non_contiguous_grid_roundtrip",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_pipe_communication.py": {
        "run_server": {
            "name": "run_server",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "receiver": [
                    "str",
                    "List",
                    "float",
                    "multiprocessing.Queue"
                ],
                "post_office": []
            }
        },
        "run_client": {
            "name": "run_client",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_id": [
                    "str",
                    "int"
                ],
                "server_location": [
                    "str",
                    "int"
                ],
                "receiver": [
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "test_send_receive": {
            "name": "test_send_receive",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [
                    "bytes",
                    "None",
                    "Optional[bytes]",
                    "middleman_protocol.message.AbstractFrame"
                ],
                "post_office": [
                    "str",
                    "bool",
                    "telethon.tl.custom.Message",
                    "faustypes.tuples.Message"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_pipe_server.py": {
        "test_server_shutdown": {
            "name": "test_server_shutdown",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "post_office": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_tcp_communication.py": {
        "test_send_receive": {
            "name": "test_send_receive",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [],
                "post_office": [
                    "bool"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/test_tcp_server.py": {
        "test_create": {
            "name": "test_create",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tcp_server": [
                    "int"
                ]
            }
        },
        "test_location": {
            "name": "test_location",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tcp_server": []
            }
        },
        "test_request": {
            "name": "test_request",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "receiver": [
                    "bytes"
                ],
                "post_office": [
                    "bool",
                    "float"
                ],
                "tcp_server": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/mcp/test/__init__.py": {},
    "muscle3-master/libmuscle/python/libmuscle/test/conftest.py": {
        "mock_grpc_channel": {
            "name": "mock_grpc_channel",
            "location": 11,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {}
        },
        "mocked_mmp_client": {
            "name": "mocked_mmp_client",
            "location": 17,
            "return": [
                "typing.Generator[tuple[MMPClient]]"
            ],
            "arguments": {
                "mock_grpc_channel": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "message": {
            "name": "message",
            "location": 29,
            "return": [
                "Message",
                "str",
                "Optional[str]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {}
        },
        "message2": {
            "name": "message2",
            "location": 34,
            "return": [
                "Message",
                "Optional[int]",
                "List",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_communicator.py": {
        "test_endpoint": {
            "name": "test_endpoint",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_endpoint_instance": {
            "name": "test_endpoint_instance",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "communicator": {
            "name": "communicator",
            "location": 41,
            "return": [
                "libmuscle.communicator.Communicator",
                "Generator[Communicator]"
            ],
            "arguments": {}
        },
        "communicator2": {
            "name": "communicator2",
            "location": 81,
            "return": [
                "libmuscle.communicator.Communicator",
                "Generator[Communicator]"
            ],
            "arguments": {}
        },
        "communicator3": {
            "name": "communicator3",
            "location": 118,
            "return": [
                "libmuscle.communicator.Communicator",
                "Generator[Communicator]"
            ],
            "arguments": {}
        },
        "test_create_communicator": {
            "name": "test_create_communicator",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "float",
                    "int",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "test_get_locations": {
            "name": "test_get_locations",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": []
            }
        },
        "test_connect": {
            "name": "test_connect",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_connect_vector_ports": {
            "name": "test_connect_vector_ports",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "str",
                    "int"
                ]
            }
        },
        "test_connect_multidimensional_ports": {
            "name": "test_connect_multidimensional_ports",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "int"
                ]
            }
        },
        "test_connect_inferred_ports": {
            "name": "test_connect_inferred_ports",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_send_message": {
            "name": "test_send_message",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [],
                "message": [
                    "str",
                    "float"
                ]
            }
        },
        "test_send_on_disconnected_port": {
            "name": "test_send_on_disconnected_port",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [],
                "message": [
                    "str",
                    "float"
                ]
            }
        },
        "test_send_on_invalid_port": {
            "name": "test_send_on_invalid_port",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "str",
                    "float"
                ],
                "message": [
                    "str",
                    "float"
                ]
            }
        },
        "test_send_msgpack": {
            "name": "test_send_msgpack",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [],
                "message2": [
                    "str",
                    "float"
                ]
            }
        },
        "test_send_message_with_slot": {
            "name": "test_send_message_with_slot",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator2": [],
                "message": [
                    "str",
                    "float"
                ]
            }
        },
        "test_send_message_resizable": {
            "name": "test_send_message_resizable",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator3": [],
                "message": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_send_message_with_settings": {
            "name": "test_send_message_with_settings",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "test_send_settings": {
            "name": "test_send_settings",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [],
                "message": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_close_port": {
            "name": "test_close_port",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "int",
                    "str"
                ]
            }
        },
        "test_receive_message": {
            "name": "test_receive_message",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_message_default": {
            "name": "test_receive_message_default",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_receive_message_no_default": {
            "name": "test_receive_message_no_default",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_receive_on_invalid_port": {
            "name": "test_receive_on_invalid_port",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "str",
                    "float"
                ]
            }
        },
        "test_receive_msgpack": {
            "name": "test_receive_msgpack",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_with_slot": {
            "name": "test_receive_with_slot",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator2": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_message_resizable": {
            "name": "test_receive_message_resizable",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator3": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_with_settings": {
            "name": "test_receive_with_settings",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_msgpack_with_slot_and_settings": {
            "name": "test_receive_msgpack_with_slot_and_settings",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator2": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_settings": {
            "name": "test_receive_settings",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_receive_close_port": {
            "name": "test_receive_close_port",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_message": {
            "name": "test_get_message",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "communicator": [
                    "dict"
                ],
                "message": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_client": {
            "name": "test_get_client",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_servers": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "communicator": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "communicator.gpp": {
            "name": "gpp",
            "location": 52,
            "return": [
                "Reference"
            ],
            "arguments": {
                "x": []
            }
        },
        "communicator.gpe": {
            "name": "gpe",
            "location": 62,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "p": [],
                "s": []
            }
        },
        "communicator2.gpp": {
            "name": "gpp",
            "location": 89,
            "return": [
                "Reference"
            ],
            "arguments": {
                "x": []
            }
        },
        "communicator2.gpe": {
            "name": "gpe",
            "location": 99,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "p": [],
                "s": []
            }
        },
        "communicator3.gpp": {
            "name": "gpp",
            "location": 126,
            "return": [
                "bool",
                "Reference"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "communicator3.gpe": {
            "name": "gpe",
            "location": 136,
            "return": [
                "MagicMock",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "str",
                    "Type",
                    "list",
                    "callable",
                    "Union[int, float]"
                ],
                "s": [
                    "str",
                    "bool",
                    "Iterator[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_grid.py": {
        "test_grid": {
            "name": "test_grid",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_instance.py": {
        "sys_argv_manager": {
            "name": "sys_argv_manager",
            "location": 15,
            "return": [
                "Generator[None,None,None]",
                "Generator[None]"
            ],
            "arguments": {}
        },
        "log_file_in_tmpdir": {
            "name": "log_file_in_tmpdir",
            "location": 23,
            "return": [
                "Generator[None,None,None]",
                "Generator[None]"
            ],
            "arguments": {
                "tmpdir": [
                    "List[str]"
                ]
            }
        },
        "sys_argv_instance": {
            "name": "sys_argv_instance",
            "location": 31,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "instance": {
            "name": "instance",
            "location": 39,
            "return": [
                "typing.Generator[Instance]"
            ],
            "arguments": {
                "sys_argv_instance": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "instance2": {
            "name": "instance2",
            "location": 62,
            "return": [
                "typing.Generator[Instance]"
            ],
            "arguments": {
                "sys_argv_instance": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_create_instance": {
            "name": "test_create_instance",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "sys_argv_instance": [
                    "bool"
                ],
                "log_file_in_tmpdir": [
                    "bool"
                ],
                "sys_argv_manager": [
                    "bool"
                ]
            }
        },
        "test_extract_manager_location": {
            "name": "test_extract_manager_location",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "sys_argv_manager": [
                    "str"
                ]
            }
        },
        "test_get_setting": {
            "name": "test_get_setting",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "IO[str]"
                ]
            }
        },
        "test_list_ports": {
            "name": "test_list_ports",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int"
                ]
            }
        },
        "test_is_vector_port": {
            "name": "test_is_vector_port",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_send": {
            "name": "test_send",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int"
                ],
                "message": [
                    "int"
                ]
            }
        },
        "test_send_invalid_port": {
            "name": "test_send_invalid_port",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "message": [
                    "Dict",
                    "str"
                ]
            }
        },
        "test_receive": {
            "name": "test_receive",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ]
            }
        },
        "test_receive_default": {
            "name": "test_receive_default",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_receive_invalid_port": {
            "name": "test_receive_invalid_port",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_receive_with_settings": {
            "name": "test_receive_with_settings",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_receive_with_settings_default": {
            "name": "test_receive_with_settings_default",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_receive_parallel_universe": {
            "name": "test_receive_parallel_universe",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_reuse_instance_receive_overlay": {
            "name": "test_reuse_instance_receive_overlay",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_reuse_instance_closed_port": {
            "name": "test_reuse_instance_closed_port",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_reuse_instance_vector_port": {
            "name": "test_reuse_instance_vector_port",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "instance2": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_reuse_instance_no_f_init_ports": {
            "name": "test_reuse_instance_no_f_init_ports",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test_reuse_instance_miswired": {
            "name": "test_reuse_instance_miswired",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "float"
                ]
            }
        },
        "test_reuse_instance_closed_port.receive_message": {
            "name": "receive_message",
            "location": 245,
            "return": [
                "Message"
            ],
            "arguments": {
                "port_name": [],
                "slot": [
                    "None"
                ],
                "default": [
                    "None"
                ]
            }
        },
        "test_reuse_instance_closed_port.get_port": {
            "name": "get_port",
            "location": 252,
            "return": [
                "MagicMock",
                "str",
                "bool"
            ],
            "arguments": {
                "port_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_reuse_instance_vector_port.receive_message": {
            "name": "receive_message",
            "location": 273,
            "return": [
                "Message",
                "Optional[bool]",
                "Optional[int]",
                "List",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "port_name": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ],
                "slot": [
                    "None",
                    "str",
                    "bool"
                ],
                "default": [
                    "None",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_mmp_client.py": {
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_connection_fail": {
            "name": "test_connection_fail",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_submit_log_message": {
            "name": "test_submit_log_message",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": []
            }
        },
        "test_get_settings": {
            "name": "test_get_settings",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": []
            }
        },
        "test_register_instance": {
            "name": "test_register_instance",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": []
            }
        },
        "test_request_peers": {
            "name": "test_request_peers",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": []
            }
        },
        "test_request_peers_error": {
            "name": "test_request_peers_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": [
                    "mock.Mock"
                ]
            }
        },
        "test_request_peers_timeout": {
            "name": "test_request_peers_timeout",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_mmp_client": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_outbox.py": {
        "outbox": {
            "name": "outbox",
            "location": 11,
            "return": [
                "Outbox",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "message": {
            "name": "message",
            "location": 16,
            "return": [
                "bool",
                "Message"
            ],
            "arguments": {}
        },
        "test_create_outbox": {
            "name": "test_create_outbox",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deposit_message": {
            "name": "test_deposit_message",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "outbox": [],
                "message": []
            }
        },
        "test_retrieve_message": {
            "name": "test_retrieve_message",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "outbox": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "test_deposit_retrieve_order": {
            "name": "test_deposit_retrieve_order",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "outbox": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_port.py": {
        "test_create_port": {
            "name": "test_create_port",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_invalid_port": {
            "name": "test_create_invalid_port",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_port_properties": {
            "name": "test_port_properties",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_settings_manager.py": {
        "settings_manager": {
            "name": "settings_manager",
            "location": 8,
            "return": [
                "SettingsManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "settings_manager": [
                    "float",
                    "int"
                ]
            }
        },
        "test_get_setting": {
            "name": "test_get_setting",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "settings_manager": []
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_test.py": {
        "test_test": {
            "name": "test_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/test_util.py": {
        "test_conduit_to_grpc": {
            "name": "test_conduit_to_grpc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "instances": {
            "name": "instances",
            "location": 18,
            "return": [
                "List[Reference]",
                "Mapping[str,Sequence[str]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_instance_to_kernel": {
            "name": "test_instance_to_kernel",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "instances": [
                    "List[ymmsl.Reference]"
                ]
            }
        },
        "test_instance_indices": {
            "name": "test_instance_indices",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "instances": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "muscle3-master/libmuscle/python/libmuscle/test/__init__.py": {},
    "muscle3-master/muscle_manager/conftest.py": {},
    "muscle3-master/muscle_manager/muscle_manager.py": {
        "manage_simulation": {
            "name": "manage_simulation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "ymmsl_files": [
                    "List",
                    "Union[List,set]",
                    "Set",
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        }
    },
    "muscle3-master/muscle_manager/__init__.py": {},
    "muscle3-master/muscle_manager_protocol/muscle_manager_protocol_pb2.py": {},
    "muscle3-master/muscle_manager_protocol/muscle_manager_protocol_pb2_grpc.py": {
        "add_MuscleManagerServicer_to_server": {
            "name": "add_MuscleManagerServicer_to_server",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [
                    "Dict"
                ],
                "server": [
                    "str",
                    "int"
                ]
            }
        },
        "MuscleManagerStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ]
            }
        },
        "MuscleManagerServicer.SubmitLogMessage": {
            "name": "SubmitLogMessage",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "grpc.ServicerContext"
                ],
                "context": [
                    "int",
                    "str"
                ]
            }
        },
        "MuscleManagerServicer.SubmitProfileEvents": {
            "name": "SubmitProfileEvents",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ],
                "context": [
                    "int",
                    "dict",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MuscleManagerServicer.RequestSettings": {
            "name": "RequestSettings",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ],
                "context": [
                    "str",
                    "dict"
                ]
            }
        },
        "MuscleManagerServicer.RegisterInstance": {
            "name": "RegisterInstance",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "grpc.ServicerContext"
                ],
                "context": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "MuscleManagerServicer.RequestPeers": {
            "name": "RequestPeers",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "grpc.ServicerContext",
                    "grpc._server._Context"
                ],
                "context": [
                    "str",
                    "dict"
                ]
            }
        },
        "MuscleManagerServicer.DeregisterInstance": {
            "name": "DeregisterInstance",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "grpc.ServicerContext"
                ],
                "context": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "muscle3-master/muscle_manager_protocol/__init__.py": {},
    "muscle3-master/scripts/api_generator.py": {
        "banner": {
            "name": "banner",
            "location": 29,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "comment_mark": [
                    "str"
                ]
            }
        },
        "Par.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Par.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ],
                "ns": [
                    "str",
                    "bytes",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Par.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 59,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Par.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 62,
            "return": [
                "list",
                "int",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Par.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Par.f_call_c": {
            "name": "f_call_c",
            "location": 68,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str",
                    "dict"
                ],
                "call": [
                    "str",
                    "dict"
                ]
            }
        },
        "Par.f_return_result": {
            "name": "f_return_result",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str"
                ]
            }
        },
        "Par._regular_type": {
            "name": "_regular_type",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "short_type": [
                    "Union[str, List[Any]]",
                    "str"
                ]
            }
        },
        "Void.tname": {
            "name": "tname",
            "location": 108,
            "return": [
                "str",
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 111,
            "return": [
                "bool",
                "str",
                "int",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 114,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 117,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.f_ret_type": {
            "name": "f_ret_type",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.fc_get_result": {
            "name": "fc_get_result",
            "location": 123,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "Void.fc_return": {
            "name": "fc_return",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Void.f_call_c": {
            "name": "f_call_c",
            "location": 129,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "Void.f_return_result": {
            "name": "f_return_result",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str",
                    "List[str]"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "String.tname": {
            "name": "tname",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 142,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.f_type": {
            "name": "f_type",
            "location": 145,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.f_ret_type": {
            "name": "f_ret_type",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 151,
            "return": [
                "str",
                "set",
                "float",
                "Optional[float]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 155,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.f_call_c": {
            "name": "f_call_c",
            "location": 158,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "String.f_return_result": {
            "name": "f_return_result",
            "location": 161,
            "return": [
                "str",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "String.fi_type": {
            "name": "fi_type",
            "location": 168,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 173,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_type": {
            "name": "fc_type",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 188,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.fc_get_result": {
            "name": "fc_get_result",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "String.fc_return": {
            "name": "fc_return",
            "location": 195,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.tname": {
            "name": "tname",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 207,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.f_type": {
            "name": "f_type",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.f_ret_type": {
            "name": "f_ret_type",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 219,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 224,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.f_call_c": {
            "name": "f_call_c",
            "location": 227,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "VecDbl.f_return_result": {
            "name": "f_return_result",
            "location": 230,
            "return": [
                "str",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "VecDbl.fi_type": {
            "name": "fi_type",
            "location": 234,
            "return": [
                "str",
                "Callable[..., T]",
                "Type",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 239,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_type": {
            "name": "fc_type",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 247,
            "return": [
                "str",
                "BinaryIO",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 250,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 254,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecDbl.fc_get_result": {
            "name": "fc_get_result",
            "location": 257,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "VecDbl.fc_return": {
            "name": "fc_return",
            "location": 261,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.tname": {
            "name": "tname",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 273,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.f_type": {
            "name": "f_type",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.f_ret_type": {
            "name": "f_ret_type",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 285,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 289,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.f_call_c": {
            "name": "f_call_c",
            "location": 292,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "Vec2Dbl.f_return_result": {
            "name": "f_return_result",
            "location": 295,
            "return": [
                "str",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Vec2Dbl.fi_type": {
            "name": "fi_type",
            "location": 299,
            "return": [
                "str",
                "Callable[..., T]",
                "Type",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 304,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_type": {
            "name": "fc_type",
            "location": 309,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 312,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 315,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 326,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Dbl.fc_get_result": {
            "name": "fc_get_result",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Vec2Dbl.fc_return": {
            "name": "fc_return",
            "location": 333,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.tname": {
            "name": "tname",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 360,
            "return": [
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.f_type": {
            "name": "f_type",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.f_ret_type": {
            "name": "f_ret_type",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 372,
            "return": [
                "str",
                "int",
                "Union[dict, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 377,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.f_call_c": {
            "name": "f_call_c",
            "location": 380,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "VecSizet.f_return_result": {
            "name": "f_return_result",
            "location": 383,
            "return": [
                "str",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "VecSizet.fi_type": {
            "name": "fi_type",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 392,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_type": {
            "name": "fc_type",
            "location": 397,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 400,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 403,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 407,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecSizet.fc_get_result": {
            "name": "fc_get_result",
            "location": 410,
            "return": [
                "str",
                "bool",
                "Iterable[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "VecSizet.fc_return": {
            "name": "fc_return",
            "location": 414,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ndims": [
                    "str",
                    "Sequence[int]"
                ],
                "elem_type": [
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Iterable",
                    "Callable",
                    "IO",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "Array.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "ns": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Array.tname": {
            "name": "tname",
            "location": 452,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 455,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.f_type": {
            "name": "f_type",
            "location": 458,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.f_ret_type": {
            "name": "f_ret_type",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 475,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.f_call_c": {
            "name": "f_call_c",
            "location": 479,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "Array.f_return_result": {
            "name": "f_return_result",
            "location": 482,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Array.fi_type": {
            "name": "fi_type",
            "location": 497,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 505,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_type": {
            "name": "fc_type",
            "location": 512,
            "return": [
                "str",
                "Exception",
                "type",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 519,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 526,
            "return": [
                "dict",
                "str",
                "Dict[str, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 536,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.fc_get_result": {
            "name": "fc_get_result",
            "location": 539,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Array.fc_return": {
            "name": "fc_return",
            "location": 543,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array._f_dims": {
            "name": "_f_dims",
            "location": 560,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.tname": {
            "name": "tname",
            "location": 567,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 570,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.f_type": {
            "name": "f_type",
            "location": 573,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.f_ret_type": {
            "name": "f_ret_type",
            "location": 577,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.f_aux_variables": {
            "name": "f_aux_variables",
            "location": 581,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 585,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.f_call_c": {
            "name": "f_call_c",
            "location": 588,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str"
                ],
                "call": [
                    "str",
                    "set"
                ]
            }
        },
        "Bytes.f_return_result": {
            "name": "f_return_result",
            "location": 591,
            "return": [
                "str",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Bytes.fi_type": {
            "name": "fi_type",
            "location": 595,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 600,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_type": {
            "name": "fc_type",
            "location": 605,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 608,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 611,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 615,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bytes.fc_get_result": {
            "name": "fc_get_result",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Bytes.fc_return": {
            "name": "fc_return",
            "location": 622,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.__init__": {
            "name": "__init__",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Obj.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bytes"
                ],
                "ns": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "Obj.tname": {
            "name": "tname",
            "location": 640,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 643,
            "return": [
                "str",
                "List[str]",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.f_type": {
            "name": "f_type",
            "location": 646,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.f_ret_type": {
            "name": "f_ret_type",
            "location": 650,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fi_type": {
            "name": "fi_type",
            "location": 654,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 657,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_type": {
            "name": "fc_type",
            "location": 660,
            "return": [
                "Type",
                "bool",
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 663,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 666,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 670,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.fc_get_result": {
            "name": "fc_get_result",
            "location": 673,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Obj.fc_return": {
            "name": "fc_return",
            "location": 677,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 680,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.f_call_c": {
            "name": "f_call_c",
            "location": 683,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str",
                    "dict"
                ],
                "call": [
                    "str",
                    "dict"
                ]
            }
        },
        "Obj.f_return_result": {
            "name": "f_return_result",
            "location": 686,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str"
                ]
            }
        },
        "Bool.tname": {
            "name": "tname",
            "location": 693,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 696,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.f_type": {
            "name": "f_type",
            "location": 699,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.f_ret_type": {
            "name": "f_ret_type",
            "location": 702,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.fi_type": {
            "name": "fi_type",
            "location": 705,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 708,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.fc_type": {
            "name": "fc_type",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bool.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bool.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 717,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.fc_get_result": {
            "name": "fc_get_result",
            "location": 720,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Bool.fc_return": {
            "name": "fc_return",
            "location": 723,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.f_chain_arg": {
            "name": "f_chain_arg",
            "location": 726,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.f_call_c": {
            "name": "f_call_c",
            "location": 729,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_name": [
                    "str",
                    "dict"
                ],
                "call": [
                    "str",
                    "dict"
                ]
            }
        },
        "Bool.f_return_result": {
            "name": "f_return_result",
            "location": 732,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "return_name": [
                    "str"
                ],
                "result_name": [
                    "str"
                ]
            }
        },
        "EnumVal.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EnumVal.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bytes"
                ],
                "ns": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "EnumVal.tname": {
            "name": "tname",
            "location": 748,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 751,
            "return": [
                "str",
                "List[str]",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.f_type": {
            "name": "f_type",
            "location": 754,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.f_ret_type": {
            "name": "f_ret_type",
            "location": 758,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fi_type": {
            "name": "fi_type",
            "location": 762,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 765,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_type": {
            "name": "fc_type",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_convert_input": {
            "name": "fc_convert_input",
            "location": 774,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 778,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.fc_get_result": {
            "name": "fc_get_result",
            "location": 781,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "EnumVal.fc_return": {
            "name": "fc_return",
            "location": 784,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.tname": {
            "name": "tname",
            "location": 791,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 794,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.f_type": {
            "name": "f_type",
            "location": 797,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.f_ret_type": {
            "name": "f_ret_type",
            "location": 800,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.fi_type": {
            "name": "fi_type",
            "location": 803,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 806,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.fc_type": {
            "name": "fc_type",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 815,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.fc_get_result": {
            "name": "fc_get_result",
            "location": 818,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Int.fc_return": {
            "name": "fc_return",
            "location": 821,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.tname": {
            "name": "tname",
            "location": 828,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 831,
            "return": [
                "str",
                "float",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.f_type": {
            "name": "f_type",
            "location": 834,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.f_ret_type": {
            "name": "f_ret_type",
            "location": 837,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fi_type": {
            "name": "fi_type",
            "location": 841,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 844,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fc_type": {
            "name": "fc_type",
            "location": 847,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 850,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 853,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Char.fc_get_result": {
            "name": "fc_get_result",
            "location": 856,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Char.fc_return": {
            "name": "fc_return",
            "location": 859,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.tname": {
            "name": "tname",
            "location": 866,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int16t.f_type": {
            "name": "f_type",
            "location": 872,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.f_ret_type": {
            "name": "f_ret_type",
            "location": 875,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fi_type": {
            "name": "fi_type",
            "location": 878,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 881,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fc_type": {
            "name": "fc_type",
            "location": 884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 890,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int16t.fc_get_result": {
            "name": "fc_get_result",
            "location": 893,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Int16t.fc_return": {
            "name": "fc_return",
            "location": 896,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.tname": {
            "name": "tname",
            "location": 903,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int32t.f_type": {
            "name": "f_type",
            "location": 909,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.f_ret_type": {
            "name": "f_ret_type",
            "location": 912,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fi_type": {
            "name": "fi_type",
            "location": 916,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 919,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fc_type": {
            "name": "fc_type",
            "location": 922,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 925,
            "return": [
                "str",
                "Callable[..., T]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 928,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int32t.fc_get_result": {
            "name": "fc_get_result",
            "location": 931,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Int32t.fc_return": {
            "name": "fc_return",
            "location": 934,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.tname": {
            "name": "tname",
            "location": 941,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int64t.f_type": {
            "name": "f_type",
            "location": 947,
            "return": [
                "Callable[[T], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.f_ret_type": {
            "name": "f_ret_type",
            "location": 950,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fi_type": {
            "name": "fi_type",
            "location": 953,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 956,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fc_type": {
            "name": "fc_type",
            "location": 959,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 962,
            "return": [
                "str",
                "Callable[..., T]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 965,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int64t.fc_get_result": {
            "name": "fc_get_result",
            "location": 968,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Int64t.fc_return": {
            "name": "fc_return",
            "location": 971,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.tname": {
            "name": "tname",
            "location": 978,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 981,
            "return": [
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.f_type": {
            "name": "f_type",
            "location": 984,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.f_ret_type": {
            "name": "f_ret_type",
            "location": 987,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fi_type": {
            "name": "fi_type",
            "location": 991,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 994,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fc_type": {
            "name": "fc_type",
            "location": 997,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 1000,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 1003,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sizet.fc_get_result": {
            "name": "fc_get_result",
            "location": 1006,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Sizet.fc_return": {
            "name": "fc_return",
            "location": 1009,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.tname": {
            "name": "tname",
            "location": 1016,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 1019,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.f_type": {
            "name": "f_type",
            "location": 1022,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.f_ret_type": {
            "name": "f_ret_type",
            "location": 1025,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.fi_type": {
            "name": "fi_type",
            "location": 1029,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 1032,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.fc_type": {
            "name": "fc_type",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 1041,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.fc_get_result": {
            "name": "fc_get_result",
            "location": 1044,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Float.fc_return": {
            "name": "fc_return",
            "location": 1047,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.tname": {
            "name": "tname",
            "location": 1054,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.fc_cpp_type": {
            "name": "fc_cpp_type",
            "location": 1057,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.f_type": {
            "name": "f_type",
            "location": 1060,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.f_ret_type": {
            "name": "f_ret_type",
            "location": 1063,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.fi_type": {
            "name": "fi_type",
            "location": 1067,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.fi_ret_type": {
            "name": "fi_ret_type",
            "location": 1070,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.fc_type": {
            "name": "fc_type",
            "location": 1073,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Double.fc_ret_type": {
            "name": "fc_ret_type",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Double.fc_cpp_arg": {
            "name": "fc_cpp_arg",
            "location": 1079,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Double.fc_get_result": {
            "name": "fc_get_result",
            "location": 1082,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cpp_chain_call": [
                    "str"
                ]
            }
        },
        "Double.fc_return": {
            "name": "fc_return",
            "location": 1085,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.__init__": {
            "name": "__init__",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret_type": [
                    "str",
                    "Type",
                    "type",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "params": [
                    "str",
                    "int"
                ],
                "may_throw": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "MemFun.__copy__": {
            "name": "__copy__",
            "location": 1149,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.set_class_name": {
            "name": "set_class_name",
            "location": 1162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "MemFun.reset_class_name": {
            "name": "reset_class_name",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str"
                ]
            }
        },
        "MemFun.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "MemFun.set_public": {
            "name": "set_public",
            "location": 1183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [
                    "bool",
                    "float"
                ]
            }
        },
        "MemFun.fortran_c_wrapper": {
            "name": "fortran_c_wrapper",
            "location": 1186,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.fortran_interface": {
            "name": "fortran_interface",
            "location": 1236,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.fortran_function": {
            "name": "fortran_function",
            "location": 1283,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.fortran_public_declaration": {
            "name": "fortran_public_declaration",
            "location": 1399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun.fortran_exports": {
            "name": "fortran_exports",
            "location": 1409,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._default_fc_chain_call": {
            "name": "_default_fc_chain_call",
            "location": 1419,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {}
        },
        "MemFun._default_cpp_chain_call": {
            "name": "_default_cpp_chain_call",
            "location": 1423,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "MemFun._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1426,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._fc_return": {
            "name": "_fc_return",
            "location": 1436,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._fc_in_parameters": {
            "name": "_fc_in_parameters",
            "location": 1439,
            "return": [
                "Match",
                "bool",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._fc_out_parameters": {
            "name": "_fc_out_parameters",
            "location": 1451,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._fi_in_parameters": {
            "name": "_fi_in_parameters",
            "location": 1466,
            "return": [
                "Match",
                "bool",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._fi_out_parameters": {
            "name": "_fi_out_parameters",
            "location": 1478,
            "return": [
                "List[Dict[str, Any]]",
                "List[str]",
                "Union[str, bytes]",
                "str",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._f_in_parameters": {
            "name": "_f_in_parameters",
            "location": 1493,
            "return": [
                "Dict[str, Tuple[int, int]]",
                "List[str]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFun._f_out_parameters": {
            "name": "_f_out_parameters",
            "location": 1505,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Iterable[Tuple[str, str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constructor.__init__": {
            "name": "__init__",
            "location": 1527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[str]",
                    "list",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Constructor.__copy__": {
            "name": "__copy__",
            "location": 1534,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constructor.set_class_name": {
            "name": "set_class_name",
            "location": 1547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Constructor.reset_class_name": {
            "name": "reset_class_name",
            "location": 1552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str"
                ]
            }
        },
        "Constructor._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1556,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constructor._fc_return": {
            "name": "_fc_return",
            "location": 1562,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqualsOperator.__init__": {
            "name": "__init__",
            "location": 1572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional['InstrumentBase']"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional['InstrumentBase']"
                ]
            }
        },
        "EqualsOperator.__copy__": {
            "name": "__copy__",
            "location": 1575,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqualsOperator._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1588,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignmentOperator.__init__": {
            "name": "__init__",
            "location": 1602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping"
                ],
                "param": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "AssignmentOperator.__copy__": {
            "name": "__copy__",
            "location": 1609,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignmentOperator._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1622,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexAssignmentOperator.__init__": {
            "name": "__init__",
            "location": 1634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "float"
                ],
                "params": [
                    "str",
                    "bool",
                    "float"
                ],
                "may_throw": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "IndexAssignmentOperator.__copy__": {
            "name": "__copy__",
            "location": 1638,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexAssignmentOperator._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1651,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftedIndexAssignmentOperator.__copy__": {
            "name": "__copy__",
            "location": 1666,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShiftedIndexAssignmentOperator._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1679,
            "return": [
                "str",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedConstructor.__init__": {
            "name": "__init__",
            "location": 1695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "NamedConstructor.__copy__": {
            "name": "__copy__",
            "location": 1703,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedConstructor._default_cpp_chain_call": {
            "name": "_default_cpp_chain_call",
            "location": 1719,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "NamedConstructor._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1724,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedConstructor._fc_return": {
            "name": "_fc_return",
            "location": 1736,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Destructor.__init__": {
            "name": "__init__",
            "location": 1741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Destructor.__copy__": {
            "name": "__copy__",
            "location": 1744,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Destructor._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1759,
            "return": [
                "bytes",
                "str",
                "Type",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.__init__": {
            "name": "__init__",
            "location": 1775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.__copy__": {
            "name": "__copy__",
            "location": 1779,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.set_class_name": {
            "name": "set_class_name",
            "location": 1784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MultiMemFun.reset_class_name": {
            "name": "reset_class_name",
            "location": 1788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "int"
                ]
            }
        },
        "MultiMemFun.set_public": {
            "name": "set_public",
            "location": 1792,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "MultiMemFun.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 1796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "Dict[str, str]",
                    "str",
                    "Callable[[Any], str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "MultiMemFun.fortran_c_wrapper": {
            "name": "fortran_c_wrapper",
            "location": 1805,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.fortran_interface": {
            "name": "fortran_interface",
            "location": 1810,
            "return": [
                "int",
                "str",
                "Optional[Iterable[str]]",
                "Callable",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.fortran_function": {
            "name": "fortran_function",
            "location": 1815,
            "return": [
                "int",
                "List[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.fortran_public_declaration": {
            "name": "fortran_public_declaration",
            "location": 1820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiMemFun.fortran_exports": {
            "name": "fortran_exports",
            "location": 1826,
            "return": [
                "List[str]",
                "str",
                "dict",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFunTmplInstance.__init__": {
            "name": "__init__",
            "location": 1833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str"
                ],
                "targ": [
                    "str",
                    "List[str]"
                ],
                "params": [
                    "str",
                    "Dict[str, str]"
                ],
                "may_throw": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MemFunTmplInstance.__copy__": {
            "name": "__copy__",
            "location": 1871,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFunTmplInstance._default_cpp_chain_call": {
            "name": "_default_cpp_chain_call",
            "location": 1887,
            "return": [],
            "arguments": {}
        },
        "MemFunTmplInstance._fc_cpp_call": {
            "name": "_fc_cpp_call",
            "location": 1891,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemFunTmpl.__init__": {
            "name": "__init__",
            "location": 1904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "Tuple[type]",
                    "Set[Type[Any]]",
                    "Type"
                ],
                "ret_type": [
                    "str",
                    "Union[int, str]"
                ],
                "name": [
                    "list",
                    "List[str]",
                    "str",
                    "List[float]",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ],
                "params": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "may_throw": [
                    "str",
                    "List[float]"
                ]
            }
        },
        "MemFunTmpl.__copy__": {
            "name": "__copy__",
            "location": 1968,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.__init__": {
            "name": "__init__",
            "location": 1993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "names": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "OverloadSet.__copy__": {
            "name": "__copy__",
            "location": 2006,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.set_class_name": {
            "name": "set_class_name",
            "location": 2013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "OverloadSet.reset_class_name": {
            "name": "reset_class_name",
            "location": 2016,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "OverloadSet.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 2019,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str"
                ]
            }
        },
        "OverloadSet.set_public": {
            "name": "set_public",
            "location": 2022,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [
                    "bool",
                    "float"
                ]
            }
        },
        "OverloadSet.fortran_c_wrapper": {
            "name": "fortran_c_wrapper",
            "location": 2025,
            "return": [
                "T",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.fortran_interface": {
            "name": "fortran_interface",
            "location": 2028,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.fortran_function": {
            "name": "fortran_function",
            "location": 2031,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.fortran_overload": {
            "name": "fortran_overload",
            "location": 2034,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.fortran_public_declaration": {
            "name": "fortran_public_declaration",
            "location": 2046,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverloadSet.fortran_exports": {
            "name": "fortran_exports",
            "location": 2054,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.__init__": {
            "name": "__init__",
            "location": 2061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "parent": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]",
                    "Type"
                ],
                "members": [
                    "str",
                    "bool"
                ]
            }
        },
        "Class.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 2094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Class.set_public": {
            "name": "set_public",
            "location": 2104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [
                    "Optional[float]",
                    "dict",
                    "bool",
                    "List[bytes]",
                    "int",
                    "str"
                ]
            }
        },
        "Class.fortran_c_wrapper": {
            "name": "fortran_c_wrapper",
            "location": 2117,
            "return": [
                "bool",
                "Sequence[str]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_interface": {
            "name": "fortran_interface",
            "location": 2125,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_overloads": {
            "name": "fortran_overloads",
            "location": 2133,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_type_definition": {
            "name": "fortran_type_definition",
            "location": 2142,
            "return": [
                "Mapping",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_public_declarations": {
            "name": "fortran_public_declarations",
            "location": 2153,
            "return": [
                "int",
                "List[str]",
                "\"Parameter\"",
                "bool",
                "Tuple[Dict[str, object], Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_functions": {
            "name": "fortran_functions",
            "location": 2161,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.fortran_exports": {
            "name": "fortran_exports",
            "location": 2169,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 2179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "Enum.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 2191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Enum.set_public": {
            "name": "set_public",
            "location": 2199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [
                    "bool",
                    "float"
                ]
            }
        },
        "Enum.fortran_type_definition": {
            "name": "fortran_type_definition",
            "location": 2209,
            "return": [
                "Mapping",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 2225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "dict",
                    "Optional[str]"
                ],
                "public": [
                    "str",
                    "Literal",
                    "Exception",
                    "bool",
                    "Optional[Type[BaseException]]"
                ],
                "prefix": [
                    "str",
                    "int",
                    "Sequence",
                    "Optional[int]",
                    "Type[T]"
                ],
                "enums": [
                    "str",
                    "int",
                    "Sequence",
                    "Optional[int]",
                    "Type[T]"
                ],
                "classes": [
                    "str",
                    "int",
                    "Sequence",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "Namespace.set_ns_prefix": {
            "name": "set_ns_prefix",
            "location": 2249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns_for_name": [
                    "Dict[str, str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Namespace.fortran_typedefs": {
            "name": "fortran_typedefs",
            "location": 2260,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.fortran_interface": {
            "name": "fortran_interface",
            "location": 2288,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.fortran_functions": {
            "name": "fortran_functions",
            "location": 2307,
            "return": [
                "bool",
                "int",
                "Optional[Any]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.fortran_exports": {
            "name": "fortran_exports",
            "location": 2318,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 2331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "headers": [
                    "str",
                    "bool"
                ],
                "uses": [
                    "bool",
                    "str",
                    "Sequence",
                    "Mapping[str, Any]",
                    "int"
                ],
                "namespaces": [
                    "bool",
                    "str",
                    "Sequence",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "API.fortran_c_wrapper": {
            "name": "fortran_c_wrapper",
            "location": 2361,
            "return": [
                "bool",
                "Sequence[str]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.fortran_module": {
            "name": "fortran_module",
            "location": 2373,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.fortran_exports": {
            "name": "fortran_exports",
            "location": 2402,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._fc_includes": {
            "name": "_fc_includes",
            "location": 2414,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._fc_using_statements": {
            "name": "_fc_using_statements",
            "location": 2423,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._fc_function_definitions": {
            "name": "_fc_function_definitions",
            "location": 2438,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/scripts/make_libmuscle_api.py": {
        "GridConstructor.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_names": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "GridConstructor.__copy__": {
            "name": "__copy__",
            "location": 186,
            "return": [
                "GridConstructor",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Elements.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Elements.__copy__": {
            "name": "__copy__",
            "location": 344,
            "return": [
                "Elements",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "muscle3-master/scripts/make_ymmsl_api.py": {},
    "muscle3-master/scripts/tests/make_echolib_api.py": {}
}
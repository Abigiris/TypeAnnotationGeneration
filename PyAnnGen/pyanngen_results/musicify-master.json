{
    "musicify-master/server/app.py": {
        "_proxy": {
            "name": "_proxy",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_login": {
            "name": "_login",
            "location": 44,
            "return": [
                "str",
                "Dict[str,str]",
                "Dict[str,Any]",
                "List",
                "Dict",
                "List[list]"
            ],
            "arguments": {}
        },
        "_callback": {
            "name": "_callback",
            "location": 72,
            "return": [
                "Dict[str,str]",
                "bytes",
                "str",
                "Dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "_user": {
            "name": "_user",
            "location": 87,
            "return": [
                "bool",
                "int",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "_robots": {
            "name": "_robots",
            "location": 120,
            "return": [
                "Optional[str]",
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "_handle_error": {
            "name": "_handle_error",
            "location": 128,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "error": [
                    "int",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "_get_token": {
            "name": "_get_token",
            "location": 138,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "req": [
                    "Dict",
                    "Callable",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "_spotify_oauth": {
            "name": "_spotify_oauth",
            "location": 142,
            "return": [
                "src.spotify_oauth.SpotifyOAuth"
            ],
            "arguments": {}
        },
        "_spotify_client": {
            "name": "_spotify_client",
            "location": 159,
            "return": [
                "src.spotify_client.SpotifyClient"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "str",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "_emotion_client": {
            "name": "_emotion_client",
            "location": 166,
            "return": [
                "src.emotion_client.EmotionClient"
            ],
            "arguments": {}
        }
    },
    "musicify-master/server/src/config.py": {
        "spotify_api": {
            "name": "spotify_api",
            "location": 15,
            "return": [
                "bytes",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "face_api": {
            "name": "face_api",
            "location": 19,
            "return": [
                "bytes",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "_get_config_key": {
            "name": "_get_config_key",
            "location": 23,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "_get_config": {
            "name": "_get_config",
            "location": 32,
            "return": [
                "str",
                "Dict[Text,dict[Text,]]",
                "Dict[Any,bool]",
                "None"
            ],
            "arguments": {}
        }
    },
    "musicify-master/server/src/emotion_client.py": {
        "EmotionClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "subscription_key": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Mapping",
                    "Tuple[bytes,bytes]",
                    "Dict[str,str]",
                    "Tuple[Union[bytes,bytes]]"
                ]
            }
        },
        "EmotionClient.is_happy": {
            "name": "is_happy",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "emotions": []
            }
        },
        "EmotionClient.get_emotions": {
            "name": "get_emotions",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Dict[str,Union[Any,Any,Any]]",
                "Tuple[Union[Type,Type]]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "bool",
                    "List[bytes]"
                ]
            }
        }
    },
    "musicify-master/server/src/exceptions.py": {
        "SpotifyClientError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "SpotifyOAuthError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "EmotionClientError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        }
    },
    "musicify-master/server/src/genres.py": {
        "get_random_genre": {
            "name": "get_random_genre",
            "location": 31,
            "return": [
                "Text",
                "str",
                "Set",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_genres": {
            "name": "get_genres",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "musicify-master/server/src/spotify_client.py": {
        "SpotifyClient.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "float",
                    "bool"
                ],
                "emotion_client": [
                    "Callable"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "SpotifyClient.get_user": {
            "name": "get_user",
            "location": 48,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyClient._get_uri": {
            "name": "_get_uri",
            "location": 66,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "str",
                    "bool"
                ]
            }
        },
        "SpotifyClient._verify_params": {
            "name": "_verify_params",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emotions": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SpotifyClient._build_seed": {
            "name": "_build_seed",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "emotions": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "SpotifyClient._slim_response": {
            "name": "_slim_response",
            "location": 99,
            "return": [
                "Dict[(str, Union[(int, list)])]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Dict"
                ]
            }
        }
    },
    "musicify-master/server/src/spotify_oauth.py": {
        "SpotifyOAuth.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "str",
                    "int"
                ],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str",
                    "int"
                ],
                "redirect_uri": [
                    "str"
                ],
                "state": [
                    "str",
                    "int"
                ],
                "scope": [
                    "str",
                    "int"
                ]
            }
        },
        "SpotifyOAuth.is_token_expired": {
            "name": "is_token_expired",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "List[str]",
                    "Union[List[str],List[Any]]",
                    "List[list[Any]]",
                    "str",
                    "List[int]",
                    "int",
                    "List[List[Any]]",
                    "Counter[str]",
                    "Dict"
                ]
            }
        },
        "SpotifyOAuth.json_to_cookie": {
            "name": "json_to_cookie",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "json": [
                    "str",
                    "Dict"
                ]
            }
        },
        "SpotifyOAuth.cookie_to_dict": {
            "name": "cookie_to_dict",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cookie": [
                    "str"
                ]
            }
        },
        "SpotifyOAuth._normalize_scope": {
            "name": "_normalize_scope",
            "location": 76,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "bool"
                ]
            }
        },
        "SpotifyOAuth._decorate_with_expires_at": {
            "name": "_decorate_with_expires_at",
            "location": 85,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "token": [
                    "Tuple[int]",
                    "List[List[Any]]",
                    "Sequence",
                    "Counter",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpotifyOAuth.get_auth_url": {
            "name": "get_auth_url",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyOAuth.get_new_token": {
            "name": "get_new_token",
            "location": 106,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SpotifyOAuth.refresh_token": {
            "name": "refresh_token",
            "location": 143,
            "return": [
                "str",
                "int",
                "logging.LogRecord",
                "list"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "List[bytes]",
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "SpotifyOAuth._get_headers": {
            "name": "_get_headers",
            "location": 169,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyOAuth._get_auth_header_value": {
            "name": "_get_auth_header_value",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musicify-master/server/src/utils.py": {
        "allowed_file_type": {
            "name": "allowed_file_type",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "T",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[T]",
                    "Optional[str]"
                ]
            }
        }
    },
    "musicify-master/server/src/__init__.py": {},
    "musicify-master/server/test/test_emotion_client.py": {
        "_emotion_client": {
            "name": "_emotion_client",
            "location": 6,
            "return": [
                "src.emotion_client.EmotionClient"
            ],
            "arguments": {
                "requester": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "TestEmotionClient.test_is_happy__true": {
            "name": "test_is_happy__true",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musicify-master/server/test/test_genres.py": {
        "TestGenres.test_get_random_genre": {
            "name": "test_get_random_genre",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenres.test_get_genres": {
            "name": "test_get_genres",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musicify-master/server/test/test_spotify_client.py": {
        "_spotify_client": {
            "name": "_spotify_client",
            "location": 11,
            "return": [
                "src.spotify_client.SpotifyClient"
            ],
            "arguments": {
                "requester": [
                    "Callable",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        },
        "TestSpotifyOAuth.test_get_uri": {
            "name": "test_get_uri",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestSpotifyOAuth.test_verify_params__faulty_limit": {
            "name": "test_verify_params__faulty_limit",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict[str,Sequence[str]]"
                ]
            }
        },
        "TestSpotifyOAuth.test_verify_params__acceptable_limit": {
            "name": "test_verify_params__acceptable_limit",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict[str,Sequence[str]]"
                ]
            }
        },
        "TestSpotifyOAuth.test_verify_params__missing_emotions": {
            "name": "test_verify_params__missing_emotions",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_verify_params__acceptable_emotions": {
            "name": "test_verify_params__acceptable_emotions",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_build_seed__happy_emotions__major_modality": {
            "name": "test_build_seed__happy_emotions__major_modality",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_build_seed__sad_emotions__minor_modality": {
            "name": "test_build_seed__sad_emotions__minor_modality",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_slim_response": {
            "name": "test_slim_response",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musicify-master/server/test/test_spotify_oauth.py": {
        "_fake_token": {
            "name": "_fake_token",
            "location": 10,
            "return": [
                "dict"
            ],
            "arguments": {
                "expires_at": [
                    "str",
                    "int"
                ],
                "expires_in": [
                    "str",
                    "int"
                ],
                "scope": [
                    "str",
                    "Text"
                ],
                "token_type": [
                    "str",
                    "Text"
                ],
                "refresh_token": [
                    "str",
                    "Text"
                ],
                "access_token": [
                    "str",
                    "Text"
                ]
            }
        },
        "_spotify_oauth": {
            "name": "_spotify_oauth",
            "location": 25,
            "return": [
                "src.spotify_oauth.SpotifyOAuth"
            ],
            "arguments": {
                "requester": [
                    "str",
                    "None",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "client_id": [
                    "Text",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "client_secret": [
                    "Text",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "redirect_uri": [
                    "Text",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "state": [
                    "Text",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "TestSpotifyOAuth.test_is_token_expired__pass": {
            "name": "test_is_token_expired__pass",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_is_token_expired__fail": {
            "name": "test_is_token_expired__fail",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_json_to_cookie": {
            "name": "test_json_to_cookie",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_cookie_to_dict": {
            "name": "test_cookie_to_dict",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_normalize_scope__pass": {
            "name": "test_normalize_scope__pass",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_normalize_scope__fail": {
            "name": "test_normalize_scope__fail",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_decorate_with_expires_at": {
            "name": "test_decorate_with_expires_at",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_auth_url": {
            "name": "test_get_auth_url",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_auth_header_value": {
            "name": "test_get_auth_header_value",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_headers": {
            "name": "test_get_headers",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_new_token__success": {
            "name": "test_get_new_token__success",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_new_token__failure__when_error": {
            "name": "test_get_new_token__failure__when_error",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_new_token__failure__when_state_mismatch": {
            "name": "test_get_new_token__failure__when_state_mismatch",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_new_token__failure__when_no_code": {
            "name": "test_get_new_token__failure__when_no_code",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_get_new_token__failure__when_invalid_response": {
            "name": "test_get_new_token__failure__when_invalid_response",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_refresh_token__success": {
            "name": "test_refresh_token__success",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_refresh_token__failure__when_no_refresh_token": {
            "name": "test_refresh_token__failure__when_no_refresh_token",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpotifyOAuth.test_refresh_token__failure__when_invalid_response": {
            "name": "test_refresh_token__failure__when_invalid_response",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musicify-master/server/test/test_utils.py": {
        "TestUtils.test_allowed_file_type__pass": {
            "name": "test_allowed_file_type__pass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "TestUtils.test_allowed_file_type__fail": {
            "name": "test_allowed_file_type__fail",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "TestUtils.test_exists__pass": {
            "name": "test_exists__pass",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Set",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "TestUtils.test_exists__fail": {
            "name": "test_exists__fail",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "musicify-master/server/test/utils.py": {
        "one_of_all_primitives": {
            "name": "one_of_all_primitives",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "additional_type": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 24,
            "return": [
                "List[str]",
                "Mock"
            ],
            "arguments": {}
        },
        "get_exception_msg": {
            "name": "get_exception_msg",
            "location": 30,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "exception": [
                    "Type[Any]",
                    "Dict",
                    "Type",
                    "Tuple[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "mock_requester": {
            "name": "mock_requester",
            "location": 44,
            "return": [
                "MockRequester",
                "str",
                "Optional[str]",
                "bool",
                "TextIO"
            ],
            "arguments": {
                "status_code": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "json": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "reason": [
                    "bool",
                    "None",
                    "List",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "DotNotation.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_dict": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "mock_requester.MockRequester.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_status_code": [
                    "int"
                ],
                "_json": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "_reason": [
                    "None",
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "mock_requester.MockRequester.post": {
            "name": "post",
            "location": 53,
            "return": [
                "DotNotation",
                "Dict",
                "Dict[int,dict]",
                "Optional[Dict]",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_requester.MockRequester.post.__json": {
            "name": "__json",
            "location": 54,
            "return": [
                "Dict[Text,]",
                "Iterator[str]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "musicify-master/server/test/__init__.py": {}
}
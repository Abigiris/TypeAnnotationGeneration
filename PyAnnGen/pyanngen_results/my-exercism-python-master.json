{
    "my-exercism-python-master/gigasecond/gigasecond.py": {
        "add_gigasecond": {
            "name": "add_gigasecond",
            "location": 2,
            "return": [
                "datetime.datetime",
                "Union[datetime.datetime, str]"
            ],
            "arguments": {
                "birth_date": [
                    "int",
                    "None",
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "my-exercism-python-master/gigasecond/gigasecond_test.py": {
        "GigasecondTest.test_date_only_specification_of_time": {
            "name": "test_date_only_specification_of_time",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_another_date_only_specification_of_time": {
            "name": "test_another_date_only_specification_of_time",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_one_more_date_only_specification_of_time": {
            "name": "test_one_more_date_only_specification_of_time",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_full_time_specified": {
            "name": "test_full_time_specified",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_full_time_with_day_roll_over": {
            "name": "test_full_time_with_day_roll_over",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GigasecondTest.test_yourself": {
            "name": "test_yourself",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/hello-world/hello_world.py": {
        "hello": {
            "name": "hello",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "my-exercism-python-master/hello-world/hello_world_test.py": {
        "HelloWorldTest.test_hello": {
            "name": "test_hello",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/leap/leap.py": {},
    "my-exercism-python-master/leap/leap_test.py": {
        "LeapTest.test_year_not_divisible_by_4": {
            "name": "test_year_not_divisible_by_4",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_4_not_divisible_by_100": {
            "name": "test_year_divisible_by_4_not_divisible_by_100",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_100_not_divisible_by_400": {
            "name": "test_year_divisible_by_100_not_divisible_by_400",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeapTest.test_year_divisible_by_400": {
            "name": "test_year_divisible_by_400",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/rational-numbers/rational_numbers.py": {
        "Rational.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numer": [
                    "int"
                ],
                "denom": [
                    "int"
                ]
            }
        },
        "Rational.__eq__": {
            "name": "__eq__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Rational.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rational.__add__": {
            "name": "__add__",
            "location": 26,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ],
                "other": [
                    "Rational"
                ]
            }
        },
        "Rational.__sub__": {
            "name": "__sub__",
            "location": 32,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ],
                "other": [
                    "Rational"
                ]
            }
        },
        "Rational.__mul__": {
            "name": "__mul__",
            "location": 38,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ],
                "other": [
                    "Rational"
                ]
            }
        },
        "Rational.__truediv__": {
            "name": "__truediv__",
            "location": 41,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ],
                "other": [
                    "Rational"
                ]
            }
        },
        "Rational.__abs__": {
            "name": "__abs__",
            "location": 44,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ]
            }
        },
        "Rational.__pow__": {
            "name": "__pow__",
            "location": 47,
            "return": [
                "Rational"
            ],
            "arguments": {
                "self": [
                    "_TRational"
                ],
                "power": [
                    "int"
                ]
            }
        },
        "Rational.__rpow__": {
            "name": "__rpow__",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "float"
                ]
            }
        }
    },
    "my-exercism-python-master/rational-numbers/rational_numbers_test.py": {
        "RationalNumbersTest.test_add_two_positive": {
            "name": "test_add_two_positive",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_positive_and_negative": {
            "name": "test_add_positive_and_negative",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_two_negative": {
            "name": "test_add_two_negative",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_add_opposite": {
            "name": "test_add_opposite",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_two_positive": {
            "name": "test_subtract_two_positive",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_positive_and_negative": {
            "name": "test_subtract_positive_and_negative",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_two_negative": {
            "name": "test_subtract_two_negative",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_subtract_from_self": {
            "name": "test_subtract_from_self",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_two_positive": {
            "name": "test_multiply_two_positive",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_negative_by_positive": {
            "name": "test_multiply_negative_by_positive",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_two_negative": {
            "name": "test_multiply_two_negative",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_reciprocal": {
            "name": "test_multiply_reciprocal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_by_one": {
            "name": "test_multiply_by_one",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_multiply_by_zero": {
            "name": "test_multiply_by_zero",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_two_positive": {
            "name": "test_divide_two_positive",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_positive_by_negative": {
            "name": "test_divide_positive_by_negative",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_two_negative": {
            "name": "test_divide_two_negative",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_divide_by_one": {
            "name": "test_divide_by_one",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_positive": {
            "name": "test_absolute_value_of_positive",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_negative": {
            "name": "test_absolute_value_of_negative",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_absolute_value_of_zero": {
            "name": "test_absolute_value_of_zero",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_positive_rational_to_a_positive_integer_power": {
            "name": "test_raise_a_positive_rational_to_a_positive_integer_power",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_negative_rational_to_a_positive_integer_power": {
            "name": "test_raise_a_negative_rational_to_a_positive_integer_power",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_zero_to_an_integer_power": {
            "name": "test_raise_zero_to_an_integer_power",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_one_to_an_integer_power": {
            "name": "test_raise_one_to_an_integer_power",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_positive_rational_to_the_power_of_zero": {
            "name": "test_raise_a_positive_rational_to_the_power_of_zero",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_negative_rational_to_the_power_of_zero": {
            "name": "test_raise_a_negative_rational_to_the_power_of_zero",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_positive_rational": {
            "name": "test_raise_a_real_number_to_a_positive_rational",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_negative_rational": {
            "name": "test_raise_a_real_number_to_a_negative_rational",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_raise_a_real_number_to_a_zero_rational": {
            "name": "test_raise_a_real_number_to_a_zero_rational",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_positive": {
            "name": "test_reduce_positive",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_negative": {
            "name": "test_reduce_negative",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_rational_with_negative_denominator": {
            "name": "test_reduce_rational_with_negative_denominator",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_zero": {
            "name": "test_reduce_zero",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_integer": {
            "name": "test_reduce_integer",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RationalNumbersTest.test_reduce_one": {
            "name": "test_reduce_one",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/reverse-string/reverse_string.py": {
        "reverse": {
            "name": "reverse",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "my-exercism-python-master/reverse-string/reverse_string_test.py": {
        "ReverseStringTest.test_empty_string": {
            "name": "test_empty_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_word": {
            "name": "test_a_word",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_capitalized_word": {
            "name": "test_a_capitalized_word",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_sentence_with_punctuation": {
            "name": "test_a_sentence_with_punctuation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseStringTest.test_a_palindrome": {
            "name": "test_a_palindrome",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/rna-transcription/rna_transcription.py": {
        "to_rna": {
            "name": "to_rna",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "dna_strand": [
                    "str",
                    "list[list[str]]",
                    "int",
                    "list[str]",
                    "List[List[str]]",
                    "list[]",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "my-exercism-python-master/rna-transcription/rna_transcription_test.py": {
        "RnaTranscriptionTest.test_transcribes_cytosine_to_guanine": {
            "name": "test_transcribes_cytosine_to_guanine",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_transcribes_guanine_to_cytosine": {
            "name": "test_transcribes_guanine_to_cytosine",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_transcribes_thymine_to_adenine": {
            "name": "test_transcribes_thymine_to_adenine",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_transcribes_adenine_to_uracil": {
            "name": "test_transcribes_adenine_to_uracil",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RnaTranscriptionTest.test_transcribes_all_occurrences": {
            "name": "test_transcribes_all_occurrences",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/space-age/space_age.py": {
        "SpaceAge.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "float"
                ]
            }
        },
        "SpaceAge._years_on": {
            "name": "_years_on",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "planet": [
                    "Planet"
                ]
            }
        },
        "SpaceAge.on_mercury": {
            "name": "on_mercury",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_venus": {
            "name": "on_venus",
            "location": 47,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_earth": {
            "name": "on_earth",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_mars": {
            "name": "on_mars",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_jupiter": {
            "name": "on_jupiter",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_saturn": {
            "name": "on_saturn",
            "location": 59,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_uranus": {
            "name": "on_uranus",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAge.on_neptune": {
            "name": "on_neptune",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/space-age/space_age_test.py": {
        "SpaceAgeTest.test_age_on_mercury": {
            "name": "test_age_on_mercury",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_venus": {
            "name": "test_age_on_venus",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_earth": {
            "name": "test_age_on_earth",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_mars": {
            "name": "test_age_on_mars",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_jupiter": {
            "name": "test_age_on_jupiter",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_saturn": {
            "name": "test_age_on_saturn",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_uranus": {
            "name": "test_age_on_uranus",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_on_neptune": {
            "name": "test_age_on_neptune",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceAgeTest.test_age_in_seconds": {
            "name": "test_age_in_seconds",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my-exercism-python-master/yacht/yacht.py": {
        "_same": {
            "name": "_same",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ],
                "val": [
                    "int"
                ]
            }
        },
        "_ones": {
            "name": "_ones",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_twos": {
            "name": "_twos",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_threes": {
            "name": "_threes",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_fours": {
            "name": "_fours",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_fives": {
            "name": "_fives",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_sixes": {
            "name": "_sixes",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_full_house": {
            "name": "_full_house",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_four_of_a_kind": {
            "name": "_four_of_a_kind",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_little_straight": {
            "name": "_little_straight",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_big_straight": {
            "name": "_big_straight",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_choice": {
            "name": "_choice",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "_yacht": {
            "name": "_yacht",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "Sequence[int]"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "dice": [
                    "List[int]"
                ],
                "category": [
                    "YachtCategory"
                ]
            }
        }
    },
    "my-exercism-python-master/yacht/yacht_test.py": {
        "YachtTest.test_yacht": {
            "name": "test_yacht",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_not_yacht": {
            "name": "test_not_yacht",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_ones": {
            "name": "test_ones",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_ones_out_of_order": {
            "name": "test_ones_out_of_order",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_no_ones": {
            "name": "test_no_ones",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_twos": {
            "name": "test_twos",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_fours": {
            "name": "test_fours",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_counted_as_threes": {
            "name": "test_yacht_counted_as_threes",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_of_threes_counted_as_fives": {
            "name": "test_yacht_of_threes_counted_as_fives",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_sixes": {
            "name": "test_sixes",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_two_small_three_big": {
            "name": "test_full_house_two_small_three_big",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_three_small_two_big": {
            "name": "test_full_house_three_small_two_big",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_two_pair_is_not_a_full_house": {
            "name": "test_two_pair_is_not_a_full_house",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_of_a_kind_is_not_a_full_house": {
            "name": "test_four_of_a_kind_is_not_a_full_house",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_is_not_a_full_house": {
            "name": "test_yacht_is_not_a_full_house",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_of_a_kind": {
            "name": "test_four_of_a_kind",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_can_be_scored_as_four_of_a_kind": {
            "name": "test_yacht_can_be_scored_as_four_of_a_kind",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_full_house_is_not_four_of_a_kind": {
            "name": "test_full_house_is_not_four_of_a_kind",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_little_straight": {
            "name": "test_little_straight",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_little_straight_as_big_straight": {
            "name": "test_little_straight_as_big_straight",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_four_in_order_but_not_a_little_straight": {
            "name": "test_four_in_order_but_not_a_little_straight",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_no_pairs_but_not_a_little_straight": {
            "name": "test_no_pairs_but_not_a_little_straight",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_min_1_max_5_but_not_a_little_straight": {
            "name": "test_min_1_max_5_but_not_a_little_straight",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_big_straight": {
            "name": "test_big_straight",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_big_straight_as_little_straight": {
            "name": "test_big_straight_as_little_straight",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_choice": {
            "name": "test_choice",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YachtTest.test_yacht_as_choice": {
            "name": "test_yacht_as_choice",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
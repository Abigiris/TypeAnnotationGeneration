{
    "myia-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "utils.parser.BinaryParser",
                    "parser.Parser"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "myia_repr_failure": {
            "name": "myia_repr_failure",
            "location": 93,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "list",
                    "dict",
                    "str"
                ],
                "items": [
                    "list",
                    "dict",
                    "str"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "str",
                    "dict",
                    "Optional[Dict[str, float]]",
                    "Union[int, slice]",
                    "Tuple[str, float]"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "float",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "pytest_configure._make_trace_listeners": {
            "name": "_make_trace_listeners",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "StringIOTTY.isatty": {
            "name": "isatty",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/debug/bupdb.py": {
        "BuDb.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuDb.set_trace": {
            "name": "set_trace",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BuDb.interaction": {
            "name": "interaction",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tb": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "myia-master/debug/butest.py": {
        "get_reader": {
            "name": "get_reader",
            "location": 25,
            "return": [
                "str",
                "bool",
                "None",
                "int",
                "Reader"
            ],
            "arguments": {}
        },
        "decompose": {
            "name": "decompose",
            "location": 33,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "item": [
                    "int",
                    "T",
                    "list[T]",
                    "List[T]"
                ]
            }
        },
        "idof": {
            "name": "idof",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "actual_outcome": {
            "name": "actual_outcome",
            "location": 49,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "report": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "Iterable[T]",
                    "typing.Callable[T, bool]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "prout": {
            "name": "prout",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "str",
                    "bool",
                    "dict"
                ],
                "bu": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "pytest_report_collectionfinish": {
            "name": "pytest_report_collectionfinish",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "startdir": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "items": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Dict]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 223,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "Callable",
                "list[]"
            ],
            "arguments": {
                "item": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T",
                    "os.DirEntry"
                ],
                "call": [
                    "str",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Container[int]",
                    "typing.Container",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "typing.Callable[T, bool]",
                    "T",
                    "Callable[[T], bool]",
                    "Callable"
                ]
            }
        },
        "pytest_report_teststatus": {
            "name": "pytest_report_teststatus",
            "location": 239,
            "return": [
                "Optional[Tuple[(str, str, str)]]"
            ],
            "arguments": {
                "report": [
                    "str",
                    "int",
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[], None]"
                ]
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "list[]",
                    "list",
                    "Iterable"
                ],
                "exitstatus": [
                    "str",
                    "list[]",
                    "list",
                    "Iterable"
                ]
            }
        },
        "ReportSheet.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list[]",
                    "str",
                    "list",
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]",
                    "Type[Exception]"
                ]
            }
        },
        "ReportSheet.__hrepr__": {
            "name": "__hrepr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "H": [
                    "float"
                ],
                "hrepr": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestResult.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestResult.__hrepr__": {
            "name": "__hrepr__",
            "location": 107,
            "return": [
                "List[int]",
                "float",
                "Iterable[str]",
                "dict[, ]",
                "Iterable[T]",
                "str",
                "int",
                "tuple[typing.Union[float,float,float]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "H": [
                    "int",
                    "str",
                    "float"
                ],
                "hrepr": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReportInteractor.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "item": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "bool",
                    "dict[str, str]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ReportInteractor.set_report": {
            "name": "set_report",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "bool",
                    "float"
                ]
            }
        },
        "ReportInteractor.show": {
            "name": "show",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "synchronous": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "ReportInteractor.show_report": {
            "name": "show_report",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pytest_sessionfinish.on_report": {
            "name": "on_report",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "message": [
                    "bool",
                    "dict",
                    "Optional[dict]"
                ]
            }
        }
    },
    "myia-master/debug/cfg.py": {},
    "myia-master/debug/cmd.py": {
        "parse": {
            "name": "parse",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "o": [
                    "Callable[[T], T]",
                    "T",
                    "float"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 21,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "o": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "show.ttip": {
            "name": "ttip",
            "location": 26,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "myia-master/debug/do_inject.py": {},
    "myia-master/debug/gprint.py": {
        "_has_error": {
            "name": "_has_error",
            "location": 41,
            "return": [],
            "arguments": {
                "dbg": []
            }
        },
        "_make_class_gen": {
            "name": "_make_class_gen",
            "location": 151,
            "return": [],
            "arguments": {
                "cgen": []
            }
        },
        "_cosmetic_node_return": {
            "name": "_cosmetic_node_return",
            "location": 605,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "g": [],
                "cl": []
            }
        },
        "_opt_fancy_make_tuple": {
            "name": "_opt_fancy_make_tuple",
            "location": 650,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_getitem": {
            "name": "_opt_fancy_getitem",
            "location": 658,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_resolve": {
            "name": "_opt_fancy_resolve",
            "location": 667,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_record_getitem": {
            "name": "_opt_fancy_record_getitem",
            "location": 677,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_unsafe_static_cast": {
            "name": "_opt_fancy_unsafe_static_cast",
            "location": 686,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_hastag": {
            "name": "_opt_fancy_hastag",
            "location": 694,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_casttag": {
            "name": "_opt_fancy_casttag",
            "location": 703,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_tagged": {
            "name": "_opt_fancy_tagged",
            "location": 712,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_array_map": {
            "name": "_opt_fancy_array_map",
            "location": 721,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_distribute": {
            "name": "_opt_fancy_distribute",
            "location": 733,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_scalar_to_array": {
            "name": "_opt_fancy_scalar_to_array",
            "location": 742,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_array_to_scalar": {
            "name": "_opt_fancy_array_to_scalar",
            "location": 750,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_transpose": {
            "name": "_opt_fancy_transpose",
            "location": 758,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_fancy_sum": {
            "name": "_opt_fancy_sum",
            "location": 769,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "_opt_distributed_constant": {
            "name": "_opt_distributed_constant",
            "location": 778,
            "return": [],
            "arguments": {
                "optimizer": [],
                "node": [],
                "equiv": []
            }
        },
        "cosmetic_transformer": {
            "name": "cosmetic_transformer",
            "location": 782,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "_clean": {
            "name": "_clean",
            "location": 1211,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "_toseq": {
            "name": "_toseq",
            "location": 1333,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "GraphPrinter.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "cyoptions": [],
                "tooltip_gen": [],
                "extra_style": []
            }
        },
        "GraphPrinter.id": {
            "name": "id",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "GraphPrinter.fresh_id": {
            "name": "fresh_id",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphPrinter._strip_cosmetic": {
            "name": "_strip_cosmetic",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "GraphPrinter.cynode": {
            "name": "cynode",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "label": [],
                "classes": [],
                "parent": [],
                "node": []
            }
        },
        "GraphPrinter.cyedge": {
            "name": "cyedge",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "src_id": [],
                "dest_id": [],
                "label": []
            }
        },
        "GraphPrinter.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "GraphPrinter.__hrepr__": {
            "name": "__hrepr__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "MyiaGraphPrinter.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "entry_points": []
            }
        },
        "MyiaGraphPrinter._import_graph": {
            "name": "_import_graph",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "MyiaGraphPrinter.name": {
            "name": "name",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MyiaGraphPrinter.label": {
            "name": "label",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "fn_label": []
            }
        },
        "MyiaGraphPrinter.const_fn": {
            "name": "const_fn",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MyiaGraphPrinter.add_graph": {
            "name": "add_graph",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "MyiaGraphPrinter.process_node_generic": {
            "name": "process_node_generic",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "g": [],
                "cl": []
            }
        },
        "MyiaGraphPrinter.class_gen": {
            "name": "class_gen",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "cl": []
            }
        },
        "MyiaGraphPrinter.process_node": {
            "name": "process_node",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MyiaGraphPrinter.process_edges": {
            "name": "process_edges",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "edges": []
            }
        },
        "MyiaGraphPrinter.process_graph": {
            "name": "process_graph",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "MyiaGraphPrinter.process": {
            "name": "process",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyiaGraphPrinter.follow": {
            "name": "follow",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MyiaNodesPrinter.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "MyiaNodesPrinter.name": {
            "name": "name",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MyiaNodesPrinter.label": {
            "name": "label",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "fn_label": []
            }
        },
        "MyiaNodesPrinter.const_fn": {
            "name": "const_fn",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MyiaNodesPrinter.add_graph": {
            "name": "add_graph",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "MyiaNodesPrinter.process_node_generic": {
            "name": "process_node_generic",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "g": [],
                "cl": []
            }
        },
        "MyiaNodesPrinter.class_gen": {
            "name": "class_gen",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "cl": []
            }
        },
        "MyiaNodesPrinter.process_node": {
            "name": "process_node",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MyiaNodesPrinter.process_edges": {
            "name": "process_edges",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "edges": []
            }
        },
        "MyiaNodesPrinter.process": {
            "name": "process",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphCosmeticPrimitive.__init__": {
            "name": "__init__",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "on_edge": []
            }
        },
        "GraphCosmeticPrimitive.graph_display": {
            "name": "graph_display",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "gprint": [],
                "node": [],
                "g": [],
                "cl": []
            }
        },
        "_Graph.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 814,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "_Graph.__hrepr__": {
            "name": "__hrepr__",
            "location": 818,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_ANFNode.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 854,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "_ANFNode.__hrepr__": {
            "name": "__hrepr__",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Apply.__hrepr__": {
            "name": "__hrepr__",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_ParentProxy.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 883,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "_ParentProxy.__hrepr__": {
            "name": "__hrepr__",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_NS.__hrepr__": {
            "name": "__hrepr__",
            "location": 900,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_OrderedSet.__hrepr__": {
            "name": "__hrepr__",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_SymbolicKeyInstance.__hrepr__": {
            "name": "__hrepr__",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_VirtualReference.__hrepr__": {
            "name": "__hrepr__",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Reference.__hrepr__": {
            "name": "__hrepr__",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Context.__hrepr__": {
            "name": "__hrepr__",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Location.__hrepr__": {
            "name": "__hrepr__",
            "location": 943,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_DebugInfo.__hrepr__": {
            "name": "__hrepr__",
            "location": 958,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_GraphManager.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 994,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "_GraphManager.__hrepr__": {
            "name": "__hrepr__",
            "location": 997,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_VMFrame.__hrepr__": {
            "name": "__hrepr__",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Closure.__hrepr__": {
            "name": "__hrepr__",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_PatternSubstitutionOptimization.__hrepr__": {
            "name": "__hrepr__",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_TypeMeta.__hrepr__": {
            "name": "__hrepr__",
            "location": 1070,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_TypeMeta.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 1074,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "_Type.__type_hrepr__": {
            "name": "__type_hrepr__",
            "location": 1081,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Bool.__type_hrepr__": {
            "name": "__type_hrepr__",
            "location": 1088,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Int.__type_hrepr__": {
            "name": "__type_hrepr__",
            "location": 1095,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_UInt.__type_hrepr__": {
            "name": "__type_hrepr__",
            "location": 1105,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Float.__type_hrepr__": {
            "name": "__type_hrepr__",
            "location": 1115,
            "return": [],
            "arguments": {
                "cls": [],
                "H": [],
                "hrepr": []
            }
        },
        "_Var.__hrepr__": {
            "name": "__hrepr__",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_FilterVar.__hrepr__": {
            "name": "__hrepr__",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "Subgraph.__init__": {
            "name": "__init__",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subgraph.__hrepr_resources__": {
            "name": "__hrepr_resources__",
            "location": 1162,
            "return": [],
            "arguments": {
                "cls": [],
                "H": []
            }
        },
        "Subgraph.__hrepr__": {
            "name": "__hrepr__",
            "location": 1166,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_PendingTentative.__hrepr__": {
            "name": "__hrepr__",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractValue.__hrepr__": {
            "name": "__hrepr__",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractScalar.__hrepr__": {
            "name": "__hrepr__",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractFunction.__hrepr__": {
            "name": "__hrepr__",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractJTagged.__hrepr__": {
            "name": "__hrepr__",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractType.__hrepr__": {
            "name": "__hrepr__",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractHandle.__hrepr__": {
            "name": "__hrepr__",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractKeywordArgument.__hrepr__": {
            "name": "__hrepr__",
            "location": 1313,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractTuple.__hrepr__": {
            "name": "__hrepr__",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractUnion.__hrepr__": {
            "name": "__hrepr__",
            "location": 1349,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractTaggedUnion.__hrepr__": {
            "name": "__hrepr__",
            "location": 1357,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractArray.__hrepr__": {
            "name": "__hrepr__",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractClassBase.__hrepr__": {
            "name": "__hrepr__",
            "location": 1392,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_GraphFunction.__hrepr__": {
            "name": "__hrepr__",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_PartialApplication.__hrepr__": {
            "name": "__hrepr__",
            "location": 1418,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_TypedPrimitive.__hrepr__": {
            "name": "__hrepr__",
            "location": 1426,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_MetaGraphFunction.__hrepr__": {
            "name": "__hrepr__",
            "location": 1436,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_PrimitiveFunction.__hrepr__": {
            "name": "__hrepr__",
            "location": 1446,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_TransformedFunction.__hrepr__": {
            "name": "__hrepr__",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_AbstractFunctionUnique.__hrepr__": {
            "name": "__hrepr__",
            "location": 1464,
            "return": [],
            "arguments": {
                "self": [],
                "H": [],
                "hrepr": []
            }
        },
        "_DebugInfo.__hrepr__.mkdict": {
            "name": "mkdict",
            "location": 961,
            "return": [],
            "arguments": {
                "info": []
            }
        },
        "_GraphManager.__hrepr__.lbl": {
            "name": "lbl",
            "location": 1002,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "myia-master/debug/inject.py": {
        "ibuche": {
            "name": "ibuche",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_lwlog": {
            "name": "_lwlog",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "bucheg": {
            "name": "bucheg",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "buchegx": {
            "name": "buchegx",
            "location": 47,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "graph": [
                    "bool",
                    "str"
                ]
            }
        },
        "inject": {
            "name": "inject",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "inject_suite": {
            "name": "inject_suite",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "bucheg.ttip": {
            "name": "ttip",
            "location": 33,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "myia-master/debug/run.py": {
        "imp": {
            "name": "imp",
            "location": 48,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ref": [
                    "int",
                    "str"
                ]
            }
        },
        "force_sequence": {
            "name": "force_sequence",
            "location": 52,
            "return": [
                "list[]",
                "str",
                "List[Dict]",
                "Union[List, Tuple]",
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "x": [
                    "Iterable[Any]",
                    "List[str]",
                    "list",
                    "int",
                    "Tuple[List[int], List[int]]"
                ],
                "always_wrap": [
                    "bool",
                    "list",
                    "int",
                    "float"
                ]
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]",
                "Mapping[str, str]",
                "int"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "bool",
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "default_modules": [
                    "list[]",
                    "int",
                    "List[Type[Exception]]",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "always_wrap": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "split": [
                    "bool",
                    "str",
                    "Dict[str, List[str]]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "process_options": {
            "name": "process_options",
            "location": 114,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "Dict[str, Any]",
                    "FlexioFlow.Options.Options",
                    "Match",
                    "type"
                ],
                "rest_target": [
                    "int",
                    "float",
                    "Options",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "resolve_options": {
            "name": "resolve_options",
            "location": 141,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_run": {
            "name": "_run",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ],
                "options": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, Union[str, bool]]",
                    "Match",
                    "bool",
                    "Mapping",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "interactive": [
                    "None",
                    "Optional[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[T]",
                    "Optional[Dict[str, Any]]",
                    "Optional[nativecards.lib.dicts.models.DictionaryEntry]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "resolve.fsq": {
            "name": "fsq",
            "location": 60,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "T"
                ]
            }
        },
        "resolve.do_all": {
            "name": "do_all",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "rs": [
                    "Match",
                    "str",
                    "int",
                    "dict"
                ],
                "split": [
                    "bool",
                    "Match",
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "myia-master/debug/steps.py": {
        "_adjust": {
            "name": "_adjust",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/debug/tools.py": {
        "Not.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Options.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "bool",
                    "float",
                    "Set[str]",
                    "set[str]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Options.pipeline": {
            "name": "pipeline",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Callable",
                    "str",
                    "\"Counter\"",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "None",
                    "List['PydanticModelField']",
                    "dict[str, typing.Any]",
                    "dict",
                    "list['PydanticModelField']",
                    "dict[, ]"
                ]
            }
        },
        "Options.run": {
            "name": "run",
            "location": 51,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "dict",
                    "float",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "float",
                    "None",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Options.argspec": {
            "name": "argspec",
            "location": 57,
            "return": [
                "bool",
                "list[AbstractValue]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.__getitem__": {
            "name": "__getitem__",
            "location": 63,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "None",
                    "typing.AbstractSet",
                    "Optional[int]",
                    "AbstractSet[Any]",
                    "AbstractSet[T]",
                    "KT"
                ]
            }
        }
    },
    "myia-master/debug/trace.py": {
        "_color": {
            "name": "_color",
            "location": 87,
            "return": [
                "str",
                "bool",
                "None",
                "list[str]",
                "Exception",
                "int",
                "Hashable",
                "typing.Text",
                "BaseException",
                "Iterable[str]"
            ],
            "arguments": {
                "color": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_pgraph": {
            "name": "_pgraph",
            "location": 98,
            "return": [
                "typing.Callable[, ]",
                "int",
                "bool",
                "Optional[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "_display": {
            "name": "_display",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "curpath": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "results": [
                    "list",
                    "Dict[str, bool]",
                    "List[List[Any]]",
                    "List[Tuple[str, decimal.Decimal]]",
                    "bool"
                ],
                "word": [
                    "int",
                    "None",
                    "List[datetime.time]",
                    "Optional[List[str]]",
                    "list[datetime.time]",
                    "Union[int, float]",
                    "list[str]",
                    "float"
                ],
                "brk": [
                    "bool",
                    "List[str]",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        },
        "_brk": {
            "name": "_brk",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "w": [
                    "str",
                    "int"
                ]
            }
        },
        "_resolve_path": {
            "name": "_resolve_path",
            "location": 152,
            "return": [
                "int",
                "float",
                "str",
                "list[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Optional[str]"
                ],
                "variant": [
                    "typing.Text",
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 181,
            "return": [
                "int",
                "bool",
                "Set[int]",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "opts": {
            "name": "opts",
            "location": 202,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "compare": {
            "name": "compare",
            "location": 207,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "stat": {
            "name": "stat",
            "location": 284,
            "return": [
                "StatAccumulator",
                "str",
                "bool",
                "Union[dict, list]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "IO[Any]",
                    "Callable[[], str]",
                    "typing.IO",
                    "typing.Callable[[], str]"
                ]
            }
        },
        "_rule_optname": {
            "name": "_rule_optname",
            "location": 307,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "opt": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_rule_optparam": {
            "name": "_rule_optparam",
            "location": 313,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "node": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "_rule_countnodes": {
            "name": "_rule_countnodes",
            "location": 322,
            "return": [
                "typing.Text",
                "int",
                "Sequence[Hashable]",
                "[[]]",
                "List[int]",
                "Optional[int]",
                "Set[int]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "None",
                    "float",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "manager": [
                    "bytes",
                    "int",
                    "None",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "_rule_countgraphs": {
            "name": "_rule_countgraphs",
            "location": 332,
            "return": [
                "Dict[str, Dict[str, int]]",
                "typing.Text",
                "List[int]",
                "int"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "None",
                    "float",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "manager": [
                    "bytes",
                    "int",
                    "None",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "_rule_time": {
            "name": "_rule_time",
            "location": 342,
            "return": [
                "Time",
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "_rule_reltime": {
            "name": "_rule_reltime",
            "location": 346,
            "return": [
                "Time",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "Time.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "T",
                    "bool",
                    "None",
                    "float",
                    "Union[type, Tuple[type, ...]]",
                    "typing.Type",
                    "Optional",
                    "tuple[typing.Union[typing.Type,...]]",
                    "typing.Optional[]"
                ]
            }
        },
        "Time.compare": {
            "name": "compare",
            "location": 63,
            "return": [
                "Time",
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "Time.statistics": {
            "name": "statistics",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "tdata": [
                    "str",
                    "Callable",
                    "T"
                ]
            }
        },
        "Time.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_pgraph._p": {
            "name": "_p",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "Getters.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "kwfields": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Mapping[str, Mapping[str, Any]]",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Tuple[int, int, str]",
                    "Set[bytes]"
                ]
            }
        },
        "Getters._get_by_name": {
            "name": "_get_by_name",
            "location": 120,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Getters.__call__": {
            "name": "__call__",
            "location": 126,
            "return": [
                "TracerContextManager"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "log._p": {
            "name": "_p",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "compare._compare": {
            "name": "_compare",
            "location": 211,
            "return": [
                "dict[, ]",
                "typing.Text",
                "Set[str]",
                "Dict[str, Set[str]]",
                "Dict[int, Dict[int, Any]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "old": [
                    "Dict[str, Set[str]]",
                    "Type['DataclassT']",
                    "Type[serious.utils.Dataclass]",
                    "List[Dict[str, Any]]"
                ],
                "new": [
                    "T",
                    "List[int]",
                    "str"
                ]
            }
        },
        "compare._enter": {
            "name": "_enter",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_curpath": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "compare._exit": {
            "name": "_exit",
            "location": 234,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "_curpath": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "StatAccumulator.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "fields": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "kwfields": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "StatAccumulator.install": {
            "name": "install",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "StatAccumulator._do": {
            "name": "_do",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatAccumulator.post": {
            "name": "post",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Getters._get_by_name._get": {
            "name": "_get",
            "location": 121,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "myia-master/debug/typ.py": {
        "Point.abs": {
            "name": "abs",
            "location": 28,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__add__": {
            "name": "__add__",
            "location": 31,
            "return": [
                "Point",
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        }
    },
    "myia-master/debug/__main__.py": {},
    "myia-master/docs/conf.py": {},
    "myia-master/examples/lstm.py": {
        "param": {
            "name": "param",
            "location": 36,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "R": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 41,
            "return": [
                "list[tuple[list[]]]",
                "str",
                "float",
                "List[Tuple[bytes, int]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "input_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "target_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "sequence_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ]
            }
        },
        "lstm_parameters": {
            "name": "lstm_parameters",
            "location": 59,
            "return": [
                "int",
                "\"DGEList\""
            ],
            "arguments": {}
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 102,
            "return": [
                "int",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "cost": {
            "name": "cost",
            "location": 186,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "numpy.ndarray"
                ],
                "x": [
                    "numpy.ndarray"
                ],
                "target": [
                    "int",
                    "numpy.array",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 195,
            "return": [
                "tuple[typing.Union[int,float]]",
                "numpy.ndarray",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "model": [
                    "int",
                    "float",
                    "bool"
                ],
                "lr": [
                    "bool",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ],
                "x": [
                    "List[Dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ],
                "y": [
                    "List[Dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "run_helper": {
            "name": "run_helper",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "n": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "numpy.random.RandomState",
                    "numpy.ndarray"
                ],
                "layer_sizes": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "numpy.random.RandomState",
                    "numpy.ndarray"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Linear.apply": {
            "name": "apply",
            "location": 114,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Tanh.apply": {
            "name": "apply",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LSTMLayer.step": {
            "name": "step",
            "location": 150,
            "return": [
                "tuple[]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x_t": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "Union[int, float]"
                ],
                "h_tm1": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "Union[int, float]"
                ],
                "c_tm1": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ]
            }
        },
        "LSTMLayer.apply": {
            "name": "apply",
            "location": 163,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "Sequential.apply": {
            "name": "apply",
            "location": 179,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/examples/mlp.py": {
        "param": {
            "name": "param",
            "location": 55,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "R": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 60,
            "return": [
                "list[tuple[]]",
                "float",
                "Dict[str, Any]",
                "int",
                "dict",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "input_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "target_size": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "mlp_parameters": {
            "name": "mlp_parameters",
            "location": 73,
            "return": [
                "list[tuple[]]",
                "int",
                "\"DGEList\""
            ],
            "arguments": {}
        },
        "cost": {
            "name": "cost",
            "location": 127,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "numpy.ndarray"
                ],
                "x": [
                    "numpy.ndarray"
                ],
                "target": [
                    "int",
                    "numpy.array",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 135,
            "return": [
                "tuple[int]",
                "numpy.ndarray",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "numpy.ndarray"
                ],
                "x": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Set[str]",
                    "set[str]"
                ],
                "y": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "Set[str]",
                    "set[str]"
                ],
                "lr": [
                    "str",
                    "int",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ]
            }
        },
        "run_helper": {
            "name": "run_helper",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "n": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "layer_sizes": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Linear.apply": {
            "name": "apply",
            "location": 100,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Tanh.apply": {
            "name": "apply",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Sequential.apply": {
            "name": "apply",
            "location": 120,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/examples/policy_gradient.py": {
        "param": {
            "name": "param",
            "location": 38,
            "return": [
                "int",
                "torch.FloatTensor",
                "str"
            ],
            "arguments": {
                "R": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 43,
            "return": [
                "list[tuple[]]",
                "float",
                "Dict[str, Any]",
                "int",
                "dict",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "input_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "target_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ]
            }
        },
        "mlp_parameters": {
            "name": "mlp_parameters",
            "location": 56,
            "return": [
                "list[tuple[]]",
                "int",
                "\"DGEList\""
            ],
            "arguments": {}
        },
        "step_eval": {
            "name": "step_eval",
            "location": 138,
            "return": [
                "str",
                "list[]",
                "int",
                "Optional[str]",
                "list[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "cost": {
            "name": "cost",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "int",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ],
                "x": [
                    "int",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ],
                "y": [
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "adv": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "step_update": {
            "name": "step_update",
            "location": 156,
            "return": [
                "tuple[typing.Union[set[],int]]",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "numpy.ndarray",
                    "None",
                    "Union[tensorflow.Tensor, numpy.ndarray]",
                    "Optional[int]"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "adv": [
                    "float"
                ]
            }
        },
        "discount_rewards": {
            "name": "discount_rewards",
            "location": 162,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "r": [
                    "float",
                    "bytearray",
                    "int"
                ]
            }
        },
        "run_episode": {
            "name": "run_episode",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "net": [
                    "numpy.ndarray"
                ],
                "e": [
                    "list[list[str]]",
                    "int",
                    "List[List[str]]",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "env": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Linear.apply": {
            "name": "apply",
            "location": 74,
            "return": [
                "int",
                "bytes",
                "torch.BoolTensor",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Tanh.apply": {
            "name": "apply",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Softmax.apply": {
            "name": "apply",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Sequential.apply": {
            "name": "apply",
            "location": 106,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/examples/rnn.py": {
        "param": {
            "name": "param",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "R": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 40,
            "return": [
                "list[tuple[list[]]]",
                "str",
                "float",
                "List[Tuple[bytes, int]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "input_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "target_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "sequence_size": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]"
                ]
            }
        },
        "rnn_parameters": {
            "name": "rnn_parameters",
            "location": 58,
            "return": [
                "list[tuple[typing.Union[int,str,dict[str, int],tuple[typing.Union[typing.Any,typing.Any]],dict[str, str]]]]",
                "int",
                "\"DGEList\""
            ],
            "arguments": {}
        },
        "cost": {
            "name": "cost",
            "location": 141,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "numpy.ndarray"
                ],
                "x": [
                    "numpy.ndarray"
                ],
                "target": [
                    "int",
                    "numpy.array",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 150,
            "return": [
                "tuple[typing.Union[int,float]]",
                "numpy.ndarray",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "model": [
                    "int",
                    "float",
                    "bool"
                ],
                "lr": [
                    "bool",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ],
                "x": [
                    "List[Dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ],
                "y": [
                    "List[Dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "run_helper": {
            "name": "run_helper",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "n": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "float"
                ],
                "layer_sizes": [
                    "int",
                    "float"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Linear.apply": {
            "name": "apply",
            "location": 92,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Tanh.apply": {
            "name": "apply",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RNNLayer.step": {
            "name": "step",
            "location": 115,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "Tuple[Tuple[int, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "tuple[int]",
                    "numpy.ndarray",
                    "Tuple[int]"
                ],
                "h_tm1": [
                    "tuple[int]",
                    "numpy.ndarray",
                    "Tuple[int]"
                ]
            }
        },
        "RNNLayer.apply": {
            "name": "apply",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "Sequential.apply": {
            "name": "apply",
            "location": 134,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/examples/vae.py": {
        "param": {
            "name": "param",
            "location": 57,
            "return": [
                "int",
                "torch.FloatTensor",
                "str"
            ],
            "arguments": {
                "R": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "generate_data": {
            "name": "generate_data",
            "location": 62,
            "return": [
                "list[tuple[]]",
                "float",
                "Dict[str, Any]",
                "int",
                "dict",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "input_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ],
                "target_size": [
                    "int",
                    "float",
                    "dict[str, torch.LongTensor]",
                    "Dict[str, torch.LongTensor]",
                    "bool"
                ]
            }
        },
        "mlp_parameters": {
            "name": "mlp_parameters",
            "location": 75,
            "return": [
                "list[tuple[]]",
                "int",
                "\"DGEList\""
            ],
            "arguments": {}
        },
        "loss_function": {
            "name": "loss_function",
            "location": 178,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "recon_x": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "numpy.array"
                ],
                "x": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "numpy.array"
                ],
                "mu": [
                    "float",
                    "List[List]",
                    "list[list[]]"
                ],
                "logvar": [
                    "float",
                    "List[List]"
                ]
            }
        },
        "cost": {
            "name": "cost",
            "location": 192,
            "return": [
                "tuple[]",
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "data": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]"
                ],
                "rstate": [
                    "str",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 199,
            "return": [
                "tuple[typing.Union[str,list[]]]",
                "numpy.ndarray",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "model": [],
                "data": [],
                "lr": [
                    "str"
                ],
                "rstate": []
            }
        },
        "step_eval": {
            "name": "step_eval",
            "location": 213,
            "return": [
                "Optional[float]",
                "bool",
                "IO[bytes]",
                "str",
                "dict"
            ],
            "arguments": {
                "model": [
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "data": [
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "rstate": [
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "step_init_seed": {
            "name": "step_init_seed",
            "location": 224,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "Linear.apply": {
            "name": "apply",
            "location": 102,
            "return": [
                "int",
                "bytes",
                "torch.BoolTensor",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Tanh.apply": {
            "name": "apply",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Sequential.apply": {
            "name": "apply",
            "location": 122,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "VAE.encode": {
            "name": "encode",
            "location": 139,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "VAE.reparameterize": {
            "name": "reparameterize",
            "location": 143,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "logvar": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rstate": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VAE.decode": {
            "name": "decode",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VAE.forward": {
            "name": "forward",
            "location": 152,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes"
                ],
                "rstate": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        }
    },
    "myia-master/myia/api.py": {
        "myia": {
            "name": "myia",
            "location": 143,
            "return": [
                "MyiaFunction",
                "Optional[int]",
                "Optional[List[int]]",
                "List[int]"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "to_device": {
            "name": "to_device",
            "location": 197,
            "return": [
                "BackendValue",
                "int",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "value": [
                    "List[int]",
                    "int",
                    "list[int]"
                ],
                "backend": [
                    "Set[int]",
                    "dict",
                    "Optional[float]",
                    "Callable"
                ],
                "backend_options": [
                    "int",
                    "None",
                    "str",
                    "typing.Mapping",
                    "bool",
                    "Optional[int]",
                    "Mapping[str, Any]",
                    "mode.utils.times.Seconds"
                ]
            }
        },
        "MyiaFunction.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Optional[str]",
                    "str",
                    "List[Type]",
                    "None",
                    "list[typing.Type]"
                ],
                "specialize_values": [
                    "list[]",
                    "List[str]",
                    "bool",
                    "cmk.utils.type_defs.Item",
                    "Iterable[Tuple[Any, Any]]"
                ],
                "return_backend": [
                    "bool",
                    "Mapping[str, Any]",
                    "Optional[tuple]",
                    "str"
                ],
                "backend": [
                    "bool",
                    "None",
                    "raiden.utils.BlockIdentifier"
                ],
                "backend_options": [
                    "Mapping[str, Any]",
                    "None",
                    "str",
                    "Optional[tuple]",
                    "typing.Mapping",
                    "tuple[]"
                ],
                "alias_tracker": [
                    "int",
                    "None",
                    "bool"
                ],
                "use_universe": [
                    "bool",
                    "raiden.utils.BlockIdentifier"
                ],
                "tracer": [
                    "bool",
                    "Dict[int, int]"
                ],
                "pipeline": [
                    "Mapping[str, Any]",
                    "Optional[tuple]",
                    "str"
                ]
            }
        },
        "MyiaFunction.specialize": {
            "name": "specialize",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MyiaFunction.compile": {
            "name": "compile",
            "location": 115,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MyiaFunction.__call__": {
            "name": "__call__",
            "location": 120,
            "return": [
                "Optional[Dict[str, str]]",
                "vimiv.utils.customtypes.FuncT",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaFunction.to_device": {
            "name": "to_device",
            "location": 129,
            "return": [
                "cmk.utils.type_defs.UserId",
                "str",
                "Callable",
                "Iterable[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "list[int]",
                    "List[int]",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "myia-master/myia/classes.py": {
        "Cons.from_list": {
            "name": "from_list",
            "location": 37,
            "return": [
                "Union[(Cons, Empty)]"
            ],
            "arguments": {
                "elems": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "Cons._to_list": {
            "name": "_to_list",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__bool__": {
            "name": "__bool__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "T",
                    "List[str]"
                ]
            }
        },
        "Cons.__iter__": {
            "name": "__iter__",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__myia_iter__": {
            "name": "__myia_iter__",
            "location": 69,
            "return": [
                "Cons",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cons.__myia_next__": {
            "name": "__myia_next__",
            "location": 77,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__iter__": {
            "name": "__iter__",
            "location": 85,
            "return": [
                "tupleiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__bool__": {
            "name": "__bool__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__getitem__": {
            "name": "__getitem__",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "typing.Hashable",
                    "slice",
                    "Hashable"
                ]
            }
        },
        "Empty.__myia_iter__": {
            "name": "__myia_iter__",
            "location": 101,
            "return": [
                "Empty",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__myia_next__": {
            "name": "__myia_next__",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArithmeticData.__add__": {
            "name": "__add__",
            "location": 123,
            "return": [
                "str",
                "dict",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "set",
                    "set[]",
                    "int",
                    "Optional[float]",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "ArithmeticData.__sub__": {
            "name": "__sub__",
            "location": 127,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__mul__": {
            "name": "__mul__",
            "location": 131,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__truediv__": {
            "name": "__truediv__",
            "location": 135,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__floordiv__": {
            "name": "__floordiv__",
            "location": 139,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__mod__": {
            "name": "__mod__",
            "location": 143,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__pow__": {
            "name": "__pow__",
            "location": 147,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__pos__": {
            "name": "__pos__",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArithmeticData.__neg__": {
            "name": "__neg__",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArithmeticData.__radd__": {
            "name": "__radd__",
            "location": 159,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "set",
                    "set[]",
                    "int",
                    "Optional[float]",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "ArithmeticData.__rsub__": {
            "name": "__rsub__",
            "location": 163,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__rmul__": {
            "name": "__rmul__",
            "location": 167,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 171,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 175,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__rmod__": {
            "name": "__rmod__",
            "location": 179,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArithmeticData.__rpow__": {
            "name": "__rpow__",
            "location": 183,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "set[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "myia-master/myia/grad.py": {
        "_grad": {
            "name": "_grad",
            "location": 464,
            "return": [
                "Sequence[int]",
                "bytes",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "str",
                "int",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Jimpl": {
            "name": "Jimpl",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "other": [
                    "str",
                    "networkx.Graph",
                    "int"
                ],
                "resources": [
                    "bool",
                    "int",
                    "Callable",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "Exception",
                    "Optional[Dict[str, Any]]"
                ],
                "node": [
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Exception",
                    "typing.Type",
                    "Callable",
                    "dict[str, typing.Any]",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "None",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_make_grad_transform": {
            "name": "_make_grad_transform",
            "location": 522,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prim": [
                    "Optional[str]",
                    "bytes",
                    "str",
                    "bool",
                    "None"
                ],
                "fn": [
                    "int",
                    "Collection[int]",
                    "typing.Collection",
                    "Dict[int, Tuple[int, int]]",
                    "dict[int, tuple[typing.Union[int,int]]]"
                ],
                "flags": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "wrap_grad_transform": {
            "name": "wrap_grad_transform",
            "location": 583,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prim": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "bprop_to_grad_transform": {
            "name": "bprop_to_grad_transform",
            "location": 600,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "prim": [
                    "typing.Type",
                    "int",
                    "type",
                    "typing.Callable[, ]",
                    "None",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any"
                ]
            }
        },
        "GradRemapper.get": {
            "name": "get",
            "location": 76,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int"
                ],
                "node": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "SlaveRemapper.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "master": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SlaveRemapper.master": {
            "name": "master",
            "location": 119,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlaveRemapper.gen_parameter": {
            "name": "gen_parameter",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "ng": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "p": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "SlaveRemapper.gen_constant": {
            "name": "gen_constant",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ng": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ct": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SlaveRemapper.generate": {
            "name": "generate",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlaveRemapper.finalize": {
            "name": "finalize",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FPropAppRemapper.link_apply": {
            "name": "link_apply",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "FPropRemapper.gen_constant": {
            "name": "gen_constant",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ct": [
                    "Union[None, int, str]",
                    "int",
                    "None",
                    "Callable[..., Awaitable]",
                    "str",
                    "Callable",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "FPropRemapper.gen_constant_graph": {
            "name": "gen_constant_graph",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ct": [
                    "bool",
                    "str"
                ]
            }
        },
        "FPropRemapper.gen_fv": {
            "name": "gen_fv",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "fv": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FPropRemapper.gen_fv_graph": {
            "name": "gen_fv_graph",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "fvg": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FPropRemapper.link_apply": {
            "name": "link_apply",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "T"
                ]
            }
        },
        "FPropRemapper.finalize_graph": {
            "name": "finalize_graph",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "Dict[str, Any]",
                    "bytearray",
                    "float"
                ],
                "ng": [
                    "bytearray",
                    "trezor.utils.Writer"
                ]
            }
        },
        "FPropRemapper.get_jinv": {
            "name": "get_jinv",
            "location": 221,
            "return": [
                "str",
                "float",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BPropRemapper.link_apply": {
            "name": "link_apply",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BPropAppRemapper.link_apply": {
            "name": "link_apply",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "float"
                ]
            }
        },
        "SensRemapper.gen_parameter": {
            "name": "gen_parameter",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "ng": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "p": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "SensRemapper.gen_apply": {
            "name": "gen_apply",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "float",
                    "int",
                    "networkx.Graph"
                ],
                "ng": [
                    "int",
                    "Optional[utils.CWLOutputType]",
                    "bool"
                ],
                "node": []
            }
        },
        "SensRemapper.gen_child": {
            "name": "gen_child",
            "location": 319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "Callable",
                    "str"
                ],
                "child": [
                    "Union[None, int, str]",
                    "int",
                    "None",
                    "Callable[..., Awaitable]",
                    "str",
                    "Callable",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "SensRemapper.gen_fv_extended": {
            "name": "gen_fv_extended",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "ng": [
                    "int",
                    "Callable",
                    "list"
                ],
                "node": []
            }
        },
        "SensRemapper.gen_fv_graph": {
            "name": "gen_fv_graph",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ng": [
                    "int",
                    "Callable",
                    "str"
                ],
                "g2": [
                    "Union[None, int, str]",
                    "int",
                    "None",
                    "Callable[..., Awaitable]",
                    "str",
                    "Callable",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "SensRemapper.link_apply": {
            "name": "link_apply",
            "location": 338,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "typing.Iterator",
                    "bool",
                    "Iterator[str]",
                    "list[str]",
                    "Iterable[Any]",
                    "List[str]",
                    "set[str]",
                    "Set[str]"
                ]
            }
        },
        "SensRemapper.grad_fprop": {
            "name": "grad_fprop",
            "location": 432,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensRemapper.finalize_graph": {
            "name": "finalize_graph",
            "location": 435,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "float",
                    "str"
                ],
                "ng": []
            }
        },
        "wrap_grad_transform.deco": {
            "name": "deco",
            "location": 587,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "bprop_to_grad_transform.deco": {
            "name": "deco",
            "location": 603,
            "return": [
                "trezor.utils.Writer",
                "Dict[str, int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "fn": [
                    "Iterable[T]",
                    "str",
                    "bool"
                ]
            }
        },
        "SensRemapper.link_apply.mkadd": {
            "name": "mkadd",
            "location": 424,
            "return": [
                "tuple[]",
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "myia-master/myia/graph_utils.py": {
        "always_include": {
            "name": "always_include",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "dfs": {
            "name": "dfs",
            "location": 22,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "root": [
                    "T"
                ],
                "succ": [
                    "Callable[([T], Iterable[T])]"
                ],
                "include": [
                    "Callable[([T], str)]"
                ]
            }
        },
        "toposort": {
            "name": "toposort",
            "location": 62,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "root": [
                    "T"
                ],
                "succ": [
                    "Callable[([T], Iterable[T])]"
                ],
                "include": [
                    "Callable[([T], str)]"
                ],
                "allow_cycles": [
                    "bool",
                    "list",
                    "Callable[[], None]",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        }
    },
    "myia-master/myia/hypermap.py": {
        "HyperMap.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperMap.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 80,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HyperMap._name": {
            "name": "_name",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "info": []
            }
        },
        "HyperMap._is_nonleaf": {
            "name": "_is_nonleaf",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "HyperMap._is_leaf": {
            "name": "_is_leaf",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "HyperMap._make_union_helper": {
            "name": "_make_union_helper",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "options": [],
                "g": [],
                "fnarg": [],
                "argmap": []
            }
        },
        "HyperMap._make": {
            "name": "_make",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "g": [],
                "fnarg": [],
                "argmap": []
            }
        },
        "HyperMap.make_leaf": {
            "name": "make_leaf",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "g": [],
                "fnarg": [],
                "argmap": []
            }
        },
        "HyperMap._generate_helper": {
            "name": "_generate_helper",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "g": [],
                "fnarg": [],
                "argmap": []
            }
        },
        "HyperMap.generate_graph": {
            "name": "generate_graph",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "all_args": []
            }
        },
        "HyperMap.__call__": {
            "name": "__call__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperMap.__call__._is_nonleaf": {
            "name": "_is_nonleaf",
            "location": 318,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "HyperMap.__call__._reccall": {
            "name": "_reccall",
            "location": 342,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "HyperMap.__call__._leafcall": {
            "name": "_leafcall",
            "location": 348,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "myia-master/myia/info.py": {
        "current_info": {
            "name": "current_info",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StackVar.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, str]",
                    "None",
                    "Union[str, int]",
                    "dict[str, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "StackVar.push": {
            "name": "push",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "str",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Union[Dict, List]",
                    "list[]"
                ]
            }
        },
        "StackVar.pop": {
            "name": "pop",
            "location": 22,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackVar.top": {
            "name": "top",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugInfo.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "None",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "DebugInherit.__enter__": {
            "name": "__enter__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugInherit.__exit__": {
            "name": "__exit__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "NamedDebugInfo.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "NamedDebugInfo.obj": {
            "name": "obj",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedDebugInfo.id": {
            "name": "id",
            "location": 129,
            "return": [
                "str",
                "int",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedDebugInfo.debug_name": {
            "name": "debug_name",
            "location": 137,
            "return": [
                "str",
                "typing.Text",
                "types.TracebackType",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedDebugInfo.find": {
            "name": "find",
            "location": 147,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "str",
                    "int",
                    "float"
                ],
                "skip": [
                    "set[]",
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "About.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "DebugInfo"
                ],
                "relation": [
                    "str"
                ]
            }
        },
        "About.__enter__": {
            "name": "__enter__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "About.__exit__": {
            "name": "__exit__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "myia-master/myia/lib.py": {},
    "myia-master/myia/monomorphize.py": {
        "_chk": {
            "name": "_chk",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Iterable[T]"
                ]
            }
        },
        "_fix_type": {
            "name": "_fix_type",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "type_fixer": {
            "name": "type_fixer",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "finder": [
                    "Dict[str, Any]"
                ],
                "monomorphizer": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_const": {
            "name": "_const",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "v": [
                    "Sequence[float]",
                    "float",
                    "int"
                ],
                "t": [
                    "float",
                    "Tuple[float, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_build": {
            "name": "_build",
            "location": 217,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bool"
                ]
            }
        },
        "_normalize_context": {
            "name": "_normalize_context",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "trezor.wire.Context",
                    "discord.excommands.Context"
                ]
            }
        },
        "Unspecializable.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "problem": [
                    "AsyncContextManager[None]",
                    "bool",
                    "int"
                ],
                "data": [
                    "str",
                    "cmk.utils.type_defs.AgentRawData",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]",
                    "bytes",
                    "list"
                ]
            }
        },
        "_fix_type._jtag": {
            "name": "_jtag",
            "location": 133,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "x": []
            }
        },
        "TypeFinder.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypeFinder.analyze_function": {
            "name": "analyze_function",
            "location": 268,
            "return": [
                "str",
                "Optional[BaseException]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "fn": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "argvals": [
                    "bool",
                    "Callable[[str], str]"
                ]
            }
        },
        "TypeFinder._find_choices": {
            "name": "_find_choices",
            "location": 303,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "inf": []
            }
        },
        "TypeFinder._find_generalized": {
            "name": "_find_generalized",
            "location": 313,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "inf": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypeFinder._find_unique_argvals": {
            "name": "_find_unique_argvals",
            "location": 332,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "inf": [
                    "bool",
                    "int",
                    "Callable",
                    "List[str]",
                    "float"
                ],
                "argvals": [
                    "T",
                    "List[\"Block\"]",
                    "networkx.Graph"
                ]
            }
        },
        "TypeFinder._find_unique_argvals_helper": {
            "name": "_find_unique_argvals_helper",
            "location": 373,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "bool",
                    "str",
                    "raiden.utils.Any"
                ],
                "inf": [
                    "str"
                ],
                "argvals": [
                    "vimiv.utils.trie.Trie",
                    "Optional[Union[str, Any]]"
                ],
                "try_generalize": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Monomorphizer.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int"
                ],
                "engine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Monomorphizer.run": {
            "name": "run",
            "location": 426,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "str",
                    "Optional[BaseException]",
                    "Dict[str, Callable]"
                ]
            }
        },
        "Monomorphizer._special_array_map": {
            "name": "_special_array_map",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "todo": [
                    "int",
                    "str"
                ],
                "ref": [
                    "int",
                    "str"
                ],
                "irefs": [
                    "int",
                    "list",
                    "str"
                ],
                "argvals": [
                    "int",
                    "str",
                    "Collection[int]"
                ]
            }
        },
        "Monomorphizer._special_array_reduce": {
            "name": "_special_array_reduce",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "todo": [
                    "int",
                    "Sequence[Any]",
                    "Sequence['cirq.Qid']"
                ],
                "ref": [
                    "int",
                    "Sequence[Any]",
                    "Sequence['cirq.Qid']"
                ],
                "irefs": [
                    "int",
                    "Sequence[Any]",
                    "Sequence['cirq.Qid']"
                ],
                "argvals": [
                    "str",
                    "list"
                ]
            }
        },
        "Monomorphizer.collect": {
            "name": "collect",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_context": [
                    "raiden.tests.fuzz.utils.Scrambling",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ]
            }
        },
        "Monomorphizer.order_tasks": {
            "name": "order_tasks",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Monomorphizer.create_graphs": {
            "name": "create_graphs",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Monomorphizer.monomorphize": {
            "name": "monomorphize",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Monomorphizer.fill_placeholders": {
            "name": "fill_placeholders",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Monomorphizer.fix_types": {
            "name": "fix_types",
            "location": 701,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_MonoRemapper.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "inlines": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "manager": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "relation": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "graph_relation": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "clone_constants": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "engine": [
                    "int",
                    "bool",
                    "float"
                ],
                "graph_repl": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "fv_function": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_MonoRemapper.generate": {
            "name": "generate",
            "location": 765,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_MonoRemapper.gen_constant_graph": {
            "name": "gen_constant_graph",
            "location": 769,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ng": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ct": [
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "_MonoRemapper.gen_fv_direct": {
            "name": "gen_fv_direct",
            "location": 776,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "Callable",
                    "str",
                    "int"
                ],
                "ng": [
                    "Callable",
                    "str",
                    "int"
                ],
                "fv": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Monomorphizer.order_tasks._process_ctx": {
            "name": "_process_ctx",
            "location": 590,
            "return": [],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Context",
                    "discord.excommands.Context"
                ],
                "orig_ctx": [
                    "str",
                    "discord.excommands.Context",
                    "trezor.wire.Context"
                ]
            }
        },
        "Monomorphizer.monomorphize.fv_function": {
            "name": "fv_function",
            "location": 641,
            "return": [
                "str"
            ],
            "arguments": {
                "fv": [
                    "discord.excommands.Context",
                    "dict"
                ],
                "ctx": [
                    "discord.excommands.Context",
                    "dict"
                ]
            }
        }
    },
    "myia-master/myia/parser.py": {
        "_fresh": {
            "name": "_fresh",
            "location": 125,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 133,
            "return": [],
            "arguments": {
                "func": [],
                "use_universe": [
                    "bool"
                ]
            }
        },
        "MyiaSyntaxError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "loc": []
            }
        },
        "MyiaDisconnectedCodeWarning.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "loc": []
            }
        },
        "FindPossiblePhi.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "FindPossiblePhi.visit_loop": {
            "name": "visit_loop",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindPossiblePhi.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindPossiblePhi.visit_If": {
            "name": "visit_If",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindPossiblePhi.visit_For": {
            "name": "visit_For",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindPossiblePhi.visit_While": {
            "name": "visit_While",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindPossiblePhi.visit_Name": {
            "name": "visit_Name",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [],
                "recflags": [],
                "use_universe": []
            }
        },
        "Parser._eval_ast_node": {
            "name": "_eval_ast_node",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Parser.new_block": {
            "name": "new_block",
            "location": 267,
            "return": [
                "Block"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.make_location": {
            "name": "make_location",
            "location": 271,
            "return": [
                "None",
                "Location"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Parser.make_condition_blocks": {
            "name": "make_condition_blocks",
            "location": 294,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.process_FunctionDef": {
            "name": "process_FunctionDef",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser._create_function": {
            "name": "_create_function",
            "location": 362,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser._finalize_function": {
            "name": "_finalize_function",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "function_block": []
            }
        },
        "Parser.process_node": {
            "name": "process_node",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": [],
                "used": [
                    "bool"
                ]
            }
        },
        "Parser.process_BinOp": {
            "name": "process_BinOp",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_UnaryOp": {
            "name": "process_UnaryOp",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Compare": {
            "name": "process_Compare",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_BoolOp": {
            "name": "process_BoolOp",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_IfExp": {
            "name": "process_IfExp",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Lambda": {
            "name": "process_Lambda",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Name": {
            "name": "process_Name",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Num": {
            "name": "process_Num",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Str": {
            "name": "process_Str",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Call": {
            "name": "process_Call",
            "location": 596,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_NameConstant": {
            "name": "process_NameConstant",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Tuple": {
            "name": "process_Tuple",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_List": {
            "name": "process_List",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Dict": {
            "name": "process_Dict",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Subscript": {
            "name": "process_Subscript",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Index": {
            "name": "process_Index",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Slice": {
            "name": "process_Slice",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_ExtSlice": {
            "name": "process_ExtSlice",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Attribute": {
            "name": "process_Attribute",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_statements": {
            "name": "process_statements",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "starting_block": [],
                "nodes": []
            }
        },
        "Parser.process_Return": {
            "name": "process_Return",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Raise": {
            "name": "process_Raise",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Assert": {
            "name": "process_Assert",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Pass": {
            "name": "process_Pass",
            "location": 760,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser._assign": {
            "name": "_assign",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [],
                "targ": [],
                "anf_node": []
            }
        },
        "Parser.process_Assign": {
            "name": "process_Assign",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_AnnAssign": {
            "name": "process_AnnAssign",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_Expr": {
            "name": "process_Expr",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_If": {
            "name": "process_If",
            "location": 819,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_While": {
            "name": "process_While",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Parser.process_For": {
            "name": "process_For",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "node": []
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "use_universe": [
                    "bool"
                ],
                "type": [
                    "None"
                ]
            }
        },
        "Block.set_phi_arguments": {
            "name": "set_phi_arguments",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phi": []
            }
        },
        "Block.mature": {
            "name": "mature",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block._resolve_ast_type": {
            "name": "_resolve_ast_type",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "Block.apply": {
            "name": "apply",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Block.add_parameter": {
            "name": "add_parameter",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "None"
                ]
            }
        },
        "Block.make_resolve": {
            "name": "make_resolve",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": [],
                "module_name": [],
                "symbol_name": []
            }
        },
        "Block.make_switch": {
            "name": "make_switch",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "true_block": [],
                "false_block": [],
                "op": [
                    "typing.Text"
                ]
            }
        },
        "Block.operation": {
            "name": "operation",
            "location": 1082,
            "return": [],
            "arguments": {
                "self": [],
                "symbol_name": []
            }
        },
        "Block.read": {
            "name": "read",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "varnum": [],
                "resolve_globals": [
                    "bool"
                ],
                "lock": [
                    "bool"
                ]
            }
        },
        "Block.write": {
            "name": "write",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "varnum": [],
                "node": [],
                "track": [
                    "bool"
                ]
            }
        },
        "Block.jump": {
            "name": "jump",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Block.cond": {
            "name": "cond",
            "location": 1193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [],
                "true": [],
                "false": []
            }
        },
        "Block.raises": {
            "name": "raises",
            "location": 1210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Block.returns": {
            "name": "returns",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Parser._create_function._finalize": {
            "name": "_finalize",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "Parser.process_BoolOp.fold": {
            "name": "fold",
            "location": 516,
            "return": [],
            "arguments": {
                "block": [],
                "values": [],
                "mode": []
            }
        },
        "Block.read._resolve": {
            "name": "_resolve",
            "location": 1119,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/public_api.py": {
        "_chunks_to_split_sections": {
            "name": "_chunks_to_split_sections",
            "location": 38,
            "return": [
                "numpy.dtype",
                "bool",
                "str",
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a_dim_shp": [
                    "bool",
                    "int",
                    "float"
                ],
                "chunks": [
                    "int",
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "_dim_explicit": {
            "name": "_dim_explicit",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a_shp": [
                    "str",
                    "int"
                ],
                "dim": [
                    "T",
                    "str"
                ]
            }
        },
        "_dim_explicit_unsqueeze": {
            "name": "_dim_explicit_unsqueeze",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a_shp": [
                    "str",
                    "int"
                ],
                "dim": [
                    "str",
                    "int"
                ]
            }
        },
        "_dim_tuple_explicit": {
            "name": "_dim_tuple_explicit",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a_shp": [
                    "Sequence[int]",
                    "List[int]",
                    "int"
                ],
                "dim": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_build_fwd_tuple": {
            "name": "_build_fwd_tuple",
            "location": 88,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "shp": [
                    "str",
                    "Sequence[T]",
                    "Optional[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ensure_u64": {
            "name": "_ensure_u64",
            "location": 96,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float",
                    "Sequence[int]",
                    "Sequence[float]",
                    "int"
                ]
            }
        },
        "_pair": {
            "name": "_pair",
            "location": 103,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "list",
                    "tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "_prepare_dims_to_norm": {
            "name": "_prepare_dims_to_norm",
            "location": 112,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "simulation.core.common.Resources",
                "str"
            ],
            "arguments": {
                "shape": [
                    "List[float]",
                    "List[List[int]]",
                    "tuple",
                    "Tuple[int]",
                    "str",
                    "float"
                ],
                "dim": [
                    "Tuple[int, int]",
                    "numpy.array",
                    "int",
                    "list"
                ]
            }
        },
        "prod": {
            "name": "prod",
            "location": 139,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_shp_explicit": {
            "name": "_shp_explicit",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a_shp": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "shp": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "_shp_squeeze": {
            "name": "_shp_squeeze",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "orig_shp": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dim": [
                    "Optional[float]"
                ],
                "keepdim": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_shp_unsqueeze": {
            "name": "_shp_unsqueeze",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "orig_shp": [
                    "int",
                    "bool"
                ],
                "dim": [
                    "List[int]",
                    "List[str]",
                    "numpy.ndarray",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "_total_elements": {
            "name": "_total_elements",
            "location": 226,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "shp": [
                    "raiden.utils.Nonce",
                    "Tuple[bytes, bytes]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "_var_denom": {
            "name": "_var_denom",
            "location": 234,
            "return": [
                "core_lib.core.models.Venue",
                "str"
            ],
            "arguments": {
                "shp": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "Match",
                    "float"
                ],
                "dim": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "unbiased": [
                    "bool"
                ]
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 251,
            "return": [
                "trezor.utils.Writer",
                "str",
                "core.Message"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "List[int]",
                    "Callable[[None], bool]",
                    "Optional[numpy.ndarray]",
                    "str"
                ],
                "keepdim": [
                    "float",
                    "int"
                ]
            }
        },
        "binary_cross_entropy": {
            "name": "binary_cross_entropy",
            "location": 268,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "input": [
                    "int",
                    "str"
                ],
                "target": [
                    "int",
                    "str"
                ],
                "reduction": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 284,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "numpy.ndarray",
                    "Dict[str, Tuple[int, int]]",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "chunk": {
            "name": "chunk",
            "location": 292,
            "return": [
                "List[int]",
                "List[List[int]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "chunks": [
                    "str",
                    "int"
                ],
                "dim": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 299,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "Pattern"
                ],
                "weight": [
                    "str",
                    "int",
                    "Pattern"
                ],
                "bias": [
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "stride": [
                    "str",
                    "bool",
                    "int"
                ],
                "padding": [
                    "str",
                    "bool",
                    "int"
                ],
                "dilation": [
                    "str",
                    "bool",
                    "int"
                ],
                "groups": [
                    "float",
                    "Union[int, float]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "conv_transpose2d": {
            "name": "conv_transpose2d",
            "location": 320,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "str",
                    "int"
                ],
                "weight": [
                    "bool",
                    "str",
                    "int"
                ],
                "bias": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "torch.utils.data.Dataset"
                ],
                "stride": [
                    "bool",
                    "str",
                    "int"
                ],
                "padding": [
                    "bool",
                    "str",
                    "int"
                ],
                "output_padding": [
                    "bool",
                    "str",
                    "int"
                ],
                "groups": [
                    "bool",
                    "str",
                    "int"
                ],
                "dilation": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "cross_entropy": {
            "name": "cross_entropy",
            "location": 340,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "input": [
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[str, float, int, float]]",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "target": [
                    "float",
                    "Iterable",
                    "bool",
                    "List[int]"
                ],
                "reduction": [
                    "float",
                    "Iterable",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "embedding": {
            "name": "embedding",
            "location": 348,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "int",
                    "Callable",
                    "str"
                ],
                "weight": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "gather": {
            "name": "gather",
            "location": 354,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "index": [
                    "int",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "linear": {
            "name": "linear",
            "location": 360,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "input": [
                    "Optional[numpy.ndarray]",
                    "Optional[\"Outcome\"]",
                    "dict"
                ],
                "weight": [
                    "tuple",
                    "numpy.ndarray"
                ],
                "bias": [
                    "Optional[numpy.ndarray]",
                    "dict",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "lstm_cell": {
            "name": "lstm_cell",
            "location": 385,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "hidden": [
                    "float",
                    "int",
                    "bool"
                ],
                "w_ih": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "w_hh": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "b_ih": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "b_hh": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "log_softmax": {
            "name": "log_softmax",
            "location": 408,
            "return": [
                "float",
                "str",
                "T",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "numpy.matrix",
                    "int"
                ],
                "dtype": [
                    "Optional[Tuple[float, float]]",
                    "tuple",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "item": {
            "name": "item",
            "location": 424,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "numpy.array",
                    "int",
                    "Dict[str, Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "_max": {
            "name": "_max",
            "location": 431,
            "return": [
                "trezor.utils.Writer",
                "str",
                "core.Message"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "List[int]",
                    "Callable[[None], bool]",
                    "Optional[numpy.ndarray]",
                    "str"
                ],
                "keepdim": [
                    "FrozenSet[int]",
                    "bool"
                ]
            }
        },
        "max_pool2d": {
            "name": "max_pool2d",
            "location": 458,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "input": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "kernel_size": [
                    "int"
                ],
                "stride": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "dilation": [
                    "int"
                ],
                "ceil_mode": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "return_indices": [
                    "bool"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 480,
            "return": [
                "str",
                "numpy.ndarray",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "Optional[Tuple[float, float]]",
                    "utils.Node",
                    "int"
                ],
                "keepdim": [
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "mse_loss": {
            "name": "mse_loss",
            "location": 502,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "target": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "reduction": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nll_loss": {
            "name": "nll_loss",
            "location": 520,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "logs": [
                    "Any",
                    "int",
                    "Exception",
                    "str"
                ],
                "targets": [
                    "Any",
                    "int",
                    "Exception",
                    "str"
                ],
                "reduction": [
                    "Optional[dict]",
                    "dict",
                    "int"
                ]
            }
        },
        "norm": {
            "name": "norm",
            "location": 544,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "inp": [
                    "Tuple[int, int]",
                    "str",
                    "bytearray"
                ],
                "p": [
                    "Type",
                    "click.core.Context",
                    "Optional[numpy.ndarray]"
                ],
                "dim": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 611,
            "return": [
                "trezor.utils.Writer",
                "numpy.ndarray",
                "utils.Node",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "reshape": {
            "name": "reshape",
            "location": 617,
            "return": [
                "utils.Node",
                "str",
                "numpy.ndarray",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "scatter": {
            "name": "scatter",
            "location": 626,
            "return": [
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "T"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "src": [
                    "pandas.core.series.Series",
                    "bool",
                    "Optional[Callable[[Any, Any], Any]]"
                ]
            }
        },
        "scatter_add": {
            "name": "scatter_add",
            "location": 638,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "index": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "src": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 644,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "size": {
            "name": "size",
            "location": 650,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "Optional[utils.diskstaSection]"
                ]
            }
        },
        "smooth_l1_loss": {
            "name": "smooth_l1_loss",
            "location": 659,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "input": [
                    "Optional",
                    "int"
                ],
                "target": [
                    "Optional",
                    "int"
                ],
                "reduction": [
                    "Optional",
                    "int"
                ]
            }
        },
        "softmax": {
            "name": "softmax",
            "location": 680,
            "return": [
                "utils.Node",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "numpy.matrix",
                    "bool"
                ],
                "dtype": [
                    "Optional[Tuple[float, float]]",
                    "tuple",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 696,
            "return": [
                "List[Callable]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "split_size_or_sections": [
                    "str",
                    "int"
                ],
                "dim": [
                    "str",
                    "int"
                ]
            }
        },
        "squeeze": {
            "name": "squeeze",
            "location": 702,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "stack": {
            "name": "stack",
            "location": 710,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "numpy.ndarray",
                    "list",
                    "numpy.array",
                    "Iterable[Any]",
                    "core.components.Position"
                ]
            }
        },
        "std": {
            "name": "std",
            "location": 721,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "str",
                    "float"
                ],
                "unbiased": [
                    "int",
                    "str",
                    "float"
                ],
                "keepdim": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_sum": {
            "name": "_sum",
            "location": 730,
            "return": [
                "str",
                "numpy.ndarray",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dim": [],
                "keepdim": [
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "tensor_dim": {
            "name": "tensor_dim",
            "location": 751,
            "return": [
                "utils.Node",
                "str"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "_transpose_dims": {
            "name": "_transpose_dims",
            "location": 757,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a_dims": [
                    "Callable[[T], T]",
                    "int"
                ],
                "dim0": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Callable[[Any, Any], bool]"
                ],
                "dim1": [
                    "int",
                    "bytes",
                    "list"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 770,
            "return": [
                "utils.Node",
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "a": [
                    "list",
                    "int",
                    "List[int]"
                ],
                "dim0": [
                    "list",
                    "int",
                    "List[int]"
                ],
                "dim1": [
                    "list",
                    "int",
                    "List[int]"
                ]
            }
        },
        "uniform": {
            "name": "uniform",
            "location": 777,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "_min": [
                    "int",
                    "List[Tuple[int, int]]",
                    "str",
                    "bool",
                    "raiden.utils.FeeAmount"
                ],
                "_max": [
                    "int",
                    "Iterable",
                    "str",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "unsqueeze": {
            "name": "unsqueeze",
            "location": 790,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "var": {
            "name": "var",
            "location": 799,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "float",
                    "list"
                ],
                "unbiased": [
                    "str",
                    "int",
                    "float"
                ],
                "keepdim": [
                    "List['cirq.Qid']",
                    "numpy.matrix",
                    "raiden.utils.Any"
                ]
            }
        },
        "view_as": {
            "name": "view_as",
            "location": 821,
            "return": [
                "int",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "smooth_l1_loss.pw": {
            "name": "pw",
            "location": 664,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "_z_abs": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "myia-master/myia/simplify_types.py": {
        "type_to_tag": {
            "name": "type_to_tag",
            "location": 51,
            "return": [
                "str",
                "List[str]",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "set",
                    "Type"
                ]
            }
        },
        "str_to_tag": {
            "name": "str_to_tag",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "_reabs": {
            "name": "_reabs",
            "location": 113,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float",
                    "Hashable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "simplify_types": {
            "name": "simplify_types",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "Container"
                ],
                "manager": [
                    "Iterable[str]"
                ]
            }
        },
        "to_canonical": {
            "name": "to_canonical",
            "location": 427,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "List[str]",
                    "Callable"
                ],
                "orig_t": [
                    "bool",
                    "List[str]",
                    "Callable"
                ],
                "coerce": [
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "from_canonical": {
            "name": "from_canonical",
            "location": 495,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Iterable[T]"
                ],
                "orig_t": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Iterable[T]"
                ]
            }
        },
        "simplify_types._mkct": {
            "name": "_mkct",
            "location": 152,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "SupportsFloat",
                    "Type"
                ]
            }
        },
        "simplify_types._record_makeindex": {
            "name": "_record_makeindex",
            "location": 157,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "dt": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "attr": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "simplify_types._dict_makeindex": {
            "name": "_dict_makeindex",
            "location": 162,
            "return": [
                "bool",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "dt": [
                    "Mapping[str, Any]",
                    "dict"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "Optional[\"TrackingData\"]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "myia-master/myia/validate.py": {
        "validate_abstract": {
            "name": "validate_abstract",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "root": [
                    "list[]",
                    "str",
                    "wgraph.parsing.types.Ref",
                    "list"
                ]
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "AsyncContextManager[None]",
                    "int"
                ]
            }
        },
        "NodeValidator.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "list[str]",
                    "float",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "errors": [
                    "Exception",
                    "None",
                    "bool",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "NodeValidator._test": {
            "name": "_test",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "deque",
                    "typing.Deque"
                ]
            }
        },
        "NodeValidator.__call__": {
            "name": "__call__",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "int",
                    "List[Tuple[str, bool, Any]]",
                    "list[tuple[typing.Union[str,bool,typing.Any]]]",
                    "Container",
                    "typing.Container"
                ]
            }
        },
        "NodeValidator.test_node": {
            "name": "test_node",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "AbstractValidator.test_node": {
            "name": "test_node",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Deque",
                    "int",
                    "deque",
                    "str",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "OperatorValidator.test_node": {
            "name": "test_node",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes"
                ]
            }
        },
        "CallValidator.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallValidator.test_node": {
            "name": "test_node",
            "location": 157,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "List[Union[str, \"SqlFile\"]]",
                    "int"
                ]
            }
        },
        "MultiValidator.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "validators": [
                    "str",
                    "int"
                ],
                "resources": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MultiValidator.test_node": {
            "name": "test_node",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NodeValidator.__call__.stringify": {
            "name": "stringify",
            "location": 120,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "err": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "myia-master/myia/vm.py": {
        "VMFrame.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "list[str]",
                    "List[str]",
                    "tuple[str]",
                    "networkx.Graph",
                    "Tuple[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "values": [
                    "Mapping[ir.ANFNode, Any]",
                    "bool",
                    "typing.Mapping",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Union[bytes, str]",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "VMFrame.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ]
            }
        },
        "Closure.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "List[Tuple[int, float]]",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "str"
                ],
                "values": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]",
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "Closure.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": [],
                "vm": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Partial.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "VM.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "convert": [
                    "int",
                    "str"
                ],
                "manager": [
                    "int",
                    "str"
                ],
                "py_implementations": [
                    "int",
                    "str"
                ],
                "implementations": [
                    "int",
                    "str"
                ]
            }
        },
        "VM._compute_fvs": {
            "name": "_compute_fvs",
            "location": 121,
            "return": [
                "set[]",
                "int",
                "dict[, ]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str"
                ]
            }
        },
        "VM._acquire_graph": {
            "name": "_acquire_graph",
            "location": 130,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "IO",
                    "typing.IO",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "VM._export_sequence": {
            "name": "_export_sequence",
            "location": 137,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Graph",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "str",
                    "float",
                    "list[str]",
                    "int",
                    "[[]]",
                    "List[str]"
                ]
            }
        },
        "VM._export_Primitive": {
            "name": "_export_Primitive",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VM._export_Closure": {
            "name": "_export_Closure",
            "location": 143,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "clos": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VM._export_Graph": {
            "name": "_export_Graph",
            "location": 147,
            "return": [
                "Closure",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "AsyncGenerator",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "str",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "VM._export_object": {
            "name": "_export_object",
            "location": 153,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VM.export": {
            "name": "export",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "dict[V, P]",
                    "Dict[Var, Parameter]",
                    "T"
                ]
            }
        },
        "VM.evaluate": {
            "name": "evaluate",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Iterable",
                    "typing.Iterable[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "_args": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "VM._succ_vm": {
            "name": "_succ_vm",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VM._vmimpl": {
            "name": "_vmimpl",
            "location": 226,
            "return": [
                "typing.Callable[, ]",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "str"
                ]
            }
        },
        "VM.call": {
            "name": "call",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Exception",
                    "bool"
                ],
                "args": []
            }
        },
        "VM._call": {
            "name": "_call",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "float"
                ],
                "args": []
            }
        },
        "VM._make_closure": {
            "name": "_make_closure",
            "location": 272,
            "return": [
                "Closure",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "frame": [
                    "typing.Iterable[typing.Any]",
                    "int",
                    "Iterable[Any]",
                    "str",
                    "float",
                    "Iterable",
                    "List[int]"
                ]
            }
        },
        "VM._dispatch_call": {
            "name": "_dispatch_call",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "frame": [],
                "fn": [],
                "args": []
            }
        },
        "VM._handle_node": {
            "name": "_handle_node",
            "location": 297,
            "return": [
                "None",
                "int",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ],
                "frame": []
            }
        },
        "VM._Call.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VM._Return.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "VM._succ_vm.succ": {
            "name": "succ",
            "location": 210,
            "return": [
                "typing.Iterable[ir.ANFNode]",
                "typing.Generator[]"
            ],
            "arguments": {
                "node": [
                    "ir.ANFNode"
                ]
            }
        }
    },
    "myia-master/myia/xtype.py": {
        "as_frozen": {
            "name": "as_frozen",
            "location": 19,
            "return": [
                "int",
                "tuple[]",
                "Dict[str, Dict[str, int]]",
                "dict[str, set[str]]"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "np_dtype_to_type": {
            "name": "np_dtype_to_type",
            "location": 246,
            "return": [
                "str",
                "hackathon.utils.utils.DataMessage",
                "Match",
                "numpy.array"
            ],
            "arguments": {
                "dtype": []
            }
        },
        "type_to_np_dtype": {
            "name": "type_to_np_dtype",
            "location": 256,
            "return": [
                "str",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "type": [
                    "str",
                    "int",
                    "raiden.utils.Type"
                ]
            }
        },
        "pytype_to_myiatype": {
            "name": "pytype_to_myiatype",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {
                "pytype": [
                    "type",
                    "typing.Type"
                ]
            }
        },
        "TypeMeta.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "None",
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "typing.Type",
                    "Type",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "dict": [
                    "str"
                ]
            }
        },
        "TypeMeta.parameterize": {
            "name": "parameterize",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TypeMeta.make_subtype": {
            "name": "make_subtype",
            "location": 52,
            "return": [
                "typing.Type",
                "bytes",
                "dict",
                "int",
                "Mapping",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[T]",
                    "list[T]",
                    "type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TypeMeta.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Callable[..., Awaitable]",
                    "Sequence[str]"
                ],
                "args": []
            }
        },
        "TypeMeta.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "typing.Type",
                    "Type['AbstractIntegrationConversation']",
                    "typing.Sequence[typing.Any]",
                    "KT",
                    "type",
                    "Sequence[Any]",
                    "Type[T]"
                ]
            }
        },
        "Type.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.parameterize": {
            "name": "parameterize",
            "location": 127,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "utils.CWLObjectType"
                ],
                "bits": [
                    "str"
                ]
            }
        },
        "NDArray.to_numpy": {
            "name": "to_numpy",
            "location": 183,
            "return": [
                "float",
                "str",
                "int",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "NDArray.from_numpy": {
            "name": "from_numpy",
            "location": 190,
            "return": [
                "int",
                "dict[str, typing.Any]",
                "str",
                "Set[Optional[str]]",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "myia-master/myia/__init__.py": {},
    "myia-master/myia/abstract/aliasing.py": {
        "_explore": {
            "name": "_explore",
            "location": 36,
            "return": [
                "typing.Generator[tuple[typing.Union[str,dict[, ],list[],dict[str, str],str,str,list[str],typing.AnyStr,typing.Callable[str, str],dict[str, str]]]]",
                "Optional[str]",
                "typing.Generator[]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ],
                "vseq": [
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "str",
                    "list",
                    "dict[str, str]",
                    "utils.MinMaxStats",
                    "Dict[str, str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "AnyStr",
                    "typing.AnyStr",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "ndarray_aliasable": {
            "name": "ndarray_aliasable",
            "location": 48,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "bool"
                ],
                "vseq": [
                    "str",
                    "list[int]",
                    "dict[, ]",
                    "int",
                    "List[int]",
                    "allennlp.data.vocabulary.Vocabulary",
                    "dict"
                ],
                "path": [
                    "str",
                    "float",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]",
                    "Iterable[Tuple[str, Any]]",
                    "list",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "find_aliases": {
            "name": "find_aliases",
            "location": 61,
            "return": [
                "Tuple[(Dict[(int, int)], Dict[(int, Any)])]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "set",
                    "set[]"
                ],
                "aliasable": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "generate_getters": {
            "name": "generate_getters",
            "location": 135,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,None,bool,dict[str, typing.Any],dict[, ],typing.Callable[, ]]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "get": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "setter_from_getter": {
            "name": "setter_from_getter",
            "location": 139,
            "return": [
                "str",
                "List[str]",
                "list[]",
                "int",
                "dict",
                "typing.Type",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "getter": [
                    "typing.Sequence[]",
                    "Sequence",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "numpy.array",
                    "Tuple[int, int]",
                    "Iterable",
                    "int"
                ],
                "value": [
                    "str",
                    "list[]",
                    "int",
                    "list",
                    "typing.Type",
                    "Type",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "myia-master/myia/abstract/amerge.py": {
        "_is_tentative": {
            "name": "_is_tentative",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "numpy.ndarray",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]"
                ]
            }
        },
        "tentative": {
            "name": "tentative",
            "location": 77,
            "return": [
                "int",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "nobottom": {
            "name": "nobottom",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "amerge": {
            "name": "amerge",
            "location": 452,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "int",
                    "str",
                    "Mapping",
                    "MutableMapping"
                ],
                "x2": [
                    "int",
                    "str",
                    "Mapping",
                    "MutableMapping"
                ],
                "forced": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "List[List[str]]"
                ],
                "bp": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "annotation_merge": {
            "name": "annotation_merge",
            "location": 487,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "float",
                    "numpy.ndarray",
                    "Union[int, float]"
                ],
                "x2": [
                    "float"
                ],
                "forced": [
                    "numpy.ndarray",
                    "int"
                ],
                "bp": [
                    "int",
                    "str"
                ]
            }
        },
        "bind": {
            "name": "bind",
            "location": 503,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "Callable[[], None]",
                    "int"
                ],
                "committed": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ],
                "resolved": [
                    "dict",
                    "Dict[str, Set[str]]"
                ],
                "pending": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Dict[str, Any]",
                    "Union[tuple, list]"
                ]
            }
        },
        "split_type": {
            "name": "split_type",
            "location": 647,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "t": [
                    "_T0"
                ],
                "model": [
                    "Type",
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "hastype_helper": {
            "name": "hastype_helper",
            "location": 667,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[str, Dict]"
                ],
                "model": [
                    "str",
                    "int"
                ]
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 687,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "str",
                    "int",
                    "Set[int]"
                ],
                "abstract": [
                    "str",
                    "int",
                    "Set[int]"
                ]
            }
        },
        "amerge.helper": {
            "name": "helper",
            "location": 146,
            "return": [
                "IO[str]",
                "Iterable[str]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {}
        },
        "bind.amergeall": {
            "name": "amergeall",
            "location": 515,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "bind.resolve": {
            "name": "resolve",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "fut": [
                    "Dict[str, float]",
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "bind.premature_resolve": {
            "name": "premature_resolve",
            "location": 552,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bind.priority": {
            "name": "priority",
            "location": 563,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {}
        },
        "amerge.helper.chk": {
            "name": "chk",
            "location": 178,
            "return": [
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "int",
                    "Sequence[int]",
                    "float",
                    "Callable[[T], T]"
                ]
            }
        }
    },
    "myia-master/myia/abstract/data.py": {
        "listof": {
            "name": "listof",
            "location": 811,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "u64tup_typecheck": {
            "name": "u64tup_typecheck",
            "location": 823,
            "return": [],
            "arguments": {
                "engine": [],
                "tup": []
            }
        },
        "u64pair_typecheck": {
            "name": "u64pair_typecheck",
            "location": 831,
            "return": [],
            "arguments": {
                "engine": [],
                "shp": []
            }
        },
        "i64tup_typecheck": {
            "name": "i64tup_typecheck",
            "location": 842,
            "return": [],
            "arguments": {
                "engine": [],
                "tup": []
            }
        },
        "_force_sequence": {
            "name": "_force_sequence",
            "location": 855,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "format_abstract": {
            "name": "format_abstract",
            "location": 862,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "pretty_type": {
            "name": "pretty_type",
            "location": 869,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "pretty_call": {
            "name": "pretty_call",
            "location": 874,
            "return": [],
            "arguments": {
                "ctx": [],
                "title": [],
                "args": [],
                "sep": []
            }
        },
        "pretty_struct": {
            "name": "pretty_struct",
            "location": 880,
            "return": [],
            "arguments": {
                "ctx": [],
                "title": [],
                "args": [],
                "kwargs": [],
                "sep": []
            }
        },
        "pretty_join": {
            "name": "pretty_join",
            "location": 886,
            "return": [],
            "arguments": {
                "elems": [],
                "sep": []
            }
        },
        "_pretty_avalue": {
            "name": "_pretty_avalue",
            "location": 901,
            "return": [],
            "arguments": {
                "a": [],
                "ctx": []
            }
        },
        "DictDesc.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value_type": []
            }
        },
        "DictDesc.to_dict": {
            "name": "to_dict",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "DictDesc.keys": {
            "name": "keys",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Possibilities.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Possibilities.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggedPossibilities.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "TaggedPossibilities.get": {
            "name": "get",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "TaggedPossibilities.__hash__": {
            "name": "__hash__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartialApplication.__eqkey__": {
            "name": "__eqkey__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "AbstractValue.xtype": {
            "name": "xtype",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.xvalue": {
            "name": "xvalue",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.__eqkey__": {
            "name": "__eqkey__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractScalar.__pretty__": {
            "name": "__pretty__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractError.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "err": [],
                "data": []
            }
        },
        "AbstractError.__pretty__": {
            "name": "__pretty__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractBottom.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBottom.__pretty__": {
            "name": "__pretty__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractExternal.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "AbstractExternal.__pretty__": {
            "name": "__pretty__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractFunctionBase.get_prim": {
            "name": "get_prim",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.get_sync": {
            "name": "get_sync",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction._maybe_get_unique": {
            "name": "_maybe_get_unique",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.get_unique": {
            "name": "get_unique",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.get_prim": {
            "name": "get_prim",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.__eqkey__": {
            "name": "__eqkey__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunction.__pretty__": {
            "name": "__pretty__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractFunctionUnique.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "output": [],
                "values": []
            }
        },
        "AbstractFunctionUnique.__eqkey__": {
            "name": "__eqkey__",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFunctionUnique.__pretty__": {
            "name": "__pretty__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractRandomState.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWrapper.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        },
        "AbstractWrapper.children": {
            "name": "children",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWrapper.__eqkey__": {
            "name": "__eqkey__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractType.__init__": {
            "name": "__init__",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "typ": [],
                "values": []
            }
        },
        "AbstractType.__pretty__": {
            "name": "__pretty__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractTuple.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "elements": [],
                "values": []
            }
        },
        "AbstractTuple.children": {
            "name": "children",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTuple.__eqkey__": {
            "name": "__eqkey__",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTuple.__pretty__": {
            "name": "__pretty__",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractArray.xshape": {
            "name": "xshape",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractArray.__pretty__": {
            "name": "__pretty__",
            "location": 528,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractDict.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "entries": [],
                "values": []
            }
        },
        "AbstractDict.children": {
            "name": "children",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDict.__eqkey__": {
            "name": "__eqkey__",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDict.__pretty__": {
            "name": "__pretty__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractClassBase.__init__": {
            "name": "__init__",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "attributes": []
            }
        },
        "AbstractClassBase.user_defined_version": {
            "name": "user_defined_version",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractClassBase.children": {
            "name": "children",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractClassBase.__eqkey__": {
            "name": "__eqkey__",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractClassBase.__pretty__": {
            "name": "__pretty__",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractJTagged.__init__": {
            "name": "__init__",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        },
        "AbstractJTagged.__pretty__": {
            "name": "__pretty__",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractHandle.__init__": {
            "name": "__init__",
            "location": 642,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        },
        "AbstractHandle.__pretty__": {
            "name": "__pretty__",
            "location": 646,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractUnion.__init__": {
            "name": "__init__",
            "location": 663,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "AbstractUnion.__eqkey__": {
            "name": "__eqkey__",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractUnion.__pretty__": {
            "name": "__pretty__",
            "location": 675,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractTaggedUnion.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "AbstractTaggedUnion.__eqkey__": {
            "name": "__eqkey__",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTaggedUnion.__pretty__": {
            "name": "__pretty__",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractKeywordArgument.__init__": {
            "name": "__init__",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "argument": []
            }
        },
        "AbstractKeywordArgument.children": {
            "name": "children",
            "location": 712,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractKeywordArgument.__eqkey__": {
            "name": "__eqkey__",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractKeywordArgument.__pretty__": {
            "name": "__pretty__",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Track.__str__": {
            "name": "__str__",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Track.__lt__": {
            "name": "__lt__",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Track.merge": {
            "name": "merge",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "recurse": [],
                "v1": [],
                "v2": [],
                "forced": [],
                "bp": []
            }
        },
        "Track.clone": {
            "name": "clone",
            "location": 752,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "recurse": []
            }
        },
        "Track.broaden": {
            "name": "broaden",
            "location": 756,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "recurse": []
            }
        },
        "Track.default": {
            "name": "default",
            "location": 763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ValueTrack.broaden": {
            "name": "broaden",
            "location": 771,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "recurse": []
            }
        },
        "_AliasIdTrack.merge": {
            "name": "merge",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "recurse": [],
                "v1": [],
                "v2": [],
                "forced": [],
                "bp": []
            }
        },
        "_AliasIdTrack.default": {
            "name": "default",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/abstract/infer.py": {
        "validate_annotation": {
            "name": "validate_annotation",
            "location": 64,
            "return": [
                "_T1"
            ],
            "arguments": {
                "annotation": [],
                "abstract": [
                    "_T1"
                ]
            }
        },
        "compute_bprop_type": {
            "name": "compute_bprop_type",
            "location": 737,
            "return": [
                "AbstractFunctionUnique"
            ],
            "arguments": {
                "orig_fn": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "networkx.Graph",
                    "List[str]"
                ],
                "args": [],
                "out": [
                    "float",
                    "bool",
                    "tuple[float]",
                    "Tuple[float]",
                    "typing.Type",
                    "asyncio.AbstractEventLoop",
                    "None",
                    "Type[BaseException]",
                    "Optional[float]"
                ]
            }
        },
        "standard_prim": {
            "name": "standard_prim",
            "location": 854,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "prim": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InferenceEngine.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "float",
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "dict[str, typing.Any]",
                    "Union[float, Tuple[float, float]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "InferenceEngine.reset": {
            "name": "reset",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceEngine.run": {
            "name": "run",
            "location": 135,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "behave.runner.Context"
                ]
            }
        },
        "InferenceEngine.ref": {
            "name": "ref",
            "location": 152,
            "return": [
                "myia.abstract.ref.Reference"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "context": [
                    "mypy.nodes.Context"
                ]
            }
        },
        "InferenceEngine.get_inferred": {
            "name": "get_inferred",
            "location": 208,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "InferenceEngine.get_actual_ref": {
            "name": "get_actual_ref",
            "location": 227,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "_T0"
                ]
            }
        },
        "InferenceEngine.run_coroutine": {
            "name": "run_coroutine",
            "location": 233,
            "return": [
                "List[Dict]",
                "asyncio.Task[None]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "asyncio.Future"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "str",
                    "int",
                    "list[]",
                    "bool",
                    "asyncio.events.AbstractEventLoop",
                    "list"
                ]
            }
        },
        "InferenceEngine.get_inferrer_for": {
            "name": "get_inferrer_for",
            "location": 297,
            "return": [
                "MacroInferrer"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "InferenceEngine.abstract_merge": {
            "name": "abstract_merge",
            "location": 360,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceEngine.check_predicate": {
            "name": "check_predicate",
            "location": 371,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "str",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "InferenceEngine.assert_predicate": {
            "name": "assert_predicate",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "str",
                    "T"
                ],
                "x": [
                    "str",
                    "T"
                ]
            }
        },
        "InferenceEngine.check": {
            "name": "check",
            "location": 397,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "tuple[typing.Union[bool,str]]",
                    "dict",
                    "raiden.utils.BlockNumber",
                    "Tuple[bool, str]",
                    "int"
                ]
            }
        },
        "InferenceEngine.concretize_cache": {
            "name": "concretize_cache",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveInferenceEngine.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int"
                ]
            }
        },
        "LiveInferenceEngine.run": {
            "name": "run",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "Inferrer.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inferrer.nokw": {
            "name": "nokw",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Inferrer.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 505,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "_T0"
                ]
            }
        },
        "TrackedInferrer.__init__": {
            "name": "__init__",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subinf": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MacroInferrer.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "macro": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphInferrer.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "int"
                ],
                "context": [
                    "int",
                    "None",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "list[int]",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "GraphInferrer.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 604,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GraphInferrer.get_graph": {
            "name": "get_graph",
            "location": 608,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "args": []
            }
        },
        "GraphInferrer.make_context": {
            "name": "make_context",
            "location": 622,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "args": [],
                "normalize": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "PartialInferrer.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": []
            }
        },
        "VirtualInferrer.__init__": {
            "name": "__init__",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "output": [
                    "bool",
                    "set[]",
                    "int",
                    "dict[, ]",
                    "set",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "JInferrer.__init__": {
            "name": "__init__",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ],
                "orig_fn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StandardInferrer.__init__": {
            "name": "__init__",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "infer": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "StandardInferrer.require_constant": {
            "name": "require_constant",
            "location": 829,
            "return": [
                "str",
                "bool",
                "typing.Generator[typing.Union[int,None,None]]",
                "Tuple[str]",
                "Iterable[str]",
                "typing.Type",
                "typing.Pattern",
                "ANYTHING"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "standard_prim.deco": {
            "name": "deco",
            "location": 857,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "Type",
                    "str"
                ]
            }
        },
        "UniformPrimitiveInferrer.__init__": {
            "name": "__init__",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "impl": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "infer_value": [
                    "bool",
                    "float",
                    "int",
                    "asyncio.Event"
                ]
            }
        },
        "UniformPrimitiveInferrer.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 887,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "_T0"
                ]
            }
        },
        "UniformPrimitiveInferrer.run_impl": {
            "name": "run_impl",
            "location": 902,
            "return": [
                "AbstractScalar"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "str",
                    "bool"
                ],
                "args": [],
                "outtype": [
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/abstract/loop.py": {
        "is_simple": {
            "name": "is_simple",
            "location": 155,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[str]",
                "str",
                "Callable[[KT], VT]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Dict[int, float]",
                    "dict[int, float]"
                ]
            }
        },
        "find_coherent_result_sync": {
            "name": "find_coherent_result_sync",
            "location": 297,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "v": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ],
                "fn": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "InferenceLoop.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errtype": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "InferenceLoop.get_debug": {
            "name": "get_debug",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceLoop._resolve_var": {
            "name": "_resolve_var",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceLoop.run_forever": {
            "name": "run_forever",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceLoop.call_exception_handler": {
            "name": "call_exception_handler",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "InferenceLoop.schedule": {
            "name": "schedule",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "context_map": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "ref": [
                    "int",
                    "None",
                    "str",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "typing.Sequence[str]",
                    "typing.Mapping"
                ]
            }
        },
        "InferenceLoop.collect_errors": {
            "name": "collect_errors",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceLoop.call_soon": {
            "name": "call_soon",
            "location": 114,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Union"
                ]
            }
        },
        "InferenceLoop.call_later": {
            "name": "call_later",
            "location": 120,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "dict",
                    "dict[, ]"
                ],
                "callback": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "InferenceLoop.call_at": {
            "name": "call_at",
            "location": 126,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "dict",
                    "dict[, ]"
                ],
                "callback": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "InferenceLoop.create_task": {
            "name": "create_task",
            "location": 132,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "InferenceLoop.create_pending": {
            "name": "create_pending",
            "location": 136,
            "return": [
                "Pending"
            ],
            "arguments": {
                "self": [],
                "resolve": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "bytes",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "priority": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "bytes",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "InferenceLoop.create_pending_from_list": {
            "name": "create_pending_from_list",
            "location": 142,
            "return": [
                "PendingFromList"
            ],
            "arguments": {
                "self": [],
                "poss": [
                    "str",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]"
                ],
                "dflt": [
                    "str",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]"
                ],
                "priority": [
                    "str",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "InferenceLoop.create_pending_tentative": {
            "name": "create_pending_tentative",
            "location": 148,
            "return": [
                "PendingTentative"
            ],
            "arguments": {
                "self": [],
                "tentative": [
                    "bool",
                    "float",
                    "allennlp.data.dataseDataset"
                ]
            }
        },
        "Pending.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolve": [
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "str",
                    "typing.Iterable[str]"
                ],
                "priority": [
                    "int",
                    "float",
                    "bool"
                ],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "Pending.is_simple": {
            "name": "is_simple",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pending.force_resolve": {
            "name": "force_resolve",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pending.tie": {
            "name": "tie",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "PendingFromList.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "possibilities": [
                    "int",
                    "str",
                    "bool",
                    "typing.Sequence[T]",
                    "list[tuple[typing.Union[int,float]]]",
                    "Sequence[T]",
                    "List[Tuple[int, float]]"
                ],
                "default": [
                    "int",
                    "str",
                    "bool",
                    "typing.Sequence[T]",
                    "list[tuple[typing.Union[int,float]]]",
                    "Sequence[T]",
                    "List[Tuple[int, float]]"
                ],
                "priority": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[asyncio.AbstractEventLoop]"
                ],
                "loop": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "PendingFromList.is_simple": {
            "name": "is_simple",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingFromList._resolve": {
            "name": "_resolve",
            "location": 242,
            "return": [
                "Sequence[Callable]",
                "Optional[int]",
                "str",
                "Optional[Sequence[Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingFromList.set_result": {
            "name": "set_result",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "str",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PendingTentative.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tentative": [
                    "int",
                    "float",
                    "bool"
                ],
                "loop": [
                    "str"
                ]
            }
        },
        "PendingTentative._priority": {
            "name": "_priority",
            "location": 269,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingTentative.force_resolve": {
            "name": "force_resolve",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/abstract/macro.py": {
        "macro": {
            "name": "macro",
            "location": 175,
            "return": [
                "StandardMacro",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "myia_static": {
            "name": "myia_static",
            "location": 227,
            "return": [
                "MyiaStatic",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "AnnotationBasedChecker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "fn": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "docutils.utils.Reporter"
                ],
                "nstdargs": [
                    "bool",
                    "Sequence[str]",
                    "Optional[utils.CWLObjectType]",
                    "str",
                    "Union[List[str], Tuple[str, ...]]"
                ],
                "allow_varargs": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "List[List[Callable]]",
                    "float",
                    "str"
                ]
            }
        },
        "MacroInfo.nodes": {
            "name": "nodes",
            "location": 95,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardMacro.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "macro": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional['InstrumentBase']"
                ]
            }
        },
        "MacroError.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "Optional[Set[str]]",
                    "set[str]",
                    "None",
                    "Optional[Dict]"
                ]
            }
        },
        "MyiaStatic.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "macro": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "MyiaStatic.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/abstract/ref.py": {
        "Context.empty": {
            "name": "empty",
            "location": 22,
            "return": [
                "Context"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContext]"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "int"
                ],
                "g": [
                    "Set[str]",
                    "int",
                    "set[str]",
                    "Optional[Mapping]",
                    "str",
                    "typing.Mapping",
                    "Type['AbstractIntegrationConversation']",
                    "None",
                    "bool",
                    "typing.Type",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "argkey": [
                    "Union[List, Dict, None]",
                    "list[]",
                    "str",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "Optional[\"Period\"]",
                    "int"
                ]
            }
        },
        "Context.filter": {
            "name": "filter",
            "location": 36,
            "return": [
                "str",
                "T",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Context.add": {
            "name": "add",
            "location": 40,
            "return": [
                "Context"
            ],
            "arguments": {
                "self": [
                    "_TContext"
                ],
                "graph": [
                    "float",
                    "int"
                ],
                "argkey": [
                    "float",
                    "int"
                ]
            }
        },
        "Context.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "bool",
                "Type",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "AbstractSet[Any]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Contextless.empty": {
            "name": "empty",
            "location": 68,
            "return": [
                "Contextless"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextless]"
                ]
            }
        },
        "Contextless.filter": {
            "name": "filter",
            "location": 72,
            "return": [
                "Contextless"
            ],
            "arguments": {
                "self": [
                    "_TContextless"
                ],
                "graph": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "Contextless.add": {
            "name": "add",
            "location": 76,
            "return": [
                "Contextless"
            ],
            "arguments": {
                "self": [
                    "_TContextless"
                ],
                "graph": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "argvals": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Reference.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "node": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "context": [
                    "Optional[Any]",
                    "typing.Any",
                    "List[str]",
                    "None",
                    "Callable",
                    "list[str]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Reference.get_resolved": {
            "name": "get_resolved",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.__hash__": {
            "name": "__hash__",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.__eq__": {
            "name": "__eq__",
            "location": 137,
            "return": [
                "bool",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "BaseException",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "EvaluationCache.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "float",
                    "bool"
                ],
                "keycalc": [
                    "int",
                    "float",
                    "bool"
                ],
                "keytransform": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EvaluationCache.get": {
            "name": "get",
            "location": 185,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[int, slice]",
                    "int",
                    "dict",
                    "dict[, ]",
                    "List[Optional[Any]]",
                    "list[typing.Optional[typing.Any]]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "EvaluationCache.set_value": {
            "name": "set_value",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/abstract/to_abstract.py": {
        "from_value": {
            "name": "from_value",
            "location": 78,
            "return": [
                "Tuple[int, int]",
                "allennlp.data.vocabulary.Vocabulary",
                "numpy.matrix"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "T"
                ],
                "broaden": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "to_abstract": {
            "name": "to_abstract",
            "location": 242,
            "return": [
                "str",
                "AbstractType"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "type_to_abstract": {
            "name": "type_to_abstract",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str"
                ]
            }
        },
        "pytype_to_abstract": {
            "name": "pytype_to_abstract",
            "location": 420,
            "return": [
                "AbstractTuple",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "dict",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "main": [
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        }
    },
    "myia-master/myia/abstract/utils.py": {
        "build_value": {
            "name": "build_value",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "Set[str]",
                "Type",
                "bool",
                "dict"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool",
                    "types.Comparison"
                ],
                "default": [
                    "str",
                    "Callable",
                    "list",
                    "List[list]"
                ]
            }
        },
        "_build_value": {
            "name": "_build_value",
            "location": 104,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {
                "ac": [
                    "Dict[str, Set[str]]",
                    "mypy.types.Instance",
                    "str"
                ]
            }
        },
        "abstract_check": {
            "name": "abstract_check",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "_make_constructor": {
            "name": "_make_constructor",
            "location": 231,
            "return": [
                "Callable"
            ],
            "arguments": {
                "inst": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_intern": {
            "name": "_intern",
            "location": 239,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "abstract_clone": {
            "name": "abstract_clone",
            "location": 394,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "concretize_abstract": {
            "name": "concretize_abstract",
            "location": 410,
            "return": [
                "int",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "data.Possibilities",
                    "ref.Context",
                    "str",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "_check_no_tracking_id": {
            "name": "_check_no_tracking_id",
            "location": 421,
            "return": [
                "bool",
                "float",
                "object",
                "\"VersionNumber\""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "data.GraphFunction",
                    "int",
                    "list",
                    "Dict[str, int]",
                    "bool",
                    "Match"
                ]
            }
        },
        "no_tracking_id": {
            "name": "no_tracking_id",
            "location": 432,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "data.GraphFunction",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "concretize_cache": {
            "name": "concretize_cache",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "bool",
                    "int"
                ],
                "dest": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "is_broad": {
            "name": "is_broad",
            "location": 465,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "broaden": {
            "name": "broaden",
            "location": 477,
            "return": [
                "bool",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Dict[str, Set[str]]",
                    "dict",
                    "Dict[str, int]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sensitivity_transform": {
            "name": "sensitivity_transform",
            "location": 511,
            "return": [
                "str",
                "mypy.types.CallableType"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "refmap": {
            "name": "refmap",
            "location": 667,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "int"
                ],
                "x": [
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "collapse_options": {
            "name": "collapse_options",
            "location": 676,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]",
                "mypy.types.Type"
            ],
            "arguments": {
                "options": [
                    "List[Dict]"
                ]
            }
        },
        "union_simplify": {
            "name": "union_simplify",
            "location": 690,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "options": [
                    "List[Dict[str, str]]",
                    "List[str]",
                    "List[list]",
                    "str"
                ],
                "constructor": [
                    "float",
                    "List[Exception]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "normalize_adt": {
            "name": "normalize_adt",
            "location": 713,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_normalize_adt_helper": {
            "name": "_normalize_adt_helper",
            "location": 722,
            "return": [
                "Type",
                "int",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Tuple[int, int]",
                    "xtype.Int[64]",
                    "Tuple[Any, Any]",
                    "bool"
                ],
                "done": [
                    "str",
                    "int",
                    "dict"
                ],
                "tag_to_adt": [
                    "dict",
                    "str",
                    "Union[int, slice]",
                    "set",
                    "tracim.models.data.Content",
                    "Type[T]"
                ]
            }
        },
        "_finalize_adt": {
            "name": "_finalize_adt",
            "location": 752,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "float",
                    "int",
                    "qcodes.data.data_array.DataArray"
                ]
            }
        },
        "build_value.return_default": {
            "name": "return_default",
            "location": 63,
            "return": [
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "err": [
                    "behave.runner.Context",
                    "dict"
                ]
            }
        },
        "abstract_check.proceed": {
            "name": "proceed",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "_make_constructor.f": {
            "name": "f",
            "location": 232,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "abstract_clone.proceed": {
            "name": "proceed",
            "location": 251,
            "return": [
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/abstract/__init__.py": {},
    "myia-master/myia/compile/cconv.py": {
        "closure_convert": {
            "name": "closure_convert",
            "location": 10,
            "return": [
                "bool",
                "typing.Callable[T, typing.Union[T,None]]",
                "list[str]"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "Callable[[T], Optional[T]]",
                    "typing.Callable[T, typing.Union[T,None]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "myia-master/myia/compile/transform.py": {
        "convert_grad": {
            "name": "convert_grad",
            "location": 13,
            "return": [
                "str",
                "int",
                "List[str]",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "get_prim_graph": {
            "name": "get_prim_graph",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cache": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "prim": [
                    "str",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]",
                    "dict",
                    "dict[, ]"
                ],
                "typ": [
                    "Callable[[dict], None]",
                    "typing.Callable[dict[, ], None]",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "wrap_primitives": {
            "name": "wrap_primitives",
            "location": 57,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "return_handles": {
            "name": "return_handles",
            "location": 85,
            "return": [
                "tuple[typing.Union[str,None,list[]]]",
                "float",
                "int",
                "Type[T]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "graph": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "CompileGraph.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lin_convert": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "cut_list": [
                    "float",
                    "list",
                    "list[]",
                    "tuple",
                    "tuple[]",
                    "List[str]",
                    "list[str]"
                ],
                "backend": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "CompileGraph._reset": {
            "name": "_reset",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileGraph._is_cut": {
            "name": "_is_cut",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CompileGraph.split": {
            "name": "split",
            "location": 184,
            "return": [
                "list[list[]]",
                "int",
                "str",
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Callable[[T], bool]",
                    "str",
                    "typing.Callable[T, bool]",
                    "bool",
                    "List[Tuple]",
                    "list[tuple[]]"
                ]
            }
        },
        "CompileGraph.height": {
            "name": "height",
            "location": 202,
            "return": [
                "",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CompileGraph.add_instr": {
            "name": "add_instr",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "int",
                    "None",
                    "T",
                    "Optional[int]",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "CompileGraph.push": {
            "name": "push",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "CompileGraph.ref": {
            "name": "ref",
            "location": 221,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode",
                    "dict"
                ]
            }
        },
        "CompileGraph.dup": {
            "name": "dup",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Optional[str]",
                    "str",
                    "purplship.core.utils.xml.Element",
                    "None"
                ]
            }
        },
        "CompileGraph.ret": {
            "name": "ret",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nargs": [
                    "str",
                    "int",
                    "graph.Graph"
                ]
            }
        },
        "CompileGraph.run": {
            "name": "run",
            "location": 249,
            "return": [
                "Awaitable",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Type[Any]",
                    "typing.Type",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "CompileGraphs.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lin_convert": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "cut_list": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "backend": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CompileGraphs._reset": {
            "name": "_reset",
            "location": 426,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileGraphs.compile": {
            "name": "compile",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "bytes",
                    "Union[List[str], List[int]]",
                    "list[str]",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "CompileGraphs.link": {
            "name": "link",
            "location": 435,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileGraphs.compile_and_link": {
            "name": "compile_and_link",
            "location": 442,
            "return": [
                "FinalVM",
                "List[int]",
                "int",
                "Iterable[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        }
    },
    "myia-master/myia/compile/utils.py": {
        "_to_abstract": {
            "name": "_to_abstract",
            "location": 33,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "BackendValue.from_device": {
            "name": "from_device",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendValue.__getattr__": {
            "name": "__getattr__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "myia-master/myia/compile/vm.py": {
        "struct_partial.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": []
            }
        },
        "struct_partial.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalVM.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "backend": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "FinalVM._push": {
            "name": "_push",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FinalVM._pop": {
            "name": "_pop",
            "location": 40,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "FinalVM._move_stack": {
            "name": "_move_stack",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nitems": [
                    "float",
                    "int",
                    "str"
                ],
                "height": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "FinalVM._ref": {
            "name": "_ref",
            "location": 61,
            "return": [
                "str",
                "List[Dict]",
                "float",
                "List[\"DictDataLoader\"]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "float",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[bytes]",
                    "list[bytes]"
                ]
            }
        },
        "FinalVM._pushp": {
            "name": "_pushp",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalVM._popp": {
            "name": "_popp",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalVM._do_jmp": {
            "name": "_do_jmp",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "jmp": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FinalVM.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalVM.eval": {
            "name": "eval",
            "location": 92,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "FinalVM.inst_call": {
            "name": "inst_call",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "jmp": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FinalVM.inst_tailcall": {
            "name": "inst_tailcall",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "jmp": [
                    "str",
                    "bool"
                ],
                "height": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]"
                ],
                "nargs": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "FinalVM.inst_return": {
            "name": "inst_return",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rpos": [
                    "Mapping",
                    "typing.Mapping",
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "type",
                    "typing.Type"
                ],
                "height": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FinalVM.inst_partial": {
            "name": "inst_partial",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn_": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FinalVM.inst_switch": {
            "name": "inst_switch",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "dict",
                    "dict[, ]"
                ],
                "vtrue": [
                    "str",
                    "bool"
                ],
                "vfalse": [
                    "str",
                    "bool"
                ]
            }
        },
        "FinalVM.inst_tuple": {
            "name": "inst_tuple",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalVM.inst_bool_and": {
            "name": "inst_bool_and",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "bytes",
                    "AbstractSet[str]",
                    "typing.AbstractSet"
                ],
                "b": [
                    "myia.utils.misc.Registry[Any, Any]"
                ]
            }
        },
        "FinalVM.inst_tuple_getitem": {
            "name": "inst_tuple_getitem",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "Optional[float]",
                    "float",
                    "T",
                    "None"
                ],
                "idx": [
                    "int",
                    "float"
                ]
            }
        },
        "FinalVM.inst_tuple_setitem": {
            "name": "inst_tuple_setitem",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str"
                ],
                "idx": [
                    "int",
                    "float",
                    "str",
                    "Optional[float]",
                    "None"
                ],
                "v": [
                    "int",
                    "str",
                    "Pattern[str]",
                    "typing.Pattern",
                    "Tuple[str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "FinalVM.inst_tagged": {
            "name": "inst_tagged",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "list",
                    "list[]",
                    "List[Optional[str]]",
                    "list[typing.Optional[str]]",
                    "List[int]",
                    "list[int]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "tag": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "None",
                    "Optional[List[str]]",
                    "Set[str]"
                ]
            }
        },
        "FinalVM.inst_hastag": {
            "name": "inst_hastag",
            "location": 265,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Set[str]",
                    "str",
                    "set[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "tag": [
                    "IO",
                    "typing.IO",
                    "List[list]",
                    "list[list[]]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "FinalVM.inst_casttag": {
            "name": "inst_casttag",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tag": [
                    "str",
                    "Dict[int, Dict[str, Any]]",
                    "dict[int, dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FinalVM.inst_unsafe_static_cast": {
            "name": "inst_unsafe_static_cast",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "float",
                    "bytes",
                    "Type",
                    "typing.Type"
                ],
                "type": [
                    "str",
                    "bool",
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "None",
                    "Optional[Callable[[str], Any]]",
                    "Callable[[str], None]",
                    "typing.Callable[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[BaseException]",
                    "BaseException"
                ]
            }
        },
        "FinalVM.inst_env_getitem": {
            "name": "inst_env_getitem",
            "location": 300,
            "return": [
                "None",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "bool",
                    "Union[str, Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "bytes",
                    "Union[str, bytes, IO[bytes]]",
                    "typing.IO"
                ],
                "idx": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "tuple[str]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]",
                    "Tuple[str]",
                    "Sequence[int]"
                ],
                "default": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "FinalVM.inst_env_setitem": {
            "name": "inst_env_setitem",
            "location": 308,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "Union[str, List[str], None]",
                    "Dict[cmk.utils.type_defs.HostName, cmk.utils.type_defs.TagList]",
                    "list[str]",
                    "Tuple[type]",
                    "None",
                    "Set[str]",
                    "dict[s, s]",
                    "tuple[typing.Type]",
                    "set[str]"
                ],
                "idx": [
                    "bool",
                    "List[str]",
                    "Dict[cmk.utils.type_defs.HostName, List[cmk.utils.type_defs.HostName]]",
                    "Optional[int]",
                    "str"
                ],
                "val": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "dict[, ]",
                    "Union[List[str], List[Any]]",
                    "None",
                    "List[Dict[str, str]]",
                    "list[str]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "FinalVM.inst_push": {
            "name": "inst_push",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FinalVM.inst_dup": {
            "name": "inst_dup",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rpos": [
                    "str",
                    "bool"
                ]
            }
        },
        "FinalVM.inst_pad_stack": {
            "name": "inst_pad_stack",
            "location": 335,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sz": [
                    "bool",
                    "List[int]",
                    "list",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "FinalVM.inst_external": {
            "name": "inst_external",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Callable[[], object]",
                    "typing.Callable[[], object]",
                    "list",
                    "list[]"
                ],
                "args": []
            }
        }
    },
    "myia-master/myia/compile/__init__.py": {},
    "myia-master/myia/compile/backends/prim_groups.py": {
        "PrimGroup.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "primitives": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PrimGroup.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimGroup.ensure": {
            "name": "ensure",
            "location": 31,
            "return": [
                "str",
                "PrimGroup"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Callable[..., T]",
                    "str",
                    "Optional[Dict]",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ],
                "prim_or_group": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "myia-master/myia/compile/backends/__init__.py": {
        "collect_backend_plugins": {
            "name": "collect_backend_plugins",
            "location": 79,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_backend_names": {
            "name": "get_backend_names",
            "location": 118,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "get_default": {
            "name": "get_default",
            "location": 123,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {}
        },
        "parse_default": {
            "name": "parse_default",
            "location": 145,
            "return": [
                "tuple[typing.Union[str,dict[, ]]]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "load_backend": {
            "name": "load_backend",
            "location": 169,
            "return": [
                "str",
                "typing.Pattern",
                "list[]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "set[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "options": [
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "Dict[str, int]",
                    "list[typing.Any]",
                    "Optional[str]",
                    "dict[str, int]",
                    "Optional[Union[Any, str]]",
                    "typing.Any",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "register_backend": {
            "name": "register_backend",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ],
                "load_fn": [
                    "str",
                    "Sequence[Optional[str]]",
                    "typing.Sequence[typing.Optional[str]]",
                    "List[T]",
                    "list[T]"
                ],
                "defaults_fn": [
                    "str",
                    "Sequence[Optional[str]]",
                    "typing.Sequence[typing.Optional[str]]",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "BackendLoader.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "load_fn": [
                    "int",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "str",
                    "Union[str, float]",
                    "float",
                    "tuple",
                    "tuple[]"
                ],
                "defaults_fn": [
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "int",
                    "Optional[Callable[[dict], None]]",
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Type",
                    "type",
                    "tuple[int]",
                    "bool",
                    "Tuple[int]"
                ]
            }
        },
        "BackendLoader.loader_callable_from_pkg": {
            "name": "loader_callable_from_pkg",
            "location": 44,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "typing.Iterator",
                    "int",
                    "None",
                    "Iterator[int]",
                    "Optional[str]"
                ],
                "pkg": [
                    "bool",
                    "str",
                    "typing.Iterator",
                    "int",
                    "None",
                    "Iterator[int]",
                    "Optional[str]"
                ]
            }
        },
        "BackendLoader.loader_callable_from_functions": {
            "name": "loader_callable_from_functions",
            "location": 65,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Exception",
                    "int"
                ],
                "load_fn": [
                    "bool",
                    "str",
                    "Exception",
                    "int"
                ],
                "defaults_fn": [
                    "bool",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "Backend.compile": {
            "name": "compile",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str"
                ],
                "argspec": [
                    "str"
                ],
                "outspec": [
                    "str"
                ]
            }
        },
        "Backend.from_backend_value": {
            "name": "from_backend_value",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[typing.Union[str,int]]",
                    "int",
                    "List[Union[str, int]]",
                    "list[]",
                    "T",
                    "list[list[]]",
                    "list",
                    "List[list]"
                ],
                "t": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[typing.Union[str,int]]",
                    "int",
                    "List[Union[str, int]]",
                    "list[]",
                    "T",
                    "list[list[]]",
                    "list",
                    "List[list]"
                ]
            }
        },
        "Backend.to_backend_value": {
            "name": "to_backend_value",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Exception",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "t": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Exception",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ]
            }
        },
        "Backend.supports_prim_group": {
            "name": "supports_prim_group",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prim_group": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Converter.convert_array": {
            "name": "convert_array",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_scalar": {
            "name": "convert_scalar",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_nil": {
            "name": "convert_nil",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_dead": {
            "name": "convert_dead",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_bool": {
            "name": "convert_bool",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "Optional[Exception]",
                    "Exception",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "Optional[Exception]",
                    "Exception",
                    "List[int]",
                    "None",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_env": {
            "name": "convert_env",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ],
                "t": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "Converter.convert_universe": {
            "name": "convert_universe",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_handle": {
            "name": "convert_handle",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_tuple": {
            "name": "convert_tuple",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Converter.convert_tagged": {
            "name": "convert_tagged",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[Union[int, str]]",
                    "None"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[Union[int, str]]",
                    "None"
                ]
            }
        },
        "Converter.convert_type": {
            "name": "convert_type",
            "location": 296,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "set[]",
                    "set",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "t": [
                    "bool",
                    "set[]",
                    "set",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Converter.convert_random_state": {
            "name": "convert_random_state",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "bool",
                    "Type[Any]",
                    "typing.Mapping",
                    "Optional[Iterable[Any]]",
                    "typing.Type",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "t": [
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "bool",
                    "Type[Any]",
                    "typing.Mapping",
                    "Optional[Iterable[Any]]",
                    "typing.Type",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "Converter.convert_default": {
            "name": "convert_default",
            "location": 304,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "T"
                ]
            }
        },
        "Converter.__call__": {
            "name": "__call__",
            "location": 308,
            "return": [
                "str",
                "Literal",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Collection[\"Issue\"]",
                    "typing.Collection",
                    "dict",
                    "dict[, ]"
                ],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "BackendLoader.loader_callable_from_pkg.loader": {
            "name": "loader",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "BackendLoader.loader_callable_from_functions.loader": {
            "name": "loader",
            "location": 73,
            "return": [
                "bool",
                "Callable",
                "Literal",
                "BaseException",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/compile/backends/python/implementations.py": {
        "_get_conv_shape_1axis": {
            "name": "_get_conv_shape_1axis",
            "location": 10,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "image_shape": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterable[numpy.ndarray]"
                ],
                "kernel_shape": [
                    "float",
                    "int",
                    "Optional[float]",
                    "bool",
                    "numpy.ndarray"
                ],
                "border_mode": [
                    "int",
                    "Optional[int]"
                ],
                "subsample": [
                    "float",
                    "int",
                    "Optional[float]",
                    "bool",
                    "numpy.ndarray"
                ],
                "dilation": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "_get_conv_output_shape": {
            "name": "_get_conv_output_shape",
            "location": 61,
            "return": [
                "tuple"
            ],
            "arguments": {
                "image_shape": [
                    "Union[str, IO[bytes]]",
                    "int",
                    "list",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Iterable[numpy.ndarray]",
                    "List[str]"
                ],
                "kernel_shape": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "border_mode": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "subsample": [
                    "numpy.array",
                    "int",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "filter_dilation": [
                    "int",
                    "numpy.array",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ]
            }
        },
        "_conv2d": {
            "name": "_conv2d",
            "location": 127,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "img": [
                    "str",
                    "bool",
                    "int",
                    "Collection[int]"
                ],
                "kern": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "mode": [
                    "typing.Text",
                    "bool",
                    "int"
                ],
                "dilation": [
                    "tuple[int]",
                    "int",
                    "List[int]",
                    "str"
                ],
                "groups": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 179,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "weight": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "strides": [
                    "tuple[int]",
                    "numpy.ndarray",
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "Sequence[str]",
                    "\"Node\"",
                    "List[Dict[str, Any]]"
                ],
                "padding": [
                    "tuple[int]",
                    "list",
                    "Sequence['cirq.Qid']",
                    "int",
                    "Tuple[int]",
                    "List[str]",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "dilation": [
                    "tuple[int]",
                    "List[int]",
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "list"
                ],
                "groups": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "conv2d_weight_grad": {
            "name": "conv2d_weight_grad",
            "location": 225,
            "return": [
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "input": [
                    "typing.Iterable[float]",
                    "int",
                    "Iterable[float]",
                    "str",
                    "List[T]"
                ],
                "weight_size": [
                    "numpy.ndarray",
                    "float"
                ],
                "grad_output": [
                    "bytes",
                    "float",
                    "int"
                ],
                "stride": [
                    "float",
                    "numpy.ndarray",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]"
                ],
                "padding": [
                    "float",
                    "numpy.ndarray",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]"
                ],
                "dilation": [
                    "float",
                    "numpy.ndarray",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]"
                ],
                "groups": [
                    "BinaryIO",
                    "List[bool]",
                    "numpy.ndarray"
                ]
            }
        },
        "conv_transpose2d": {
            "name": "conv_transpose2d",
            "location": 296,
            "return": [
                "float",
                "int",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "str",
                    "int"
                ],
                "weight": [
                    "bool",
                    "str",
                    "int"
                ],
                "strides": [
                    "str",
                    "bool",
                    "int"
                ],
                "padding": [
                    "str",
                    "bool",
                    "int"
                ],
                "output_padding": [
                    "str",
                    "bool",
                    "int"
                ],
                "groups": [
                    "int",
                    "typing.Iterable[float]",
                    "Iterable[float]",
                    "List[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "dilation": [
                    "int",
                    "Iterable[float]",
                    "List[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "array_reduce": {
            "name": "array_reduce",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "array": [
                    "int",
                    "list[]",
                    "numpy.ndarray",
                    "list"
                ],
                "shp": [
                    "dict",
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "take_grad_inp": {
            "name": "take_grad_inp",
            "location": 437,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "Optional[str]"
            ],
            "arguments": {
                "nb_indices": [
                    "int",
                    "numpy.ndarray"
                ],
                "indices": [
                    "Optional[int]",
                    "Sequence[numpy.ndarray]",
                    "int",
                    "numpy.ndarray"
                ],
                "values": [
                    "int",
                    "bytes"
                ]
            }
        },
        "scatter": {
            "name": "scatter",
            "location": 451,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[int]",
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytes"
                ],
                "axis": [
                    "int",
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "bytes",
                    "Dict[int, str]",
                    "List[Tuple[int, int]]"
                ],
                "indices": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "src": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "scatter_add": {
            "name": "scatter_add",
            "location": 464,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "numpy.array",
                    "bytes",
                    "numpy.ndarray"
                ],
                "axis": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "List[Tuple[float, float]]",
                    "str"
                ],
                "indices": [
                    "typing.Iterable[int]",
                    "numpy.ndarray",
                    "int",
                    "T",
                    "Union[Iterable[int], int]"
                ],
                "src": [
                    "list[int]",
                    "int",
                    "List[int]",
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 477,
            "return": [
                "Optional[int]",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "dim": [
                    "dict[, ]",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "_max_pool2d_out_shape": {
            "name": "_max_pool2d_out_shape",
            "location": 499,
            "return": [
                "list"
            ],
            "arguments": {
                "imgshape": [
                    "str",
                    "int"
                ],
                "ws": [
                    "str",
                    "int"
                ],
                "stride": [
                    "str",
                    "int"
                ],
                "pad": [
                    "str",
                    "int"
                ],
                "ndim": [
                    "int",
                    "str"
                ]
            }
        },
        "max_pool2d": {
            "name": "max_pool2d",
            "location": 548,
            "return": [
                "float",
                "int",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "typing.Mapping",
                    "float",
                    "Mapping[str, float]",
                    "Union[int, float]"
                ],
                "ws": [
                    "int",
                    "list[dict[, ]]",
                    "numpy.ndarray",
                    "list[int]",
                    "List[Dict]",
                    "List[int]"
                ],
                "stride": [
                    "int",
                    "list[dict[, ]]",
                    "numpy.ndarray",
                    "list[]",
                    "List[Dict]",
                    "list"
                ],
                "pad": [
                    "list[int]",
                    "numpy.ndarray",
                    "int",
                    "List[int]"
                ],
                "ceil_mode": [
                    "int",
                    "float",
                    "Optional[float]",
                    "str",
                    "None",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "max_pool2d_grad": {
            "name": "max_pool2d_grad",
            "location": 608,
            "return": [
                "float",
                "int",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "x": [
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "int",
                    "numpy.ndarray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "ws": [
                    "int",
                    "bytearray",
                    "list[int]",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "stride": [
                    "int",
                    "bytearray",
                    "list[int]",
                    "List[int]",
                    "numpy.ndarray",
                    "list[dict[, ]]",
                    "List[Dict]"
                ],
                "pad": [
                    "list[]",
                    "numpy.ndarray",
                    "list[dict[, ]]",
                    "int",
                    "list",
                    "List[Dict]"
                ],
                "ceil_mode": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "gz": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "conv_transpose2d.correct_for_groups": {
            "name": "correct_for_groups",
            "location": 374,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "mat": [
                    "Type[str]"
                ]
            }
        },
        "array_reduce.is_reduction": {
            "name": "is_reduction",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "ishp": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "tshp": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/compile/backends/python/python.py": {
        "python_array_map": {
            "name": "python_array_map",
            "location": 39,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "c": [
                    "IO",
                    "torch.nn.utils.rnn.PackedSequence",
                    "Dict[str, str]"
                ],
                "fn": [
                    "bytes",
                    "list"
                ]
            }
        },
        "python_scalar_to_array": {
            "name": "python_scalar_to_array",
            "location": 45,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "python_array_cast": {
            "name": "python_array_cast",
            "location": 54,
            "return": [
                "Callable",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "c": [
                    "float",
                    "Mapping[str, float]",
                    "str",
                    "int"
                ],
                "x": [
                    "float",
                    "Mapping[str, float]",
                    "str",
                    "int"
                ],
                "t": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "python_scalar_cast": {
            "name": "python_scalar_cast",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Counter"
                ],
                "x": [
                    "int",
                    "Counter"
                ],
                "t": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "python_tuple_setitem": {
            "name": "python_tuple_setitem",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict[str, List[float]]",
                    "T",
                    "int"
                ],
                "data": [
                    "str",
                    "Dict[str, List[float]]",
                    "T",
                    "int"
                ],
                "item": [
                    "str",
                    "Dict[str, List[float]]",
                    "T",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict[str, List[float]]",
                    "T",
                    "int"
                ]
            }
        },
        "python_unsafe_static_cast": {
            "name": "python_unsafe_static_cast",
            "location": 73,
            "return": [
                "mypy.types.Type",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "c": [
                    "List[Dict[str, str]]",
                    "Mapping[str, Any]",
                    "bool",
                    "List[Dict]",
                    "Sequence[Any]",
                    "Optional[Callable[[dict], None]]",
                    "int",
                    "Dict[str, str]"
                ],
                "x": [
                    "List[Dict[str, str]]",
                    "Mapping[str, Any]",
                    "bool",
                    "List[Dict]",
                    "Sequence[Any]",
                    "Optional[Callable[[dict], None]]",
                    "int",
                    "Dict[str, str]"
                ],
                "t": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "python_random_uint32": {
            "name": "python_random_uint32",
            "location": 78,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "c": [
                    "Type",
                    "Dict[str, Any]",
                    "Callable",
                    "Callable[..., None]",
                    "Callable[..., T]"
                ],
                "rstate": [
                    "Callable",
                    "tuple",
                    "argparse.Namespace",
                    "types.FunctionType"
                ],
                "shape": [
                    "Callable",
                    "tuple",
                    "argparse.Namespace",
                    "types.FunctionType"
                ]
            }
        },
        "python_make_tuple": {
            "name": "python_make_tuple",
            "location": 89,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "Dict[str, Any]",
                    "Callable",
                    "raiden.utils.FeeAmount",
                    "Optional[bytes]",
                    "bool"
                ]
            }
        },
        "python_switch": {
            "name": "python_switch",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]"
                ],
                "cond": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]"
                ],
                "x": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]"
                ],
                "y": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "python_scalar_div": {
            "name": "python_scalar_div",
            "location": 99,
            "return": [
                "int",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Tuple[int, int]]",
                "Sequence",
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "Sequence[Any]"
                ],
                "x": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "Sequence[Any]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "Sequence[Any]"
                ]
            }
        },
        "python_env_setitem": {
            "name": "python_env_setitem",
            "location": 104,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "c": [
                    "list",
                    "dict",
                    "set"
                ],
                "env": [
                    "list",
                    "dict",
                    "set"
                ],
                "key": [
                    "list",
                    "dict",
                    "set"
                ],
                "x": [
                    "list",
                    "dict",
                    "set"
                ]
            }
        },
        "python_tagged": {
            "name": "python_tagged",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "bytes",
                    "Sequence[T]"
                ],
                "x": [
                    "int",
                    "str",
                    "bytes",
                    "Sequence[T]"
                ],
                "tag": [
                    "int",
                    "str",
                    "bytes",
                    "Sequence[T]"
                ]
            }
        },
        "python_array_getitem": {
            "name": "python_array_getitem",
            "location": 114,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "c": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[Any, Any]",
                    "Optional[Any]",
                    "bool"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Dict]",
                    "Union[str, bytes, None]",
                    "dict"
                ],
                "begin": [
                    "str",
                    "bytes",
                    "Optional[Dict]",
                    "Union[str, bytes, None]",
                    "dict"
                ],
                "end": [
                    "str",
                    "bytes",
                    "Optional[Dict]",
                    "Union[str, bytes, None]",
                    "dict"
                ],
                "strides": [
                    "str",
                    "bytes",
                    "Optional[Dict]",
                    "Union[str, bytes, None]",
                    "dict"
                ]
            }
        },
        "python_array_setitem": {
            "name": "python_array_setitem",
            "location": 123,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]",
                    "Dict[str, str]"
                ],
                "data": [
                    "int"
                ],
                "begin": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "strides": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "python_split": {
            "name": "python_split",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Iterable[str]",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "T"
                ],
                "x": [
                    "Type[T]",
                    "Iterable[Any]",
                    "List['cirq.Qid']",
                    "str"
                ],
                "sections": [
                    "int",
                    "Sequence[T]"
                ],
                "dim": [
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "python_take_grad_inp": {
            "name": "python_take_grad_inp",
            "location": 146,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "int",
                    "bool"
                ],
                "nb_indices": [
                    "int",
                    "Counter",
                    "bool"
                ],
                "indices": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "dict",
                    "Mapping[starfish.types.Axes, int]"
                ],
                "values": [
                    "str",
                    "float",
                    "Counter",
                    "int"
                ]
            }
        },
        "python_gather": {
            "name": "python_gather",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "float",
                    "List['cirq.Qid']",
                    "Optional[List]"
                ],
                "x": [
                    "str",
                    "Callable[[int], int]",
                    "list",
                    "Iterable[Any]"
                ],
                "dim": [
                    "float",
                    "List['cirq.Qid']",
                    "list"
                ],
                "index": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "python_max_pool2d": {
            "name": "python_max_pool2d",
            "location": 162,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "inp": [
                    "float",
                    "int",
                    "bool"
                ],
                "kernel_size": [
                    "starfish.core.types.Number",
                    "starfish.types.Number",
                    "Optional[int]",
                    "bool",
                    "Union[starfish.core.types.Number, Tuple[starfish.core.types.Number]]",
                    "Tuple[int]"
                ],
                "stride": [
                    "float",
                    "int",
                    "bool"
                ],
                "padding": [
                    "float",
                    "int",
                    "bool"
                ],
                "dilation": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "ceil_mode": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]",
                    "Tuple[starfish.core.types.Number, starfish.core.types.Number]",
                    "Union[starfish.core.types.Number, Tuple[starfish.core.types.Number]]"
                ]
            }
        },
        "python_max_pool2d_grad": {
            "name": "python_max_pool2d_grad",
            "location": 175,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "inp": [
                    "int",
                    "float",
                    "bool",
                    "bytes"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int]",
                    "Union[starfish.core.types.Number, Tuple[starfish.core.types.Number]]",
                    "Union[starfish.types.Number, Tuple[starfish.types.Number]]",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "stride": [
                    "int",
                    "float",
                    "bool",
                    "bytes"
                ],
                "padding": [
                    "int",
                    "float",
                    "bool",
                    "bytes"
                ],
                "dilation": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "ceil_mode": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "dout": [
                    "int",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        },
        "python_make_handle": {
            "name": "python_make_handle",
            "location": 189,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Iterable[Any]"
                ],
                "typ": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ],
                "universe": [
                    "bool",
                    "starfish.core.types.SpotFindingResults",
                    "float",
                    "tuple"
                ]
            }
        },
        "python_universe_setitem": {
            "name": "python_universe_setitem",
            "location": 196,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "Union[str, Sequence[str]]",
                    "bool",
                    "IO",
                    "tests.utils.Strategy[paradigm.hints.Domain]"
                ],
                "universe": [
                    "int",
                    "str",
                    "Tuple[str, str, str, str, str]"
                ],
                "handle": [
                    "int",
                    "str",
                    "Tuple[str, str, str, str, str]"
                ],
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "python_universe_getitem": {
            "name": "python_universe_getitem",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "list",
                    "int",
                    "IO"
                ],
                "universe": [
                    "bool",
                    "starfish.core.types.SpotFindingResults",
                    "float",
                    "tuple"
                ],
                "handle": [
                    "bool",
                    "starfish.core.types.SpotFindingResults",
                    "float",
                    "tuple"
                ]
            }
        },
        "op_grad": {
            "name": "op_grad",
            "location": 216,
            "return": [
                "int",
                "bytearray",
                "float"
            ],
            "arguments": {
                "f": [
                    "Iterable[T]"
                ]
            }
        },
        "op_value_and_grad": {
            "name": "op_value_and_grad",
            "location": 238,
            "return": [
                "int",
                "str",
                "Iterable[str]",
                "Set[str]"
            ],
            "arguments": {
                "f": [
                    "Iterable[T]",
                    "str",
                    "os.DirEntry",
                    "dict"
                ]
            }
        },
        "op_make_dict": {
            "name": "op_make_dict",
            "location": 248,
            "return": [
                "Set[str]",
                "int",
                "Dict[str, str]",
                "Union[Dict, List]",
                "Union[int, float, complex]",
                "Dict[str, List[Callable]]",
                "str"
            ],
            "arguments": {
                "dct": [
                    "dict",
                    "str",
                    "Tuple[bytes, int]",
                    "Sequence[Any]",
                    "Callable",
                    "Dict[str, Any]",
                    "Dict[str, tuple]"
                ]
            }
        },
        "myia_iter": {
            "name": "myia_iter",
            "location": 267,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "myia_hasnext": {
            "name": "myia_hasnext",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "myia_next": {
            "name": "myia_next",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "convert_operation": {
            "name": "convert_operation",
            "location": 436,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "c": [
                    "str"
                ],
                "node": [
                    "str",
                    "Mapping",
                    "bool",
                    "List[str]"
                ],
                "op": [
                    "str",
                    "float",
                    "type",
                    "dict",
                    "Type['AbstractIntegrationConversation']",
                    "Optional[int]"
                ]
            }
        },
        "optimize_apply_call": {
            "name": "optimize_apply_call",
            "location": 490,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "fn_name": [
                    "str",
                    "List[str]",
                    "AnyStr"
                ]
            }
        },
        "in_graph": {
            "name": "in_graph",
            "location": 577,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "g": [
                    "List[bool]",
                    "str",
                    "bool",
                    "Any"
                ]
            }
        },
        "nested_list_to_code_string": {
            "name": "nested_list_to_code_string",
            "location": 716,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "structure": [
                    "List[str]",
                    "Type",
                    "List[Tuple[str, str]]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "dict"
                ],
                "indentation": [
                    "dict",
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "compile_graph": {
            "name": "compile_graph",
            "location": 1258,
            "return": [
                "Dict[str, int]",
                "bool",
                "Generator",
                "Iterable[T]"
            ],
            "arguments": {
                "graph": [
                    "Optional[List[Type]]",
                    "List[str]",
                    "Optional[Set[str]]",
                    "dict",
                    "Union[str, List[str]]",
                    "str",
                    "Callable"
                ]
            }
        },
        "load_options": {
            "name": "load_options",
            "location": 1268,
            "return": [
                "str",
                "Callable[[], bool]"
            ],
            "arguments": {
                "debug": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Callable"
                ],
                "pdb": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Callable"
                ]
            }
        },
        "load_backend": {
            "name": "load_backend",
            "location": 1273,
            "return": [
                "str",
                "dict",
                "bool",
                "Callable",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "ConstantString.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ConstantString.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "op_grad.gradient": {
            "name": "gradient",
            "location": 223,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "op_value_and_grad.v_and_g": {
            "name": "v_and_g",
            "location": 242,
            "return": [
                "str",
                "baseplate.lib.metrics.Batch"
            ],
            "arguments": {}
        },
        "PythonMapper.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_map": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ],
                "complex_map": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "PythonMapper.register": {
            "name": "register",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PythonMapper.register_simple": {
            "name": "register_simple",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "PythonMapper.register_complex": {
            "name": "register_complex",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "PythonMapper.get": {
            "name": "get",
            "location": 528,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "PythonMapper.has": {
            "name": "has",
            "location": 532,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NodeVisitor._visit_array_cast": {
            "name": "_visit_array_cast",
            "location": 543,
            "return": [
                "mypy.types.UnionType"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_scalar_to_array": {
            "name": "_visit_scalar_to_array",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeVisitor._visit_unsafe_static_cast": {
            "name": "_visit_unsafe_static_cast",
            "location": 549,
            "return": [
                "mypy.types.UnionType"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_scalar_cast": {
            "name": "_visit_scalar_cast",
            "location": 552,
            "return": [
                "mypy.types.UnionType"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor.__call__": {
            "name": "__call__",
            "location": 555,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "Graph"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ]
            }
        },
        "in_graph.filter": {
            "name": "filter",
            "location": 580,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "node": []
            }
        },
        "_PythonConverter._default_convert": {
            "name": "_default_convert",
            "location": 594,
            "return": [
                "int",
                "str",
                "List[mypy.types.Type]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Optional[Exception]",
                    "int",
                    "str",
                    "bool"
                ],
                "t": [
                    "Optional[Exception]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_PythonConverter.convert_array": {
            "name": "convert_array",
            "location": 598,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_scalar": {
            "name": "convert_scalar",
            "location": 602,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_nil": {
            "name": "convert_nil",
            "location": 606,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_bool": {
            "name": "convert_bool",
            "location": 610,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "Sequence",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "list",
                    "Optional[float]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "t": [
                    "int",
                    "str",
                    "list",
                    "Optional[float]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "_PythonConverter.convert_universe": {
            "name": "convert_universe",
            "location": 614,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_handle": {
            "name": "convert_handle",
            "location": 618,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_tuple": {
            "name": "convert_tuple",
            "location": 622,
            "return": [
                "int",
                "Optional[bool]",
                "Union[int, float, complex]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ],
                "t": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "list"
                ]
            }
        },
        "_PythonConverter.convert_tagged": {
            "name": "convert_tagged",
            "location": 626,
            "return": [
                "str",
                "float",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ],
                "t": [
                    "str",
                    "int"
                ]
            }
        },
        "_PythonConverter.convert_type": {
            "name": "convert_type",
            "location": 630,
            "return": [
                "T",
                "int",
                "Type",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Pattern"
                ],
                "t": [
                    "Pattern"
                ]
            }
        },
        "_PythonConverter.convert_random_state": {
            "name": "convert_random_state",
            "location": 634,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "list",
                    "str",
                    "Optional[float]"
                ],
                "t": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "list",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "PythonConstantConverter.convert_scalar": {
            "name": "convert_scalar",
            "location": 650,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "t": [
                    "mypy.types.Type",
                    "Callable"
                ]
            }
        },
        "PythonConstantConverter.convert_dead": {
            "name": "convert_dead",
            "location": 664,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "PythonConstantConverter.convert_env": {
            "name": "convert_env",
            "location": 668,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "t": [
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "PythonConstantConverter.convert_tuple": {
            "name": "convert_tuple",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "t": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        },
        "PythonConstantConverter.convert_type": {
            "name": "convert_type",
            "location": 678,
            "return": [
                "str",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[mypy.nodes.Expression, mypy.types.Type]",
                    "Tuple[int, int]",
                    "Optional[List[Any]]"
                ],
                "t": [
                    "Callable[[None], bool]",
                    "Iterable",
                    "Type",
                    "T",
                    "Tuple[float, float]"
                ]
            }
        },
        "PythonConstantConverter.convert_handle": {
            "name": "convert_handle",
            "location": 694,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "PythonConstantConverter.convert_default": {
            "name": "convert_default",
            "location": 698,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict",
                    "Type[T]",
                    "int",
                    "type",
                    "Dict[str, str]"
                ]
            }
        },
        "PdbRunCall.__init__": {
            "name": "__init__",
            "location": 736,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "PdbRunCall.__call__": {
            "name": "__call__",
            "location": 740,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Compiler.has_node": {
            "name": "has_node",
            "location": 781,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str"
                ]
            }
        },
        "_Compiler.has_constant": {
            "name": "has_constant",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "_Compiler.get_new_name": {
            "name": "get_new_name",
            "location": 789,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "desired_name": [
                    "Iterator[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "_Compiler.get_label": {
            "name": "get_label",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "_Compiler.ref": {
            "name": "ref",
            "location": 797,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "_Compiler.get_graph_cache": {
            "name": "get_graph_cache",
            "location": 801,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Compiler.make_const": {
            "name": "make_const",
            "location": 805,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Optional[Exception]",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "t": [
                    "int",
                    "Optional[Exception]",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "_Compiler.register_global": {
            "name": "register_global",
            "location": 809,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FunctionCompiler.__init__": {
            "name": "__init__",
            "location": 823,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "parent": [
                    "bool",
                    "str",
                    "type",
                    "Callable"
                ]
            }
        },
        "FunctionCompiler.local_ref": {
            "name": "local_ref",
            "location": 833,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "raiden.utils.Address",
                    "mypy.types.CallableType",
                    "int",
                    "utils.ContextType"
                ]
            }
        },
        "FunctionCompiler.has_node": {
            "name": "has_node",
            "location": 837,
            "return": [
                "Union[int, float, complex]",
                "int",
                "bool",
                "Mapping[Any, Any]",
                "dict",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionCompiler.has_constant": {
            "name": "has_constant",
            "location": 845,
            "return": [
                "List[str]",
                "bool",
                "List[Dict[str, Any]]",
                "AbstractSet[str]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "r2c.lib.versioned_analyzer.AnalyzerName"
                ]
            }
        },
        "FunctionCompiler.get_new_name": {
            "name": "get_new_name",
            "location": 853,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "raiden.tests.fuzz.utils.SendUnlockInNode",
                "Union[str, bytes, IO[bytes]]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "desired_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FunctionCompiler.get_label": {
            "name": "get_label",
            "location": 857,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "FunctionCompiler.ref": {
            "name": "ref",
            "location": 861,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        },
        "FunctionCompiler._is_inline_const": {
            "name": "_is_inline_const",
            "location": 878,
            "return": [
                "tuple",
                "int",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "const_value": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "Hashable",
                    "starfish.types.Number"
                ]
            }
        },
        "FunctionCompiler.get_graph_cache": {
            "name": "get_graph_cache",
            "location": 884,
            "return": [
                "str",
                "Tuple[type]",
                "bool",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCompiler.make_const": {
            "name": "make_const",
            "location": 888,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "list"
                ],
                "t": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "list"
                ]
            }
        },
        "FunctionCompiler.register_global": {
            "name": "register_global",
            "location": 892,
            "return": [
                "bool",
                "Optional[DefaultDict[str, Any]]",
                "Optional[int]",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FunctionCompiler.force_node_constant": {
            "name": "force_node_constant",
            "location": 896,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "constant": [
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FunctionCompiler.on_constant": {
            "name": "on_constant",
            "location": 903,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "wemake_python_styleguide.types.AnyIf"
                ]
            }
        },
        "FunctionCompiler.on_apply": {
            "name": "on_apply",
            "location": 919,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ]
            }
        },
        "FunctionCompiler._add_node": {
            "name": "_add_node",
            "location": 943,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "FunctionCompiler.on_function": {
            "name": "on_function",
            "location": 966,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Set[str]",
                    "str",
                    "Union[str, 'Type']"
                ],
                "node": [
                    "Set[str]"
                ]
            }
        },
        "FunctionCompiler.compile": {
            "name": "compile",
            "location": 975,
            "return": [
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonCompiler.__init__": {
            "name": "__init__",
            "location": 1063,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonCompiler.is_valid_python_name": {
            "name": "is_valid_python_name",
            "location": 1077,
            "return": [
                "str",
                "type",
                "types.ModuleType"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "PythonCompiler.convert_to_valid_python_name": {
            "name": "convert_to_valid_python_name",
            "location": 1081,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PythonCompiler.get_label": {
            "name": "get_label",
            "location": 1093,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "PythonCompiler.run": {
            "name": "run",
            "location": 1105,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool"
                ],
                "backend": [
                    "Union[None, int, str]",
                    "int",
                    "bool",
                    "Sequence[str]",
                    "Union[List, str]"
                ]
            }
        },
        "PythonCompiler.has_node": {
            "name": "has_node",
            "location": 1168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "PythonCompiler.has_constant": {
            "name": "has_constant",
            "location": 1172,
            "return": [
                "List[str]",
                "bool",
                "List[Dict[str, Any]]",
                "Union[str, Tuple[str, ...]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "PythonCompiler.get_new_name": {
            "name": "get_new_name",
            "location": 1176,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "desired_name": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "PythonCompiler.ref": {
            "name": "ref",
            "location": 1184,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "PythonCompiler.get_graph_cache": {
            "name": "get_graph_cache",
            "location": 1191,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonCompiler.register_global": {
            "name": "register_global",
            "location": 1195,
            "return": [
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type['Declared']",
                    "int",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "PythonCompiler.convert_func": {
            "name": "convert_func",
            "location": 1212,
            "return": [
                "str",
                "Callable[..., Awaitable]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str"
                ]
            }
        },
        "PythonBackend.__init__": {
            "name": "__init__",
            "location": 1220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "List[str]",
                    "Union[str, int]",
                    "bool",
                    "Exception"
                ],
                "pdb": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "PythonBackend.compile": {
            "name": "compile",
            "location": 1238,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "int",
                    "Optional[Union[Any, Any]]",
                    "Union[Mapping[starfish.core.types.Coordinates, Any], Mapping[str, Any]]"
                ],
                "argspec": [
                    "str",
                    "types.CategoryType"
                ],
                "outspec": [
                    "str",
                    "types.CategoryType"
                ]
            }
        },
        "PythonBackend.supports_prim_group": {
            "name": "supports_prim_group",
            "location": 1253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "prim_group": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        }
    },
    "myia-master/myia/compile/backends/python/__init__.py": {},
    "myia-master/myia/debug/finite_diff.py": {
        "_zeros_like": {
            "name": "_zeros_like",
            "location": 15,
            "return": [
                "None",
                "Optional[str]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "T",
                    "None",
                    "bool",
                    "Optional[str]",
                    "list[typing.Any]",
                    "Optional[T]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "clean_args": {
            "name": "clean_args",
            "location": 42,
            "return": [
                "tuple[]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "args": []
            }
        },
        "gen_paths": {
            "name": "gen_paths",
            "location": 70,
            "return": [
                "",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "list",
                    "list[]"
                ],
                "path": [
                    "FrozenSet[str]",
                    "frozenset",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "resolve_path": {
            "name": "resolve_path",
            "location": 78,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "gen_variants": {
            "name": "gen_variants",
            "location": 145,
            "return": [
                "",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "gen": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NoTestGrad.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "GradTester.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "list[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "gfn": [
                    "bool",
                    "Optional[Callable[[Any], None]]",
                    "float",
                    "typing.Callable[typing.Any, None]",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ],
                "args": [],
                "argnames": [
                    "numpy.ndarray",
                    "str",
                    "List[float]",
                    "Callable",
                    "list",
                    "List[int]"
                ],
                "outnames": [
                    "None",
                    "int",
                    "numpy.array",
                    "raiden.utils.AdditionalHash",
                    "numpy.ndarray"
                ],
                "epsilon": [
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]",
                    "Union[float, Tuple[float, float]]",
                    "str"
                ],
                "rel_error": [
                    "float",
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[str, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "GradTester._set_result": {
            "name": "_set_result",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ],
                "opath": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "ipath": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "value": [
                    "bool",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "GradTester.compute_exact": {
            "name": "compute_exact",
            "location": 212,
            "return": [
                "dict[, ]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradTester.wiggle": {
            "name": "wiggle",
            "location": 233,
            "return": [
                "tuple[None]",
                "Optional[str]",
                "tuple[]",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None",
                    "Optional[numpy.array]",
                    "tuple[]",
                    "Optional[Tuple]",
                    "list[int]",
                    "Optional[numpy.ndarray]",
                    "List[int]"
                ]
            }
        },
        "GradTester.compute_finite_diff": {
            "name": "compute_finite_diff",
            "location": 240,
            "return": [
                "dict[, ]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradTester.compare": {
            "name": "compare",
            "location": 271,
            "return": [
                "dict[typing.Union[str,typing.Any], ]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradTester.assert_match": {
            "name": "assert_match",
            "location": 296,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradTester.compute_finite_diff.mkdiff": {
            "name": "mkdiff",
            "location": 259,
            "return": [
                "float",
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "myia-master/myia/debug/label.py": {
        "label": {
            "name": "label",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [],
                "labeler": [
                    "NodeLabeler"
                ]
            }
        },
        "CosmeticPrimitive.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "NodeLabeler.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_in_node": [
                    "bool"
                ],
                "relation_symbols": [
                    "dict[, ]"
                ],
                "default_name": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "NodeLabeler._root_name": {
            "name": "_root_name",
            "location": 68,
            "return": [
                "tuple[list[]]",
                "tuple[]",
                "tuple[typing.Optional[list[]]]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "force": []
            }
        },
        "NodeLabeler.combine_relations": {
            "name": "combine_relations",
            "location": 83,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "root_name": [],
                "relations": []
            }
        },
        "NodeLabeler.name": {
            "name": "name",
            "location": 100,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "force": [
                    "bool"
                ]
            }
        },
        "NodeLabeler.label": {
            "name": "label",
            "location": 105,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "force": [
                    "None"
                ],
                "fn_label": [
                    "None"
                ]
            }
        },
        "NodeLabeler.const_fn": {
            "name": "const_fn",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "myia-master/myia/debug/traceback.py": {
        "skip_node": {
            "name": "skip_node",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "int",
                    "list[int]",
                    "T",
                    "List[int]"
                ]
            }
        },
        "_get_call": {
            "name": "_get_call",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "ref": [
                    "bool",
                    "raiden.utils.BlockIdentifier",
                    "T"
                ]
            }
        },
        "_get_loc": {
            "name": "_get_loc",
            "location": 33,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "node": [
                    "anf.ANFNode"
                ]
            }
        },
        "_get_info": {
            "name": "_get_info",
            "location": 53,
            "return": [
                "Tuple[(Any, Any, Optional[str], Any, Any, bool)]"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "_pretty_pblock": {
            "name": "_pretty_pblock",
            "location": 83,
            "return": [
                "trezor.utils.Writer",
                "utils.Node"
            ],
            "arguments": {
                "pb": [
                    "bool",
                    "str"
                ],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "_pretty_primfunc": {
            "name": "_pretty_primfunc",
            "location": 88,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "_pretty_graphfunc": {
            "name": "_pretty_graphfunc",
            "location": 93,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "_format_call": {
            "name": "_format_call",
            "location": 97,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "fn": [
                    "float",
                    "dict",
                    "dict[, ]",
                    "tuple",
                    "tuple[]"
                ],
                "args": []
            }
        },
        "_show_location": {
            "name": "_show_location",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "label": [
                    "str",
                    "int",
                    "bytes"
                ],
                "mode": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "color": [
                    "typing.Text",
                    "str",
                    "int",
                    "bytes"
                ],
                "file": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_print_lines": {
            "name": "_print_lines",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str"
                ],
                "l1": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "c1": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, Any]"
                ],
                "l2": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "c2": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, Any]"
                ],
                "label": [
                    "str",
                    "typing.Text"
                ],
                "mode": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "color": [
                    "str",
                    "typing.Text"
                ],
                "file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "skip_ref": {
            "name": "skip_ref",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "ref": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "print_ref": {
            "name": "print_ref",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "file": [
                    "str",
                    "TextIO",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "print_inference_error": {
            "name": "print_inference_error",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "print_myia_syntax_error": {
            "name": "print_myia_syntax_error",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "TextIO",
                    "typing.TextIO"
                ],
                "file": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "myia_excepthook": {
            "name": "myia_excepthook",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_type": [
                    "Type[BaseException]",
                    "typing.Type",
                    "BaseException",
                    "Optional[BaseException]",
                    "None"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "Optional[BaseException]",
                    "None",
                    "BaseException"
                ],
                "tb": [
                    "Type[BaseException]",
                    "typing.Type",
                    "BaseException",
                    "Optional[BaseException]",
                    "None"
                ]
            }
        },
        "print_myia_warning": {
            "name": "print_myia_warning",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "warning": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "file": [
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "myia_warning": {
            "name": "myia_warning",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "category": [],
                "filename": [
                    "bool",
                    "str",
                    "hackathon.utils.utils.ResultsMessage",
                    "None",
                    "Optional[str]"
                ],
                "lineno": [
                    "bool",
                    "str",
                    "hackathon.utils.utils.ResultsMessage",
                    "None",
                    "Optional[str]"
                ],
                "file": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "line": [
                    "bool",
                    "str",
                    "hackathon.utils.utils.ResultsMessage",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_PBlock.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "float",
                    "bool"
                ],
                "separator": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "myia-master/myia/debug/utils.py": {
        "mixin": {
            "name": "mixin",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "mixin.apply": {
            "name": "apply",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "\"PMap[Tk, Tv]\"",
                    "list",
                    "Sequence"
                ]
            }
        },
        "GraphIndex.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "labeler": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "succ": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "include": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "GraphIndex._acquire": {
            "name": "_acquire",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "mypy.types.Instance",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "GraphIndex.get_all": {
            "name": "get_all",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "tuple",
                    "tuple[]",
                    "Callable[[KT], VT]",
                    "typing.Callable[KT, VT]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "GraphIndex.__getitem__": {
            "name": "__getitem__",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "tuple[]",
                    "T",
                    "tuple",
                    "typing.Hashable",
                    "Hashable"
                ]
            }
        }
    },
    "myia-master/myia/frontends/abstract_types.py": {},
    "myia-master/myia/frontends/__init__.py": {
        "import_mod": {
            "name": "import_mod",
            "location": 20,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "pkg": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "collect_frontend_plugins": {
            "name": "collect_frontend_plugins",
            "location": 32,
            "return": [
                "Dict[(str, Callable[([], Any)])]"
            ],
            "arguments": {}
        },
        "activate_frontend": {
            "name": "activate_frontend",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "import_mod.loader": {
            "name": "loader",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/ir/anf.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.plain": {
            "name": "plain",
            "location": 68,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "float",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.abstract": {
            "name": "abstract",
            "location": 78,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "type",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.output": {
            "name": "output",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Graph.parameter_names": {
            "name": "parameter_names",
            "location": 120,
            "return": [
                "list[]",
                "List[str]",
                "bool",
                "int",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_parameter": {
            "name": "add_parameter",
            "location": 126,
            "return": [
                "Parameter",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.constant": {
            "name": "constant",
            "location": 136,
            "return": [
                "Constant",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Graph.apply": {
            "name": "apply",
            "location": 140,
            "return": [
                "Apply",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.make_new": {
            "name": "make_new",
            "location": 147,
            "return": [
                "str",
                "Iterable[T]",
                "list[]",
                "Callable[[T], bool]",
                "dict[str, str]",
                "tuple[typing.Union[float,float,float]]",
                "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[tuple[typing.Union[int,bool]]]",
                "list[float]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "typing.Text",
                    "bool",
                    "int"
                ]
            }
        },
        "Graph.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 172,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Graph.make_signature": {
            "name": "make_signature",
            "location": 179,
            "return": [
                "None",
                "Optional[str]",
                "tuple[typing.Union[int,list[]]]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Graph.generate_graph": {
            "name": "generate_graph",
            "location": 198,
            "return": [
                "Mapping",
                "int",
                "Graph",
                "str",
                "dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str",
                    "bool"
                ]
            }
        },
        "Graph.set_flags": {
            "name": "set_flags",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.has_flags": {
            "name": "has_flags",
            "location": 343,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.manager": {
            "name": "manager",
            "location": 352,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.nodes": {
            "name": "nodes",
            "location": 359,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.call_sites": {
            "name": "call_sites",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.higher_order_sites": {
            "name": "higher_order_sites",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.constants": {
            "name": "constants",
            "location": 374,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.free_variables_direct": {
            "name": "free_variables_direct",
            "location": 379,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.free_variables_total": {
            "name": "free_variables_total",
            "location": 384,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.free_variables_extended": {
            "name": "free_variables_extended",
            "location": 392,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.graphs_used": {
            "name": "graphs_used",
            "location": 400,
            "return": [
                "str",
                "Optional[str]",
                "Union[None, str]",
                "Callable",
                "list",
                "Dict[str, Any]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.graph_users": {
            "name": "graph_users",
            "location": 405,
            "return": [
                "bool",
                "recidiviz.utils.regions.Region",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.graph_dependencies_direct": {
            "name": "graph_dependencies_direct",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.graph_dependencies_total": {
            "name": "graph_dependencies_total",
            "location": 415,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.parent": {
            "name": "parent",
            "location": 420,
            "return": [
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.children": {
            "name": "children",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.scope": {
            "name": "scope",
            "location": 430,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.graphs_reachable": {
            "name": "graphs_reachable",
            "location": 435,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.recursive": {
            "name": "recursive",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__str__": {
            "name": "__str__",
            "location": 448,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__repr__": {
            "name": "__repr__",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]",
                    "typing.Callable[None, bool]"
                ],
                "graph": [
                    "List[Tuple[int, float]]",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "str"
                ]
            }
        },
        "ANFNode.shape": {
            "name": "shape",
            "location": 500,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.incoming": {
            "name": "incoming",
            "location": 505,
            "return": [
                "set",
                "Iterator[str]",
                "Iterable[T]",
                "Iterator[int]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.__str__": {
            "name": "__str__",
            "location": 509,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.is_apply": {
            "name": "is_apply",
            "location": 518,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "T"
                ]
            }
        },
        "ANFNode.is_parameter": {
            "name": "is_parameter",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.is_constant": {
            "name": "is_constant",
            "location": 526,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ]
            }
        },
        "ANFNode.is_constant_graph": {
            "name": "is_constant_graph",
            "location": 530,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANFNode.is_special": {
            "name": "is_special",
            "location": 534,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ]
            }
        },
        "ANFNode.match": {
            "name": "match",
            "location": 538,
            "return": [
                "str",
                "utils.Node",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "Apply.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "graph": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "Apply.is_apply": {
            "name": "is_apply",
            "location": 558,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[Union[str, Any]]",
                    "str",
                    "typing.Any",
                    "T",
                    "Optional[str]",
                    "Optional[object]",
                    "Optional[Any]"
                ]
            }
        },
        "Apply.__visit__": {
            "name": "__visit__",
            "location": 566,
            "return": [
                "Apply",
                "Iterable[object]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Apply.__repr__": {
            "name": "__repr__",
            "location": 573,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Parameter.is_parameter": {
            "name": "is_parameter",
            "location": 595,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__repr__": {
            "name": "__repr__",
            "location": 599,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Constant.is_constant": {
            "name": "is_constant",
            "location": 621,
            "return": [
                "bool",
                "str",
                "tuple",
                "int",
                "dict",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "Union[int, float, str]",
                    "Exception",
                    "str"
                ]
            }
        },
        "Constant.is_constant_graph": {
            "name": "is_constant_graph",
            "location": 625,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__visit__": {
            "name": "__visit__",
            "location": 629,
            "return": [
                "dict",
                "Constant"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Constant.__str__": {
            "name": "__str__",
            "location": 634,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "bytes",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__repr__": {
            "name": "__repr__",
            "location": 637,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "Union[type, Tuple[type, ...]]",
                "int",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Special.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "special": [
                    "int",
                    "float",
                    "bool"
                ],
                "graph": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "Special.is_special": {
            "name": "is_special",
            "location": 658,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "List[str]"
                ]
            }
        },
        "Special.__str__": {
            "name": "__str__",
            "location": 662,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Special.__repr__": {
            "name": "__repr__",
            "location": 665,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarNode.__var__": {
            "name": "__var__",
            "location": 673,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/ir/clone.py": {
        "clone": {
            "name": "clone",
            "location": 472,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "total": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "relation": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "clone_constants": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "graph_relation": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "transformable_clone": {
            "name": "transformable_clone",
            "location": 485,
            "return": [
                "Graph",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [],
                "relation": [
                    "typing.Text",
                    "Union[None, int, str]",
                    "int",
                    "Callable[..., Awaitable]",
                    "Callable"
                ]
            }
        },
        "GraphRemapper.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "int",
                    "float",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "GraphRemapper.get_graph": {
            "name": "get_graph",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool"
                ]
            }
        },
        "GraphRemapper.gen_graph": {
            "name": "gen_graph",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GraphRemapper.gen_parameter": {
            "name": "gen_parameter",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "Iterator[Tuple[str, str]]"
                ],
                "new_graph": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Iterable[_]",
                    "Iterable[T]",
                    "Iterator[Tuple[str, str]]"
                ],
                "node": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "Iterator[Tuple[str, str]]"
                ]
            }
        },
        "GraphRemapper.gen_apply": {
            "name": "gen_apply",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "new_graph": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "node": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "GraphRemapper.gen_constant": {
            "name": "gen_constant",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "new_graph": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "node": [
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "GraphRemapper.gen_constant_graph": {
            "name": "gen_constant_graph",
            "location": 93,
            "return": [
                "str",
                "Tuple[str, float]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float"
                ],
                "new_graph": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float"
                ],
                "ct": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "GraphRemapper.gen_rogue_parameter": {
            "name": "gen_rogue_parameter",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "list[float]",
                    "List[float]",
                    "bool",
                    "T",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "new_graph": [
                    "list[float]",
                    "List[float]",
                    "bool",
                    "T",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "p": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "GraphRemapper.remap_node": {
            "name": "remap_node",
            "location": 107,
            "return": [
                "bool",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "None",
                    "Dict[str, str]",
                    "dataclasses.Field",
                    "T",
                    "Optional[str]"
                ],
                "graph": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "node": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "new_graph": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "new_node": [
                    "str",
                    "dict",
                    "bool"
                ],
                "link": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str, Any]]",
                    "str",
                    "Callable",
                    "typing.Any",
                    "Optional[List[Any]]",
                    "typing.Callable[, ]",
                    "Optional[List[\"CreativeWorkTypes\"]]",
                    "list[typing.Any]",
                    "Optional[\"CreativeWorkTypes\"]",
                    "list[C]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "GraphRemapper.link_apply": {
            "name": "link_apply",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "typing.Iterator",
                    "bool",
                    "Iterator[str]",
                    "list[str]",
                    "Iterable[Any]",
                    "List[str]",
                    "set[str]",
                    "Set[str]"
                ]
            }
        },
        "GraphRemapper.finalize_graph": {
            "name": "finalize_graph",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Optional[str]",
                    "str",
                    "List[float]",
                    "None",
                    "list[float]"
                ],
                "new_graph": [
                    "Optional[str]",
                    "str",
                    "List[float]",
                    "None",
                    "list[float]"
                ]
            }
        },
        "GraphRemapper.generate": {
            "name": "generate",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRemapper.populate": {
            "name": "populate",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRemapper.link": {
            "name": "link",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRemapper.finalize": {
            "name": "finalize",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphRemapper.run": {
            "name": "run",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicRemapper.gen_graph": {
            "name": "gen_graph",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Type[BaseException]",
                    "typing.Type"
                ]
            }
        },
        "BasicRemapper.gen_parameter": {
            "name": "gen_parameter",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "dict[str, set[str]]",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "\"Counter\""
                ],
                "new_graph": [
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ],
                "p": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "BasicRemapper.gen_apply": {
            "name": "gen_apply",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "list[int]",
                    "List[int]",
                    "int",
                    "str",
                    "Union[int, float]",
                    "float",
                    "utils.Node",
                    "bool"
                ],
                "new_graph": [
                    "callable",
                    "typing.Callable[, ]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ],
                "node": [
                    "typing.Type",
                    "str",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "BasicRemapper.gen_constant": {
            "name": "gen_constant",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "new_graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "constant": [
                    "float",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "CloneRemapper.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "inlines": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "manager": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "relation": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "graph_repl": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "graph_relation": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "clone_constants": [
                    "int",
                    "float",
                    "bool"
                ],
                "set_abstract": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "set_annotation": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "CloneRemapper.remap_node": {
            "name": "remap_node",
            "location": 271,
            "return": [
                "dict[, ]",
                "float",
                "str",
                "int",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "Union[str, Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[dataclasses.Field]",
                    "Optional[list]"
                ],
                "graph": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "Union[str, Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[dataclasses.Field]",
                    "Optional[list]"
                ],
                "node": [
                    "str",
                    "float",
                    "typing.Iterable[str]",
                    "Union[str, Iterable[str]]",
                    "utils.mssql_counters.Section",
                    "dict"
                ],
                "new_graph": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "Union[str, Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[dataclasses.Field]",
                    "Optional[list]"
                ],
                "new_node": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "Union[str, Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[dataclasses.Field]",
                    "Optional[list]"
                ],
                "link": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "Union[str, Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[dataclasses.Field]",
                    "Optional[list]"
                ]
            }
        },
        "CloneRemapper.get_graph": {
            "name": "get_graph",
            "location": 280,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "int"
                ]
            }
        },
        "CloneRemapper.gen_graph": {
            "name": "gen_graph",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bytes",
                    "int",
                    "Callable[..., bool]",
                    "typing.Callable[..., bool]"
                ]
            }
        },
        "CloneRemapper.gen_rogue_parameter": {
            "name": "gen_rogue_parameter",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float",
                    "bool",
                    "list[B]",
                    "List[\"Block\"]"
                ],
                "new_graph": [
                    "str",
                    "bool",
                    "Callable[[None], None]",
                    "typing.Callable[None, None]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "node": [
                    "typing.Type",
                    "str",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "CloneRemapper.gen_parameter": {
            "name": "gen_parameter",
            "location": 308,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "new_graph": [
                    "dict[str, set[str]]",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "\"Counter\""
                ],
                "p": [
                    "dict[str, set[str]]",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "\"Counter\""
                ]
            }
        },
        "CloneRemapper.gen_constant": {
            "name": "gen_constant",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "new_graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "constant": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CloneRemapper.gen_constant_graph": {
            "name": "gen_constant_graph",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "new_graph": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "constant": [
                    "List[int]",
                    "float",
                    "list[int]"
                ]
            }
        },
        "CloneRemapper.link_apply": {
            "name": "link_apply",
            "location": 327,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CloneRemapper.finalize_graph": {
            "name": "finalize_graph",
            "location": 335,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "new_graph": [
                    "Iterable[str]",
                    "str",
                    "typing.Iterable[str]",
                    "float"
                ]
            }
        },
        "RemapperSet.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "RemapperSet.run": {
            "name": "run",
            "location": 352,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemapperSet.__getitem__": {
            "name": "__getitem__",
            "location": 368,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]",
                    "raiden.utils.Dict",
                    "typing.Mapping",
                    "List[str]",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        },
        "GraphCloner.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphCloner.collect_graphs": {
            "name": "collect_graphs",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "str",
                    "Set[int]",
                    "set[int]",
                    "List[int]",
                    "list[int]",
                    "Union[tuple, list]",
                    "tuple[]",
                    "float",
                    "list[]"
                ],
                "inlines": [
                    "dict[, ]",
                    "int",
                    "Optional[Dict]",
                    "float",
                    "T"
                ]
            }
        },
        "GraphCloner.__getitem__": {
            "name": "__getitem__",
            "location": 464,
            "return": [
                "str",
                "Tuple[float, float]",
                "recidiviz.utils.regions.Region",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool"
                ]
            }
        },
        "GraphCloner.collect_graphs.expand_clones": {
            "name": "expand_clones",
            "location": 443,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "bytes",
                    "Set[cmk.utils.type_defs.HostName]",
                    "dict"
                ]
            }
        }
    },
    "myia-master/myia/ir/manager.py": {
        "manage": {
            "name": "manage",
            "location": 15,
            "return": [
                "GraphManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ParentProxy.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ParentProxy.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParentProxy.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "PerGraphStatistic.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "int"
                ]
            }
        },
        "PerGraphStatistic.reset": {
            "name": "reset",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerGraphStatistic._on_add_graph": {
            "name": "_on_add_graph",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "graph": [
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "PerGraphStatistic._on_drop_graph": {
            "name": "_on_drop_graph",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "graph": [
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PerGraphStatistic._on_add_node": {
            "name": "_on_add_node",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[Iterable[str]]",
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "node": [
                    "Optional[Iterable[str]]",
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "PerGraphStatistic._on_drop_node": {
            "name": "_on_drop_node",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "List[str]",
                    "list[str]"
                ],
                "node": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "PerGraphStatistic._on_add_edge": {
            "name": "_on_add_edge",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "node": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "key": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "value": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PerGraphStatistic._on_drop_edge": {
            "name": "_on_drop_edge",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "node": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]"
                ]
            }
        },
        "NodesStatistic._on_add_node": {
            "name": "_on_add_node",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[Iterable[str]]",
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "node": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Callable[[Any], None]",
                    "typing.Callable[typing.Any, None]"
                ]
            }
        },
        "NodesStatistic._on_drop_node": {
            "name": "_on_drop_node",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "List[str]",
                    "list[str]"
                ],
                "node": [
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "int",
                    "Dict[str, Tuple[str, str]]",
                    "list[]",
                    "None",
                    "Optional[List]",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "CounterStatistic.inc": {
            "name": "inc",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "str",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "int",
                    "typing.Callable[object, typing.Any]",
                    "Optional[Callable[[object], Any]]",
                    "None"
                ],
                "key": [
                    "int",
                    "str",
                    "IO[str]"
                ],
                "qty": [
                    "int",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "CounterStatistic.dec": {
            "name": "dec",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "str",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "int",
                    "typing.Callable[object, typing.Any]",
                    "Optional[Callable[[object], Any]]",
                    "None"
                ],
                "key": [
                    "str",
                    "KT"
                ],
                "qty": [
                    "int",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "CounterStatistic.mod": {
            "name": "mod",
            "location": 140,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "qty": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CounterStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "direction": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CounterStatistic._on_add_edge": {
            "name": "_on_add_edge",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "node": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "key": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "inp": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "CounterStatistic._on_drop_edge": {
            "name": "_on_drop_edge",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Iterator[T]",
                    "typing.Iterator",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ],
                "node": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Iterator[T]",
                    "typing.Iterator",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Iterator[T]",
                    "typing.Iterator",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ],
                "inp": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Iterator[T]",
                    "typing.Iterator",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "ConstantsStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "int",
                    "Iterable[T]",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics",
                    "List['Token']"
                ],
                "direction": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "GraphConstantsStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "Dict[str, List]",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "direction": [
                    "int",
                    "float",
                    "Optional[float]",
                    "str",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CallSitesStatistic.constructor": {
            "name": "constructor",
            "location": 180,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSitesStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "Optional[dict]",
                    "dict[, ]",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "T",
                    "List[str]"
                ],
                "inp": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "AnyStr"
                ],
                "direction": [
                    "Optional[dict]",
                    "dict[, ]",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HigherOrderSitesStatistic.constructor": {
            "name": "constructor",
            "location": 191,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderSitesStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "dict",
                    "str"
                ],
                "key": [
                    "Dict[str, Callable]",
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "dict",
                    "Callable",
                    "Collection[str]"
                ],
                "inp": [
                    "Dict[str, Callable]",
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "dict",
                    "Callable",
                    "Collection[str]"
                ],
                "direction": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "FVDirectStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "direction": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GDepDirectStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "direction": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GDepProxStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "Dict[str, List]",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "direction": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GDepProxInvStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "typing.Type",
                    "int",
                    "Type",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "str",
                    "Dict[str, List]",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "direction": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GraphsUsedStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "str",
                    "int",
                    "Union[str, dict]",
                    "bytes",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "Dict[str, Set[str]]",
                    "str",
                    "type",
                    "Mapping[Any, Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Type[object]"
                ],
                "direction": [
                    "str",
                    "int",
                    "Union[str, dict]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "GraphUsersStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "Optional[dict]",
                    "dict[, ]",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "Dict[str, str]",
                    "type",
                    "Mapping[Any, Any]",
                    "tuple",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "Hashable",
                    "str"
                ],
                "direction": [
                    "Optional[dict]",
                    "dict[, ]",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NestingStatistic.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "NestingStatistic._on_invalidate_nesting": {
            "name": "_on_invalidate_nesting",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "NestingStatistic._on_add_graph": {
            "name": "_on_add_graph",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "graph": []
            }
        },
        "NestingStatistic._on_drop_graph": {
            "name": "_on_drop_graph",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "graph": [
                    "str"
                ]
            }
        },
        "NestingStatisticWholesale.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "NestingStatisticWholesale.reset": {
            "name": "reset",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestingStatisticWholesale.recompute": {
            "name": "recompute",
            "location": 308,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestingStatisticWholesale._recompute": {
            "name": "_recompute",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestingStatisticGraphWise.__getitem__": {
            "name": "__getitem__",
            "location": 320,
            "return": [
                "str",
                "int",
                "list[int]",
                "List[int]",
                "typing.Iterator",
                "utils.Node",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "tuple[]",
                    "bool",
                    "tuple",
                    "float",
                    "typing.Callable[T, bool]",
                    "int",
                    "Callable[[T], bool]"
                ]
            }
        },
        "UsesStatistic.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "UsesStatistic._on_invalidate_uses": {
            "name": "_on_invalidate_uses",
            "location": 342,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "UsesStatistic._on_add_graph": {
            "name": "_on_add_graph",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "graph": []
            }
        },
        "UsesStatistic._on_drop_graph": {
            "name": "_on_drop_graph",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "graph": [
                    "str"
                ]
            }
        },
        "UsesStatistic.__getitem__": {
            "name": "__getitem__",
            "location": 351,
            "return": [
                "str",
                "int",
                "list[int]",
                "List[int]",
                "typing.Iterator",
                "utils.Node",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "tuple[]",
                    "bool",
                    "tuple",
                    "float",
                    "typing.Callable[T, bool]",
                    "int",
                    "Callable[[T], bool]"
                ]
            }
        },
        "GDepTotalStatistic._compute": {
            "name": "_compute",
            "location": 363,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "list",
                    "list[]"
                ]
            }
        },
        "GDepTotalStatistic._compute_nocache": {
            "name": "_compute_nocache",
            "location": 368,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Callable",
                "Optional[str]",
                "int",
                "Hashable",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ParentStatistic._compute": {
            "name": "_compute",
            "location": 386,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "bool",
                    "str"
                ]
            }
        },
        "ChildrenStatistic._compute": {
            "name": "_compute",
            "location": 413,
            "return": [
                "set[]",
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "float",
                    "int"
                ]
            }
        },
        "ScopeStatistic._compute": {
            "name": "_compute",
            "location": 422,
            "return": [
                "dict[, ]",
                "int",
                "set[typing.Union[int,typing.Callable[, ],str]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FVTotalStatistic._recompute": {
            "name": "_recompute",
            "location": 433,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FVTotalStatistic._on_mod_edge": {
            "name": "_on_mod_edge",
            "location": 457,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "inp": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Iterable[int]",
                    "Dict[str, Union[str, int, bool]]",
                    "List[str]",
                    "str"
                ],
                "direction": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "FVExtendedStatistic.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FVExtendedStatistic.__getitem__": {
            "name": "__getitem__",
            "location": 487,
            "return": [
                "list[]",
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GraphsReachableStatistic._compute": {
            "name": "_compute",
            "location": 502,
            "return": [
                "int",
                "Callable",
                "dict[typing.Any, bytes]",
                "str",
                "frozenset",
                "dict[str, str]",
                "dict[int, typing.Any]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RecursiveStatistic.__getitem__": {
            "name": "__getitem__",
            "location": 520,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GraphManager.__init__": {
            "name": "__init__",
            "location": 598,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager.gc": {
            "name": "gc",
            "location": 609,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager.reset": {
            "name": "reset",
            "location": 625,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager.set_opaque_condition": {
            "name": "set_opaque_condition",
            "location": 679,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "bool",
                    "float"
                ]
            }
        },
        "GraphManager.add_graph": {
            "name": "add_graph",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "str"
                ],
                "root": [
                    "bool",
                    "Dict[str, bool]",
                    "tuple",
                    "str"
                ]
            }
        },
        "GraphManager.keep_roots": {
            "name": "keep_roots",
            "location": 694,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager._ensure_graph": {
            "name": "_ensure_graph",
            "location": 714,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Callable[..., bool]",
                    "typing.Callable[..., bool]",
                    "Deque",
                    "typing.Deque"
                ]
            }
        },
        "GraphManager._maybe_drop_graphs": {
            "name": "_maybe_drop_graphs",
            "location": 724,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "Iterable[T]",
                    "int",
                    "typing.Iterable[T]",
                    "str",
                    "Hashable",
                    "typing.Hashable"
                ],
                "ignore_users": [
                    "bool",
                    "int",
                    "str",
                    "Tuple[str, str, str]"
                ],
                "recursive": [
                    "bool",
                    "float",
                    "Set[str]"
                ]
            }
        },
        "GraphManager._drop_all": {
            "name": "_drop_all",
            "location": 746,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dropped": [],
                "drop_nodes": [
                    "bool"
                ]
            }
        },
        "GraphManager._process_edge": {
            "name": "_process_edge",
            "location": 760,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "inp": [
                    "str",
                    "type",
                    "Dict[str, Any]"
                ],
                "direction": [
                    "Hashable",
                    "str",
                    "typing.Hashable",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "GraphManager._process_inputs": {
            "name": "_process_inputs",
            "location": 789,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "anf.ANFNode"
                ],
                "direction": []
            }
        },
        "GraphManager._acquire_nodes": {
            "name": "_acquire_nodes",
            "location": 802,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "str",
                    "bool"
                ]
            }
        },
        "GraphManager._maybe_drop_nodes": {
            "name": "_maybe_drop_nodes",
            "location": 826,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "List[str]",
                "set[]",
                "typing.DefaultDict",
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "str"
                ]
            }
        },
        "GraphManager._ensure_statistic": {
            "name": "_ensure_statistic",
            "location": 852,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "stat": [
                    "IO",
                    "Callable",
                    "str",
                    "Tuple[dict, dict]"
                ]
            }
        },
        "GraphManager.free_variables_total": {
            "name": "free_variables_total",
            "location": 858,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager.set_parameters": {
            "name": "set_parameters",
            "location": 867,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "parameters": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "GraphManager.replace": {
            "name": "replace",
            "location": 872,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "old_node": [
                    "int"
                ],
                "new_node": [
                    "int"
                ]
            }
        },
        "GraphManager.set_edge": {
            "name": "set_edge",
            "location": 877,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "key": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "value": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "GraphManager.transact": {
            "name": "transact",
            "location": 882,
            "return": [
                "GraphTransaction",
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphManager._commit_changes": {
            "name": "_commit_changes",
            "location": 891,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GraphTransaction.__init__": {
            "name": "__init__",
            "location": 950,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphTransaction.set_parameters": {
            "name": "set_parameters",
            "location": 957,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "parameters": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GraphTransaction.replace": {
            "name": "replace",
            "location": 961,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "old_node": [
                    "int",
                    "float"
                ],
                "new_node": [
                    "List[Type]",
                    "list[typing.Type]",
                    "Optional[type]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "GraphTransaction.set_edge": {
            "name": "set_edge",
            "location": 974,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "key": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "GraphTransaction.commit": {
            "name": "commit",
            "location": 982,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTransaction.undo": {
            "name": "undo",
            "location": 987,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTransaction.__enter__": {
            "name": "__enter__",
            "location": 992,
            "return": [
                "GraphTransaction",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTransaction.__exit__": {
            "name": "__exit__",
            "location": 995,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[Any]",
                    "typing.Type",
                    "Optional[str]",
                    "str",
                    "Optional[BaseException]",
                    "None",
                    "BaseException"
                ],
                "value": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "tb": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "FVTotalStatistic._on_mod_edge._update": {
            "name": "_update",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stop_graph": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "fv": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GraphManager._acquire_nodes.limit": {
            "name": "limit",
            "location": 805,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/ir/metagraph.py": {
        "TypeDispatchError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metagraph": [],
                "types": [
                    "Tuple[str]",
                    "Optional[bool]"
                ],
                "refs": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MetaGraph.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "MetaGraph.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 37,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MetaGraph.make_signature": {
            "name": "make_signature",
            "location": 44,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MetaGraph.generate_graph": {
            "name": "generate_graph",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MetaGraph.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultitypeGraph.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "entries": [
                    "Dict[str, str]",
                    "Union[str, int]",
                    "object",
                    "int"
                ]
            }
        },
        "MultitypeGraph.normalize_args_sync": {
            "name": "normalize_args_sync",
            "location": 71,
            "return": [
                "list",
                "List[List[int]]",
                "str",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MultitypeGraph.register": {
            "name": "register",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultitypeGraph._getfn": {
            "name": "_getfn",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "type",
                    "dict"
                ]
            }
        },
        "MultitypeGraph.generate_graph": {
            "name": "generate_graph",
            "location": 92,
            "return": [
                "core_lib.core.parser.ParsingContext",
                "Tuple[Dict[str, str], List[str]]",
                "utils.parser.BinaryParser"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MultitypeGraph.__call__": {
            "name": "__call__",
            "location": 96,
            "return": [
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultitypeGraph.register.deco": {
            "name": "deco",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/ir/utils.py": {
        "succ_deep": {
            "name": "succ_deep",
            "location": 20,
            "return": [
                "list[]",
                "str",
                "int",
                "Callable",
                "dict"
            ],
            "arguments": {
                "node": [
                    "anf.ANFNode"
                ]
            }
        },
        "succ_deeper": {
            "name": "succ_deeper",
            "location": 32,
            "return": [
                "list[]",
                "str",
                "int",
                "Callable",
                "dict"
            ],
            "arguments": {
                "node": [
                    "anf.ANFNode",
                    "Optional[str]"
                ]
            }
        },
        "succ_incoming": {
            "name": "succ_incoming",
            "location": 46,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "int",
                    "anf.ANFNode"
                ]
            }
        },
        "exclude_from_set": {
            "name": "exclude_from_set",
            "location": 56,
            "return": [
                "bool",
                "str",
                "set",
                "List[str]"
            ],
            "arguments": {
                "stops": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "freevars_boundary": {
            "name": "freevars_boundary",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include_boundary": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "dfs": {
            "name": "dfs",
            "location": 93,
            "return": [
                "bool",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "str",
                    "anf.ANFNode",
                    "typing.IO",
                    "IO"
                ],
                "follow_graph": [
                    "bool",
                    "anf.ANFNode",
                    "str",
                    "IO"
                ]
            }
        },
        "toposort": {
            "name": "toposort",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "str",
                    "anf.ANFNode",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ]
            }
        },
        "_same_node_shallow": {
            "name": "_same_node_shallow",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "n1": [
                    "int",
                    "Dict[str, Union[int, str]]"
                ],
                "n2": [
                    "int",
                    "Dict[str, Union[int, str]]"
                ],
                "equiv": [
                    "str",
                    "int",
                    "Dict[int, List[Any]]",
                    "Collection[\"Issue\"]",
                    "Dict[str, Union[int, str]]",
                    "Union[str, int]"
                ]
            }
        },
        "_same_node": {
            "name": "_same_node",
            "location": 127,
            "return": [
                "bool",
                "str",
                "Union[type, Tuple[type, ...]]",
                "Union[int, float, complex]",
                "Dict[str, int]"
            ],
            "arguments": {
                "n1": [
                    "int"
                ],
                "n2": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "equiv": [
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_same_subgraph": {
            "name": "_same_subgraph",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "root1": [
                    "typing.IO",
                    "IO",
                    "int",
                    "typing.Iterator",
                    "str",
                    "kedro.io.DataCatalog",
                    "Iterator[Any]"
                ],
                "root2": [
                    "typing.IO",
                    "IO",
                    "int",
                    "typing.Iterator",
                    "str",
                    "kedro.io.DataCatalog",
                    "Iterator[Any]"
                ],
                "equiv": [
                    "str"
                ]
            }
        },
        "isomorphic": {
            "name": "isomorphic",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "g1": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "dict",
                    "None",
                    "Dict[str, float]",
                    "dict[, ]",
                    "dict[str, float]"
                ],
                "g2": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "dict",
                    "None",
                    "Dict[str, float]",
                    "dict[, ]",
                    "dict[str, float]"
                ],
                "equiv": [
                    "Optional[utils.diskstaSection]",
                    "None"
                ]
            }
        },
        "sexp_to_node": {
            "name": "sexp_to_node",
            "location": 208,
            "return": [
                "str",
                "int",
                "Apply",
                "list",
                "VarNode",
                "Dict[str, Any]",
                "ANFNode",
                "Constant"
            ],
            "arguments": {
                "sexp": [
                    "int"
                ],
                "graph": [
                    "float",
                    "raiden.utils.Any"
                ],
                "multigraph": [
                    "bool",
                    "raiden.utils.Any",
                    "Mapping[str, Union[int, slice]]",
                    "str",
                    "FrozenSet[int]"
                ],
                "sub": [
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "sexp_to_graph": {
            "name": "sexp_to_graph",
            "location": 244,
            "return": [
                "Graph",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "sexp": [
                    "str"
                ]
            }
        },
        "repr_node": {
            "name": "repr_node",
            "location": 255,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "List[str]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "node": [
                    "Optional[\"Node\"]",
                    "Optional[Any]",
                    "mypy.nodes.Var"
                ]
            }
        },
        "_print_node": {
            "name": "_print_node",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "list",
                    "bytes"
                ],
                "buf": [
                    "list",
                    "bytes",
                    "list[]",
                    "str"
                ],
                "offset": [
                    "mode.utils.types.graphs._T",
                    "int"
                ]
            }
        },
        "print_node": {
            "name": "print_node",
            "location": 282,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "node": []
            }
        },
        "print_graph": {
            "name": "print_graph",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Iterable",
                    "typing.Iterable[]"
                ],
                "allow_cycles": [
                    "bool",
                    "str",
                    "Tuple[str, bool]",
                    "int",
                    "float"
                ]
            }
        },
        "exclude_from_set.include": {
            "name": "include",
            "location": 61,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "freevars_boundary.include": {
            "name": "include",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "print_graph._succ_deep_once": {
            "name": "_succ_deep_once",
            "location": 319,
            "return": [
                "list[]",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "node": [
                    "anf.ANFNode",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "myia-master/myia/ir/__init__.py": {},
    "myia-master/myia/operations/gen.py": {
        "lop": {
            "name": "lop",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "op": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "type": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "name": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "rop": {
            "name": "rop",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "op": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "type": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "name": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "reverse_binop": {
            "name": "reverse_binop",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "op": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "lop.protocol": {
            "name": "protocol",
            "location": 14,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "rop.protocol": {
            "name": "protocol",
            "location": 30,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "reverse_binop.protocol": {
            "name": "protocol",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_abstract_array.py": {},
    "myia-master/myia/operations/macro_apply.py": {
        "pyimpl_apply": {
            "name": "pyimpl_apply",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "tuple",
                    "tuple[]",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_array_len.py": {},
    "myia-master/myia/operations/macro_call_object.py": {},
    "myia-master/myia/operations/macro_conv2d_grad_input.py": {
        "_get_int_tuple": {
            "name": "_get_int_tuple",
            "location": 9,
            "return": [
                "tuple[]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "at": [
                    "lib.AbstractTuple",
                    "int",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_dict_values.py": {},
    "myia-master/myia/operations/macro_dtype.py": {},
    "myia-master/myia/operations/macro_einsum.py": {
        "_tensordot": {
            "name": "_tensordot",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "float"
                ],
                "a": [
                    "int"
                ],
                "b": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "_reduce_transpose": {
            "name": "_reduce_transpose",
            "location": 55,
            "return": [
                "tuple[tuple[]]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "g": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "input_spec": [
                    "bytes",
                    "str",
                    "int"
                ],
                "output_spec": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[]",
                    "Dict[str, Any]",
                    "list",
                    "bool"
                ],
                "arg": [
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "_simple_einsum": {
            "name": "_simple_einsum",
            "location": 85,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "g": [
                    "bool",
                    "str"
                ],
                "spec": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "idx_rm": [
                    "str",
                    "tuple[float]",
                    "Tuple[float]",
                    "int"
                ],
                "args": []
            }
        }
    },
    "myia-master/myia/operations/macro_embed.py": {},
    "myia-master/myia/operations/macro_getattr.py": {},
    "myia-master/myia/operations/macro_grad.py": {
        "_scalar_cast_helper": {
            "name": "_scalar_cast_helper",
            "location": 90,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "model": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Union[str, Any]]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "_scalar_to_array_cast_helper": {
            "name": "_scalar_to_array_cast_helper",
            "location": 97,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "model": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GradOperation.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "bool",
                    "Exception",
                    "typing.Iterable['adi.Instance']",
                    "Iterable['adi.Instance']",
                    "int"
                ],
                "wrt": [
                    "bool",
                    "Exception",
                    "typing.Iterable['adi.Instance']",
                    "Iterable['adi.Instance']",
                    "int"
                ]
            }
        },
        "GradOperation.make_signature": {
            "name": "make_signature",
            "location": 131,
            "return": [
                "tuple[typing.Union[tuple[int],dict[str, typing.Any],int,typing.Callable[N, typing.Any],str,list[None],dict[, ]]]",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GradOperation.generate_graph": {
            "name": "generate_graph",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GradOperation.generate_graph._getindex": {
            "name": "_getindex",
            "location": 194,
            "return": [
                "str",
                "type",
                "int",
                "List[Callable]",
                "bool"
            ],
            "arguments": {
                "wrt": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_hasattr.py": {},
    "myia-master/myia/operations/macro_is.py": {},
    "myia-master/myia/operations/macro_isinstance.py": {},
    "myia-master/myia/operations/macro_make_list.py": {},
    "myia-master/myia/operations/macro_resolve.py": {},
    "myia-master/myia/operations/macro_to_scalar_type.py": {
        "string_to_np_dtype": {
            "name": "string_to_np_dtype",
            "location": 29,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_tuple_len.py": {},
    "myia-master/myia/operations/macro_typeof.py": {},
    "myia-master/myia/operations/macro_universal.py": {
        "universal_wrapper": {
            "name": "universal_wrapper",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "is_universal": {
            "name": "is_universal",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "universal_wrapper.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [
                "tuple[]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "StatePassthrough.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "bytes",
                    "str",
                    "None",
                    "raiden.utils.Address",
                    "Optional[str]"
                ]
            }
        },
        "StatePassthrough.expand": {
            "name": "expand",
            "location": 54,
            "return": [
                "bytearray",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int"
                ],
                "parameters": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "set[str]",
                    "int",
                    "Set[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "Union['Contributor', 'Coverage']"
                ]
            }
        }
    },
    "myia-master/myia/operations/macro_user_switch.py": {
        "pyimpl_user_switch": {
            "name": "pyimpl_user_switch",
            "location": 23,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "condref": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "tbref": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "fbref": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "_CastRemapper.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graphs": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "inlines": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "manager": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "relation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "graph_relation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[_, bool]"
                ],
                "clone_constants": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[_, bool]"
                ],
                "graph_repl": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[_, bool]"
                ],
                "fv_replacements": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_CastRemapper.gen_fv": {
            "name": "gen_fv",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "ng": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "fv": [
                    "str",
                    "float"
                ]
            }
        },
        "make_trials.prod": {
            "name": "prod",
            "location": 87,
            "return": [
                "dict[set[], ]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "options": [
                    "float",
                    "List[Exception]",
                    "str",
                    "Optional[float]"
                ],
                "finalize": [
                    "Bool"
                ]
            }
        },
        "make_trials.getrepl": {
            "name": "getrepl",
            "location": 99,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "node": [
                    "Pattern",
                    "bool"
                ],
                "opt": [
                    "Pattern",
                    "bool"
                ]
            }
        },
        "make_trials._finalize": {
            "name": "_finalize",
            "location": 126,
            "return": [
                "str",
                "bool",
                "Iterable[Any]",
                "Optional[Any]"
            ],
            "arguments": {
                "nodes": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/ops_array.py": {
        "elemwise": {
            "name": "elemwise",
            "location": 18,
            "return": [
                "OperationDefinition",
                "List[Callable]",
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "op": [
                    "str",
                    "Iterable",
                    "typing.Iterable[]",
                    "Union[str, int]",
                    "int"
                ],
                "infer_value": [
                    "bool",
                    "str",
                    "Iterable",
                    "Union[str, int]"
                ]
            }
        },
        "sum": {
            "name": "sum",
            "location": 61,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "prod": {
            "name": "prod",
            "location": 68,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "ndim": {
            "name": "ndim",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_revperm": {
            "name": "_revperm",
            "location": 81,
            "return": [
                "tuple[]",
                "str",
                "Tuple[int, int]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "t": {
            "name": "t",
            "location": 87,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "bool",
                    "int"
                ],
                "permutation": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "array_iter": {
            "name": "array_iter",
            "location": 114,
            "return": [
                "SequenceIterator",
                "bool",
                "str",
                "Tuple[float, float, float]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ]
            }
        },
        "SequenceIterator.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 102,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceIterator.__myia_next__": {
            "name": "__myia_next__",
            "location": 107,
            "return": [
                "tuple[SequenceIterator]",
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/operations/ops_bool.py": {
        "not_": {
            "name": "not_",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "bool",
                    "Iterable['cirq.Qid']",
                    "tuple",
                    "FrozenSet[Any]"
                ]
            }
        },
        "bool_ne": {
            "name": "bool_ne",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/ops_dunder.py": {
        "_operation": {
            "name": "_operation",
            "location": 9,
            "return": [
                "OperationDefinition",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "tuple[]",
                    "Set[str]",
                    "tuple",
                    "Mapping[str, Any]"
                ],
                "fn": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "pyop": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "dunder_protocol_unary": {
            "name": "dunder_protocol_unary",
            "location": 21,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "pyop": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "dunder_protocol_binary_simple": {
            "name": "dunder_protocol_binary_simple",
            "location": 32,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "pyop": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "exc_fallback": {
            "name": "exc_fallback",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "is_fallback": {
            "name": "is_fallback",
            "location": 50,
            "return": [
                "bool",
                "int",
                "Mapping",
                "Sequence"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "is_not_fallback": {
            "name": "is_not_fallback",
            "location": 56,
            "return": [
                "int",
                "Mapping",
                "Sequence"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "dunder_protocol_binary": {
            "name": "dunder_protocol_binary",
            "location": 61,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "lattr": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "rattr": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "fallback": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "pyop": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "dunder_protocol_unary.protocol": {
            "name": "protocol",
            "location": 26,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "dunder_protocol_binary_simple.protocol": {
            "name": "protocol",
            "location": 37,
            "return": [],
            "arguments": {
                "data": [],
                "x": []
            }
        },
        "dunder_protocol_binary.protocol": {
            "name": "protocol",
            "location": 76,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "y": []
            }
        }
    },
    "myia-master/myia/operations/ops_nil.py": {
        "nil_eq": {
            "name": "nil_eq",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "int",
                    "dict",
                    "str",
                    "list[]",
                    "list",
                    "Optional[int]"
                ],
                "b": [
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "int",
                    "dict",
                    "str",
                    "list[]",
                    "list",
                    "Optional[int]"
                ]
            }
        },
        "nil_ne": {
            "name": "nil_ne",
            "location": 17,
            "return": [
                "bool",
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "a": [
                    "bool"
                ],
                "b": [
                    "bool"
                ]
            }
        },
        "nil_bool": {
            "name": "nil_bool",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "T",
                    "typing.Iterable[str]",
                    "typing.Sequence[]",
                    "int",
                    "Union[str, Iterable[str]]",
                    "Sequence"
                ]
            }
        }
    },
    "myia-master/myia/operations/ops_scalar.py": {
        "int_floordiv": {
            "name": "int_floordiv",
            "location": 11,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "str"
                ],
                "y": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "int_truediv": {
            "name": "int_truediv",
            "location": 21,
            "return": [
                "trezor.utils.Writer",
                "Dict[str, int]",
                "str",
                "Dict[str, Any]",
                "int",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "float_floordiv": {
            "name": "float_floordiv",
            "location": 38,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "int_bool": {
            "name": "int_bool",
            "location": 45,
            "return": [
                "bool",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "T",
                    "typing.Iterable[str]",
                    "typing.Sequence[]",
                    "int",
                    "Union[str, Iterable[str]]",
                    "Sequence"
                ]
            }
        },
        "float_bool": {
            "name": "float_bool",
            "location": 52,
            "return": [
                "bool",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "T",
                    "typing.Iterable[str]",
                    "typing.Sequence[]",
                    "int",
                    "Union[str, Iterable[str]]",
                    "Sequence"
                ]
            }
        }
    },
    "myia-master/myia/operations/ops_string.py": {
        "string_ne": {
            "name": "string_ne",
            "location": 10,
            "return": [
                "bool",
                "Optional[Type]",
                "Dict[int, int]",
                "gluonts.core.componenDType",
                "int",
                "str",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[float, str]",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[float, str]",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/ops_tuple.py": {
        "tuple_next": {
            "name": "tuple_next",
            "location": 23,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "tuple_hasnext": {
            "name": "tuple_hasnext",
            "location": 30,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "tuple_reorganizer": {
            "name": "tuple_reorganizer",
            "location": 69,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "tuple_concat": {
            "name": "tuple_concat",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "bool"
                ],
                "args": []
            }
        },
        "tuple_getslice": {
            "name": "tuple_getslice",
            "location": 84,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "float",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "str",
                    "float"
                ],
                "args": []
            }
        },
        "tuple_get": {
            "name": "tuple_get",
            "location": 99,
            "return": [
                "int",
                "str",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "t": [
                    "List[Type]",
                    "pathpy.core.node.Node",
                    "list"
                ],
                "item": [
                    "Dict[str, str]",
                    "Type",
                    "Iterable[Any]"
                ]
            }
        },
        "TupleReorganizer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "gen": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TupleReorganizer.map_tuples": {
            "name": "map_tuples",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "Sequence['cirq.Qid']",
                    "float",
                    "Union[str, bool, None]"
                ],
                "params": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tups": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TupleReorganizer.generate_graph": {
            "name": "generate_graph",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "myia-master/myia/operations/ops_universe.py": {
        "make_cell": {
            "name": "make_cell",
            "location": 10,
            "return": [
                "tuple[typing.Union[tuple[typing.Union[int,int]],str,None]]",
                "trezor.utils.Writer",
                "str",
                "core.Message"
            ],
            "arguments": {
                "init": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bytearray",
                    "None"
                ],
                "U": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bytearray",
                    "None"
                ]
            }
        },
        "cell_get": {
            "name": "cell_get",
            "location": 18,
            "return": [
                "tuple[typing.Union[typing.Callable[, ],str,list[str],list[]]]",
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "h": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ],
                "U": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "cell_set": {
            "name": "cell_set",
            "location": 25,
            "return": [
                "tuple[None]",
                "bool",
                "abilian.core.models.subjects.Principal",
                "float"
            ],
            "arguments": {
                "h": [
                    "int"
                ],
                "v": [
                    "int"
                ],
                "U": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_array_getitem_wrap.py": {
        "_dim_explicit": {
            "name": "_dim_explicit",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dim": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "dim_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "_build_slices": {
            "name": "_build_slices",
            "location": 15,
            "return": [
                "bool",
                "tuple[tuple[int]]"
            ],
            "arguments": {
                "a_shp": [
                    "dict",
                    "dict[, ]"
                ],
                "item": [
                    "int",
                    "Sequence[T]",
                    "List[int]",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "array_getitem_wrap": {
            "name": "array_getitem_wrap",
            "location": 44,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "item": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "tuple[]",
                    "str",
                    "blurr.core.aggregate.Aggregate",
                    "tuple",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_array_reduce_dim.py": {
        "ArrayReduceDim.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ArrayReduceDim.generate_graph": {
            "name": "generate_graph",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "myia-master/myia/operations/op_enumerate.py": {
        "enumerate_": {
            "name": "enumerate_",
            "location": 7,
            "return": [
                "List[str]",
                "Dict[str, List[Any]]",
                "Dict[str, Any]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "List[int]",
                    "list",
                    "bool",
                    "str",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_full.py": {
        "pyimpl_full": {
            "name": "pyimpl_full",
            "location": 16,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "float",
                    "tuple[typing.Union[int,...]]",
                    "list[str]",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "fill_value": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "float",
                    "tuple[typing.Union[int,...]]",
                    "list[str]",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "dtype": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "float",
                    "tuple[typing.Union[int,...]]",
                    "list[str]",
                    "numpy.ndarray",
                    "List[str]"
                ]
            }
        },
        "full": {
            "name": "full",
            "location": 22,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "shape": [
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "numpy.dtype",
                    "list[int]",
                    "str",
                    "List[int]",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "fill_value": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "dtype": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_gadd.py": {
        "_scalar_add": {
            "name": "_scalar_add",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "_sm_add": {
            "name": "_sm_add",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "_nil_add": {
            "name": "_nil_add",
            "location": 25,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "Exception",
                    "T"
                ],
                "y": [
                    "bool",
                    "str",
                    "Exception",
                    "T"
                ]
            }
        },
        "_bool_add": {
            "name": "_bool_add",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "y": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "_rstate_add": {
            "name": "_rstate_add",
            "location": 37,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ],
                "y": [
                    "bool",
                    "str",
                    "Exception",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_hyper_map.py": {},
    "myia-master/myia/operations/op_is_not.py": {
        "is_not": {
            "name": "is_not",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Callable[[KT], VT]",
                "\"Namespace\"",
                "int",
                "Dict[str, Any]",
                "Callable[..., None]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_range.py": {
        "range_": {
            "name": "range_",
            "location": 30,
            "return": [
                "Range",
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "bool"
                ],
                "stop": [
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "step": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Range.__myia_iter__": {
            "name": "__myia_iter__",
            "location": 17,
            "return": [
                "Range",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__myia_next__": {
            "name": "__myia_next__",
            "location": 21,
            "return": [
                "tuple",
                "tuple[Range]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 25,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/operations/op_slice.py": {},
    "myia-master/myia/operations/op_value_and_grad.py": {
        "value_and_grad": {
            "name": "value_and_grad",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/operations/op_zeros_like.py": {
        "_function_zero": {
            "name": "_function_zero",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Callable[[], None]",
                    "Callable[[], None]",
                    "bool",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "_dead_zero": {
            "name": "_dead_zero",
            "location": 34,
            "return": [
                "str",
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "_bool_zero": {
            "name": "_bool_zero",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "_nil_zero": {
            "name": "_nil_zero",
            "location": 46,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_scalar_zero": {
            "name": "_scalar_zero",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_array_zero": {
            "name": "_array_zero",
            "location": 58,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "xs": [
                    "bool",
                    "float"
                ]
            }
        },
        "_rng_zero": {
            "name": "_rng_zero",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/op_zip.py": {
        "zip_": {
            "name": "zip_",
            "location": 36,
            "return": [
                "Zip2",
                "IO",
                "bytes"
            ],
            "arguments": {
                "seq1": [
                    "int",
                    "float",
                    "str",
                    "complex",
                    "bool"
                ],
                "seq2": [
                    "int",
                    "float",
                    "str",
                    "complex",
                    "bool"
                ]
            }
        },
        "Zip2.__len__": {
            "name": "__len__",
            "location": 17,
            "return": [
                "int",
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip2.__myia_iter__": {
            "name": "__myia_iter__",
            "location": 21,
            "return": [
                "Zip2",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip2.__myia_next__": {
            "name": "__myia_next__",
            "location": 25,
            "return": [
                "tuple[typing.Union[tuple[typing.Union[list[str],str,int]],Zip2]]",
                "int",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zip2.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 31,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/operations/primitives.py": {},
    "myia-master/myia/operations/prim_argmax.py": {
        "bprop_argmax": {
            "name": "bprop_argmax",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Tuple[int, int]",
                    "str",
                    "int"
                ],
                "axis": [
                    "Tuple[int, int]",
                    "str",
                    "int"
                ],
                "out": [
                    "int",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_cast.py": {
        "pyimpl_array_cast": {
            "name": "pyimpl_array_cast",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "T"
                ],
                "t": [
                    "Type",
                    "typing.Type",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "bprop_array_cast": {
            "name": "bprop_array_cast",
            "location": 42,
            "return": [
                "tuple[typing.Union[int,float,tuple[typing.Union[float,float]]]]",
                "str",
                "float",
                "bytearray",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "t": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "out": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "dout": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_getitem.py": {
        "pyimpl_array_getitem": {
            "name": "pyimpl_array_getitem",
            "location": 11,
            "return": [
                "Dict[str, List[int]]",
                "Dict[str, str]",
                "Callable",
                "Sequence['cirq.Qid']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "begin": [
                    "int",
                    "bool"
                ],
                "end": [
                    "int",
                    "bool"
                ],
                "strides": [
                    "int",
                    "bool"
                ]
            }
        },
        "_ceildiv": {
            "name": "_ceildiv",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "bprop_array_getitem": {
            "name": "bprop_array_getitem",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "bytes"
                ],
                "begin": [
                    "bool",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "bytes"
                ],
                "end": [
                    "bool",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "bytes"
                ],
                "strides": [
                    "bool",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "bytes"
                ],
                "out": [
                    "bool",
                    "int",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict"
                ],
                "dout": [
                    "bool",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_map.py": {
        "pyimpl_array_map": {
            "name": "pyimpl_array_map",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "debugvm_array_map": {
            "name": "debugvm_array_map",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vm": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "debugvm_array_map.fn_": {
            "name": "fn_",
            "location": 31,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "ArrayMapGradient.generate_graph": {
            "name": "generate_graph",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "absargs": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_max.py": {
        "prod": {
            "name": "prod",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_dim_permute": {
            "name": "_dim_permute",
            "location": 50,
            "return": [
                "str",
                "int",
                "baseplate.lib.metrics.Client"
            ],
            "arguments": {
                "d": [
                    "int",
                    "float"
                ],
                "xs": [
                    "str",
                    "int",
                    "List[int]",
                    "list",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "_dim_reshape": {
            "name": "_dim_reshape",
            "location": 60,
            "return": [
                "str",
                "int",
                "baseplate.lib.metrics.Client"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "List[int]",
                    "Union[int, float]",
                    "int",
                    "Union[int, str]",
                    "list"
                ],
                "xs": []
            }
        },
        "_last_dim": {
            "name": "_last_dim",
            "location": 67,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "bprop_array_max": {
            "name": "bprop_array_max",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "axis": [
                    "int"
                ],
                "out": [
                    "int",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_reduce.py": {
        "pyimpl_array_reduce": {
            "name": "pyimpl_array_reduce",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "array": [
                    "int",
                    "list[]",
                    "numpy.ndarray",
                    "list"
                ],
                "shp": [
                    "dict",
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "debugvm_array_reduce": {
            "name": "debugvm_array_reduce",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vm": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "array": [
                    "int",
                    "str",
                    "bool"
                ],
                "shp": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "bprop_sum": {
            "name": "bprop_sum",
            "location": 99,
            "return": [
                "tuple[]",
                "numpy.ndarray",
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "float"
                ],
                "xs": [
                    "float",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ],
                "shp": [
                    "float",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ],
                "out": [
                    "bool",
                    "float"
                ],
                "dout": [
                    "float",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ]
            }
        },
        "pyimpl_array_reduce.is_reduction": {
            "name": "is_reduction",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "ishp": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "tshp": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "debugvm_array_reduce.fn_": {
            "name": "fn_",
            "location": 63,
            "return": [
                "str",
                "bytes",
                "Iterator[int]",
                "bool",
                "Dict[str, Any]",
                "Dict[str, float]",
                "float"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "int"
                ],
                "b": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "ArrayReduceGradient.generate_graph": {
            "name": "generate_graph",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "myia-master/myia/operations/prim_array_scan.py": {
        "pyimpl_array_scan": {
            "name": "pyimpl_array_scan",
            "location": 8,
            "return": [
                "str",
                "Callable",
                "numpy.ndarray"
            ],
            "arguments": {
                "fn": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "numpy.ndarray",
                    "type"
                ],
                "init": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "numpy.ndarray",
                    "type"
                ],
                "array": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Tuple[int, int]",
                    "typing.Callable[[], object]",
                    "Callable[[], object]",
                    "Callable[[T], T]",
                    "T"
                ],
                "axis": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Tuple[int, int]",
                    "typing.Callable[[], object]",
                    "Callable[[], object]",
                    "Callable[[T], T]",
                    "T"
                ]
            }
        },
        "debugvm_array_scan": {
            "name": "debugvm_array_scan",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "vm": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Union[str, bool, None]",
                    "None",
                    "Optional[bool]"
                ],
                "fn": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Union[str, bool, None]",
                    "None",
                    "Optional[bool]"
                ],
                "init": [
                    "str",
                    "Union[str, dict]",
                    "dict[, ]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "array": [
                    "str",
                    "Union[str, dict]",
                    "dict[, ]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "axis": [
                    "str",
                    "Union[str, dict]",
                    "dict[, ]",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "pyimpl_array_scan.f": {
            "name": "f",
            "location": 12,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "ary": [
                    "str",
                    "int"
                ]
            }
        },
        "debugvm_array_scan.fn_": {
            "name": "fn_",
            "location": 26,
            "return": [
                "str",
                "bytes",
                "Iterator[int]",
                "bool",
                "Dict[str, Any]",
                "Dict[str, float]",
                "float"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "int"
                ],
                "b": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_setitem.py": {
        "pyimpl_array_setitem": {
            "name": "pyimpl_array_setitem",
            "location": 10,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "typing.Sequence[str]",
                    "None",
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "begin": [
                    "float"
                ],
                "end": [
                    "float"
                ],
                "strides": [
                    "float"
                ],
                "value": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_array_to_scalar.py": {
        "pyimpl_array_to_scalar": {
            "name": "pyimpl_array_to_scalar",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Match"
            ],
            "arguments": {
                "x": [
                    "T",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "bprop_array_to_scalar": {
            "name": "bprop_array_to_scalar",
            "location": 31,
            "return": [
                "tuple[]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "out": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_bool_and.py": {
        "pyimpl_bool_and": {
            "name": "pyimpl_bool_and",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "xtype.Bool"
                ],
                "y": [
                    "int",
                    "xtype.Bool",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_bool_eq.py": {
        "pyimpl_bool_eq": {
            "name": "pyimpl_bool_eq",
            "location": 8,
            "return": [
                "bool",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "xtype.Bool"
                ],
                "y": [
                    "int",
                    "xtype.Bool",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_bool_not.py": {
        "pyimpl_bool_not": {
            "name": "pyimpl_bool_not",
            "location": 8,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "xtype.Bool"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_bool_or.py": {
        "pyimpl_bool_or": {
            "name": "pyimpl_bool_or",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "xtype.Bool"
                ],
                "y": [
                    "int",
                    "xtype.Bool",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_broadcast_shape.py": {
        "pyimpl_broadcast_shape": {
            "name": "pyimpl_broadcast_shape",
            "location": 19,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shpx": [
                    "list",
                    "str",
                    "List[List[str]]",
                    "List[int]",
                    "bytearray"
                ],
                "shpy": [
                    "list",
                    "str",
                    "List[List[str]]",
                    "List[int]",
                    "bytearray"
                ]
            }
        },
        "bprop_broadcast_shape": {
            "name": "bprop_broadcast_shape",
            "location": 66,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shp1": [
                    "int"
                ],
                "shp2": [
                    "int"
                ],
                "out": [
                    "bool",
                    "str"
                ],
                "dout": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_casttag.py": {
        "pyimpl_casttag": {
            "name": "pyimpl_casttag",
            "location": 9,
            "return": [
                "dict",
                "int",
                "Optional[Union[Any, str]]",
                "zerver.lib.validator.Validator",
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "tag": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "bprop_casttag": {
            "name": "bprop_casttag",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "Union[int, float]",
                    "int"
                ],
                "t": [
                    "Union[int, float]",
                    "int"
                ],
                "out": [
                    "int",
                    "List[T]"
                ],
                "dout": [
                    "Union[int, float]",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_concat.py": {
        "pyimpl_concat": {
            "name": "pyimpl_concat",
            "location": 12,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "dim": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "bprop_concat": {
            "name": "bprop_concat",
            "location": 51,
            "return": [
                "str",
                "tuple[typing.Union[str,list[str],set[str],tuple[typing.Union[str,str,str,str,str,str]]]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "dim": [
                    "int",
                    "str"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_conv2d.py": {
        "bprop_conv2d": {
            "name": "bprop_conv2d",
            "location": 79,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "str"
                ],
                "weight": [
                    "bool",
                    "str"
                ],
                "stride": [
                    "bool",
                    "str"
                ],
                "padding": [
                    "bool",
                    "str"
                ],
                "dilation": [
                    "bool",
                    "str"
                ],
                "groups": [
                    "bool",
                    "str"
                ],
                "out": [
                    "bool",
                    "str"
                ],
                "dout": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_conv2d_weight_grad.py": {},
    "myia-master/myia/operations/prim_conv_transpose2d.py": {},
    "myia-master/myia/operations/prim_dict_getitem.py": {},
    "myia-master/myia/operations/prim_dict_setitem.py": {},
    "myia-master/myia/operations/prim_distribute.py": {
        "pyimpl_distribute": {
            "name": "pyimpl_distribute",
            "location": 20,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "shape": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "bprop_distribute": {
            "name": "bprop_distribute",
            "location": 44,
            "return": [
                "tuple[]",
                "str",
                "Optional[int]",
                "Callable",
                "List[List[str]]"
            ],
            "arguments": {
                "arr": [
                    "int"
                ],
                "shp": [
                    "int"
                ],
                "out": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "None",
                    "str"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_dot.py": {
        "pyimpl_dot": {
            "name": "pyimpl_dot",
            "location": 19,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "str",
                    "Iterable",
                    "typing.Iterable[]"
                ],
                "b": [
                    "bool",
                    "str",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "bprop_dot": {
            "name": "bprop_dot",
            "location": 50,
            "return": [
                "tuple[]",
                "numpy.ndarray",
                "str",
                "float",
                "bytearray",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, bool]"
                ],
                "y": [
                    "float",
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, bool]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "float",
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, bool]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_env_add.py": {
        "pyimpl_env_add": {
            "name": "pyimpl_env_add",
            "location": 8,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "env1": [
                    "Type",
                    "bool"
                ],
                "env2": [
                    "Type",
                    "bool",
                    "typing.Type"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_env_getitem.py": {
        "pyimpl_env_getitem": {
            "name": "pyimpl_env_getitem",
            "location": 8,
            "return": [
                "Union[str, None]",
                "Dict[str, Any]",
                "Dict[Any, bool]",
                "dict",
                "Optional[List[Any]]",
                "Optional[dict]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "env": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_env_setitem.py": {
        "pyimpl_env_setitem": {
            "name": "pyimpl_env_setitem",
            "location": 8,
            "return": [
                "list",
                "Optional[str]",
                "Union[str, List[Any]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bool",
                    "Dict[Any, list]",
                    "dict[typing.Any, list[]]",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "set",
                    "set[]",
                    "Tuple[object]",
                    "tuple[object]",
                    "dict",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Dict[Any, list]",
                    "dict[typing.Any, list[]]",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "set",
                    "set[]",
                    "Tuple[object]",
                    "tuple[object]",
                    "dict",
                    "dict[, ]"
                ],
                "x": [
                    "str",
                    "bool",
                    "Dict[Any, list]",
                    "dict[typing.Any, list[]]",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "set",
                    "set[]",
                    "Tuple[object]",
                    "tuple[object]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_extract_kwarg.py": {},
    "myia-master/myia/operations/prim_gather.py": {
        "bprop_gather": {
            "name": "bprop_gather",
            "location": 24,
            "return": [
                "tuple[typing.Union[range,bool]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "dim": [
                    "int"
                ],
                "index": [
                    "int"
                ],
                "out": [
                    "int",
                    "bool"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_hastag.py": {
        "pyimpl_hastag": {
            "name": "pyimpl_hastag",
            "location": 16,
            "return": [
                "dict",
                "int",
                "Optional[Union[Any, str]]",
                "zerver.lib.validator.Validator",
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "tag": [
                    "str",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "bprop_hastag": {
            "name": "bprop_hastag",
            "location": 32,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "Sequence[int]",
                    "bool"
                ],
                "t": [
                    "Sequence[int]",
                    "bool"
                ],
                "out": [
                    "int",
                    "List[T]"
                ],
                "dout": [
                    "int",
                    "List[T]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_hastype.py": {},
    "myia-master/myia/operations/prim_identity.py": {
        "pyimpl_identity": {
            "name": "pyimpl_identity",
            "location": 7,
            "return": [
                "str",
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "bprop_identity": {
            "name": "bprop_identity",
            "location": 19,
            "return": [
                "tuple[typing.Union[bool,list[dict[str, typing.Any]],float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_invert_permutation.py": {
        "pyimpl_invert_permutation": {
            "name": "pyimpl_invert_permutation",
            "location": 16,
            "return": [
                "tuple[]",
                "str",
                "tuple",
                "list",
                "bool",
                "List[str]",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "perm": [
                    "List[List[str]]",
                    "List[str]",
                    "int",
                    "list",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_J.py": {
        "bprop_J": {
            "name": "bprop_J",
            "location": 33,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_Jinv.py": {
        "bprop_Jinv": {
            "name": "bprop_Jinv",
            "location": 16,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_make_dict.py": {},
    "myia-master/myia/operations/prim_make_exception.py": {
        "pyimpl_make_exception": {
            "name": "pyimpl_make_exception",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ]
            }
        },
        "bprop_make_exception": {
            "name": "bprop_make_exception",
            "location": 27,
            "return": [
                "tuple[typing.Union[list[],list[str],typing.Callable[, ],str]]",
                "Callable[[T], T]",
                "int"
            ],
            "arguments": {
                "x": [
                    "list[]",
                    "list",
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "zerver.lib.types.ViewFuncT"
                ],
                "out": [
                    "list[]",
                    "list",
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "zerver.lib.types.ViewFuncT"
                ],
                "dout": [
                    "list[]",
                    "list",
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "zerver.lib.types.ViewFuncT"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_make_handle.py": {},
    "myia-master/myia/operations/prim_make_kwarg.py": {},
    "myia-master/myia/operations/prim_make_record.py": {},
    "myia-master/myia/operations/prim_make_tuple.py": {
        "pyimpl_make_tuple": {
            "name": "pyimpl_make_tuple",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {}
        },
        "MakeTupleGradient.generate_graph": {
            "name": "generate_graph",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "myia-master/myia/operations/prim_max_pool2d.py": {
        "bprop_max_pool2d": {
            "name": "bprop_max_pool2d",
            "location": 65,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "input": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "stride": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "padding": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "dilation": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "ceil_mode": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ],
                "out": [
                    "int"
                ],
                "dout": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_max_pool2d_grad.py": {},
    "myia-master/myia/operations/prim_partial.py": {
        "pyimpl_partial": {
            "name": "pyimpl_partial",
            "location": 12,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "pyimpl_partial.res": {
            "name": "res",
            "location": 15,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/operations/prim_raise_.py": {
        "pyimpl_raise": {
            "name": "pyimpl_raise",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "bprop_raise": {
            "name": "bprop_raise",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_random_initialize.py": {
        "pyimpl_random_initialize": {
            "name": "pyimpl_random_initialize",
            "location": 15,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "bool",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ]
            }
        },
        "bprop_random_initialize": {
            "name": "bprop_random_initialize",
            "location": 27,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[dict]",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "out": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "dout": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_random_uint32.py": {
        "pyimpl_random_uint32": {
            "name": "pyimpl_random_uint32",
            "location": 21,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "rstate": [
                    "int",
                    "bytearray",
                    "List[float]",
                    "float",
                    "List[int]"
                ],
                "shape": [
                    "int",
                    "bytearray",
                    "List[float]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "bprop_random_uint32": {
            "name": "bprop_random_uint32",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "int"
                ],
                "shape": [
                    "int"
                ],
                "out": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "str"
                ],
                "dout": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_record_getitem.py": {},
    "myia-master/myia/operations/prim_record_setitem.py": {},
    "myia-master/myia/operations/prim_reshape.py": {
        "_prod": {
            "name": "_prod",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "pyimpl_reshape": {
            "name": "pyimpl_reshape",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "shape": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "bprop_reshape": {
            "name": "bprop_reshape",
            "location": 53,
            "return": [
                "tuple[]",
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "shp": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_return_.py": {
        "pyimpl_return": {
            "name": "pyimpl_return",
            "location": 7,
            "return": [
                "Callable[[T], T]",
                "int",
                "str",
                "typing.Iterable[typing.Any]",
                "typing.Sequence[]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[]",
                    "bool",
                    "Literal[False]",
                    "Iterable[Any]",
                    "Sequence",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_abs.py": {
        "pyimpl_scalar_abs": {
            "name": "pyimpl_scalar_abs",
            "location": 13,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "xtype.Number",
                    "bytes"
                ]
            }
        },
        "bprop_scalar_abs": {
            "name": "bprop_scalar_abs",
            "location": 25,
            "return": [
                "bool",
                "tuple[float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "typing.Iterable[list[T]]",
                    "Iterable[List[T]]",
                    "starfish.types.Number"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "float",
                    "typing.Iterable[list[T]]",
                    "Iterable[List[T]]",
                    "starfish.types.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_add.py": {
        "pyimpl_scalar_add": {
            "name": "pyimpl_scalar_add",
            "location": 12,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "bprop_scalar_add": {
            "name": "bprop_scalar_add",
            "location": 24,
            "return": [
                "tuple[typing.Union[str,list[str],int]]",
                "int",
                "str",
                "Sequence"
            ],
            "arguments": {
                "x": [
                    "list",
                    "int",
                    "list[]"
                ],
                "y": [
                    "list",
                    "int",
                    "list[]"
                ],
                "out": [
                    "list",
                    "int",
                    "list[]"
                ],
                "dout": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_and.py": {
        "pyimpl_scalar_bit_and": {
            "name": "pyimpl_scalar_bit_and",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_lshift.py": {
        "pyimpl_scalar_bit_lshift": {
            "name": "pyimpl_scalar_bit_lshift",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_not.py": {
        "pyimpl_scalar_bit_not": {
            "name": "pyimpl_scalar_bit_not",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_or.py": {
        "pyimpl_scalar_bit_or": {
            "name": "pyimpl_scalar_bit_or",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_rshift.py": {
        "pyimpl_scalar_bit_rshift": {
            "name": "pyimpl_scalar_bit_rshift",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_bit_xor.py": {
        "pyimpl_scalar_bit_xor": {
            "name": "pyimpl_scalar_bit_xor",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_cast.py": {
        "pyimpl_scalar_cast": {
            "name": "pyimpl_scalar_cast",
            "location": 19,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "T"
                ],
                "t": [
                    "numpy.ndarray"
                ]
            }
        },
        "bprop_scalar_cast": {
            "name": "bprop_scalar_cast",
            "location": 43,
            "return": [
                "tuple[int]",
                "numpy.ndarray",
                "Optional[int]",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "t": [
                    "int"
                ],
                "out": [
                    "int",
                    "List[T]",
                    "list[T]"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_cos.py": {
        "pyimpl_scalar_cos": {
            "name": "pyimpl_scalar_cos",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_div.py": {
        "pyimpl_scalar_div": {
            "name": "pyimpl_scalar_div",
            "location": 14,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_div": {
            "name": "bprop_scalar_div",
            "location": 29,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "y": [
                    "float",
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "None"
                ],
                "out": [
                    "float",
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "None"
                ],
                "dout": [
                    "float",
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_eq.py": {
        "pyimpl_scalar_eq": {
            "name": "pyimpl_scalar_eq",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_eq": {
            "name": "bprop_scalar_eq",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_exp.py": {
        "pyimpl_scalar_exp": {
            "name": "pyimpl_scalar_exp",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        },
        "bprop_scalar_exp": {
            "name": "bprop_scalar_exp",
            "location": 26,
            "return": [
                "tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "int"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_floor.py": {
        "pyimpl_scalar_floor": {
            "name": "pyimpl_scalar_floor",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_ge.py": {
        "pyimpl_scalar_ge": {
            "name": "pyimpl_scalar_ge",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_ge": {
            "name": "bprop_scalar_ge",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_gt.py": {
        "pyimpl_scalar_gt": {
            "name": "pyimpl_scalar_gt",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_gt": {
            "name": "bprop_scalar_gt",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_le.py": {
        "pyimpl_scalar_le": {
            "name": "pyimpl_scalar_le",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_le": {
            "name": "bprop_scalar_le",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_log.py": {
        "pyimpl_scalar_log": {
            "name": "pyimpl_scalar_log",
            "location": 14,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "bprop_scalar_log": {
            "name": "bprop_scalar_log",
            "location": 26,
            "return": [
                "tuple[]",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "out": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "dout": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_lt.py": {
        "pyimpl_scalar_lt": {
            "name": "pyimpl_scalar_lt",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_lt": {
            "name": "bprop_scalar_lt",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_max.py": {
        "pyimpl_scalar_max": {
            "name": "pyimpl_scalar_max",
            "location": 13,
            "return": [
                "float",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "bprop_scalar_max": {
            "name": "bprop_scalar_max",
            "location": 25,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_mod.py": {
        "pyimpl_scalar_mod": {
            "name": "pyimpl_scalar_mod",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_mul.py": {
        "pyimpl_scalar_mul": {
            "name": "pyimpl_scalar_mul",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_mul": {
            "name": "bprop_scalar_mul",
            "location": 24,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "tuple[]",
                    "bool",
                    "tuple"
                ],
                "y": [
                    "str",
                    "int",
                    "tuple[]",
                    "bool",
                    "tuple"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "str",
                    "int",
                    "tuple[]",
                    "bool",
                    "tuple"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_ne.py": {
        "pyimpl_scalar_ne": {
            "name": "pyimpl_scalar_ne",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_ne": {
            "name": "bprop_scalar_ne",
            "location": 25,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_pow.py": {
        "pyimpl_scalar_pow": {
            "name": "pyimpl_scalar_pow",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_pow": {
            "name": "bprop_scalar_pow",
            "location": 24,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, bool]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "out": [
                    "int",
                    "bool"
                ],
                "dout": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_sign.py": {
        "pyimpl_scalar_sign": {
            "name": "pyimpl_scalar_sign",
            "location": 15,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number",
                    "numpy.ndarray"
                ]
            }
        },
        "bprop_scalar_sign": {
            "name": "bprop_scalar_sign",
            "location": 27,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_sin.py": {
        "pyimpl_scalar_sin": {
            "name": "pyimpl_scalar_sin",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_sub.py": {
        "pyimpl_scalar_sub": {
            "name": "pyimpl_scalar_sub",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "xtype.Number",
                    "xtype.Integral"
                ],
                "y": [
                    "xtype.Number",
                    "xtype.Integral"
                ]
            }
        },
        "bprop_scalar_sub": {
            "name": "bprop_scalar_sub",
            "location": 24,
            "return": [
                "tuple[typing.Union[int,bytes]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_tan.py": {
        "pyimpl_scalar_tan": {
            "name": "pyimpl_scalar_tan",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_tanh.py": {
        "pyimpl_scalar_tanh": {
            "name": "pyimpl_scalar_tanh",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        },
        "bprop_scalar_tanh": {
            "name": "bprop_scalar_tanh",
            "location": 26,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "float",
                    "int"
                ],
                "dout": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_to_array.py": {
        "pyimpl_scalar_to_array": {
            "name": "pyimpl_scalar_to_array",
            "location": 18,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "t": [
                    "Optional[Exception]",
                    "Exception",
                    "T",
                    "None"
                ]
            }
        },
        "bprop_scalar_to_array": {
            "name": "bprop_scalar_to_array",
            "location": 34,
            "return": [
                "tuple[typing.Union[str,float,int,list[int],None]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "t": [
                    "str",
                    "float",
                    "int",
                    "Optional[List[int]]",
                    "list[int]",
                    "Iterable[T]",
                    "None"
                ],
                "out": [
                    "int"
                ],
                "dout": [
                    "str",
                    "float",
                    "int",
                    "Optional[List[int]]",
                    "list[int]",
                    "Iterable[T]",
                    "None"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_trunc.py": {
        "pyimpl_scalar_trunc": {
            "name": "pyimpl_scalar_trunc",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "xtype.Number"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_uadd.py": {
        "pyimpl_scalar_uadd": {
            "name": "pyimpl_scalar_uadd",
            "location": 12,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "bprop_scalar_uadd": {
            "name": "bprop_scalar_uadd",
            "location": 24,
            "return": [
                "tuple[typing.Union[bool,list[dict[str, typing.Any]],float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scalar_usub.py": {
        "pyimpl_scalar_usub": {
            "name": "pyimpl_scalar_usub",
            "location": 12,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "bprop_scalar_usub": {
            "name": "bprop_scalar_usub",
            "location": 24,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scatter.py": {
        "bprop_scatter": {
            "name": "bprop_scatter",
            "location": 23,
            "return": [
                "str",
                "tuple[typing.Union[int,str,typing.MutableMapping,list[int]]]"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "dim": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ],
                "index": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ],
                "src": [
                    "int",
                    "float",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "out": [
                    "str"
                ],
                "dout": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_scatter_add.py": {
        "bprop_scatter_add": {
            "name": "bprop_scatter_add",
            "location": 23,
            "return": [
                "tuple[typing.Union[typing.Callable[, ],typing.Sequence[float],bool,str,typing.MutableMapping,list[int]]]",
                "int",
                "str",
                "Sequence"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "dim": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ],
                "index": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ],
                "src": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "out": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "dout": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_shape.py": {
        "pyimpl_shape": {
            "name": "pyimpl_shape",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "bprop_shape": {
            "name": "bprop_shape",
            "location": 34,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[dict]",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "out": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "dout": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_split.py": {
        "pyimpl_split": {
            "name": "pyimpl_split",
            "location": 16,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "sections": [
                    "str",
                    "numpy.ndarray"
                ],
                "dim": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "bprop_split": {
            "name": "bprop_split",
            "location": 42,
            "return": [
                "tuple[typing.Union[int,str,list[]]]",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "x": [
                    "list",
                    "bool",
                    "list[]",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ],
                "sections": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "Union[int, float]"
                ],
                "dim": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "Union[int, float]"
                ],
                "out": [
                    "list",
                    "bool",
                    "list[]",
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Mapping[str, float]",
                    "typing.Mapping"
                ],
                "dout": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_stop_gradient.py": {
        "pyimpl_stop_gradient": {
            "name": "pyimpl_stop_gradient",
            "location": 11,
            "return": [
                "str",
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "bprop_stop_gradient": {
            "name": "bprop_stop_gradient",
            "location": 23,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "out": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "dout": [
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_string_eq.py": {
        "pyimpl_string_eq": {
            "name": "pyimpl_string_eq",
            "location": 8,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "xtype.String"
                ],
                "y": [
                    "int",
                    "str",
                    "xtype.String"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_switch.py": {
        "pyimpl_switch": {
            "name": "pyimpl_switch",
            "location": 17,
            "return": [
                "str",
                "int",
                "Optional[List[int]]",
                "set[str]",
                "typing.Type",
                "tuple[typing.Union[int,int,int]]",
                "list[str]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Type[T]",
                    "typing.Type",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Type[T]",
                    "typing.Type",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Type[T]",
                    "typing.Type",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "__fprop__switch": {
            "name": "__fprop__switch",
            "location": 43,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "jcond": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "jtb": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "jfb": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "__fprop__switch.__bprop__switch": {
            "name": "__bprop__switch",
            "location": 48,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dout": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_tagged.py": {
        "pyimpl_tagged": {
            "name": "pyimpl_tagged",
            "location": 9,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "List['LabelTag']",
                    "List[List[str]]",
                    "List[Tuple[str, str]]",
                    "list",
                    "int"
                ],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "bprop_tagged": {
            "name": "bprop_tagged",
            "location": 33,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "int",
                "tuple"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "bytes"
                ],
                "t": [
                    "List[List[int]]",
                    "int",
                    "float"
                ],
                "out": [
                    "bool",
                    "bytes"
                ],
                "dout": [
                    "List[List[int]]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_take.py": {
        "pyimpl_take": {
            "name": "pyimpl_take",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "int"
                ],
                "indices": [
                    "str",
                    "int"
                ]
            }
        },
        "bprop_take": {
            "name": "bprop_take",
            "location": 36,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ],
                "indices": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ],
                "out": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "None",
                    "str"
                ],
                "dout": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_take_grad_inp.py": {
        "pyimpl_take_grad_inp": {
            "name": "pyimpl_take_grad_inp",
            "location": 30,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "Optional[str]"
            ],
            "arguments": {
                "nb_indices": [
                    "int",
                    "numpy.ndarray"
                ],
                "indices": [
                    "Optional[int]",
                    "Sequence[numpy.ndarray]",
                    "int",
                    "numpy.ndarray"
                ],
                "values": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_transpose.py": {
        "pyimpl_transpose": {
            "name": "pyimpl_transpose",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "permutation": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "typing.Callable[T,T, T]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "bprop_transpose": {
            "name": "bprop_transpose",
            "location": 47,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "perm": [
                    "int",
                    "bytes"
                ],
                "out": [
                    "int",
                    "list[float]",
                    "bool",
                    "List[float]"
                ],
                "dout": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_tuple_getitem.py": {
        "pyimpl_tuple_getitem": {
            "name": "pyimpl_tuple_getitem",
            "location": 9,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Iterable[Sequence[str]]",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "item": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "debugvm_tuple_getitem": {
            "name": "debugvm_tuple_getitem",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "vm": [
                    "Mapping[Any, Any]",
                    "Sequence[Sequence]",
                    "Callable[[T], bool]",
                    "T"
                ],
                "data": [
                    "Mapping[Any, Any]",
                    "Sequence[Sequence]",
                    "Callable[[T], bool]",
                    "T"
                ],
                "item": [
                    "Mapping[Any, Any]",
                    "Sequence[Sequence]",
                    "Callable[[T], bool]",
                    "T"
                ]
            }
        },
        "bprop_tuple_getitem": {
            "name": "bprop_tuple_getitem",
            "location": 30,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "float",
                    "int"
                ],
                "idx": [
                    "float",
                    "int"
                ],
                "out": [
                    "bool",
                    "int",
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "dout": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_tuple_setitem.py": {
        "pyimpl_tuple_setitem": {
            "name": "pyimpl_tuple_setitem",
            "location": 8,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "float",
                "Generator"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "Sequence[T]",
                    "bool",
                    "int"
                ],
                "item": [
                    "List[str]",
                    "Sequence[T]",
                    "bool",
                    "int"
                ],
                "value": [
                    "List[str]",
                    "Sequence[T]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_universe_getitem.py": {
        "pyimpl_universe_getitem": {
            "name": "pyimpl_universe_getitem",
            "location": 8,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "universe": [
                    "dict[, ]",
                    "str",
                    "dict"
                ],
                "handle": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_universe_setitem.py": {
        "pyimpl_universe_setitem": {
            "name": "pyimpl_universe_setitem",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "universe": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "list",
                    "list[]"
                ],
                "handle": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "list",
                    "list[]"
                ],
                "value": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "myia-master/myia/operations/prim_unsafe_static_cast.py": {
        "pyimpl_unsafe_static_cast": {
            "name": "pyimpl_unsafe_static_cast",
            "location": 8,
            "return": [
                "str",
                "Exception",
                "None",
                "list[str]",
                "list[float]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Exception",
                    "Optional[Exception]",
                    "None",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[float]",
                    "list[float]",
                    "Iterable[int]",
                    "Iterable[float]"
                ],
                "t": [
                    "Exception",
                    "Optional[Exception]",
                    "None",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[float]",
                    "list[float]",
                    "Iterable[int]",
                    "Iterable[float]"
                ]
            }
        }
    },
    "myia-master/myia/operations/utils.py": {
        "to_opdef": {
            "name": "to_opdef",
            "location": 84,
            "return": [
                "OperationDefinition",
                "List[Callable]",
                "type",
                "Callable",
                "bytes",
                "Type"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Primitive.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "defaults": [
                    "dict[, ]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Primitive.universal": {
            "name": "universal",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Primitive.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "defaults": [
                    "dict[, ]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Operation.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationDefinition.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationDefinition.__to_myia__": {
            "name": "__to_myia__",
            "location": 73,
            "return": [
                "str",
                "OrderedDict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationDefinition.__call__": {
            "name": "__call__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/operations/__init__.py": {},
    "myia-master/myia/opt/cse.py": {
        "group_nodes": {
            "name": "group_nodes",
            "location": 12,
            "return": [
                "list[int]",
                "str",
                "list[str]",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "root": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "manager": [
                    "List[Tuple[int, int]]",
                    "str",
                    "int"
                ]
            }
        },
        "cse": {
            "name": "cse",
            "location": 40,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "root": [
                    "list[tuple[typing.Union[typing.Any,int,int,str,str]]]",
                    "int",
                    "List[Tuple[Any, int, int, str, str]]",
                    "Iterable"
                ],
                "manager": []
            }
        },
        "CSE.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "dict[typing.Text, ]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "Optional[BaseException]",
                    "BaseException",
                    "str",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "graph": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        }
    },
    "myia-master/myia/opt/dde.py": {
        "_split_need": {
            "name": "_split_need",
            "location": 245,
            "return": [
                "tuple[typing.Union[str,int,list[None],None,ANYTHING,tuple[None]]]",
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "need": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "_vprop_make_tuple": {
            "name": "_vprop_make_tuple",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]"
                ],
                "need": [
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "inputs": [
                    "int",
                    "bool"
                ],
                "out": [
                    "int",
                    "bool"
                ]
            }
        },
        "_vprop_tuple_getitem": {
            "name": "_vprop_tuple_getitem",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "List[int]"
                ],
                "need": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "inputs": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "out": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "List[int]",
                    "None",
                    "list[int]"
                ]
            }
        },
        "_vprop_tuple_setitem": {
            "name": "_vprop_tuple_setitem",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "str",
                    "Tuple[int, int, int]",
                    "int",
                    "float"
                ],
                "need": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "float",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "inputs": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "out": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "float",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "_vprop_env_getitem": {
            "name": "_vprop_env_getitem",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Callable[[Dict], bool]]"
                ],
                "need": [
                    "str",
                    "int",
                    "bool",
                    "typing.Callable[dict[, ], bool]",
                    "Optional[Callable[[Dict], bool]]",
                    "None"
                ],
                "inputs": [
                    "bool",
                    "float"
                ],
                "out": [
                    "str",
                    "int",
                    "bool",
                    "typing.Callable[dict[, ], bool]",
                    "Optional[Callable[[Dict], bool]]",
                    "None"
                ]
            }
        },
        "_vprop_env_setitem": {
            "name": "_vprop_env_setitem",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "bool",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "need": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "inputs": [
                    "bool",
                    "float"
                ],
                "out": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "_vprop_universe_getitem": {
            "name": "_vprop_universe_getitem",
            "location": 297,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "List[int]"
                ],
                "need": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "List[int]",
                    "None",
                    "list[int]"
                ],
                "inputs": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "out": [
                    "int",
                    "bytes",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "List[int]",
                    "None",
                    "list[int]"
                ]
            }
        },
        "_vprop_universe_setitem": {
            "name": "_vprop_universe_setitem",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "Iterable",
                    "str",
                    "bool"
                ],
                "need": [
                    "Iterable",
                    "str",
                    "typing.Iterable[]",
                    "bool"
                ],
                "inputs": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "out": [
                    "Iterable",
                    "str",
                    "typing.Iterable[]",
                    "bool"
                ]
            }
        },
        "_vprop_partial": {
            "name": "_vprop_partial",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "int",
                    "bool",
                    "str"
                ],
                "need": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.IO",
                    "int",
                    "dict[, ]",
                    "IO[str]",
                    "dict"
                ],
                "out": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_vprop_return": {
            "name": "_vprop_return",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "Union[int, float]",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "need": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "inputs": [
                    "int",
                    "str",
                    "bool",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "out": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "_vprop_raise_": {
            "name": "_vprop_raise_",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "Optional[Callable[..., Any]]",
                    "typing.Callable[..., typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "need": [
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "inputs": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "out": [
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_vprop_switch": {
            "name": "_vprop_switch",
            "location": 338,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "str",
                    "int",
                    "bool"
                ],
                "need": [
                    "int",
                    "str",
                    "bool",
                    "set[]",
                    "set"
                ],
                "inputs": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "out": [
                    "int",
                    "str",
                    "bool",
                    "set[]",
                    "set"
                ]
            }
        },
        "_vprop_array_operation": {
            "name": "_vprop_array_operation",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "str",
                    "int"
                ],
                "need": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "str",
                    "list[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]",
                    "List[str]"
                ],
                "out": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_vprop_cast_operation": {
            "name": "_vprop_cast_operation",
            "location": 362,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "need": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "int",
                    "float",
                    "raiden.utils.AdditionalHash",
                    "None",
                    "Tuple[float, float]",
                    "torch.utils.data.Dataset",
                    "Optional[float]"
                ],
                "inputs": [
                    "bool",
                    "str",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "FrozenSet[str]",
                    "frozenset"
                ],
                "out": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "int",
                    "float",
                    "raiden.utils.AdditionalHash",
                    "None",
                    "Tuple[float, float]",
                    "torch.utils.data.Dataset",
                    "Optional[float]"
                ]
            }
        },
        "_vprop_generic": {
            "name": "_vprop_generic",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "need": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "out": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "make_dead": {
            "name": "make_dead",
            "location": 451,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "node": []
            }
        },
        "dde": {
            "name": "dde",
            "location": 466,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int"
                ],
                "resources": [
                    "bool"
                ]
            }
        },
        "ValuePropagator.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ValuePropagator.run": {
            "name": "run",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "typing.Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "ValuePropagator.values": {
            "name": "values",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "need": [
                    "str"
                ]
            }
        },
        "ValuePropagator.add_value": {
            "name": "add_value",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "need": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ValuePropagator._add_value": {
            "name": "_add_value",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "need": [
                    "str",
                    "Dict[Hashable, Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "type",
                    "typing.Type"
                ],
                "value": [
                    "str",
                    "type",
                    "typing.Type",
                    "Sequence[type]",
                    "typing.Sequence[typing.Type]"
                ]
            }
        },
        "ValuePropagator.add_need": {
            "name": "add_need",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ],
                "need": []
            }
        },
        "ValuePropagator.process_node": {
            "name": "process_node",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ValuePropagator.connect": {
            "name": "connect",
            "location": 149,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "frm": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "to": [
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ValuePropagator.passthrough": {
            "name": "passthrough",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "typing.Iterable[\"BB\"]",
                    "Iterable[\"BB\"]",
                    "networkx.Graph",
                    "\"Task\"",
                    "dict",
                    "List[T]"
                ],
                "out": [
                    "int",
                    "str",
                    "bool"
                ],
                "need": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "ValuePropagator.getitem": {
            "name": "getitem",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "coll": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "set",
                    "set[]",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "int"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "typing.Hashable",
                    "Hashable",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "out": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "set",
                    "set[]",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "int"
                ],
                "need": [
                    "str",
                    "Optional[str]",
                    "None",
                    "set",
                    "set[]",
                    "TextIO",
                    "typing.TextIO",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "ValuePropagator.setitem": {
            "name": "setitem",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "coll": [
                    "bool",
                    "str",
                    "int",
                    "raiden.utils.InitiatorAddress"
                ],
                "key": [
                    "bool",
                    "float",
                    "qutebrowser.utils.urlmatch.UrlPattern",
                    "str",
                    "Union[int, float]",
                    "Union[bool, str]"
                ],
                "val": [
                    "bool",
                    "str",
                    "int",
                    "raiden.utils.InitiatorAddress"
                ],
                "out": [
                    "str",
                    "int"
                ],
                "need": [
                    "int",
                    "typing.Callable[..., None]",
                    "Callable[..., None]",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ValuePropagator.process_node._dofn": {
            "name": "_dofn",
            "location": 128,
            "return": [
                "Callable",
                "trezor.utils.Writer",
                "utils.Node"
            ],
            "arguments": {
                "fn": [
                    "networkx.Graph",
                    "Dict[str, Any]"
                ],
                "inp": []
            }
        }
    },
    "myia-master/myia/opt/lib.py": {
        "M": {
            "name": "M",
            "location": 63,
            "return": [
                "int",
                "raiden.utils.Address"
            ],
            "arguments": {
                "mg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "primset_var": {
            "name": "primset_var",
            "location": 72,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "float",
                "Dict[str, Any]",
                "Callable[[KT], VT]",
                "List[\"ElementHandle\"]",
                "bool",
                "mypy.errors.Errors"
            ],
            "arguments": {}
        },
        "getitem_setitem_tuple": {
            "name": "getitem_setitem_tuple",
            "location": 83,
            "return": [
                "utils.Node",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [],
                "equiv": [
                    "list",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "getitem_tuple": {
            "name": "getitem_tuple",
            "location": 98,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "List[float]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "equiv": [
                    "float",
                    "Callable[[T], T]"
                ]
            }
        },
        "getitem_constant_tuple": {
            "name": "getitem_constant_tuple",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "int",
                    "float"
                ],
                "equiv": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "setitem_tuple": {
            "name": "setitem_tuple",
            "location": 123,
            "return": [
                "dict",
                "bytes",
                "int",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Iterable[Any]",
                    "Callable[[T], T]",
                    "Iterable[T]"
                ],
                "equiv": [
                    "Sequence[int]",
                    "int",
                    "str",
                    "List[int]",
                    "Callable[[T], T]"
                ]
            }
        },
        "setitem_tuple_ct": {
            "name": "setitem_tuple_ct",
            "location": 138,
            "return": [
                "dict",
                "bytes",
                "int",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Iterable[Any]",
                    "Callable[[T], T]",
                    "Iterable[T]"
                ],
                "equiv": [
                    "float",
                    "int",
                    "list",
                    "callable"
                ]
            }
        },
        "bubble_op_tuple_binary": {
            "name": "bubble_op_tuple_binary",
            "location": 168,
            "return": [
                "bytes",
                "str",
                "dict",
                "Dict[str, str]",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "node": [
                    "List[int]",
                    "int",
                    "list"
                ],
                "equiv": [
                    "int"
                ]
            }
        },
        "cancel_tuple_reconstruction": {
            "name": "cancel_tuple_reconstruction",
            "location": 182,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Sequence[int]",
                    "list",
                    "int",
                    "Iterable[float]"
                ],
                "equiv": [
                    "Callable[[None], bool]"
                ]
            }
        },
        "_transform": {
            "name": "_transform",
            "location": 240,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "pattern": [
                    "bool",
                    "int",
                    "float",
                    "list",
                    "Iterable[List[T]]"
                ]
            }
        },
        "on_array_map": {
            "name": "on_array_map",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "orig": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_elim_distribute_condition": {
            "name": "_elim_distribute_condition",
            "location": 370,
            "return": [
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Callable",
                "str"
            ],
            "arguments": {
                "equiv": [
                    "Set[str]",
                    "List[T]",
                    "rdflib.Graph",
                    "Dict[str, Callable[[], None]]"
                ]
            }
        },
        "elim_transpose": {
            "name": "elim_transpose",
            "location": 393,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "equiv": [
                    "Callable[[T], T]",
                    "Pattern",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "merge_transposes": {
            "name": "merge_transposes",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Type[T]",
                    "tuple"
                ],
                "equiv": [
                    "int",
                    "Set[int]",
                    "Iterable[str]",
                    "set",
                    "List[int]"
                ]
            }
        },
        "unfuse_composite": {
            "name": "unfuse_composite",
            "location": 413,
            "return": [
                "int"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "List[int]",
                    "int",
                    "list"
                ],
                "equiv": [
                    "float",
                    "Callable[[T], T]"
                ]
            }
        },
        "simplify_array_map": {
            "name": "simplify_array_map",
            "location": 466,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Type[T]",
                    "list",
                    "str"
                ],
                "equiv": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ]
            }
        },
        "cancel_env_set_get": {
            "name": "cancel_env_set_get",
            "location": 530,
            "return": [
                "bool",
                "Dict[str, str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "resources": [
                    "Optional[int]"
                ],
                "node": [],
                "equiv": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "resolve_globals": {
            "name": "resolve_globals",
            "location": 696,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "resources": [
                    "list",
                    "bytes"
                ],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "equiv": [
                    "int",
                    "str"
                ]
            }
        },
        "force_constants": {
            "name": "force_constants",
            "location": 710,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "mypy.nodes.Var",
                    "dict"
                ],
                "equiv": [
                    "dict"
                ]
            }
        },
        "make_inliner": {
            "name": "make_inliner",
            "location": 737,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inline_criterion": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "check_recursive": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_trivial_graph": {
            "name": "is_trivial_graph",
            "location": 769,
            "return": [
                "float"
            ],
            "arguments": {
                "g": [
                    "int"
                ],
                "node": [
                    "int"
                ],
                "args": []
            }
        },
        "is_unique_use": {
            "name": "is_unique_use",
            "location": 781,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "g": [
                    "Callable[[T], T]",
                    "str",
                    "networkx.graph.Graph",
                    "Optional[Callable]"
                ],
                "node": [
                    "Optional[int]",
                    "List[str]",
                    "str"
                ],
                "args": []
            }
        },
        "is_core": {
            "name": "is_core",
            "location": 787,
            "return": [
                "int",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "g": [],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element"
                ],
                "args": []
            }
        },
        "caller_is_marked": {
            "name": "caller_is_marked",
            "location": 792,
            "return": [
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "g": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element"
                ],
                "node": [],
                "args": []
            }
        },
        "expand_composite": {
            "name": "expand_composite",
            "location": 825,
            "return": [
                "utils.Node",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "resources": [
                    "Callable",
                    "Iterable[Any]",
                    "Union"
                ],
                "node": [],
                "equiv": [
                    "int"
                ]
            }
        },
        "replace_applicator": {
            "name": "replace_applicator",
            "location": 838,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "equiv": [
                    "bool"
                ]
            }
        },
        "check_used_once": {
            "name": "check_used_once",
            "location": 868,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "g": [
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ]
            }
        },
        "specialize_transform": {
            "name": "specialize_transform",
            "location": 875,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Sequence[str]"
                ],
                "args": []
            }
        },
        "specialize_on_graph_arguments": {
            "name": "specialize_on_graph_arguments",
            "location": 894,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "Type[T]"
                ],
                "equiv": [
                    "float",
                    "Callable[[T], T]"
                ]
            }
        },
        "_set_out_abstract": {
            "name": "_set_out_abstract",
            "location": 914,
            "return": [
                ""
            ],
            "arguments": {
                "g": [
                    "Type[T]",
                    "list"
                ],
                "a": [
                    "Type[T]",
                    "list"
                ]
            }
        },
        "getitem_transform": {
            "name": "getitem_transform",
            "location": 921,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "orig_graph": [
                    "str"
                ],
                "idx": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "incorporate_getitem": {
            "name": "incorporate_getitem",
            "location": 938,
            "return": [],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "dict"
                ],
                "equiv": [
                    "list",
                    "Set[int]",
                    "T",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "incorporate_getitem_through_switch": {
            "name": "incorporate_getitem_through_switch",
            "location": 953,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "list",
                    "List[int]"
                ],
                "equiv": [
                    "Dict[str, Any]"
                ]
            }
        },
        "env_getitem_transform": {
            "name": "env_getitem_transform",
            "location": 978,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "orig_graph": [
                    "str",
                    "List[str]",
                    "List[dict]",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "bool",
                    "dict",
                    "Union[Dict[str, Any], List[Any]]"
                ],
                "default": [
                    "str",
                    "dict",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "incorporate_env_getitem": {
            "name": "incorporate_env_getitem",
            "location": 996,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "node": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ],
                "equiv": [
                    "dict",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "incorporate_env_getitem_through_switch": {
            "name": "incorporate_env_getitem_through_switch",
            "location": 1006,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "node": [
                    "Pattern",
                    "List[int]",
                    "T"
                ],
                "equiv": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "call_output_transform": {
            "name": "call_output_transform",
            "location": 1023,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {
                "orig_graph": [
                    "bytes",
                    "int"
                ],
                "abstracts": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Exception]",
                    "Callable[..., Awaitable]",
                    "utils.sap_hana.ParsedSection"
                ]
            }
        },
        "incorporate_call": {
            "name": "incorporate_call",
            "location": 1041,
            "return": [
                "int"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "List[str]"
                ],
                "node": [
                    "Type[T]",
                    "list"
                ],
                "equiv": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "incorporate_call_through_switch": {
            "name": "incorporate_call_through_switch",
            "location": 1059,
            "return": [
                "List['Product']",
                "int",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "List[str]"
                ],
                "node": [
                    "int",
                    "List[int]"
                ],
                "equiv": []
            }
        },
        "replace_Jinv_on_graph": {
            "name": "replace_Jinv_on_graph",
            "location": 1101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "int",
                    "float"
                ],
                "equiv": [
                    "bool"
                ]
            }
        },
        "has_inner_j_on_function": {
            "name": "has_inner_j_on_function",
            "location": 1110,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "expand_J": {
            "name": "expand_J",
            "location": 1130,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "resources": [
                    "ContextManager"
                ],
                "node": [
                    "Dict[str, Any]",
                    "List[int]",
                    "list"
                ],
                "equiv": [
                    "Pattern",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_jelim_jfree": {
            "name": "_jelim_jfree",
            "location": 1177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_jelim_retype": {
            "name": "_jelim_retype",
            "location": 1184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "_jelim_nofunc": {
            "name": "_jelim_nofunc",
            "location": 1191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "List[Number]"
                ]
            }
        },
        "opt_jelim": {
            "name": "opt_jelim",
            "location": 1195,
            "return": [
                "bool"
            ],
            "arguments": {
                "resources": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "M.chk": {
            "name": "chk",
            "location": 66,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "bool",
                "Callable",
                "Union[str, int]"
            ],
            "arguments": {
                "x": [
                    "dict",
                    "Tuple['cirq.Qid']",
                    "Mapping"
                ]
            }
        },
        "setitem_tuple_ct._const": {
            "name": "_const",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "t": [
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "simplify_array_map.to_outer": {
            "name": "to_outer",
            "location": 489,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Optional[Tuple]"
                ]
            }
        },
        "make_inliner.inline": {
            "name": "inline",
            "location": 750,
            "return": [
                "str"
            ],
            "arguments": {
                "resources": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "Union",
                    "Type",
                    "BaseException"
                ],
                "equiv": [
                    "Type",
                    "bool"
                ]
            }
        },
        "unfuse_composite.UnfuseRemapper.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "float",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "reference": [
                    "int",
                    "Collection[int]"
                ]
            }
        },
        "unfuse_composite.UnfuseRemapper.asarray": {
            "name": "asarray",
            "location": 426,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ng": [
                    "int",
                    "float",
                    "str",
                    "List[Tuple[int, int]]"
                ],
                "i": [
                    "bool",
                    "int"
                ]
            }
        },
        "unfuse_composite.UnfuseRemapper.link_apply": {
            "name": "link_apply",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "unfuse_composite.UnfuseRemapper.finalize_graph": {
            "name": "finalize_graph",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "str"
                ],
                "ng": [
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/opt/opt.py": {
        "pattern_replacer": {
            "name": "pattern_replacer",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "PatternSubstitutionOptimization.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "int",
                    "List[List[float]]",
                    "list[list[float]]"
                ],
                "replacement": [
                    "bool",
                    "str",
                    "list[list[str]]",
                    "List[List[str]]",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "PatternSubstitutionOptimization.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [
                "None",
                "str",
                "Union[bool, List[bool]]"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int"
                ],
                "node": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "PatternSubstitutionOptimization.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "typing.Text",
                "str",
                "cmk.utils.type_defs.SectionName"
            ],
            "arguments": {
                "self": []
            }
        },
        "pattern_replacer.deco": {
            "name": "deco",
            "location": 105,
            "return": [
                "PatternSubstitutionOptimization",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "NodeMap.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeMap.register": {
            "name": "register",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interests": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "opt": [
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "NodeMap.get": {
            "name": "get",
            "location": 149,
            "return": [
                "list[]",
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        },
        "LocalPassOptimizer.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalPassOptimizer.__call__": {
            "name": "__call__",
            "location": 173,
            "return": [
                "dict[typing.Text, bool]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "utils.CWLObjectType",
                    "int"
                ],
                "resources": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "manager": [
                    "None",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "LocalPassOptimizer.apply_opt": {
            "name": "apply_opt",
            "location": 219,
            "return": [
                "tuple[typing.Union[dict[str, dict[str, int]],dict[, ],int,typing.Mapping,str,tuple[typing.Union[typing.Any,typing.Any]]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "float"
                ],
                "mng": [
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "float"
                ],
                "n": [
                    "Dict[str, Dict[str, int]]",
                    "dict[str, dict[str, int]]",
                    "int",
                    "dict",
                    "dict[, ]",
                    "str",
                    "Mapping[str, Sequence[str]]",
                    "typing.Mapping"
                ]
            }
        },
        "GraphTransform.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compute": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphTransform.__call__": {
            "name": "__call__",
            "location": 266,
            "return": [
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool",
                    "Callable[..., T]",
                    "typing.Callable[..., T]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NodeMap.register.do_register": {
            "name": "do_register",
            "location": 133,
            "return": [
                "None",
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "opt": [
                    "Callable",
                    "tuple",
                    "Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/opt/rewrite.py": {
        "_noop": {
            "name": "_noop",
            "location": 15,
            "return": [
                "int",
                "bool",
                "str",
                "Callable",
                "None"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "GraphInterfaceRewriter.as_step": {
            "name": "as_step",
            "location": 57,
            "return": [
                "GraphInterfaceRewriterStep",
                "str",
                "cmk.utils.type_defs.HostName",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Optional['models.LTI1p3Provider']",
                    "bytes",
                    "None",
                    "Dict[str, Iterable[Any]]",
                    "dict[str, typing.Iterable[typing.Any]]"
                ]
            }
        },
        "GraphInterfaceRewriter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "graphs": [
                    "bool",
                    "str",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "GraphInterfaceRewriter.param": {
            "name": "param",
            "location": 74,
            "return": [
                "int",
                "dict[str, typing.Any]",
                "Callable",
                "typing.DefaultDict",
                "str",
                "typing.Callable[[], float]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool",
                    "starfish.types.Axes",
                    "int"
                ],
                "model": [
                    "int",
                    "str"
                ]
            }
        },
        "GraphInterfaceRewriter.call_sites": {
            "name": "call_sites",
            "location": 86,
            "return": [
                "type",
                "None",
                "dict[, set[]]"
            ],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "GraphInterfaceRewriter._make_group": {
            "name": "_make_group",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "list[]",
                    "str",
                    "list",
                    "rouver.types.WSGIEnvironment",
                    "list[str]",
                    "None",
                    "List[str]",
                    "Iterable[float]",
                    "Optional[str]"
                ],
                "entries": [
                    "int",
                    "str",
                    "Optional[Collection[int]]",
                    "typing.Collection",
                    "None"
                ]
            }
        },
        "GraphInterfaceRewriter.make_groups": {
            "name": "make_groups",
            "location": 137,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphInterfaceRewriter.run": {
            "name": "run",
            "location": 158,
            "return": [
                "bool",
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphInterfaceRewriter.filter": {
            "name": "filter",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "bool",
                    "zerver.lib.types.ViewFuncT"
                ],
                "all_entries": [
                    "str",
                    "bool",
                    "zerver.lib.types.ViewFuncT"
                ]
            }
        },
        "GraphInterfaceRewriter.order_key": {
            "name": "order_key",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "purplship.providers.ups.utils.Settings",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "None",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "GraphInterfaceRewriter.rewrite_call": {
            "name": "rewrite_call",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ],
                "entry": [
                    "bool",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ]
            }
        },
        "GraphInterfaceRewriter.rewrite_graph": {
            "name": "rewrite_graph",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RemoveUnusedParameters.filter": {
            "name": "filter",
            "location": 259,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "entry": [],
                "all_entries": [
                    "str",
                    "bool",
                    "zerver.lib.types.ViewFuncT"
                ]
            }
        },
        "RemoveUnusedParameters.rewrite_call": {
            "name": "rewrite_call",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "call": [],
                "entry": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "RemoveUnusedParameters.rewrite_graph": {
            "name": "rewrite_graph",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "bool",
                    "web3.types.Wei"
                ]
            }
        },
        "LambdaLiftRewriter.filter": {
            "name": "filter",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [],
                "all_entries": [
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LambdaLiftRewriter.order_key": {
            "name": "order_key",
            "location": 331,
            "return": [
                "int",
                "List[str]",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple[typing.Union[str,str]]",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        },
        "LambdaLiftRewriter.rewrite_call": {
            "name": "rewrite_call",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.types.FunctionLike",
                    "wemake_python_styleguide.types.AnyAssign"
                ],
                "entry": [
                    "mypy.types.FunctionLike",
                    "mypy.types.Overloaded"
                ]
            }
        },
        "LambdaLiftRewriter.rewrite_graph": {
            "name": "rewrite_graph",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "typing.Callable[, ]",
                    "networkx.Graph",
                    "Callable"
                ]
            }
        },
        "GraphInterfaceRewriterStep.__call__": {
            "name": "__call__",
            "location": 456,
            "return": [
                "dict[typing.Text, ]",
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "typing.Callable[, ]",
                    "int",
                    "starlette.types.Receive",
                    "float",
                    "Callable",
                    "starlette.types.Send"
                ]
            }
        }
    },
    "myia-master/myia/opt/__init__.py": {},
    "myia-master/myia/pipeline/pipeline.py": {
        "_nameof": {
            "name": "_nameof",
            "location": 9,
            "return": [
                "str",
                "bool",
                "None",
                "float",
                "typing.Callable[[], T]",
                "typing.Optional[]"
            ],
            "arguments": {
                "step": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "int",
                    "typing.Callable[[], T]",
                    "Optional[T]",
                    "typing.Optional[]",
                    "T",
                    "Callable[[], T]",
                    "Optional"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.with_steps": {
            "name": "with_steps",
            "location": 40,
            "return": [
                "mypy.types.Type",
                "Type[Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.without_step": {
            "name": "without_step",
            "location": 44,
            "return": [
                "str",
                "trezor.utils.Writer",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int",
                    "str"
                ]
            }
        },
        "Pipeline.insert_after": {
            "name": "insert_after",
            "location": 49,
            "return": [
                "str",
                "trezor.utils.Writer",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "base_step": [
                    "Set[int]",
                    "str",
                    "set[int]",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Pipeline.make_transformer": {
            "name": "make_transformer",
            "location": 57,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "in_key": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "None",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "out_key": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "None",
                    "Optional[bool]",
                    "Set[str]"
                ]
            }
        },
        "Pipeline._instantiate_arguments": {
            "name": "_instantiate_arguments",
            "location": 72,
            "return": [
                "dict[, ]",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._call": {
            "name": "_call",
            "location": 78,
            "return": [
                "dict[, dict[, ]]",
                "Dict[str, Any]",
                "Iterable[Type]",
                "float",
                "Dict[str, Set[str]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Type[Any]",
                    "typing.Type"
                ],
                "kwargs": []
            }
        },
        "Pipeline.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "Iterable[Type]",
                "float",
                "Dict[str, Set[str]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "LoopPipeline.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopPipeline.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "Iterable[Type]",
                "float",
                "Dict[str, Set[str]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaPipeline.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaPipeline.resources": {
            "name": "resources",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaPipeline.with_resources": {
            "name": "with_resources",
            "location": 165,
            "return": [
                "mypy.types.Type",
                "dict",
                "Type[Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int"
                ]
            }
        },
        "MyiaPipeline.configure": {
            "name": "configure",
            "location": 174,
            "return": [
                "int",
                "bytes",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Pipeline.make_transformer.run": {
            "name": "run",
            "location": 66,
            "return": [
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "arg": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/pipeline/resources.py": {
        "default_convert": {
            "name": "default_convert",
            "location": 92,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "env": [
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "numpy.dtype"
                ],
                "x": [
                    "list",
                    "Dict[str, Any]",
                    "numpy.dtype"
                ],
                "manage": [
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "numpy.dtype"
                ]
            }
        },
        "ConverterResource.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "object_map": [
                    "T",
                    "Sequence[T]",
                    "Callable[[T], bool]",
                    "str"
                ]
            }
        },
        "ConverterResource.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [
                "Type",
                "str",
                "dict[, ]",
                "list[list[int]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Iterable[typing.Any]",
                    "numpy.ndarray",
                    "typing.Mapping",
                    "Iterable[Any]",
                    "Iterator[Any]",
                    "Mapping[starfish.core.types.Axes, int]"
                ],
                "manage": [
                    "bool",
                    "float",
                    "Iterator[Any]",
                    "T"
                ]
            }
        },
        "ConverterResource.get_cached": {
            "name": "get_cached",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ConverterResource.set_cached": {
            "name": "set_cached",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "obj": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Tracker.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Tracker.activate": {
            "name": "activate",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Tracker._on_add_node": {
            "name": "_on_add_node",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[Iterable[str]]",
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "node": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Tracker._on_drop_node": {
            "name": "_on_drop_node",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "List[str]",
                    "list[str]"
                ],
                "node": [
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "int",
                    "Dict[str, Tuple[str, str]]",
                    "list[]",
                    "None",
                    "Optional[List]",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "InferenceResource.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "bool"
                ],
                "constructors": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "max_stack_depth": [
                    "int",
                    "bool",
                    "float",
                    "Optional[Union[int, float]]",
                    "None"
                ]
            }
        },
        "InferenceResource.__call__": {
            "name": "__call__",
            "location": 191,
            "return": [
                "dict[, ]",
                "starlette.types.Receive",
                "list[int]",
                "dict[str, list[typing.Any]]",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Union[bool, numpy.ndarray]",
                    "bool"
                ],
                "argspec": [
                    "Union[bool, numpy.ndarray]"
                ],
                "outspec": [
                    "Union[bool, numpy.ndarray]",
                    "None",
                    "bool"
                ]
            }
        },
        "LiveInferenceResource.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "bool",
                    "ops.Operation",
                    "typing.Iterable[T]",
                    "Optional[Iterable[T]]",
                    "None"
                ],
                "constructors": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "LiveInferenceResource.__call__": {
            "name": "__call__",
            "location": 221,
            "return": [
                "mypy.types.Type",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonomorphizationResource.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str"
                ]
            }
        },
        "MonomorphizationResource.__call__": {
            "name": "__call__",
            "location": 248,
            "return": [
                "starlette.types.Receive",
                "dict[str, str]",
                "Callable",
                "typing.Type",
                "starlette.types.Send",
                "str",
                "int",
                "bool",
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ]
            }
        },
        "Incorporator.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Incorporator.opaque_to_inference": {
            "name": "opaque_to_inference",
            "location": 265,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ]
            }
        },
        "Incorporator.__call__": {
            "name": "__call__",
            "location": 270,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "itsim.types.Address",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "argspec": [
                    "str",
                    "bool",
                    "int"
                ],
                "outspec": [
                    "str",
                    "lib.Path"
                ]
            }
        },
        "NumpyChecker.to_backend_value": {
            "name": "to_backend_value",
            "location": 291,
            "return": [
                "int",
                "List[str]",
                "bool",
                "Iterable[str]",
                "typing.Callable[[], None]",
                "str",
                "typing.Type",
                "tuple[typing.Union[typing.Any,...]]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Exception",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "t": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Exception",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ]
            }
        },
        "NumpyChecker.from_backend_value": {
            "name": "from_backend_value",
            "location": 295,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "dict[, ]",
                "Iterable[str]",
                "list[typing.Union[str,int]]",
                "list[]",
                "list[list[]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[typing.Union[str,int]]",
                    "int",
                    "List[Union[str, int]]",
                    "list[]",
                    "T",
                    "list[list[]]",
                    "list",
                    "List[list]"
                ],
                "t": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[typing.Union[str,int]]",
                    "int",
                    "List[Union[str, int]]",
                    "list[]",
                    "T",
                    "list[list[]]",
                    "list",
                    "List[list]"
                ]
            }
        },
        "BackendResource.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "bool",
                    "typing.Sequence[]",
                    "int",
                    "Sequence"
                ],
                "name": [
                    "str",
                    "None",
                    "Callable[[Any], bool]",
                    "typing.Callable[typing.Any, bool]",
                    "dict[, ]",
                    "Callable[[str], bool]",
                    "dict",
                    "cmk.utils.type_defs.SectionName",
                    "Callable[[List], bool]"
                ],
                "options": [
                    "str",
                    "None",
                    "int",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BackendResource.compile": {
            "name": "compile",
            "location": 318,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[numpy.dtype]",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "argspec": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "outspec": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DebugVMResource.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "ops.Operation",
                    "typing.Iterable[T]",
                    "bool",
                    "Optional[Iterable[T]]",
                    "str",
                    "None"
                ],
                "implementations": [
                    "ops.Operation",
                    "typing.Iterable[T]",
                    "bool",
                    "Optional[Iterable[T]]",
                    "str",
                    "None"
                ]
            }
        },
        "Resources.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/pipeline/standard.py": {},
    "myia-master/myia/pipeline/steps.py": {
        "step_parse": {
            "name": "step_parse",
            "location": 29,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "Dict[str, str]",
                    "Iterable[T]"
                ],
                "input": [
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ],
                "argspec": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "step_copy": {
            "name": "step_copy",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "dict[typing.Text, typing.Union[list[tuple[typing.Union[int,float]]],str,dict[, ],dict[str, str]]]"
            ],
            "arguments": {
                "resources": [
                    "str",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "graph": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Callable",
                    "None",
                    "typing.Callable[, ]",
                    "Optional[str]"
                ]
            }
        },
        "step_infer": {
            "name": "step_infer",
            "location": 70,
            "return": [
                "dict[typing.Text, typing.Union[int,tuple[int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "graph": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "argspec": [
                    "int",
                    "lib.AbstractType"
                ]
            }
        },
        "step_specialize": {
            "name": "step_specialize",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "resources": [
                    "bool"
                ],
                "graph": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "inference_context": [
                    "str",
                    "trezor.utils.Writer"
                ]
            }
        },
        "step_simplify_types": {
            "name": "step_simplify_types",
            "location": 126,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[V, bool],tuple[],bool]]",
                "tuple",
                "Callable"
            ],
            "arguments": {
                "resources": [
                    "str",
                    "float"
                ],
                "graph": [
                    "typing.Callable[V, bool]",
                    "Callable[[VT], bool]",
                    "raiden.utils.BlockIdentifier"
                ],
                "argspec": [
                    "str",
                    "List[object]",
                    "list[object]"
                ],
                "outspec": [
                    "str",
                    "List[object]",
                    "list[object]"
                ]
            }
        },
        "step_activate_tracker": {
            "name": "step_activate_tracker",
            "location": 156,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "step_llift": {
            "name": "step_llift",
            "location": 323,
            "return": [
                "dict[typing.Text, typing.Union[int,str,typing.Iterable['Context']]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "graph": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "outspec": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "step_validate": {
            "name": "step_validate",
            "location": 344,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "int",
                    "Callable",
                    "str"
                ],
                "graph": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "outspec": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "step_compile": {
            "name": "step_compile",
            "location": 368,
            "return": [
                "dict[typing.Text, typing.Union[str,int,None]]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "resources": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "BaseException",
                    "typing.Sequence[str]"
                ],
                "graph": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "BaseException",
                    "typing.Sequence[str]"
                ],
                "argspec": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "BaseException",
                    "typing.Sequence[str]"
                ],
                "outspec": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "BaseException",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_to_backend": {
            "name": "_to_backend",
            "location": 388,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "float",
                "Generator"
            ],
            "arguments": {
                "arg": [
                    "list",
                    "int",
                    "list[]",
                    "str"
                ],
                "backend": [
                    "bool"
                ],
                "vt": [
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "Optional[list]",
                    "bool",
                    "list[]",
                    "Tuple[int]",
                    "None",
                    "tuple[int]"
                ]
            }
        },
        "step_wrap": {
            "name": "step_wrap",
            "location": 397,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "resources": [
                    "bool",
                    "utils.CWLObjectType",
                    "None",
                    "Optional[utils.OutputCallbackType]"
                ],
                "graph": [
                    "bool",
                    "utils.CWLObjectType",
                    "None",
                    "Optional[utils.OutputCallbackType]"
                ],
                "output": [
                    "bool",
                    "utils.CWLObjectType",
                    "None",
                    "Optional[utils.OutputCallbackType]"
                ],
                "argspec": [
                    "bool",
                    "utils.CWLObjectType",
                    "None",
                    "Optional[utils.OutputCallbackType]"
                ],
                "outspec": [
                    "bool",
                    "utils.CWLObjectType",
                    "None",
                    "Optional[utils.OutputCallbackType]"
                ],
                "orig_argspec": [
                    "None",
                    "bool",
                    "utils.CWLObjectType",
                    "Optional[utils.OutputCallbackType]"
                ],
                "orig_outspec": [
                    "None",
                    "bool",
                    "utils.CWLObjectType",
                    "Optional[utils.OutputCallbackType]"
                ],
                "aliasspec": [
                    "None",
                    "bool",
                    "utils.CWLObjectType",
                    "Optional[utils.OutputCallbackType]"
                ],
                "simplify_types": [
                    "bool",
                    "utils.CWLObjectType",
                    "Optional[utils.OutputCallbackType]"
                ]
            }
        },
        "step_debug_export": {
            "name": "step_debug_export",
            "location": 480,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "resources": [
                    "typing.Callable[bytes, None]",
                    "float",
                    "Callable[[bytes], None]",
                    "str",
                    "graph.Graph",
                    "typing.Deque",
                    "deque"
                ],
                "graph": [
                    "typing.Callable[bytes, None]",
                    "float",
                    "Callable[[bytes], None]",
                    "str",
                    "graph.Graph",
                    "typing.Deque",
                    "deque"
                ]
            }
        },
        "step_wrap.wrapped": {
            "name": "wrapped",
            "location": 437,
            "return": [
                "BackendValue",
                "List[int]",
                "tuple[]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/pipeline/__init__.py": {},
    "myia-master/myia/testing/common.py": {
        "arr_of": {
            "name": "arr_of",
            "location": 50,
            "return": [
                "dict"
            ],
            "arguments": {
                "t": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Iterator",
                    "Iterator[Any]",
                    "numpy.ndarray"
                ],
                "shp": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Iterator",
                    "Iterator[Any]",
                    "numpy.ndarray"
                ],
                "value": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Iterator",
                    "Iterator[Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "ai64_of": {
            "name": "ai64_of",
            "location": 58,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        },
        "ai32_of": {
            "name": "ai32_of",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        },
        "ai16_of": {
            "name": "ai16_of",
            "location": 68,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        },
        "au64_of": {
            "name": "au64_of",
            "location": 73,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {}
        },
        "af64_of": {
            "name": "af64_of",
            "location": 78,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {}
        },
        "af32_of": {
            "name": "af32_of",
            "location": 83,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {}
        },
        "af16_of": {
            "name": "af16_of",
            "location": 88,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {}
        },
        "D": {
            "name": "D",
            "location": 93,
            "return": [
                "Dict[str, List[str]]",
                "str",
                "List[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "__d": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "typing.Optional[]",
                    "Optional"
                ]
            }
        },
        "JT": {
            "name": "JT",
            "location": 105,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "a": [
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "H": {
            "name": "H",
            "location": 110,
            "return": [
                "Callable",
                "trezor.utils.Writer",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "a": []
            }
        },
        "S": {
            "name": "S",
            "location": 115,
            "return": [
                "tuple",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "T",
                    "str",
                    "numpy.ndarray"
                ],
                "t": [
                    "int",
                    "None",
                    "str",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "Ex": {
            "name": "Ex",
            "location": 122,
            "return": [
                "BaseException",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "numpy.ndarray",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]"
                ],
                "t": [
                    "numpy.ndarray",
                    "str",
                    "None",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Shp": {
            "name": "Shp",
            "location": 127,
            "return": [
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "Ty": {
            "name": "Ty",
            "location": 132,
            "return": [],
            "arguments": {
                "t": [
                    "numpy.ndarray",
                    "T"
                ]
            }
        },
        "U": {
            "name": "U",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TU": {
            "name": "TU",
            "location": 144,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "MutableMapping[str, int]",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "to_abstract_test": {
            "name": "to_abstract_test",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "list[int]",
                    "List[int]",
                    "typing.Sequence[T]",
                    "int",
                    "mode.utils.Deque[T]",
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "_mysum1": {
            "name": "_mysum1",
            "location": 324,
            "return": [
                "str",
                "utils.Node",
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "_mysum2": {
            "name": "_mysum2",
            "location": 329,
            "return": [
                "str",
                "int",
                "utils.Node",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_mysum3": {
            "name": "_mysum3",
            "location": 334,
            "return": [
                "str",
                "float",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ],
                "z": [
                    "float",
                    "str"
                ]
            }
        },
        "Thing.__call__": {
            "name": "__call__",
            "location": 263,
            "return": [
                "str",
                "List[str]",
                "Optional[int]",
                "bool",
                "hackathon.utils.utils.DataMessage",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.abs": {
            "name": "abs",
            "location": 275,
            "return": [
                "float",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.absprop": {
            "name": "absprop",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point3D.abs": {
            "name": "abs",
            "location": 293,
            "return": [
                "float",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedMatrix.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]"
                ]
            }
        },
        "FixedMatrix.__call__": {
            "name": "__call__",
            "location": 345,
            "return": [
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float"
                ],
                "c": [
                    "float"
                ],
                "dtype": [
                    "float",
                    "typing.Text"
                ]
            }
        },
        "FixedMatrix.__mul__": {
            "name": "__mul__",
            "location": 349,
            "return": [
                "FixedMatrix",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "list[float]",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        }
    },
    "myia-master/myia/testing/multitest.py": {
        "eqtest": {
            "name": "eqtest",
            "location": 45,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "to_numpy": {
            "name": "to_numpy",
            "location": 50,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "nevergrad.common.Any",
                    "float"
                ]
            }
        },
        "mt": {
            "name": "mt",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "myia_function_test": {
            "name": "myia_function_test",
            "location": 220,
            "return": [
                "mypy.types.Type",
                "starlette.types.Receive",
                "starlette.types.Send",
                "dict",
                "mypy.types.Instance"
            ],
            "arguments": {
                "fn": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "infer": {
            "name": "infer",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "args": [],
                "result": [
                    "int",
                    "Callable",
                    "Dict[str, float]",
                    "bool"
                ],
                "pipeline": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "List[str]",
                    "list",
                    "bool"
                ],
                "args": [],
                "result": [
                    "Callable",
                    "gluonts.model.common.Tensor",
                    "Optional[bool]",
                    "Optional[str]",
                    "Sequence[Any]",
                    "bool",
                    "Optional[Union[int, str]]",
                    "T"
                ],
                "abstract": [
                    "Optional[sklearn.pipeline.Pipeline]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "broad_specs": [
                    "Optional[Any]",
                    "Optional[float]",
                    "bool"
                ],
                "validate": [
                    "int",
                    "bool",
                    "float"
                ],
                "pipeline": [
                    "int",
                    "bool",
                    "float"
                ],
                "backend": [
                    "int",
                    "bool",
                    "float"
                ],
                "numpy_compat": [
                    "int",
                    "bool",
                    "float"
                ],
                "primitives": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_generate_pytest_parameter": {
            "name": "_generate_pytest_parameter",
            "location": 341,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "backend": [
                    "dict",
                    "str",
                    "bool"
                ],
                "target": [
                    "gluonts.model.common.Tensor",
                    "Optional[str]",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "identifier": [
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "register_backend_testing": {
            "name": "register_backend_testing",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "backend": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "target": [
                    "int",
                    "snapcrafinternal.steps.Step",
                    "Exception"
                ],
                "options": [
                    "str",
                    "Dict[str, List[str]]",
                    "int",
                    "NamedTuple"
                ],
                "identifier": [
                    "str",
                    "Dict[str, List[str]]",
                    "int",
                    "NamedTuple"
                ]
            }
        },
        "get_backend_testing_options": {
            "name": "get_backend_testing_options",
            "location": 373,
            "return": [
                "list",
                "List[Dict[str, str]]",
                "int",
                "Dict[str, Any]",
                "str",
                "Optional[dict]",
                "List[str]"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "apps.common.coininfo.CoinInfo"
                ],
                "target": [
                    "int",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "_get_backend_testing_parameters": {
            "name": "_get_backend_testing_parameters",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_load_testable_backends": {
            "name": "_load_testable_backends",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "backend_except": {
            "name": "backend_except",
            "location": 423,
            "return": [
                "bool",
                "Optional[numpy.ndarray]",
                "int"
            ],
            "arguments": {}
        },
        "bt": {
            "name": "bt",
            "location": 443,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Multiple.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "mt.deco": {
            "name": "deco",
            "location": 79,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "MyiaFunctionTest.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runtest": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "spec": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "MyiaFunctionTest.configure": {
            "name": "configure",
            "location": 106,
            "return": [
                "Sequence['cirq.Qid']",
                "numpy.ndarray",
                "bool",
                "types.signals.SignalHandlerT",
                "ics.types.ContextDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaFunctionTest.check": {
            "name": "check",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run": [
                    "str",
                    "Type[BaseException]",
                    "Optional[str]"
                ],
                "args": [],
                "expected": [
                    "bool",
                    "str",
                    "List[str]",
                    "Type",
                    "cmk.utils.type_defs.SectionName"
                ]
            }
        },
        "MyiaFunctionTest.generate_params": {
            "name": "generate_params",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaFunctionTest.run": {
            "name": "run",
            "location": 178,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Iterable[str]",
                    "Awaitable",
                    "Callable",
                    "str",
                    "Sequence['cirq.Qid']",
                    "Iterable['cirq.Operation']",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "MyiaFunctionTest.__call__": {
            "name": "__call__",
            "location": 182,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "starlette.types.Receive",
                    "Callable",
                    "starlette.types.Send",
                    "int",
                    "float"
                ]
            }
        },
        "MyiaFunctionTestFactory.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runtest": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "spec": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "MyiaFunctionTestFactory.configure": {
            "name": "configure",
            "location": 204,
            "return": [
                "Sequence['cirq.Qid']",
                "numpy.ndarray",
                "bool",
                "types.signals.SignalHandlerT",
                "ics.types.ContextDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaFunctionTestFactory.xfail": {
            "name": "xfail",
            "location": 208,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyiaFunctionTestFactory.__call__": {
            "name": "__call__",
            "location": 212,
            "return": [
                "SupportsFloat",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "infer.out": {
            "name": "out",
            "location": 238,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "_run.out": {
            "name": "out",
            "location": 312,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": []
            }
        },
        "bt.deco": {
            "name": "deco",
            "location": 465,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "mt.deco.runtest": {
            "name": "runtest",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "bt.deco.wrapper_fn": {
            "name": "wrapper_fn",
            "location": 467,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/testing/__init__.py": {},
    "myia-master/myia/utils/env.py": {
        "require_same": {
            "name": "require_same",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "fns": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "objs": [
                    "str",
                    "int",
                    "list[]",
                    "numpy.ndarray",
                    "None",
                    "Optional[List]",
                    "Iterable[bool]"
                ]
            }
        },
        "smap": {
            "name": "smap",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "_add": {
            "name": "_add",
            "location": 53,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "EnvInstance.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_contents": [
                    "dict[, ]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "Optional[\"TrackingData\"]",
                    "str"
                ]
            }
        },
        "EnvInstance.get": {
            "name": "get",
            "location": 68,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "EnvInstance.set": {
            "name": "set",
            "location": 72,
            "return": [
                "EnvInstance"
            ],
            "arguments": {
                "self": [
                    "_TEnvInstance"
                ],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EnvInstance.add": {
            "name": "add",
            "location": 78,
            "return": [
                "EnvInstance"
            ],
            "arguments": {
                "self": [
                    "_TEnvInstance"
                ],
                "other": [
                    "dict",
                    "dict[, ]",
                    "Exception",
                    "Optional[Exception]",
                    "bool",
                    "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]",
                    "None",
                    "typing.Callable[numpy.ndarray,numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "EnvInstance.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/utils/errors.py": {
        "type_error_nargs": {
            "name": "type_error_nargs",
            "location": 63,
            "return": [
                "type",
                "MyiaTypeError"
            ],
            "arguments": {
                "ident": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ],
                "got": [
                    "str",
                    "int"
                ]
            }
        },
        "check_nargs": {
            "name": "check_nargs",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "ident": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type[T]",
                    "str",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "args": []
            }
        },
        "untested": {
            "name": "untested",
            "location": 101,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "InferenceError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "refs": [
                    "list[]",
                    "Callable",
                    "Optional[Tuple[int, int]]",
                    "Optional[int]",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "pytb": [
                    "Optional[Collection[int]]",
                    "None",
                    "int",
                    "typing.Collection",
                    "Optional[float]",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "priority": [
                    "int",
                    "Optional[Collection[int]]",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TypeMismatchError.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "type",
                    "bytes",
                    "typing.Type",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "got": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "int",
                    "None",
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "myia-master/myia/utils/get_fields.py": {
        "get_fields": {
            "name": "get_fields",
            "location": 11,
            "return": [
                "str",
                "Type[T]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia/utils/intern.py": {
        "_maybe_setattr": {
            "name": "_maybe_setattr",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Tuple[str]"
                ],
                "attr": [
                    "str",
                    "Tuple[str]"
                ],
                "value": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "eqkey": {
            "name": "eqkey",
            "location": 135,
            "return": [
                "str",
                "int",
                "float",
                "Union[complex, float, int]",
                "List[float]"
            ],
            "arguments": {
                "x": [
                    "list",
                    "float"
                ]
            }
        },
        "deep_eqkey": {
            "name": "deep_eqkey",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_bfs": {
            "name": "_bfs",
            "location": 188,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']",
                    "Union[str, bool, None]",
                    "bytes"
                ]
            }
        },
        "hashrec": {
            "name": "hashrec",
            "location": 200,
            "return": [
                "int"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "eqrec": {
            "name": "eqrec",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj1": [
                    "Match",
                    "List[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "obj2": [
                    "Match",
                    "List[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "cache": [
                    "IO"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 258,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "eq": {
            "name": "eq",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj1": [
                    "str"
                ],
                "obj2": [
                    "str",
                    "List[Dict]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "intern": {
            "name": "intern",
            "location": 340,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "inst": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CanonStore.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashfn": [
                    "int",
                    "bool",
                    "float"
                ],
                "eqfn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CanonStore.get_canonical": {
            "name": "get_canonical",
            "location": 19,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[Dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Union[bytes, bytearray, memoryview]",
                    "int"
                ]
            }
        },
        "CanonStore.set_canonical": {
            "name": "set_canonical",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "CanonStore.gc": {
            "name": "gc",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqKey.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type[Any]",
                    "bool",
                    "ClassVar",
                    "Exception"
                ]
            }
        },
        "EqKey.canonicalize": {
            "name": "canonicalize",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "Sequence",
                    "Dict[str, Any]",
                    "type",
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "ItemEK.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "Callable"
                ],
                "keys": [
                    "str",
                    "List[str]",
                    "dict",
                    "Sequence[str]",
                    "List[int]"
                ]
            }
        },
        "ItemEK.canonicalize": {
            "name": "canonicalize",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrEK.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "Callable",
                    "int",
                    "bool",
                    "set"
                ],
                "keys": [
                    "dict",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Match"
                ]
            }
        },
        "AttrEK.canonicalize": {
            "name": "canonicalize",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternedMC.new": {
            "name": "new",
            "location": 293,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "InternedMC"
                ]
            }
        },
        "InternedMC.intern": {
            "name": "intern",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "InternedMC"
                ],
                "inst": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "InternedMC.__call__": {
            "name": "__call__",
            "location": 303,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "InternedMC"
                ]
            }
        },
        "Interned.intern": {
            "name": "intern",
            "location": 316,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interned.__eqkey__": {
            "name": "__eqkey__",
            "location": 320,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PossiblyRecursive.empty": {
            "name": "empty",
            "location": 329,
            "return": [
                "PossiblyRecursive"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPossiblyRecursive]"
                ]
            }
        },
        "PossiblyRecursive.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia/utils/merge.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "set",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "list"
            ],
            "arguments": {
                "xs": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 166,
            "return": [
                "bytes",
                "bytearray",
                "List[dict]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[]",
                    "bool",
                    "tuple"
                ],
                "b": [
                    "float",
                    "int",
                    "tuple[]",
                    "tuple",
                    "bool"
                ],
                "mode": [
                    "float",
                    "int",
                    "tuple",
                    "bool"
                ]
            }
        },
        "MergeMode.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__value": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        }
    },
    "myia-master/myia/utils/misc.py": {
        "repr_": {
            "name": "repr_",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]"
                ]
            }
        },
        "list_str": {
            "name": "list_str",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "lst": [
                    "list"
                ]
            }
        },
        "is_dataclass_type": {
            "name": "is_dataclass_type",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "dataclass_fields": {
            "name": "dataclass_fields",
            "location": 362,
            "return": [
                "dict"
            ],
            "arguments": {
                "dc": [
                    "str"
                ]
            }
        },
        "keyword_decorator": {
            "name": "keyword_decorator",
            "location": 394,
            "return": [
                "Callable"
            ],
            "arguments": {
                "deco": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "core": {
            "name": "core",
            "location": 413,
            "return": [
                "Union[(Callable[([Any], Any)], _T0)]"
            ],
            "arguments": {
                "fn": [
                    "_T0"
                ]
            }
        },
        "resolve_from_path": {
            "name": "resolve_from_path",
            "location": 432,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "assert_scalar": {
            "name": "assert_scalar",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RandomStateWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_state": [
                    "str",
                    "dict"
                ]
            }
        },
        "TaggedValue.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "TaggedValue.has": {
            "name": "has",
            "location": 35,
            "return": [
                "List[str]",
                "str",
                "MutableMapping[str, int]",
                "Sequence[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "TaggedValue.cast": {
            "name": "cast",
            "location": 39,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Sequence[Tuple[str, str, Any]]",
                    "float"
                ]
            }
        },
        "Named.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Named.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_field": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 79,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.__missing__": {
            "name": "__missing__",
            "location": 90,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "HasDefaults.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "defaults": [
                    "str",
                    "bool",
                    "int"
                ],
                "defaults_field": [
                    "Callable",
                    "int",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "HasDefaults.set_defaults": {
            "name": "set_defaults",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "str",
                    "Optional[str]",
                    "Union[str, Exception]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HasDefaults.defaults": {
            "name": "defaults",
            "location": 123,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "owner": [
                    "str",
                    "bool"
                ],
                "history": [
                    "bool",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Event.register": {
            "name": "register",
            "location": 187,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_T0"
                ],
                "run_history": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Event.register_with_history": {
            "name": "register_with_history",
            "location": 208,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_T0"
                ]
            }
        },
        "Event.remove": {
            "name": "remove",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Event.__iter__": {
            "name": "__iter__",
            "location": 216,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__call__": {
            "name": "__call__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Events.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int"
                ]
            }
        },
        "NS.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NS.__getitem__": {
            "name": "__getitem__",
            "location": 274,
            "return": [
                "Mapping",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "NS.__setitem__": {
            "name": "__setitem__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[str, int]",
                    "dict",
                    "list"
                ],
                "value": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[str, int]",
                    "dict",
                    "list"
                ]
            }
        },
        "NS.__repr__": {
            "name": "__repr__",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Namespace.__contains__": {
            "name": "__contains__",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "Namespace.__getitem__": {
            "name": "__getitem__",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleNamespace.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable"
                ]
            }
        },
        "ClosureNamespace.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "ClosureNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 349,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ErrorPool.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorPool.add": {
            "name": "add",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "ErrorPool.trigger": {
            "name": "trigger",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stringify": [
                    "str",
                    "bool",
                    "float",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "keyword_decorator.new_deco": {
            "name": "new_deco",
            "location": 398,
            "return": [
                "Union[\"RangeSet[T]\", Iterable[Any]]",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 465,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagFactory.__init__": {
            "name": "__init__",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagFactory.__getattr__": {
            "name": "__getattr__",
            "location": 477,
            "return": [
                "Tag"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "WorkSet.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Tuple[float, float]",
                    "str",
                    "bool"
                ]
            }
        },
        "WorkSet.processed": {
            "name": "processed",
            "location": 499,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "int",
                    "tuple",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "WorkSet.set_next": {
            "name": "set_next",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "int"
                ]
            }
        },
        "WorkSet.queue": {
            "name": "queue",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[], T]"
                ]
            }
        },
        "WorkSet.queue_all": {
            "name": "queue_all",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "List[Tuple[bool, str]]",
                    "tuple",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "WorkSet.requeue": {
            "name": "requeue",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "dict",
                    "Type['AbstractIntegrationConversation']",
                    "Type[T]"
                ]
            }
        },
        "WorkSet.__iter__": {
            "name": "__iter__",
            "location": 520,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeMap.__missing__": {
            "name": "__missing__",
            "location": 540,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj_t": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Registry.register.deco": {
            "name": "deco",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "keyword_decorator.new_deco.newer_deco": {
            "name": "newer_deco",
            "location": 402,
            "return": [
                "str",
                "float",
                "Dict[str, int]",
                "int",
                "set"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Optional[float]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Any"
                ]
            }
        }
    },
    "myia-master/myia/utils/orderedset.py": {
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "elems": [
                    "list[]",
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "typing.Iterable[str]",
                    "type",
                    "Iterable[str]",
                    "List[\"Block\"]",
                    "Callable[..., Awaitable[Any]]"
                ]
            }
        },
        "OrderedSet.remove": {
            "name": "remove",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int"
                ]
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "OrderedSet.copy": {
            "name": "copy",
            "location": 28,
            "return": [
                "list[]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 34,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.clear": {
            "name": "clear",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "bool",
                "int",
                "Set[str]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "OrderedSet.pop": {
            "name": "pop",
            "location": 50,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.isdisjoint": {
            "name": "isdisjoint",
            "location": 57,
            "return": [
                "bool",
                "List[str]",
                "Optional[dict]",
                "int",
                "str",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "OrderedSet.issubset": {
            "name": "issubset",
            "location": 61,
            "return": [
                "bool",
                "List[str]",
                "dict",
                "Set[int]",
                "List[List[Any]]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "OrderedSet.__lt__": {
            "name": "__lt__",
            "location": 67,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "OrderedSet.issuperset": {
            "name": "issuperset",
            "location": 70,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "typing.AbstractSet",
                    "Union[list, 'ListProxy']",
                    "list[]"
                ]
            }
        },
        "OrderedSet.__gt__": {
            "name": "__gt__",
            "location": 76,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "OrderedSet.union": {
            "name": "union",
            "location": 79,
            "return": [
                "dict[int, str]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.intersection": {
            "name": "intersection",
            "location": 87,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.difference": {
            "name": "difference",
            "location": 95,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 103,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.update": {
            "name": "update",
            "location": 111,
            "return": [
                "OrderedSet",
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.intersection_update": {
            "name": "intersection_update",
            "location": 120,
            "return": [
                "OrderedSet",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.difference_update": {
            "name": "difference_update",
            "location": 130,
            "return": [
                "OrderedSet",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        }
    },
    "myia-master/myia/utils/partial.py": {
        "partition_keywords": {
            "name": "partition_keywords",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "bool",
                    "Callable[..., None]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "kw": [
                    "_T1"
                ]
            }
        },
        "Partial.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ]
            }
        },
        "Partial._validate": {
            "name": "_validate",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.partial": {
            "name": "partial",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.configure": {
            "name": "configure",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "dict[, ]",
                    "dict",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "Partial.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.__merge__": {
            "name": "__merge__",
            "location": 84,
            "return": [
                "Optional[Partial]"
            ],
            "arguments": {
                "self": [],
                "partial": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "Type[T]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "mode": [
                    "bool",
                    "typing.Mapping",
                    "Mapping",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[typing.Mapping]",
                    "Sequence",
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "Sequence[Mapping[str, Any]]",
                    "list[str]",
                    "Sequence[Any]",
                    "None",
                    "Sequence[Sequence[Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Partial.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partializable.partial": {
            "name": "partial",
            "location": 116,
            "return": [
                "Partial"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "int",
                    "complex",
                    "bool",
                    "bytes",
                    "None",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "myia-master/myia/utils/trace.py": {
        "glob_to_regex": {
            "name": "glob_to_regex",
            "location": 12,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "glob": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "tracer": {
            "name": "tracer",
            "location": 131,
            "return": [
                "Union[(Tracer, TracerContextManager)]"
            ],
            "arguments": {
                "name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "typing.IO",
                    "Optional[IO[bytes]]",
                    "bool"
                ]
            }
        },
        "_unit": {
            "name": "_unit",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "secs": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "listener": {
            "name": "listener",
            "location": 365,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "resolve_tracers": {
            "name": "resolve_tracers",
            "location": 378,
            "return": [
                "list"
            ],
            "arguments": {
                "spec": [
                    "Optional[bool]",
                    "dict",
                    "bool"
                ]
            }
        },
        "glob_to_regex.replacer": {
            "name": "replacer",
            "location": 21,
            "return": [
                "typing.Text",
                "str",
                "Iterable[T]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "m": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Tracer.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracer.emit": {
            "name": "emit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Tracer.on": {
            "name": "on",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "fn": [
                    "float",
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Union[str, bool, None]",
                    "str",
                    "Sequence['cirq.Qid']",
                    "None",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        },
        "Tracer.__copy__": {
            "name": "__copy__",
            "location": 74,
            "return": [
                "racer"
            ],
            "arguments": {
                "self": [
                    "_TTracer"
                ]
            }
        },
        "Tracer.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [
                "TracerContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "Tracer.__getattr__": {
            "name": "__getattr__",
            "location": 85,
            "return": [
                "typing.Callable[, ]",
                "Optional[int]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Optional[Dict[str, float]]",
                    "dict"
                ]
            }
        },
        "TracerContextManager.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "TracerContextManager.set_results": {
            "name": "set_results",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracerContextManager.__enter__": {
            "name": "__enter__",
            "location": 111,
            "return": [
                "racerContextManager"
            ],
            "arguments": {
                "self": [
                    "_TTracerContextManager"
                ]
            }
        },
        "TracerContextManager.__exit__": {
            "name": "__exit__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracerContextManager.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceListener.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "focus": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "TraceListener.install": {
            "name": "install",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "str",
                    "float",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TraceListener.post": {
            "name": "post",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceListener.__enter__": {
            "name": "__enter__",
            "location": 172,
            "return": [
                "raceListener"
            ],
            "arguments": {
                "self": [
                    "_TTraceListener"
                ]
            }
        },
        "TraceListener.__exit__": {
            "name": "__exit__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "exc_traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "TraceExplorer.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "focus": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "TraceExplorer.install": {
            "name": "install",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "str",
                    "bytes",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "TraceExplorer._log_keys": {
            "name": "_log_keys",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_curpath": [
                    "str",
                    "None"
                ]
            }
        },
        "TraceExplorer.post": {
            "name": "post",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoTrace.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DoTrace.install": {
            "name": "install",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "DoTrace.post": {
            "name": "post",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrace.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrace.install": {
            "name": "install",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MultiTrace.post": {
            "name": "post",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileResults.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "dict",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "ProfileResults.print": {
            "name": "print",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "focus": [
                    "str",
                    "bool",
                    "None"
                ],
                "print_results": [
                    "bool",
                    "int",
                    "Callable[[str, str], float]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "Profiler.on_enter": {
            "name": "on_enter",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_stack": [
                    "str",
                    "int",
                    "Callable"
                ],
                "profile": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Profiler.on_exit": {
            "name": "on_exit",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_stack": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "profile": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Profiler.post": {
            "name": "post",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "listener.deco": {
            "name": "deco",
            "location": 368,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "resolve_tracers._resolve_single": {
            "name": "_resolve_single",
            "location": 393,
            "return": [
                "tuple[tuple[]]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "call": [
                    "str"
                ]
            }
        },
        "listener.deco.new_fn": {
            "name": "new_fn",
            "location": 370,
            "return": [
                "DoTrace",
                "bool",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia/utils/unify.py": {
        "_get_next_tag": {
            "name": "_get_next_tag",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "var": {
            "name": "var",
            "location": 234,
            "return": [
                "Var"
            ],
            "arguments": {
                "filter": [
                    "Union[(Callable[([Any], bool)], Iterable)]"
                ]
            }
        },
        "svar": {
            "name": "svar",
            "location": 252,
            "return": [
                "SVar"
            ],
            "arguments": {
                "subtype": [
                    "Var"
                ]
            }
        },
        "uvar": {
            "name": "uvar",
            "location": 260,
            "return": [
                "UnionVar"
            ],
            "arguments": {
                "values": [
                    "Iterable"
                ]
            }
        },
        "expandlist": {
            "name": "expandlist",
            "location": 265,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "lst": [
                    "Iterable[T]"
                ]
            }
        },
        "noseq": {
            "name": "noseq",
            "location": 276,
            "return": [
                "T"
            ],
            "arguments": {
                "fn": [
                    "Callable[([T], T)]"
                ],
                "u": [
                    "T"
                ]
            }
        },
        "default_visit": {
            "name": "default_visit",
            "location": 297,
            "return": [],
            "arguments": {
                "value": [
                    "dict[, ]",
                    "Sequence[str]",
                    "list[typing.Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Union[dict, List[Any]]",
                    "T",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ],
                "fn": [
                    "str",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "Var.matches": {
            "name": "matches",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Tuple[Union[str, int]]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Var.intersection": {
            "name": "intersection",
            "location": 44,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "Var.ensure_tag": {
            "name": "ensure_tag",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVar.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtype": [
                    "Var"
                ]
            }
        },
        "SVar.matches": {
            "name": "matches",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "dict[, ]",
                    "T",
                    "dict",
                    "None",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "SVar.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVar.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionVar.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Iterable"
                ]
            }
        },
        "UnionVar.matches": {
            "name": "matches",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Tuple[Union[str, int]]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "UnionVar.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedVar.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "legal_values": [
                    "Iterable"
                ]
            }
        },
        "RestrictedVar.matches": {
            "name": "matches",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "list",
                    "list[]",
                    "Iterator[Any]",
                    "typing.Iterator"
                ]
            }
        },
        "RestrictedVar.intersection": {
            "name": "intersection",
            "location": 141,
            "return": [
                "Union[(RestrictedVar, bool, _T0)]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0"
                ]
            }
        },
        "RestrictedVar.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredicateSet.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredicateSet.__eq__": {
            "name": "__eq__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "float",
                    "T",
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]"
                ]
            }
        },
        "PredicateSet.__call__": {
            "name": "__call__",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "PredicateSet.__str__": {
            "name": "__str__",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterVar.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "Callable[([Any], bool)]"
                ]
            }
        },
        "FilterVar.matches": {
            "name": "matches",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Iterator",
                    "Iterator[Any]",
                    "list[]",
                    "T",
                    "Iterable",
                    "list"
                ]
            }
        },
        "FilterVar.intersection": {
            "name": "intersection",
            "location": 216,
            "return": [
                "Union[(FilterVar, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "FilterVar.__repr__": {
            "name": "__repr__",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unification.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitors": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "eq": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Unification.visit": {
            "name": "visit",
            "location": 320,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[([T], T)]"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "Unification.clone": {
            "name": "clone",
            "location": 324,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T"
                ],
                "copy_map": [
                    "dict"
                ]
            }
        },
        "Unification._clone": {
            "name": "_clone",
            "location": 343,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T"
                ],
                "copy_map": [
                    "dict"
                ]
            }
        },
        "Unification.unify_union": {
            "name": "unify_union",
            "location": 372,
            "return": [
                "Dict[(Var, Any)]"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "UnionVar"
                ],
                "v": [
                    "float",
                    "int"
                ],
                "equiv": [
                    "Dict[(Var, Any)]"
                ]
            }
        },
        "Unification._getvar": {
            "name": "_getvar",
            "location": 428,
            "return": [
                "int",
                "Optional[Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "Unification.unify_raw": {
            "name": "unify_raw",
            "location": 431,
            "return": [
                "Dict[(Var, Any)]"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "float",
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Dict[str, Any]]",
                    "typing.Mapping"
                ],
                "v": [
                    "float",
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Dict[str, Any]]",
                    "typing.Mapping"
                ],
                "equiv": [
                    "Dict[(Var, Any)]"
                ]
            }
        },
        "Unification.unify": {
            "name": "unify",
            "location": 564,
            "return": [
                "Dict[(Var, Any)]"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "float",
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "list[]"
                ],
                "v": [
                    "float",
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "list[]"
                ],
                "equiv": [
                    "Dict[(Var, Any)]"
                ]
            }
        },
        "Unification.reify": {
            "name": "reify",
            "location": 601,
            "return": [
                "tuple",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "Match",
                    "typing.Match"
                ],
                "equiv": [
                    "Dict[(Var, Any)]"
                ]
            }
        },
        "PredicateSet.__str__._str": {
            "name": "_str",
            "location": 192,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Unification.unify_raw.appender": {
            "name": "appender",
            "location": 504,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "l": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ]
            }
        },
        "Unification.unify_raw.appender.fn": {
            "name": "fn",
            "location": 505,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "u": [
                    "list",
                    "int",
                    "FrozenSet[int]",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "myia-master/myia/utils/universe.py": {
        "UniverseInstance.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_contents": [
                    "dict[, ]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "Optional[\"TrackingData\"]",
                    "str"
                ]
            }
        },
        "UniverseInstance.get": {
            "name": "get",
            "location": 14,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "bytes",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "UniverseInstance.set": {
            "name": "set",
            "location": 21,
            "return": [
                "UniverseInstance"
            ],
            "arguments": {
                "self": [
                    "_TUniverseInstance"
                ],
                "handle": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "UniverseInstance.commit": {
            "name": "commit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleInstance.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "abstract": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "myia-master/myia/utils/variables.py": {
        "constvar": {
            "name": "constvar",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "constvar._is_c": {
            "name": "_is_c",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "myia-master/myia/utils/__init__.py": {},
    "myia-master/myia_backend_pytorch/myia_backend_pytorch/pytorch.py": {
        "pytorch_array_to_scalar": {
            "name": "pytorch_array_to_scalar",
            "location": 33,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "v": [
                    "list",
                    "Dict[str, Set[str]]",
                    "List[Dict[str, Any]]",
                    "numpy.ndarray"
                ]
            }
        },
        "pytorch_take_grad_inp": {
            "name": "pytorch_take_grad_inp",
            "location": 40,
            "return": [
                "str",
                "list[]",
                "int",
                "tuple[typing.Union[int,int]]",
                "Optional[str]"
            ],
            "arguments": {
                "nb_indices": [
                    "int",
                    "None",
                    "Optional[torch.device]",
                    "numpy.ndarray"
                ],
                "indices": [
                    "Optional[int]",
                    "Sequence[numpy.ndarray]",
                    "src.utils.utils.ModP",
                    "int",
                    "numpy.ndarray"
                ],
                "values": [
                    "int",
                    "float",
                    "Optional[bytearray]",
                    "bytearray",
                    "None"
                ]
            }
        },
        "pytorch_random_initialize": {
            "name": "pytorch_random_initialize",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "Union[str, Dict]"
            ],
            "arguments": {
                "seed": [
                    "int"
                ]
            }
        },
        "pytorch_random_uint32": {
            "name": "pytorch_random_uint32",
            "location": 60,
            "return": [
                "tuple[]",
                "List[str]",
                "int",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "bool",
                    "hackathon.utils.utils.DataMessage",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "shape": [
                    "numpy.array",
                    "int",
                    "Union[int, float]",
                    "bool",
                    "numpy.matrix"
                ]
            }
        },
        "pytorch_scalar_cast": {
            "name": "pytorch_scalar_cast",
            "location": 157,
            "return": [
                "tuple[tuple[]]",
                "list",
                "int"
            ],
            "arguments": {
                "op": [
                    "int",
                    "float",
                    "T",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "pytorch_array_cast": {
            "name": "pytorch_array_cast",
            "location": 169,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_array_map": {
            "name": "pytorch_array_map",
            "location": 180,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "_pytorch_array_reduce_add": {
            "name": "_pytorch_array_reduce_add",
            "location": 196,
            "return": [
                "int",
                "Mapping"
            ],
            "arguments": {
                "tshp": [
                    "List[\"Block\"]",
                    "int",
                    "list[B]"
                ]
            }
        },
        "_pytorch_array_reduce_mul": {
            "name": "_pytorch_array_reduce_mul",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tshp": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "pytorch_array_reduce": {
            "name": "pytorch_array_reduce",
            "location": 234,
            "return": [
                "tuple[tuple[]]",
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "op": [
                    "\"Mountain\""
                ]
            }
        },
        "pytorch_array_getitem": {
            "name": "pytorch_array_getitem",
            "location": 253,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_array_setitem": {
            "name": "pytorch_array_setitem",
            "location": 263,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_argmax": {
            "name": "pytorch_argmax",
            "location": 275,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_array_max": {
            "name": "pytorch_array_max",
            "location": 297,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_gather": {
            "name": "pytorch_gather",
            "location": 319,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_scatter": {
            "name": "pytorch_scatter",
            "location": 329,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_scatter_add": {
            "name": "pytorch_scatter_add",
            "location": 339,
            "return": [
                "tuple[]",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "op": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pytorch_concat": {
            "name": "pytorch_concat",
            "location": 349,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_split": {
            "name": "pytorch_split",
            "location": 359,
            "return": [
                "tuple[]",
                "str",
                "float",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_conv2d": {
            "name": "pytorch_conv2d",
            "location": 369,
            "return": [
                "tuple[]",
                "int",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_conv_transpose2d": {
            "name": "pytorch_conv_transpose2d",
            "location": 383,
            "return": [
                "tuple[]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_conv2d_weight_grad": {
            "name": "pytorch_conv2d_weight_grad",
            "location": 406,
            "return": [
                "tuple[]",
                "int",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_max_pool2d": {
            "name": "pytorch_max_pool2d",
            "location": 432,
            "return": [
                "tuple[]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_max_pool2d_grad": {
            "name": "pytorch_max_pool2d_grad",
            "location": 451,
            "return": [
                "tuple[]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "op": [
                    "int"
                ]
            }
        },
        "pytorch_convert": {
            "name": "pytorch_convert",
            "location": 496,
            "return": [
                "tuple[typing.Union[typing.Callable[, ],list[str]]]",
                "Mapping[str, Sequence[str]]",
                "tuple[typing.Union[str,dict[typing.Union[str,None], str],list[str]]]",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "Callable[[Any], bool]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "backend": [
                    "int",
                    "str"
                ]
            }
        },
        "load_options": {
            "name": "load_options",
            "location": 637,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "device": [
                    "typing.Text",
                    "bool",
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "load_backend": {
            "name": "load_backend",
            "location": 646,
            "return": [
                "PyTorchBackend",
                "str",
                "int"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ]
            }
        },
        "pytorch_scalar_cast._impl": {
            "name": "_impl",
            "location": 163,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "v": []
            }
        },
        "pytorch_array_cast._impl": {
            "name": "_impl",
            "location": 174,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": []
            }
        },
        "pytorch_array_map._impl": {
            "name": "_impl",
            "location": 190,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "_pytorch_array_reduce_add._impl": {
            "name": "_impl",
            "location": 199,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "array": []
            }
        },
        "_pytorch_array_reduce_mul._impl": {
            "name": "_impl",
            "location": 220,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "array": []
            }
        },
        "pytorch_array_getitem._impl": {
            "name": "_impl",
            "location": 256,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "array": [],
                "begin": [],
                "end": [],
                "strides": []
            }
        },
        "pytorch_array_setitem._impl": {
            "name": "_impl",
            "location": 266,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "array": [],
                "begin": [],
                "end": [],
                "strides": [],
                "value": []
            }
        },
        "pytorch_argmax._impl": {
            "name": "_impl",
            "location": 278,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": []
            }
        },
        "pytorch_array_max._impl": {
            "name": "_impl",
            "location": 300,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": []
            }
        },
        "pytorch_gather._impl": {
            "name": "_impl",
            "location": 322,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": [],
                "index": []
            }
        },
        "pytorch_scatter._impl": {
            "name": "_impl",
            "location": 332,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": [],
                "index": [],
                "src": []
            }
        },
        "pytorch_scatter_add._impl": {
            "name": "_impl",
            "location": 342,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": [],
                "index": [],
                "src": []
            }
        },
        "pytorch_concat._impl": {
            "name": "_impl",
            "location": 352,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "dim": []
            }
        },
        "pytorch_split._impl": {
            "name": "_impl",
            "location": 362,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "sections": [],
                "dim": []
            }
        },
        "pytorch_conv2d._impl": {
            "name": "_impl",
            "location": 372,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input": [],
                "weight": [],
                "stride": [],
                "padding": [],
                "dilation": [],
                "groups": []
            }
        },
        "pytorch_conv_transpose2d._impl": {
            "name": "_impl",
            "location": 386,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input": [],
                "weight": [],
                "stride": [],
                "padding": [],
                "output_padding": [],
                "groups": [],
                "dilation": []
            }
        },
        "pytorch_conv2d_weight_grad._impl": {
            "name": "_impl",
            "location": 409,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input": [],
                "weight_size": [],
                "grad_output": [],
                "stride": [],
                "padding": [],
                "dilation": [],
                "groups": []
            }
        },
        "pytorch_max_pool2d._impl": {
            "name": "_impl",
            "location": 435,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input": [],
                "kernel_size": [],
                "stride": [],
                "padding": [],
                "dilation": [],
                "ceil_mode": []
            }
        },
        "pytorch_max_pool2d_grad._impl": {
            "name": "_impl",
            "location": 454,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "int",
                    "list",
                    "Optional[numpy.array]"
                ],
                "kernel_size": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "stride": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "padding": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "dilation": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "ceil_mode": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "dout": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "PyTorchBackend.__init__": {
            "name": "__init__",
            "location": 525,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PyTorchBackend.compile": {
            "name": "compile",
            "location": 532,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "IO[str]",
                    "int",
                    "typing.IO",
                    "List[cmk.utils.type_defs.HostName]",
                    "list[H]"
                ]
            }
        },
        "PyTorchBackend.to_numpy": {
            "name": "to_numpy",
            "location": 538,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Dict[cmk.utils.type_defs.HostName, List[cmk.utils.type_defs.HostName]]",
                    "dict[H, list[cmk.utils.type_defs.HostName]]"
                ]
            }
        },
        "PyTorchBackend.from_numpy": {
            "name": "from_numpy",
            "location": 545,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "utils.types.Box3D"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "List[Tuple[str, str]]",
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "Type[T]",
                    "None",
                    "Optional[Iterable[T]]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "numpy.ndarray"
                ]
            }
        },
        "PyTorchBackend.to_scalar": {
            "name": "to_scalar",
            "location": 549,
            "return": [
                "Callable[..., None]",
                "int",
                "Tuple[float, float, float, float]",
                "dict",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Union[T, Sequence[T]]",
                    "float",
                    "typing.Sequence[T]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Optional[Union[int, float]]",
                    "int"
                ]
            }
        },
        "PyTorchBackend.from_scalar": {
            "name": "from_scalar",
            "location": 556,
            "return": [
                "None",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[str]",
                    "str",
                    "T",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "Set[str]",
                    "set[str]"
                ],
                "t": [
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "PyTorchBackend.from_backend_value": {
            "name": "from_backend_value",
            "location": 563,
            "return": [
                "dict[, ]",
                "str",
                "list[]",
                "int",
                "list[dict[str, str]]",
                "tuple[]",
                "numpy.ndarray",
                "List[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "object"
                ],
                "t": [
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PyTorchBackend.to_backend_value": {
            "name": "to_backend_value",
            "location": 598,
            "return": [
                "None",
                "str",
                "tuple[]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[Type]",
                    "typing.Type",
                    "Type",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "t": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "PyTorchBackend.supports_prim_group": {
            "name": "supports_prim_group",
            "location": 633,
            "return": [
                "bool",
                "List[str]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "prim_group": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "myia-master/myia_backend_pytorch/myia_backend_pytorch/pytorch_conv_grad.py": {
        "conv2d_weight": {
            "name": "conv2d_weight",
            "location": 94,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]",
                "Generator",
                "int"
            ],
            "arguments": {
                "input": [
                    "str",
                    "torch.Tensor",
                    "None",
                    "Optional[torch.Tensor]"
                ],
                "weight_size": [
                    "str",
                    "int",
                    "Dict[str, torch.Tensor]",
                    "float"
                ],
                "grad_output": [
                    "int",
                    "torch.Tensor",
                    "bool"
                ],
                "stride": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float",
                    "bool",
                    "Optional[Union[int, str]]",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "tuple[]",
                    "T",
                    "tuple"
                ],
                "padding": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float",
                    "bool",
                    "Optional[Union[int, str]]",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "tuple[]",
                    "T",
                    "tuple"
                ],
                "dilation": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float",
                    "bool",
                    "Optional[Union[int, str]]",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "tuple[]",
                    "T",
                    "tuple"
                ],
                "groups": [
                    "str",
                    "Exception",
                    "Dict[str, torch.Tensor]",
                    "AnyStr"
                ]
            }
        }
    },
    "myia-master/myia_backend_pytorch/myia_backend_pytorch/__init__.py": {},
    "myia-master/myia_backend_pytorch/myia_tests_backend_pytorch/__init__.py": {},
    "myia-master/myia_backend_pytorch/tests/test_pytorch_rng.py": {
        "_test_output": {
            "name": "_test_output",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "list",
                    "list[]",
                    "List[bool]",
                    "bool",
                    "list[bool]",
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_init_random_combined": {
            "name": "test_init_random_combined",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_separated": {
            "name": "test_init_random_separated",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_combined.fn": {
            "name": "fn",
            "location": 35,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "test_init_random_separated.init": {
            "name": "init",
            "location": 50,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_init_random_separated.gen_2_2": {
            "name": "gen_2_2",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_1": {
            "name": "gen_1",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_scalar": {
            "name": "gen_scalar",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        }
    },
    "myia-master/myia_backend_relay/myia_backend_relay/relay.py": {
        "ashape": {
            "name": "ashape",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "relay_distribute": {
            "name": "relay_distribute",
            "location": 89,
            "return": [
                "Dict[str, int]",
                "Iterable[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "numpy.ma.MaskedArray",
                    "int"
                ],
                "array": [
                    "bool",
                    "numpy.ma.MaskedArray",
                    "int"
                ],
                "shape": [
                    "float"
                ]
            }
        },
        "relay_transpose": {
            "name": "relay_transpose",
            "location": 97,
            "return": [
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Union[pandas.Series, numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "a": [
                    "int",
                    "Union[pandas.Series, numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "ax": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "T"
                ]
            }
        },
        "relay_reshape": {
            "name": "relay_reshape",
            "location": 104,
            "return": [
                "List[int]",
                "backend.src.sheets_commands.sheeGrid",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "c": [
                    "Dict[str, str]",
                    "str"
                ],
                "v": [
                    "Dict[str, str]",
                    "str"
                ],
                "shp": [
                    "str",
                    "Tuple[Any, Any]",
                    "numpy.ndarray",
                    "Sequence[Any]",
                    "int"
                ]
            }
        },
        "relay_array_map": {
            "name": "relay_array_map",
            "location": 120,
            "return": [
                "List[int]",
                "List[List[int]]",
                "List[str]",
                "Tuple[float]",
                "int"
            ],
            "arguments": {
                "c": [
                    "int",
                    "mode.utils.types.graphs._T",
                    "Callable",
                    "Callable[[Any], T]",
                    "numpy.ndarray"
                ],
                "fn": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "relay_array_reduce": {
            "name": "relay_array_reduce",
            "location": 131,
            "return": [
                "bool",
                "Tuple[Any, int]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "float",
                    "tuple",
                    "numpy.ndarray"
                ],
                "fn": [
                    "Callable",
                    "int"
                ],
                "array": [
                    "list"
                ],
                "shape": [
                    "list",
                    "callable",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "relay_cast": {
            "name": "relay_cast",
            "location": 167,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "c": [
                    "Counter",
                    "numpy.ndarray",
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ],
                "v": [
                    "int",
                    "float"
                ],
                "t": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "relay_tuple_getitem": {
            "name": "relay_tuple_getitem",
            "location": 174,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "c": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ],
                "t": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ],
                "idx": [
                    "int",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "relay_tuple_setitem": {
            "name": "relay_tuple_setitem",
            "location": 180,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Mapping[str, float]",
                    "numpy.ndarray",
                    "raiden.utils.TokenAmount"
                ],
                "t": [
                    "int"
                ],
                "idx": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "val": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "relay_casttag": {
            "name": "relay_casttag",
            "location": 196,
            "return": [
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str, str]"
                ],
                "x": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Match"
                ],
                "tag": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "relay_hastag": {
            "name": "relay_hastag",
            "location": 205,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "x": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Match",
                    "List[List[Any]]"
                ],
                "tag": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "relay_tagged": {
            "name": "relay_tagged",
            "location": 216,
            "return": [
                "tuple",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "c": [
                    "str",
                    "list",
                    "List[str]",
                    "Type[object]"
                ],
                "x": [
                    "str",
                    "list",
                    "List[str]",
                    "Type[object]"
                ],
                "tag": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "relay_env_setitem": {
            "name": "relay_env_setitem",
            "location": 223,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "env": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "x": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "relay_env_getitem": {
            "name": "relay_env_getitem",
            "location": 228,
            "return": [
                "Dict[str, Any]",
                "Set[str]",
                "Union[type, Tuple[type, ...]]",
                "Optional[Any]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Iterator[str]"
                ],
                "env": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Iterator[str]"
                ],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Iterator[str]"
                ],
                "dft": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Iterator[str]"
                ]
            }
        },
        "relay_unsafe_static_cast": {
            "name": "relay_unsafe_static_cast",
            "location": 233,
            "return": [
                "list",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "dict",
                    "Match",
                    "tuple"
                ],
                "val": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "ty": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "relay_array_getitem": {
            "name": "relay_array_getitem",
            "location": 240,
            "return": [
                "str",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "c": [
                    "int",
                    "dict",
                    "Union[str, list]"
                ],
                "a": [
                    "int",
                    "dict",
                    "Union[str, list]"
                ],
                "start": [
                    "float",
                    "Callable[[numpy.ndarray, numpy.ndarray, bool], numpy.ndarray]",
                    "Union[int, float]",
                    "List[str]",
                    "str"
                ],
                "stop": [
                    "float",
                    "Callable[[numpy.ndarray, numpy.ndarray, bool], numpy.ndarray]",
                    "Union[int, float]",
                    "List[str]",
                    "str"
                ],
                "strides": [
                    "float",
                    "Callable[[numpy.ndarray, numpy.ndarray, bool], numpy.ndarray]",
                    "Union[int, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "relay_array_setitem": {
            "name": "relay_array_setitem",
            "location": 250,
            "return": [
                "str",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Generator"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "Optional[str]"
                ],
                "array": [
                    "bool",
                    "Optional[str]"
                ],
                "start": [
                    "str",
                    "int",
                    "bool"
                ],
                "stop": [
                    "bool",
                    "List[str]",
                    "List[numpy.ndarray]",
                    "list"
                ],
                "strides": [
                    "bool",
                    "Iterator[Tuple[Any]]",
                    "List[Tuple[str, str]]",
                    "list",
                    "int",
                    "float",
                    "List[int]",
                    "bytes"
                ],
                "value": [
                    "int",
                    "list",
                    "numpy.ndarray",
                    "Optional[Union[float, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "relay_argmax": {
            "name": "relay_argmax",
            "location": 264,
            "return": [
                "str",
                "numpy.ndarray",
                "trezor.utils.Writer",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "c": [
                    "Dict[str, str]",
                    "str"
                ],
                "v": [
                    "numpy.ndarray",
                    "Dict[str, str]",
                    "bytes",
                    "Tuple[int, int, int]"
                ],
                "dims": [
                    "Awaitable[T]",
                    "str",
                    "list",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "relay_max_pool2d": {
            "name": "relay_max_pool2d",
            "location": 271,
            "return": [
                "numpy.matrix",
                "Dict[str, int]",
                "str",
                "Generator",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "img": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "psize": [
                    "int",
                    "bool",
                    "FrozenSet[int]",
                    "numpy.ndarray"
                ],
                "stride": [
                    "int",
                    "bool",
                    "FrozenSet[int]",
                    "numpy.ndarray"
                ],
                "pad": [
                    "int",
                    "bool",
                    "FrozenSet[int]",
                    "numpy.ndarray"
                ],
                "dil": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "ceil_mode": [
                    "numpy.ndarray",
                    "Tuple[numpy.dtype]",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "relay_max_pool2d_grad": {
            "name": "relay_max_pool2d_grad",
            "location": 288,
            "return": [
                "str",
                "numpy.ndarray",
                "trezor.utils.Writer",
                "utils.Node",
                "Optional[int]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "img": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "psize": [
                    "str",
                    "tuple",
                    "int"
                ],
                "stride": [
                    "str",
                    "tuple",
                    "int"
                ],
                "pad": [
                    "str",
                    "tuple",
                    "int"
                ],
                "dil": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "ceil_mode": [
                    "str",
                    "tuple",
                    "Sequence[numpy.ndarray]",
                    "bool",
                    "int",
                    "Dict[str, int]"
                ],
                "dout": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "relay_array_max": {
            "name": "relay_array_max",
            "location": 306,
            "return": [
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int"
                ],
                "a": [
                    "float",
                    "int"
                ],
                "dim": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "relay_conv2d": {
            "name": "relay_conv2d",
            "location": 311,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str"
            ],
            "arguments": {
                "c": [
                    "Optional[bytes]",
                    "list"
                ],
                "img": [
                    "Optional[bytes]",
                    "list"
                ],
                "w": [
                    "Optional[bytes]",
                    "list"
                ],
                "stride": [
                    "list"
                ],
                "pad": [
                    "list"
                ],
                "dil": [
                    "list"
                ],
                "groups": [
                    "int",
                    "str"
                ]
            }
        },
        "relay_conv2d_weight_grad": {
            "name": "relay_conv2d_weight_grad",
            "location": 327,
            "return": [
                "str",
                "Exception",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "c": [
                    "bytes",
                    "int",
                    "dict"
                ],
                "data": [
                    "Dict[str, numpy.ndarray]",
                    "Mapping[str, Any]",
                    "list",
                    "numpy.ndarray",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "wsize": [
                    "T",
                    "int",
                    "bool"
                ],
                "dout": [
                    "bytes",
                    "bool",
                    "float"
                ],
                "stride": [
                    "numpy.ndarray",
                    "dict",
                    "raiden.utils.GasPrice",
                    "List[str]"
                ],
                "pad": [
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "dil": [
                    "numpy.ndarray",
                    "dict",
                    "raiden.utils.GasPrice",
                    "List[str]"
                ],
                "groups": [
                    "int",
                    "Iterable[bytes]",
                    "bytes",
                    "Mapping"
                ]
            }
        },
        "relay_conv_transpose2d": {
            "name": "relay_conv_transpose2d",
            "location": 408,
            "return": [
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "input": [
                    "int",
                    "float",
                    "bytearray"
                ],
                "weight": [
                    "numpy.ndarray",
                    "List[bytes]"
                ],
                "stride": [
                    "List[str]",
                    "bool",
                    "Tuple[numpy.ndarray, Optional[numpy.ndarray]]"
                ],
                "padding": [
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "Tuple[\"ndarray\", \"ndarray\", \"ndarray\"]",
                    "Tuple[int, int]",
                    "int",
                    "numpy.array",
                    "float",
                    "str"
                ],
                "output_padding": [
                    "int",
                    "Iterable[T]",
                    "List[int]",
                    "str"
                ],
                "groups": [
                    "float",
                    "int",
                    "Dict[int, List[Any]]",
                    "bool"
                ],
                "dilation": [
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "Tuple[\"ndarray\", \"ndarray\", \"ndarray\"]",
                    "Tuple[int, int]",
                    "int",
                    "numpy.array",
                    "float",
                    "str"
                ]
            }
        },
        "relay_concat": {
            "name": "relay_concat",
            "location": 496,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "c": [
                    "Dict[str, str]",
                    "int"
                ],
                "x": [
                    "numpy.ndarray",
                    "T",
                    "int",
                    "list"
                ],
                "dim": [
                    "int"
                ]
            }
        },
        "relay_split": {
            "name": "relay_split",
            "location": 506,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "c": [
                    "Type[object]",
                    "List[str]",
                    "str"
                ],
                "x": [
                    "Type[object]",
                    "List[str]",
                    "str"
                ],
                "sections": [
                    "int",
                    "xtype.Bool"
                ],
                "dim": [
                    "int",
                    "Dict[str, str]",
                    "List[int]"
                ]
            }
        },
        "relay_gather": {
            "name": "relay_gather",
            "location": 514,
            "return": [
                "str",
                "bool",
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "c": [
                    "List[int]",
                    "Union[int, str]",
                    "bytes",
                    "dict",
                    "backend.src.sheets_commands.sheeGrid",
                    "int"
                ],
                "data": [
                    "List[int]",
                    "Union[int, str]",
                    "bytes",
                    "dict",
                    "backend.src.sheets_commands.sheeGrid",
                    "int"
                ],
                "axis": [
                    "int",
                    "bytes",
                    "backend.src.sheets_commands.sheeGrid"
                ],
                "indices": [
                    "List[int]",
                    "Union[int, str]",
                    "bytes",
                    "dict",
                    "backend.src.sheets_commands.sheeGrid",
                    "int"
                ]
            }
        },
        "relay_scatter": {
            "name": "relay_scatter",
            "location": 519,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "c": [
                    "numpy.ndarray",
                    "List[Tuple[float, float]]",
                    "str",
                    "int"
                ],
                "inp": [
                    "numpy.ndarray",
                    "List[Tuple[float, float]]",
                    "str",
                    "int"
                ],
                "dim": [
                    "int",
                    "bytes",
                    "tuple"
                ],
                "index": [
                    "numpy.ndarray",
                    "List[Tuple[float, float]]",
                    "str",
                    "int"
                ],
                "src": [
                    "numpy.ndarray",
                    "List[Tuple[float, float]]",
                    "str",
                    "int"
                ]
            }
        },
        "relay_scatter_add": {
            "name": "relay_scatter_add",
            "location": 524,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "Mapping",
                "int",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "c": [
                    "Sized",
                    "TextIO"
                ],
                "inp": [
                    "Sized",
                    "TextIO"
                ],
                "dim": [
                    "float",
                    "Tuple[int, int]",
                    "List[int]",
                    "bytes"
                ],
                "index": [
                    "Sized",
                    "TextIO"
                ],
                "src": [
                    "Sized",
                    "TextIO"
                ]
            }
        },
        "relay_make_cell": {
            "name": "relay_make_cell",
            "location": 529,
            "return": [
                "tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int, int]",
                    "Type[T]",
                    "List[str]",
                    "numpy.ndarray"
                ],
                "v": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int, int]",
                    "Type[T]",
                    "List[str]",
                    "numpy.ndarray"
                ],
                "u": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int, int]",
                    "Type[T]",
                    "List[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "relay_universe_setitem": {
            "name": "relay_universe_setitem",
            "location": 534,
            "return": [
                "int",
                "utils.Node",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "c": [
                    "numpy.ndarray",
                    "float",
                    "set",
                    "dict"
                ],
                "u": [
                    "bool",
                    "Sequence[Union[int, str]]",
                    "Union[str, int]",
                    "int",
                    "bytes"
                ],
                "h": [
                    "numpy.ndarray",
                    "float",
                    "set",
                    "dict"
                ],
                "v": [
                    "numpy.ndarray",
                    "float",
                    "set",
                    "dict"
                ]
            }
        },
        "relay_universe_getitem": {
            "name": "relay_universe_getitem",
            "location": 538,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "str",
                "int",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "float",
                    "tuple"
                ],
                "u": [
                    "str",
                    "Tuple[str]"
                ],
                "h": [
                    "bool",
                    "float",
                    "tuple"
                ]
            }
        },
        "relay_take_grad_inp": {
            "name": "relay_take_grad_inp",
            "location": 542,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "numpy.array",
                    "str"
                ],
                "_nb_indices": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "_indices": [
                    "float",
                    "int",
                    "list",
                    "numpy.array",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "_values": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "relay_random_initialize": {
            "name": "relay_random_initialize",
            "location": 563,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "str"
                ],
                "ref_seed": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "relay_random_uint32": {
            "name": "relay_random_uint32",
            "location": 578,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "int"
                ],
                "ref_rstate": [
                    "int"
                ],
                "ref_shape": [
                    "float",
                    "str",
                    "\"Vector\""
                ]
            }
        },
        "in_graph": {
            "name": "in_graph",
            "location": 725,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "g": [
                    "List[bool]",
                    "str",
                    "bool",
                    "Any"
                ]
            }
        },
        "make_handle_to_make_cell": {
            "name": "make_handle_to_make_cell",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "g": [
                    "Tuple[int, int]",
                    "Type",
                    "int"
                ]
            }
        },
        "load_options": {
            "name": "load_options",
            "location": 1097,
            "return": [
                "numpy.array",
                "numpy.ndarray",
                "int",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "target": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "device_id": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "exec_kind": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "load_backend": {
            "name": "load_backend",
            "location": 1102,
            "return": [
                "str",
                "dict",
                "bool",
                "Callable",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "RelayMapper.__init__": {
            "name": "__init__",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_map": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ],
                "complex_map": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "RelayMapper.register": {
            "name": "register",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prim": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RelayMapper.register_simple": {
            "name": "register_simple",
            "location": 664,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "RelayMapper.register_complex": {
            "name": "register_complex",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "RelayMapper.get": {
            "name": "get",
            "location": 674,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str"
                ]
            }
        },
        "NodeVisitor._visit_array_map": {
            "name": "_visit_array_map",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_array_reduce": {
            "name": "_visit_array_reduce",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_array_cast": {
            "name": "_visit_array_cast",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_scalar_to_array": {
            "name": "_visit_scalar_to_array",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeVisitor._visit_unsafe_static_cast": {
            "name": "_visit_unsafe_static_cast",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor._visit_scalar_cast": {
            "name": "_visit_scalar_cast",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "NodeVisitor.__call__": {
            "name": "__call__",
            "location": 703,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "Graph"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]"
                ]
            }
        },
        "in_graph.filter": {
            "name": "filter",
            "location": 726,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "node": []
            }
        },
        "RelayConstantConverter.__init__": {
            "name": "__init__",
            "location": 740,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ],
                "types": [
                    "str",
                    "bool"
                ]
            }
        },
        "RelayConstantConverter.convert_array": {
            "name": "convert_array",
            "location": 745,
            "return": [
                "Optional[int]",
                "numpy.ndarray",
                "Dict[str, int]",
                "bool",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Tuple[float, float]",
                    "str",
                    "numpy.ndarray"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayConstantConverter.convert_scalar": {
            "name": "convert_scalar",
            "location": 749,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "AbstractSet[int]"
                ],
                "t": [
                    "str",
                    "int",
                    "AbstractSet[int]"
                ]
            }
        },
        "RelayConstantConverter.convert_bool": {
            "name": "convert_bool",
            "location": 753,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "float"
                ],
                "t": [
                    "str",
                    "float"
                ]
            }
        },
        "RelayConstantConverter.convert_nil": {
            "name": "convert_nil",
            "location": 757,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayConstantConverter.convert_dead": {
            "name": "convert_dead",
            "location": 761,
            "return": [
                "int",
                "bool",
                "List[int]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "RelayConstantConverter.convert_env": {
            "name": "convert_env",
            "location": 765,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "cmk.utils.type_defs.TagGroups"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ],
                "t": [
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "RelayConstantConverter.convert_handle": {
            "name": "convert_handle",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "Optional[float]",
                    "Union[int, float]",
                    "Optional[str]",
                    "float"
                ],
                "t": [
                    "Optional[float]",
                    "Union[int, float]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "RelayConstantConverter.convert_tuple": {
            "name": "convert_tuple",
            "location": 772,
            "return": [
                "bool",
                "Callable[[], bool]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Union[type, numpy.dtype]",
                    "numpy.array",
                    "list",
                    "int"
                ],
                "t": [
                    "Union[type, numpy.dtype]",
                    "numpy.array",
                    "list",
                    "int"
                ]
            }
        },
        "RelayConstantConverter.convert_tagged": {
            "name": "convert_tagged",
            "location": 775,
            "return": [
                "str",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "t": [
                    "str"
                ]
            }
        },
        "RelayConstantConverter.convert_type": {
            "name": "convert_type",
            "location": 781,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "set",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "t": [
                    "bool",
                    "set",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "CompileGraph.run": {
            "name": "run",
            "location": 798,
            "return": [
                "Union[numbers.Real, numpy.ndarray]",
                "Awaitable",
                "str"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Awaitable[T_co]",
                    "Optional[Callable[[None], None]]",
                    "bool",
                    "int"
                ],
                "context": [
                    "int"
                ],
                "target": [
                    "int"
                ],
                "exec_kind": [
                    "int"
                ]
            }
        },
        "CompileGraph.on_parameter": {
            "name": "on_parameter",
            "location": 845,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CompileGraph.on_apply": {
            "name": "on_apply",
            "location": 851,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ]
            }
        },
        "CompileGraph.on_constant": {
            "name": "on_constant",
            "location": 862,
            "return": [
                "bool",
                "float",
                "int",
                "Optional[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ir.ANFNode"
                ]
            }
        },
        "CompileGraph.ref": {
            "name": "ref",
            "location": 870,
            "return": [
                "float",
                "Iterable[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "CompileGraph.convert_func": {
            "name": "convert_func",
            "location": 874,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "Union[numpy.ndarray, numpy.void]"
                ]
            }
        },
        "RelayInputConverter.__init__": {
            "name": "__init__",
            "location": 921,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "exec_kind": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RelayInputConverter.convert_array": {
            "name": "convert_array",
            "location": 928,
            "return": [
                "int",
                "Dict[str, int]",
                "trezor.utils.Writer",
                "str",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayInputConverter.convert_scalar": {
            "name": "convert_scalar",
            "location": 932,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "t": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "RelayInputConverter.convert_bool": {
            "name": "convert_bool",
            "location": 938,
            "return": [
                "str",
                "numpy.ndarray",
                "trezor.utils.Writer",
                "Dict[str, Any]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "List[T]",
                    "bool",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "t": [
                    "int",
                    "float",
                    "Optional[Exception]",
                    "List[int]"
                ]
            }
        },
        "RelayInputConverter.convert_nil": {
            "name": "convert_nil",
            "location": 942,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayInputConverter.convert_tuple": {
            "name": "convert_tuple",
            "location": 946,
            "return": [
                "float",
                "str",
                "int",
                "Set[str]",
                "List[\"TaskNode\"]",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Union[int, float]",
                    "numpy.array"
                ],
                "t": [
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Union[int, float]",
                    "numpy.array"
                ]
            }
        },
        "RelayInputConverter.convert_random_state": {
            "name": "convert_random_state",
            "location": 949,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "list",
                    "Tuple[float, float]",
                    "Callable"
                ],
                "t": [
                    "Optional[Exception]",
                    "Optional[Mapping[str, Any]]",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "RelayInputConverter.convert_universe": {
            "name": "convert_universe",
            "location": 952,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayInputConverter.convert_handle": {
            "name": "convert_handle",
            "location": 955,
            "return": [
                "str",
                "Iterable[int]",
                "IO[str]",
                "Tuple[type]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bool",
                    "float"
                ],
                "t": [
                    "int",
                    "float",
                    "X",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "RelayInputConverter.convert_tagged": {
            "name": "convert_tagged",
            "location": 959,
            "return": [
                "str",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Iterable[List[T]]",
                    "Callable",
                    "numpy.ndarray",
                    "bool",
                    "Iterable[T]"
                ],
                "t": [
                    "Iterable[List[T]]",
                    "Callable",
                    "numpy.ndarray",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "RelayInputConverter.convert_type": {
            "name": "convert_type",
            "location": 969,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "set",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "t": [
                    "bool",
                    "set",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "RelayOutputConverter.convert_array": {
            "name": "convert_array",
            "location": 979,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayOutputConverter.convert_nil": {
            "name": "convert_nil",
            "location": 983,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayOutputConverter.convert_bool": {
            "name": "convert_bool",
            "location": 988,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Mapping[str, Any]]",
                    "utils.diskstaDisk",
                    "Dict[str, str]"
                ],
                "t": [
                    "int",
                    "float",
                    "Optional[Exception]",
                    "List[int]"
                ]
            }
        },
        "RelayOutputConverter.convert_scalar": {
            "name": "convert_scalar",
            "location": 992,
            "return": [
                "bool",
                "int",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "t": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "RelayOutputConverter.convert_tuple": {
            "name": "convert_tuple",
            "location": 996,
            "return": [
                "str",
                "int",
                "bool",
                "List[numpy.array]",
                "float",
                "Tuple[int]",
                "tuple",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "RelayOutputConverter.convert_handle": {
            "name": "convert_handle",
            "location": 1000,
            "return": [
                "numpy.ndarray",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Iterable",
                    "List[float]",
                    "float",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "t": [
                    "str",
                    "Iterable",
                    "List[float]",
                    "float",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "RelayOutputConverter.convert_tagged": {
            "name": "convert_tagged",
            "location": 1003,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "t": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "RelayOutputConverter.convert_random_state": {
            "name": "convert_random_state",
            "location": 1011,
            "return": [
                "bool",
                "str",
                "int",
                "raiden.utils.PaymentNetworkID",
                "raiden.utils.TokenAddress"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Dict[str, float]",
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "str",
                    "tuple"
                ],
                "t": [
                    "Optional[Exception]",
                    "Optional[Mapping[str, Any]]",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "RelayOutputConverter.convert_type": {
            "name": "convert_type",
            "location": 1014,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "set",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "t": [
                    "numpy.ndarray",
                    "Callable[[None], bool]",
                    "Iterable",
                    "Type",
                    "T",
                    "Tuple[float, float]",
                    "numpy.array"
                ]
            }
        },
        "RelayBackend.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "src.backend.database_service.DatabaseConnection",
                    "src.backend.db_models.ABTest",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "Callable"
                ],
                "device_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "exec_kind": [
                    "str"
                ]
            }
        },
        "RelayBackend.compile": {
            "name": "compile",
            "location": 1082,
            "return": [
                "float",
                "Callable[..., None]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str"
                ],
                "argspec": [
                    "str"
                ],
                "outspec": [
                    "str"
                ]
            }
        },
        "RelayBackend.supports_prim_group": {
            "name": "supports_prim_group",
            "location": 1090,
            "return": [
                "int",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "prim_group": [
                    "dict",
                    "Union[Dict, str]",
                    "str"
                ]
            }
        }
    },
    "myia-master/myia_backend_relay/myia_backend_relay/relay_helpers.py": {
        "get_union_ctr": {
            "name": "get_union_ctr",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Callable[..., str]",
                    "typing.Callable[..., str]",
                    "Optional[str]",
                    "None"
                ],
                "t": [
                    "List[str]",
                    "list[str]",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "List[int]",
                    "None",
                    "Optional[Dict]",
                    "list[int]",
                    "List[List]",
                    "dict[, ]",
                    "Optional[str]",
                    "list[list[]]",
                    "str"
                ]
            }
        },
        "fill_reverse_tag_map": {
            "name": "fill_reverse_tag_map",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_myia_tag": {
            "name": "get_myia_tag",
            "location": 54,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "rtag": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "to_relay_type": {
            "name": "to_relay_type",
            "location": 203,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "dead_value": {
            "name": "dead_value",
            "location": 207,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bool",
                    "T",
                    "typing.Type",
                    "Type"
                ]
            }
        },
        "handle_wrapper": {
            "name": "handle_wrapper",
            "location": 213,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "handle_params": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_placeholder_body": {
            "name": "_placeholder_body",
            "location": 231,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "type": [
                    "str",
                    "Tuple[Type]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "add_functions": {
            "name": "add_functions",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mod": [],
                "funcs": [
                    "int",
                    "bool",
                    "Iterator"
                ]
            }
        },
        "TypeHelper.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHelper.initialize": {
            "name": "initialize",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]"
                ],
                "mng": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypeHelper.build_default_env_val": {
            "name": "build_default_env_val",
            "location": 99,
            "return": [
                "str",
                "int",
                "Set[Object]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHelper._build_env_type": {
            "name": "_build_env_type",
            "location": 103,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHelper.do_env_update": {
            "name": "do_env_update",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "env_": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "Collection[int]",
                    "bytearray",
                    "typing.Collection",
                    "bytes",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "val": [
                    "Collection[int]",
                    "bytearray",
                    "typing.Collection",
                    "bytes",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "TypeHelper.do_env_find": {
            "name": "do_env_find",
            "location": 127,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bool"
                ],
                "dft": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "handle_wrapper.wrapper": {
            "name": "wrapper",
            "location": 216,
            "return": [
                "tuple[tuple[]]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia_backend_relay/myia_backend_relay/relay_philox.py": {
        "generate_function": {
            "name": "generate_function",
            "location": 44,
            "return": [],
            "arguments": {
                "impl": [],
                "inputs": []
            }
        },
        "Philox2x32.get_counter_size": {
            "name": "get_counter_size",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "output_size": []
            }
        },
        "Philox2x32.generate_relay_counter_array": {
            "name": "generate_relay_counter_array",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "counter": []
            }
        },
        "Philox2x32.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_size": [
                    "int"
                ]
            }
        },
        "Philox2x32.__impl_philox_2x_round": {
            "name": "__impl_philox_2x_round",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "ctr": [],
                "key": []
            }
        },
        "Philox2x32.__uint64_to_2xuint32_vector": {
            "name": "__uint64_to_2xuint32_vector",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "ctr": []
            }
        },
        "Philox2x32.philox_2x_bump_key": {
            "name": "philox_2x_bump_key",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Philox2x32.impl_philox_2x_r": {
            "name": "impl_philox_2x_r",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "ctr": [],
                "key": []
            }
        },
        "Philox2x32.philox_2x": {
            "name": "philox_2x",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "ctr": [],
                "key": []
            }
        }
    },
    "myia-master/myia_backend_relay/myia_backend_relay/__init__.py": {},
    "myia-master/myia_backend_relay/myia_tests_backend_relay/__init__.py": {},
    "myia-master/myia_backend_relay/tests/test_compile.py": {
        "test_tagged": {
            "name": "test_tagged",
            "location": 19,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, bytes]",
                    "List[Dict]"
                ],
                "x": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "Union['KspNativeControl', int]",
                    "int"
                ],
                "z": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "myia-master/myia_backend_relay/tests/test_relay_rng.py": {
        "_test_output": {
            "name": "_test_output",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "final_rstate": [
                    "str"
                ]
            }
        },
        "test_init_random_combined": {
            "name": "test_init_random_combined",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_separated": {
            "name": "test_init_random_separated",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_combined.fn": {
            "name": "fn",
            "location": 38,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "test_init_random_separated.init": {
            "name": "init",
            "location": 53,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_init_random_separated.gen_2_2": {
            "name": "gen_2_2",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_1": {
            "name": "gen_1",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_scalar": {
            "name": "gen_scalar",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        }
    },
    "myia-master/myia_backend_relay/tests/compile/test_relay.py": {
        "test_relay_backend_bad_device": {
            "name": "test_relay_backend_bad_device",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relay_backend_bad_exec": {
            "name": "test_relay_backend_bad_exec",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia_frontend_pytorch/myia_frontend_pytorch/pytorch.py": {
        "zeros": {
            "name": "zeros",
            "location": 75,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Sequence[str]",
                "int"
            ],
            "arguments": {}
        },
        "mod_sub": {
            "name": "mod_sub",
            "location": 185,
            "return": [
                "trezor.utils.Writer",
                "utils.Node",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict",
                    "Union[str, int, float]",
                    "mypy.types.Type"
                ]
            }
        },
        "_to_abstract": {
            "name": "_to_abstract",
            "location": 265,
            "return": [
                "tuple",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T",
                    "pathpy.core.network.Network",
                    "Tuple[int, int]",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "Callable[[T, T], T]"
                ],
                "alias_map": [
                    "Callable",
                    "Dict[str, object]",
                    "dict",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "_default_convert": {
            "name": "_default_convert",
            "location": 276,
            "return": [
                "Optional[mypy.types.Type]",
                "str",
                "Type"
            ],
            "arguments": {
                "env": [
                    "dict",
                    "Type[Any]"
                ],
                "x": [
                    "dict",
                    "Type[Any]"
                ],
                "manage": [
                    "dict",
                    "Type[Any]"
                ]
            }
        },
        "_get_fields": {
            "name": "_get_fields",
            "location": 284,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "apistar.types.UMIMessage",
                    "Callable[[KT, VT], bool]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "tensor_pytorch_aliasable": {
            "name": "tensor_pytorch_aliasable",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "waterbutler.core.provider.BaseProvider",
                    "int",
                    "str",
                    "bool"
                ],
                "vseq": [
                    "str",
                    "int",
                    "List[int]",
                    "allennlp.data.vocabulary.Vocabulary",
                    "dict"
                ],
                "path": [
                    "str",
                    "float",
                    "Iterable[Tuple[str, Any]]",
                    "list",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "_to_abstract.new_module": {
            "name": "new_module",
            "location": 241,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "tartare.core.models.Job"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia_frontend_pytorch/myia_frontend_pytorch/pytorch_abstract_types.py": {
        "pytorch_dtype_to_type": {
            "name": "pytorch_dtype_to_type",
            "location": 56,
            "return": [],
            "arguments": {
                "dtype": []
            }
        },
        "PyTorchTensor.to_numpy": {
            "name": "to_numpy",
            "location": 20,
            "return": [
                "str",
                "float",
                "int",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "T"
                ]
            }
        },
        "PyTorchTensor.from_numpy": {
            "name": "from_numpy",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "utils.types.Box3D"
                ]
            }
        },
        "AbstractModule.user_defined_version": {
            "name": "user_defined_version",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "AbstractModule"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/myia_frontend_pytorch/myia_frontend_pytorch/__init__.py": {},
    "myia-master/myia_frontend_pytorch/tests/test_validate.py": {
        "test_validate_abstract_2": {
            "name": "test_validate_abstract_2",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia_utils/myia_utils/update_env.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/myia_utils/myia_utils/__init__.py": {},
    "myia-master/scripts/new_operation.py": {
        "parse_subs": {
            "name": "parse_subs",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "subs": [
                    "str"
                ]
            }
        },
        "template": {
            "name": "template",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "str",
                    "None",
                    "Optional['Directory']",
                    "Optional[str]"
                ],
                "subs": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Mapping[str, Any]",
                    "dict[str, int]",
                    "dict[str, dict[str, str]]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "make_op": {
            "name": "make_op",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "subs": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "make_macro": {
            "name": "make_macro",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "subs": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "make_prim": {
            "name": "make_prim",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "subs": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "type",
                    "typing.Type",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Type['Model']",
                    "typing.Match",
                    "Optional[Match]",
                    "None"
                ],
                "prim_type": [
                    "typing.Text",
                    "str",
                    "Callable"
                ]
            }
        },
        "make_composite": {
            "name": "make_composite",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "subs": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "myia-master/scripts/regen.py": {
        "regen": {
            "name": "regen",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "regen_operations": {
            "name": "regen_operations",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "regen_operations.addop": {
            "name": "addop",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "dict",
                    "Awaitable"
                ]
            }
        },
        "regen_operations.addprim": {
            "name": "addprim",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "data": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "myia-master/tests/test_abstract.py": {
        "test_to_abstract_skey": {
            "name": "test_to_abstract_skey",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_abstract_list": {
            "name": "test_to_abstract_list",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_abstract_xtype": {
            "name": "test_to_abstract_xtype",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_numpy_scalar_to_abstract": {
            "name": "test_numpy_scalar_to_abstract",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_value": {
            "name": "test_build_value",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tagged_possibilities": {
            "name": "test_tagged_possibilities",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_amerge": {
            "name": "test_amerge",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_amerge_pending": {
            "name": "test_amerge_pending",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_possibilities": {
            "name": "test_merge_possibilities",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_tagged_possibilities": {
            "name": "test_merge_tagged_possibilities",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_from_types": {
            "name": "test_merge_from_types",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_edge_cases": {
            "name": "test_merge_edge_cases",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_recursive": {
            "name": "test_repr_recursive",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upcast": {
            "name": "upcast",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_abstract_clone": {
            "name": "test_abstract_clone",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract_clone_pending": {
            "name": "test_abstract_clone_pending",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract_clone_edge_cases": {
            "name": "test_abstract_clone_edge_cases",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_broaden_recursive": {
            "name": "test_broaden_recursive",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_coherent_result_sync": {
            "name": "test_find_coherent_result_sync",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_to_abstract": {
            "name": "test_type_to_abstract",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_resolved": {
            "name": "test_get_resolved",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_annotation_merge": {
            "name": "test_annotation_merge",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_coherent_result_sync.fn": {
            "name": "fn",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "myia-master/tests/test_algos.py": {
        "test_pow10": {
            "name": "test_pow10",
            "location": 26,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_fact": {
            "name": "test_fact",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_fib": {
            "name": "test_fib",
            "location": 58,
            "return": [
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "make_tree": {
            "name": "make_tree",
            "location": 71,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Iterable[Any]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "depth": [
                    "bool",
                    "str",
                    "memoryview",
                    "list",
                    "Callable"
                ],
                "x": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "countdown": {
            "name": "countdown",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[int]",
                    "List[Tuple[bytes, bytes]]"
                ]
            }
        },
        "sumtree": {
            "name": "sumtree",
            "location": 87,
            "return": [
                "float",
                "int",
                "bool",
                "List[str]",
                "dict",
                "Tuple[float, float]"
            ],
            "arguments": {
                "t": [
                    "float"
                ]
            }
        },
        "reducetree": {
            "name": "reducetree",
            "location": 96,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[str]",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ],
                "t": [
                    "int"
                ],
                "init": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_make_tree": {
            "name": "test_make_tree",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "depth": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_countdown": {
            "name": "test_countdown",
            "location": 119,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "depth": [
                    "str",
                    "float"
                ]
            }
        },
        "test_sumtree": {
            "name": "test_sumtree",
            "location": 131,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_reducetree": {
            "name": "test_reducetree",
            "location": 143,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "t": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "init": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "test_second_order_sumtree": {
            "name": "test_second_order_sumtree",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_fact.fact": {
            "name": "fact",
            "location": 48,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_second_order_sumtree.f": {
            "name": "f",
            "location": 153,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        }
    },
    "myia-master/tests/test_annotations.py": {
        "test_scalar": {
            "name": "test_scalar",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_dict": {
            "name": "test_dict",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_ndarray": {
            "name": "test_ndarray",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_random_state_wrapper": {
            "name": "test_random_state_wrapper",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_scalar.f": {
            "name": "f",
            "location": 16,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_scalar.g": {
            "name": "g",
            "location": 20,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_scalar.h": {
            "name": "h",
            "location": 24,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_tuple.f": {
            "name": "f",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_tuple.g": {
            "name": "g",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_tuple.h": {
            "name": "h",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_tuple.j": {
            "name": "j",
            "location": 69,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_list.f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_list.g": {
            "name": "g",
            "location": 106,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_list.h": {
            "name": "h",
            "location": 110,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dict.f": {
            "name": "f",
            "location": 135,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dict.g": {
            "name": "g",
            "location": 139,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dict.h": {
            "name": "h",
            "location": 143,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_dict.j": {
            "name": "j",
            "location": 147,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_dict.k": {
            "name": "k",
            "location": 151,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "test_ndarray.f": {
            "name": "f",
            "location": 185,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_ndarray.g": {
            "name": "g",
            "location": 189,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_random_state_wrapper.f": {
            "name": "f",
            "location": 210,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "bool",
                "float",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {}
        },
        "test_random_state_wrapper.g": {
            "name": "g",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "myia-master/tests/test_api.py": {
        "test_myia": {
            "name": "test_myia",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_myia_specialize_values": {
            "name": "test_myia_specialize_values",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_myia_struct_arg": {
            "name": "test_myia_struct_arg",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_myia_return_struct": {
            "name": "test_myia_return_struct",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_myia_dict_field": {
            "name": "test_myia_dict_field",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_random_state_to_canonical": {
            "name": "test_random_state_to_canonical",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_to_canonical": {
            "name": "test_to_canonical",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_from_canonical": {
            "name": "test_from_canonical",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_function_arg": {
            "name": "test_function_arg",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_function_in_tuple": {
            "name": "test_function_in_tuple",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_return_closure": {
            "name": "test_return_closure",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_return_closure_partial": {
            "name": "test_return_closure_partial",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_return_closure_tuple": {
            "name": "test_return_closure_tuple",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_refeed": {
            "name": "test_refeed",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_return_primitive": {
            "name": "test_return_primitive",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_return_graph": {
            "name": "test_return_graph",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_call1": {
            "name": "test_bad_call1",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_call2": {
            "name": "test_bad_call2",
            "location": 353,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_tail_call": {
            "name": "test_tail_call",
            "location": 365,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_raise": {
            "name": "test_raise",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_return_backend": {
            "name": "test_return_backend",
            "location": 396,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "_setflag1": {
            "name": "_setflag1",
            "location": 408,
            "return": [
                "str",
                "Awaitable[Any]",
                "Type",
                "Callable"
            ],
            "arguments": {}
        },
        "_setflag2": {
            "name": "_setflag2",
            "location": 415,
            "return": [
                "str",
                "Awaitable[Any]",
                "Type",
                "Callable"
            ],
            "arguments": {}
        },
        "test_env_tracer": {
            "name": "test_env_tracer",
            "location": 423,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_convert_type": {
            "name": "test_convert_type",
            "location": 443,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "int"
                ]
            }
        },
        "test_myia.f": {
            "name": "f",
            "location": 35,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_myia_specialize_values.f": {
            "name": "f",
            "location": 56,
            "return": [],
            "arguments": {
                "c": [],
                "x": [],
                "y": []
            }
        },
        "test_myia_struct_arg.f": {
            "name": "f",
            "location": 73,
            "return": [],
            "arguments": {
                "pt": []
            }
        },
        "test_myia_return_struct.f": {
            "name": "f",
            "location": 83,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_myia_dict_field.f": {
            "name": "f",
            "location": 93,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_to_canonical._convert": {
            "name": "_convert",
            "location": 109,
            "return": [],
            "arguments": {
                "data": [],
                "typ": []
            }
        },
        "test_from_canonical._convert": {
            "name": "_convert",
            "location": 200,
            "return": [
                "int",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "T",
                    "bytes",
                    "List[str]",
                    "dict"
                ],
                "typ": [
                    "str",
                    "T",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_function_arg.square": {
            "name": "square",
            "location": 225,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_function_arg.f": {
            "name": "f",
            "location": 229,
            "return": [],
            "arguments": {
                "fn": [],
                "x": [],
                "y": []
            }
        },
        "test_function_in_tuple.square": {
            "name": "square",
            "location": 240,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_function_in_tuple.double": {
            "name": "double",
            "location": 243,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_function_in_tuple.f": {
            "name": "f",
            "location": 247,
            "return": [],
            "arguments": {
                "fns": [],
                "x": [],
                "y": []
            }
        },
        "test_return_closure.f": {
            "name": "f",
            "location": 259,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_return_closure_partial.f": {
            "name": "f",
            "location": 272,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_return_closure_tuple.f": {
            "name": "f",
            "location": 289,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_refeed.f": {
            "name": "f",
            "location": 307,
            "return": [],
            "arguments": {
                "fn": [],
                "x": [],
                "y": []
            }
        },
        "test_return_primitive.f": {
            "name": "f",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "test_return_graph.f": {
            "name": "f",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "test_bad_call1.f": {
            "name": "f",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_bad_call2.f": {
            "name": "f",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "test_tail_call.f": {
            "name": "f",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_raise.f": {
            "name": "f",
            "location": 376,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_return_backend.f": {
            "name": "f",
            "location": 398,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "_setflag1._set": {
            "name": "_set",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_setflag2._set": {
            "name": "_set",
            "location": 416,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env_tracer.f": {
            "name": "f",
            "location": 433,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_convert_type.f": {
            "name": "f",
            "location": 445,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_convert_type.g": {
            "name": "g",
            "location": 449,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_convert_type.h": {
            "name": "h",
            "location": 453,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_return_closure.f.g": {
            "name": "g",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "test_return_closure_partial.f.g": {
            "name": "g",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_return_closure_tuple.f.g": {
            "name": "g",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_return_closure_tuple.f.h": {
            "name": "h",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_refeed.f.g": {
            "name": "g",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "test_return_graph.f.g": {
            "name": "g",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "test_bad_call2.f.g": {
            "name": "g",
            "location": 356,
            "return": [],
            "arguments": {}
        }
    },
    "myia-master/tests/test_compile.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 31,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_constant": {
            "name": "test_constant",
            "location": 36,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_bool_and": {
            "name": "test_bool_and",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_dict": {
            "name": "test_dict",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],str,list[bool],float,int,tuple[]]]",
                "Iterable[Any]",
                "str",
                "common.TestingContext",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "v": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "float",
                    "int",
                    "list[bool]",
                    "List[bool]",
                    "tuple[]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "test_dict_getitem": {
            "name": "test_dict_getitem",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 56,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_if_nottail": {
            "name": "test_if_nottail",
            "location": 64,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_call": {
            "name": "test_call",
            "location": 74,
            "return": [
                "str",
                "int",
                "Tuple[str, Any]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_tailcall": {
            "name": "test_tailcall",
            "location": 82,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_callp": {
            "name": "test_callp",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_call_hof": {
            "name": "test_call_hof",
            "location": 104,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ],
                "x": [
                    "float",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ],
                "y": [
                    "float",
                    "int",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "test_partial_prim": {
            "name": "test_partial_prim",
            "location": 121,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_switch_nontail": {
            "name": "test_switch_nontail",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_is_": {
            "name": "test_is_",
            "location": 146,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_is_not": {
            "name": "test_is_not",
            "location": 151,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "list[str]",
                    "T",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_tagged": {
            "name": "test_tagged",
            "location": 160,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, bytes]",
                    "List[Dict]"
                ],
                "x": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "Union['KspNativeControl', int]",
                    "int"
                ],
                "z": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_string_eq": {
            "name": "test_string_eq",
            "location": 170,
            "return": [
                "str",
                "list[tuple[typing.Union[int,int]]]",
                "Optional[Dict[str, Any]]",
                "list[]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "list[]",
                    "List[Tuple[int, int]]",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "test_string_ne": {
            "name": "test_string_ne",
            "location": 177,
            "return": [
                "str",
                "list[tuple[typing.Union[int,int]]]",
                "Optional[Dict[str, Any]]",
                "list[]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "list[]",
                    "List[Tuple[int, int]]",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "test_string_return": {
            "name": "test_string_return",
            "location": 184,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_array_getitem": {
            "name": "test_array_getitem",
            "location": 189,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_array_setitem": {
            "name": "test_array_setitem",
            "location": 194,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ],
                "v": [
                    "float"
                ]
            }
        },
        "test_if_nottail.cap": {
            "name": "cap",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_call.f": {
            "name": "f",
            "location": 75,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_tailcall.fsum": {
            "name": "fsum",
            "location": 83,
            "return": [
                "int",
                "str",
                "List[int]",
                "Iterable[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "str",
                    "nevergrad.common.ArrayLike"
                ],
                "a": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "str",
                    "nevergrad.common.ArrayLike"
                ]
            }
        },
        "test_callp.fn": {
            "name": "fn",
            "location": 94,
            "return": [],
            "arguments": {
                "f": [],
                "x": []
            }
        },
        "test_callp.f": {
            "name": "f",
            "location": 97,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_call_hof.f1": {
            "name": "f1",
            "location": 105,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_call_hof.f2": {
            "name": "f2",
            "location": 108,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_call_hof.choose": {
            "name": "choose",
            "location": 111,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_switch_nontail.fn": {
            "name": "fn",
            "location": 126,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "x": [
                    "Iterable[float]",
                    "gluonts.model.common.Tensor",
                    "int"
                ],
                "y": [
                    "Iterable[float]",
                    "gluonts.model.common.Tensor",
                    "int"
                ]
            }
        },
        "test_switch_nontail.fn.f1": {
            "name": "f1",
            "location": 127,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {}
        },
        "test_switch_nontail.fn.f2": {
            "name": "f2",
            "location": 130,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/test_dtype.py": {
        "test_instantiate": {
            "name": "test_instantiate",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cache": {
            "name": "test_cache",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_Number": {
            "name": "test_Number",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_make_subtype": {
            "name": "test_make_subtype",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_type_conversions": {
            "name": "test_type_conversions",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pytype_to_myiatype": {
            "name": "test_pytype_to_myiatype",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/test_edge_cases.py": {
        "test_static_inline_array_map": {
            "name": "test_static_inline_array_map",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_call_opdef": {
            "name": "test_call_opdef",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_static_inline_array_map.inl": {
            "name": "inl",
            "location": 20,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_static_inline_array_map.f": {
            "name": "f",
            "location": 24,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_call_opdef.f": {
            "name": "f",
            "location": 35,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_call_opdef.g": {
            "name": "g",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "Linear.apply": {
            "name": "apply",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/tests/test_grad.py": {
        "grad_wrap": {
            "name": "grad_wrap",
            "location": 71,
            "return": [
                "dict[typing.Text, typing.Union[int,str,bytes]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool"
                ],
                "argspec": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_GradTester": {
            "name": "test_GradTester",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_GradTester_outtup": {
            "name": "test_GradTester_outtup",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_grad_test": {
            "name": "_grad_test",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fn": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "obj": [],
                "args": [],
                "sens_type": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Callable[..., None]",
                    "starlette.types.Send",
                    "starlette.types.Receive"
                ],
                "pipeline": [
                    "int",
                    "Optional[List[str]]"
                ],
                "rel_error": [
                    "float",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "argspec": [
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Iterable[Any]",
                    "Optional[Callable]",
                    "Optional[List[Any]]",
                    "Dict[int, Dict[str, str]]"
                ]
            }
        },
        "gradient": {
            "name": "gradient",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "vimiv.api.modes.Mode"
                ],
                "args": [],
                "abstract": [
                    "None",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "vimiv.api.modes.Mode"
                ],
                "rel_error": [
                    "float",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "vimiv.api.modes.Mode"
                ],
                "pipeline": [
                    "str",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ],
                "backend": [
                    "list",
                    "list[]"
                ]
            }
        },
        "test_prim_grads": {
            "name": "test_prim_grads",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prim": [
                    "str",
                    "float"
                ],
                "cases": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_null": {
            "name": "test_null",
            "location": 218,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_grad_add": {
            "name": "test_grad_add",
            "location": 224,
            "return": [
                "int",
                "float",
                "lib.applications.Application"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_grad_expr": {
            "name": "test_grad_expr",
            "location": 229,
            "return": [
                "float",
                "lib.applications.Application"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable[[T], bool]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable[[T], bool]"
                ]
            }
        },
        "test_constant": {
            "name": "test_constant",
            "location": 234,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_dup_args_in_call": {
            "name": "test_dup_args_in_call",
            "location": 240,
            "return": [
                "Iterable[Any]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_quadruple_args_in_call": {
            "name": "test_quadruple_args_in_call",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "dict[int, typing.Any]",
                    "int",
                    "numpy.ndarray",
                    "Dict[int, Any]",
                    "foolbox.types.BoundsInput",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "test_tuples": {
            "name": "test_tuples",
            "location": 258,
            "return": [
                "str",
                "float",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_dataclass": {
            "name": "test_dataclass",
            "location": 265,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "pt": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_dataclass_2": {
            "name": "test_dataclass_2",
            "location": 270,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "pt": [
                    "str",
                    "float"
                ]
            }
        },
        "test_hof": {
            "name": "test_hof",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "b": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_hof_tup": {
            "name": "test_hof_tup",
            "location": 291,
            "return": [
                "str",
                "flask.testing.FlaskClient"
            ],
            "arguments": {
                "a": [
                    "int",
                    "list",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "b": [
                    "int",
                    "list",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_simple_closure": {
            "name": "test_simple_closure",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "float",
                    "str",
                    "int"
                ],
                "b": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_closure": {
            "name": "test_closure",
            "location": 316,
            "return": [
                "int",
                "float",
                "str",
                "list[]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 331,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_if2": {
            "name": "test_if2",
            "location": 341,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "float",
                    "apps.monero.xmr.types.Sc25519",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "test_fact_opt": {
            "name": "test_fact_opt",
            "location": 349,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_while": {
            "name": "test_while",
            "location": 360,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_while_2": {
            "name": "test_while_2",
            "location": 368,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "z": [
                    "float"
                ]
            }
        },
        "test_list_while": {
            "name": "test_list_while",
            "location": 382,
            "return": [
                "float",
                "int",
                "Tuple[float, float, float, float, float]",
                "str"
            ],
            "arguments": {
                "xs": [
                    "Tuple[int]",
                    "Type[numpy.number]"
                ]
            }
        },
        "test_list_for": {
            "name": "test_list_for",
            "location": 397,
            "return": [
                "Iterable[numpy.dtype]",
                "typing.Text",
                "Dict[str, float]",
                "list[typing.Any]",
                "str",
                "int"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "Callable",
                    "list[list[typing.Any]]",
                    "List[List[Any]]"
                ]
            }
        },
        "test_nested_closure": {
            "name": "test_nested_closure",
            "location": 405,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_recursive_closure": {
            "name": "test_recursive_closure",
            "location": 423,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_functions_in_tuples": {
            "name": "test_functions_in_tuples",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_closures_in_tuples": {
            "name": "test_closures_in_tuples",
            "location": 442,
            "return": [
                "Dict[str, float]",
                "Iterable[numpy.dtype]",
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_array_operations": {
            "name": "test_array_operations",
            "location": 455,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "xs": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ],
                "ys": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ]
            }
        },
        "test_array_operations_distribute": {
            "name": "test_array_operations_distribute",
            "location": 462,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "float",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "test_array_operations_reshape": {
            "name": "test_array_operations_reshape",
            "location": 471,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "ys": [
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_array_operations_std": {
            "name": "test_array_operations_std",
            "location": 480,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "xs": [
                    "float"
                ],
                "ys": [
                    "float"
                ]
            }
        },
        "test_dot": {
            "name": "test_dot",
            "location": 487,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_transpose": {
            "name": "test_transpose",
            "location": 494,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "y": [
                    "str",
                    "int"
                ]
            }
        },
        "test_transpose2": {
            "name": "test_transpose2",
            "location": 503,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "str",
                    "bool",
                    "Union[List, Dict]",
                    "list[]",
                    "dict[, ]"
                ],
                "axis1": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "axis2": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_with_random": {
            "name": "test_with_random",
            "location": 513,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "dict[int, list[typing.Any]]",
                    "utils.Node",
                    "bool",
                    "Dict[int, List[Any]]"
                ],
                "b": [
                    "int",
                    "dict[int, list[typing.Any]]",
                    "utils.Node",
                    "bool",
                    "Dict[int, List[Any]]"
                ]
            }
        },
        "test_union": {
            "name": "test_union",
            "location": 529,
            "return": [
                "int",
                "float",
                "list[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "_runwith": {
            "name": "_runwith",
            "location": 537,
            "return": [
                "int",
                "bytes",
                "str",
                "float"
            ],
            "arguments": {
                "f": [
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_freevar_outside_grad": {
            "name": "test_freevar_outside_grad",
            "location": 543,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_freegraph_outside_grad": {
            "name": "test_freegraph_outside_grad",
            "location": 556,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_grad_prim": {
            "name": "test_grad_prim",
            "location": 571,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_grad_metagraph": {
            "name": "test_grad_metagraph",
            "location": 580,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_grad_interface": {
            "name": "test_grad_interface",
            "location": 589,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_aliasing": {
            "name": "test_aliasing",
            "location": 704,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_aliasing_list": {
            "name": "test_aliasing_list",
            "location": 740,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_aliasing_other": {
            "name": "test_aliasing_other",
            "location": 779,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_bad_bprop_def": {
            "name": "test_bad_bprop_def",
            "location": 810,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_first_order": {
            "name": "test_first_order",
            "location": 823,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_second_order": {
            "name": "test_second_order",
            "location": 835,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_fourth_order": {
            "name": "test_fourth_order",
            "location": 847,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_second_order_on_if": {
            "name": "test_second_order_on_if",
            "location": 870,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Point.abs": {
            "name": "abs",
            "location": 67,
            "return": [
                "float",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_GradTester.f": {
            "name": "f",
            "location": 92,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_GradTester.df": {
            "name": "df",
            "location": 95,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "dz": []
            }
        },
        "test_GradTester_outtup.f": {
            "name": "f",
            "location": 115,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_GradTester_outtup.df": {
            "name": "df",
            "location": 118,
            "return": [
                "tuple[]",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "utils.Node",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "dz": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_quadruple_args_in_call.g": {
            "name": "g",
            "location": 251,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_hof.f": {
            "name": "f",
            "location": 278,
            "return": [],
            "arguments": {
                "g": [],
                "x": []
            }
        },
        "test_hof.g": {
            "name": "g",
            "location": 281,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hof_tup.f": {
            "name": "f",
            "location": 294,
            "return": [],
            "arguments": {
                "gh": [],
                "x": [],
                "y": []
            }
        },
        "test_simple_closure.f": {
            "name": "f",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_simple_closure.g": {
            "name": "g",
            "location": 309,
            "return": [],
            "arguments": {}
        },
        "test_closure.x1": {
            "name": "x1",
            "location": 319,
            "return": [
                "float",
                "str",
                "utils.Node",
                "bool",
                "int"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "Optional[bool]",
                    "bytes"
                ]
            }
        },
        "test_fact_opt.fact": {
            "name": "fact",
            "location": 350,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_nested_closure.f": {
            "name": "f",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "test_recursive_closure.f": {
            "name": "f",
            "location": 424,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_closures_in_tuples.f": {
            "name": "f",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_closures_in_tuples.g": {
            "name": "g",
            "location": 446,
            "return": [],
            "arguments": {}
        },
        "test_freevar_outside_grad.f": {
            "name": "f",
            "location": 544,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_freegraph_outside_grad.f": {
            "name": "f",
            "location": 557,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_prim.peach": {
            "name": "peach",
            "location": 573,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "gluonts.model.common.NPArrayLike",
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "gluonts.model.common.NPArrayLike",
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "test_grad_metagraph.apple": {
            "name": "apple",
            "location": 582,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "gluonts.model.common.NPArrayLike",
                    "float"
                ],
                "y": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "gluonts.model.common.NPArrayLike",
                    "float"
                ]
            }
        },
        "test_grad_interface.f": {
            "name": "f",
            "location": 590,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_interface.grads": {
            "name": "grads",
            "location": 596,
            "return": [
                "tuple[]",
                "int",
                "str",
                "IO[str]",
                "List[types.ServiceT]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ]
            }
        },
        "test_grad_interface.gradbad": {
            "name": "gradbad",
            "location": 608,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "test_grad_interface.gradbad2": {
            "name": "gradbad2",
            "location": 612,
            "return": [
                "Callable[[T], U]",
                "utils.Node",
                "Iterable[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "test_grad_interface.gradbad3": {
            "name": "gradbad3",
            "location": 616,
            "return": [
                "Callable[[T], U]",
                "utils.Node",
                "Iterable[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "z": [
                    "int",
                    "float"
                ]
            }
        },
        "test_grad_interface.gradbad4": {
            "name": "gradbad4",
            "location": 620,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "z": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_grad_interface.gradbad5": {
            "name": "gradbad5",
            "location": 624,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[float]"
                ],
                "y": [
                    "float",
                    "int",
                    "List[float]"
                ],
                "z": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_grad_interface.gradbad6": {
            "name": "gradbad6",
            "location": 628,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "float",
                    "snorkel.types.DataPoint"
                ],
                "z": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_grad_interface.gradbad7": {
            "name": "gradbad7",
            "location": 632,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ],
                "z": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_grad_interface.gradbad8": {
            "name": "gradbad8",
            "location": 636,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_grad_interface.gradbad9": {
            "name": "gradbad9",
            "location": 643,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "float"
                ],
                "y": [
                    "int",
                    "snorkel.types.DataPoint",
                    "float"
                ]
            }
        },
        "test_grad_interface.gradbad10": {
            "name": "gradbad10",
            "location": 647,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "test_grad_interface.gradbad11": {
            "name": "gradbad11",
            "location": 651,
            "return": [
                "trezor.utils.Writer",
                "numpy.ndarray",
                "utils.Node",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "gluonts.model.common.NPArrayLike",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "float",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "gluonts.model.common.NPArrayLike",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "float",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "test_aliasing._chk": {
            "name": "_chk",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_aliasing.g": {
            "name": "g",
            "location": 713,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_aliasing.f": {
            "name": "f",
            "location": 718,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_aliasing_list.g": {
            "name": "g",
            "location": 749,
            "return": [],
            "arguments": {
                "xs": [],
                "y": []
            }
        },
        "test_aliasing_list.f": {
            "name": "f",
            "location": 756,
            "return": [],
            "arguments": {
                "xs": [],
                "y": []
            }
        },
        "test_aliasing_other._chk": {
            "name": "_chk",
            "location": 780,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "List[List[float]]",
                    "List[float]",
                    "float"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "List[List[float]]",
                    "List[float]",
                    "float"
                ]
            }
        },
        "test_aliasing_other.g": {
            "name": "g",
            "location": 786,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_aliasing_other.f": {
            "name": "f",
            "location": 792,
            "return": [],
            "arguments": {
                "xs": [],
                "y": []
            }
        },
        "test_first_order.square": {
            "name": "square",
            "location": 824,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_first_order.f": {
            "name": "f",
            "location": 828,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_second_order.square": {
            "name": "square",
            "location": 836,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_second_order.f": {
            "name": "f",
            "location": 840,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fourth_order.polynomial": {
            "name": "polynomial",
            "location": 856,
            "return": [
                "int",
                "float",
                "bool",
                "List[float]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "test_fourth_order.f": {
            "name": "f",
            "location": 860,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_second_order_on_if.g": {
            "name": "g",
            "location": 871,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float",
                    "snorkel.types.DataPoint",
                    "int"
                ]
            }
        },
        "test_second_order_on_if.f": {
            "name": "f",
            "location": 878,
            "return": [
                "float",
                "utils.Node",
                "T",
                "trezor.utils.Writer",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint",
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "test_closure.x1.x4": {
            "name": "x4",
            "location": 320,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_nested_closure.f.g": {
            "name": "g",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "test_nested_closure.f.h": {
            "name": "h",
            "location": 414,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_freevar_outside_grad.f.mula": {
            "name": "mula",
            "location": 547,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "z": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_freegraph_outside_grad.f.sqx": {
            "name": "sqx",
            "location": 558,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_freegraph_outside_grad.f.mulsqx": {
            "name": "mulsqx",
            "location": 561,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_grad_interface.gradbad8.klojure": {
            "name": "klojure",
            "location": 637,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Iterator",
                    "Callable",
                    "gluonts.model.common.Tensor",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_bad_bprop_def._bprop_nonsense": {
            "name": "_bprop_nonsense",
            "location": 818,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "float"
                ],
                "y": [
                    "int",
                    "snorkel.types.DataPoint",
                    "float"
                ],
                "dout": [
                    "int",
                    "snorkel.types.DataPoint",
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/test_grad_with_rng.py": {
        "test_rstate_and_compute": {
            "name": "test_rstate_and_compute",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_only_compute": {
            "name": "test_only_compute",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_rstate_and_compute.rstate_and_compute": {
            "name": "rstate_and_compute",
            "location": 12,
            "return": [
                "tuple[]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "rstate": [
                    "int",
                    "List[int]",
                    "float",
                    "numpy.ndarray",
                    "numpy.core.multiarray.ndarray"
                ],
                "x": []
            }
        },
        "test_rstate_and_compute.step_init": {
            "name": "step_init",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_rstate_and_compute.step_rstate_and_compute": {
            "name": "step_rstate_and_compute",
            "location": 24,
            "return": [
                "tuple[]",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "float",
                    "int",
                    "Iterable[T]"
                ],
                "x": [
                    "float",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "test_only_compute.step_init": {
            "name": "step_init",
            "location": 44,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_only_compute.only_compute": {
            "name": "only_compute",
            "location": 48,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Exception"
            ],
            "arguments": {
                "rstate": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "numpy.ndarray"
                ],
                "x": [
                    "int",
                    "Callable",
                    "float",
                    "List[numpy.ndarray]",
                    "List[int]"
                ]
            }
        },
        "test_only_compute.step_only_compute": {
            "name": "step_only_compute",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rstate": [
                    "float",
                    "str",
                    "Type",
                    "Union[int, float]",
                    "int",
                    "List[str]"
                ],
                "x": [
                    "float",
                    "str",
                    "Type",
                    "Union[int, float]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "myia-master/tests/test_graph_utils.py": {
        "_succ": {
            "name": "_succ",
            "location": 8,
            "return": [
                "Union[(reversed, Tuple[()])]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Iterable[float]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "_incl": {
            "name": "_incl",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "test_dfs": {
            "name": "test_dfs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dfs_bad_include": {
            "name": "test_dfs_bad_include",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dfs_dups": {
            "name": "test_dfs_dups",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_check_toposort": {
            "name": "_check_toposort",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "int",
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "typing.Iterable[typing.Any]"
                ],
                "root": [
                    "Set[str]",
                    "set[str]",
                    "str",
                    "tuple",
                    "tuple[]",
                    "int",
                    "list",
                    "list[]"
                ],
                "succ": [
                    "Set[str]",
                    "tuple",
                    "str",
                    "list",
                    "int"
                ],
                "incl": [
                    "Set[str]",
                    "tuple",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "test_toposort": {
            "name": "test_toposort",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort_bad_include": {
            "name": "test_toposort_bad_include",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort_overlap": {
            "name": "test_toposort_overlap",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort_incl": {
            "name": "test_toposort_incl",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort_cycle": {
            "name": "test_toposort_cycle",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dfs_bad_include.inc": {
            "name": "inc",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "n": []
            }
        },
        "test_toposort_bad_include.inc": {
            "name": "inc",
            "location": 76,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_toposort_incl._incl_nf": {
            "name": "_incl_nf",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[int, str]",
                    "List[tuple]",
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "test_toposort_incl._incl_x": {
            "name": "_incl_x",
            "location": 99,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "list",
                    "List[tuple]",
                    "List[int]",
                    "List[Tuple[str, ...]]",
                    "List[str]"
                ]
            }
        },
        "test_toposort_cycle.qsucc": {
            "name": "qsucc",
            "location": 122,
            "return": [
                "list[]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "q": [
                    "List[int]",
                    "List[List[int]]",
                    "float"
                ]
            }
        },
        "test_toposort_cycle.Q.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "myia-master/tests/test_infer.py": {
        "_test_op": {
            "name": "_test_op",
            "location": 120,
            "return": [
                "InferencePrimitive",
                "Type",
                "Iterable[Any]"
            ],
            "arguments": {
                "fn": []
            }
        },
        "_tern": {
            "name": "_tern",
            "location": 128,
            "return": [
                "str",
                "float",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ],
                "z": [
                    "float",
                    "str"
                ]
            }
        },
        "_to_i64": {
            "name": "_to_i64",
            "location": 133,
            "return": [
                "int",
                "List[int]",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "test_contextless": {
            "name": "test_contextless",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 166,
            "return": [
                "float",
                "int",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_constants_int": {
            "name": "test_constants_int",
            "location": 171,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_constants_float": {
            "name": "test_constants_float",
            "location": 176,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_constants_intxfloat": {
            "name": "test_constants_intxfloat",
            "location": 181,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_constants_floatxint": {
            "name": "test_constants_floatxint",
            "location": 186,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_constants_floatxint2": {
            "name": "test_constants_floatxint2",
            "location": 191,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "test_prim_mul": {
            "name": "test_prim_mul",
            "location": 196,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_tern": {
            "name": "test_prim_tern",
            "location": 211,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "z": [
                    "float"
                ]
            }
        },
        "test_prim_usub": {
            "name": "test_prim_usub",
            "location": 220,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_prim_log": {
            "name": "test_prim_log",
            "location": 231,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "typing.Iterable[int]",
                    "bool",
                    "Iterable[int]",
                    "List[List[int]]"
                ]
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 248,
            "return": [
                "Iterable[Any]",
                "str",
                "float",
                "int",
                "list[int]"
            ],
            "arguments": {
                "c": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "bool",
                    "List[bool]",
                    "list[bool]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "x": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "y": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]",
                    "list[int]",
                    "gluonts.model.common.Tensor",
                    "List[int]"
                ]
            }
        },
        "test_if2": {
            "name": "test_if2",
            "location": 256,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_while": {
            "name": "test_while",
            "location": 269,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "y": [
                    "int",
                    "str"
                ]
            }
        },
        "test_for": {
            "name": "test_for",
            "location": 284,
            "return": [
                "list[typing.Union[str,typing.Any]]",
                "bool",
                "list[typing.Union[int,typing.Any]]",
                "Dict[str, float]",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "xs": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ],
                "y": [
                    "list[str]",
                    "int",
                    "list[int]",
                    "float",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "test_nullary_closure": {
            "name": "test_nullary_closure",
            "location": 292,
            "return": [
                "int",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "int"
                ]
            }
        },
        "test_merge_point": {
            "name": "test_merge_point",
            "location": 305,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bool"
                ],
                "y": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "test_not_enough_args_prim": {
            "name": "test_not_enough_args_prim",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_too_many_args_prim": {
            "name": "test_too_many_args_prim",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_not_enough_args": {
            "name": "test_not_enough_args",
            "location": 324,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_too_many_args": {
            "name": "test_too_many_args",
            "location": 332,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_tup": {
            "name": "test_tup",
            "location": 343,
            "return": [
                "tuple[typing.Union[int,float]]",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 356,
            "return": [
                "list[typing.Union[int,float,typing.Callable[, ]]]",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_list_and_scalar": {
            "name": "test_list_and_scalar",
            "location": 366,
            "return": [
                "list[typing.Union[int,float,typing.Callable[, ]]]",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_list_empty": {
            "name": "test_list_empty",
            "location": 371,
            "return": [
                "list[]",
                "int",
                "Tuple[float, float, float, float, float]",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 376,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[, ],list[list[typing.Any]],list[str]]]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_dict2": {
            "name": "test_dict2",
            "location": 381,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Callable[T, bool],float,bytes,list[int]]]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable[[T], bool]",
                    "bytes",
                    "typing.Callable[T, bool]",
                    "List[int]",
                    "list[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable[[T], bool]",
                    "bytes",
                    "typing.Callable[T, bool]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_dict_merge": {
            "name": "test_dict_merge",
            "location": 386,
            "return": [
                "dict[typing.Text, int]",
                "common.ScanLoadFn",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "x": [
                    "int",
                    "numpy.dtype"
                ],
                "y": [
                    "int",
                    "numpy.dtype"
                ]
            }
        },
        "test_dict_values": {
            "name": "test_dict_values",
            "location": 396,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_dict_incompatible": {
            "name": "test_dict_incompatible",
            "location": 401,
            "return": [
                "dict[typing.Text, typing.Union[int,float]]",
                "common.ScanLoadFn",
                "raiden.utils.List[raiden.utils.TokenAddress]",
                "Callable"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "x": [
                    "int",
                    "float",
                    "gluonts.model.common.Tensor"
                ],
                "y": [
                    "int",
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 417,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_tuple_getitem": {
            "name": "test_tuple_getitem",
            "location": 422,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_tuple_getitem_negative": {
            "name": "test_tuple_getitem_negative",
            "location": 427,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_tuple_outofbound": {
            "name": "test_tuple_outofbound",
            "location": 432,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_tuple_getslice": {
            "name": "test_tuple_getslice",
            "location": 443,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "tup": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_tuple_getslice_2": {
            "name": "test_tuple_getslice_2",
            "location": 451,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "tup": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_concat_tuple": {
            "name": "test_concat_tuple",
            "location": 459,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_tuple_outofbound_negative": {
            "name": "test_tuple_outofbound_negative",
            "location": 464,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_dict_getitem": {
            "name": "test_dict_getitem",
            "location": 472,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_dict_getitem_nonconst": {
            "name": "test_dict_getitem_nonconst",
            "location": 480,
            "return": [
                "int"
            ],
            "arguments": {
                "d": [
                    "list[int]",
                    "bool",
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "List[int]",
                    "float"
                ],
                "i": [
                    "bool",
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "List[int]",
                    "float"
                ]
            }
        },
        "test_dict_setitem": {
            "name": "test_dict_setitem",
            "location": 489,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "bool"
                ],
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_tuple_setitem": {
            "name": "test_tuple_setitem",
            "location": 500,
            "return": [
                "float"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "idx": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_multitype_function": {
            "name": "test_multitype_function",
            "location": 505,
            "return": [
                "Callable",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_closure": {
            "name": "test_closure",
            "location": 513,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "list[]",
                    "list",
                    "int",
                    "nevergrad.common.Optional[int]",
                    "None",
                    "numpy.ndarray"
                ],
                "y": [
                    "list[]",
                    "list",
                    "int",
                    "nevergrad.common.Optional[int]",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "test_return_closure": {
            "name": "test_return_closure",
            "location": 527,
            "return": [
                "tuple[]",
                "float",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "w": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_default_arg": {
            "name": "test_default_arg",
            "location": 544,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_default_closure": {
            "name": "test_default_closure",
            "location": 549,
            "return": [
                "Iterable[Any]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "Iterable[str]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_closure_manager_bug": {
            "name": "test_closure_manager_bug",
            "location": 557,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_varargs": {
            "name": "test_varargs",
            "location": 570,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_keywords": {
            "name": "test_keywords",
            "location": 578,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_expand": {
            "name": "test_keywords_expand",
            "location": 586,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_bad": {
            "name": "test_keywords_bad",
            "location": 594,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_different_order": {
            "name": "test_keywords_different_order",
            "location": 602,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "OrderedDict",
                    "nevergrad.common.Optional[int]",
                    "Dict[int, str]"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_defaults": {
            "name": "test_keywords_defaults",
            "location": 615,
            "return": [
                "bool",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "nevergrad.common.Optional[int]",
                    "None",
                    "list",
                    "list[]"
                ],
                "y": [
                    "numpy.ndarray",
                    "int",
                    "nevergrad.common.Optional[int]",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_keywords_shadow": {
            "name": "test_keywords_shadow",
            "location": 623,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_redundant_kw": {
            "name": "test_redundant_kw",
            "location": 634,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_defaults_recursive": {
            "name": "test_defaults_recursive",
            "location": 642,
            "return": [
                "Iterable[Any]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "test_kwarg": {
            "name": "test_kwarg",
            "location": 653,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_kwarg_bad": {
            "name": "test_kwarg_bad",
            "location": 664,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_bad_3": {
            "name": "test_keywords_bad_3",
            "location": 675,
            "return": [
                "raiden.utils.List[raiden.raiden_service.RaidenService]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_apply": {
            "name": "test_apply",
            "location": 686,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "args": []
            }
        },
        "even": {
            "name": "even",
            "location": 693,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "odd": {
            "name": "odd",
            "location": 700,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_even_odd": {
            "name": "test_even_odd",
            "location": 708,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_choose_prim": {
            "name": "test_choose_prim",
            "location": 716,
            "return": [
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_choose_prim_incompatible": {
            "name": "test_choose_prim_incompatible",
            "location": 731,
            "return": [
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_choose_incompatible": {
            "name": "test_choose_incompatible",
            "location": 746,
            "return": [
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_choose_indirect": {
            "name": "test_choose_indirect",
            "location": 763,
            "return": [
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int"
                ],
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "test_hof": {
            "name": "test_hof",
            "location": 780,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_hof_2": {
            "name": "test_hof_2",
            "location": 798,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "cmk.utils.type_defs.EventRule",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "raiden.utils.signer.Signer"
                ],
                "x": [
                    "str",
                    "cmk.utils.type_defs.EventRule",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "raiden.utils.signer.Signer"
                ]
            }
        },
        "test_hof_3": {
            "name": "test_hof_3",
            "location": 826,
            "return": [
                "tuple[]",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_hof_4": {
            "name": "test_hof_4",
            "location": 844,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_hof_5": {
            "name": "test_hof_5",
            "location": 871,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "c1": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "float",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "dict"
                ],
                "c2": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "float",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "dict"
                ],
                "x": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "float",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "dict"
                ],
                "y": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "float",
                    "dict[, ]",
                    "apps.common.coininfo.CoinInfo",
                    "dict"
                ]
            }
        },
        "test_func_arg": {
            "name": "test_func_arg",
            "location": 900,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_func_arg3": {
            "name": "test_func_arg3",
            "location": 911,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_func_arg4": {
            "name": "test_func_arg4",
            "location": 923,
            "return": [
                "Dict[str, numpy.ndarray]",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_closure_deep": {
            "name": "test_closure_deep",
            "location": 937,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_closure_passing": {
            "name": "test_closure_passing",
            "location": 948,
            "return": [
                "bool",
                "nevergrad.common.List[str]",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "int"
                ],
                "y": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "test_not": {
            "name": "test_not",
            "location": 962,
            "return": [
                "bool",
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_hastype_simple": {
            "name": "test_hastype_simple",
            "location": 967,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_hastype": {
            "name": "test_hastype",
            "location": 987,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_typeof": {
            "name": "test_typeof",
            "location": 995,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_hastype_2": {
            "name": "test_hastype_2",
            "location": 1022,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_isinstance": {
            "name": "test_isinstance",
            "location": 1056,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_isinstance_bad": {
            "name": "test_isinstance_bad",
            "location": 1079,
            "return": [
                "bool",
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_union": {
            "name": "test_union",
            "location": 1088,
            "return": [
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_union_2": {
            "name": "test_union_2",
            "location": 1100,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_union_nil": {
            "name": "test_union_nil",
            "location": 1108,
            "return": [
                "int",
                "float",
                "bytes",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "x": [
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "None",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_union_and": {
            "name": "test_union_and",
            "location": 1116,
            "return": [
                "float",
                "int",
                "typing.Iterable[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "typing.Iterable[]",
                    "cmk.utils.type_defs.ServiceName",
                    "Iterable",
                    "Optional[int]",
                    "bool"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "typing.Iterable[]",
                    "cmk.utils.type_defs.ServiceName",
                    "Iterable",
                    "Optional[int]",
                    "bool"
                ],
                "z": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "typing.Iterable[]",
                    "cmk.utils.type_defs.ServiceName",
                    "Iterable",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_union_binand": {
            "name": "test_union_binand",
            "location": 1124,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "raiden.utils.BlockIdentifier",
                    "Optional[float]",
                    "bool",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "y": [
                    "int",
                    "float",
                    "raiden.utils.BlockIdentifier",
                    "Optional[float]",
                    "bool",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        },
        "test_union_nested": {
            "name": "test_union_nested",
            "location": 1137,
            "return": [
                "bool",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_union_nested_2": {
            "name": "test_union_nested_2",
            "location": 1150,
            "return": [
                "int",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_hastag_casttag": {
            "name": "test_hastag_casttag",
            "location": 1164,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Set[Optional[str]]",
                    "set[typing.Optional[str]]"
                ]
            }
        },
        "_square": {
            "name": "_square",
            "location": 1173,
            "return": [
                "bool",
                "float",
                "Optional[str]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "test_nonexistent_variable": {
            "name": "test_nonexistent_variable",
            "location": 1178,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_hasattr": {
            "name": "test_hasattr",
            "location": 1193,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_hasattr_cond": {
            "name": "test_hasattr_cond",
            "location": 1202,
            "return": [
                "str",
                "tuple[frozenset]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "tuple[frozenset]",
                    "[[]]",
                    "Tuple[FrozenSet[int]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_getattr": {
            "name": "test_getattr",
            "location": 1213,
            "return": [
                "tuple[typing.Union[int,float,list[int],str,dict[int, typing.Union[typing.Any,typing.Any]]]]",
                "float",
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_getattr_multitype": {
            "name": "test_getattr_multitype",
            "location": 1224,
            "return": [
                "int",
                "tuple[typing.Union[int,dict[str, int],list[int],dict[, ]]]"
            ],
            "arguments": {
                "x": [
                    "list[int]",
                    "str",
                    "gluonts.model.common.Tensor",
                    "List[int]"
                ],
                "y": [
                    "set[str]",
                    "int",
                    "Set[str]",
                    "list[int]",
                    "bool",
                    "list[]",
                    "List[int]",
                    "set[]",
                    "list",
                    "dict[, ]",
                    "set",
                    "dict"
                ]
            }
        },
        "test_getattr_shape": {
            "name": "test_getattr_shape",
            "location": 1231,
            "return": [],
            "arguments": {}
        },
        "test_getattr_union": {
            "name": "test_getattr_union",
            "location": 1252,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "c": [
                    "numpy.ndarray",
                    "float"
                ],
                "x": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "test_getattr_flex": {
            "name": "test_getattr_flex",
            "location": 1265,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_unknown_data": {
            "name": "test_unknown_data",
            "location": 1270,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "field": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_method": {
            "name": "test_method",
            "location": 1275,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "y": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_unknown_method": {
            "name": "test_unknown_method",
            "location": 1280,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "y": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_infinite_recursion": {
            "name": "test_infinite_recursion",
            "location": 1285,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_indirect_infinite_recursion": {
            "name": "test_indirect_infinite_recursion",
            "location": 1293,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 1303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pong": {
            "name": "pong",
            "location": 1307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_infinite_mutual_recursion": {
            "name": "test_infinite_mutual_recursion",
            "location": 1312,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_recursive_build": {
            "name": "test_recursive_build",
            "location": 1317,
            "return": [
                "tuple[typing.Union[list[typing.Any],typing.Text,tuple[]]]",
                "bool",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "xs": [
                    "list[list[typing.Any]]",
                    "str",
                    "Callable",
                    "List[List[Any]]",
                    "raiden.utils.List[DecodedEvent]"
                ]
            }
        },
        "test_shape": {
            "name": "test_shape",
            "location": 1328,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "ary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_dot": {
            "name": "test_dot",
            "location": 1338,
            "return": [
                "bytes",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_distribute": {
            "name": "test_distribute",
            "location": 1351,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "v": [
                    "float"
                ],
                "shp": [
                    "float"
                ]
            }
        },
        "test_distribute2": {
            "name": "test_distribute2",
            "location": 1362,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_reshape": {
            "name": "test_reshape",
            "location": 1371,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "v": [
                    "float"
                ],
                "shp": [
                    "float"
                ]
            }
        },
        "test_transpose": {
            "name": "test_transpose",
            "location": 1388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "v": [
                    "float"
                ],
                "perm": [
                    "float"
                ]
            }
        },
        "test_transpose_method": {
            "name": "test_transpose_method",
            "location": 1396,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "float",
                    "int",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "test_ndim": {
            "name": "test_ndim",
            "location": 1404,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_array_map": {
            "name": "test_array_map",
            "location": 1413,
            "return": [
                "str"
            ],
            "arguments": {
                "ary": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_array_map2": {
            "name": "test_array_map2",
            "location": 1434,
            "return": [
                "str"
            ],
            "arguments": {
                "ary1": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ary2": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_array_map0": {
            "name": "test_array_map0",
            "location": 1442,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_array_map3": {
            "name": "test_array_map3",
            "location": 1475,
            "return": [
                "str"
            ],
            "arguments": {
                "ary1": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ary2": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "ary3": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_array_reduce": {
            "name": "test_array_reduce",
            "location": 1495,
            "return": [
                "str"
            ],
            "arguments": {
                "ary": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "shp": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_partial_1": {
            "name": "test_partial_1",
            "location": 1503,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_partial_2": {
            "name": "test_partial_2",
            "location": 1512,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_identity_function": {
            "name": "test_identity_function",
            "location": 1531,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "test_bool_and": {
            "name": "test_bool_and",
            "location": 1540,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_bool_or": {
            "name": "test_bool_or",
            "location": 1549,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_nil_eq": {
            "name": "test_nil_eq",
            "location": 1554,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "x": [
                    "Optional[Type[Exception]]",
                    "typing.Type",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "Optional[int]",
                    "list[str]"
                ]
            }
        },
        "test_nil_ne": {
            "name": "test_nil_ne",
            "location": 1559,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "x": [
                    "Optional[Type[Exception]]",
                    "typing.Type",
                    "int",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "Optional[int]",
                    "list[str]"
                ]
            }
        },
        "test_bool_ne": {
            "name": "test_bool_ne",
            "location": 1564,
            "return": [
                "float",
                "dict[str, str]",
                "typing.Callable[, ]",
                "bool",
                "list[list[typing.Any]]",
                "list[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_and": {
            "name": "test_and",
            "location": 1572,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_and_none": {
            "name": "test_and_none",
            "location": 1577,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "Union[bytes, str, SupportsFloat]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "y": [
                    "bool",
                    "Union[bytes, str, SupportsFloat]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "test_switch": {
            "name": "test_switch",
            "location": 1600,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int"
                ],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_switch_switch": {
            "name": "test_switch_switch",
            "location": 1605,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[List[Any]]",
                    "List[str]",
                    "Set[str]"
                ],
                "y": [
                    "float",
                    "nevergrad.common.Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "test_user_switch_hastype": {
            "name": "test_user_switch_hastype",
            "location": 1617,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_closure_in_data": {
            "name": "test_closure_in_data",
            "location": 1622,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "float",
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "x": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ]
            }
        },
        "test_scalar_cast": {
            "name": "test_scalar_cast",
            "location": 1647,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Type[numpy.number]",
                    "typing.Type"
                ],
                "t": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Type[numpy.number]",
                    "typing.Type"
                ]
            }
        },
        "test_scalar_cast_2": {
            "name": "test_scalar_cast_2",
            "location": 1652,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_scalar_cast_3": {
            "name": "test_scalar_cast_3",
            "location": 1660,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_array_cast": {
            "name": "test_array_cast",
            "location": 1682,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Type[numpy.number]",
                    "typing.Type"
                ],
                "t": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Type[numpy.number]",
                    "typing.Type"
                ]
            }
        },
        "test_scalar_to_array": {
            "name": "test_scalar_to_array",
            "location": 1692,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "tuple[int]",
                    "str",
                    "Tuple[int]",
                    "float",
                    "typing.Type",
                    "Type[numpy.number]",
                    "int"
                ]
            }
        },
        "test_array_to_scalar": {
            "name": "test_array_to_scalar",
            "location": 1702,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "test_broadcast_shape": {
            "name": "test_broadcast_shape",
            "location": 1718,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "ys": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_call_nonfunc": {
            "name": "test_call_nonfunc",
            "location": 1723,
            "return": [
                "float",
                "int",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]"
                ],
                "y": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]"
                ]
            }
        },
        "test_multitype": {
            "name": "test_multitype",
            "location": 1750,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "_mystery1": {
            "name": "_mystery1",
            "location": 1758,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]",
                    "Number"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]",
                    "Number"
                ]
            }
        },
        "_mystery2": {
            "name": "_mystery2",
            "location": 1763,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "test_multitype_2": {
            "name": "test_multitype_2",
            "location": 1774,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_bad_metagraph": {
            "name": "test_bad_metagraph",
            "location": 1787,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_max_std": {
            "name": "test_max_std",
            "location": 1867,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_class": {
            "name": "test_class",
            "location": 1878,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "pt": [
                    "list[int]",
                    "List[int]",
                    "list[]",
                    "list[list[int]]",
                    "geometry.Point",
                    "list",
                    "List[List[int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_dataclass_method": {
            "name": "test_dataclass_method",
            "location": 1886,
            "return": [],
            "arguments": {
                "pt": []
            }
        },
        "test_dataclass_property": {
            "name": "test_dataclass_property",
            "location": 1894,
            "return": [],
            "arguments": {
                "pt": []
            }
        },
        "test_arithmetic_data_add": {
            "name": "test_arithmetic_data_add",
            "location": 1899,
            "return": [
                "str"
            ],
            "arguments": {
                "pt1": [
                    "str"
                ],
                "pt2": [
                    "str"
                ]
            }
        },
        "test_arithmetic_data_add_ct": {
            "name": "test_arithmetic_data_add_ct",
            "location": 1904,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pt": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_arithmetic_data_sub": {
            "name": "test_arithmetic_data_sub",
            "location": 1909,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pt1": [
                    "int",
                    "str"
                ],
                "pt2": [
                    "int",
                    "str"
                ]
            }
        },
        "test_arithmetic_data_mul": {
            "name": "test_arithmetic_data_mul",
            "location": 1914,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pt1": [
                    "str",
                    "int"
                ],
                "pt2": [
                    "str",
                    "int"
                ]
            }
        },
        "test_arithmetic_data_truediv": {
            "name": "test_arithmetic_data_truediv",
            "location": 1923,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "pt1": [
                    "int",
                    "str"
                ],
                "pt2": [
                    "int",
                    "str"
                ]
            }
        },
        "test_arithmetic_data_floordiv": {
            "name": "test_arithmetic_data_floordiv",
            "location": 1928,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pt1": [
                    "int",
                    "str"
                ],
                "pt2": [
                    "int",
                    "str"
                ]
            }
        },
        "test_arithmetic_data_mod": {
            "name": "test_arithmetic_data_mod",
            "location": 1933,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pt1": [
                    "str",
                    "int"
                ],
                "pt2": [
                    "str",
                    "int"
                ]
            }
        },
        "test_arithmetic_data_pow": {
            "name": "test_arithmetic_data_pow",
            "location": 1938,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pt1": [
                    "str",
                    "int"
                ],
                "pt2": [
                    "str",
                    "int"
                ]
            }
        },
        "test_arithmetic_data_pos": {
            "name": "test_arithmetic_data_pos",
            "location": 1943,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pt": [
                    "str"
                ]
            }
        },
        "test_arithmetic_data_neg": {
            "name": "test_arithmetic_data_neg",
            "location": 1948,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pt": [
                    "str"
                ]
            }
        },
        "test_dataclass_inst": {
            "name": "test_dataclass_inst",
            "location": 1956,
            "return": [
                "Point",
                "float",
                "bool"
            ],
            "arguments": {
                "x1": [
                    "int",
                    "float"
                ],
                "y1": [
                    "int",
                    "float"
                ],
                "x2": [
                    "int",
                    "float"
                ],
                "y2": [
                    "int",
                    "float"
                ]
            }
        },
        "test_dataclass_bad_inst": {
            "name": "test_dataclass_bad_inst",
            "location": 1963,
            "return": [
                "Point",
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "z": [
                    "float"
                ]
            }
        },
        "test_dataclass_bad_inst2": {
            "name": "test_dataclass_bad_inst2",
            "location": 1968,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "List[str]",
                    "list[str]"
                ],
                "x": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_dataclass_wrong_field": {
            "name": "test_dataclass_wrong_field",
            "location": 1973,
            "return": [],
            "arguments": {
                "pt": []
            }
        },
        "test_dataclass_call": {
            "name": "test_dataclass_call",
            "location": 1978,
            "return": [
                "Type"
            ],
            "arguments": {
                "thing": [
                    "str"
                ]
            }
        },
        "test_record_setitem": {
            "name": "test_record_setitem",
            "location": 1983,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "thing": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "x": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_record_setitem_2": {
            "name": "test_record_setitem_2",
            "location": 1991,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "pt": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "x": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_record_setitem_wrong_field": {
            "name": "test_record_setitem_wrong_field",
            "location": 1996,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing": [
                    "str"
                ],
                "x": [
                    "str"
                ]
            }
        },
        "test_gadd": {
            "name": "test_gadd",
            "location": 2013,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_zeros_like": {
            "name": "test_zeros_like",
            "location": 2028,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_zeros_like_fn": {
            "name": "test_zeros_like_fn",
            "location": 2034,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_env": {
            "name": "test_env",
            "location": 2046,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "y": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "float"
                ],
                "z": [
                    "list",
                    "int",
                    "list[]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator",
                    "List[List[float]]",
                    "list[list[float]]"
                ]
            }
        },
        "test_env_onfn": {
            "name": "test_env_onfn",
            "location": 2053,
            "return": [],
            "arguments": {}
        },
        "test_unsafe_static_cast": {
            "name": "test_unsafe_static_cast",
            "location": 2070,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_unsafe_static_cast_error": {
            "name": "test_unsafe_static_cast_error",
            "location": 2078,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_pass": {
            "name": "test_pass",
            "location": 2083,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_tagged": {
            "name": "test_tagged",
            "location": 2092,
            "return": [
                "str",
                "Tuple[str]",
                "U"
            ],
            "arguments": {
                "x": [
                    "Dict[str, str]",
                    "Callable",
                    "Optional[BinaryIO]",
                    "List[Dict]",
                    "BinaryIO"
                ],
                "y": [
                    "str"
                ],
                "z": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_tagged_more": {
            "name": "test_tagged_more",
            "location": 2100,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, bytes]",
                    "List[Dict]"
                ],
                "x": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "Union['KspNativeControl', int]",
                    "int"
                ],
                "z": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_tagged_too_many_arguments": {
            "name": "test_tagged_too_many_arguments",
            "location": 2110,
            "return": [
                "List[str]",
                "str",
                "U"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_J": {
            "name": "test_J",
            "location": 2118,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_Jinv": {
            "name": "test_Jinv",
            "location": 2134,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_Jinv2": {
            "name": "test_Jinv2",
            "location": 2143,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_Jinv3": {
            "name": "test_Jinv3",
            "location": 2152,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_Jinv4": {
            "name": "test_Jinv4",
            "location": 2160,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_J_array": {
            "name": "test_J_array",
            "location": 2165,
            "return": [
                "tuple[]",
                "str",
                "float"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_J_bprop_invalid": {
            "name": "test_J_bprop_invalid",
            "location": 2175,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_J_return_function": {
            "name": "test_J_return_function",
            "location": 2184,
            "return": [
                "tuple[typing.Union[bytes,str,tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]],int]]",
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_grad": {
            "name": "test_grad",
            "location": 2198,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_grad_scalar_cast": {
            "name": "test_grad_scalar_cast",
            "location": 2210,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_grad_array_cast": {
            "name": "test_grad_array_cast",
            "location": 2222,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_grad_reduce": {
            "name": "test_grad_reduce",
            "location": 2230,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "int"
                ],
                "ys": [
                    "float",
                    "int"
                ]
            }
        },
        "test_is": {
            "name": "test_is",
            "location": 2246,
            "return": [
                "bool",
                "int",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "Dict[str, str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "list[str]",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "List[str]"
                ],
                "y": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "list[str]",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "List[str]"
                ]
            }
        },
        "test_is_not": {
            "name": "test_is_not",
            "location": 2259,
            "return": [
                "bool",
                "int",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "Dict[str, str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "list[str]",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "List[str]"
                ],
                "y": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "list[str]",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "List[str]"
                ]
            }
        },
        "test_conv2d": {
            "name": "test_conv2d",
            "location": 2310,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "bool",
                    "int"
                ],
                "w": [
                    "bool",
                    "int"
                ],
                "s": [
                    "bool",
                    "int"
                ],
                "p": [
                    "bool",
                    "int"
                ],
                "d": [
                    "bool",
                    "int"
                ],
                "g": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_conv2d_grad_input": {
            "name": "test_conv2d_grad_input",
            "location": 2356,
            "return": [
                "bool"
            ],
            "arguments": {
                "i_s": [
                    "float",
                    "str",
                    "bool"
                ],
                "w": [
                    "float",
                    "str",
                    "bool"
                ],
                "g_o": [
                    "float",
                    "str",
                    "bool"
                ],
                "s": [
                    "float",
                    "str",
                    "bool"
                ],
                "p": [
                    "float",
                    "str",
                    "bool"
                ],
                "d": [
                    "float",
                    "str",
                    "bool"
                ],
                "g": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "test_conv2d_weight_grad": {
            "name": "test_conv2d_weight_grad",
            "location": 2402,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "w_s": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "g_o": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "s": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "p": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "d": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "g": [
                    "float",
                    "None",
                    "int",
                    "Optional[web3.types.Wei]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "test_string_eq": {
            "name": "test_string_eq",
            "location": 2411,
            "return": [
                "int",
                "str",
                "raiden.utils.List[raiden.utils.TokenAddress]",
                "Optional[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "test_string_ne": {
            "name": "test_string_ne",
            "location": 2423,
            "return": [
                "int",
                "str",
                "raiden.utils.List[raiden.utils.TokenAddress]",
                "Optional[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "test_string_return": {
            "name": "test_string_return",
            "location": 2431,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bad_operation": {
            "name": "test_bad_operation",
            "location": 2439,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_nullary_closure.make": {
            "name": "make",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_merge_point.mul2": {
            "name": "mul2",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_not_enough_args.g": {
            "name": "g",
            "location": 325,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_too_many_args.g": {
            "name": "g",
            "location": 333,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multitype_function.mul": {
            "name": "mul",
            "location": 506,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_closure.mul": {
            "name": "mul",
            "location": 514,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_return_closure.mul": {
            "name": "mul",
            "location": 528,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "List[int]",
                    "List[mypy.types.Type]"
                ]
            }
        },
        "test_default_closure.clos": {
            "name": "clos",
            "location": 550,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ],
                "q": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_keywords.fn": {
            "name": "fn",
            "location": 579,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_keywords_expand.fn": {
            "name": "fn",
            "location": 587,
            "return": [],
            "arguments": {
                "z": [],
                "albert": [],
                "beatrice": []
            }
        },
        "test_keywords_bad.fn": {
            "name": "fn",
            "location": 595,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_keywords_different_order.fn1": {
            "name": "fn1",
            "location": 603,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "albert": [
                    "bool",
                    "int"
                ],
                "beatrice": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_keywords_different_order.fn2": {
            "name": "fn2",
            "location": 606,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "beatrice": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "albert": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_keywords_defaults.fn": {
            "name": "fn",
            "location": 616,
            "return": [],
            "arguments": {
                "charles": []
            }
        },
        "test_keywords_shadow.fn": {
            "name": "fn",
            "location": 626,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_redundant_kw.fn": {
            "name": "fn",
            "location": 635,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_defaults_recursive.fact": {
            "name": "fact",
            "location": 643,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_kwarg.fn": {
            "name": "fn",
            "location": 654,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_kwarg.proxy": {
            "name": "proxy",
            "location": 657,
            "return": [],
            "arguments": {}
        },
        "test_kwarg_bad.fn": {
            "name": "fn",
            "location": 665,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "albert": [
                    "int",
                    "Callable",
                    "str"
                ],
                "beatrice": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_kwarg_bad.proxy": {
            "name": "proxy",
            "location": 668,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {}
        },
        "test_apply._f": {
            "name": "_f",
            "location": 687,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "Iterable",
                    "int",
                    "numpy.ndarray",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "y": [
                    "Iterable",
                    "int",
                    "numpy.ndarray",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "z": [
                    "Iterable",
                    "int",
                    "numpy.ndarray",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "test_choose_prim.choose": {
            "name": "choose",
            "location": 717,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_choose_prim_incompatible.choose": {
            "name": "choose",
            "location": 732,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_choose_incompatible.add2": {
            "name": "add2",
            "location": 747,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_choose_incompatible.lt2": {
            "name": "lt2",
            "location": 750,
            "return": [
                "bool",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]",
                    "Number"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]",
                    "Number"
                ]
            }
        },
        "test_choose_incompatible.choose": {
            "name": "choose",
            "location": 753,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_choose_indirect.double": {
            "name": "double",
            "location": 764,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_choose_indirect.square": {
            "name": "square",
            "location": 767,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_choose_indirect.choose": {
            "name": "choose",
            "location": 770,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "test_hof.double": {
            "name": "double",
            "location": 781,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hof.square": {
            "name": "square",
            "location": 784,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hof.hof": {
            "name": "hof",
            "location": 787,
            "return": [],
            "arguments": {
                "f": [],
                "tup": []
            }
        },
        "test_hof_2.identity": {
            "name": "identity",
            "location": 799,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_hof_2.double": {
            "name": "double",
            "location": 802,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hof_2.square": {
            "name": "square",
            "location": 805,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_hof_2.pick": {
            "name": "pick",
            "location": 808,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_hof_2.pick2": {
            "name": "pick2",
            "location": 816,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "numpy.ndarray",
                    "int",
                    "Type['DataclassT']",
                    "Iterable[T]",
                    "dict",
                    "Callable"
                ],
                "f": [
                    "numpy.ndarray",
                    "int",
                    "Type['DataclassT']",
                    "Iterable[T]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_hof_3.double": {
            "name": "double",
            "location": 827,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hof_3.is_zero": {
            "name": "is_zero",
            "location": 830,
            "return": [
                "bool",
                "str",
                "Point",
                "Union[int, float]",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]",
                    "Callable[[T, U], R]",
                    "Callable[[T, U, V, W], R]"
                ]
            }
        },
        "test_hof_3.hof": {
            "name": "hof",
            "location": 833,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ],
                "tup": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "test_hof_4.double": {
            "name": "double",
            "location": 845,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_hof_4.hof_sum": {
            "name": "hof_sum",
            "location": 848,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ],
                "tup": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "test_hof_4.hof_tup": {
            "name": "hof_tup",
            "location": 851,
            "return": [
                "tuple[]",
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ],
                "tup": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[T], S]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "test_hof_4.pick": {
            "name": "pick",
            "location": 854,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_hof_5.pick_hof": {
            "name": "pick_hof",
            "location": 872,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_hof_5.pick_f": {
            "name": "pick_f",
            "location": 890,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "dict",
                    "Tuple[int, int]",
                    "Optional[int]"
                ]
            }
        },
        "test_func_arg.g": {
            "name": "g",
            "location": 901,
            "return": [],
            "arguments": {
                "func": [],
                "x": [],
                "y": []
            }
        },
        "test_func_arg.h": {
            "name": "h",
            "location": 904,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_func_arg3.g": {
            "name": "g",
            "location": 912,
            "return": [],
            "arguments": {
                "func": [],
                "x": []
            }
        },
        "test_func_arg3.h": {
            "name": "h",
            "location": 916,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_func_arg4.h": {
            "name": "h",
            "location": 924,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_func_arg4.g": {
            "name": "g",
            "location": 927,
            "return": [],
            "arguments": {
                "fn": [],
                "x": []
            }
        },
        "test_func_arg4.t": {
            "name": "t",
            "location": 930,
            "return": [
                "int",
                "List[int]",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int",
                    "Container"
                ],
                "x": [
                    "str",
                    "int",
                    "Container"
                ]
            }
        },
        "test_closure_deep.g": {
            "name": "g",
            "location": 938,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure_passing.adder": {
            "name": "adder",
            "location": 949,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_hastype_2.f": {
            "name": "f",
            "location": 1023,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_isinstance.f": {
            "name": "f",
            "location": 1057,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "C1.f": {
            "name": "f",
            "location": 1239,
            "return": [
                "Type[T]",
                "str",
                "Optional[int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "C2.f": {
            "name": "f",
            "location": 1247,
            "return": [
                "Type[T]",
                "str",
                "Optional[int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_infinite_recursion.ouroboros": {
            "name": "ouroboros",
            "location": 1286,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_indirect_infinite_recursion.ouroboros": {
            "name": "ouroboros",
            "location": 1294,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_array_map.f": {
            "name": "f",
            "location": 1414,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_array_map2.f": {
            "name": "f",
            "location": 1435,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "test_array_map0.f": {
            "name": "f",
            "location": 1443,
            "return": [],
            "arguments": {}
        },
        "test_array_map3.f": {
            "name": "f",
            "location": 1476,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "v3": []
            }
        },
        "test_array_reduce.f": {
            "name": "f",
            "location": 1496,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_partial_1.f": {
            "name": "f",
            "location": 1504,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_partial_2.f": {
            "name": "f",
            "location": 1513,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_partial_2.g": {
            "name": "g",
            "location": 1516,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_switch_switch.f1": {
            "name": "f1",
            "location": 1606,
            "return": [
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_switch_switch.f2": {
            "name": "f2",
            "location": 1609,
            "return": [
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_closure_in_data.f": {
            "name": "f",
            "location": 1623,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_closure_in_data.g": {
            "name": "g",
            "location": 1626,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_BadMG.generate_graph": {
            "name": "generate_graph",
            "location": 1779,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_zeros_like_fn.f": {
            "name": "f",
            "location": 2035,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_env_onfn.f": {
            "name": "f",
            "location": 2054,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_J.f": {
            "name": "f",
            "location": 2119,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Jinv2.f": {
            "name": "f",
            "location": 2144,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Jinv3.f": {
            "name": "f",
            "location": 2153,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_J_array.prod": {
            "name": "prod",
            "location": 2166,
            "return": [],
            "arguments": {
                "xs": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "test_J_bprop_invalid.f": {
            "name": "f",
            "location": 2176,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_J_return_function.f": {
            "name": "f",
            "location": 2185,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_J_return_function.g": {
            "name": "g",
            "location": 2188,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_grad.f": {
            "name": "f",
            "location": 2199,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "y": []
            }
        },
        "test_grad_scalar_cast.f": {
            "name": "f",
            "location": 2211,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_grad_array_cast.f": {
            "name": "f",
            "location": 2223,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_grad_reduce.f": {
            "name": "f",
            "location": 2231,
            "return": [
                "Dict[str, int]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "int"
                ],
                "ys": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "int"
                ]
            }
        },
        "test_nullary_closure.make.inner": {
            "name": "inner",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_return_closure.mul.clos": {
            "name": "clos",
            "location": 529,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_hof_5.pick_hof.hof_1": {
            "name": "hof_1",
            "location": 873,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "test_hof_5.pick_hof.hof_2": {
            "name": "hof_2",
            "location": 879,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "test_closure_deep.g.h": {
            "name": "h",
            "location": 939,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_closure_passing.adder.f": {
            "name": "f",
            "location": 950,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_hof_5.pick_hof.hof_1.wrap": {
            "name": "wrap",
            "location": 874,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_hof_5.pick_hof.hof_2.wrap": {
            "name": "wrap",
            "location": 880,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/tests/test_info.py": {
        "test_nested_info": {
            "name": "test_nested_info",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_info_trace": {
            "name": "test_info_trace",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_info_obj": {
            "name": "test_info_obj",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_info_find": {
            "name": "test_info_find",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_info_thread": {
            "name": "test_info_thread",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_info_thread.f": {
            "name": "f",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/test_lang.py": {
        "test_constant": {
            "name": "test_constant",
            "location": 24,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_prim_add": {
            "name": "test_prim_add",
            "location": 34,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_prim_addct": {
            "name": "test_prim_addct",
            "location": 39,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_parameter": {
            "name": "test_parameter",
            "location": 49,
            "return": [
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_variable": {
            "name": "test_variable",
            "location": 54,
            "return": [
                "bool",
                "tuple[typing.Union[int,int]]",
                "Iterable[Any]",
                "float"
            ],
            "arguments": {
                "x": [
                    "Tuple[int]",
                    "float",
                    "tuple[int]"
                ],
                "y": [
                    "Tuple[int]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "test_multiple_targets": {
            "name": "test_multiple_targets",
            "location": 60,
            "return": [
                "bool",
                "tuple[typing.Union[int,float,set[str],tuple[typing.Union[int,int,int,int,int]],tuple[typing.Union[float,int,bytes]]]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "y": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_multiple_variables": {
            "name": "test_multiple_variables",
            "location": 66,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_shadow_variable": {
            "name": "test_shadow_variable",
            "location": 74,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_globals": {
            "name": "test_globals",
            "location": 85,
            "return": [
                "str",
                "float",
                "Callable",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_f": {
            "name": "_f",
            "location": 89,
            "return": [
                "float",
                "int",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "list[T]",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "test_call_global": {
            "name": "test_call_global",
            "location": 94,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_swap": {
            "name": "test_swap",
            "location": 99,
            "return": [
                "tuple[typing.Union[float,int]]",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 111,
            "return": [
                "str",
                "list[typing.Union[float,int,tuple[int]]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "test_dict": {
            "name": "test_dict",
            "location": 116,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[, ],list[list[typing.Any]],list[str]]]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 121,
            "return": [
                "str",
                "tuple[typing.Union[float,int]]"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 126,
            "return": [
                "float",
                "list[typing.Any]",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "list[str]",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_getattr": {
            "name": "test_getattr",
            "location": 131,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "pt": [
                    "str",
                    "float"
                ]
            }
        },
        "test_getattr_function": {
            "name": "test_getattr_function",
            "location": 136,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "pt": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "test_method": {
            "name": "test_method",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "y": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 151,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_nested_if": {
            "name": "test_nested_if",
            "location": 159,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_if2": {
            "name": "test_if2",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_if3": {
            "name": "test_if3",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_multiple_return": {
            "name": "test_multiple_return",
            "location": 195,
            "return": [
                "int",
                "Tuple[float, float, float, float, float]",
                "float",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_max": {
            "name": "test_max",
            "location": 202,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_ifexpr": {
            "name": "test_ifexpr",
            "location": 210,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_max_expr": {
            "name": "test_max_expr",
            "location": 215,
            "return": [
                "bool",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_and": {
            "name": "test_and",
            "location": 220,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_or": {
            "name": "test_or",
            "location": 225,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_band": {
            "name": "test_band",
            "location": 230,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bor": {
            "name": "test_bor",
            "location": 235,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_while": {
            "name": "test_while",
            "location": 245,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_nested_while": {
            "name": "test_nested_while",
            "location": 252,
            "return": [
                "int",
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_return_in_while": {
            "name": "test_return_in_while",
            "location": 265,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_return_in_double_while": {
            "name": "test_return_in_double_while",
            "location": 273,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_if_return_in_while": {
            "name": "test_if_return_in_while",
            "location": 282,
            "return": [
                "int",
                "float",
                "Mapping[str, Any]",
                "Type"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_for": {
            "name": "test_for",
            "location": 297,
            "return": [
                "int",
                "str",
                "Callable[[list], None]"
            ],
            "arguments": {
                "xs": [
                    "Callable",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "test_nested": {
            "name": "test_nested",
            "location": 310,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_closure": {
            "name": "test_closure",
            "location": 320,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_closure_recur": {
            "name": "test_closure_recur",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_closure2": {
            "name": "test_closure2",
            "location": 355,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_closure3": {
            "name": "test_closure3",
            "location": 366,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_closure4": {
            "name": "test_closure4",
            "location": 377,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_fn1": {
            "name": "test_fn1",
            "location": 391,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_fn2": {
            "name": "test_fn2",
            "location": 399,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_fn3": {
            "name": "test_fn3",
            "location": 410,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_fn4": {
            "name": "test_fn4",
            "location": 421,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_fn5": {
            "name": "test_fn5",
            "location": 434,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_lambda": {
            "name": "test_lambda",
            "location": 450,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "test_lambda2": {
            "name": "test_lambda2",
            "location": 456,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "float"
                ]
            }
        },
        "test_rec1": {
            "name": "test_rec1",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_multitype": {
            "name": "test_multitype",
            "location": 483,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_pow8": {
            "name": "test_pow8",
            "location": 493,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_record": {
            "name": "test_record",
            "location": 502,
            "return": [
                "Point"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_nested.g": {
            "name": "g",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "test_closure.g": {
            "name": "g",
            "location": 321,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_closure.h": {
            "name": "h",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "test_closure_recur.f": {
            "name": "f",
            "location": 336,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_closure_recur.fn": {
            "name": "fn",
            "location": 339,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "T",
                    "Point"
                ]
            }
        },
        "test_closure2.g": {
            "name": "g",
            "location": 356,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure3.g": {
            "name": "g",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_closure4.f": {
            "name": "f",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "test_closure4.g": {
            "name": "g",
            "location": 381,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_fn1.g": {
            "name": "g",
            "location": 392,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn2.g": {
            "name": "g",
            "location": 400,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn3.g": {
            "name": "g",
            "location": 411,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn4.g": {
            "name": "g",
            "location": 422,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn5.g": {
            "name": "g",
            "location": 435,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_rec1.f": {
            "name": "f",
            "location": 468,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_closure_recur.fn.g": {
            "name": "g",
            "location": 340,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure2.g.f": {
            "name": "f",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "test_closure3.g.h": {
            "name": "h",
            "location": 368,
            "return": [],
            "arguments": {}
        },
        "test_closure4.g.h": {
            "name": "h",
            "location": 382,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "test_fn2.g.f": {
            "name": "f",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "test_fn3.g.f": {
            "name": "f",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "test_fn4.g.f": {
            "name": "f",
            "location": 425,
            "return": [],
            "arguments": {}
        },
        "test_fn5.g.f": {
            "name": "f",
            "location": 436,
            "return": [],
            "arguments": {
                "y": []
            }
        }
    },
    "myia-master/tests/test_macros.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_macro": {
            "name": "test_bad_macro",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_bad_macro_2": {
            "name": "test_bad_macro_2",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_macro_3": {
            "name": "test_bad_macro_3",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_bad_macro_4": {
            "name": "test_bad_macro_4",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "static_add": {
            "name": "static_add",
            "location": 75,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "static_blah": {
            "name": "static_blah",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_myia_static_in_myia_static": {
            "name": "test_myia_static_in_myia_static",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_myia_static": {
            "name": "test_myia_static",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_bad_macro.salmon": {
            "name": "salmon",
            "location": 36,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bad_macro_3.pasta": {
            "name": "pasta",
            "location": 59,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_myia_static.get_fourth": {
            "name": "get_fourth",
            "location": 91,
            "return": [
                "bool",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "int",
                    "Optional[List[int]]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_myia_static.get_fourth_bad": {
            "name": "get_fourth_bad",
            "location": 97,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "recidiviz.utils.regions.Region",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "Type",
                    "AbstractSet[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_myia_static.add1_bad": {
            "name": "add1_bad",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "float",
                    "T",
                    "int"
                ]
            }
        },
        "test_bad_macro_2.bigmac": {
            "name": "bigmac",
            "location": 47,
            "return": [],
            "arguments": {
                "info": []
            }
        }
    },
    "myia-master/tests/test_model.py": {
        "ones": {
            "name": "ones",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "zeros": {
            "name": "zeros",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tanh": {
            "name": "tanh",
            "location": 42,
            "return": [
                "int",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "make_model": {
            "name": "make_model",
            "location": 71,
            "return": [
                "Model"
            ],
            "arguments": {
                "dtype": [
                    "typing.Text",
                    "bytes",
                    "Optional[List[str]]",
                    "float",
                    "int"
                ]
            }
        },
        "cost": {
            "name": "cost",
            "location": 85,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "model": [
                    "Union[tensorflow.Tensor, numpy.ndarray]",
                    "str",
                    "int"
                ],
                "x": [
                    "str",
                    "int",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "test_forward": {
            "name": "test_forward",
            "location": 100,
            "return": [],
            "arguments": {
                "model": [
                    "str"
                ],
                "x": [
                    "str"
                ]
            }
        },
        "test_backward_infer": {
            "name": "test_backward_infer",
            "location": 117,
            "return": [
                "common.ScanLoadFn",
                "str"
            ],
            "arguments": {
                "model": [],
                "x": [],
                "y": []
            }
        },
        "test_backward_specialize": {
            "name": "test_backward_specialize",
            "location": 124,
            "return": [
                "dict"
            ],
            "arguments": {
                "model": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "x": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "y": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TanhLayer.apply": {
            "name": "apply",
            "location": 52,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.apply": {
            "name": "apply",
            "location": 60,
            "return": [
                "str",
                "int",
                "utils.Node",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/tests/test_monomorphize.py": {
        "test_prim_arithmetic_np_same_precision": {
            "name": "test_prim_arithmetic_np_same_precision",
            "location": 74,
            "return": [
                "tuple[typing.Union[int,list[int],dict[str, int],list[float],list[str],list[],set[],list[list[str]],typing.Deque]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "bool",
                    "tuple[float]",
                    "list",
                    "Tuple[float]"
                ],
                "y": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "bool",
                    "tuple[float]",
                    "list",
                    "Tuple[float]"
                ]
            }
        },
        "test_prim_mul": {
            "name": "test_prim_mul",
            "location": 96,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_polymorphic": {
            "name": "test_polymorphic",
            "location": 101,
            "return": [
                "int",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "test_polymorphic_closure": {
            "name": "test_polymorphic_closure",
            "location": 109,
            "return": [
                "int",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "test_switch_fn": {
            "name": "test_switch_fn",
            "location": 120,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "c": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "bool",
                    "List[bool]",
                    "list[bool]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "x": [
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "y": [
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_while": {
            "name": "test_while",
            "location": 136,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ],
                "x": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_isinstance": {
            "name": "test_isinstance",
            "location": 145,
            "return": [
                "tuple[]",
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_struct": {
            "name": "test_struct",
            "location": 158,
            "return": [
                "Point",
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_struct2": {
            "name": "test_struct2",
            "location": 163,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "dict[, ]",
                    "numpy.ndarray",
                    "float",
                    "int",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "y": [
                    "dict[, ]",
                    "numpy.ndarray",
                    "float",
                    "int",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_array_map": {
            "name": "test_array_map",
            "location": 169,
            "return": [],
            "arguments": {
                "xs": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_array_map_polymorphic": {
            "name": "test_array_map_polymorphic",
            "location": 177,
            "return": [
                "tuple[]",
                "str",
                "float"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ],
                "ys": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ]
            }
        },
        "test_array_map_polymorphic_indirect": {
            "name": "test_array_map_polymorphic_indirect",
            "location": 185,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "xs": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "ys": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_array_reduce_polymorphic_indirect": {
            "name": "test_array_reduce_polymorphic_indirect",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "xs": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "ys": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_array_map_partial": {
            "name": "test_array_map_partial",
            "location": 204,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "List[bool]",
                    "Callable",
                    "Optional[Any]"
                ],
                "xs": [
                    "int",
                    "str",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_list_len": {
            "name": "test_list_len",
            "location": 219,
            "return": [
                "int",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_hyper_map": {
            "name": "test_hyper_map",
            "location": 224,
            "return": [],
            "arguments": {
                "xs": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_hyper_map_polymorphic": {
            "name": "test_hyper_map_polymorphic",
            "location": 232,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ],
                "ys": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ]
            }
        },
        "test_hyper_map_polymorphic_2": {
            "name": "test_hyper_map_polymorphic_2",
            "location": 241,
            "return": [
                "tuple[]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "xs": [
                    "List[Tuple[int, str, str]]",
                    "list[tuple[typing.Union[int,str,str]]]",
                    "Sized",
                    "typing.Sized",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "ys": [
                    "List[Tuple[int, str, str]]",
                    "list[tuple[typing.Union[int,str,str]]]",
                    "Sized",
                    "typing.Sized",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_mutual_recursion_closure": {
            "name": "test_mutual_recursion_closure",
            "location": 259,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "test_unused_parameter": {
            "name": "test_unused_parameter",
            "location": 276,
            "return": [
                "Iterable[Any]",
                "float",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, str]"
                ],
                "y": [
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_unused_function_parameter": {
            "name": "test_unused_function_parameter",
            "location": 281,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_indirect_primitive": {
            "name": "test_indirect_primitive",
            "location": 295,
            "return": [
                "flask.testing.FlaskClient",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_indirect_graph": {
            "name": "test_indirect_graph",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_poly_with_constants": {
            "name": "test_poly_with_constants",
            "location": 314,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int"
                ],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_poly_with_constants2": {
            "name": "test_poly_with_constants2",
            "location": 331,
            "return": [
                "common.ScanLoadFn",
                "tuple[]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "set[typing.Optional[str]]",
                    "dict[str, numpy.ndarray]",
                    "Set[Optional[str]]",
                    "Dict[str, numpy.ndarray]",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ],
                "x": [
                    "int",
                    "set[typing.Optional[str]]",
                    "dict[str, numpy.ndarray]",
                    "Set[Optional[str]]",
                    "Dict[str, numpy.ndarray]",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ],
                "y": [
                    "int",
                    "set[typing.Optional[str]]",
                    "dict[str, numpy.ndarray]",
                    "Set[Optional[str]]",
                    "Dict[str, numpy.ndarray]",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_method": {
            "name": "test_method",
            "location": 348,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "y": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_method_polymorphic": {
            "name": "test_method_polymorphic",
            "location": 353,
            "return": [
                "flask.testing.FlaskClient",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Union[int, str]"
                ],
                "y": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "test_partial_polymorphic": {
            "name": "test_partial_polymorphic",
            "location": 358,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_switch": {
            "name": "test_switch",
            "location": 366,
            "return": [],
            "arguments": {
                "c": [
                    "float"
                ],
                "x": [
                    "float"
                ]
            }
        },
        "test_switch2": {
            "name": "test_switch2",
            "location": 371,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "c": [
                    "float"
                ],
                "x": [
                    "float"
                ],
                "y": [
                    "int",
                    "List[int]",
                    "float",
                    "list[int]",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_multitype": {
            "name": "test_multitype",
            "location": 377,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_closure_stays_in_scope": {
            "name": "test_closure_stays_in_scope",
            "location": 382,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_return_closure": {
            "name": "test_return_closure",
            "location": 400,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "typing.Callable[str, bool]",
                    "list[object]",
                    "Callable[[str], bool]",
                    "None",
                    "List[object]",
                    "Optional[str]"
                ]
            }
        },
        "test_partial_outside_scope": {
            "name": "test_partial_outside_scope",
            "location": 417,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_union": {
            "name": "test_union",
            "location": 436,
            "return": [
                "int",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_union_nested": {
            "name": "test_union_nested",
            "location": 449,
            "return": [
                "bool",
                "int",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "list[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_union_nested_2": {
            "name": "test_union_nested_2",
            "location": 464,
            "return": [
                "bool",
                "int",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_tagged": {
            "name": "test_tagged",
            "location": 479,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "str",
                    "dict",
                    "Union[str, bytes]",
                    "List[Dict]"
                ],
                "x": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "str",
                    "Union['KspNativeControl', int]",
                    "int"
                ],
                "z": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_tuple_surgery": {
            "name": "test_tuple_surgery",
            "location": 489,
            "return": [
                "float",
                "list[typing.Any]",
                "int",
                "str"
            ],
            "arguments": {
                "xs": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "list[str]",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "ys": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_default_arg": {
            "name": "test_default_arg",
            "location": 499,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "list[]",
                    "Dict[str, str]",
                    "list"
                ],
                "y": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "list"
                ],
                "z": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "list"
                ]
            }
        },
        "test_default_closure": {
            "name": "test_default_closure",
            "location": 504,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "Sequence[Tuple[float, float]]"
                ],
                "y": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "test_varargs": {
            "name": "test_varargs",
            "location": 515,
            "return": [
                "str",
                "Sequence[str]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_v": {
            "name": "_v",
            "location": 519,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[str, float]",
                    "Callable[..., None]",
                    "Dict[str, float]"
                ]
            }
        },
        "test_varargs_2": {
            "name": "test_varargs_2",
            "location": 524,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords": {
            "name": "test_keywords",
            "location": 530,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_2": {
            "name": "test_keywords_2",
            "location": 538,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "nevergrad.common.Optional[int]",
                    "numpy.ndarray",
                    "bool",
                    "Dict[int, str]",
                    "str"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_keywords_defaults": {
            "name": "test_keywords_defaults",
            "location": 551,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_kwarg": {
            "name": "test_kwarg",
            "location": 559,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_reference_bug": {
            "name": "test_reference_bug",
            "location": 570,
            "return": [
                "tuple[int]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_zip_enumerate": {
            "name": "test_zip_enumerate",
            "location": 584,
            "return": [
                "int",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "xs": [
                    "float",
                    "list[float]",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "ys": [
                    "float",
                    "list[float]",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        },
        "list_reduce": {
            "name": "list_reduce",
            "location": 591,
            "return": [
                "typing.Pattern",
                "bool",
                "int",
                "List[str]",
                "str",
                "list[int]",
                "Tuple[int]",
                "tuple[]",
                "float",
                "List[hydrand.ed25519.Point]",
                "Optional[Callable[[dict], None]]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "lst": [
                    "str",
                    "list[]",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "dftl": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_list_reduce": {
            "name": "test_list_reduce",
            "location": 599,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "Iterator[T]",
                    "typing.Iterator"
                ]
            }
        },
        "test_prim_arithmetic_np_same_precision.test_prim_mul_np": {
            "name": "test_prim_mul_np",
            "location": 75,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_arithmetic_np_same_precision.test_prim_add_np": {
            "name": "test_prim_add_np",
            "location": 78,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_prim_arithmetic_np_same_precision.test_prim_sub_np": {
            "name": "test_prim_sub_np",
            "location": 81,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_arithmetic_np_same_precision.test_prim_div_np": {
            "name": "test_prim_div_np",
            "location": 84,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_polymorphic.helper": {
            "name": "helper",
            "location": 102,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_polymorphic_closure.construct": {
            "name": "construct",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_switch_fn.dee": {
            "name": "dee",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "dict",
                    "numpy.ndarray",
                    "List[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_switch_fn.doo": {
            "name": "doo",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "dict",
                    "numpy.ndarray",
                    "List[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_isinstance.helper": {
            "name": "helper",
            "location": 146,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_array_map.square": {
            "name": "square",
            "location": 170,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_array_map_polymorphic.square": {
            "name": "square",
            "location": 178,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_array_map_polymorphic_indirect.square": {
            "name": "square",
            "location": 186,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_array_map_polymorphic_indirect.helper": {
            "name": "helper",
            "location": 189,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "test_array_reduce_polymorphic_indirect.helper": {
            "name": "helper",
            "location": 197,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "test_array_map_partial.square": {
            "name": "square",
            "location": 205,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_array_map_partial.identity": {
            "name": "identity",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_hyper_map.square": {
            "name": "square",
            "location": 225,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hyper_map_polymorphic.square": {
            "name": "square",
            "location": 233,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hyper_map_polymorphic_2.square": {
            "name": "square",
            "location": 242,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_hyper_map_polymorphic_2.double": {
            "name": "double",
            "location": 245,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_hyper_map_polymorphic_2.picker": {
            "name": "picker",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_mutual_recursion_closure._even": {
            "name": "_even",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "test_mutual_recursion_closure._odd": {
            "name": "_odd",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "test_unused_function_parameter.square": {
            "name": "square",
            "location": 285,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "dict",
                    "numpy.ndarray",
                    "List[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_unused_function_parameter.helper": {
            "name": "helper",
            "location": 288,
            "return": [
                "str",
                "int",
                "numpy.ndarray",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "T",
                    "Callable[[T, U], R]",
                    "Callable[[T, U, V, W], R]",
                    "Callable[[T, U, V], R]",
                    "bool",
                    "Literal[False]"
                ],
                "a": [
                    "int",
                    "float",
                    "List[gluonts.model.common.Tensor]"
                ]
            }
        },
        "test_indirect_primitive.add2": {
            "name": "add2",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_indirect_graph.f": {
            "name": "f",
            "location": 304,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_indirect_graph.f2": {
            "name": "f2",
            "location": 307,
            "return": [],
            "arguments": {}
        },
        "test_poly_with_constants.f1": {
            "name": "f1",
            "location": 315,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_poly_with_constants.f2": {
            "name": "f2",
            "location": 318,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_poly_with_constants.choose": {
            "name": "choose",
            "location": 321,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_poly_with_constants2.f1": {
            "name": "f1",
            "location": 332,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_poly_with_constants2.f2": {
            "name": "f2",
            "location": 335,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_poly_with_constants2.choose": {
            "name": "choose",
            "location": 338,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_partial_polymorphic.f": {
            "name": "f",
            "location": 359,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_closure_stays_in_scope.f": {
            "name": "f",
            "location": 386,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_closure_stays_in_scope.h": {
            "name": "h",
            "location": 392,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_return_closure.f": {
            "name": "f",
            "location": 404,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_partial_outside_scope.f": {
            "name": "f",
            "location": 420,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_partial_outside_scope.g": {
            "name": "g",
            "location": 423,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_default_closure.clos": {
            "name": "clos",
            "location": 505,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "z": [
                    "Dict[str, Tuple[int, int]]",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "test_keywords.fn": {
            "name": "fn",
            "location": 531,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_keywords_2.fn1": {
            "name": "fn1",
            "location": 539,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "albert": [
                    "bool",
                    "int"
                ],
                "beatrice": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_keywords_2.fn2": {
            "name": "fn2",
            "location": 542,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "albert": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "beatrice": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_keywords_defaults.fn": {
            "name": "fn",
            "location": 552,
            "return": [],
            "arguments": {
                "albert": [],
                "beatrice": []
            }
        },
        "test_kwarg.fn": {
            "name": "fn",
            "location": 560,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "albert": [
                    "int",
                    "Callable",
                    "str"
                ],
                "beatrice": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_kwarg.proxy": {
            "name": "proxy",
            "location": 563,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_list_reduce.add": {
            "name": "add",
            "location": 600,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_polymorphic_closure.construct.inner": {
            "name": "inner",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_closure_stays_in_scope.f.g": {
            "name": "g",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_return_closure.f.g": {
            "name": "g",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_return_closure.f.h": {
            "name": "h",
            "location": 408,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/test_parser.py": {
        "test_undefined": {
            "name": "test_undefined",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_defined_later": {
            "name": "test_defined_later",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_return": {
            "name": "test_no_return",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_return_while": {
            "name": "test_no_return_while",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_maybe": {
            "name": "test_maybe",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unsupported": {
            "name": "test_unsupported",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_expression_statements": {
            "name": "test_expression_statements",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_global_f": {
            "name": "_global_f",
            "location": 89,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {}
        },
        "test_global_nested": {
            "name": "test_global_nested",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_forward_reference_in_closure": {
            "name": "test_forward_reference_in_closure",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_modifying_forward_reference": {
            "name": "test_modifying_forward_reference",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_mutual_recursion": {
            "name": "test_mutual_recursion",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_forward_reference": {
            "name": "test_forward_reference",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parametric": {
            "name": "test_parametric",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_annotation_parsing_typing": {
            "name": "test_annotation_parsing_typing",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_annotation_parsing_numpy": {
            "name": "test_annotation_parsing_numpy",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_annotation_parsing_local_import": {
            "name": "test_annotation_parsing_local_import",
            "location": 247,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fn_param_same_name": {
            "name": "test_fn_param_same_name",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unsupported_AST__error": {
            "name": "test_unsupported_AST__error",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning": {
            "name": "test_disconnected_from_output__warning",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_return__format": {
            "name": "test_no_return__format",
            "location": 353,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_no_return_while__format": {
            "name": "test_no_return_while__format",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_unsupported_AST__error__format": {
            "name": "test_unsupported_AST__error__format",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_disconnected_from_output__warning__format": {
            "name": "test_disconnected_from_output__warning__format",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_undefined.f": {
            "name": "f",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_defined_later.f": {
            "name": "f",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_no_return.f": {
            "name": "f",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_no_return_while.f": {
            "name": "f",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_maybe.f": {
            "name": "f",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_unsupported.f": {
            "name": "f",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_expression_statements.f": {
            "name": "f",
            "location": 80,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_global_nested.g": {
            "name": "g",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_forward_reference_in_closure.g": {
            "name": "g",
            "location": 104,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_modifying_forward_reference.g": {
            "name": "g",
            "location": 115,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mutual_recursion.g": {
            "name": "g",
            "location": 129,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_forward_reference.g": {
            "name": "g",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_forward_reference.h": {
            "name": "h",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_dict.bad": {
            "name": "bad",
            "location": 159,
            "return": [
                "str",
                "dict[, int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_parametric.f": {
            "name": "f",
            "location": 167,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_parametric.g": {
            "name": "g",
            "location": 170,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_parametric.h": {
            "name": "h",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_parametric.i": {
            "name": "i",
            "location": 176,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "test_parametric.j": {
            "name": "j",
            "location": 179,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {}
        },
        "test_annotation_parsing_typing.f": {
            "name": "f",
            "location": 192,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_annotation_parsing_numpy.f": {
            "name": "f",
            "location": 223,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_annotation_parsing_local_import.f": {
            "name": "f",
            "location": 252,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_fn_param_same_name.a": {
            "name": "a",
            "location": 277,
            "return": [
                "Tuple[int, int]",
                "float",
                "numpy.ndarray",
                "numpy.matrix"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_unsupported_AST__error.a1": {
            "name": "a1",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a0": {
            "name": "a0",
            "location": 295,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a1": {
            "name": "a1",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a2": {
            "name": "a2",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a3": {
            "name": "a3",
            "location": 323,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a4": {
            "name": "a4",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a5": {
            "name": "a5",
            "location": 339,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_no_return__format.f": {
            "name": "f",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "test_no_return_while__format.f": {
            "name": "f",
            "location": 384,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_unsupported_AST__error__format.a1": {
            "name": "a1",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a0": {
            "name": "a0",
            "location": 463,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a1": {
            "name": "a1",
            "location": 496,
            "return": [
                "None",
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a2": {
            "name": "a2",
            "location": 532,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a3": {
            "name": "a3",
            "location": 568,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a4": {
            "name": "a4",
            "location": 599,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_no_return_while.f.g": {
            "name": "g",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_global_nested.g.h": {
            "name": "h",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_forward_reference_in_closure.g.h": {
            "name": "h",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_modifying_forward_reference.g.h": {
            "name": "h",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_mutual_recursion.g.rec1": {
            "name": "rec1",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_mutual_recursion.g.rec2": {
            "name": "rec2",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_disconnected_from_output__warning.a2.b2": {
            "name": "b2",
            "location": 313,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a5.b5": {
            "name": "b5",
            "location": 340,
            "return": [
                "str",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "list",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "test_no_return_while__format.f.g": {
            "name": "g",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a2.b2": {
            "name": "b2",
            "location": 533,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a4.b4": {
            "name": "b4",
            "location": 600,
            "return": [
                "str",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "list",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning.a5.b5.c5": {
            "name": "c5",
            "location": 341,
            "return": [
                "int",
                "T",
                "float",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {}
        },
        "test_disconnected_from_output__warning__format.a4.b4.c4": {
            "name": "c4",
            "location": 601,
            "return": [
                "T",
                "float",
                "numpy.ndarray",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/test_pipeline.py": {
        "step_double": {
            "name": "step_double",
            "location": 7,
            "return": [
                "int",
                "str",
                "tuple[typing.Union[str,int]]",
                "Dict[str, Any]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "step_init": {
            "name": "step_init",
            "location": 11,
            "return": [
                "dict[typing.Text, typing.Union[float,str,int]]",
                "float",
                "str",
                "Optional[float]",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_pipeline": {
            "name": "test_pipeline",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pipeline_default_arguments": {
            "name": "test_pipeline_default_arguments",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_Resources": {
            "name": "test_Resources",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Shoe.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        }
    },
    "myia-master/tests/test_universal.py": {
        "_umyia": {
            "name": "_umyia",
            "location": 19,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "dict"
            ],
            "arguments": {
                "backend": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]"
                ]
            }
        },
        "add_one": {
            "name": "add_one",
            "location": 28,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[float]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "increment": {
            "name": "increment",
            "location": 34,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "h": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "typing.Any",
                    "bool",
                    "Union[Mapping[starfish.core.types.Coordinates, Any], Mapping[str, Any]]",
                    "None",
                    "dict",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "test_increment": {
            "name": "test_increment",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_increment_interleave": {
            "name": "test_increment_interleave",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_increment_loop": {
            "name": "test_increment_loop",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_increment_recursion": {
            "name": "test_increment_recursion",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_give_handle": {
            "name": "test_give_handle",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_handle_free_variable": {
            "name": "test_handle_free_variable",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_return_handle": {
            "name": "test_return_handle",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_count_keepstate": {
            "name": "test_count_keepstate",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_increment.plus4": {
            "name": "plus4",
            "location": 41,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_increment_interleave.plus2": {
            "name": "plus2",
            "location": 56,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_increment_loop.plus": {
            "name": "plus",
            "location": 72,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_increment_recursion.length": {
            "name": "length",
            "location": 87,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "h": [
                    "List[List[T]]",
                    "List[T]"
                ],
                "xs": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_give_handle.plus": {
            "name": "plus",
            "location": 101,
            "return": [],
            "arguments": {
                "h": [],
                "y": []
            }
        },
        "test_handle_free_variable.plus": {
            "name": "plus",
            "location": 127,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "dict",
                    "List[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_return_handle.plus2": {
            "name": "plus2",
            "location": 142,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.increment": {
            "name": "increment",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inc": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Counter.value": {
            "name": "value",
            "location": 170,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_count.calc": {
            "name": "calc",
            "location": 177,
            "return": [],
            "arguments": {
                "counter": [],
                "n": []
            }
        },
        "test_count_keepstate.calc": {
            "name": "calc",
            "location": 192,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "Optional[int]"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        }
    },
    "myia-master/tests/test_validate.py": {
        "run": {
            "name": "run",
            "location": 29,
            "return": [
                "str",
                "Awaitable"
            ],
            "arguments": {
                "pip": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "fn": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "types": [
                    "str",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "valid": {
            "name": "valid",
            "location": 34,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "invalid": {
            "name": "invalid",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "valid_after_ec": {
            "name": "valid_after_ec",
            "location": 49,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "test_validate": {
            "name": "test_validate",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clean": {
            "name": "test_clean",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_validate_abstract": {
            "name": "test_validate_abstract",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "valid.deco": {
            "name": "deco",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": []
            }
        },
        "invalid.deco": {
            "name": "deco",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": []
            }
        },
        "valid_after_ec.deco": {
            "name": "deco",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fn": [
                    "Callable[[], None]"
                ]
            }
        },
        "test_validate.f1": {
            "name": "f1",
            "location": 59,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_validate.f2": {
            "name": "f2",
            "location": 64,
            "return": [
                "Point"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_validate.f3": {
            "name": "f3",
            "location": 70,
            "return": [
                "Point"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_validate.f4": {
            "name": "f4",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_validate.f5": {
            "name": "f5",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_validate.f6": {
            "name": "f6",
            "location": 83,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool",
                    "list"
                ],
                "y": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "test_validate.f7": {
            "name": "f7",
            "location": 89,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_validate.f8": {
            "name": "f8",
            "location": 95,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "pt": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "test_validate.f9": {
            "name": "f9",
            "location": 99,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_clean.f1": {
            "name": "f1",
            "location": 108,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "int"
                ],
                "y": [
                    "float",
                    "gluonts.model.common.NPArrayLike",
                    "int"
                ]
            }
        },
        "test_clean.f2": {
            "name": "f2",
            "location": 112,
            "return": [
                "Point",
                "str",
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_clean.f3": {
            "name": "f3",
            "location": 116,
            "return": [
                "Point",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "xs": [
                    "Union[int, float]",
                    "dict"
                ]
            }
        },
        "test_clean.f4": {
            "name": "f4",
            "location": 123,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_clean.f5": {
            "name": "f5",
            "location": 130,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_clean.f3.f": {
            "name": "f",
            "location": 117,
            "return": [],
            "arguments": {
                "pt": []
            }
        },
        "test_clean.f4.f": {
            "name": "f",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_clean.f5.f": {
            "name": "f",
            "location": 131,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        }
    },
    "myia-master/tests/test_vm.py": {
        "test_vm_floordiv": {
            "name": "test_vm_floordiv",
            "location": 9,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_vm_truediv": {
            "name": "test_vm_truediv",
            "location": 14,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_vm_array_map": {
            "name": "test_vm_array_map",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_map2": {
            "name": "test_vm_array_map2",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_map_prim": {
            "name": "test_vm_array_map_prim",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_map_clos": {
            "name": "test_vm_array_map_clos",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_scan": {
            "name": "test_vm_array_scan",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_reduce": {
            "name": "test_vm_array_reduce",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_vm_array_map.f": {
            "name": "f",
            "location": 20,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_vm_array_map2.f": {
            "name": "f",
            "location": 33,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_vm_array_map_prim.f": {
            "name": "f",
            "location": 47,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "test_vm_array_map_clos.f": {
            "name": "f",
            "location": 57,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_vm_array_scan.f": {
            "name": "f",
            "location": 73,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_vm_array_reduce.f": {
            "name": "f",
            "location": 86,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Optional[float]",
                    "int",
                    "list"
                ]
            }
        },
        "test_vm_array_map.f.add1": {
            "name": "add1",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "test_vm_array_map2.f.add": {
            "name": "add",
            "location": 34,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_vm_array_map_clos.f.add": {
            "name": "add",
            "location": 60,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_vm_array_scan.f.add": {
            "name": "add",
            "location": 74,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_vm_array_reduce.f.add": {
            "name": "add",
            "location": 87,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "myia-master/tests/__init__.py": {},
    "myia-master/tests/compile/test_backend.py": {
        "test_default_backend": {
            "name": "test_default_backend",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_load_backend_unknown": {
            "name": "test_load_backend_unknown",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_backend_error": {
            "name": "test_backend_error",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_reshape2": {
            "name": "test_reshape2",
            "location": 67,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_array_reduce": {
            "name": "test_array_reduce",
            "location": 72,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_array_reduce2": {
            "name": "test_array_reduce2",
            "location": 77,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_array_to_scalar": {
            "name": "test_array_to_scalar",
            "location": 82,
            "return": [
                "common.ComponentFactory"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "test_truediv": {
            "name": "test_truediv",
            "location": 87,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_to_array": {
            "name": "test_to_array",
            "location": 92,
            "return": [
                "int",
                "Sequence[str]",
                "Sequence[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "test_bool_and_nil_args": {
            "name": "test_bool_and_nil_args",
            "location": 97,
            "return": [
                "float",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_return_tuple": {
            "name": "test_return_tuple",
            "location": 102,
            "return": [
                "float",
                "tuple[typing.Union[int,dict[str, str],str,float,None]]"
            ],
            "arguments": {
                "x": [
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Iterable[str]",
                    "None",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "test_raise": {
            "name": "test_raise",
            "location": 108,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_return_list": {
            "name": "test_return_list",
            "location": 117,
            "return": [
                "list[int]"
            ],
            "arguments": {}
        },
        "test_constant_list": {
            "name": "test_constant_list",
            "location": 126,
            "return": [
                "list[int]",
                "rtv.extractors.common.Extractor",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "test_constant_array": {
            "name": "test_constant_array",
            "location": 135,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "test_backend_error.format": {
            "name": "format",
            "location": 52,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {}
        },
        "test_backend_error.f": {
            "name": "f",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/compile/test_cconv.py": {
        "step_cconv": {
            "name": "step_cconv",
            "location": 9,
            "return": [
                "dict[typing.Text, typing.Union[bool,str,None,dict[str, typing.Any]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "graph": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "use_llift": [
                    "bool",
                    "float",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "check_no_free_variables": {
            "name": "check_no_free_variables",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int"
                ]
            }
        },
        "cconv": {
            "name": "cconv",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_straight": {
            "name": "test_straight",
            "location": 54,
            "return": [
                "float",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_simple_closure": {
            "name": "test_simple_closure",
            "location": 59,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_max": {
            "name": "test_max",
            "location": 67,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_deep_nesting": {
            "name": "test_deep_nesting",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[Tuple]"
                ]
            }
        },
        "test_return_in_double_while": {
            "name": "test_return_in_double_while",
            "location": 91,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_pow10": {
            "name": "test_pow10",
            "location": 100,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_closure_as_fv": {
            "name": "test_closure_as_fv",
            "location": 113,
            "return": [],
            "arguments": {
                "x": [
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "list",
                    "Iterable[T]"
                ]
            }
        },
        "cconv.decorate": {
            "name": "decorate",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_simple_closure.g": {
            "name": "g",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_deep_nesting.f": {
            "name": "f",
            "location": 76,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_closure_as_fv.f": {
            "name": "f",
            "location": 114,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {}
        },
        "test_closure_as_fv.g": {
            "name": "g",
            "location": 117,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "cconv.decorate.run_test": {
            "name": "run_test",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_deep_nesting.f.g": {
            "name": "g",
            "location": 77,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_deep_nesting.f.g.h": {
            "name": "h",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/compile/__init__.py": {},
    "myia-master/tests/composite/test_composite_examples.py": {
        "Shp": {
            "name": "Shp",
            "location": 11,
            "return": [
                "tuple[]",
                "Union[List[str], str]",
                "str"
            ],
            "arguments": {}
        },
        "test_infer_composite_full": {
            "name": "test_infer_composite_full",
            "location": 29,
            "return": [
                "common.ScanLoadFn",
                "bool"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "dtype": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_composite_full": {
            "name": "test_composite_full",
            "location": 40,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "typing.Callable[, ]",
                    "common.ScanLoadFn",
                    "typing.Sequence[str]",
                    "Callable",
                    "Sequence[str]"
                ],
                "fill_value": [
                    "int",
                    "typing.Callable[, ]",
                    "common.ScanLoadFn",
                    "typing.Sequence[str]",
                    "Callable",
                    "Sequence[str]"
                ],
                "dtype": [
                    "int",
                    "typing.Callable[, ]",
                    "common.ScanLoadFn",
                    "typing.Sequence[str]",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "test_infer_composite_simple": {
            "name": "test_infer_composite_simple",
            "location": 47,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_composite_simple": {
            "name": "test_composite_simple",
            "location": 56,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "myia-master/tests/composite/__init__.py": {},
    "myia-master/tests/composite/examples/operations.py": {},
    "myia-master/tests/composite/examples/primitives.py": {
        "_vprop_generic": {
            "name": "_vprop_generic",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vprop": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "need": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "out": [
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "myia-master/tests/composite/examples/prim_composite_full.py": {
        "pyimpl_composite_full": {
            "name": "pyimpl_composite_full",
            "location": 19,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "List[int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "fill_value": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, Tuple[int, ...]]",
                    "Optional[str]",
                    "str",
                    "T"
                ],
                "abstract_scalar_type": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, Tuple[int, ...]]",
                    "Optional[str]",
                    "str",
                    "T"
                ]
            }
        }
    },
    "myia-master/tests/composite/examples/prim_composite_simple.py": {
        "pyimpl_composite_simple": {
            "name": "pyimpl_composite_simple",
            "location": 5,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/composite/examples/__init__.py": {},
    "myia-master/tests/debug/test_debug_utils.py": {
        "test_GraphIndex": {
            "name": "test_GraphIndex",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_GraphIndex_multigraph": {
            "name": "test_GraphIndex_multigraph",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_GraphIndex.f": {
            "name": "f",
            "location": 12,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_GraphIndex_multigraph.helper": {
            "name": "helper",
            "location": 32,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_GraphIndex_multigraph.f": {
            "name": "f",
            "location": 36,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_GraphIndex_multigraph.f.inner": {
            "name": "inner",
            "location": 37,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list"
                ]
            }
        }
    },
    "myia-master/tests/frontends/test_all_ops.py": {
        "eqtest": {
            "name": "eqtest",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "x1": [
                    "bool",
                    "T",
                    "Exception",
                    "List[mypy.types.Type.VarId]"
                ],
                "x2": [
                    "bool",
                    "T",
                    "Exception",
                    "List[mypy.types.Type.VarId]"
                ]
            }
        },
        "to_numpy": {
            "name": "to_numpy",
            "location": 69,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Exception]",
                    "Optional[str]"
                ]
            }
        },
        "is_tensor_param": {
            "name": "is_tensor_param",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "_make_sens": {
            "name": "_make_sens",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "float",
                    "List[int]",
                    "list[int]"
                ],
                "sens": [
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_make_sens_numpy": {
            "name": "_make_sens_numpy",
            "location": 86,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "o": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "int"
                ],
                "sens": [
                    "float",
                    "Pattern",
                    "str",
                    "int"
                ]
            }
        },
        "pt_fn_grads": {
            "name": "pt_fn_grads",
            "location": 93,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "make_argspec": {
            "name": "make_argspec",
            "location": 126,
            "return": [
                "tuple[]",
                "int",
                "Tuple[OrderedDict]",
                "str",
                "bool",
                "\"DescriptionObserver\""
            ],
            "arguments": {
                "args": [],
                "broad_specs": [
                    "int",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "_fwd_and_bwd": {
            "name": "_fwd_and_bwd",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Optional[numpy.ndarray]",
                    "None"
                ],
                "args": [],
                "broad_specs": [
                    "tuple",
                    "None",
                    "List[str]",
                    "tuple[]",
                    "str",
                    "Dict[str, Any]",
                    "list[str]",
                    "list",
                    "dict[str, typing.Any]",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "pipeline": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "bool",
                    "Callable"
                ],
                "backend": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "numpy_compat": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ],
                "atol": [
                    "float",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "rtol": [
                    "float",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "grad_atol": [
                    "float",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "grad_rtol": [
                    "float",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_torch_abs": {
            "name": "test_torch_abs",
            "location": 263,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_exp": {
            "name": "test_torch_exp",
            "location": 268,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_log": {
            "name": "test_torch_log",
            "location": 273,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "typing.Iterable[int]",
                    "bool",
                    "Iterable[int]",
                    "List[List[int]]"
                ]
            }
        },
        "test_torch_relu": {
            "name": "test_torch_relu",
            "location": 278,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_sign": {
            "name": "test_torch_sign",
            "location": 283,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_sigmoid": {
            "name": "test_torch_sigmoid",
            "location": 288,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tanh": {
            "name": "test_torch_tanh",
            "location": 293,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_argmax_1_arg": {
            "name": "test_torch_tensor_argmax_1_arg",
            "location": 301,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_argmax_3_arg": {
            "name": "test_torch_tensor_argmax_3_arg",
            "location": 311,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_chunk": {
            "name": "test_torch_chunk",
            "location": 322,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "chunks": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_concat": {
            "name": "test_torch_concat",
            "location": 334,
            "return": [
                "float",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "numpy.ndarray"
                ],
                "c": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_torch_binary_cross_entropy": {
            "name": "test_torch_binary_cross_entropy",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [],
                "target": [],
                "reduction": []
            }
        },
        "test_conv2d_no_dil": {
            "name": "test_conv2d_no_dil",
            "location": 380,
            "return": [],
            "arguments": {
                "inp": [
                    "Union[str, 'Path']",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "w": [
                    "Union[str, 'Path']",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "test_conv2d_no_dil_stride": {
            "name": "test_conv2d_no_dil_stride",
            "location": 389,
            "return": [],
            "arguments": {
                "inp": [
                    "Union[str, 'Path']",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "w": [
                    "Union[str, 'Path']",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "test_torch_conv2d": {
            "name": "test_torch_conv2d",
            "location": 410,
            "return": [],
            "arguments": {
                "inp": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "w": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "b": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_torch_conv2d__non_tuple_args": {
            "name": "test_torch_conv2d__non_tuple_args",
            "location": 427,
            "return": [],
            "arguments": {
                "inp": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "List[allennlp.data.tokenizers.Token]",
                    "list[allennlp.data.tokenizers.Token]"
                ],
                "w": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "List[allennlp.data.tokenizers.Token]",
                    "list[allennlp.data.tokenizers.Token]"
                ],
                "b": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "List[allennlp.data.tokenizers.Token]",
                    "list[allennlp.data.tokenizers.Token]"
                ]
            }
        },
        "test_torch_conv2d__group3": {
            "name": "test_torch_conv2d__group3",
            "location": 437,
            "return": [],
            "arguments": {
                "inp": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "w": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "b": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_torch_conv_transpose2d": {
            "name": "test_torch_conv_transpose2d",
            "location": 534,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str",
                    "bytes"
                ],
                "w": [
                    "int",
                    "str",
                    "bytes"
                ],
                "b": [
                    "int",
                    "str",
                    "bytes"
                ],
                "s": [
                    "int",
                    "str",
                    "bytes"
                ],
                "p": [
                    "int",
                    "str",
                    "bytes"
                ],
                "o_p": [
                    "int",
                    "str",
                    "bytes"
                ],
                "g": [
                    "int",
                    "str",
                    "bytes"
                ],
                "d": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_torch_cross_entropy": {
            "name": "test_torch_cross_entropy",
            "location": 556,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [],
                "target": [],
                "reduction": []
            }
        },
        "test_torch_embedding": {
            "name": "test_torch_embedding",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "float"
                ],
                "weights": [
                    "str",
                    "float"
                ]
            }
        },
        "test_torch_detach": {
            "name": "test_torch_detach",
            "location": 579,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_torch_gather": {
            "name": "test_torch_gather",
            "location": 592,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "index": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_item": {
            "name": "test_torch_item",
            "location": 600,
            "return": [
                "dict",
                "Iterable[Any]"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "test_torch_norm": {
            "name": "test_torch_norm",
            "location": 616,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "float"
                ],
                "p": [
                    "str",
                    "float"
                ],
                "dim": [
                    "str",
                    "float"
                ]
            }
        },
        "test_torch_tensor_get": {
            "name": "test_torch_tensor_get",
            "location": 621,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_torch_tensor_get2": {
            "name": "test_torch_tensor_get2",
            "location": 626,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_torch_log_softmax": {
            "name": "test_torch_log_softmax",
            "location": 637,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_torch_functional_log_softmax": {
            "name": "test_torch_functional_log_softmax",
            "location": 648,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_lstm_cell": {
            "name": "test_lstm_cell",
            "location": 662,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "hx": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "cx": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "w_ih": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "w_hh": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "b_ih": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "b_hh": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "test_torch_tensor_max_1_arg": {
            "name": "test_torch_tensor_max_1_arg",
            "location": 667,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_max_3_arg": {
            "name": "test_torch_tensor_max_3_arg",
            "location": 678,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_max_pool2d": {
            "name": "test_torch_max_pool2d",
            "location": 703,
            "return": [
                "bool",
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "ri": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "test_torch_max_pool2d_pad1_big_stride": {
            "name": "test_torch_max_pool2d_pad1_big_stride",
            "location": 728,
            "return": [
                "bool",
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "ri": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "test_torch_mean": {
            "name": "test_torch_mean",
            "location": 734,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_mse_loss": {
            "name": "test_torch_mse_loss",
            "location": 741,
            "return": [
                "int",
                "str",
                "List[numpy.array]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ],
                "y": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ]
            }
        },
        "test_torch_nll_loss": {
            "name": "test_torch_nll_loss",
            "location": 746,
            "return": [
                "int",
                "str",
                "List[numpy.array]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ],
                "y": [
                    "bool",
                    "int",
                    "apps.monero.xmr.types.Ge25519"
                ]
            }
        },
        "test_torch_nll_loss_reduce_options": {
            "name": "test_torch_nll_loss_reduce_options",
            "location": 762,
            "return": [
                "int",
                "List[numpy.array]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_nll_loss_reduce_cast": {
            "name": "test_torch_nll_loss_reduce_cast",
            "location": 769,
            "return": [
                "int",
                "str",
                "List[numpy.array]",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_tensor_permute": {
            "name": "test_torch_tensor_permute",
            "location": 774,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_pow": {
            "name": "test_torch_tensor_pow",
            "location": 779,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_torch_tensor_reshape": {
            "name": "test_torch_tensor_reshape",
            "location": 791,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_scatter": {
            "name": "test_torch_scatter",
            "location": 800,
            "return": [],
            "arguments": {
                "x": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "Optional[str]",
                    "str",
                    "List[Tuple[str, Any]]",
                    "None",
                    "Iterable[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "index": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "Optional[str]",
                    "str",
                    "List[Tuple[str, Any]]",
                    "None",
                    "Iterable[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "src": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "Optional[str]",
                    "str",
                    "List[Tuple[str, Any]]",
                    "None",
                    "Iterable[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_torch_scatter_add": {
            "name": "test_torch_scatter_add",
            "location": 809,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "typing.Iterable[str]",
                    "bool",
                    "Iterable[str]",
                    "str",
                    "dict",
                    "typing.Sized",
                    "Sized"
                ],
                "index": [
                    "typing.Iterable[str]",
                    "bool",
                    "Iterable[str]",
                    "str",
                    "dict",
                    "typing.Sized",
                    "Sized"
                ],
                "src": [
                    "typing.Iterable[str]",
                    "bool",
                    "Iterable[str]",
                    "str",
                    "dict",
                    "typing.Sized",
                    "Sized"
                ]
            }
        },
        "test_torch_scatter_broadcast_source_nonpytorch_scalar": {
            "name": "test_torch_scatter_broadcast_source_nonpytorch_scalar",
            "location": 818,
            "return": [],
            "arguments": {
                "x": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "src": [
                    "bool"
                ]
            }
        },
        "test_torch_size": {
            "name": "test_torch_size",
            "location": 833,
            "return": [
                "tuple[]",
                "str",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.Optional[int]",
                    "int"
                ]
            }
        },
        "test_torch_smooth_l1_loss": {
            "name": "test_torch_smooth_l1_loss",
            "location": 840,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_softmax": {
            "name": "test_torch_softmax",
            "location": 850,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_split": {
            "name": "test_torch_split",
            "location": 855,
            "return": [],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "test_torch_tensor_squeeze": {
            "name": "test_torch_tensor_squeeze",
            "location": 865,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_tensor_squeeze_all": {
            "name": "test_torch_tensor_squeeze_all",
            "location": 870,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_torch_stack": {
            "name": "test_torch_stack",
            "location": 882,
            "return": [
                "float",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "numpy.ndarray"
                ],
                "c": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_torch_std": {
            "name": "test_torch_std",
            "location": 887,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_sum": {
            "name": "test_torch_sum",
            "location": 892,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_sum_dtype": {
            "name": "test_torch_sum_dtype",
            "location": 905,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_sum_dim": {
            "name": "test_torch_sum_dim",
            "location": 910,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_sum_dim_keepdim": {
            "name": "test_torch_sum_dim_keepdim",
            "location": 919,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_sum_multi_dim": {
            "name": "test_torch_sum_multi_dim",
            "location": 924,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_transpose": {
            "name": "test_torch_tensor_transpose",
            "location": 929,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_torch_tensor_unsqueeze": {
            "name": "test_torch_tensor_unsqueeze",
            "location": 940,
            "return": [
                "str",
                "numpy.ndarray",
                "kata.data.repos.HardCoded.KataLanguageRepo",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_var": {
            "name": "test_torch_var",
            "location": 945,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_torch_var_dim": {
            "name": "test_torch_var_dim",
            "location": 950,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_torch_tensor_view_as": {
            "name": "test_torch_tensor_view_as",
            "location": 958,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Union[str, 'Path']",
                    "AsyncIterator"
                ],
                "y": [
                    "Union[str, 'Path']",
                    "str",
                    "AsyncIterator",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "test_torch_zeros": {
            "name": "test_torch_zeros",
            "location": 963,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_torch_zeros_dtype": {
            "name": "test_torch_zeros_dtype",
            "location": 968,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "_fwd_and_bwd.mksens": {
            "name": "mksens",
            "location": 210,
            "return": [
                "mypy.types.Type",
                "tuple",
                "Type[Any]"
            ],
            "arguments": {
                "x": [
                    "snorkel.types.DataPoint"
                ]
            }
        }
    },
    "myia-master/tests/frontends/test_frontend.py": {
        "test_load_frontend_unknown": {
            "name": "test_load_frontend_unknown",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frontend_error": {
            "name": "test_frontend_error",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frontend_error.f": {
            "name": "f",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/frontends/test_pytorch.py": {
        "eqtest": {
            "name": "eqtest",
            "location": 21,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "t1": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ],
                "t2": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ],
                "rtol": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ],
                "atol": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_pytorch_dtype_to_type": {
            "name": "test_pytorch_dtype_to_type",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_backend_options": {
            "name": "get_backend_options",
            "location": 35,
            "return": [
                "str",
                "bool",
                "int",
                "recidiviz.utils.regions.Region",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "backend": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "typing.Mapping",
                    "Mapping",
                    "purplship.core.utils.soap.Envelope"
                ]
            }
        },
        "test_module_matmul_fwd": {
            "name": "test_module_matmul_fwd",
            "location": 66,
            "return": [
                "bool",
                "Iterable[object]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "inp": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_module_matmul_bwd": {
            "name": "test_module_matmul_bwd",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_module_matmul_update": {
            "name": "test_module_matmul_update",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_module_2_layer_mlp_fwd": {
            "name": "test_module_2_layer_mlp_fwd",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_module_2_layer_mlp_bwd": {
            "name": "test_module_2_layer_mlp_bwd",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_module_2_layer_mlp_update": {
            "name": "test_module_2_layer_mlp_update",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_module_2_layer_mlp_update__to_device": {
            "name": "test_module_2_layer_mlp_update__to_device",
            "location": 295,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_pytorch_inference_errors": {
            "name": "test_pytorch_inference_errors",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "trio.testing.MockClock"
                ]
            }
        },
        "test_pytorch_scalar": {
            "name": "test_pytorch_scalar",
            "location": 371,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_module_2_layer_mlp_seq_fwd": {
            "name": "test_module_2_layer_mlp_seq_fwd",
            "location": 412,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_module_linear_seq_bwd": {
            "name": "test_module_linear_seq_bwd",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "typing.Iterable[numpy.dtype]"
                ]
            }
        },
        "test_alias_list_error": {
            "name": "test_alias_list_error",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_nn_max_pool2d_fwd": {
            "name": "test_nn_max_pool2d_fwd",
            "location": 535,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str"
                ]
            }
        },
        "test_nn_max_pool2d_update": {
            "name": "test_nn_max_pool2d_update",
            "location": 568,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": []
            }
        },
        "test_shp_explicit_errors": {
            "name": "test_shp_explicit_errors",
            "location": 610,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "trio.testing.MockClock"
                ]
            }
        },
        "test_sum_keepdim_error": {
            "name": "test_sum_keepdim_error",
            "location": 649,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "trio.testing.MockClock"
                ]
            }
        },
        "test_switch_input_types": {
            "name": "test_switch_input_types",
            "location": 666,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_optim_setitem": {
            "name": "test_optim_setitem",
            "location": 679,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Args.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tiny.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "in_f": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "str",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "float",
                    "int",
                    "nevergrad.common.Loss",
                    "bool"
                ],
                "out_f": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]",
                    "str",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "float",
                    "int",
                    "nevergrad.common.Loss",
                    "bool"
                ]
            }
        },
        "Tiny.forward": {
            "name": "forward",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_module_matmul_bwd.mse": {
            "name": "mse",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_matmul_bwd.cost": {
            "name": "cost",
            "location": 84,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_matmul_bwd.step": {
            "name": "step",
            "location": 90,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_matmul_update.mse": {
            "name": "mse",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_matmul_update.cost": {
            "name": "cost",
            "location": 126,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_matmul_update.step": {
            "name": "step",
            "location": 132,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "MLP_2_Layers.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i_size": [
                    "int",
                    "float"
                ],
                "h_size": [
                    "int",
                    "None",
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "o_size": [
                    "int"
                ]
            }
        },
        "MLP_2_Layers.forward": {
            "name": "forward",
            "location": 161,
            "return": [
                "str",
                "utils.Node",
                "int",
                "list[list[int]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_module_2_layer_mlp_fwd.step": {
            "name": "step",
            "location": 179,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": []
            }
        },
        "test_module_2_layer_mlp_bwd.mse": {
            "name": "mse",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_bwd.cost": {
            "name": "cost",
            "location": 208,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_bwd.step": {
            "name": "step",
            "location": 214,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update.mse": {
            "name": "mse",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update.cost": {
            "name": "cost",
            "location": 258,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update.step": {
            "name": "step",
            "location": 264,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update__to_device.mse": {
            "name": "mse",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update__to_device.cost": {
            "name": "cost",
            "location": 312,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_2_layer_mlp_update__to_device.step": {
            "name": "step",
            "location": 318,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_pytorch_inference_errors.step_add": {
            "name": "step_add",
            "location": 353,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_pytorch_inference_errors.step_dot": {
            "name": "step_dot",
            "location": 357,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "test_pytorch_scalar.step_add": {
            "name": "step_add",
            "location": 378,
            "return": [
                "float",
                "str",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "MLP_2_Layers_Seq.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i_size": [
                    "int",
                    "float"
                ],
                "h_size": [
                    "int",
                    "None",
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "o_size": [
                    "int"
                ]
            }
        },
        "MLP_2_Layers_Seq.forward": {
            "name": "forward",
            "location": 393,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T"
                ]
            }
        },
        "Linear_Seq.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i_size": [
                    "int",
                    "float"
                ],
                "h_size": [
                    "int",
                    "float"
                ],
                "o_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Linear_Seq.forward": {
            "name": "forward",
            "location": 405,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T"
                ]
            }
        },
        "test_module_2_layer_mlp_seq_fwd.step": {
            "name": "step",
            "location": 421,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": []
            }
        },
        "test_module_linear_seq_bwd.mse": {
            "name": "mse",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "target": []
            }
        },
        "test_module_linear_seq_bwd.cost": {
            "name": "cost",
            "location": 459,
            "return": [],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "test_module_linear_seq_bwd.step": {
            "name": "step",
            "location": 471,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "model": [],
                "inp": [],
                "target": []
            }
        },
        "Linear_List.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "i_size": [
                    "int",
                    "float"
                ],
                "h_size": [
                    "int",
                    "float"
                ],
                "o_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Linear_List.forward": {
            "name": "forward",
            "location": 498,
            "return": [
                "str",
                "utils.Node",
                "list[tuple[typing.Union[int,int,int]]]",
                "list[]",
                "int",
                "set[]",
                "float",
                "list[list[int]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T"
                ]
            }
        },
        "test_alias_list_error.g": {
            "name": "g",
            "location": 509,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "xs": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_alias_list_error.f": {
            "name": "f",
            "location": 520,
            "return": [],
            "arguments": {
                "xs": [],
                "y": []
            }
        },
        "test_nn_max_pool2d_fwd.cost": {
            "name": "cost",
            "location": 550,
            "return": [],
            "arguments": {
                "model": [],
                "inp": []
            }
        },
        "test_nn_max_pool2d_fwd.step": {
            "name": "step",
            "location": 557,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "inp": []
            }
        },
        "test_nn_max_pool2d_update.cost": {
            "name": "cost",
            "location": 585,
            "return": [],
            "arguments": {
                "model": [],
                "inp": []
            }
        },
        "test_nn_max_pool2d_update.step": {
            "name": "step",
            "location": 592,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "inp": []
            }
        },
        "test_shp_explicit_errors.f1": {
            "name": "f1",
            "location": 615,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_shp_explicit_errors.step1": {
            "name": "step1",
            "location": 619,
            "return": [],
            "arguments": {
                "inp": []
            }
        },
        "test_shp_explicit_errors.f2": {
            "name": "f2",
            "location": 625,
            "return": [
                "float",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "test_shp_explicit_errors.step2": {
            "name": "step2",
            "location": 629,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_shp_explicit_errors.f3": {
            "name": "f3",
            "location": 635,
            "return": [
                "float",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "test_shp_explicit_errors.step3": {
            "name": "step3",
            "location": 639,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_sum_keepdim_error.f1": {
            "name": "f1",
            "location": 654,
            "return": [
                "float",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "kd": [
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "test_sum_keepdim_error.step1": {
            "name": "step1",
            "location": 658,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kd": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_switch_input_types.f": {
            "name": "f",
            "location": 670,
            "return": [
                "List[int]",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "test_optim_setitem.update_sgd": {
            "name": "update_sgd",
            "location": 685,
            "return": [
                "float",
                "str",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "int",
                "bool"
            ],
            "arguments": {
                "p": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ],
                "g": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ]
            }
        },
        "test_optim_setitem.mse": {
            "name": "mse",
            "location": 717,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "SupportsBytes",
                    "Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ],
                "target": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "test_optim_setitem.cost": {
            "name": "cost",
            "location": 721,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "inp": [
                    "str"
                ],
                "target": [
                    "str",
                    "int",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "test_optim_setitem.step": {
            "name": "step",
            "location": 727,
            "return": [
                "tuple[]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "inp": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "test_nn_max_pool2d_fwd.MP2dMod.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_nn_max_pool2d_fwd.MP2dMod.forward": {
            "name": "forward",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "inp": []
            }
        },
        "test_nn_max_pool2d_update.MP2dMod.__init__": {
            "name": "__init__",
            "location": 578,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_nn_max_pool2d_update.MP2dMod.forward": {
            "name": "forward",
            "location": 582,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "myia-master/tests/frontends/__init__.py": {},
    "myia-master/tests/ir/test_anf.py": {
        "test_incoming": {
            "name": "test_incoming",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_graph": {
            "name": "test_graph",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_graph_helpers": {
            "name": "test_graph_helpers",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_graph_output": {
            "name": "test_graph_output",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_str_coverage": {
            "name": "test_str_coverage",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/ir/test_clone.py": {
        "test_clone_simple": {
            "name": "test_clone_simple",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_closure": {
            "name": "test_clone_closure",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_scoping": {
            "name": "test_clone_scoping",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_total": {
            "name": "test_clone_total",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_graph_for_inline": {
            "name": "_graph_for_inline",
            "location": 131,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "_successful_inlining": {
            "name": "_successful_inlining",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cl": [
                    "typing.Type",
                    "Type[T]",
                    "str",
                    "list[]",
                    "Type[Any]",
                    "list"
                ],
                "orig": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Union[Dict, List, str]",
                    "list[]"
                ],
                "new_params": [
                    "list[str]",
                    "str",
                    "Callable",
                    "Callable[[], Any]",
                    "List[str]",
                    "Type"
                ],
                "target": [
                    "typing.Type",
                    "type",
                    "typing.IO",
                    "str",
                    "IO[bytes]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Type['AbstractIntegrationConversation']",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "test_clone_inline": {
            "name": "test_clone_inline",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_recursive": {
            "name": "test_clone_recursive",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_unused_parameters": {
            "name": "test_clone_unused_parameters",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_without_forcing_manager": {
            "name": "test_clone_without_forcing_manager",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_dangling_parameters": {
            "name": "test_clone_dangling_parameters",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clone_simple.f": {
            "name": "f",
            "location": 20,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_closure.f": {
            "name": "f",
            "location": 52,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_scoping.f": {
            "name": "f",
            "location": 75,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_total.f1": {
            "name": "f1",
            "location": 106,
            "return": [
                "List[int]",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_clone_total.f2": {
            "name": "f2",
            "location": 109,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "y": [
                    "Callable",
                    "str",
                    "Iterator",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "test_clone_inline.f": {
            "name": "f",
            "location": 163,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_recursive.f": {
            "name": "f",
            "location": 179,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_unused_parameters.f": {
            "name": "f",
            "location": 218,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_clone_without_forcing_manager.f": {
            "name": "f",
            "location": 234,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_clone_closure.f.j": {
            "name": "j",
            "location": 53,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "z": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "test_clone_scoping.f.g": {
            "name": "g",
            "location": 76,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {}
        },
        "test_clone_scoping.f.h": {
            "name": "h",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_clone_scoping.f.i": {
            "name": "i",
            "location": 84,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "q": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "myia-master/tests/ir/test_ir_utils.py": {
        "test_dfs": {
            "name": "test_dfs",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dfs_graphs": {
            "name": "test_dfs_graphs",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort": {
            "name": "test_toposort",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toposort2": {
            "name": "test_toposort2",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_name_nodes": {
            "name": "_name_nodes",
            "location": 71,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_dfs_variants": {
            "name": "test_dfs_variants",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_check_isomorphic": {
            "name": "_check_isomorphic",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "g1": [],
                "g2": [],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_isomorphic": {
            "name": "test_isomorphic",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isomorphic_closures": {
            "name": "test_isomorphic_closures",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isomorphic_globals": {
            "name": "test_isomorphic_globals",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isomorphic_recursion": {
            "name": "test_isomorphic_recursion",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_helpers": {
            "name": "test_helpers",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_graph": {
            "name": "test_print_graph",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_node": {
            "name": "test_print_node",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_cycle": {
            "name": "test_print_cycle",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_closure": {
            "name": "test_print_closure",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_name_nodes.name": {
            "name": "name",
            "location": 72,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "test_dfs_variants.f": {
            "name": "f",
            "location": 79,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic.f1": {
            "name": "f1",
            "location": 122,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_isomorphic.f2": {
            "name": "f2",
            "location": 126,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_isomorphic.f3": {
            "name": "f3",
            "location": 130,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_isomorphic.f4": {
            "name": "f4",
            "location": 134,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_isomorphic_closures.f1": {
            "name": "f1",
            "location": 145,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic_closures.f2": {
            "name": "f2",
            "location": 152,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_closures.f3": {
            "name": "f3",
            "location": 159,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_globals.helper1": {
            "name": "helper1",
            "location": 178,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic_globals.helper2": {
            "name": "helper2",
            "location": 181,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_globals.helper3": {
            "name": "helper3",
            "location": 184,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_globals.f1": {
            "name": "f1",
            "location": 188,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic_globals.f2": {
            "name": "f2",
            "location": 192,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_globals.f3": {
            "name": "f3",
            "location": 196,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_globals.f4": {
            "name": "f4",
            "location": 200,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_isomorphic_recursion.f1": {
            "name": "f1",
            "location": 209,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic_recursion.f2": {
            "name": "f2",
            "location": 215,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_isomorphic_recursion.f3": {
            "name": "f3",
            "location": 221,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_dfs_variants.f.g": {
            "name": "g",
            "location": 82,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_isomorphic_closures.f1.inner1": {
            "name": "inner1",
            "location": 146,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_isomorphic_closures.f2.inner2": {
            "name": "inner2",
            "location": 153,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_isomorphic_closures.f3.inner3": {
            "name": "inner3",
            "location": 160,
            "return": [],
            "arguments": {
                "b": []
            }
        }
    },
    "myia-master/tests/ir/test_manager.py": {
        "clone": {
            "name": "clone",
            "location": 96,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "g": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_check_uses": {
            "name": "_check_uses",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ]
            }
        },
        "check_manager": {
            "name": "check_manager",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_flat": {
            "name": "test_flat",
            "location": 164,
            "return": [
                "float",
                "int",
                "typing.Callable[, ]",
                "list[list[typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_nested": {
            "name": "test_nested",
            "location": 170,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_fake_nested": {
            "name": "test_fake_nested",
            "location": 180,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_recurse": {
            "name": "test_recurse",
            "location": 197,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_recurse2": {
            "name": "test_recurse2",
            "location": 207,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_recurse3": {
            "name": "test_recurse3",
            "location": 217,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_deep_nest": {
            "name": "test_deep_nest",
            "location": 231,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_fake_deep_nest": {
            "name": "test_fake_deep_nest",
            "location": 249,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_calls": {
            "name": "test_calls",
            "location": 271,
            "return": [
                "Type"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_calls2": {
            "name": "test_calls2",
            "location": 285,
            "return": [
                "Type"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_fvs": {
            "name": "test_fvs",
            "location": 306,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_deep2": {
            "name": "test_deep2",
            "location": 335,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_nested_double_reference": {
            "name": "test_nested_double_reference",
            "location": 354,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "_x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_previously_mishandled": {
            "name": "test_previously_mishandled",
            "location": 374,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_deepest": {
            "name": "test_deepest",
            "location": 399,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_unused_parameter": {
            "name": "test_unused_parameter",
            "location": 430,
            "return": [
                "Iterable[Any]",
                "float",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, str]"
                ],
                "y": [
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_reachable": {
            "name": "test_reachable",
            "location": 439,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_mut_nested_to_global": {
            "name": "test_mut_nested_to_global",
            "location": 481,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "y": [
                    "bool",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mut_global_to_nested": {
            "name": "test_mut_global_to_nested",
            "location": 491,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "y": [
                    "bool",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mut_multiple_uses": {
            "name": "test_mut_multiple_uses",
            "location": 516,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_mut_closure": {
            "name": "test_mut_closure",
            "location": 560,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_remove_unused_graphs": {
            "name": "test_remove_unused_graphs",
            "location": 576,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_mut_update_total": {
            "name": "test_mut_update_total",
            "location": 597,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "Iterable[T]"
                ],
                "y": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_mut_update_total_nest": {
            "name": "test_mut_update_total_nest",
            "location": 621,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "Iterable[T]"
                ],
                "y": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_mut_multiple_uses_deep": {
            "name": "test_mut_multiple_uses_deep",
            "location": 663,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "y": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_mut_multiple_uses_closure": {
            "name": "test_mut_multiple_uses_closure",
            "location": 680,
            "return": [],
            "arguments": {
                "x": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[]",
                    "Iterable[T]",
                    "list"
                ],
                "y": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[]",
                    "Iterable[T]",
                    "list"
                ]
            }
        },
        "test_mut_uses": {
            "name": "test_mut_uses",
            "location": 694,
            "return": [
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ],
                "y": [
                    "list[list[typing.Any]]",
                    "Callable",
                    "int",
                    "List[List[Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_mut_use_global": {
            "name": "test_mut_use_global",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "List[str]",
                    "int",
                    "typing.Callable[, ]",
                    "Iterable[T]",
                    "Callable",
                    "list[]",
                    "list"
                ],
                "y": [
                    "list[str]",
                    "List[str]",
                    "int",
                    "typing.Callable[, ]",
                    "Iterable[T]",
                    "Callable",
                    "list[]",
                    "list"
                ]
            }
        },
        "test_cannot_replace_return": {
            "name": "test_cannot_replace_return",
            "location": 720,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_manager_exclusivity": {
            "name": "test_manager_exclusivity",
            "location": 731,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_weak_manager": {
            "name": "test_weak_manager",
            "location": 743,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_drop_root": {
            "name": "test_drop_root",
            "location": 766,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keep_roots": {
            "name": "test_keep_roots",
            "location": 777,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keep_roots_recursion": {
            "name": "test_keep_roots_recursion",
            "location": 801,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_parameter": {
            "name": "test_add_parameter",
            "location": 828,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_output": {
            "name": "test_set_output",
            "location": 841,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_graph_properties": {
            "name": "test_graph_properties",
            "location": 853,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "NestingSpecs.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "int",
                    "float",
                    "bool"
                ],
                "specs": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "NestingSpecs._parse_specs": {
            "name": "_parse_specs",
            "location": 27,
            "return": [
                "None",
                "Optional[str]",
                "dict[, bool]",
                "str",
                "dict[, typing.Union[str,dict[str, tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Type,typing.Type]]]]",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "specs": [
                    "bool",
                    "Optional[bool]",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "NestingSpecs.name": {
            "name": "name",
            "location": 48,
            "return": [
                "bool",
                "NamedTuple",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NestingSpecs.check": {
            "name": "check",
            "location": 57,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict[tuple[typing.Union[str,...]], list[typing.Any]]",
                    "OrderedDict",
                    "dict[, ]",
                    "Dict[Tuple[str, ...], List[Any]]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Stage.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stage.check": {
            "name": "check",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "tuple[typing.Union[str,...]]",
                    "Optional[Tuple[str, ...]]",
                    "str",
                    "None",
                    "int",
                    "Iterable",
                    "dict[str, set[str]]",
                    "Dict[str, Set[str]]",
                    "dict[, ]",
                    "Iterable[T]",
                    "dict"
                ]
            }
        },
        "check_manager.check": {
            "name": "check",
            "location": 117,
            "return": [
                "None",
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_nested.g": {
            "name": "g",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_fake_nested.g": {
            "name": "g",
            "location": 183,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_recurse.g": {
            "name": "g",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_recurse2.g": {
            "name": "g",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_recurse3.g": {
            "name": "g",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_deep_nest.g": {
            "name": "g",
            "location": 234,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_fake_deep_nest.g": {
            "name": "g",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_calls.h": {
            "name": "h",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "test_calls.g": {
            "name": "g",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_calls2.h": {
            "name": "h",
            "location": 288,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_calls2.g": {
            "name": "g",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "test_fvs.f": {
            "name": "f",
            "location": 312,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fvs.g": {
            "name": "g",
            "location": 315,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fvs.h": {
            "name": "h",
            "location": 318,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fvs.i": {
            "name": "i",
            "location": 321,
            "return": [],
            "arguments": {
                "w": []
            }
        },
        "test_deep2.f": {
            "name": "f",
            "location": 336,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_nested_double_reference.f": {
            "name": "f",
            "location": 355,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_previously_mishandled.f": {
            "name": "f",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "test_deepest.f1": {
            "name": "f1",
            "location": 402,
            "return": [],
            "arguments": {}
        },
        "test_reachable.f": {
            "name": "f",
            "location": 440,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_reachable.g": {
            "name": "g",
            "location": 443,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_reachable.h": {
            "name": "h",
            "location": 446,
            "return": [],
            "arguments": {}
        },
        "test_reachable.i": {
            "name": "i",
            "location": 449,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "test_reachable.j": {
            "name": "j",
            "location": 452,
            "return": [
                "int",
                "raiden.utils.Optional[int]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "x": [
                    "Iterable[Iterable[float]]"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_mut_nested_to_global.f": {
            "name": "f",
            "location": 482,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_mut_global_to_nested.f": {
            "name": "f",
            "location": 492,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_mut_multiple_uses.f": {
            "name": "f",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_mut_closure.f": {
            "name": "f",
            "location": 561,
            "return": [],
            "arguments": {
                "q": []
            }
        },
        "test_mut_closure.g": {
            "name": "g",
            "location": 564,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_mut_closure.h": {
            "name": "h",
            "location": 567,
            "return": [],
            "arguments": {
                "w": []
            }
        },
        "test_remove_unused_graphs.c": {
            "name": "c",
            "location": 577,
            "return": [
                "T",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "test_remove_unused_graphs.f1": {
            "name": "f1",
            "location": 580,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Iterable[str]]",
                "list",
                "Optional[int]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "q": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "test_remove_unused_graphs.f2": {
            "name": "f2",
            "location": 583,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "test_remove_unused_graphs.g": {
            "name": "g",
            "location": 586,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_mut_update_total.f": {
            "name": "f",
            "location": 598,
            "return": [],
            "arguments": {}
        },
        "test_mut_update_total_nest.f": {
            "name": "f",
            "location": 622,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_mut_multiple_uses_deep.f": {
            "name": "f",
            "location": 664,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_mut_multiple_uses_closure.f": {
            "name": "f",
            "location": 681,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_mut_multiple_uses_closure.g": {
            "name": "g",
            "location": 684,
            "return": [],
            "arguments": {}
        },
        "test_mut_uses.f": {
            "name": "f",
            "location": 698,
            "return": [],
            "arguments": {}
        },
        "test_mut_use_global.f": {
            "name": "f",
            "location": 706,
            "return": [],
            "arguments": {}
        },
        "test_mut_use_global.g": {
            "name": "g",
            "location": 709,
            "return": [],
            "arguments": {}
        },
        "test_cannot_replace_return.f": {
            "name": "f",
            "location": 722,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_manager_exclusivity.f": {
            "name": "f",
            "location": 733,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_weak_manager.f": {
            "name": "f",
            "location": 746,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_drop_root.f": {
            "name": "f",
            "location": 768,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_keep_roots.f": {
            "name": "f",
            "location": 780,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_keep_roots.g": {
            "name": "g",
            "location": 785,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_keep_roots_recursion.nonrec": {
            "name": "nonrec",
            "location": 802,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_keep_roots_recursion.rec1": {
            "name": "rec1",
            "location": 805,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_keep_roots_recursion.rec2": {
            "name": "rec2",
            "location": 808,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_keep_roots_recursion.f": {
            "name": "f",
            "location": 812,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_add_parameter.f": {
            "name": "f",
            "location": 830,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_set_output.f": {
            "name": "f",
            "location": 843,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_graph_properties.test": {
            "name": "test",
            "location": 856,
            "return": [
                "None",
                "str",
                "programl.ir.llvm.inst2vec_encoder.Inst2vecEncoder"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Stage.__init__._lengthen": {
            "name": "_lengthen",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "k": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "check_manager.check.test": {
            "name": "test",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deep_nest.g.h": {
            "name": "h",
            "location": 235,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_fake_deep_nest.g.h": {
            "name": "h",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_fvs.i.j": {
            "name": "j",
            "location": 322,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "test_deep2.f.g": {
            "name": "g",
            "location": 337,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_nested_double_reference.f.g": {
            "name": "g",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_previously_mishandled.f.g": {
            "name": "g",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "test_previously_mishandled.f.h": {
            "name": "h",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "test_deepest.f1.f2": {
            "name": "f2",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_mut_update_total_nest.f.g": {
            "name": "g",
            "location": 623,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_mut_multiple_uses_deep.f.g": {
            "name": "g",
            "location": 665,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_graph_properties.test.f": {
            "name": "f",
            "location": 857,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "check_manager.check.test._replace": {
            "name": "_replace",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tr": [
                    "int",
                    "Iterable[T]",
                    "Type",
                    "dict"
                ],
                "uses": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "int",
                    "Iterable[T]",
                    "Type",
                    "dict"
                ]
            }
        },
        "test_deep_nest.g.h.i": {
            "name": "i",
            "location": 236,
            "return": [],
            "arguments": {
                "w": []
            }
        },
        "test_fake_deep_nest.g.h.i": {
            "name": "i",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "test_deep2.f.g.h": {
            "name": "h",
            "location": 338,
            "return": [],
            "arguments": {}
        },
        "test_nested_double_reference.f.g.h": {
            "name": "h",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "test_deepest.f1.f2.f3": {
            "name": "f3",
            "location": 408,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_mut_update_total_nest.f.g.h": {
            "name": "h",
            "location": 624,
            "return": [],
            "arguments": {}
        },
        "test_mut_multiple_uses_deep.f.g.h": {
            "name": "h",
            "location": 666,
            "return": [],
            "arguments": {}
        },
        "test_graph_properties.test.f.g": {
            "name": "g",
            "location": 858,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_deepest.f1.f2.f3.f4": {
            "name": "f4",
            "location": 411,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_graph_properties.test.f.g.h": {
            "name": "h",
            "location": 859,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_deepest.f1.f2.f3.f4.f5": {
            "name": "f5",
            "location": 414,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/ir/__init__.py": {},
    "myia-master/tests/operations/test_hyper_map.py": {
        "test_hyper_map": {
            "name": "test_hyper_map",
            "location": 78,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_hyper_map_notuple": {
            "name": "test_hyper_map_notuple",
            "location": 86,
            "return": [
                "common.ScanLoadFn",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_hyper_map_nobroadcast": {
            "name": "test_hyper_map_nobroadcast",
            "location": 95,
            "return": [
                "common.ScanLoadFn",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_hyper_map_ct": {
            "name": "test_hyper_map_ct",
            "location": 100,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_hypermap_tree": {
            "name": "test_hypermap_tree",
            "location": 105,
            "return": [
                "numpy.array",
                "bool",
                "str",
                "Iterable[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "t": [
                    "bool",
                    "lib.AbstractArray",
                    "list[]",
                    "numpy.array",
                    "list"
                ]
            }
        },
        "test_hypermap_python": {
            "name": "test_hypermap_python",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_arithmetic_data_python": {
            "name": "test_arithmetic_data_python",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_partial_update": {
            "name": "test_partial_update",
            "location": 163,
            "return": [
                "flask.testing.FlaskClient"
            ],
            "arguments": {
                "pt": [
                    "tuple[typing.Union[int,int]]",
                    "rtv.extractors.common.Extractor",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_partial_update_binary": {
            "name": "test_partial_update_binary",
            "location": 168,
            "return": [
                "flask.testing.FlaskClient"
            ],
            "arguments": {
                "pt1": [
                    "tuple[typing.Union[int,int]]",
                    "rtv.extractors.common.Extractor",
                    "Tuple[int, int]"
                ],
                "pt2": [
                    "tuple[typing.Union[int,int]]",
                    "rtv.extractors.common.Extractor",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_bad_update": {
            "name": "test_bad_update",
            "location": 173,
            "return": [
                "flask.testing.FlaskClient"
            ],
            "arguments": {
                "pt": [
                    "tuple[typing.Union[int,int]]",
                    "rtv.extractors.common.Extractor",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_partial_update_python": {
            "name": "test_partial_update_python",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/operations/test_macro_dtype.py": {
        "test_dtype": {
            "name": "test_dtype",
            "location": 11,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cast_to_dtype": {
            "name": "test_cast_to_dtype",
            "location": 16,
            "return": [
                "lib.applications.Application",
                "float",
                "int"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "str",
                    "float"
                ],
                "x": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/operations/test_macro_einsum.py": {
        "test_einsum_view1d": {
            "name": "test_einsum_view1d",
            "location": 10,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_sum1d": {
            "name": "test_einsum_sum1d",
            "location": 15,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_elemwise1d": {
            "name": "test_einsum_elemwise1d",
            "location": 20,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_inner": {
            "name": "test_einsum_inner",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_outer": {
            "name": "test_einsum_outer",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_view2d": {
            "name": "test_einsum_view2d",
            "location": 35,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_transpose": {
            "name": "test_einsum_transpose",
            "location": 40,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_diag": {
            "name": "test_einsum_diag",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_trace": {
            "name": "test_einsum_trace",
            "location": 52,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_sum2d_0": {
            "name": "test_einsum_sum2d_0",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_sum2d_1": {
            "name": "test_einsum_sum2d_1",
            "location": 62,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_sum2d_01": {
            "name": "test_einsum_sum2d_01",
            "location": 67,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_einsum_elemwise2d": {
            "name": "test_einsum_elemwise2d",
            "location": 72,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_elemwise2d_T": {
            "name": "test_einsum_elemwise2d_T",
            "location": 77,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_mm": {
            "name": "test_einsum_mm",
            "location": 87,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_inner2d": {
            "name": "test_einsum_inner2d",
            "location": 92,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_rowmul": {
            "name": "test_einsum_rowmul",
            "location": 97,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_einsum_outer2d": {
            "name": "test_einsum_outer2d",
            "location": 102,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "b": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        }
    },
    "myia-master/tests/operations/test_operations.py": {
        "Shp": {
            "name": "Shp",
            "location": 22,
            "return": [
                "tuple[]",
                "Union[List[str], str]",
                "str"
            ],
            "arguments": {}
        },
        "test_bitwise_and": {
            "name": "test_bitwise_and",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bitwise_or": {
            "name": "test_bitwise_or",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bitwise_xor": {
            "name": "test_bitwise_xor",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bitwise_lshift": {
            "name": "test_bitwise_lshift",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bitwise_rshift": {
            "name": "test_bitwise_rshift",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_bitwise_not": {
            "name": "test_bitwise_not",
            "location": 85,
            "return": [
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "dict"
                ]
            }
        },
        "test_sin": {
            "name": "test_sin",
            "location": 98,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_cos": {
            "name": "test_cos",
            "location": 111,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_tan": {
            "name": "test_tan",
            "location": 124,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_trunc": {
            "name": "test_trunc",
            "location": 135,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_elemwise_sin": {
            "name": "test_elemwise_sin",
            "location": 144,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_elemwise_cos": {
            "name": "test_elemwise_cos",
            "location": 153,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_elemwise_tan": {
            "name": "test_elemwise_tan",
            "location": 162,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_elemwise_trunc": {
            "name": "test_elemwise_trunc",
            "location": 170,
            "return": [
                "float",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "test_prod": {
            "name": "test_prod",
            "location": 181,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "float"
                ]
            }
        },
        "test_full": {
            "name": "test_full",
            "location": 192,
            "return": [
                "common.ScanLoadFn",
                "bool"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "dtype": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_infer_full": {
            "name": "test_infer_full",
            "location": 218,
            "return": [
                "common.ScanLoadFn",
                "bool"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "dtype": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_infer_scalar_cast": {
            "name": "test_infer_scalar_cast",
            "location": 240,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "dtype": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "set",
                    "None",
                    "set[]"
                ],
                "value": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "set",
                    "None",
                    "set[]"
                ]
            }
        },
        "test_scalar_cast": {
            "name": "test_scalar_cast",
            "location": 291,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "dtype": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "set",
                    "None",
                    "set[]"
                ],
                "value": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "set",
                    "None",
                    "set[]"
                ]
            }
        },
        "test_tuple_getitem": {
            "name": "test_tuple_getitem",
            "location": 302,
            "return": [
                "dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "t": [
                    "list[dict[str, str]]",
                    "int",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]",
                    "Optional[float]"
                ],
                "i": [
                    "int",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]",
                    "Optional[float]"
                ]
            }
        },
        "test_tuple_setitem": {
            "name": "test_tuple_setitem",
            "location": 313,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "t": [],
                "i": [],
                "v": []
            }
        }
    },
    "myia-master/tests/operations/test_ops_dunder.py": {
        "test_dunder_pow": {
            "name": "test_dunder_pow",
            "location": 61,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_dunder_comparisons": {
            "name": "test_dunder_comparisons",
            "location": 70,
            "return": [
                "tuple[bool]",
                "common.ScanLoadFn",
                "Iterable[Any]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 95,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]"
                ]
            }
        },
        "test_add1": {
            "name": "test_add1",
            "location": 104,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "Dict[str, str]",
                    "Callable",
                    "Iterable[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "_add": {
            "name": "_add",
            "location": 108,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_add1_indirect": {
            "name": "test_add1_indirect",
            "location": 113,
            "return": [
                "Callable",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "dict[, ]",
                    "dict",
                    "bool",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "_interference_helper": {
            "name": "_interference_helper",
            "location": 117,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_add1_hastype_interference": {
            "name": "test_add1_hastype_interference",
            "location": 125,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "dict[, ]",
                    "dict",
                    "bool",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "Foo.__pow__": {
            "name": "__pow__",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Foo.__rpow__": {
            "name": "__rpow__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Foo.__lt__": {
            "name": "__lt__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Foo.__le__": {
            "name": "__le__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Foo.__gt__": {
            "name": "__gt__",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Foo.__ge__": {
            "name": "__ge__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Doo.__pow__": {
            "name": "__pow__",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Doo.__rpow__": {
            "name": "__rpow__",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        }
    },
    "myia-master/tests/operations/test_raise_assert.py": {
        "test_assert": {
            "name": "test_assert",
            "location": 18,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_assert_msg": {
            "name": "test_assert_msg",
            "location": 28,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_raise": {
            "name": "test_raise",
            "location": 39,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_raise_unconditional": {
            "name": "test_raise_unconditional",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_raise_multiple": {
            "name": "test_raise_multiple",
            "location": 52,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_raise_hastype": {
            "name": "test_raise_hastype",
            "location": 66,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_raise_loop": {
            "name": "test_raise_loop",
            "location": 74,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_raise_rec": {
            "name": "test_raise_rec",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_raise_rec.f": {
            "name": "f",
            "location": 84,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "T",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "myia-master/tests/operations/test_universe.py": {
        "test_make_handle": {
            "name": "test_make_handle",
            "location": 17,
            "return": [],
            "arguments": {
                "U": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "x": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_universe_getitem": {
            "name": "test_universe_getitem",
            "location": 26,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "U": [
                    "str",
                    "float"
                ],
                "h": [
                    "str",
                    "float"
                ]
            }
        },
        "test_universe_setitem": {
            "name": "test_universe_setitem",
            "location": 36,
            "return": [
                "common.ScanLoadFn"
            ],
            "arguments": {
                "U": [
                    "str"
                ],
                "h": [
                    "str"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "_test_universe_chk": {
            "name": "_test_universe_chk",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "U": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_universe": {
            "name": "test_universe",
            "location": 51,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "U": [
                    "bool",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "tuple[int]"
                ],
                "h": [
                    "bool",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "tuple[int]"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ]
            }
        },
        "test_universe_commit": {
            "name": "test_universe_commit",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/operations/__init__.py": {},
    "myia-master/tests/opt/test_lib.py": {
        "test_getitem_tuple_elem0": {
            "name": "test_getitem_tuple_elem0",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_tuple_elem3": {
            "name": "test_getitem_tuple_elem3",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_tuple_noopt": {
            "name": "test_getitem_tuple_noopt",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_setitem_tuple_elem0": {
            "name": "test_setitem_tuple_elem0",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_setitem_tuple_elem3": {
            "name": "test_setitem_tuple_elem3",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_setitem_tuple": {
            "name": "test_getitem_setitem_tuple",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_setitem_tuple_2": {
            "name": "test_getitem_setitem_tuple_2",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_setitem_tuple_noopt": {
            "name": "test_setitem_tuple_noopt",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_op_tuple_binary": {
            "name": "test_op_tuple_binary",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_newenv": {
            "name": "test_getitem_newenv",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env_get_set": {
            "name": "test_env_get_set",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env_get_add": {
            "name": "test_env_get_add",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_mul_zero": {
            "name": "test_mul_zero",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_mul_one": {
            "name": "test_mul_one",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_zero": {
            "name": "test_add_zero",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim_identity": {
            "name": "test_elim_identity",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim_stop_gradient": {
            "name": "test_elim_stop_gradient",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim_distribute": {
            "name": "test_elim_distribute",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim_transpose": {
            "name": "test_elim_transpose",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim_array_reduce": {
            "name": "test_elim_array_reduce",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map": {
            "name": "test_simplify_array_map",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map_2": {
            "name": "test_simplify_array_map_2",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map_3": {
            "name": "test_simplify_array_map_3",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map_4": {
            "name": "test_simplify_array_map_4",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map_5": {
            "name": "test_simplify_array_map_5",
            "location": 378,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simplify_array_map_6": {
            "name": "test_simplify_array_map_6",
            "location": 402,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unfuse_composite_constant": {
            "name": "test_unfuse_composite_constant",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_true_branch": {
            "name": "test_true_branch",
            "location": 442,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_false_branch": {
            "name": "test_false_branch",
            "location": 457,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_true_branch_switch": {
            "name": "test_true_branch_switch",
            "location": 472,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_false_branch_switch": {
            "name": "test_false_branch_switch",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_nested_switch_same_cond": {
            "name": "test_nested_switch_same_cond",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_nested_switch_diff_cond": {
            "name": "test_nested_switch_diff_cond",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_switch_same_branch": {
            "name": "test_switch_same_branch",
            "location": 513,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_combine_switch": {
            "name": "test_combine_switch",
            "location": 524,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_float_tuple_getitem_through_switch": {
            "name": "test_float_tuple_getitem_through_switch",
            "location": 537,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_float_env_getitem_through_switch": {
            "name": "test_float_env_getitem_through_switch",
            "location": 547,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_partials": {
            "name": "test_partials",
            "location": 565,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline": {
            "name": "test_inline",
            "location": 583,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_successively": {
            "name": "test_inline_successively",
            "location": 596,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_closure": {
            "name": "test_inline_closure",
            "location": 615,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_deep_closure": {
            "name": "test_inline_deep_closure",
            "location": 631,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_new_closure": {
            "name": "test_inline_new_closure",
            "location": 654,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_recursive_direct": {
            "name": "test_inline_recursive_direct",
            "location": 676,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_recursive": {
            "name": "test_inline_recursive",
            "location": 693,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_criterion": {
            "name": "test_inline_criterion",
            "location": 703,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_trivial": {
            "name": "test_inline_trivial",
            "location": 726,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_nontrivial_through_fv": {
            "name": "test_inline_nontrivial_through_fv",
            "location": 742,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_unique_uses": {
            "name": "test_inline_unique_uses",
            "location": 773,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_unique_uses_2": {
            "name": "test_inline_unique_uses_2",
            "location": 789,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inline_unique_uses_recursive": {
            "name": "test_inline_unique_uses_recursive",
            "location": 808,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_replace_applicator": {
            "name": "test_replace_applicator",
            "location": 818,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_replace_applicator_2": {
            "name": "test_replace_applicator_2",
            "location": 847,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_specialize_on_graph_arguments": {
            "name": "test_specialize_on_graph_arguments",
            "location": 867,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_getitem": {
            "name": "test_incorporate_getitem",
            "location": 891,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_getitem_2": {
            "name": "test_incorporate_getitem_2",
            "location": 912,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_getitem_through_switch": {
            "name": "test_incorporate_getitem_through_switch",
            "location": 933,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_env_getitem": {
            "name": "test_incorporate_env_getitem",
            "location": 960,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_env_getitem_2": {
            "name": "test_incorporate_env_getitem_2",
            "location": 985,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_env_getitem_through_switch": {
            "name": "test_incorporate_env_getitem_through_switch",
            "location": 1007,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_call": {
            "name": "test_incorporate_call",
            "location": 1037,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_incorporate_call_through_switch": {
            "name": "test_incorporate_call_through_switch",
            "location": 1064,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_opt_repr": {
            "name": "test_opt_repr",
            "location": 1105,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getitem_tuple_elem0.before": {
            "name": "before",
            "location": 36,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_getitem_tuple_elem0.after": {
            "name": "after",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_getitem_tuple_elem3.before": {
            "name": "before",
            "location": 47,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_getitem_tuple_elem3.after": {
            "name": "after",
            "location": 51,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_getitem_tuple_noopt.before": {
            "name": "before",
            "location": 58,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_setitem_tuple_elem0.before": {
            "name": "before",
            "location": 66,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_setitem_tuple_elem0.after": {
            "name": "after",
            "location": 70,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_setitem_tuple_elem3.before": {
            "name": "before",
            "location": 78,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_setitem_tuple_elem3.after": {
            "name": "after",
            "location": 82,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_getitem_setitem_tuple.before": {
            "name": "before",
            "location": 90,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_getitem_setitem_tuple.after": {
            "name": "after",
            "location": 94,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_getitem_setitem_tuple_2.before": {
            "name": "before",
            "location": 101,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_getitem_setitem_tuple_2.after": {
            "name": "after",
            "location": 105,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_setitem_tuple_noopt.before": {
            "name": "before",
            "location": 113,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_op_tuple_binary.before": {
            "name": "before",
            "location": 121,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_op_tuple_binary.after": {
            "name": "after",
            "location": 124,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_getitem_newenv.before": {
            "name": "before",
            "location": 136,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_getitem_newenv.after": {
            "name": "after",
            "location": 139,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_env_get_set.before": {
            "name": "before",
            "location": 148,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_env_get_set.after": {
            "name": "after",
            "location": 154,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_env_get_add.before": {
            "name": "before",
            "location": 166,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_env_get_add.after": {
            "name": "after",
            "location": 175,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_mul_zero.before1": {
            "name": "before1",
            "location": 194,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mul_zero.before2": {
            "name": "before2",
            "location": 197,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mul_zero.after": {
            "name": "after",
            "location": 200,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mul_one.before1": {
            "name": "before1",
            "location": 209,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mul_one.before2": {
            "name": "before2",
            "location": 212,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_mul_one.after": {
            "name": "after",
            "location": 215,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_add_zero.before1": {
            "name": "before1",
            "location": 224,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_add_zero.before2": {
            "name": "before2",
            "location": 227,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_add_zero.after": {
            "name": "after",
            "location": 230,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_identity.before": {
            "name": "before",
            "location": 239,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_elim_identity.after": {
            "name": "after",
            "location": 242,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_elim_stop_gradient.before": {
            "name": "before",
            "location": 249,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_elim_stop_gradient.after": {
            "name": "after",
            "location": 252,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_elim_distribute.before": {
            "name": "before",
            "location": 264,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_distribute.after": {
            "name": "after",
            "location": 267,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_transpose.before1": {
            "name": "before1",
            "location": 276,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_transpose.before2": {
            "name": "before2",
            "location": 279,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_transpose.before3": {
            "name": "before3",
            "location": 284,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_transpose.after": {
            "name": "after",
            "location": 287,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_array_reduce.before": {
            "name": "before",
            "location": 310,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim_array_reduce.after": {
            "name": "after",
            "location": 313,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simplify_array_map.before": {
            "name": "before",
            "location": 322,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_simplify_array_map.after": {
            "name": "after",
            "location": 328,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_simplify_array_map_2.before": {
            "name": "before",
            "location": 335,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_simplify_array_map_2.after": {
            "name": "after",
            "location": 341,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_simplify_array_map_3.before": {
            "name": "before",
            "location": 348,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": []
            }
        },
        "test_simplify_array_map_4.before": {
            "name": "before",
            "location": 360,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "test_simplify_array_map_4.after": {
            "name": "after",
            "location": 366,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "test_simplify_array_map_5.before": {
            "name": "before",
            "location": 379,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": [],
                "z": []
            }
        },
        "test_simplify_array_map_5.after": {
            "name": "after",
            "location": 388,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": [],
                "z": []
            }
        },
        "test_simplify_array_map_6.before": {
            "name": "before",
            "location": 403,
            "return": [],
            "arguments": {
                "xs": [],
                "ys": [],
                "z": []
            }
        },
        "test_unfuse_composite_constant.before": {
            "name": "before",
            "location": 418,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_unfuse_composite_constant.after": {
            "name": "after",
            "location": 424,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_true_branch.before": {
            "name": "before",
            "location": 443,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_true_branch.after": {
            "name": "after",
            "location": 449,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_false_branch.before": {
            "name": "before",
            "location": 458,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_false_branch.after": {
            "name": "after",
            "location": 464,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_true_branch_switch.before": {
            "name": "before",
            "location": 473,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_true_branch_switch.after": {
            "name": "after",
            "location": 476,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_false_branch_switch.before": {
            "name": "before",
            "location": 483,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_false_branch_switch.after": {
            "name": "after",
            "location": 486,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_nested_switch_same_cond.before": {
            "name": "before",
            "location": 493,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_nested_switch_same_cond.after": {
            "name": "after",
            "location": 497,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_nested_switch_diff_cond.before": {
            "name": "before",
            "location": 505,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_switch_same_branch.before": {
            "name": "before",
            "location": 514,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_switch_same_branch.after": {
            "name": "after",
            "location": 518,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_combine_switch.before": {
            "name": "before",
            "location": 525,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_combine_switch.after": {
            "name": "after",
            "location": 531,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_float_tuple_getitem_through_switch.before": {
            "name": "before",
            "location": 538,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_float_tuple_getitem_through_switch.after": {
            "name": "after",
            "location": 541,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_float_env_getitem_through_switch.before": {
            "name": "before",
            "location": 548,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_float_env_getitem_through_switch.after": {
            "name": "after",
            "location": 551,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_partials.f": {
            "name": "f",
            "location": 566,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_partials.before": {
            "name": "before",
            "location": 569,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_partials.after": {
            "name": "after",
            "location": 572,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_inline.f": {
            "name": "f",
            "location": 584,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_inline.before": {
            "name": "before",
            "location": 587,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline.after": {
            "name": "after",
            "location": 590,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline_successively.one": {
            "name": "one",
            "location": 597,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_successively.two": {
            "name": "two",
            "location": 600,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_successively.three": {
            "name": "three",
            "location": 603,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_successively.before": {
            "name": "before",
            "location": 606,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_successively.after": {
            "name": "after",
            "location": 609,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_closure.before": {
            "name": "before",
            "location": 616,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline_closure.after": {
            "name": "after",
            "location": 624,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline_deep_closure.f": {
            "name": "f",
            "location": 632,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_deep_closure.before": {
            "name": "before",
            "location": 643,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_inline_deep_closure.after": {
            "name": "after",
            "location": 646,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_inline_new_closure.q": {
            "name": "q",
            "location": 655,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_new_closure.f": {
            "name": "f",
            "location": 658,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_new_closure.before": {
            "name": "before",
            "location": 664,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_new_closure.after": {
            "name": "after",
            "location": 667,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_recursive_direct.before1": {
            "name": "before1",
            "location": 679,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_recursive_direct.helper2": {
            "name": "helper2",
            "location": 682,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "test_inline_recursive_direct.before2": {
            "name": "before2",
            "location": 685,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_recursive.before": {
            "name": "before",
            "location": 694,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_criterion.bin": {
            "name": "bin",
            "location": 711,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_inline_criterion.un": {
            "name": "un",
            "location": 714,
            "return": [
                "int",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_inline_criterion.before": {
            "name": "before",
            "location": 717,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline_criterion.after": {
            "name": "after",
            "location": 720,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_inline_trivial.trivial": {
            "name": "trivial",
            "location": 727,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_trivial.nontrivial": {
            "name": "nontrivial",
            "location": 730,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_trivial.before": {
            "name": "before",
            "location": 733,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_trivial.after": {
            "name": "after",
            "location": 736,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_nontrivial_through_fv.nontrivial": {
            "name": "nontrivial",
            "location": 743,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_inline_nontrivial_through_fv.before": {
            "name": "before",
            "location": 751,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_inline_nontrivial_through_fv.after_all_inline": {
            "name": "after_all_inline",
            "location": 754,
            "return": [
                "tuple[]",
                "int",
                "str",
                "Set[str]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool"
                ],
                "y": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_inline_unique_uses.one": {
            "name": "one",
            "location": 774,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_unique_uses.two": {
            "name": "two",
            "location": 777,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_unique_uses.before": {
            "name": "before",
            "location": 780,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_unique_uses.after": {
            "name": "after",
            "location": 783,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_unique_uses_2.f": {
            "name": "f",
            "location": 790,
            "return": [
                "List[int]",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "test_inline_unique_uses_2.g": {
            "name": "g",
            "location": 793,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_unique_uses_2.h": {
            "name": "h",
            "location": 796,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_inline_unique_uses_2.before": {
            "name": "before",
            "location": 799,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_unique_uses_2.after": {
            "name": "after",
            "location": 802,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_unique_uses_recursive.helper": {
            "name": "helper",
            "location": 809,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_unique_uses_recursive.before": {
            "name": "before",
            "location": 812,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_replace_applicator.app1": {
            "name": "app1",
            "location": 819,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "Callable[[T], bool]",
                    "int",
                    "Callable[[int], bool]",
                    "Callable",
                    "Union[int, float]"
                ],
                "y": [
                    "Callable[[T], bool]",
                    "int",
                    "Callable[[int], bool]",
                    "Callable",
                    "Union[int, float]"
                ]
            }
        },
        "test_replace_applicator.app2": {
            "name": "app2",
            "location": 822,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "Tuple[int]",
                    "Match",
                    "bool"
                ],
                "y": [
                    "int",
                    "Tuple[int]",
                    "Match",
                    "bool"
                ]
            }
        },
        "test_replace_applicator.app3": {
            "name": "app3",
            "location": 825,
            "return": [
                "common.ScanLoadFn",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "List[str]",
                    "int"
                ],
                "y": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_replace_applicator.before1": {
            "name": "before1",
            "location": 828,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_replace_applicator.before2": {
            "name": "before2",
            "location": 831,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_replace_applicator.before3": {
            "name": "before3",
            "location": 834,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_replace_applicator.after": {
            "name": "after",
            "location": 837,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_replace_applicator_2.before": {
            "name": "before",
            "location": 848,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_specialize_on_graph_arguments.square": {
            "name": "square",
            "location": 868,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_specialize_on_graph_arguments.before": {
            "name": "before",
            "location": 871,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_specialize_on_graph_arguments.after": {
            "name": "after",
            "location": 877,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem.before": {
            "name": "before",
            "location": 892,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem.after": {
            "name": "after",
            "location": 898,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_2.before": {
            "name": "before",
            "location": 913,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_2.after": {
            "name": "after",
            "location": 919,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.before": {
            "name": "before",
            "location": 934,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.after": {
            "name": "after",
            "location": 943,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem.before": {
            "name": "before",
            "location": 961,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem.after": {
            "name": "after",
            "location": 969,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_2.before": {
            "name": "before",
            "location": 986,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_2.after": {
            "name": "after",
            "location": 992,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_through_switch.before": {
            "name": "before",
            "location": 1008,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_through_switch.after": {
            "name": "after",
            "location": 1019,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_call.b_help": {
            "name": "b_help",
            "location": 1038,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "test_incorporate_call.before": {
            "name": "before",
            "location": 1044,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_call.after": {
            "name": "after",
            "location": 1047,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_call_through_switch.before_helper": {
            "name": "before_helper",
            "location": 1065,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "List[List[str]]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_incorporate_call_through_switch.before": {
            "name": "before",
            "location": 1071,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ],
                "z": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ]
            }
        },
        "test_incorporate_call_through_switch.after": {
            "name": "after",
            "location": 1074,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ],
                "z": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "nevergrad.common.ArrayLike"
                ]
            }
        },
        "test_simplify_array_map.before.f": {
            "name": "f",
            "location": 323,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_simplify_array_map_2.before.f": {
            "name": "f",
            "location": 336,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_simplify_array_map_3.before.f": {
            "name": "f",
            "location": 349,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_simplify_array_map_4.before.f": {
            "name": "f",
            "location": 361,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simplify_array_map_5.before.g": {
            "name": "g",
            "location": 380,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simplify_array_map_5.before.f": {
            "name": "f",
            "location": 383,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_simplify_array_map_5.after.g": {
            "name": "g",
            "location": 389,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simplify_array_map_5.after.f": {
            "name": "f",
            "location": 392,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_simplify_array_map_6.before.f": {
            "name": "f",
            "location": 404,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_unfuse_composite_constant.before.p1": {
            "name": "p1",
            "location": 419,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_unfuse_composite_constant.after.up1": {
            "name": "up1",
            "location": 425,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "x2": [
                    "float",
                    "int"
                ]
            }
        },
        "test_inline_closure.before.f": {
            "name": "f",
            "location": 619,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_deep_closure.f.g": {
            "name": "g",
            "location": 635,
            "return": [],
            "arguments": {}
        },
        "test_inline_new_closure.f.g": {
            "name": "g",
            "location": 659,
            "return": [],
            "arguments": {}
        },
        "test_inline_new_closure.after.g": {
            "name": "g",
            "location": 668,
            "return": [],
            "arguments": {}
        },
        "test_inline_nontrivial_through_fv.nontrivial.g": {
            "name": "g",
            "location": 746,
            "return": [],
            "arguments": {}
        },
        "test_inline_nontrivial_through_fv.after_all_inline.g1": {
            "name": "g1",
            "location": 758,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_inline_nontrivial_through_fv.after_all_inline.g2": {
            "name": "g2",
            "location": 761,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_replace_applicator_2.before.app": {
            "name": "app",
            "location": 849,
            "return": [
                "common.ScanLoadFn",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Tuple[int]",
                    "bool"
                ],
                "y": [
                    "int",
                    "Tuple[int]",
                    "bool"
                ]
            }
        },
        "test_specialize_on_graph_arguments.before.helper": {
            "name": "helper",
            "location": 872,
            "return": [],
            "arguments": {
                "f": [],
                "x": [],
                "g": [],
                "y": []
            }
        },
        "test_specialize_on_graph_arguments.after.helper": {
            "name": "helper",
            "location": 878,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_incorporate_getitem.before.b_help": {
            "name": "b_help",
            "location": 893,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem.after.a_help": {
            "name": "a_help",
            "location": 899,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_2.before.b_help": {
            "name": "b_help",
            "location": 914,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_2.after.a_help": {
            "name": "a_help",
            "location": 920,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.before.f1": {
            "name": "f1",
            "location": 935,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.before.f2": {
            "name": "f2",
            "location": 938,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.after.f1": {
            "name": "f1",
            "location": 944,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_getitem_through_switch.after.f2": {
            "name": "f2",
            "location": 947,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem.before.b_help": {
            "name": "b_help",
            "location": 964,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem.after.a_help": {
            "name": "a_help",
            "location": 970,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_2.before.b_help": {
            "name": "b_help",
            "location": 987,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_2.after.a_help": {
            "name": "a_help",
            "location": 993,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_through_switch.before.f1": {
            "name": "f1",
            "location": 1011,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_through_switch.before.f2": {
            "name": "f2",
            "location": 1014,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_incorporate_env_getitem_through_switch.after.f1": {
            "name": "f1",
            "location": 1020,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_incorporate_env_getitem_through_switch.after.f2": {
            "name": "f2",
            "location": 1023,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_incorporate_call.b_help.subf": {
            "name": "subf",
            "location": 1039,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_incorporate_call.after.a_help": {
            "name": "a_help",
            "location": 1048,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "q": [
                    "Dict[str, int]",
                    "bool"
                ],
                "y": [
                    "Callable",
                    "Union[int, float]",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "str",
                    "Iterator"
                ]
            }
        },
        "test_incorporate_call_through_switch.after.after_helper": {
            "name": "after_helper",
            "location": 1075,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_simplify_array_map_6.before.f.g": {
            "name": "g",
            "location": 405,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_inline_deep_closure.f.g.h": {
            "name": "h",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "test_replace_applicator_2.before.app.inner": {
            "name": "inner",
            "location": 852,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_incorporate_call.after.a_help.subf": {
            "name": "subf",
            "location": 1049,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_incorporate_call_through_switch.after.after_helper.tb": {
            "name": "tb",
            "location": 1076,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "BaseException"
                ],
                "z": [
                    "BaseException"
                ]
            }
        },
        "test_incorporate_call_through_switch.after.after_helper.fb": {
            "name": "fb",
            "location": 1079,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "y": [
                    "BaseException"
                ],
                "z": [
                    "BaseException"
                ]
            }
        }
    },
    "myia-master/tests/opt/test_opt.py": {
        "_check_transform": {
            "name": "_check_transform",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "before": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "after": [
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ],
                "transform": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "argspec": [
                    "Optional[complex]",
                    "None",
                    "complex"
                ],
                "argspec_after": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_check_opt": {
            "name": "_check_opt",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "before": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "after": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "test_checkopt_is_cloning": {
            "name": "test_checkopt_is_cloning",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sexp_conversion": {
            "name": "test_sexp_conversion",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_elim": {
            "name": "test_elim",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_idempotent_after": {
            "name": "_idempotent_after",
            "location": 128,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_idempotent": {
            "name": "test_idempotent",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_idempotent_multi": {
            "name": "test_idempotent_multi",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_idempotent_and_elim": {
            "name": "test_idempotent_and_elim",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_zero": {
            "name": "test_multiply_zero",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_add_elim_zero": {
            "name": "test_multiply_add_elim_zero",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_replace_twice": {
            "name": "test_replace_twice",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_revisit": {
            "name": "test_revisit",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multi_function": {
            "name": "test_multi_function",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_closure": {
            "name": "test_closure",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_closure_2": {
            "name": "test_closure_2",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fn_replacement": {
            "name": "test_fn_replacement",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_constant_variable": {
            "name": "test_constant_variable",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cse": {
            "name": "test_cse",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_type_tracking": {
            "name": "test_type_tracking",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_type_tracking_2": {
            "name": "test_type_tracking_2",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_checkopt_is_cloning.before": {
            "name": "before",
            "location": 98,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_sexp_conversion.f": {
            "name": "f",
            "location": 108,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_elim.before": {
            "name": "before",
            "location": 119,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_elim.after": {
            "name": "after",
            "location": 122,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_idempotent.before": {
            "name": "before",
            "location": 133,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_idempotent_multi.before": {
            "name": "before",
            "location": 140,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_idempotent_and_elim.before": {
            "name": "before",
            "location": 147,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiply_zero.before": {
            "name": "before",
            "location": 154,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiply_zero.after": {
            "name": "after",
            "location": 157,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multiply_add_elim_zero.before": {
            "name": "before",
            "location": 164,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_multiply_add_elim_zero.after": {
            "name": "after",
            "location": 167,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_replace_twice.before": {
            "name": "before",
            "location": 174,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_replace_twice.after": {
            "name": "after",
            "location": 177,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_revisit.before": {
            "name": "before",
            "location": 184,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_revisit.after": {
            "name": "after",
            "location": 187,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multi_function.before_helper": {
            "name": "before_helper",
            "location": 194,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ]
            }
        },
        "test_multi_function.before": {
            "name": "before",
            "location": 197,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_multi_function.after_helper": {
            "name": "after_helper",
            "location": 200,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_multi_function.after": {
            "name": "after",
            "location": 203,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure.before": {
            "name": "before",
            "location": 210,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure.after": {
            "name": "after",
            "location": 218,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure_2.before": {
            "name": "before",
            "location": 228,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_closure_2.after": {
            "name": "after",
            "location": 237,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn_replacement.before": {
            "name": "before",
            "location": 247,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn_replacement.after": {
            "name": "after",
            "location": 250,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_fn_replacement.elim_QPs": {
            "name": "elim_QPs",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "optimizer": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "node": [
                    "List[str]",
                    "str",
                    "purplship.core.utils.Element",
                    "List[int]"
                ],
                "equiv": [
                    "dict"
                ]
            }
        },
        "test_constant_variable.before": {
            "name": "before",
            "location": 265,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_constant_variable.after": {
            "name": "after",
            "location": 268,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_cse.helper": {
            "name": "helper",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bytes",
                    "list"
                ],
                "before": [
                    "Callable"
                ],
                "after": [
                    "Callable"
                ]
            }
        },
        "test_cse.f1": {
            "name": "f1",
            "location": 284,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Iterable[str]]",
                "list",
                "Optional[int]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ]
            }
        },
        "test_cse.f2": {
            "name": "f2",
            "location": 292,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "Union[Dict, str]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_type_tracking.fn_ok1": {
            "name": "fn_ok1",
            "location": 324,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_type_tracking.fn_ok2": {
            "name": "fn_ok2",
            "location": 329,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "nevergrad.common.ArrayLike",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_type_tracking.fn_err1": {
            "name": "fn_err1",
            "location": 334,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_type_tracking_2.fn_err3": {
            "name": "fn_err3",
            "location": 359,
            "return": [
                "utils.Node",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        },
        "test_closure.before.sub": {
            "name": "sub",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_closure.after.sub": {
            "name": "sub",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_closure_2.before.sub": {
            "name": "sub",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_closure_2.after.sub": {
            "name": "sub",
            "location": 238,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/opt/test_rewrite.py": {
        "step_rmunused": {
            "name": "step_rmunused",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "resources": [
                    "str",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "test_rmunused_simple": {
            "name": "test_rmunused_simple",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_cascade": {
            "name": "test_rmunused_cascade",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_middle": {
            "name": "test_rmunused_middle",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_switch": {
            "name": "test_rmunused_switch",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_switch_mustkeep": {
            "name": "test_rmunused_switch_mustkeep",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_switch_drop_one": {
            "name": "test_rmunused_switch_drop_one",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_switch_edge_case": {
            "name": "test_rmunused_switch_edge_case",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lambda_lift_simple": {
            "name": "test_lambda_lift_simple",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lambda_lift_nested": {
            "name": "test_lambda_lift_nested",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lambda_lift_chain": {
            "name": "test_lambda_lift_chain",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lambda_change_nesting": {
            "name": "test_lambda_change_nesting",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cannot_lambda_lift": {
            "name": "test_cannot_lambda_lift",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lift_switch": {
            "name": "test_lift_switch",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lift_switch2": {
            "name": "test_lift_switch2",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rmunused_simple.f1": {
            "name": "f1",
            "location": 24,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_simple.f2": {
            "name": "f2",
            "location": 31,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_cascade.f1": {
            "name": "f1",
            "location": 42,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_cascade.f2": {
            "name": "f2",
            "location": 52,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_middle.f1": {
            "name": "f1",
            "location": 66,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_middle.f2": {
            "name": "f2",
            "location": 73,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch.f1": {
            "name": "f1",
            "location": 84,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch.f2": {
            "name": "f2",
            "location": 94,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch_mustkeep.f1": {
            "name": "f1",
            "location": 108,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch_mustkeep.f2": {
            "name": "f2",
            "location": 118,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch_drop_one.f1": {
            "name": "f1",
            "location": 132,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch_drop_one.f2": {
            "name": "f2",
            "location": 142,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rmunused_switch_edge_case.f": {
            "name": "f",
            "location": 155,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_simple.f1": {
            "name": "f1",
            "location": 190,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_simple.f2": {
            "name": "f2",
            "location": 197,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_nested.f1": {
            "name": "f1",
            "location": 208,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_nested.f2": {
            "name": "f2",
            "location": 218,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_chain.f1": {
            "name": "f1",
            "location": 232,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_lift_chain.f2": {
            "name": "f2",
            "location": 242,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_lambda_change_nesting.f1": {
            "name": "f1",
            "location": 261,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_lambda_change_nesting.f2": {
            "name": "f2",
            "location": 274,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_cannot_lambda_lift.f": {
            "name": "f",
            "location": 292,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "Iterable",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "y": [
                    "Iterable",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "test_lift_switch.f1": {
            "name": "f1",
            "location": 310,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_lift_switch.f2": {
            "name": "f2",
            "location": 317,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_lift_switch2.f1": {
            "name": "f1",
            "location": 331,
            "return": [
                "bytes",
                "float",
                "bool",
                "bytearray",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[float, int]",
                    "str",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ],
                "z": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_lift_switch2.f2": {
            "name": "f2",
            "location": 346,
            "return": [
                "int",
                "bytearray",
                "Tuple[int]",
                "list"
            ],
            "arguments": {
                "x": [
                    "Union[float, int]",
                    "str",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "y": [
                    "Optional[Union[int, float]]"
                ],
                "z": [
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "test_rmunused_simple.f1.g": {
            "name": "g",
            "location": 25,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_rmunused_simple.f2.g": {
            "name": "g",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_rmunused_cascade.f1.g": {
            "name": "g",
            "location": 43,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_rmunused_cascade.f1.h": {
            "name": "h",
            "location": 46,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_rmunused_cascade.f2.g": {
            "name": "g",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_rmunused_cascade.f2.h": {
            "name": "h",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_rmunused_middle.f1.g": {
            "name": "g",
            "location": 67,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_middle.f2.g": {
            "name": "g",
            "location": 74,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "test_rmunused_switch.f1.g": {
            "name": "g",
            "location": 85,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch.f1.h": {
            "name": "h",
            "location": 88,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch.f2.g": {
            "name": "g",
            "location": 95,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "test_rmunused_switch.f2.h": {
            "name": "h",
            "location": 98,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "test_rmunused_switch_mustkeep.f1.g": {
            "name": "g",
            "location": 109,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_mustkeep.f1.h": {
            "name": "h",
            "location": 112,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_mustkeep.f2.g": {
            "name": "g",
            "location": 119,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_mustkeep.f2.h": {
            "name": "h",
            "location": 122,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_drop_one.f1.g": {
            "name": "g",
            "location": 133,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_drop_one.f1.h": {
            "name": "h",
            "location": 136,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_drop_one.f2.g": {
            "name": "g",
            "location": 143,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "test_rmunused_switch_drop_one.f2.h": {
            "name": "h",
            "location": 146,
            "return": [],
            "arguments": {
                "a": [],
                "c": []
            }
        },
        "test_rmunused_switch_edge_case.f.g": {
            "name": "g",
            "location": 156,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_edge_case.f.h": {
            "name": "h",
            "location": 159,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_rmunused_switch_edge_case.f.hof": {
            "name": "hof",
            "location": 162,
            "return": [
                "Dict[str, int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_lambda_lift_simple.f1.g": {
            "name": "g",
            "location": 191,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_lambda_lift_simple.f2.g": {
            "name": "g",
            "location": 198,
            "return": [],
            "arguments": {
                "z": [],
                "_x": []
            }
        },
        "test_lambda_lift_nested.f1.g": {
            "name": "g",
            "location": 209,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_lambda_lift_nested.f2.g": {
            "name": "g",
            "location": 219,
            "return": [],
            "arguments": {
                "z": [],
                "_x": []
            }
        },
        "test_lambda_lift_chain.f1.g": {
            "name": "g",
            "location": 233,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "test_lambda_lift_chain.f1.h": {
            "name": "h",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_lambda_lift_chain.f2.g": {
            "name": "g",
            "location": 243,
            "return": [],
            "arguments": {
                "z": [],
                "_x": []
            }
        },
        "test_lambda_lift_chain.f2.h": {
            "name": "h",
            "location": 246,
            "return": [],
            "arguments": {
                "_y": [],
                "_x": []
            }
        },
        "test_lambda_change_nesting.f1.g": {
            "name": "g",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_lambda_change_nesting.f1.h": {
            "name": "h",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "test_lambda_change_nesting.f1.i": {
            "name": "i",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test_lambda_change_nesting.f2.i": {
            "name": "i",
            "location": 275,
            "return": [
                "int",
                "List[int]",
                "Iterable[int]"
            ],
            "arguments": {
                "_x": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_cannot_lambda_lift.f.g": {
            "name": "g",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_cannot_lambda_lift.f.h": {
            "name": "h",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "arg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_lift_switch.f2.true_branch": {
            "name": "true_branch",
            "location": 318,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "_y": [
                    "int",
                    "bool",
                    "IO[str]",
                    "List[str]",
                    "str",
                    "BaseException"
                ],
                "_z": [
                    "int",
                    "bool",
                    "IO[str]",
                    "List[str]",
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_lift_switch.f2.false_branch": {
            "name": "false_branch",
            "location": 321,
            "return": [
                "int",
                "Union[str, int, float]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "_y": [
                    "int",
                    "bool",
                    "Callable[[], T]"
                ],
                "_z": [
                    "int",
                    "bool",
                    "Callable[[], T]"
                ]
            }
        },
        "test_lift_switch2.f1.g1": {
            "name": "g1",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "test_lift_switch2.f1.g2": {
            "name": "g2",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "test_lift_switch2.f1.g3": {
            "name": "g3",
            "location": 338,
            "return": [],
            "arguments": {}
        },
        "test_lift_switch2.f2.g1": {
            "name": "g1",
            "location": 347,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_lift_switch2.f2.g2": {
            "name": "g2",
            "location": 350,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_lift_switch2.f2.g3": {
            "name": "g3",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_z": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_lambda_lift_nested.f1.g.h": {
            "name": "h",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_lambda_lift_nested.f2.g.h": {
            "name": "h",
            "location": 220,
            "return": [],
            "arguments": {
                "__x": [],
                "_z": []
            }
        },
        "test_lambda_change_nesting.f2.i.g": {
            "name": "g",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "test_lambda_change_nesting.f2.i.h": {
            "name": "h",
            "location": 279,
            "return": [],
            "arguments": {}
        }
    },
    "myia-master/tests/opt/__init__.py": {},
    "myia-master/tests/prim/test_py_implementations.py": {
        "test_prim_add": {
            "name": "test_prim_add",
            "location": 71,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Callable"
                ],
                "y": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_prim_sub": {
            "name": "test_prim_sub",
            "location": 76,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_mul": {
            "name": "test_prim_mul",
            "location": 81,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_truediv": {
            "name": "test_prim_truediv",
            "location": 86,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_floordiv": {
            "name": "test_prim_floordiv",
            "location": 97,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_mod": {
            "name": "test_prim_mod",
            "location": 102,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_pow": {
            "name": "test_prim_pow",
            "location": 107,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_floor": {
            "name": "test_prim_floor",
            "location": 112,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_max": {
            "name": "test_prim_max",
            "location": 117,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_prim_trunc": {
            "name": "test_prim_trunc",
            "location": 122,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_uadd": {
            "name": "test_prim_uadd",
            "location": 127,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_prim_usub": {
            "name": "test_prim_usub",
            "location": 132,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_prim_exp": {
            "name": "test_prim_exp",
            "location": 137,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_log": {
            "name": "test_prim_log",
            "location": 142,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "shape.Shape"
                ]
            }
        },
        "test_prim_sin": {
            "name": "test_prim_sin",
            "location": 147,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_cos": {
            "name": "test_prim_cos",
            "location": 152,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_tan": {
            "name": "test_prim_tan",
            "location": 157,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_tanh": {
            "name": "test_prim_tanh",
            "location": 162,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_eq": {
            "name": "test_prim_eq",
            "location": 167,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_lt": {
            "name": "test_prim_lt",
            "location": 172,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_gt": {
            "name": "test_prim_gt",
            "location": 177,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_ne": {
            "name": "test_prim_ne",
            "location": 182,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_le": {
            "name": "test_prim_le",
            "location": 187,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_ge": {
            "name": "test_prim_ge",
            "location": 192,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_not_": {
            "name": "test_prim_not_",
            "location": 197,
            "return": [
                "bool",
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_prim_tuple": {
            "name": "test_prim_tuple",
            "location": 202,
            "return": [
                "tuple[typing.Union[int,float]]",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_tuple_getitem": {
            "name": "test_prim_tuple_getitem",
            "location": 207,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "dict",
                    "tuple[]",
                    "numpy.ndarray",
                    "list[]",
                    "tuple",
                    "None",
                    "list",
                    "Optional[List[Any]]"
                ],
                "item": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "dict",
                    "tuple[]",
                    "numpy.ndarray",
                    "list[]",
                    "tuple",
                    "None",
                    "list",
                    "Optional[List[Any]]"
                ]
            }
        },
        "test_prim_array_getitem": {
            "name": "test_prim_array_getitem",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_bool_eq": {
            "name": "test_prim_bool_eq",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_tuple_setitem": {
            "name": "test_prim_tuple_setitem",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_setitem": {
            "name": "test_prim_array_setitem",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_shape": {
            "name": "test_prim_shape",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_map": {
            "name": "test_prim_array_map",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_map2": {
            "name": "test_prim_array_map2",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_scan": {
            "name": "test_prim_array_scan",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_reduce": {
            "name": "test_prim_array_reduce",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_distribute": {
            "name": "test_prim_distribute",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_reshape": {
            "name": "test_prim_reshape",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_transpose": {
            "name": "test_prim_transpose",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_dot": {
            "name": "test_prim_dot",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_op_full": {
            "name": "test_op_full",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_take": {
            "name": "test_prim_take",
            "location": 335,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_take_grad_inp": {
            "name": "test_prim_take_grad_inp",
            "location": 343,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_lshift": {
            "name": "test_prim_scalar_bit_lshift",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_rshift": {
            "name": "test_prim_scalar_bit_rshift",
            "location": 365,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_and": {
            "name": "test_prim_scalar_bit_and",
            "location": 371,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_or": {
            "name": "test_prim_scalar_bit_or",
            "location": 377,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_xor": {
            "name": "test_prim_scalar_bit_xor",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_bit_not": {
            "name": "test_prim_scalar_bit_not",
            "location": 389,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_partial": {
            "name": "test_prim_partial",
            "location": 398,
            "return": [
                "float",
                "numpy.ndarray",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_assert_scalar": {
            "name": "test_assert_scalar",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_identity": {
            "name": "test_prim_identity",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_stop_gradient": {
            "name": "test_prim_stop_gradient",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_switch": {
            "name": "test_prim_switch",
            "location": 429,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_to_array": {
            "name": "test_scalar_to_array",
            "location": 434,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_to_scalar": {
            "name": "test_array_to_scalar",
            "location": 443,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_broadcast_shape": {
            "name": "test_broadcast_shape",
            "location": 452,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_cast": {
            "name": "test_scalar_cast",
            "location": 477,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_cast": {
            "name": "test_array_cast",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_concat": {
            "name": "test_prim_concat",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_split": {
            "name": "test_prim_split",
            "location": 507,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_scalar_abs": {
            "name": "test_prim_scalar_abs",
            "location": 518,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_scalar_sign": {
            "name": "test_prim_scalar_sign",
            "location": 523,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_prim_unsafe_static_cast": {
            "name": "test_prim_unsafe_static_cast",
            "location": 527,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env": {
            "name": "test_env",
            "location": 531,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_call_operation": {
            "name": "test_call_operation",
            "location": 552,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_random": {
            "name": "test_random",
            "location": 562,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_prim_array_map.f": {
            "name": "f",
            "location": 241,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_prim_array_map2.f": {
            "name": "f",
            "location": 254,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_prim_array_scan.f": {
            "name": "f",
            "location": 267,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_prim_array_reduce.add": {
            "name": "add",
            "location": 278,
            "return": [
                "float",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_prim_partial.f": {
            "name": "f",
            "location": 399,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_env.f": {
            "name": "f",
            "location": 532,
            "return": [
                "bytes",
                "Tuple[str, List[str]]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "y": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/prim/__init__.py": {},
    "myia-master/tests/python_backend/test_frontend_compilation.py": {
        "test_argmax": {
            "name": "test_argmax",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_argmax.f": {
            "name": "f",
            "location": 17,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/python_backend/test_graph_compilation.py": {
        "_assert_match": {
            "name": "_assert_match",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "float",
                    "dict",
                    "MutableMapping"
                ],
                "given": [
                    "float",
                    "dict",
                    "MutableMapping"
                ],
                "rel": [
                    "float",
                    "str",
                    "dict",
                    "Dict[str, raiden.utils.Any]",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]"
                ]
            }
        },
        "parse_and_compile": {
            "name": "parse_and_compile",
            "location": 26,
            "return": [
                "str",
                "int",
                "list[]",
                "float",
                "Sequence",
                "List[str]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_grad_first_order": {
            "name": "test_grad_first_order",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_grad_two_args": {
            "name": "test_grad_two_args",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_value_and_grad_first_order": {
            "name": "test_value_and_grad_first_order",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_value_grad_two_args": {
            "name": "test_value_grad_two_args",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_rng": {
            "name": "test_rng",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_while": {
            "name": "test_while",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_iter_object": {
            "name": "test_iter_object",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_for_range": {
            "name": "test_for_range",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recursion": {
            "name": "test_recursion",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_function_call": {
            "name": "test_function_call",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inner_closure": {
            "name": "test_inner_closure",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_if": {
            "name": "test_if",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_two_external_functions_with_same_name": {
            "name": "test_two_external_functions_with_same_name",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cast": {
            "name": "test_cast",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_grad_with_dout": {
            "name": "test_grad_with_dout",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_for_loop_on_tuple": {
            "name": "test_for_loop_on_tuple",
            "location": 289,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_operators": {
            "name": "test_operators",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_grad_first_order.square": {
            "name": "square",
            "location": 35,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_grad_first_order.f": {
            "name": "f",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_grad_two_args.func": {
            "name": "func",
            "location": 46,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_two_args.f": {
            "name": "f",
            "location": 50,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_two_args.g": {
            "name": "g",
            "location": 54,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_two_args.h": {
            "name": "h",
            "location": 58,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_value_and_grad_first_order.square": {
            "name": "square",
            "location": 70,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_value_and_grad_first_order.f": {
            "name": "f",
            "location": 74,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_value_grad_two_args.func": {
            "name": "func",
            "location": 83,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_value_grad_two_args.f": {
            "name": "f",
            "location": 87,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_value_grad_two_args.g": {
            "name": "g",
            "location": 91,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_value_grad_two_args.h": {
            "name": "h",
            "location": 95,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_rng.f": {
            "name": "f",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_while.f": {
            "name": "f",
            "location": 127,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_iter_object.f": {
            "name": "f",
            "location": 156,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_for_range.f": {
            "name": "f",
            "location": 167,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_recursion.factorial": {
            "name": "factorial",
            "location": 181,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_function_call._pgcd": {
            "name": "_pgcd",
            "location": 196,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_function_call.pgcd": {
            "name": "pgcd",
            "location": 200,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_inner_closure.pgcd": {
            "name": "pgcd",
            "location": 209,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "bytearray",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Sequence[T]"
                ],
                "b": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "test_if.f": {
            "name": "f",
            "location": 221,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_simple.f": {
            "name": "f",
            "location": 234,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_two_external_functions_with_same_name.f1": {
            "name": "f1",
            "location": 242,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_two_external_functions_with_same_name.f2": {
            "name": "f2",
            "location": 245,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_two_external_functions_with_same_name.g": {
            "name": "g",
            "location": 252,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_cast.f": {
            "name": "f",
            "location": 260,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_grad_with_dout.f": {
            "name": "f",
            "location": 269,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grad_with_dout.g": {
            "name": "g",
            "location": 275,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "test_grad_with_dout.h": {
            "name": "h",
            "location": 279,
            "return": [
                "utils.Node",
                "Iterable[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "test_for_loop_on_tuple.f": {
            "name": "f",
            "location": 291,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "test_operators.f": {
            "name": "f",
            "location": 303,
            "return": [
                "bytes",
                "int",
                "Union[bytes, bytearray]",
                "bytearray",
                "str",
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "list"
                ],
                "b": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "list"
                ]
            }
        },
        "test_iter_object.HalfIterator.__myia_iter__": {
            "name": "__myia_iter__",
            "location": 146,
            "return": [
                "HalfIterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_iter_object.HalfIterator.__myia_hasnext__": {
            "name": "__myia_hasnext__",
            "location": 149,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_iter_object.HalfIterator.__myia_next__": {
            "name": "__myia_next__",
            "location": 152,
            "return": [
                "tuple[HalfIterator]",
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_inner_closure.pgcd._pgcd": {
            "name": "_pgcd",
            "location": 210,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ],
                "b": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "myia-master/tests/python_backend/test_python_debug.py": {
        "test_debug": {
            "name": "test_debug",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_debug.f": {
            "name": "f",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "bytearray",
                "Union[bytes, bytearray]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "Sequence[T]"
                ]
            }
        }
    },
    "myia-master/tests/python_backend/test_python_pdb.py": {
        "run_pdb": {
            "name": "run_pdb",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "return_cell": [
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "test_pdb": {
            "name": "test_pdb",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_pdb.f": {
            "name": "f",
            "location": 17,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "bool"
                ],
                "c": [
                    "int",
                    "Callable[[int], bool]"
                ],
                "d": [
                    "int",
                    "Callable[[int], bool]"
                ]
            }
        }
    },
    "myia-master/tests/python_backend/test_python_rng.py": {
        "_test_output": {
            "name": "_test_output",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "list",
                    "list[]",
                    "List[bool]",
                    "bool",
                    "list[bool]",
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_init_random_combined": {
            "name": "test_init_random_combined",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_separated": {
            "name": "test_init_random_separated",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_init_random_combined.fn": {
            "name": "fn",
            "location": 35,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "test_init_random_separated.init": {
            "name": "init",
            "location": 50,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_init_random_separated.gen_2_2": {
            "name": "gen_2_2",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_1": {
            "name": "gen_1",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        },
        "test_init_random_separated.gen_scalar": {
            "name": "gen_scalar",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[float]",
                    "numpy.ndarray",
                    "bytearray"
                ]
            }
        }
    },
    "myia-master/tests/utils/test_intern.py": {
        "test_interned": {
            "name": "test_interned",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "_test": {
            "name": "_test",
            "location": 64,
            "return": [
                "str",
                "float",
                "dict[str, int]",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "test_eqrec": {
            "name": "test_eqrec",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eqrec_incomplete": {
            "name": "test_eqrec_incomplete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_canonical": {
            "name": "test_canonical",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weakrefs": {
            "name": "test_weakrefs",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Point.__eqkey__": {
            "name": "__eqkey__",
            "location": 24,
            "return": [
                "myia.utils.intern.AttrEK"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thingy.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[T, Sequence[T]]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "typing.Sequence[T]",
                    "bytes",
                    "T",
                    "dict[str, typing.Any]",
                    "Optional[Union[str, Any]]",
                    "str",
                    "typing.Any",
                    "Optional[T]"
                ]
            }
        },
        "Thingy.set": {
            "name": "set",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Thingy.__eqkey__": {
            "name": "__eqkey__",
            "location": 39,
            "return": [
                "myia.utils.intern.AttrEK"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/tests/utils/test_merge.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_registry": {
            "name": "test_merge_registry",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_subclass": {
            "name": "test_merge_subclass",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_merge_modes": {
            "name": "test_merge_modes",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cleanup_subclass": {
            "name": "test_cleanup_subclass",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "myia-master/tests/utils/test_misc.py": {
        "test_named": {
            "name": "test_named",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_tags": {
            "name": "test_tags",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_sum": {
            "name": "_sum",
            "location": 32,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_smap": {
            "name": "test_smap",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_smap_failures": {
            "name": "test_smap_failures",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_event": {
            "name": "test_event",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_history": {
            "name": "test_history",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_events": {
            "name": "test_events",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_events_str_repr": {
            "name": "test_events_str_repr",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_NS": {
            "name": "test_NS",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env": {
            "name": "test_env",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env_add": {
            "name": "test_env_add",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_operation_str": {
            "name": "test_operation_str",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_list_to_cons": {
            "name": "test_list_to_cons",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_registry": {
            "name": "test_registry",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_workset": {
            "name": "test_workset",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_workset_requeue": {
            "name": "test_workset_requeue",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_workset_set_next": {
            "name": "test_workset_set_next",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_event.double": {
            "name": "double",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ev_": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "x": [
                    "Callable[[], T]",
                    "float"
                ]
            }
        },
        "test_event.triple": {
            "name": "triple",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ev_": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "x": [
                    "Callable[[], T]",
                    "float"
                ]
            }
        },
        "test_history.history": {
            "name": "history",
            "location": 87,
            "return": [
                "list[int]"
            ],
            "arguments": {}
        },
        "test_history.push": {
            "name": "push",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ev": [
                    "Callable",
                    "Callable[[], Any]",
                    "int",
                    "Set[str]"
                ],
                "x": [
                    "Callable[[], T]",
                    "float"
                ]
            }
        },
        "test_events.history": {
            "name": "history",
            "location": 104,
            "return": [
                "list[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_events.one": {
            "name": "one",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ev": [
                    "str"
                ]
            }
        },
        "test_events.two": {
            "name": "two",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ev": [
                    "str"
                ]
            }
        }
    },
    "myia-master/tests/utils/test_orderedset.py": {
        "TestOrderedset.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_add_new": {
            "name": "test_add_new",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_add_existing": {
            "name": "test_add_existing",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_discard": {
            "name": "test_discard",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_pop": {
            "name": "test_pop",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_remove": {
            "name": "test_remove",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_clear": {
            "name": "test_clear",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_copy": {
            "name": "test_copy",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_reduce": {
            "name": "test_reduce",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_difference_and_update": {
            "name": "test_difference_and_update",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_intersection_and_update": {
            "name": "test_intersection_and_update",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_issubset": {
            "name": "test_issubset",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_issuperset": {
            "name": "test_issuperset",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_symmetric_difference_and_update": {
            "name": "test_symmetric_difference_and_update",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_union_and_update": {
            "name": "test_union_and_update",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_union_with_iterable": {
            "name": "test_union_with_iterable",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_symmetric_difference_with_iterable": {
            "name": "test_symmetric_difference_with_iterable",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_intersection_with_iterable": {
            "name": "test_intersection_with_iterable",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_difference_with_iterable": {
            "name": "test_difference_with_iterable",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_isdisjoint": {
            "name": "test_isdisjoint",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_len": {
            "name": "test_len",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_contains": {
            "name": "test_contains",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_iter_mutated": {
            "name": "test_iter_mutated",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_iter_and_valid_order": {
            "name": "test_iter_and_valid_order",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_repr": {
            "name": "test_repr",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_eq": {
            "name": "test_eq",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderedset.test_ordering": {
            "name": "test_ordering",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/tests/utils/test_partial.py": {
        "test_Partial": {
            "name": "test_Partial",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Partial_class": {
            "name": "test_Partial_class",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Partial.f": {
            "name": "f",
            "location": 7,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_Partial.g": {
            "name": "g",
            "location": 34,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [],
                "y": [
                    "float"
                ]
            }
        },
        "test_Partial.h": {
            "name": "h",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_Partial_class.C.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_Partial_class.C.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myia-master/tests/utils/test_trace.py": {
        "day": {
            "name": "day",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "breakfast": {
            "name": "breakfast",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "second_breakfast": {
            "name": "second_breakfast",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "work": {
            "name": "work",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nhours": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_on": {
            "name": "test_on",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_explore": {
            "name": "test_explore",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_focus": {
            "name": "test_focus",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "badsleep": {
            "name": "badsleep",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_profile": {
            "name": "test_profile",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dotrace": {
            "name": "test_dotrace",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_listener": {
            "name": "test_listener",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_resolve": {
            "name": "test_resolve",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_TraceCollector.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "focus": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "_TraceCollector.collect": {
            "name": "collect",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TraceCollector.install": {
            "name": "install",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_listener.do_log": {
            "name": "do_log",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_event": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "myia-master/tests/utils/test_unify.py": {
        "test_Var": {
            "name": "test_Var",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RestrictedVar": {
            "name": "test_RestrictedVar",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_FilterVar": {
            "name": "test_FilterVar",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_Seq": {
            "name": "test_Seq",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SVar": {
            "name": "test_SVar",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_UnionVar": {
            "name": "test_UnionVar",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expandlist": {
            "name": "test_expandlist",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_noseq": {
            "name": "test_noseq",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_var": {
            "name": "test_var",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_svar": {
            "name": "test_svar",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uvar": {
            "name": "test_uvar",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_visit": {
            "name": "test_visit",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone": {
            "name": "test_clone",
            "location": 207,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_unify_union": {
            "name": "test_unify_union",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify_raw": {
            "name": "test_unify_raw",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify_svar": {
            "name": "test_unify_svar",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify2": {
            "name": "test_unify2",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify": {
            "name": "test_unify",
            "location": 410,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_unify_restrictedvars": {
            "name": "test_unify_restrictedvars",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify_filtervars": {
            "name": "test_unify_filtervars",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reify": {
            "name": "test_reify",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data": {
            "name": "test_data",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_eq": {
            "name": "test_custom_eq",
            "location": 491,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "L.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "L.__visit__": {
            "name": "__visit__",
            "location": 26,
            "return": [
                "_TL"
            ],
            "arguments": {
                "self": [
                    "_TL"
                ],
                "fn": []
            }
        },
        "test_FilterVar.floats": {
            "name": "floats",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_FilterVar.neg": {
            "name": "neg",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": []
            }
        },
        "test_FilterVar.large": {
            "name": "large",
            "location": 81,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "test_noseq.f": {
            "name": "f",
            "location": 152,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_noseq.f2": {
            "name": "f2",
            "location": 160,
            "return": [
                "Seq",
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_visit.f": {
            "name": "f",
            "location": 200,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_unify_filtervars.floats": {
            "name": "floats",
            "location": 442,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "test_unify_filtervars.neg": {
            "name": "neg",
            "location": 445,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "test_custom_eq.eq": {
            "name": "eq",
            "location": 492,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[List[str]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "myia-master/tests/utils/__init__.py": {}
}
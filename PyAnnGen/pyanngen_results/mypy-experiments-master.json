{
    "mypy-experiments-master/pyjwt-stubs/test.py": {
        "make_mypy_args": {
            "name": "make_mypy_args",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/bad-examples/encode_without_key.py": {},
    "mypy-experiments-master/pyjwt-stubs/bad-examples/non_string_jwt_keys.py": {},
    "mypy-experiments-master/pyjwt-stubs/good-examples/bytes_work.py": {},
    "mypy-experiments-master/pyjwt-stubs/good-examples/cg_django_uaa.py": {},
    "mypy-experiments-master/pyjwt-stubs/good-examples/installation.py": {},
    "mypy-experiments-master/pyjwt-stubs/good-examples/undocumented_but_public.py": {},
    "mypy-experiments-master/pyjwt-stubs/good-examples/usage_examples.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/algorithms.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/__init__.py": {
        "decode": {
            "name": "decode",
            "location": 5,
            "return": [],
            "arguments": {
                "jwt": [],
                "key": [],
                "verify": [],
                "algorithms": [],
                "options": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 10,
            "return": [],
            "arguments": {
                "payload": [],
                "key": [],
                "algorithm": [],
                "headers": [],
                "json_encoder": []
            }
        },
        "register_algorithm": {
            "name": "register_algorithm",
            "location": 14,
            "return": [],
            "arguments": {
                "alg_id": [],
                "alg_obj": []
            }
        },
        "unregister_algorithm": {
            "name": "unregister_algorithm",
            "location": 17,
            "return": [],
            "arguments": {
                "alg_id": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/contrib/__init__.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/contrib/algorithms/pycrypto.py": {
        "RSAAlgorithm.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/contrib/algorithms/py_ecdsa.py": {
        "ECAlgorithm.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt/contrib/algorithms/__init__.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/algorithms.py": {
        "get_default_algorithms": {
            "name": "get_default_algorithms",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "Algorithm.prepare_key": {
            "name": "prepare_key",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Algorithm.sign": {
            "name": "sign",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "Algorithm.verify": {
            "name": "verify",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        },
        "Algorithm.to_jwk": {
            "name": "to_jwk",
            "location": 20,
            "return": [],
            "arguments": {
                "key_obj": []
            }
        },
        "Algorithm.from_jwk": {
            "name": "from_jwk",
            "location": 22,
            "return": [],
            "arguments": {
                "jwk": []
            }
        },
        "NoneAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NoneAlgorithm.sign": {
            "name": "sign",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "NoneAlgorithm.verify": {
            "name": "verify",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        },
        "HMACAlgorithm.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        },
        "HMACAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HMACAlgorithm.to_jwk": {
            "name": "to_jwk",
            "location": 37,
            "return": [],
            "arguments": {
                "key_obj": []
            }
        },
        "HMACAlgorithm.from_jwk": {
            "name": "from_jwk",
            "location": 39,
            "return": [],
            "arguments": {
                "jwk": []
            }
        },
        "HMACAlgorithm.sign": {
            "name": "sign",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "HMACAlgorithm.verify": {
            "name": "verify",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        },
        "RSAAlgorithm.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        },
        "RSAAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RSAAlgorithm.to_jwk": {
            "name": "to_jwk",
            "location": 51,
            "return": [],
            "arguments": {
                "key_obj": []
            }
        },
        "RSAAlgorithm.from_jwk": {
            "name": "from_jwk",
            "location": 53,
            "return": [],
            "arguments": {
                "jwk": []
            }
        },
        "RSAAlgorithm.sign": {
            "name": "sign",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "RSAAlgorithm.verify": {
            "name": "verify",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        },
        "ECAlgorithm.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        },
        "ECAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ECAlgorithm.sign": {
            "name": "sign",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "ECAlgorithm.verify": {
            "name": "verify",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        },
        "RSAPSSAlgorithm.sign": {
            "name": "sign",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "RSAPSSAlgorithm.verify": {
            "name": "verify",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/api_jws.py": {
        "PyJWS.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "algorithms": [],
                "options": []
            }
        },
        "PyJWS.register_algorithm": {
            "name": "register_algorithm",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "alg_id": [],
                "alg_obj": []
            }
        },
        "PyJWS.unregister_algorithm": {
            "name": "unregister_algorithm",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "alg_id": []
            }
        },
        "PyJWS.get_algorithms": {
            "name": "get_algorithms",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyJWS.encode": {
            "name": "encode",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [],
                "key": [],
                "algorithm": [],
                "headers": [],
                "json_encoder": []
            }
        },
        "PyJWS.decode": {
            "name": "decode",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "jws": [],
                "key": [],
                "verify": [],
                "algorithms": [],
                "options": []
            }
        },
        "PyJWS.get_unverified_header": {
            "name": "get_unverified_header",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "jwt": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/api_jwt.py": {
        "PyJWT.encode": {
            "name": "encode",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [],
                "key": [],
                "algorithm": [],
                "headers": [],
                "json_encoder": []
            }
        },
        "PyJWT.decode": {
            "name": "decode",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "jwt": [],
                "key": [],
                "verify": [],
                "algorithms": [],
                "options": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/compat.py": {
        "timedelta_total_seconds": {
            "name": "timedelta_total_seconds",
            "location": 12,
            "return": [],
            "arguments": {
                "delta": []
            }
        },
        "bytes_from_int": {
            "name": "bytes_from_int",
            "location": 16,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/exceptions.py": {
        "MissingRequiredClaimError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "claim": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/utils.py": {
        "force_unicode": {
            "name": "force_unicode",
            "location": 7,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "force_bytes": {
            "name": "force_bytes",
            "location": 8,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "base64url_decode": {
            "name": "base64url_decode",
            "location": 9,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "base64url_encode": {
            "name": "base64url_encode",
            "location": 10,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "to_base64url_uint": {
            "name": "to_base64url_uint",
            "location": 11,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "from_base64url_uint": {
            "name": "from_base64url_uint",
            "location": 12,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "merge_dict": {
            "name": "merge_dict",
            "location": 13,
            "return": [],
            "arguments": {
                "original": [],
                "updates": []
            }
        },
        "number_to_bytes": {
            "name": "number_to_bytes",
            "location": 14,
            "return": [],
            "arguments": {
                "num": [],
                "num_bytes": []
            }
        },
        "bytes_to_number": {
            "name": "bytes_to_number",
            "location": 15,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "der_to_raw_signature": {
            "name": "der_to_raw_signature",
            "location": 16,
            "return": [],
            "arguments": {
                "der_sig": [],
                "curve": []
            }
        },
        "raw_to_der_signature": {
            "name": "raw_to_der_signature",
            "location": 17,
            "return": [],
            "arguments": {
                "raw_sig": [],
                "curve": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/__init__.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/__main__.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/contrib/__init__.py": {},
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/contrib/algorithms/pycrypto.py": {
        "RSAAlgorithm.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        },
        "RSAAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RSAAlgorithm.sign": {
            "name": "sign",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "RSAAlgorithm.verify": {
            "name": "verify",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/contrib/algorithms/py_ecdsa.py": {
        "ECAlgorithm.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "hash_alg": []
            }
        },
        "ECAlgorithm.prepare_key": {
            "name": "prepare_key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ECAlgorithm.sign": {
            "name": "sign",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": []
            }
        },
        "ECAlgorithm.verify": {
            "name": "verify",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "key": [],
                "sig": []
            }
        }
    },
    "mypy-experiments-master/pyjwt-stubs/mypy-stubs/jwt-stubgen/contrib/algorithms/__init__.py": {}
}
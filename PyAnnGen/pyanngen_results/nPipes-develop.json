{
    "nPipes-develop/setup.py": {},
    "nPipes-develop/npipes/configuration.py": {
        "strToB64Str": {
            "name": "strToB64Str",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "b64StrToStr": {
            "name": "b64StrToStr",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Configuration._toDict": {
            "name": "_toDict",
            "location": 67,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._fromDict": {
            "name": "_fromDict",
            "location": 75,
            "return": [
                "Configuration"
            ],
            "arguments": {
                "d": [
                    "Configuration"
                ]
            }
        }
    },
    "nPipes-develop/npipes/main.py": {
        "getArgs": {
            "name": "getArgs",
            "location": 17,
            "return": [
                "Tuple[(argparse.Namespace, List[str])]"
            ],
            "arguments": {}
        },
        "getFileConfig": {
            "name": "getFileConfig",
            "location": 23,
            "return": [
                "dict[, ]",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "getEnv": {
            "name": "getEnv",
            "location": 31,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "liftConfig": {
            "name": "liftConfig",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "configHash": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nPipes-develop/npipes/oc.py": {
        "onFailure": {
            "name": "onFailure",
            "location": 36,
            "return": [
                "Iterator[L]"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "onSuccess": {
            "name": "onSuccess",
            "location": 42,
            "return": [
                "Iterator[R]"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "failed": {
            "name": "failed",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "succeeded": {
            "name": "succeeded",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "mapFailed": {
            "name": "mapFailed",
            "location": 61,
            "return": [
                "Iterator[C]"
            ],
            "arguments": {
                "f": [
                    "Callable[([L], C)]"
                ],
                "ocs": [
                    "Sequence[Outcome[(L, R)]]"
                ]
            }
        },
        "mapSucceeded": {
            "name": "mapSucceeded",
            "location": 67,
            "return": [
                "Iterator[C]"
            ],
            "arguments": {
                "f": [
                    "Callable[([R], C)]"
                ],
                "ocs": [
                    "Sequence[Outcome[(L, R)]]"
                ]
            }
        },
        "Outcome.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Union[(L, R)]"
                ]
            }
        },
        "Outcome.bind": {
            "name": "bind",
            "location": 16,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "f": [
                    "Callable[([R], T)]"
                ]
            }
        },
        "Outcome.__rshift__": {
            "name": "__rshift__",
            "location": 22,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "f": [
                    "Callable[([R], T)]"
                ]
            }
        },
        "Failure.reason": {
            "name": "reason",
            "location": 28,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/outcome.py": {
        "onFailure": {
            "name": "onFailure",
            "location": 151,
            "return": [
                "Iterator[L]"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "onSuccess": {
            "name": "onSuccess",
            "location": 158,
            "return": [
                "Iterator[R]"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "failed": {
            "name": "failed",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "succeeded": {
            "name": "succeeded",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "oc": [
                    "Outcome[(L, R)]"
                ]
            }
        },
        "filterMapFailed": {
            "name": "filterMapFailed",
            "location": 183,
            "return": [
                "Iterator[C]"
            ],
            "arguments": {
                "f": [
                    "Callable[([L], C)]"
                ],
                "ocs": [
                    "Sequence[Outcome[(L, R)]]"
                ]
            }
        },
        "filterMapSucceeded": {
            "name": "filterMapSucceeded",
            "location": 194,
            "return": [
                "Iterator[C]"
            ],
            "arguments": {
                "f": [
                    "Callable[([R], C)]"
                ],
                "ocs": [
                    "Sequence[Outcome[(L, R)]]"
                ]
            }
        },
        "pureOutcome": {
            "name": "pureOutcome",
            "location": 205,
            "return": [
                "Outcome"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "list",
                    "list[]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "sentinels": [
                    "Sequence"
                ],
                "fstring": [
                    "str"
                ]
            }
        },
        "liftOutcome": {
            "name": "liftOutcome",
            "location": 230,
            "return": [
                "Callable[([R], Outcome[(Any, C)])]"
            ],
            "arguments": {
                "f": [
                    "Callable[([R], C)]"
                ],
                "sentinels": [
                    "Sequence"
                ],
                "fstring": [
                    "Optional[str]"
                ],
                "catch": [
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "_exceptionWrapped": {
            "name": "_exceptionWrapped",
            "location": 265,
            "return": [
                "Outcome[(Any, C)]"
            ],
            "arguments": {
                "f": [
                    "Callable[([R], C)]"
                ],
                "x": [
                    "R"
                ],
                "sentinels": [
                    "Sequence"
                ],
                "fstring": [
                    "str"
                ]
            }
        },
        "Outcome.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Outcome.then": {
            "name": "then",
            "location": 59,
            "return": [
                "Outcome[(L, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([R], Outcome[(L, Any)])]"
                ]
            }
        },
        "Outcome.__rshift__": {
            "name": "__rshift__",
            "location": 86,
            "return": [
                "Outcome[(L, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([R], Outcome[(L, Any)])]"
                ]
            }
        },
        "Failure.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "L"
                ]
            }
        },
        "Failure.reason": {
            "name": "reason",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Failure.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Success.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "R"
                ]
            }
        },
        "Success.value": {
            "name": "value",
            "location": 142,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Success.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/processor.py": {
        "scrapeOutput": {
            "name": "scrapeOutput",
            "location": 35,
            "return": [
                "npipes.outcome.Outcome[(str, str)]"
            ],
            "arguments": {
                "command": [
                    "npipes.message.header.Command"
                ],
                "cmdstdout": [
                    "str"
                ]
            }
        },
        "runProcess": {
            "name": "runProcess",
            "location": 50,
            "return": [
                "npipes.outcome.Outcome[(str, str)]"
            ],
            "arguments": {
                "command": [
                    "npipes.message.header.Command"
                ],
                "input": [
                    "Optional[bytes]"
                ],
                "timeout": [
                    "Optional[int]"
                ]
            }
        },
        "runCommand": {
            "name": "runCommand",
            "location": 71,
            "return": [
                "npipes.outcome.Outcome[(str, str)]"
            ],
            "arguments": {
                "command": [
                    "npipes.message.header.Command"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "toUniqueFile": {
            "name": "toUniqueFile",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "expandCommand": {
            "name": "expandCommand",
            "location": 93,
            "return": [
                "npipes.message.header.Command"
            ],
            "arguments": {
                "command": [
                    "npipes.message.header.Command"
                ],
                "assets": [
                    "Sequence[npipes.message.header.Asset]"
                ],
                "body": [
                    "str"
                ],
                "bodyfile": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "headerfile": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "outputfile": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "pid": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "triggerNextStep": {
            "name": "triggerNextStep",
            "location": 130,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "result": [
                    "npipes.message.header.Message"
                ]
            }
        },
        "makeMessage": {
            "name": "makeMessage",
            "location": 135,
            "return": [
                "npipes.outcome.Outcome[(str, npipes.message.header.Message)]"
            ],
            "arguments": {
                "result": [
                    "str"
                ],
                "newHeader": [
                    "npipes.message.header.Header"
                ]
            }
        },
        "extractBodyInString": {
            "name": "extractBodyInString",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "npipes.message.header.BodyInString"
                ]
            }
        },
        "extractBodyInAsset": {
            "name": "extractBodyInAsset",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "npipes.message.header.BodyInAsset"
                ],
                "assets": [
                    "Sequence[npipes.message.header.Asset]"
                ]
            }
        },
        "extractBody": {
            "name": "extractBody",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "npipes.message.header.Body"
                ],
                "assets": [
                    "Sequence[npipes.message.header.Asset]"
                ]
            }
        },
        "chooseCommand": {
            "name": "chooseCommand",
            "location": 165,
            "return": [
                "npipes.message.header.Command"
            ],
            "arguments": {
                "config": [
                    "npipes.configuration.Configuration"
                ],
                "command": [
                    "npipes.message.header.Command"
                ]
            }
        },
        "handleMessage": {
            "name": "handleMessage",
            "location": 177,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "msg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "runMessageProducer": {
            "name": "runMessageProducer",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "npipes.configuration.Configuration"
                ],
                "producer": [
                    "npipes.producers.producer.Producer"
                ]
            }
        }
    },
    "nPipes-develop/npipes/serialize.py": {
        "subtractDicts": {
            "name": "subtractDicts",
            "location": 87,
            "return": [
                "dict"
            ],
            "arguments": {
                "a": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Iterable",
                    "Dict[str, str]",
                    "Set[str]",
                    "str"
                ],
                "b": [
                    "str",
                    "dict",
                    "Iterable",
                    "Dict[str, str]",
                    "Set[str]"
                ]
            }
        },
        "toJson": {
            "name": "toJson",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Serializable"
                ]
            }
        },
        "toMinJson": {
            "name": "toMinJson",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Serializable"
                ]
            }
        },
        "fromJson": {
            "name": "fromJson",
            "location": 105,
            "return": [
                "Serializable"
            ],
            "arguments": {
                "jsonstr": [
                    "Union[(bytes, str)]"
                ],
                "typ": [
                    "Type[Serializable]"
                ]
            }
        },
        "Serializable._toDict": {
            "name": "_toDict",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Serializable._fromDict": {
            "name": "_fromDict",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Serializable"
                ]
            }
        },
        "Serializable._toMinDict": {
            "name": "_toMinDict",
            "location": 43,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable._with": {
            "name": "_with",
            "location": 65,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "paths": [
                    "Sequence[Tuple[(str, Any)]]"
                ]
            }
        },
        "toYaml": {
            "name": "toYaml",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Serializable"
                ]
            }
        },
        "toMinYaml": {
            "name": "toMinYaml",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Serializable"
                ]
            }
        },
        "fromYaml": {
            "name": "fromYaml",
            "location": 120,
            "return": [
                "Serializable"
            ],
            "arguments": {
                "yamlstr": [
                    "str"
                ],
                "typ": [
                    "Type[Serializable]"
                ]
            }
        }
    },
    "nPipes-develop/npipes/__init__.py": {},
    "nPipes-develop/npipes/assethandlers/assets.py": {
        "localizeAssets": {
            "name": "localizeAssets",
            "location": 26,
            "return": [
                "npipes.outcome.Outcome[(str, Sequence[Union[(str, pathlib.Path)]])]"
            ],
            "arguments": {
                "assets": [
                    "Sequence[npipes.message.header.Asset]"
                ]
            }
        },
        "logFailures": {
            "name": "logFailures",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "outcomes": [
                    "Sequence[npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]]"
                ],
                "assets": [
                    "Sequence[npipes.message.header.Asset]"
                ]
            }
        },
        "localizeAsset": {
            "name": "localizeAsset",
            "location": 49,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "localizeAssetTyped": {
            "name": "localizeAssetTyped",
            "location": 62,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "genUniqueAssetName": {
            "name": "genUniqueAssetName",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "randomName": {
            "name": "randomName",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "decompressIfRequired": {
            "name": "decompressIfRequired",
            "location": 105,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "fname": [
                    "Union[(str, pathlib.Path)]"
                ],
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "decompress": {
            "name": "decompress",
            "location": 116,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "decompressZip": {
            "name": "decompressZip",
            "location": 129,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "file": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "decompressGzip": {
            "name": "decompressGzip",
            "location": 145,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "file": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "renameToLocalTarget": {
            "name": "renameToLocalTarget",
            "location": 161,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "fname": [
                    "Union[(str, pathlib.Path)]"
                ],
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "getAssetRawExt": {
            "name": "getAssetRawExt",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "decideLocalTarget": {
            "name": "decideLocalTarget",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "decideLocalTargetTyped": {
            "name": "decideLocalTargetTyped",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "decideLocalTargetS3Asset": {
            "name": "decideLocalTargetS3Asset",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.S3Asset"
                ]
            }
        },
        "decideLocalTargetUriAsset": {
            "name": "decideLocalTargetUriAsset",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.UriAsset"
                ]
            }
        },
        "localizeS3Asset": {
            "name": "localizeS3Asset",
            "location": 73,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.S3Asset"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "localizeUriAsset": {
            "name": "localizeUriAsset",
            "location": 84,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.UriAsset"
                ],
                "target": [
                    "str"
                ]
            }
        }
    },
    "nPipes-develop/npipes/assethandlers/s3path.py": {
        "S3Path.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Union[(str, pathlib.Path, T)]"
                ],
                "k": [
                    "Optional[Union[(str, pathlib.Path)]]"
                ]
            }
        },
        "S3Path.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "tuple[typing.Union[float,float,float]]",
                    "Tuple[float, float, float]",
                    "T"
                ]
            }
        },
        "S3Path.add": {
            "name": "add",
            "location": 45,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "S3Path.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/assethandlers/s3utils.py": {
        "downloadFile": {
            "name": "downloadFile",
            "location": 15,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "remotePath": [
                    "Union[(str, npipes.assethandlers.s3path.S3Path)]"
                ],
                "localPath": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "isCurrent": {
            "name": "isCurrent",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "pth": [
                    "pathlib.Path"
                ]
            }
        },
        "fileMd5": {
            "name": "fileMd5",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "preparePath": {
            "name": "preparePath",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "pth": [
                    "pathlib.Path"
                ]
            }
        },
        "checkLocal": {
            "name": "checkLocal",
            "location": 62,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, pathlib.Path)])]"
            ],
            "arguments": {
                "pth": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "uploadFile": {
            "name": "uploadFile",
            "location": 73,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, npipes.assethandlers.s3path.S3Path)])]"
            ],
            "arguments": {
                "localPath": [
                    "Union[(str, pathlib.Path)]"
                ],
                "remotePath": [
                    "Union[(str, npipes.assethandlers.s3path.S3Path)]"
                ]
            }
        },
        "uploadData": {
            "name": "uploadData",
            "location": 92,
            "return": [
                "npipes.outcome.Outcome[(str, Union[(str, npipes.assethandlers.s3path.S3Path)])]"
            ],
            "arguments": {
                "data": [
                    "AnyStr"
                ],
                "remotePath": [
                    "Union[(str, npipes.assethandlers.s3path.S3Path)]"
                ]
            }
        }
    },
    "nPipes-develop/npipes/assethandlers/__init__.py": {},
    "nPipes-develop/npipes/message/ezqconverter.py": {
        "convertFromEZQ": {
            "name": "convertFromEZQ",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "s": [
                    "str",
                    "Exception"
                ]
            }
        },
        "writeEZQFullMessage": {
            "name": "writeEZQFullMessage",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "preamble": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "makeSteps": {
            "name": "makeSteps",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "dict[str, str]"
                ],
                "command": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "None",
                    "List[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]"
                ],
                "assets": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "None",
                    "List[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]"
                ],
                "ezqHeader": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Callable[[str], bool]",
                    "int"
                ]
            }
        },
        "fromString": {
            "name": "fromString",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "dict"
                ]
            }
        },
        "makeArglist": {
            "name": "makeArglist",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ezqHeader": [
                    "str"
                ]
            }
        },
        "substituteNpipesMarkers": {
            "name": "substituteNpipesMarkers",
            "location": 102,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "fullMsgFilename": [
                    "str"
                ],
                "arglist": [
                    "Sequence[str]"
                ]
            }
        },
        "makeBody": {
            "name": "makeBody",
            "location": 118,
            "return": [
                "Tuple[(npipes.message.header.Body, Sequence[npipes.message.header.Asset])]"
            ],
            "arguments": {
                "bodyStr": [
                    "str"
                ],
                "ezqHeader": [
                    "Dict[(str, Any)]"
                ],
                "assets": [
                    "List[npipes.message.header.Asset]"
                ]
            }
        },
        "makeAssets": {
            "name": "makeAssets",
            "location": 131,
            "return": [
                "List[npipes.message.header.Asset]"
            ],
            "arguments": {
                "ezqHeader": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "s3DictToAsset": {
            "name": "s3DictToAsset",
            "location": 139,
            "return": [
                "npipes.message.header.S3Asset"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ],
                "idint": [
                    "int"
                ]
            }
        },
        "convertToEZQ": {
            "name": "convertToEZQ",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        },
        "assetsToGetFiles": {
            "name": "assetsToGetFiles",
            "location": 196,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "assets": [
                    "List[npipes.message.header.Asset]"
                ]
            }
        },
        "assetToBkDict": {
            "name": "assetToBkDict",
            "location": 200,
            "return": [
                "dict"
            ],
            "arguments": {
                "asset": [
                    "npipes.message.header.Asset"
                ]
            }
        },
        "toEzqOrJsonLines": {
            "name": "toEzqOrJsonLines",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        }
    },
    "nPipes-develop/npipes/message/header.py": {
        "peekStep": {
            "name": "peekStep",
            "location": 644,
            "return": [
                "Step"
            ],
            "arguments": {
                "x": [
                    "Union[(Header, Message)]"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "popStep": {
            "name": "popStep",
            "location": 656,
            "return": [
                "Tuple[(Step, Header)]"
            ],
            "arguments": {
                "header": [
                    "Header"
                ]
            }
        },
        "peekTrigger": {
            "name": "peekTrigger",
            "location": 664,
            "return": [
                "Trigger"
            ],
            "arguments": {
                "x": [
                    "Union[(Header, Message)]"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Trigger.sendMessage": {
            "name": "sendMessage",
            "location": 47,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "Trigger._fromDict": {
            "name": "_fromDict",
            "location": 49,
            "return": [
                "Union[(TriggerFilesystem, TriggerGet, TriggerLambda, TriggerNothing, TriggerPost, TriggerSns, TriggerSqs)]"
            ],
            "arguments": {
                "d": [
                    "Trigger"
                ]
            }
        },
        "TriggerSns._toDict": {
            "name": "_toDict",
            "location": 82,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerSns._toMinDict": {
            "name": "_toMinDict",
            "location": 84,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerSns.sendMessage": {
            "name": "sendMessage",
            "location": 87,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerSqs._toDict": {
            "name": "_toDict",
            "location": 96,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerSqs._toMinDict": {
            "name": "_toMinDict",
            "location": 100,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerSqs.sendMessage": {
            "name": "sendMessage",
            "location": 103,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerGet._toDict": {
            "name": "_toDict",
            "location": 111,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerGet._toMinDict": {
            "name": "_toMinDict",
            "location": 113,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerGet.sendMessage": {
            "name": "sendMessage",
            "location": 116,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerPost._toDict": {
            "name": "_toDict",
            "location": 124,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerPost._toMinDict": {
            "name": "_toMinDict",
            "location": 126,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerPost.sendMessage": {
            "name": "sendMessage",
            "location": 129,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerLambda._toDict": {
            "name": "_toDict",
            "location": 137,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerLambda._toMinDict": {
            "name": "_toMinDict",
            "location": 139,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerLambda.sendMessage": {
            "name": "sendMessage",
            "location": 142,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerFilesystem._toDict": {
            "name": "_toDict",
            "location": 150,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerFilesystem._toMinDict": {
            "name": "_toMinDict",
            "location": 152,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerFilesystem.sendMessage": {
            "name": "sendMessage",
            "location": 155,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "M"
                ]
            }
        },
        "TriggerNothing._toDict": {
            "name": "_toDict",
            "location": 162,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TriggerNothing._toMinDict": {
            "name": "_toMinDict",
            "location": 164,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggerNothing.sendMessage": {
            "name": "sendMessage",
            "location": 167,
            "return": [
                "npipes.outcome.Outcome"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "M"
                ]
            }
        },
        "Decompression._toDict": {
            "name": "_toDict",
            "location": 180,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Decompression._fromDict": {
            "name": "_fromDict",
            "location": 183,
            "return": [
                "Decompression"
            ],
            "arguments": {
                "d": [
                    "Decompression"
                ]
            }
        },
        "AssetSettings._toDict": {
            "name": "_toDict",
            "location": 203,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "AssetSettings._fromDict": {
            "name": "_fromDict",
            "location": 207,
            "return": [
                "AssetSettings"
            ],
            "arguments": {
                "d": [
                    "AssetSettings"
                ]
            }
        },
        "Asset._fromDict": {
            "name": "_fromDict",
            "location": 223,
            "return": [
                "Union[(S3Asset, UriAsset)]"
            ],
            "arguments": {
                "d": [
                    "Asset"
                ]
            }
        },
        "S3Asset._toDict": {
            "name": "_toDict",
            "location": 244,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "pathlib.Path"
                ]
            }
        },
        "S3Asset._toMinDict": {
            "name": "_toMinDict",
            "location": 248,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Asset._fromDict": {
            "name": "_fromDict",
            "location": 252,
            "return": [
                "S3Asset"
            ],
            "arguments": {
                "d": [
                    "S3Asset"
                ]
            }
        },
        "UriAsset._toDict": {
            "name": "_toDict",
            "location": 270,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "bytes",
                    "bool",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "UriAsset._toMinDict": {
            "name": "_toMinDict",
            "location": 274,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UriAsset._fromDict": {
            "name": "_fromDict",
            "location": 278,
            "return": [
                "UriAsset"
            ],
            "arguments": {
                "d": [
                    "UriAsset"
                ]
            }
        },
        "Protocol._fromDict": {
            "name": "_fromDict",
            "location": 291,
            "return": [
                "Union[(ProtocolEZQ, ProtocolNpipes)]"
            ],
            "arguments": {
                "d": [
                    "Protocol"
                ]
            }
        },
        "ProtocolEZQ._toDict": {
            "name": "_toDict",
            "location": 301,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ProtocolEZQ._toMinDict": {
            "name": "_toMinDict",
            "location": 303,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtocolNpipes._toDict": {
            "name": "_toDict",
            "location": 308,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OutputChannel._fromDict": {
            "name": "_fromDict",
            "location": 321,
            "return": [
                "Union[(OutputChannelFile, OutputChannelStdout)]"
            ],
            "arguments": {
                "d": [
                    "OutputChannel"
                ]
            }
        },
        "OutputChannelStdout._toDict": {
            "name": "_toDict",
            "location": 330,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OutputChannelStdout._toMinDict": {
            "name": "_toMinDict",
            "location": 332,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputChannelFile._toDict": {
            "name": "_toDict",
            "location": 351,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OutputChannelFile._toMinDict": {
            "name": "_toMinDict",
            "location": 353,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._toDict": {
            "name": "_toDict",
            "location": 425,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "float",
                    "int",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Command._fromDict": {
            "name": "_fromDict",
            "location": 430,
            "return": [
                "Command"
            ],
            "arguments": {
                "d": [
                    "Command"
                ]
            }
        },
        "Step._toDict": {
            "name": "_toDict",
            "location": 463,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Step._fromDict": {
            "name": "_fromDict",
            "location": 472,
            "return": [
                "Step"
            ],
            "arguments": {
                "d": [
                    "Step"
                ]
            }
        },
        "Encoding._fromDict": {
            "name": "_fromDict",
            "location": 491,
            "return": [
                "Union[(EncodingGzB64, EncodingPlainText)]"
            ],
            "arguments": {
                "d": [
                    "Encoding"
                ]
            }
        },
        "EncodingPlainText._toDict": {
            "name": "_toDict",
            "location": 500,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "EncodingPlainText._toMinDict": {
            "name": "_toMinDict",
            "location": 502,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingGzB64._toDict": {
            "name": "_toDict",
            "location": 507,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "EncodingGzB64._toMinDict": {
            "name": "_toMinDict",
            "location": 509,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header._toDict": {
            "name": "_toDict",
            "location": 541,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]",
                    "set",
                    "set[]"
                ]
            }
        },
        "Header._fromDict": {
            "name": "_fromDict",
            "location": 544,
            "return": [
                "Header"
            ],
            "arguments": {
                "d": [
                    "Header"
                ]
            }
        },
        "Body._fromDict": {
            "name": "_fromDict",
            "location": 553,
            "return": [
                "Optional[Union[(BodyInAsset, BodyInString)]]"
            ],
            "arguments": {
                "d": [
                    "Body"
                ]
            }
        },
        "BodyInString._toDict": {
            "name": "_toDict",
            "location": 565,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "bytes",
                    "bool",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "BodyInString._fromDict": {
            "name": "_fromDict",
            "location": 569,
            "return": [
                "BodyInString"
            ],
            "arguments": {
                "d": [
                    "BodyInString"
                ]
            }
        },
        "BodyInAsset._toDict": {
            "name": "_toDict",
            "location": 578,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "bool",
                    "bytes",
                    "tuple[]",
                    "tuple",
                    "Iterable[str]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BodyInAsset._fromDict": {
            "name": "_fromDict",
            "location": 581,
            "return": [
                "BodyInAsset"
            ],
            "arguments": {
                "d": [
                    "BodyInAsset"
                ]
            }
        },
        "Message._toDict": {
            "name": "_toDict",
            "location": 593,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "meth": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Message._fromDict": {
            "name": "_fromDict",
            "location": 596,
            "return": [
                "Message"
            ],
            "arguments": {
                "d": [
                    "Message"
                ]
            }
        },
        "Message.toJsonLines": {
            "name": "toJsonLines",
            "location": 600,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Message.toMinJsonLines": {
            "name": "toMinJsonLines",
            "location": 605,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.fromJsonLines": {
            "name": "fromJsonLines",
            "location": 608,
            "return": [
                "Message"
            ],
            "arguments": {
                "s": [
                    "Message"
                ]
            }
        },
        "Message.fromStr": {
            "name": "fromStr",
            "location": 616,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "nPipes-develop/npipes/message/__init__.py": {},
    "nPipes-develop/npipes/producers/commandline.py": {
        "createProducer": {
            "name": "createProducer",
            "location": 14,
            "return": [
                "npipes.producers.producer.Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "ProducerCommandline.messages": {
            "name": "messages",
            "location": 22,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProducerCommandline._getCliMessage": {
            "name": "_getCliMessage",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "List[str]"
                ]
            }
        },
        "ProducerCommandline._readFile": {
            "name": "_readFile",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "nPipes-develop/npipes/producers/domainSocket.py": {
        "createProducer": {
            "name": "createProducer",
            "location": 11,
            "return": [
                "npipes.producers.producer.Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "ProducerDomainSocket.messages": {
            "name": "messages",
            "location": 19,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/producers/filesystem.py": {
        "createProducer": {
            "name": "createProducer",
            "location": 14,
            "return": [
                "npipes.producers.producer.Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "ProducerFilesystem.messages": {
            "name": "messages",
            "location": 26,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/producers/producer.py": {
        "envLower": {
            "name": "envLower",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "createProducer": {
            "name": "createProducer",
            "location": 53,
            "return": [
                "Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "Producer.messages": {
            "name": "messages",
            "location": 19,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/producers/sqs.py": {
        "createProducer": {
            "name": "createProducer",
            "location": 12,
            "return": [
                "npipes.producers.producer.Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "ProducerSqs.messages": {
            "name": "messages",
            "location": 21,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/producers/tcpSocket.py": {
        "createProducer": {
            "name": "createProducer",
            "location": 11,
            "return": [
                "npipes.producers.producer.Producer"
            ],
            "arguments": {
                "cliArgs": [
                    "List[str]"
                ],
                "producerArgs": [
                    "dict"
                ]
            }
        },
        "ProducerTcpSocket.messages": {
            "name": "messages",
            "location": 19,
            "return": [
                "Generator[(npipes.message.header.Message, npipes.outcome.Outcome, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/npipes/producers/__init__.py": {},
    "nPipes-develop/npipes/triggers/awsLambda.py": {
        "sendMessage": {
            "name": "sendMessage",
            "location": 10,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "tuple[str]",
                    "message.header.Message",
                    "None",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        }
    },
    "nPipes-develop/npipes/triggers/filesystem.py": {
        "sendMessage": {
            "name": "sendMessage",
            "location": 11,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "bool"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        }
    },
    "nPipes-develop/npipes/triggers/sns.py": {
        "sendMessage": {
            "name": "sendMessage",
            "location": 9,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "topic": [
                    "int",
                    "raiden.messages.Message",
                    "lowerpines.endpoints.message.Message"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        }
    },
    "nPipes-develop/npipes/triggers/sqs.py": {
        "sendMessage": {
            "name": "sendMessage",
            "location": 18,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "queuename": [
                    "str"
                ],
                "overflowPath": [
                    "str"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        },
        "overflow": {
            "name": "overflow",
            "location": 46,
            "return": [
                "npipes.message.header.Message"
            ],
            "arguments": {
                "message": [
                    "npipes.message.header.Message"
                ],
                "overflowPath": [
                    "str"
                ]
            }
        }
    },
    "nPipes-develop/npipes/triggers/uri.py": {
        "sendMessageGet": {
            "name": "sendMessageGet",
            "location": 7,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "uri": [
                    "typing.Callable[[], T]",
                    "bool",
                    "Callable[[], T]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        },
        "sendMessagePost": {
            "name": "sendMessagePost",
            "location": 11,
            "return": [
                "npipes.outcome.Outcome[(str, None)]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "message": [
                    "npipes.message.header.Message"
                ]
            }
        }
    },
    "nPipes-develop/npipes/triggers/__init__.py": {},
    "nPipes-develop/npipes/utils/all.py": {},
    "nPipes-develop/npipes/utils/autodeleter.py": {
        "autoDeleteFile": {
            "name": "autoDeleteFile",
            "location": 8,
            "return": [
                "typing.Iterator[npipes.utils.typeshed.pathlike]",
                "typing.Generator[typing.Union[list[],str,list[pathlib.Path],None]]"
            ],
            "arguments": {
                "path": [
                    "list[]",
                    "str",
                    "npipes.utils.typeshed.pathlike",
                    "list[pathlib.Path]",
                    "pathlib.Path",
                    "None",
                    "Union[List, str]",
                    "List[pathlib.Path]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "path.Path"
                ]
            }
        },
        "AutoDeleter.add": {
            "name": "add",
            "location": 34,
            "return": [
                "Union[(str, pathlib.Path)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "nPipes-develop/npipes/utils/compressionutils.py": {
        "toGzB64": {
            "name": "toGzB64",
            "location": 7,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "fromGzB64": {
            "name": "fromGzB64",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "b": [
                    "bytes"
                ]
            }
        }
    },
    "nPipes-develop/npipes/utils/fp.py": {
        "identity": {
            "name": "identity",
            "location": 5,
            "return": [
                "_T0"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "concurrentMap": {
            "name": "concurrentMap",
            "location": 9,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "f": [
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Callable[, ]",
                    "callable",
                    "T",
                    "list"
                ],
                "xs": [
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Callable[, ]",
                    "callable",
                    "T",
                    "list"
                ]
            }
        }
    },
    "nPipes-develop/npipes/utils/iteratorextras.py": {
        "consume": {
            "name": "consume",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "float",
                    "Collection[int]",
                    "typing.Collection"
                ],
                "n": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[bool]",
                    "Union[int, float]"
                ]
            }
        },
        "each": {
            "name": "each",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "T",
                    "bool"
                ],
                "iterator": [
                    "int",
                    "T",
                    "bool"
                ],
                "n": [
                    "int",
                    "None",
                    "T",
                    "bool"
                ]
            }
        }
    },
    "nPipes-develop/npipes/utils/track.py": {
        "track": {
            "name": "track",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "nPipes-develop/npipes/utils/typeshed.py": {},
    "nPipes-develop/npipes/utils/__init__.py": {},
    "nPipes-develop/tests/commandlineproducerTests.py": {},
    "nPipes-develop/tests/ezqconverterTests.py": {
        "EZQConverterTestCase.test_convertHeaderOnly": {
            "name": "test_convertHeaderOnly",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EZQConverterTestCase.test_convertFullMessage": {
            "name": "test_convertFullMessage",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EZQConverterTestCase.test_convertBigMessage": {
            "name": "test_convertBigMessage",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EZQConverterTestCase.test_convertToEZQFullMsg": {
            "name": "test_convertToEZQFullMsg",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/tests/processorTests.py": {
        "ProcessorTestCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_runProcess": {
            "name": "test_runProcess",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_runCommand": {
            "name": "test_runCommand",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_scrapeOutput_OCStdout": {
            "name": "test_scrapeOutput_OCStdout",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_scrapeOutput_OCFile": {
            "name": "test_scrapeOutput_OCFile",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.setupFancyCommand": {
            "name": "setupFancyCommand",
            "location": 53,
            "return": [
                "Tuple[(npipes.message.header.Command, npipes.message.header.Command, List[Union[(npipes.message.header.S3Asset, npipes.message.header.UriAsset)]])]"
            ],
            "arguments": {
                "self": [],
                "bodystr": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "ProcessorTestCase.test_chooseCommand_locked": {
            "name": "test_chooseCommand_locked",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_chooseCommand_unlocked": {
            "name": "test_chooseCommand_unlocked",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_expandCommand": {
            "name": "test_expandCommand",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_triggerNextStep": {
            "name": "test_triggerNextStep",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_extractBodyInString": {
            "name": "test_extractBodyInString",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_extractBodyInAsset": {
            "name": "test_extractBodyInAsset",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_extractBody": {
            "name": "test_extractBody",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_runMessageProducer": {
            "name": "test_runMessageProducer",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessorTestCase.test_runMessageProducerEzqStyle": {
            "name": "test_runMessageProducerEzqStyle",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nPipes-develop/tests/serializeTests.py": {
        "SerializeTestCase.test_toMinDict1": {
            "name": "test_toMinDict1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializeTestCase.test_toMinDict2": {
            "name": "test_toMinDict2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializeTestCase.test_toMinDict3": {
            "name": "test_toMinDict3",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializeTestCase.test_toMinDict4": {
            "name": "test_toMinDict4",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializeTestCase.test_with": {
            "name": "test_with",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
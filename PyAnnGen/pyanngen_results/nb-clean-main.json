{
    "nb-clean-main/noxfile.py": {
        "list_source_files": {
            "name": "list_source_files",
            "location": 12,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "flake8": {
            "name": "flake8",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "pylint": {
            "name": "pylint",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "pyupgrade": {
            "name": "pyupgrade",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "pytest": {
            "name": "pytest",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nb-clean-main/src/nb_clean/cli.py": {
        "exit_with_error": {
            "name": "exit_with_error",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "return_code": [
                    "int"
                ]
            }
        },
        "add_filter": {
            "name": "add_filter",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "remove_filter": {
            "name": "remove_filter",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 139,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nb-clean-main/src/nb_clean/__init__.py": {
        "git": {
            "name": "git",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "git_attributes_path": {
            "name": "git_attributes_path",
            "location": 60,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "pathlib.PurePosixPath",
                "Optional[pathlib.Path]"
            ],
            "arguments": {}
        },
        "add_git_filter": {
            "name": "add_git_filter",
            "location": 78,
            "return": [
                "Dict[str, Any]",
                "Optional[bool]",
                "Dict[str, Tuple[int, int]]",
                "str",
                "int"
            ],
            "arguments": {
                "remove_empty_cells": [
                    "Optional[Any]",
                    "IO",
                    "int",
                    "bool",
                    "str"
                ],
                "preserve_cell_metadata": [
                    "Optional[Any]",
                    "IO",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "remove_git_filter": {
            "name": "remove_git_filter",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_notebook": {
            "name": "check_notebook",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "notebook": [
                    "bool",
                    "int",
                    "str"
                ],
                "remove_empty_cells": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "preserve_cell_metadata": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "clean_notebook": {
            "name": "clean_notebook",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "notebook": [
                    "int",
                    "Callable",
                    "str"
                ],
                "remove_empty_cells": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "preserve_cell_metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GitProcessError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[IO[str]]"
                ],
                "return_code": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "nb-clean-main/src/nb_clean/__main__.py": {},
    "nb-clean-main/tests/conftest.py": {
        "read_notebook": {
            "name": "read_notebook",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "dirty_notebook": {
            "name": "dirty_notebook",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "dirty_notebook_with_version": {
            "name": "dirty_notebook_with_version",
            "location": 37,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "clean_notebook": {
            "name": "clean_notebook",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "clean_notebook_with_empty_cells": {
            "name": "clean_notebook_with_empty_cells",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "clean_notebook_with_metadata": {
            "name": "clean_notebook_with_metadata",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nb-clean-main/tests/test_check_notebook.py": {
        "test_check_notebook": {
            "name": "test_check_notebook",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "notebook": [
                    "bool",
                    "str",
                    "list[Exception]",
                    "List[Exception]",
                    "int"
                ],
                "is_clean": [
                    "bool",
                    "str",
                    "list[Exception]",
                    "List[Exception]",
                    "int"
                ]
            }
        },
        "test_check_notebook_remove_empty_cells": {
            "name": "test_check_notebook_remove_empty_cells",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_notebook_with_empty_cells": [],
                "remove_empty_cells": []
            }
        },
        "test_check_notebook_preserve_metadata": {
            "name": "test_check_notebook_preserve_metadata",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_notebook_with_metadata": [],
                "preserve_cell_metadata": []
            }
        }
    },
    "nb-clean-main/tests/test_clean_notebook.py": {
        "test_clean_notebook": {
            "name": "test_clean_notebook",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty_notebook": [
                    "str",
                    "float"
                ],
                "clean_notebook": [
                    "str",
                    "float"
                ]
            }
        },
        "test_clean_notebook_with_version": {
            "name": "test_clean_notebook_with_version",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty_notebook_with_version": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ],
                "clean_notebook": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "test_clean_notebook_remove_empty_cells": {
            "name": "test_clean_notebook_remove_empty_cells",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_notebook_with_empty_cells": [],
                "clean_notebook": []
            }
        },
        "test_clean_notebook_preserve_metadata": {
            "name": "test_clean_notebook_preserve_metadata",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty_notebook": [],
                "clean_notebook_with_metadata": []
            }
        }
    },
    "nb-clean-main/tests/test_cli.py": {
        "test_exit_with_error": {
            "name": "test_exit_with_error",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "int"
                ],
                "mocker": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_add_filter": {
            "name": "test_add_filter",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "test_add_filter_failure": {
            "name": "test_add_filter_failure",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_remove_filter": {
            "name": "test_remove_filter",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_remove_filter_failure": {
            "name": "test_remove_filter_failure",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_check_file": {
            "name": "test_check_file",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "notebook": [],
                "clean": []
            }
        },
        "test_check_stdin": {
            "name": "test_check_stdin",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "notebook": [],
                "clean": []
            }
        },
        "test_clean_file": {
            "name": "test_clean_file",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "dirty_notebook": [],
                "clean_notebook": [
                    "str",
                    "int"
                ]
            }
        },
        "test_clean_stdin": {
            "name": "test_clean_stdin",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ],
                "mocker": [],
                "dirty_notebook": [],
                "clean_notebook": []
            }
        },
        "test_parse_args": {
            "name": "test_parse_args",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "argparse.Namespace",
                    "list",
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "bool"
                ],
                "function": [
                    "dict[, ]",
                    "argparse.Namespace",
                    "tuple[]",
                    "dict",
                    "tuple"
                ],
                "inputs": [],
                "remove_empty_cells": [
                    "list[]",
                    "bool",
                    "list",
                    "str",
                    "argparse._SubParsersAction"
                ],
                "preserve_cell_metadata": [
                    "list[str]",
                    "argparse.Namespace",
                    "dict[, ]",
                    "List[str]",
                    "tuple[]",
                    "dict",
                    "tuple"
                ]
            }
        }
    },
    "nb-clean-main/tests/test_git_integration.py": {
        "test_git": {
            "name": "test_git",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_git_failure": {
            "name": "test_git_failure",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bytes",
                    "pytest_mock.plugin.MockFixture",
                    "pathlib.Path"
                ]
            }
        },
        "test_git_attributes_path": {
            "name": "test_git_attributes_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_add_git_filter": {
            "name": "test_add_git_filter",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "str"
                ],
                "tmp_path": [
                    "str"
                ],
                "remove_empty_cells": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "preserve_cell_metadata": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "filter_command": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_add_git_filter_idempotent": {
            "name": "test_add_git_filter_idempotent",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Optional[str]"
                ],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_remove_git_filter": {
            "name": "test_remove_git_filter",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "str",
                    "List[str]"
                ],
                "tmp_path": [
                    "Callable",
                    "pathlib.Path",
                    "str"
                ],
                "filter_exists": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "nb-clean-main/tests/__init__.py": {}
}